// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_info_def.proto

#ifndef PROTOBUF_msg_5finfo_5fdef_2eproto__INCLUDED
#define PROTOBUF_msg_5finfo_5fdef_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace msg_info_def {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
void protobuf_AssignDesc_msg_5finfo_5fdef_2eproto();
void protobuf_ShutdownFile_msg_5finfo_5fdef_2eproto();

class msg_account_info;
class msg_account_info_ex;
class msg_item;
class msg_quest_info;

// ===================================================================

class msg_account_info : public ::google::protobuf::Message {
 public:
  msg_account_info();
  virtual ~msg_account_info();

  msg_account_info(const msg_account_info& from);

  inline msg_account_info& operator=(const msg_account_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_account_info& default_instance();

  void Swap(msg_account_info* other);

  // implements Message ----------------------------------------------

  msg_account_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_account_info& from);
  void MergeFrom(const msg_account_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 aid = 1;
  inline bool has_aid() const;
  inline void clear_aid();
  static const int kAidFieldNumber = 1;
  inline ::google::protobuf::int32 aid() const;
  inline void set_aid(::google::protobuf::int32 value);

  // optional string channelId = 2;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIdFieldNumber = 2;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  inline void set_allocated_channelid(::std::string* channelid);

  // optional string nickname = 3;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int64 gold = 4;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 4;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int32 viplvl = 5;
  inline bool has_viplvl() const;
  inline void clear_viplvl();
  static const int kViplvlFieldNumber = 5;
  inline ::google::protobuf::int32 viplvl() const;
  inline void set_viplvl(::google::protobuf::int32 value);

  // optional int32 vipexp = 6;
  inline bool has_vipexp() const;
  inline void clear_vipexp();
  static const int kVipexpFieldNumber = 6;
  inline ::google::protobuf::int32 vipexp() const;
  inline void set_vipexp(::google::protobuf::int32 value);

  // optional string icon_custom = 8;
  inline bool has_icon_custom() const;
  inline void clear_icon_custom();
  static const int kIconCustomFieldNumber = 8;
  inline const ::std::string& icon_custom() const;
  inline void set_icon_custom(const ::std::string& value);
  inline void set_icon_custom(const char* value);
  inline void set_icon_custom(const char* value, size_t size);
  inline ::std::string* mutable_icon_custom();
  inline ::std::string* release_icon_custom();
  inline void set_allocated_icon_custom(::std::string* icon_custom);

  // optional int32 sex = 9;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 9;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 Ticket = 14;
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 14;
  inline ::google::protobuf::int32 ticket() const;
  inline void set_ticket(::google::protobuf::int32 value);

  // optional int32 curPhotoFrameId = 16;
  inline bool has_curphotoframeid() const;
  inline void clear_curphotoframeid();
  static const int kCurPhotoFrameIdFieldNumber = 16;
  inline ::google::protobuf::int32 curphotoframeid() const;
  inline void set_curphotoframeid(::google::protobuf::int32 value);

  // repeated int32 payids = 19;
  inline int payids_size() const;
  inline void clear_payids();
  static const int kPayidsFieldNumber = 19;
  inline ::google::protobuf::int32 payids(int index) const;
  inline void set_payids(int index, ::google::protobuf::int32 value);
  inline void add_payids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      payids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_payids();

  // optional bool isSafeDepositBoxPwdEmpty = 20;
  inline bool has_issafedepositboxpwdempty() const;
  inline void clear_issafedepositboxpwdempty();
  static const int kIsSafeDepositBoxPwdEmptyFieldNumber = 20;
  inline bool issafedepositboxpwdempty() const;
  inline void set_issafedepositboxpwdempty(bool value);

  // optional int64 safeBoxGold = 21;
  inline bool has_safeboxgold() const;
  inline void clear_safeboxgold();
  static const int kSafeBoxGoldFieldNumber = 21;
  inline ::google::protobuf::int64 safeboxgold() const;
  inline void set_safeboxgold(::google::protobuf::int64 value);

  // optional int32 collected = 22;
  inline bool has_collected() const;
  inline void clear_collected();
  static const int kCollectedFieldNumber = 22;
  inline ::google::protobuf::int32 collected() const;
  inline void set_collected(::google::protobuf::int32 value);

  // optional int32 updateNicknameCount = 26;
  inline bool has_updatenicknamecount() const;
  inline void clear_updatenicknamecount();
  static const int kUpdateNicknameCountFieldNumber = 26;
  inline ::google::protobuf::int32 updatenicknamecount() const;
  inline void set_updatenicknamecount(::google::protobuf::int32 value);

  // optional bool isBindMobilePhone = 27;
  inline bool has_isbindmobilephone() const;
  inline void clear_isbindmobilephone();
  static const int kIsBindMobilePhoneFieldNumber = 27;
  inline bool isbindmobilephone() const;
  inline void set_isbindmobilephone(bool value);

  // optional int32 create_time = 36;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 36;
  inline ::google::protobuf::int32 create_time() const;
  inline void set_create_time(::google::protobuf::int32 value);

  // optional int32 Privilege = 44;
  inline bool has_privilege() const;
  inline void clear_privilege();
  static const int kPrivilegeFieldNumber = 44;
  inline ::google::protobuf::int32 privilege() const;
  inline void set_privilege(::google::protobuf::int32 value);

  // optional int32 lastGameId = 46;
  inline bool has_lastgameid() const;
  inline void clear_lastgameid();
  static const int kLastGameIdFieldNumber = 46;
  inline ::google::protobuf::int32 lastgameid() const;
  inline void set_lastgameid(::google::protobuf::int32 value);

  // optional bool isFormal = 47 [default = false];
  inline bool has_isformal() const;
  inline void clear_isformal();
  static const int kIsFormalFieldNumber = 47;
  inline bool isformal() const;
  inline void set_isformal(bool value);

  // optional string BindInfo = 48;
  inline bool has_bindinfo() const;
  inline void clear_bindinfo();
  static const int kBindInfoFieldNumber = 48;
  inline const ::std::string& bindinfo() const;
  inline void set_bindinfo(const ::std::string& value);
  inline void set_bindinfo(const char* value);
  inline void set_bindinfo(const char* value, size_t size);
  inline ::std::string* mutable_bindinfo();
  inline ::std::string* release_bindinfo();
  inline void set_allocated_bindinfo(::std::string* bindinfo);

  // optional string RealName = 49;
  inline bool has_realname() const;
  inline void clear_realname();
  static const int kRealNameFieldNumber = 49;
  inline const ::std::string& realname() const;
  inline void set_realname(const ::std::string& value);
  inline void set_realname(const char* value);
  inline void set_realname(const char* value, size_t size);
  inline ::std::string* mutable_realname();
  inline ::std::string* release_realname();
  inline void set_allocated_realname(::std::string* realname);

  // optional int32 Recharged = 52;
  inline bool has_recharged() const;
  inline void clear_recharged();
  static const int kRechargedFieldNumber = 52;
  inline ::google::protobuf::int32 recharged() const;
  inline void set_recharged(::google::protobuf::int32 value);

  // optional int32 inviter_id = 53;
  inline bool has_inviter_id() const;
  inline void clear_inviter_id();
  static const int kInviterIdFieldNumber = 53;
  inline ::google::protobuf::int32 inviter_id() const;
  inline void set_inviter_id(::google::protobuf::int32 value);

  // optional int32 water = 54;
  inline bool has_water() const;
  inline void clear_water();
  static const int kWaterFieldNumber = 54;
  inline ::google::protobuf::int32 water() const;
  inline void set_water(::google::protobuf::int32 value);

  // optional int32 inviter_reward_count = 55;
  inline bool has_inviter_reward_count() const;
  inline void clear_inviter_reward_count();
  static const int kInviterRewardCountFieldNumber = 55;
  inline ::google::protobuf::int32 inviter_reward_count() const;
  inline void set_inviter_reward_count(::google::protobuf::int32 value);

  // optional int32 withdraw = 56;
  inline bool has_withdraw() const;
  inline void clear_withdraw();
  static const int kWithdrawFieldNumber = 56;
  inline ::google::protobuf::int32 withdraw() const;
  inline void set_withdraw(::google::protobuf::int32 value);

  // optional bool sevenday_done = 57;
  inline bool has_sevenday_done() const;
  inline void clear_sevenday_done();
  static const int kSevendayDoneFieldNumber = 57;
  inline bool sevenday_done() const;
  inline void set_sevenday_done(bool value);

  // repeated int32 quest_list = 58;
  inline int quest_list_size() const;
  inline void clear_quest_list();
  static const int kQuestListFieldNumber = 58;
  inline ::google::protobuf::int32 quest_list(int index) const;
  inline void set_quest_list(int index, ::google::protobuf::int32 value);
  inline void add_quest_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      quest_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_quest_list();

  // optional int32 limit_time_photo = 59;
  inline bool has_limit_time_photo() const;
  inline void clear_limit_time_photo();
  static const int kLimitTimePhotoFieldNumber = 59;
  inline ::google::protobuf::int32 limit_time_photo() const;
  inline void set_limit_time_photo(::google::protobuf::int32 value);

  // optional string ipinfo = 60;
  inline bool has_ipinfo() const;
  inline void clear_ipinfo();
  static const int kIpinfoFieldNumber = 60;
  inline const ::std::string& ipinfo() const;
  inline void set_ipinfo(const ::std::string& value);
  inline void set_ipinfo(const char* value);
  inline void set_ipinfo(const char* value, size_t size);
  inline ::std::string* mutable_ipinfo();
  inline ::std::string* release_ipinfo();
  inline void set_allocated_ipinfo(::std::string* ipinfo);

  // optional int64 inviter_reward = 61;
  inline bool has_inviter_reward() const;
  inline void clear_inviter_reward();
  static const int kInviterRewardFieldNumber = 61;
  inline ::google::protobuf::int64 inviter_reward() const;
  inline void set_inviter_reward(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:msg_info_def.msg_account_info)
 private:
  inline void set_has_aid();
  inline void clear_has_aid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_viplvl();
  inline void clear_has_viplvl();
  inline void set_has_vipexp();
  inline void clear_has_vipexp();
  inline void set_has_icon_custom();
  inline void clear_has_icon_custom();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_ticket();
  inline void clear_has_ticket();
  inline void set_has_curphotoframeid();
  inline void clear_has_curphotoframeid();
  inline void set_has_issafedepositboxpwdempty();
  inline void clear_has_issafedepositboxpwdempty();
  inline void set_has_safeboxgold();
  inline void clear_has_safeboxgold();
  inline void set_has_collected();
  inline void clear_has_collected();
  inline void set_has_updatenicknamecount();
  inline void clear_has_updatenicknamecount();
  inline void set_has_isbindmobilephone();
  inline void clear_has_isbindmobilephone();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_privilege();
  inline void clear_has_privilege();
  inline void set_has_lastgameid();
  inline void clear_has_lastgameid();
  inline void set_has_isformal();
  inline void clear_has_isformal();
  inline void set_has_bindinfo();
  inline void clear_has_bindinfo();
  inline void set_has_realname();
  inline void clear_has_realname();
  inline void set_has_recharged();
  inline void clear_has_recharged();
  inline void set_has_inviter_id();
  inline void clear_has_inviter_id();
  inline void set_has_water();
  inline void clear_has_water();
  inline void set_has_inviter_reward_count();
  inline void clear_has_inviter_reward_count();
  inline void set_has_withdraw();
  inline void clear_has_withdraw();
  inline void set_has_sevenday_done();
  inline void clear_has_sevenday_done();
  inline void set_has_limit_time_photo();
  inline void clear_has_limit_time_photo();
  inline void set_has_ipinfo();
  inline void clear_has_ipinfo();
  inline void set_has_inviter_reward();
  inline void clear_has_inviter_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* channelid_;
  ::std::string* nickname_;
  ::google::protobuf::int32 aid_;
  ::google::protobuf::int32 viplvl_;
  ::google::protobuf::int64 gold_;
  ::std::string* icon_custom_;
  ::google::protobuf::int32 vipexp_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 ticket_;
  ::google::protobuf::int32 curphotoframeid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > payids_;
  ::google::protobuf::int64 safeboxgold_;
  ::google::protobuf::int32 collected_;
  ::google::protobuf::int32 updatenicknamecount_;
  ::google::protobuf::int32 create_time_;
  ::google::protobuf::int32 privilege_;
  ::google::protobuf::int32 lastgameid_;
  bool issafedepositboxpwdempty_;
  bool isbindmobilephone_;
  bool isformal_;
  bool sevenday_done_;
  ::std::string* bindinfo_;
  ::std::string* realname_;
  ::google::protobuf::int32 recharged_;
  ::google::protobuf::int32 inviter_id_;
  ::google::protobuf::int32 water_;
  ::google::protobuf::int32 inviter_reward_count_;
  ::google::protobuf::int32 withdraw_;
  ::google::protobuf::int32 limit_time_photo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > quest_list_;
  ::std::string* ipinfo_;
  ::google::protobuf::int64 inviter_reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(32 + 31) / 32];

  friend void  protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  friend void protobuf_AssignDesc_msg_5finfo_5fdef_2eproto();
  friend void protobuf_ShutdownFile_msg_5finfo_5fdef_2eproto();

  void InitAsDefaultInstance();
  static msg_account_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_account_info_ex : public ::google::protobuf::Message {
 public:
  msg_account_info_ex();
  virtual ~msg_account_info_ex();

  msg_account_info_ex(const msg_account_info_ex& from);

  inline msg_account_info_ex& operator=(const msg_account_info_ex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_account_info_ex& default_instance();

  void Swap(msg_account_info_ex* other);

  // implements Message ----------------------------------------------

  msg_account_info_ex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_account_info_ex& from);
  void MergeFrom(const msg_account_info_ex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_robot = 1 [default = false];
  inline bool has_is_robot() const;
  inline void clear_is_robot();
  static const int kIsRobotFieldNumber = 1;
  inline bool is_robot() const;
  inline void set_is_robot(bool value);

  // optional int64 free_gold = 2;
  inline bool has_free_gold() const;
  inline void clear_free_gold();
  static const int kFreeGoldFieldNumber = 2;
  inline ::google::protobuf::int64 free_gold() const;
  inline void set_free_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:msg_info_def.msg_account_info_ex)
 private:
  inline void set_has_is_robot();
  inline void clear_has_is_robot();
  inline void set_has_free_gold();
  inline void clear_has_free_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 free_gold_;
  bool is_robot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  friend void protobuf_AssignDesc_msg_5finfo_5fdef_2eproto();
  friend void protobuf_ShutdownFile_msg_5finfo_5fdef_2eproto();

  void InitAsDefaultInstance();
  static msg_account_info_ex* default_instance_;
};
// -------------------------------------------------------------------

class msg_item : public ::google::protobuf::Message {
 public:
  msg_item();
  virtual ~msg_item();

  msg_item(const msg_item& from);

  inline msg_item& operator=(const msg_item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_item& default_instance();

  void Swap(msg_item* other);

  // implements Message ----------------------------------------------

  msg_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_item& from);
  void MergeFrom(const msg_item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:msg_info_def.msg_item)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  friend void protobuf_AssignDesc_msg_5finfo_5fdef_2eproto();
  friend void protobuf_ShutdownFile_msg_5finfo_5fdef_2eproto();

  void InitAsDefaultInstance();
  static msg_item* default_instance_;
};
// -------------------------------------------------------------------

class msg_quest_info : public ::google::protobuf::Message {
 public:
  msg_quest_info();
  virtual ~msg_quest_info();

  msg_quest_info(const msg_quest_info& from);

  inline msg_quest_info& operator=(const msg_quest_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_quest_info& default_instance();

  void Swap(msg_quest_info* other);

  // implements Message ----------------------------------------------

  msg_quest_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_quest_info& from);
  void MergeFrom(const msg_quest_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 questid = 1;
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestidFieldNumber = 1;
  inline ::google::protobuf::int32 questid() const;
  inline void set_questid(::google::protobuf::int32 value);

  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional bool received = 3;
  inline bool has_received() const;
  inline void clear_received();
  static const int kReceivedFieldNumber = 3;
  inline bool received() const;
  inline void set_received(bool value);

  // @@protoc_insertion_point(class_scope:msg_info_def.msg_quest_info)
 private:
  inline void set_has_questid();
  inline void clear_has_questid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_received();
  inline void clear_has_received();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 questid_;
  ::google::protobuf::int32 count_;
  bool received_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  friend void protobuf_AssignDesc_msg_5finfo_5fdef_2eproto();
  friend void protobuf_ShutdownFile_msg_5finfo_5fdef_2eproto();

  void InitAsDefaultInstance();
  static msg_quest_info* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_account_info

// optional int32 aid = 1;
inline bool msg_account_info::has_aid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_account_info::set_has_aid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_account_info::clear_has_aid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_account_info::clear_aid() {
  aid_ = 0;
  clear_has_aid();
}
inline ::google::protobuf::int32 msg_account_info::aid() const {
  return aid_;
}
inline void msg_account_info::set_aid(::google::protobuf::int32 value) {
  set_has_aid();
  aid_ = value;
}

// optional string channelId = 2;
inline bool msg_account_info::has_channelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_account_info::set_has_channelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_account_info::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_account_info::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& msg_account_info::channelid() const {
  return *channelid_;
}
inline void msg_account_info::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void msg_account_info::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void msg_account_info::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_account_info::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  return channelid_;
}
inline ::std::string* msg_account_info::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_account_info::set_allocated_channelid(::std::string* channelid) {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (channelid) {
    set_has_channelid();
    channelid_ = channelid;
  } else {
    clear_has_channelid();
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nickname = 3;
inline bool msg_account_info::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_account_info::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_account_info::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_account_info::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& msg_account_info::nickname() const {
  return *nickname_;
}
inline void msg_account_info::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void msg_account_info::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void msg_account_info::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_account_info::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* msg_account_info::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_account_info::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 gold = 4;
inline bool msg_account_info::has_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_account_info::set_has_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_account_info::clear_has_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_account_info::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 msg_account_info::gold() const {
  return gold_;
}
inline void msg_account_info::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 viplvl = 5;
inline bool msg_account_info::has_viplvl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_account_info::set_has_viplvl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_account_info::clear_has_viplvl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_account_info::clear_viplvl() {
  viplvl_ = 0;
  clear_has_viplvl();
}
inline ::google::protobuf::int32 msg_account_info::viplvl() const {
  return viplvl_;
}
inline void msg_account_info::set_viplvl(::google::protobuf::int32 value) {
  set_has_viplvl();
  viplvl_ = value;
}

// optional int32 vipexp = 6;
inline bool msg_account_info::has_vipexp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_account_info::set_has_vipexp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_account_info::clear_has_vipexp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_account_info::clear_vipexp() {
  vipexp_ = 0;
  clear_has_vipexp();
}
inline ::google::protobuf::int32 msg_account_info::vipexp() const {
  return vipexp_;
}
inline void msg_account_info::set_vipexp(::google::protobuf::int32 value) {
  set_has_vipexp();
  vipexp_ = value;
}

// optional string icon_custom = 8;
inline bool msg_account_info::has_icon_custom() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_account_info::set_has_icon_custom() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_account_info::clear_has_icon_custom() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_account_info::clear_icon_custom() {
  if (icon_custom_ != &::google::protobuf::internal::kEmptyString) {
    icon_custom_->clear();
  }
  clear_has_icon_custom();
}
inline const ::std::string& msg_account_info::icon_custom() const {
  return *icon_custom_;
}
inline void msg_account_info::set_icon_custom(const ::std::string& value) {
  set_has_icon_custom();
  if (icon_custom_ == &::google::protobuf::internal::kEmptyString) {
    icon_custom_ = new ::std::string;
  }
  icon_custom_->assign(value);
}
inline void msg_account_info::set_icon_custom(const char* value) {
  set_has_icon_custom();
  if (icon_custom_ == &::google::protobuf::internal::kEmptyString) {
    icon_custom_ = new ::std::string;
  }
  icon_custom_->assign(value);
}
inline void msg_account_info::set_icon_custom(const char* value, size_t size) {
  set_has_icon_custom();
  if (icon_custom_ == &::google::protobuf::internal::kEmptyString) {
    icon_custom_ = new ::std::string;
  }
  icon_custom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_account_info::mutable_icon_custom() {
  set_has_icon_custom();
  if (icon_custom_ == &::google::protobuf::internal::kEmptyString) {
    icon_custom_ = new ::std::string;
  }
  return icon_custom_;
}
inline ::std::string* msg_account_info::release_icon_custom() {
  clear_has_icon_custom();
  if (icon_custom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_custom_;
    icon_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_account_info::set_allocated_icon_custom(::std::string* icon_custom) {
  if (icon_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_custom_;
  }
  if (icon_custom) {
    set_has_icon_custom();
    icon_custom_ = icon_custom;
  } else {
    clear_has_icon_custom();
    icon_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 sex = 9;
inline bool msg_account_info::has_sex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_account_info::set_has_sex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_account_info::clear_has_sex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_account_info::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 msg_account_info::sex() const {
  return sex_;
}
inline void msg_account_info::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 Ticket = 14;
inline bool msg_account_info::has_ticket() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msg_account_info::set_has_ticket() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msg_account_info::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msg_account_info::clear_ticket() {
  ticket_ = 0;
  clear_has_ticket();
}
inline ::google::protobuf::int32 msg_account_info::ticket() const {
  return ticket_;
}
inline void msg_account_info::set_ticket(::google::protobuf::int32 value) {
  set_has_ticket();
  ticket_ = value;
}

// optional int32 curPhotoFrameId = 16;
inline bool msg_account_info::has_curphotoframeid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void msg_account_info::set_has_curphotoframeid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void msg_account_info::clear_has_curphotoframeid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void msg_account_info::clear_curphotoframeid() {
  curphotoframeid_ = 0;
  clear_has_curphotoframeid();
}
inline ::google::protobuf::int32 msg_account_info::curphotoframeid() const {
  return curphotoframeid_;
}
inline void msg_account_info::set_curphotoframeid(::google::protobuf::int32 value) {
  set_has_curphotoframeid();
  curphotoframeid_ = value;
}

// repeated int32 payids = 19;
inline int msg_account_info::payids_size() const {
  return payids_.size();
}
inline void msg_account_info::clear_payids() {
  payids_.Clear();
}
inline ::google::protobuf::int32 msg_account_info::payids(int index) const {
  return payids_.Get(index);
}
inline void msg_account_info::set_payids(int index, ::google::protobuf::int32 value) {
  payids_.Set(index, value);
}
inline void msg_account_info::add_payids(::google::protobuf::int32 value) {
  payids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_account_info::payids() const {
  return payids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_account_info::mutable_payids() {
  return &payids_;
}

// optional bool isSafeDepositBoxPwdEmpty = 20;
inline bool msg_account_info::has_issafedepositboxpwdempty() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void msg_account_info::set_has_issafedepositboxpwdempty() {
  _has_bits_[0] |= 0x00000800u;
}
inline void msg_account_info::clear_has_issafedepositboxpwdempty() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void msg_account_info::clear_issafedepositboxpwdempty() {
  issafedepositboxpwdempty_ = false;
  clear_has_issafedepositboxpwdempty();
}
inline bool msg_account_info::issafedepositboxpwdempty() const {
  return issafedepositboxpwdempty_;
}
inline void msg_account_info::set_issafedepositboxpwdempty(bool value) {
  set_has_issafedepositboxpwdempty();
  issafedepositboxpwdempty_ = value;
}

// optional int64 safeBoxGold = 21;
inline bool msg_account_info::has_safeboxgold() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void msg_account_info::set_has_safeboxgold() {
  _has_bits_[0] |= 0x00001000u;
}
inline void msg_account_info::clear_has_safeboxgold() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void msg_account_info::clear_safeboxgold() {
  safeboxgold_ = GOOGLE_LONGLONG(0);
  clear_has_safeboxgold();
}
inline ::google::protobuf::int64 msg_account_info::safeboxgold() const {
  return safeboxgold_;
}
inline void msg_account_info::set_safeboxgold(::google::protobuf::int64 value) {
  set_has_safeboxgold();
  safeboxgold_ = value;
}

// optional int32 collected = 22;
inline bool msg_account_info::has_collected() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void msg_account_info::set_has_collected() {
  _has_bits_[0] |= 0x00002000u;
}
inline void msg_account_info::clear_has_collected() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void msg_account_info::clear_collected() {
  collected_ = 0;
  clear_has_collected();
}
inline ::google::protobuf::int32 msg_account_info::collected() const {
  return collected_;
}
inline void msg_account_info::set_collected(::google::protobuf::int32 value) {
  set_has_collected();
  collected_ = value;
}

// optional int32 updateNicknameCount = 26;
inline bool msg_account_info::has_updatenicknamecount() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void msg_account_info::set_has_updatenicknamecount() {
  _has_bits_[0] |= 0x00004000u;
}
inline void msg_account_info::clear_has_updatenicknamecount() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void msg_account_info::clear_updatenicknamecount() {
  updatenicknamecount_ = 0;
  clear_has_updatenicknamecount();
}
inline ::google::protobuf::int32 msg_account_info::updatenicknamecount() const {
  return updatenicknamecount_;
}
inline void msg_account_info::set_updatenicknamecount(::google::protobuf::int32 value) {
  set_has_updatenicknamecount();
  updatenicknamecount_ = value;
}

// optional bool isBindMobilePhone = 27;
inline bool msg_account_info::has_isbindmobilephone() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void msg_account_info::set_has_isbindmobilephone() {
  _has_bits_[0] |= 0x00008000u;
}
inline void msg_account_info::clear_has_isbindmobilephone() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void msg_account_info::clear_isbindmobilephone() {
  isbindmobilephone_ = false;
  clear_has_isbindmobilephone();
}
inline bool msg_account_info::isbindmobilephone() const {
  return isbindmobilephone_;
}
inline void msg_account_info::set_isbindmobilephone(bool value) {
  set_has_isbindmobilephone();
  isbindmobilephone_ = value;
}

// optional int32 create_time = 36;
inline bool msg_account_info::has_create_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void msg_account_info::set_has_create_time() {
  _has_bits_[0] |= 0x00010000u;
}
inline void msg_account_info::clear_has_create_time() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void msg_account_info::clear_create_time() {
  create_time_ = 0;
  clear_has_create_time();
}
inline ::google::protobuf::int32 msg_account_info::create_time() const {
  return create_time_;
}
inline void msg_account_info::set_create_time(::google::protobuf::int32 value) {
  set_has_create_time();
  create_time_ = value;
}

// optional int32 Privilege = 44;
inline bool msg_account_info::has_privilege() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void msg_account_info::set_has_privilege() {
  _has_bits_[0] |= 0x00020000u;
}
inline void msg_account_info::clear_has_privilege() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void msg_account_info::clear_privilege() {
  privilege_ = 0;
  clear_has_privilege();
}
inline ::google::protobuf::int32 msg_account_info::privilege() const {
  return privilege_;
}
inline void msg_account_info::set_privilege(::google::protobuf::int32 value) {
  set_has_privilege();
  privilege_ = value;
}

// optional int32 lastGameId = 46;
inline bool msg_account_info::has_lastgameid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void msg_account_info::set_has_lastgameid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void msg_account_info::clear_has_lastgameid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void msg_account_info::clear_lastgameid() {
  lastgameid_ = 0;
  clear_has_lastgameid();
}
inline ::google::protobuf::int32 msg_account_info::lastgameid() const {
  return lastgameid_;
}
inline void msg_account_info::set_lastgameid(::google::protobuf::int32 value) {
  set_has_lastgameid();
  lastgameid_ = value;
}

// optional bool isFormal = 47 [default = false];
inline bool msg_account_info::has_isformal() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void msg_account_info::set_has_isformal() {
  _has_bits_[0] |= 0x00080000u;
}
inline void msg_account_info::clear_has_isformal() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void msg_account_info::clear_isformal() {
  isformal_ = false;
  clear_has_isformal();
}
inline bool msg_account_info::isformal() const {
  return isformal_;
}
inline void msg_account_info::set_isformal(bool value) {
  set_has_isformal();
  isformal_ = value;
}

// optional string BindInfo = 48;
inline bool msg_account_info::has_bindinfo() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void msg_account_info::set_has_bindinfo() {
  _has_bits_[0] |= 0x00100000u;
}
inline void msg_account_info::clear_has_bindinfo() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void msg_account_info::clear_bindinfo() {
  if (bindinfo_ != &::google::protobuf::internal::kEmptyString) {
    bindinfo_->clear();
  }
  clear_has_bindinfo();
}
inline const ::std::string& msg_account_info::bindinfo() const {
  return *bindinfo_;
}
inline void msg_account_info::set_bindinfo(const ::std::string& value) {
  set_has_bindinfo();
  if (bindinfo_ == &::google::protobuf::internal::kEmptyString) {
    bindinfo_ = new ::std::string;
  }
  bindinfo_->assign(value);
}
inline void msg_account_info::set_bindinfo(const char* value) {
  set_has_bindinfo();
  if (bindinfo_ == &::google::protobuf::internal::kEmptyString) {
    bindinfo_ = new ::std::string;
  }
  bindinfo_->assign(value);
}
inline void msg_account_info::set_bindinfo(const char* value, size_t size) {
  set_has_bindinfo();
  if (bindinfo_ == &::google::protobuf::internal::kEmptyString) {
    bindinfo_ = new ::std::string;
  }
  bindinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_account_info::mutable_bindinfo() {
  set_has_bindinfo();
  if (bindinfo_ == &::google::protobuf::internal::kEmptyString) {
    bindinfo_ = new ::std::string;
  }
  return bindinfo_;
}
inline ::std::string* msg_account_info::release_bindinfo() {
  clear_has_bindinfo();
  if (bindinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bindinfo_;
    bindinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_account_info::set_allocated_bindinfo(::std::string* bindinfo) {
  if (bindinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete bindinfo_;
  }
  if (bindinfo) {
    set_has_bindinfo();
    bindinfo_ = bindinfo;
  } else {
    clear_has_bindinfo();
    bindinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string RealName = 49;
inline bool msg_account_info::has_realname() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void msg_account_info::set_has_realname() {
  _has_bits_[0] |= 0x00200000u;
}
inline void msg_account_info::clear_has_realname() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void msg_account_info::clear_realname() {
  if (realname_ != &::google::protobuf::internal::kEmptyString) {
    realname_->clear();
  }
  clear_has_realname();
}
inline const ::std::string& msg_account_info::realname() const {
  return *realname_;
}
inline void msg_account_info::set_realname(const ::std::string& value) {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  realname_->assign(value);
}
inline void msg_account_info::set_realname(const char* value) {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  realname_->assign(value);
}
inline void msg_account_info::set_realname(const char* value, size_t size) {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  realname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_account_info::mutable_realname() {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  return realname_;
}
inline ::std::string* msg_account_info::release_realname() {
  clear_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = realname_;
    realname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_account_info::set_allocated_realname(::std::string* realname) {
  if (realname_ != &::google::protobuf::internal::kEmptyString) {
    delete realname_;
  }
  if (realname) {
    set_has_realname();
    realname_ = realname;
  } else {
    clear_has_realname();
    realname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 Recharged = 52;
inline bool msg_account_info::has_recharged() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void msg_account_info::set_has_recharged() {
  _has_bits_[0] |= 0x00400000u;
}
inline void msg_account_info::clear_has_recharged() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void msg_account_info::clear_recharged() {
  recharged_ = 0;
  clear_has_recharged();
}
inline ::google::protobuf::int32 msg_account_info::recharged() const {
  return recharged_;
}
inline void msg_account_info::set_recharged(::google::protobuf::int32 value) {
  set_has_recharged();
  recharged_ = value;
}

// optional int32 inviter_id = 53;
inline bool msg_account_info::has_inviter_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void msg_account_info::set_has_inviter_id() {
  _has_bits_[0] |= 0x00800000u;
}
inline void msg_account_info::clear_has_inviter_id() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void msg_account_info::clear_inviter_id() {
  inviter_id_ = 0;
  clear_has_inviter_id();
}
inline ::google::protobuf::int32 msg_account_info::inviter_id() const {
  return inviter_id_;
}
inline void msg_account_info::set_inviter_id(::google::protobuf::int32 value) {
  set_has_inviter_id();
  inviter_id_ = value;
}

// optional int32 water = 54;
inline bool msg_account_info::has_water() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void msg_account_info::set_has_water() {
  _has_bits_[0] |= 0x01000000u;
}
inline void msg_account_info::clear_has_water() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void msg_account_info::clear_water() {
  water_ = 0;
  clear_has_water();
}
inline ::google::protobuf::int32 msg_account_info::water() const {
  return water_;
}
inline void msg_account_info::set_water(::google::protobuf::int32 value) {
  set_has_water();
  water_ = value;
}

// optional int32 inviter_reward_count = 55;
inline bool msg_account_info::has_inviter_reward_count() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void msg_account_info::set_has_inviter_reward_count() {
  _has_bits_[0] |= 0x02000000u;
}
inline void msg_account_info::clear_has_inviter_reward_count() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void msg_account_info::clear_inviter_reward_count() {
  inviter_reward_count_ = 0;
  clear_has_inviter_reward_count();
}
inline ::google::protobuf::int32 msg_account_info::inviter_reward_count() const {
  return inviter_reward_count_;
}
inline void msg_account_info::set_inviter_reward_count(::google::protobuf::int32 value) {
  set_has_inviter_reward_count();
  inviter_reward_count_ = value;
}

// optional int32 withdraw = 56;
inline bool msg_account_info::has_withdraw() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void msg_account_info::set_has_withdraw() {
  _has_bits_[0] |= 0x04000000u;
}
inline void msg_account_info::clear_has_withdraw() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void msg_account_info::clear_withdraw() {
  withdraw_ = 0;
  clear_has_withdraw();
}
inline ::google::protobuf::int32 msg_account_info::withdraw() const {
  return withdraw_;
}
inline void msg_account_info::set_withdraw(::google::protobuf::int32 value) {
  set_has_withdraw();
  withdraw_ = value;
}

// optional bool sevenday_done = 57;
inline bool msg_account_info::has_sevenday_done() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void msg_account_info::set_has_sevenday_done() {
  _has_bits_[0] |= 0x08000000u;
}
inline void msg_account_info::clear_has_sevenday_done() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void msg_account_info::clear_sevenday_done() {
  sevenday_done_ = false;
  clear_has_sevenday_done();
}
inline bool msg_account_info::sevenday_done() const {
  return sevenday_done_;
}
inline void msg_account_info::set_sevenday_done(bool value) {
  set_has_sevenday_done();
  sevenday_done_ = value;
}

// repeated int32 quest_list = 58;
inline int msg_account_info::quest_list_size() const {
  return quest_list_.size();
}
inline void msg_account_info::clear_quest_list() {
  quest_list_.Clear();
}
inline ::google::protobuf::int32 msg_account_info::quest_list(int index) const {
  return quest_list_.Get(index);
}
inline void msg_account_info::set_quest_list(int index, ::google::protobuf::int32 value) {
  quest_list_.Set(index, value);
}
inline void msg_account_info::add_quest_list(::google::protobuf::int32 value) {
  quest_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_account_info::quest_list() const {
  return quest_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_account_info::mutable_quest_list() {
  return &quest_list_;
}

// optional int32 limit_time_photo = 59;
inline bool msg_account_info::has_limit_time_photo() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void msg_account_info::set_has_limit_time_photo() {
  _has_bits_[0] |= 0x20000000u;
}
inline void msg_account_info::clear_has_limit_time_photo() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void msg_account_info::clear_limit_time_photo() {
  limit_time_photo_ = 0;
  clear_has_limit_time_photo();
}
inline ::google::protobuf::int32 msg_account_info::limit_time_photo() const {
  return limit_time_photo_;
}
inline void msg_account_info::set_limit_time_photo(::google::protobuf::int32 value) {
  set_has_limit_time_photo();
  limit_time_photo_ = value;
}

// optional string ipinfo = 60;
inline bool msg_account_info::has_ipinfo() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void msg_account_info::set_has_ipinfo() {
  _has_bits_[0] |= 0x40000000u;
}
inline void msg_account_info::clear_has_ipinfo() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void msg_account_info::clear_ipinfo() {
  if (ipinfo_ != &::google::protobuf::internal::kEmptyString) {
    ipinfo_->clear();
  }
  clear_has_ipinfo();
}
inline const ::std::string& msg_account_info::ipinfo() const {
  return *ipinfo_;
}
inline void msg_account_info::set_ipinfo(const ::std::string& value) {
  set_has_ipinfo();
  if (ipinfo_ == &::google::protobuf::internal::kEmptyString) {
    ipinfo_ = new ::std::string;
  }
  ipinfo_->assign(value);
}
inline void msg_account_info::set_ipinfo(const char* value) {
  set_has_ipinfo();
  if (ipinfo_ == &::google::protobuf::internal::kEmptyString) {
    ipinfo_ = new ::std::string;
  }
  ipinfo_->assign(value);
}
inline void msg_account_info::set_ipinfo(const char* value, size_t size) {
  set_has_ipinfo();
  if (ipinfo_ == &::google::protobuf::internal::kEmptyString) {
    ipinfo_ = new ::std::string;
  }
  ipinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_account_info::mutable_ipinfo() {
  set_has_ipinfo();
  if (ipinfo_ == &::google::protobuf::internal::kEmptyString) {
    ipinfo_ = new ::std::string;
  }
  return ipinfo_;
}
inline ::std::string* msg_account_info::release_ipinfo() {
  clear_has_ipinfo();
  if (ipinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ipinfo_;
    ipinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_account_info::set_allocated_ipinfo(::std::string* ipinfo) {
  if (ipinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete ipinfo_;
  }
  if (ipinfo) {
    set_has_ipinfo();
    ipinfo_ = ipinfo;
  } else {
    clear_has_ipinfo();
    ipinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 inviter_reward = 61;
inline bool msg_account_info::has_inviter_reward() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void msg_account_info::set_has_inviter_reward() {
  _has_bits_[0] |= 0x80000000u;
}
inline void msg_account_info::clear_has_inviter_reward() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void msg_account_info::clear_inviter_reward() {
  inviter_reward_ = GOOGLE_LONGLONG(0);
  clear_has_inviter_reward();
}
inline ::google::protobuf::int64 msg_account_info::inviter_reward() const {
  return inviter_reward_;
}
inline void msg_account_info::set_inviter_reward(::google::protobuf::int64 value) {
  set_has_inviter_reward();
  inviter_reward_ = value;
}

// -------------------------------------------------------------------

// msg_account_info_ex

// optional bool is_robot = 1 [default = false];
inline bool msg_account_info_ex::has_is_robot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_account_info_ex::set_has_is_robot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_account_info_ex::clear_has_is_robot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_account_info_ex::clear_is_robot() {
  is_robot_ = false;
  clear_has_is_robot();
}
inline bool msg_account_info_ex::is_robot() const {
  return is_robot_;
}
inline void msg_account_info_ex::set_is_robot(bool value) {
  set_has_is_robot();
  is_robot_ = value;
}

// optional int64 free_gold = 2;
inline bool msg_account_info_ex::has_free_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_account_info_ex::set_has_free_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_account_info_ex::clear_has_free_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_account_info_ex::clear_free_gold() {
  free_gold_ = GOOGLE_LONGLONG(0);
  clear_has_free_gold();
}
inline ::google::protobuf::int64 msg_account_info_ex::free_gold() const {
  return free_gold_;
}
inline void msg_account_info_ex::set_free_gold(::google::protobuf::int64 value) {
  set_has_free_gold();
  free_gold_ = value;
}

// -------------------------------------------------------------------

// msg_item

// optional int32 id = 1;
inline bool msg_item::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_item::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_item::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_item::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 msg_item::id() const {
  return id_;
}
inline void msg_item::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 count = 2;
inline bool msg_item::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_item::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_item::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_item::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 msg_item::count() const {
  return count_;
}
inline void msg_item::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// msg_quest_info

// optional int32 questid = 1;
inline bool msg_quest_info::has_questid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_quest_info::set_has_questid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_quest_info::clear_has_questid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_quest_info::clear_questid() {
  questid_ = 0;
  clear_has_questid();
}
inline ::google::protobuf::int32 msg_quest_info::questid() const {
  return questid_;
}
inline void msg_quest_info::set_questid(::google::protobuf::int32 value) {
  set_has_questid();
  questid_ = value;
}

// optional int32 count = 2;
inline bool msg_quest_info::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_quest_info::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_quest_info::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_quest_info::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 msg_quest_info::count() const {
  return count_;
}
inline void msg_quest_info::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional bool received = 3;
inline bool msg_quest_info::has_received() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_quest_info::set_has_received() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_quest_info::clear_has_received() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_quest_info::clear_received() {
  received_ = false;
  clear_has_received();
}
inline bool msg_quest_info::received() const {
  return received_;
}
inline void msg_quest_info::set_received(bool value) {
  set_has_received();
  received_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg_info_def

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_5finfo_5fdef_2eproto__INCLUDED
