// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_zhajinhua_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_zhajinhua_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game_zhajinhua_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2l_get_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_room_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_room_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_check_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_check_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_check_state_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_check_state_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_join_table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_join_table_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_join_table_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_join_table_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_join_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_join_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_get_table_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_table_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_table_scene_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_table_scene_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_leave_table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_leave_table_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_leave_table_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_leave_table_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_leave_table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_leave_table_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_game_start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_game_start_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_set_ready_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_set_ready_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_set_ready_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_set_ready_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_player_declare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_player_declare_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_player_declare_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_player_declare_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notify_declare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notify_declare_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_compare_cards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_compare_cards_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_compare_cards_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_compare_cards_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_game_settlement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_game_settlement_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_change_table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_change_table_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_change_table_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_change_table_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_show_cards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_show_cards_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notify_show_cards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notify_show_cards_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fzhajinhua_5fprotocol_2eproto() {
  protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_zhajinhua_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2l_get_room_info_descriptor_ = file->message_type(0);
  static const int packetc2l_get_room_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, packet_id_),
  };
  packetc2l_get_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_room_info_descriptor_,
      packetc2l_get_room_info::default_instance_,
      packetc2l_get_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_room_info));
  packetl2c_get_room_info_result_descriptor_ = file->message_type(1);
  static const int packetl2c_get_room_info_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, room_list_),
  };
  packetl2c_get_room_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_room_info_result_descriptor_,
      packetl2c_get_room_info_result::default_instance_,
      packetl2c_get_room_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_room_info_result));
  packetc2l_check_state_descriptor_ = file->message_type(2);
  static const int packetc2l_check_state_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, packet_id_),
  };
  packetc2l_check_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_check_state_descriptor_,
      packetc2l_check_state::default_instance_,
      packetc2l_check_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_check_state));
  packetl2c_check_state_result_descriptor_ = file->message_type(3);
  static const int packetl2c_check_state_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, is_intable_),
  };
  packetl2c_check_state_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_check_state_result_descriptor_,
      packetl2c_check_state_result::default_instance_,
      packetl2c_check_state_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_check_state_result));
  packetc2l_join_table_descriptor_ = file->message_type(4);
  static const int packetc2l_join_table_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_join_table, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_join_table, roomid_),
  };
  packetc2l_join_table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_join_table_descriptor_,
      packetc2l_join_table::default_instance_,
      packetc2l_join_table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_join_table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_join_table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_join_table));
  packetl2c_join_table_result_descriptor_ = file->message_type(5);
  static const int packetl2c_join_table_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_join_table_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_join_table_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_join_table_result, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_join_table_result, table_state_),
  };
  packetl2c_join_table_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_join_table_result_descriptor_,
      packetl2c_join_table_result::default_instance_,
      packetl2c_join_table_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_join_table_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_join_table_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_join_table_result));
  packetl2c_bc_join_room_descriptor_ = file->message_type(6);
  static const int packetl2c_bc_join_room_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_join_room, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_join_room, player_info_),
  };
  packetl2c_bc_join_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_join_room_descriptor_,
      packetl2c_bc_join_room::default_instance_,
      packetl2c_bc_join_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_join_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_join_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_join_room));
  packetc2l_get_table_scene_info_descriptor_ = file->message_type(7);
  static const int packetc2l_get_table_scene_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_table_scene_info, packet_id_),
  };
  packetc2l_get_table_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_table_scene_info_descriptor_,
      packetc2l_get_table_scene_info::default_instance_,
      packetc2l_get_table_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_table_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_table_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_table_scene_info));
  packetl2c_get_table_scene_info_result_descriptor_ = file->message_type(8);
  static const int packetl2c_get_table_scene_info_result_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, table_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, total_bet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, cur_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, declare_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, player_card_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, cur_bet_),
  };
  packetl2c_get_table_scene_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_table_scene_info_result_descriptor_,
      packetl2c_get_table_scene_info_result::default_instance_,
      packetl2c_get_table_scene_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_table_scene_info_result));
  packetc2l_leave_table_descriptor_ = file->message_type(9);
  static const int packetc2l_leave_table_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_table, packet_id_),
  };
  packetc2l_leave_table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_leave_table_descriptor_,
      packetc2l_leave_table::default_instance_,
      packetc2l_leave_table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_leave_table));
  packetl2c_leave_table_result_descriptor_ = file->message_type(10);
  static const int packetl2c_leave_table_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_table_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_table_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_table_result, player_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_table_result, type_),
  };
  packetl2c_leave_table_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_leave_table_result_descriptor_,
      packetl2c_leave_table_result::default_instance_,
      packetl2c_leave_table_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_table_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_table_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_leave_table_result));
  packetl2c_bc_leave_table_descriptor_ = file->message_type(11);
  static const int packetl2c_bc_leave_table_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_leave_table, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_leave_table, player_id_),
  };
  packetl2c_bc_leave_table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_leave_table_descriptor_,
      packetl2c_bc_leave_table::default_instance_,
      packetl2c_bc_leave_table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_leave_table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_leave_table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_leave_table));
  packetl2c_game_start_descriptor_ = file->message_type(12);
  static const int packetl2c_game_start_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start, packet_id_),
  };
  packetl2c_game_start_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_game_start_descriptor_,
      packetl2c_game_start::default_instance_,
      packetl2c_game_start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_game_start));
  packetc2l_set_ready_descriptor_ = file->message_type(13);
  static const int packetc2l_set_ready_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_set_ready, packet_id_),
  };
  packetc2l_set_ready_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_set_ready_descriptor_,
      packetc2l_set_ready::default_instance_,
      packetc2l_set_ready_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_set_ready, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_set_ready, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_set_ready));
  packetl2c_set_ready_result_descriptor_ = file->message_type(14);
  static const int packetl2c_set_ready_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_set_ready_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_set_ready_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_set_ready_result, player_id_),
  };
  packetl2c_set_ready_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_set_ready_result_descriptor_,
      packetl2c_set_ready_result::default_instance_,
      packetl2c_set_ready_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_set_ready_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_set_ready_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_set_ready_result));
  packetc2l_player_declare_descriptor_ = file->message_type(15);
  static const int packetc2l_player_declare_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_player_declare, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_player_declare, declare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_player_declare, chips_),
  };
  packetc2l_player_declare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_player_declare_descriptor_,
      packetc2l_player_declare::default_instance_,
      packetc2l_player_declare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_player_declare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_player_declare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_player_declare));
  packetl2c_player_declare_result_descriptor_ = file->message_type(16);
  static const int packetl2c_player_declare_result_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_declare_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_declare_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_declare_result, declare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_declare_result, chips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_declare_result, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_declare_result, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_declare_result, card_type_),
  };
  packetl2c_player_declare_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_player_declare_result_descriptor_,
      packetl2c_player_declare_result::default_instance_,
      packetl2c_player_declare_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_declare_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_declare_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_player_declare_result));
  packetl2c_notify_declare_descriptor_ = file->message_type(17);
  static const int packetl2c_notify_declare_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_declare, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_declare, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_declare, cur_round_),
  };
  packetl2c_notify_declare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notify_declare_descriptor_,
      packetl2c_notify_declare::default_instance_,
      packetl2c_notify_declare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_declare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_declare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notify_declare));
  packetc2l_compare_cards_descriptor_ = file->message_type(18);
  static const int packetc2l_compare_cards_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_compare_cards, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_compare_cards, player_id_),
  };
  packetc2l_compare_cards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_compare_cards_descriptor_,
      packetc2l_compare_cards::default_instance_,
      packetc2l_compare_cards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_compare_cards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_compare_cards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_compare_cards));
  packetl2c_compare_cards_result_descriptor_ = file->message_type(19);
  static const int packetl2c_compare_cards_result_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_compare_cards_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_compare_cards_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_compare_cards_result, chips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_compare_cards_result, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_compare_cards_result, win_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_compare_cards_result, compare_result_),
  };
  packetl2c_compare_cards_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_compare_cards_result_descriptor_,
      packetl2c_compare_cards_result::default_instance_,
      packetl2c_compare_cards_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_compare_cards_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_compare_cards_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_compare_cards_result));
  packetl2c_game_settlement_descriptor_ = file->message_type(20);
  static const int packetl2c_game_settlement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_settlement, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_settlement, player_settlement_info_),
  };
  packetl2c_game_settlement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_game_settlement_descriptor_,
      packetl2c_game_settlement::default_instance_,
      packetl2c_game_settlement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_settlement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_settlement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_game_settlement));
  packetc2l_change_table_descriptor_ = file->message_type(21);
  static const int packetc2l_change_table_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_change_table, packet_id_),
  };
  packetc2l_change_table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_change_table_descriptor_,
      packetc2l_change_table::default_instance_,
      packetc2l_change_table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_change_table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_change_table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_change_table));
  packetl2c_change_table_result_descriptor_ = file->message_type(22);
  static const int packetl2c_change_table_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_change_table_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_change_table_result, result_),
  };
  packetl2c_change_table_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_change_table_result_descriptor_,
      packetl2c_change_table_result::default_instance_,
      packetl2c_change_table_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_change_table_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_change_table_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_change_table_result));
  packetc2l_show_cards_descriptor_ = file->message_type(23);
  static const int packetc2l_show_cards_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_show_cards, packet_id_),
  };
  packetc2l_show_cards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_show_cards_descriptor_,
      packetc2l_show_cards::default_instance_,
      packetc2l_show_cards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_show_cards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_show_cards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_show_cards));
  packetl2c_notify_show_cards_descriptor_ = file->message_type(24);
  static const int packetl2c_notify_show_cards_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_show_cards, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_show_cards, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_show_cards, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_show_cards, cards_),
  };
  packetl2c_notify_show_cards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notify_show_cards_descriptor_,
      packetl2c_notify_show_cards::default_instance_,
      packetl2c_notify_show_cards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_show_cards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_show_cards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notify_show_cards));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fzhajinhua_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_room_info_descriptor_, &packetc2l_get_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_room_info_result_descriptor_, &packetl2c_get_room_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_check_state_descriptor_, &packetc2l_check_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_check_state_result_descriptor_, &packetl2c_check_state_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_join_table_descriptor_, &packetc2l_join_table::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_join_table_result_descriptor_, &packetl2c_join_table_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_join_room_descriptor_, &packetl2c_bc_join_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_table_scene_info_descriptor_, &packetc2l_get_table_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_table_scene_info_result_descriptor_, &packetl2c_get_table_scene_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_leave_table_descriptor_, &packetc2l_leave_table::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_leave_table_result_descriptor_, &packetl2c_leave_table_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_leave_table_descriptor_, &packetl2c_bc_leave_table::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_game_start_descriptor_, &packetl2c_game_start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_set_ready_descriptor_, &packetc2l_set_ready::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_set_ready_result_descriptor_, &packetl2c_set_ready_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_player_declare_descriptor_, &packetc2l_player_declare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_player_declare_result_descriptor_, &packetl2c_player_declare_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notify_declare_descriptor_, &packetl2c_notify_declare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_compare_cards_descriptor_, &packetc2l_compare_cards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_compare_cards_result_descriptor_, &packetl2c_compare_cards_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_game_settlement_descriptor_, &packetl2c_game_settlement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_change_table_descriptor_, &packetc2l_change_table::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_change_table_result_descriptor_, &packetl2c_change_table_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_show_cards_descriptor_, &packetc2l_show_cards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notify_show_cards_descriptor_, &packetl2c_notify_show_cards::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fzhajinhua_5fprotocol_2eproto() {
  delete packetc2l_get_room_info::default_instance_;
  delete packetc2l_get_room_info_reflection_;
  delete packetl2c_get_room_info_result::default_instance_;
  delete packetl2c_get_room_info_result_reflection_;
  delete packetc2l_check_state::default_instance_;
  delete packetc2l_check_state_reflection_;
  delete packetl2c_check_state_result::default_instance_;
  delete packetl2c_check_state_result_reflection_;
  delete packetc2l_join_table::default_instance_;
  delete packetc2l_join_table_reflection_;
  delete packetl2c_join_table_result::default_instance_;
  delete packetl2c_join_table_result_reflection_;
  delete packetl2c_bc_join_room::default_instance_;
  delete packetl2c_bc_join_room_reflection_;
  delete packetc2l_get_table_scene_info::default_instance_;
  delete packetc2l_get_table_scene_info_reflection_;
  delete packetl2c_get_table_scene_info_result::default_instance_;
  delete packetl2c_get_table_scene_info_result_reflection_;
  delete packetc2l_leave_table::default_instance_;
  delete packetc2l_leave_table_reflection_;
  delete packetl2c_leave_table_result::default_instance_;
  delete packetl2c_leave_table_result_reflection_;
  delete packetl2c_bc_leave_table::default_instance_;
  delete packetl2c_bc_leave_table_reflection_;
  delete packetl2c_game_start::default_instance_;
  delete packetl2c_game_start_reflection_;
  delete packetc2l_set_ready::default_instance_;
  delete packetc2l_set_ready_reflection_;
  delete packetl2c_set_ready_result::default_instance_;
  delete packetl2c_set_ready_result_reflection_;
  delete packetc2l_player_declare::default_instance_;
  delete packetc2l_player_declare_reflection_;
  delete packetl2c_player_declare_result::default_instance_;
  delete packetl2c_player_declare_result_reflection_;
  delete packetl2c_notify_declare::default_instance_;
  delete packetl2c_notify_declare_reflection_;
  delete packetc2l_compare_cards::default_instance_;
  delete packetc2l_compare_cards_reflection_;
  delete packetl2c_compare_cards_result::default_instance_;
  delete packetl2c_compare_cards_result_reflection_;
  delete packetl2c_game_settlement::default_instance_;
  delete packetl2c_game_settlement_reflection_;
  delete packetc2l_change_table::default_instance_;
  delete packetc2l_change_table_reflection_;
  delete packetl2c_change_table_result::default_instance_;
  delete packetl2c_change_table_result_reflection_;
  delete packetc2l_show_cards::default_instance_;
  delete packetc2l_show_cards_reflection_;
  delete packetl2c_notify_show_cards::default_instance_;
  delete packetl2c_notify_show_cards_reflection_;
}

void protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::game_zhajinhua_protocols::protobuf_AddDesc_game_5fzhajinhua_5fdef_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035game_zhajinhua_protocol.proto\022\030game_zh"
    "ajinhua_protocols\032\030game_zhajinhua_def.pr"
    "oto\032\022msg_type_def.proto\"r\n\027packetc2l_get"
    "_room_info\022W\n\tpacket_id\030\001 \001(\0162+.game_zha"
    "jinhua_protocols.e_server_msg_type:\027e_ms"
    "t_c2l_get_room_info\"\223\001\n\036packetl2c_get_ro"
    "om_info_result\022^\n\tpacket_id\030\001 \001(\0162+.game"
    "_zhajinhua_protocols.e_server_msg_type:\036"
    "e_mst_l2c_get_room_info_result\022\021\n\troom_l"
    "ist\030\002 \003(\005\"n\n\025packetc2l_check_state\022U\n\tpa"
    "cket_id\030\001 \001(\0162+.game_zhajinhua_protocols"
    ".e_server_msg_type:\025e_mst_c2l_check_stat"
    "e\"\227\001\n\034packetl2c_check_state_result\022\\\n\tpa"
    "cket_id\030\001 \001(\0162+.game_zhajinhua_protocols"
    ".e_server_msg_type:\034e_mst_l2c_check_stat"
    "e_result\022\031\n\nis_intable\030\002 \001(\010:\005false\"|\n\024p"
    "acketc2l_join_table\022T\n\tpacket_id\030\001 \001(\0162+"
    ".game_zhajinhua_protocols.e_server_msg_t"
    "ype:\024e_mst_c2l_join_table\022\016\n\006roomId\030\002 \001("
    "\005\"\206\002\n\033packetl2c_join_table_result\022[\n\tpac"
    "ket_id\030\001 \001(\0162+.game_zhajinhua_protocols."
    "e_server_msg_type:\033e_mst_l2c_join_table_"
    "result\022:\n\006result\030\002 \001(\0162\036.msg_type_def.e_"
    "msg_result_def:\ne_rmt_fail\022\020\n\010table_id\030\003"
    " \001(\005\022<\n\013table_state\030\004 \001(\0162\'.game_zhajinh"
    "ua_protocols.e_table_state\"\260\001\n\026packetl2c"
    "_bc_join_room\022V\n\tpacket_id\030\001 \001(\0162+.game_"
    "zhajinhua_protocols.e_server_msg_type:\026e"
    "_mst_l2c_bc_join_room\022>\n\013player_info\030\002 \001"
    "(\0132).game_zhajinhua_protocols.msg_player"
    "_info\"\200\001\n\036packetc2l_get_table_scene_info"
    "\022^\n\tpacket_id\030\001 \001(\0162+.game_zhajinhua_pro"
    "tocols.e_server_msg_type:\036e_mst_c2l_get_"
    "table_scene_info\"\221\004\n%packetl2c_get_table"
    "_scene_info_result\022e\n\tpacket_id\030\001 \001(\0162+."
    "game_zhajinhua_protocols.e_server_msg_ty"
    "pe:%e_mst_l2c_get_table_scene_info_resul"
    "t\022:\n\006result\030\002 \001(\0162\036.msg_type_def.e_msg_r"
    "esult_def:\ne_rmt_fail\022\017\n\007room_id\030\003 \001(\005\022\020"
    "\n\010table_id\030\004 \001(\005\022<\n\013table_state\030\005 \001(\0162\'."
    "game_zhajinhua_protocols.e_table_state\022\021"
    "\n\ttotal_bet\030\006 \001(\005\022\021\n\tcur_round\030\007 \001(\005\022\031\n\016"
    "declare_player\030\010 \001(\005:\0010\022\014\n\004time\030\t \001(\005\022>\n"
    "\013player_list\030\n \003(\0132).game_zhajinhua_prot"
    "ocols.msg_player_info\022D\n\020player_card_lis"
    "t\030\013 \003(\0132*.game_zhajinhua_protocols.msg_p"
    "layer_cards\022\017\n\007cur_bet\030\014 \001(\005\"n\n\025packetc2"
    "l_leave_table\022U\n\tpacket_id\030\001 \001(\0162+.game_"
    "zhajinhua_protocols.e_server_msg_type:\025e"
    "_mst_c2l_leave_table\"\336\001\n\034packetl2c_leave"
    "_table_result\022\\\n\tpacket_id\030\001 \001(\0162+.game_"
    "zhajinhua_protocols.e_server_msg_type:\034e"
    "_mst_l2c_leave_table_result\022:\n\006result\030\002 "
    "\001(\0162\036.msg_type_def.e_msg_result_def:\ne_r"
    "mt_fail\022\023\n\013player_gold\030\003 \001(\005\022\017\n\004type\030\004 \001"
    "(\005:\0011\"\207\001\n\030packetl2c_bc_leave_table\022X\n\tpa"
    "cket_id\030\001 \001(\0162+.game_zhajinhua_protocols"
    ".e_server_msg_type:\030e_mst_l2c_bc_leave_t"
    "able\022\021\n\tplayer_id\030\002 \001(\005\"l\n\024packetl2c_gam"
    "e_start\022T\n\tpacket_id\030\001 \001(\0162+.game_zhajin"
    "hua_protocols.e_server_msg_type:\024e_mst_l"
    "2c_game_start\"j\n\023packetc2l_set_ready\022S\n\t"
    "packet_id\030\001 \001(\0162+.game_zhajinhua_protoco"
    "ls.e_server_msg_type:\023e_mst_c2l_set_read"
    "y\"\307\001\n\032packetl2c_set_ready_result\022Z\n\tpack"
    "et_id\030\001 \001(\0162+.game_zhajinhua_protocols.e"
    "_server_msg_type:\032e_mst_l2c_set_ready_re"
    "sult\022:\n\006result\030\002 \001(\0162\036.msg_type_def.e_ms"
    "g_result_def:\ne_rmt_fail\022\021\n\tplayer_id\030\003 "
    "\001(\005\"\300\001\n\030packetc2l_player_declare\022X\n\tpack"
    "et_id\030\001 \001(\0162+.game_zhajinhua_protocols.e"
    "_server_msg_type:\030e_mst_c2l_player_decla"
    "re\022;\n\007declare\030\002 \001(\0162*.game_zhajinhua_pro"
    "tocols.e_player_declare\022\r\n\005chips\030\003 \001(\005\"\277"
    "\002\n\037packetl2c_player_declare_result\022_\n\tpa"
    "cket_id\030\001 \001(\0162+.game_zhajinhua_protocols"
    ".e_server_msg_type:\037e_mst_l2c_player_dec"
    "lare_result\022:\n\006result\030\002 \001(\0162\036.msg_type_d"
    "ef.e_msg_result_def:\ne_rmt_fail\022;\n\007decla"
    "re\030\003 \001(\0162*.game_zhajinhua_protocols.e_pl"
    "ayer_declare\022\r\n\005chips\030\004 \001(\005\022\021\n\tplayer_id"
    "\030\005 \001(\005\022\r\n\005cards\030\006 \003(\005\022\021\n\tcard_type\030\007 \001(\005"
    "\"\232\001\n\030packetl2c_notify_declare\022X\n\tpacket_"
    "id\030\001 \001(\0162+.game_zhajinhua_protocols.e_se"
    "rver_msg_type:\030e_mst_12c_notify_declare\022"
    "\021\n\tplayer_id\030\002 \001(\005\022\021\n\tcur_round\030\003 \001(\005\"\205\001"
    "\n\027packetc2l_compare_cards\022W\n\tpacket_id\030\001"
    " \001(\0162+.game_zhajinhua_protocols.e_server"
    "_msg_type:\027e_mst_c2l_compare_cards\022\021\n\tpl"
    "ayer_id\030\002 \001(\005\"\267\002\n\036packetl2c_compare_card"
    "s_result\022^\n\tpacket_id\030\001 \001(\0162+.game_zhaji"
    "nhua_protocols.e_server_msg_type:\036e_mst_"
    "l2c_compare_cards_result\022:\n\006result\030\002 \001(\016"
    "2\036.msg_type_def.e_msg_result_def:\ne_rmt_"
    "fail\022\r\n\005chips\030\003 \001(\005\022\021\n\tplayer_id\030\004 \001(\005\022\022"
    "\n\nwin_player\030\005 \001(\005\022C\n\016compare_result\030\006 \003"
    "(\0132+.game_zhajinhua_protocols.msg_compar"
    "e_cards\"\307\001\n\031packetl2c_game_settlement\022Y\n"
    "\tpacket_id\030\001 \001(\0162+.game_zhajinhua_protoc"
    "ols.e_server_msg_type:\031e_mst_l2c_game_se"
    "ttlement\022O\n\026player_settlement_info\030\002 \003(\013"
    "2/.game_zhajinhua_protocols.msg_player_s"
    "ettlement\"p\n\026packetc2l_change_table\022V\n\tp"
    "acket_id\030\001 \001(\0162+.game_zhajinhua_protocol"
    "s.e_server_msg_type:\026e_mst_c2l_change_ta"
    "ble\"\272\001\n\035packetl2c_change_table_result\022]\n"
    "\tpacket_id\030\001 \001(\0162+.game_zhajinhua_protoc"
    "ols.e_server_msg_type:\035e_mst_l2c_change_"
    "table_result\022:\n\006result\030\002 \001(\0162\036.msg_type_"
    "def.e_msg_result_def:\ne_rmt_fail\"l\n\024pack"
    "etc2l_show_cards\022T\n\tpacket_id\030\001 \001(\0162+.ga"
    "me_zhajinhua_protocols.e_server_msg_type"
    ":\024e_mst_c2l_show_cards\"\330\001\n\033packetl2c_not"
    "ify_show_cards\022[\n\tpacket_id\030\001 \001(\0162+.game"
    "_zhajinhua_protocols.e_server_msg_type:\033"
    "e_mst_l2c_notify_show_cards\022:\n\006result\030\002 "
    "\001(\0162\036.msg_type_def.e_msg_result_def:\ne_r"
    "mt_fail\022\021\n\tplayer_id\030\003 \001(\005\022\r\n\005cards\030\004 \003("
    "\005", 4721);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_zhajinhua_protocol.proto", &protobuf_RegisterTypes);
  packetc2l_get_room_info::default_instance_ = new packetc2l_get_room_info();
  packetl2c_get_room_info_result::default_instance_ = new packetl2c_get_room_info_result();
  packetc2l_check_state::default_instance_ = new packetc2l_check_state();
  packetl2c_check_state_result::default_instance_ = new packetl2c_check_state_result();
  packetc2l_join_table::default_instance_ = new packetc2l_join_table();
  packetl2c_join_table_result::default_instance_ = new packetl2c_join_table_result();
  packetl2c_bc_join_room::default_instance_ = new packetl2c_bc_join_room();
  packetc2l_get_table_scene_info::default_instance_ = new packetc2l_get_table_scene_info();
  packetl2c_get_table_scene_info_result::default_instance_ = new packetl2c_get_table_scene_info_result();
  packetc2l_leave_table::default_instance_ = new packetc2l_leave_table();
  packetl2c_leave_table_result::default_instance_ = new packetl2c_leave_table_result();
  packetl2c_bc_leave_table::default_instance_ = new packetl2c_bc_leave_table();
  packetl2c_game_start::default_instance_ = new packetl2c_game_start();
  packetc2l_set_ready::default_instance_ = new packetc2l_set_ready();
  packetl2c_set_ready_result::default_instance_ = new packetl2c_set_ready_result();
  packetc2l_player_declare::default_instance_ = new packetc2l_player_declare();
  packetl2c_player_declare_result::default_instance_ = new packetl2c_player_declare_result();
  packetl2c_notify_declare::default_instance_ = new packetl2c_notify_declare();
  packetc2l_compare_cards::default_instance_ = new packetc2l_compare_cards();
  packetl2c_compare_cards_result::default_instance_ = new packetl2c_compare_cards_result();
  packetl2c_game_settlement::default_instance_ = new packetl2c_game_settlement();
  packetc2l_change_table::default_instance_ = new packetc2l_change_table();
  packetl2c_change_table_result::default_instance_ = new packetl2c_change_table_result();
  packetc2l_show_cards::default_instance_ = new packetc2l_show_cards();
  packetl2c_notify_show_cards::default_instance_ = new packetl2c_notify_show_cards();
  packetc2l_get_room_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_room_info_result::default_instance_->InitAsDefaultInstance();
  packetc2l_check_state::default_instance_->InitAsDefaultInstance();
  packetl2c_check_state_result::default_instance_->InitAsDefaultInstance();
  packetc2l_join_table::default_instance_->InitAsDefaultInstance();
  packetl2c_join_table_result::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_join_room::default_instance_->InitAsDefaultInstance();
  packetc2l_get_table_scene_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_table_scene_info_result::default_instance_->InitAsDefaultInstance();
  packetc2l_leave_table::default_instance_->InitAsDefaultInstance();
  packetl2c_leave_table_result::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_leave_table::default_instance_->InitAsDefaultInstance();
  packetl2c_game_start::default_instance_->InitAsDefaultInstance();
  packetc2l_set_ready::default_instance_->InitAsDefaultInstance();
  packetl2c_set_ready_result::default_instance_->InitAsDefaultInstance();
  packetc2l_player_declare::default_instance_->InitAsDefaultInstance();
  packetl2c_player_declare_result::default_instance_->InitAsDefaultInstance();
  packetl2c_notify_declare::default_instance_->InitAsDefaultInstance();
  packetc2l_compare_cards::default_instance_->InitAsDefaultInstance();
  packetl2c_compare_cards_result::default_instance_->InitAsDefaultInstance();
  packetl2c_game_settlement::default_instance_->InitAsDefaultInstance();
  packetc2l_change_table::default_instance_->InitAsDefaultInstance();
  packetl2c_change_table_result::default_instance_->InitAsDefaultInstance();
  packetc2l_show_cards::default_instance_->InitAsDefaultInstance();
  packetl2c_notify_show_cards::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fzhajinhua_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fzhajinhua_5fprotocol_2eproto {
  StaticDescriptorInitializer_game_5fzhajinhua_5fprotocol_2eproto() {
    protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  }
} static_descriptor_initializer_game_5fzhajinhua_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_room_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_room_info::packetc2l_get_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_room_info::InitAsDefaultInstance() {
}

packetc2l_get_room_info::packetc2l_get_room_info(const packetc2l_get_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_room_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10001;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_room_info::~packetc2l_get_room_info() {
  SharedDtor();
}

void packetc2l_get_room_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_room_info_descriptor_;
}

const packetc2l_get_room_info& packetc2l_get_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_room_info* packetc2l_get_room_info::default_instance_ = NULL;

packetc2l_get_room_info* packetc2l_get_room_info::New() const {
  return new packetc2l_get_room_info;
}

void packetc2l_get_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10001;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_room_info::MergeFrom(const packetc2l_get_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_room_info::CopyFrom(const packetc2l_get_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_room_info::IsInitialized() const {

  return true;
}

void packetc2l_get_room_info::Swap(packetc2l_get_room_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_room_info_descriptor_;
  metadata.reflection = packetc2l_get_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_room_info_result::kPacketIdFieldNumber;
const int packetl2c_get_room_info_result::kRoomListFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_room_info_result::packetl2c_get_room_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_get_room_info_result::InitAsDefaultInstance() {
}

packetl2c_get_room_info_result::packetl2c_get_room_info_result(const packetl2c_get_room_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_get_room_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15001;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_room_info_result::~packetl2c_get_room_info_result() {
  SharedDtor();
}

void packetl2c_get_room_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_get_room_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_room_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_room_info_result_descriptor_;
}

const packetl2c_get_room_info_result& packetl2c_get_room_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_get_room_info_result* packetl2c_get_room_info_result::default_instance_ = NULL;

packetl2c_get_room_info_result* packetl2c_get_room_info_result::New() const {
  return new packetl2c_get_room_info_result;
}

void packetl2c_get_room_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15001;
  }
  room_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_room_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_list;
        break;
      }

      // repeated int32 room_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_room_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_room_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_get_room_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated int32 room_list = 2;
  for (int i = 0; i < this->room_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->room_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_get_room_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated int32 room_list = 2;
  for (int i = 0; i < this->room_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->room_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_get_room_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated int32 room_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->room_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->room_list(i));
    }
    total_size += 1 * this->room_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_room_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_room_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_room_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_room_info_result::MergeFrom(const packetl2c_get_room_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_list_.MergeFrom(from.room_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_room_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_room_info_result::CopyFrom(const packetl2c_get_room_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_room_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_room_info_result::Swap(packetl2c_get_room_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    room_list_.Swap(&other->room_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_room_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_room_info_result_descriptor_;
  metadata.reflection = packetl2c_get_room_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_check_state::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_check_state::packetc2l_check_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_check_state::InitAsDefaultInstance() {
}

packetc2l_check_state::packetc2l_check_state(const packetc2l_check_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_check_state::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10012;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_check_state::~packetc2l_check_state() {
  SharedDtor();
}

void packetc2l_check_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_check_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_check_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_check_state_descriptor_;
}

const packetc2l_check_state& packetc2l_check_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_check_state* packetc2l_check_state::default_instance_ = NULL;

packetc2l_check_state* packetc2l_check_state::New() const {
  return new packetc2l_check_state;
}

void packetc2l_check_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10012;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_check_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_check_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_check_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_check_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_check_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_check_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_check_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_check_state::MergeFrom(const packetc2l_check_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_check_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_check_state::CopyFrom(const packetc2l_check_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_check_state::IsInitialized() const {

  return true;
}

void packetc2l_check_state::Swap(packetc2l_check_state* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_check_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_check_state_descriptor_;
  metadata.reflection = packetc2l_check_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_check_state_result::kPacketIdFieldNumber;
const int packetl2c_check_state_result::kIsIntableFieldNumber;
#endif  // !_MSC_VER

packetl2c_check_state_result::packetl2c_check_state_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_check_state_result::InitAsDefaultInstance() {
}

packetl2c_check_state_result::packetl2c_check_state_result(const packetl2c_check_state_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_check_state_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15017;
  is_intable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_check_state_result::~packetl2c_check_state_result() {
  SharedDtor();
}

void packetl2c_check_state_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_check_state_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_check_state_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_check_state_result_descriptor_;
}

const packetl2c_check_state_result& packetl2c_check_state_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_check_state_result* packetl2c_check_state_result::default_instance_ = NULL;

packetl2c_check_state_result* packetl2c_check_state_result::New() const {
  return new packetl2c_check_state_result;
}

void packetl2c_check_state_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15017;
    is_intable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_check_state_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_intable;
        break;
      }

      // optional bool is_intable = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_intable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_intable_)));
          set_has_is_intable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_check_state_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional bool is_intable = 2 [default = false];
  if (has_is_intable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_intable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_check_state_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional bool is_intable = 2 [default = false];
  if (has_is_intable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_intable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_check_state_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool is_intable = 2 [default = false];
    if (has_is_intable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_check_state_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_check_state_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_check_state_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_check_state_result::MergeFrom(const packetl2c_check_state_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_is_intable()) {
      set_is_intable(from.is_intable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_check_state_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_check_state_result::CopyFrom(const packetl2c_check_state_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_check_state_result::IsInitialized() const {

  return true;
}

void packetl2c_check_state_result::Swap(packetl2c_check_state_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(is_intable_, other->is_intable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_check_state_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_check_state_result_descriptor_;
  metadata.reflection = packetl2c_check_state_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_join_table::kPacketIdFieldNumber;
const int packetc2l_join_table::kRoomIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_join_table::packetc2l_join_table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_join_table::InitAsDefaultInstance() {
}

packetc2l_join_table::packetc2l_join_table(const packetc2l_join_table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_join_table::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10002;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_join_table::~packetc2l_join_table() {
  SharedDtor();
}

void packetc2l_join_table::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_join_table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_join_table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_join_table_descriptor_;
}

const packetc2l_join_table& packetc2l_join_table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_join_table* packetc2l_join_table::default_instance_ = NULL;

packetc2l_join_table* packetc2l_join_table::New() const {
  return new packetc2l_join_table;
}

void packetc2l_join_table::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10002;
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_join_table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_join_table];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomId;
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_join_table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_join_table];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 roomId = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_join_table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_join_table];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 roomId = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_join_table::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_join_table];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 roomId = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_join_table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_join_table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_join_table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_join_table::MergeFrom(const packetc2l_join_table& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_join_table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_join_table::CopyFrom(const packetc2l_join_table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_join_table::IsInitialized() const {

  return true;
}

void packetc2l_join_table::Swap(packetc2l_join_table* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_join_table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_join_table_descriptor_;
  metadata.reflection = packetc2l_join_table_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_join_table_result::kPacketIdFieldNumber;
const int packetl2c_join_table_result::kResultFieldNumber;
const int packetl2c_join_table_result::kTableIdFieldNumber;
const int packetl2c_join_table_result::kTableStateFieldNumber;
#endif  // !_MSC_VER

packetl2c_join_table_result::packetl2c_join_table_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_join_table_result::InitAsDefaultInstance() {
}

packetl2c_join_table_result::packetl2c_join_table_result(const packetl2c_join_table_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_join_table_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15002;
  result_ = 2;
  table_id_ = 0;
  table_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_join_table_result::~packetl2c_join_table_result() {
  SharedDtor();
}

void packetl2c_join_table_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_join_table_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_join_table_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_join_table_result_descriptor_;
}

const packetl2c_join_table_result& packetl2c_join_table_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_join_table_result* packetl2c_join_table_result::default_instance_ = NULL;

packetl2c_join_table_result* packetl2c_join_table_result::New() const {
  return new packetl2c_join_table_result;
}

void packetl2c_join_table_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15002;
    result_ = 2;
    table_id_ = 0;
    table_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_join_table_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_join_table_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_table_id;
        break;
      }

      // optional int32 table_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_table_state;
        break;
      }

      // optional .game_zhajinhua_protocols.e_table_state table_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_table_state_IsValid(value)) {
            set_table_state(static_cast< ::game_zhajinhua_protocols::e_table_state >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_join_table_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_join_table_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 table_id = 3;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->table_id(), output);
  }

  // optional .game_zhajinhua_protocols.e_table_state table_state = 4;
  if (has_table_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->table_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_join_table_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_join_table_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 table_id = 3;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->table_id(), target);
  }

  // optional .game_zhajinhua_protocols.e_table_state table_state = 4;
  if (has_table_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->table_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_join_table_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_join_table_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 table_id = 3;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

    // optional .game_zhajinhua_protocols.e_table_state table_state = 4;
    if (has_table_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->table_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_join_table_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_join_table_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_join_table_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_join_table_result::MergeFrom(const packetl2c_join_table_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_table_state()) {
      set_table_state(from.table_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_join_table_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_join_table_result::CopyFrom(const packetl2c_join_table_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_join_table_result::IsInitialized() const {

  return true;
}

void packetl2c_join_table_result::Swap(packetl2c_join_table_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(table_id_, other->table_id_);
    std::swap(table_state_, other->table_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_join_table_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_join_table_result_descriptor_;
  metadata.reflection = packetl2c_join_table_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_join_room::kPacketIdFieldNumber;
const int packetl2c_bc_join_room::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_join_room::packetl2c_bc_join_room()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_join_room::InitAsDefaultInstance() {
  player_info_ = const_cast< ::game_zhajinhua_protocols::msg_player_info*>(&::game_zhajinhua_protocols::msg_player_info::default_instance());
}

packetl2c_bc_join_room::packetl2c_bc_join_room(const packetl2c_bc_join_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_join_room::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15013;
  player_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_join_room::~packetl2c_bc_join_room() {
  SharedDtor();
}

void packetl2c_bc_join_room::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
  }
}

void packetl2c_bc_join_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_join_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_join_room_descriptor_;
}

const packetl2c_bc_join_room& packetl2c_bc_join_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_join_room* packetl2c_bc_join_room::default_instance_ = NULL;

packetl2c_bc_join_room* packetl2c_bc_join_room::New() const {
  return new packetl2c_bc_join_room;
}

void packetl2c_bc_join_room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15013;
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::game_zhajinhua_protocols::msg_player_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_join_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_join_room];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_info;
        break;
      }

      // optional .game_zhajinhua_protocols.msg_player_info player_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_join_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_join_room];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_zhajinhua_protocols.msg_player_info player_info = 2;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_join_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_join_room];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_zhajinhua_protocols.msg_player_info player_info = 2;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_join_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_join_room];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_zhajinhua_protocols.msg_player_info player_info = 2;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_join_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_join_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_join_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_join_room::MergeFrom(const packetl2c_bc_join_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_info()) {
      mutable_player_info()->::game_zhajinhua_protocols::msg_player_info::MergeFrom(from.player_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_join_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_join_room::CopyFrom(const packetl2c_bc_join_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_join_room::IsInitialized() const {

  return true;
}

void packetl2c_bc_join_room::Swap(packetl2c_bc_join_room* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_info_, other->player_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_join_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_join_room_descriptor_;
  metadata.reflection = packetl2c_bc_join_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_table_scene_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_table_scene_info::packetc2l_get_table_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_table_scene_info::InitAsDefaultInstance() {
}

packetc2l_get_table_scene_info::packetc2l_get_table_scene_info(const packetc2l_get_table_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_table_scene_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10009;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_table_scene_info::~packetc2l_get_table_scene_info() {
  SharedDtor();
}

void packetc2l_get_table_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_table_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_table_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_table_scene_info_descriptor_;
}

const packetc2l_get_table_scene_info& packetc2l_get_table_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_table_scene_info* packetc2l_get_table_scene_info::default_instance_ = NULL;

packetc2l_get_table_scene_info* packetc2l_get_table_scene_info::New() const {
  return new packetc2l_get_table_scene_info;
}

void packetc2l_get_table_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10009;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_table_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_scene_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_table_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_table_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_table_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_table_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_table_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_table_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_table_scene_info::MergeFrom(const packetc2l_get_table_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_table_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_table_scene_info::CopyFrom(const packetc2l_get_table_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_table_scene_info::IsInitialized() const {

  return true;
}

void packetc2l_get_table_scene_info::Swap(packetc2l_get_table_scene_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_table_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_table_scene_info_descriptor_;
  metadata.reflection = packetc2l_get_table_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_table_scene_info_result::kPacketIdFieldNumber;
const int packetl2c_get_table_scene_info_result::kResultFieldNumber;
const int packetl2c_get_table_scene_info_result::kRoomIdFieldNumber;
const int packetl2c_get_table_scene_info_result::kTableIdFieldNumber;
const int packetl2c_get_table_scene_info_result::kTableStateFieldNumber;
const int packetl2c_get_table_scene_info_result::kTotalBetFieldNumber;
const int packetl2c_get_table_scene_info_result::kCurRoundFieldNumber;
const int packetl2c_get_table_scene_info_result::kDeclarePlayerFieldNumber;
const int packetl2c_get_table_scene_info_result::kTimeFieldNumber;
const int packetl2c_get_table_scene_info_result::kPlayerListFieldNumber;
const int packetl2c_get_table_scene_info_result::kPlayerCardListFieldNumber;
const int packetl2c_get_table_scene_info_result::kCurBetFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_table_scene_info_result::packetl2c_get_table_scene_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_get_table_scene_info_result::InitAsDefaultInstance() {
}

packetl2c_get_table_scene_info_result::packetl2c_get_table_scene_info_result(const packetl2c_get_table_scene_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_get_table_scene_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15011;
  result_ = 2;
  room_id_ = 0;
  table_id_ = 0;
  table_state_ = 0;
  total_bet_ = 0;
  cur_round_ = 0;
  declare_player_ = 0;
  time_ = 0;
  cur_bet_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_table_scene_info_result::~packetl2c_get_table_scene_info_result() {
  SharedDtor();
}

void packetl2c_get_table_scene_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_get_table_scene_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_table_scene_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_table_scene_info_result_descriptor_;
}

const packetl2c_get_table_scene_info_result& packetl2c_get_table_scene_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_get_table_scene_info_result* packetl2c_get_table_scene_info_result::default_instance_ = NULL;

packetl2c_get_table_scene_info_result* packetl2c_get_table_scene_info_result::New() const {
  return new packetl2c_get_table_scene_info_result;
}

void packetl2c_get_table_scene_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15011;
    result_ = 2;
    room_id_ = 0;
    table_id_ = 0;
    table_state_ = 0;
    total_bet_ = 0;
    cur_round_ = 0;
    declare_player_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    time_ = 0;
    cur_bet_ = 0;
  }
  player_list_.Clear();
  player_card_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_table_scene_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_table_scene_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_table_id;
        break;
      }

      // optional int32 table_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_table_state;
        break;
      }

      // optional .game_zhajinhua_protocols.e_table_state table_state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_table_state_IsValid(value)) {
            set_table_state(static_cast< ::game_zhajinhua_protocols::e_table_state >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total_bet;
        break;
      }

      // optional int32 total_bet = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_bet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_bet_)));
          set_has_total_bet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cur_round;
        break;
      }

      // optional int32 cur_round = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_round_)));
          set_has_cur_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_declare_player;
        break;
      }

      // optional int32 declare_player = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_declare_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &declare_player_)));
          set_has_declare_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional int32 time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_player_list;
        break;
      }

      // repeated .game_zhajinhua_protocols.msg_player_info player_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_player_list;
        if (input->ExpectTag(90)) goto parse_player_card_list;
        break;
      }

      // repeated .game_zhajinhua_protocols.msg_player_cards player_card_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_card_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_card_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_player_card_list;
        if (input->ExpectTag(96)) goto parse_cur_bet;
        break;
      }

      // optional int32 cur_bet = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_bet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_bet_)));
          set_has_cur_bet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_get_table_scene_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_table_scene_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  // optional int32 table_id = 4;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->table_id(), output);
  }

  // optional .game_zhajinhua_protocols.e_table_state table_state = 5;
  if (has_table_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->table_state(), output);
  }

  // optional int32 total_bet = 6;
  if (has_total_bet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->total_bet(), output);
  }

  // optional int32 cur_round = 7;
  if (has_cur_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cur_round(), output);
  }

  // optional int32 declare_player = 8 [default = 0];
  if (has_declare_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->declare_player(), output);
  }

  // optional int32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->time(), output);
  }

  // repeated .game_zhajinhua_protocols.msg_player_info player_list = 10;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->player_list(i), output);
  }

  // repeated .game_zhajinhua_protocols.msg_player_cards player_card_list = 11;
  for (int i = 0; i < this->player_card_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->player_card_list(i), output);
  }

  // optional int32 cur_bet = 12;
  if (has_cur_bet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cur_bet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_get_table_scene_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_table_scene_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  // optional int32 table_id = 4;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->table_id(), target);
  }

  // optional .game_zhajinhua_protocols.e_table_state table_state = 5;
  if (has_table_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->table_state(), target);
  }

  // optional int32 total_bet = 6;
  if (has_total_bet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->total_bet(), target);
  }

  // optional int32 cur_round = 7;
  if (has_cur_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cur_round(), target);
  }

  // optional int32 declare_player = 8 [default = 0];
  if (has_declare_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->declare_player(), target);
  }

  // optional int32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->time(), target);
  }

  // repeated .game_zhajinhua_protocols.msg_player_info player_list = 10;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->player_list(i), target);
  }

  // repeated .game_zhajinhua_protocols.msg_player_cards player_card_list = 11;
  for (int i = 0; i < this->player_card_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->player_card_list(i), target);
  }

  // optional int32 cur_bet = 12;
  if (has_cur_bet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->cur_bet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_get_table_scene_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_table_scene_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int32 table_id = 4;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

    // optional .game_zhajinhua_protocols.e_table_state table_state = 5;
    if (has_table_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->table_state());
    }

    // optional int32 total_bet = 6;
    if (has_total_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_bet());
    }

    // optional int32 cur_round = 7;
    if (has_cur_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_round());
    }

    // optional int32 declare_player = 8 [default = 0];
    if (has_declare_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->declare_player());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 cur_bet = 12;
    if (has_cur_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_bet());
    }

  }
  // repeated .game_zhajinhua_protocols.msg_player_info player_list = 10;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  // repeated .game_zhajinhua_protocols.msg_player_cards player_card_list = 11;
  total_size += 1 * this->player_card_list_size();
  for (int i = 0; i < this->player_card_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_card_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_table_scene_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_table_scene_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_table_scene_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_table_scene_info_result::MergeFrom(const packetl2c_get_table_scene_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  player_card_list_.MergeFrom(from.player_card_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_table_state()) {
      set_table_state(from.table_state());
    }
    if (from.has_total_bet()) {
      set_total_bet(from.total_bet());
    }
    if (from.has_cur_round()) {
      set_cur_round(from.cur_round());
    }
    if (from.has_declare_player()) {
      set_declare_player(from.declare_player());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_cur_bet()) {
      set_cur_bet(from.cur_bet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_table_scene_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_table_scene_info_result::CopyFrom(const packetl2c_get_table_scene_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_table_scene_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_table_scene_info_result::Swap(packetl2c_get_table_scene_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(room_id_, other->room_id_);
    std::swap(table_id_, other->table_id_);
    std::swap(table_state_, other->table_state_);
    std::swap(total_bet_, other->total_bet_);
    std::swap(cur_round_, other->cur_round_);
    std::swap(declare_player_, other->declare_player_);
    std::swap(time_, other->time_);
    player_list_.Swap(&other->player_list_);
    player_card_list_.Swap(&other->player_card_list_);
    std::swap(cur_bet_, other->cur_bet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_table_scene_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_table_scene_info_result_descriptor_;
  metadata.reflection = packetl2c_get_table_scene_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_leave_table::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_leave_table::packetc2l_leave_table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_leave_table::InitAsDefaultInstance() {
}

packetc2l_leave_table::packetc2l_leave_table(const packetc2l_leave_table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_leave_table::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10003;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_leave_table::~packetc2l_leave_table() {
  SharedDtor();
}

void packetc2l_leave_table::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_leave_table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_leave_table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_leave_table_descriptor_;
}

const packetc2l_leave_table& packetc2l_leave_table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_leave_table* packetc2l_leave_table::default_instance_ = NULL;

packetc2l_leave_table* packetc2l_leave_table::New() const {
  return new packetc2l_leave_table;
}

void packetc2l_leave_table::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10003;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_leave_table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_table];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_leave_table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_table];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_leave_table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_table];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_leave_table::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_table];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_leave_table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_leave_table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_leave_table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_leave_table::MergeFrom(const packetc2l_leave_table& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_leave_table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_leave_table::CopyFrom(const packetc2l_leave_table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_leave_table::IsInitialized() const {

  return true;
}

void packetc2l_leave_table::Swap(packetc2l_leave_table* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_leave_table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_leave_table_descriptor_;
  metadata.reflection = packetc2l_leave_table_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_leave_table_result::kPacketIdFieldNumber;
const int packetl2c_leave_table_result::kResultFieldNumber;
const int packetl2c_leave_table_result::kPlayerGoldFieldNumber;
const int packetl2c_leave_table_result::kTypeFieldNumber;
#endif  // !_MSC_VER

packetl2c_leave_table_result::packetl2c_leave_table_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_leave_table_result::InitAsDefaultInstance() {
}

packetl2c_leave_table_result::packetl2c_leave_table_result(const packetl2c_leave_table_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_leave_table_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15003;
  result_ = 2;
  player_gold_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_leave_table_result::~packetl2c_leave_table_result() {
  SharedDtor();
}

void packetl2c_leave_table_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_leave_table_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_leave_table_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_leave_table_result_descriptor_;
}

const packetl2c_leave_table_result& packetl2c_leave_table_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_leave_table_result* packetl2c_leave_table_result::default_instance_ = NULL;

packetl2c_leave_table_result* packetl2c_leave_table_result::New() const {
  return new packetl2c_leave_table_result;
}

void packetl2c_leave_table_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15003;
    result_ = 2;
    player_gold_ = 0;
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_leave_table_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_table_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_gold;
        break;
      }

      // optional int32 player_gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_leave_table_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_table_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 player_gold = 3;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_gold(), output);
  }

  // optional int32 type = 4 [default = 1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_leave_table_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_table_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 player_gold = 3;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_gold(), target);
  }

  // optional int32 type = 4 [default = 1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_leave_table_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_table_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 player_gold = 3;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_gold());
    }

    // optional int32 type = 4 [default = 1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_leave_table_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_leave_table_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_leave_table_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_leave_table_result::MergeFrom(const packetl2c_leave_table_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_leave_table_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_leave_table_result::CopyFrom(const packetl2c_leave_table_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_leave_table_result::IsInitialized() const {

  return true;
}

void packetl2c_leave_table_result::Swap(packetl2c_leave_table_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_leave_table_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_leave_table_result_descriptor_;
  metadata.reflection = packetl2c_leave_table_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_leave_table::kPacketIdFieldNumber;
const int packetl2c_bc_leave_table::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_leave_table::packetl2c_bc_leave_table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_leave_table::InitAsDefaultInstance() {
}

packetl2c_bc_leave_table::packetl2c_bc_leave_table(const packetl2c_bc_leave_table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_leave_table::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15015;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_leave_table::~packetl2c_bc_leave_table() {
  SharedDtor();
}

void packetl2c_bc_leave_table::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_leave_table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_leave_table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_leave_table_descriptor_;
}

const packetl2c_bc_leave_table& packetl2c_bc_leave_table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_leave_table* packetl2c_bc_leave_table::default_instance_ = NULL;

packetl2c_bc_leave_table* packetl2c_bc_leave_table::New() const {
  return new packetl2c_bc_leave_table;
}

void packetl2c_bc_leave_table::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15015;
    player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_leave_table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_leave_table];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_leave_table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_leave_table];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_leave_table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_leave_table];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_leave_table::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_leave_table];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_leave_table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_leave_table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_leave_table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_leave_table::MergeFrom(const packetl2c_bc_leave_table& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_leave_table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_leave_table::CopyFrom(const packetl2c_bc_leave_table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_leave_table::IsInitialized() const {

  return true;
}

void packetl2c_bc_leave_table::Swap(packetl2c_bc_leave_table* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_leave_table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_leave_table_descriptor_;
  metadata.reflection = packetl2c_bc_leave_table_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_game_start::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_game_start::packetl2c_game_start()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_game_start::InitAsDefaultInstance() {
}

packetl2c_game_start::packetl2c_game_start(const packetl2c_game_start& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_game_start::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15006;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_game_start::~packetl2c_game_start() {
  SharedDtor();
}

void packetl2c_game_start::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_game_start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_game_start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_game_start_descriptor_;
}

const packetl2c_game_start& packetl2c_game_start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_game_start* packetl2c_game_start::default_instance_ = NULL;

packetl2c_game_start* packetl2c_game_start::New() const {
  return new packetl2c_game_start;
}

void packetl2c_game_start::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15006;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_game_start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_game_start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_game_start::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_game_start::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_game_start::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_game_start* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_game_start*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_game_start::MergeFrom(const packetl2c_game_start& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_game_start::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_game_start::CopyFrom(const packetl2c_game_start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_game_start::IsInitialized() const {

  return true;
}

void packetl2c_game_start::Swap(packetl2c_game_start* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_game_start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_game_start_descriptor_;
  metadata.reflection = packetl2c_game_start_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_set_ready::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_set_ready::packetc2l_set_ready()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_set_ready::InitAsDefaultInstance() {
}

packetc2l_set_ready::packetc2l_set_ready(const packetc2l_set_ready& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_set_ready::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10005;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_set_ready::~packetc2l_set_ready() {
  SharedDtor();
}

void packetc2l_set_ready::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_set_ready::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_set_ready::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_set_ready_descriptor_;
}

const packetc2l_set_ready& packetc2l_set_ready::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_set_ready* packetc2l_set_ready::default_instance_ = NULL;

packetc2l_set_ready* packetc2l_set_ready::New() const {
  return new packetc2l_set_ready;
}

void packetc2l_set_ready::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10005;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_set_ready::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_set_ready];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_set_ready::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_set_ready];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_set_ready::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_set_ready];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_set_ready::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_set_ready];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_set_ready::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_set_ready* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_set_ready*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_set_ready::MergeFrom(const packetc2l_set_ready& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_set_ready::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_set_ready::CopyFrom(const packetc2l_set_ready& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_set_ready::IsInitialized() const {

  return true;
}

void packetc2l_set_ready::Swap(packetc2l_set_ready* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_set_ready::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_set_ready_descriptor_;
  metadata.reflection = packetc2l_set_ready_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_set_ready_result::kPacketIdFieldNumber;
const int packetl2c_set_ready_result::kResultFieldNumber;
const int packetl2c_set_ready_result::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_set_ready_result::packetl2c_set_ready_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_set_ready_result::InitAsDefaultInstance() {
}

packetl2c_set_ready_result::packetl2c_set_ready_result(const packetl2c_set_ready_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_set_ready_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15005;
  result_ = 2;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_set_ready_result::~packetl2c_set_ready_result() {
  SharedDtor();
}

void packetl2c_set_ready_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_set_ready_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_set_ready_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_set_ready_result_descriptor_;
}

const packetl2c_set_ready_result& packetl2c_set_ready_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_set_ready_result* packetl2c_set_ready_result::default_instance_ = NULL;

packetl2c_set_ready_result* packetl2c_set_ready_result::New() const {
  return new packetl2c_set_ready_result;
}

void packetl2c_set_ready_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15005;
    result_ = 2;
    player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_set_ready_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_set_ready_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_set_ready_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_set_ready_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_set_ready_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_set_ready_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_set_ready_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_set_ready_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_set_ready_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_set_ready_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_set_ready_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_set_ready_result::MergeFrom(const packetl2c_set_ready_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_set_ready_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_set_ready_result::CopyFrom(const packetl2c_set_ready_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_set_ready_result::IsInitialized() const {

  return true;
}

void packetl2c_set_ready_result::Swap(packetl2c_set_ready_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_set_ready_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_set_ready_result_descriptor_;
  metadata.reflection = packetl2c_set_ready_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_player_declare::kPacketIdFieldNumber;
const int packetc2l_player_declare::kDeclareFieldNumber;
const int packetc2l_player_declare::kChipsFieldNumber;
#endif  // !_MSC_VER

packetc2l_player_declare::packetc2l_player_declare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_player_declare::InitAsDefaultInstance() {
}

packetc2l_player_declare::packetc2l_player_declare(const packetc2l_player_declare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_player_declare::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10006;
  declare_ = 0;
  chips_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_player_declare::~packetc2l_player_declare() {
  SharedDtor();
}

void packetc2l_player_declare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_player_declare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_player_declare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_player_declare_descriptor_;
}

const packetc2l_player_declare& packetc2l_player_declare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_player_declare* packetc2l_player_declare::default_instance_ = NULL;

packetc2l_player_declare* packetc2l_player_declare::New() const {
  return new packetc2l_player_declare;
}

void packetc2l_player_declare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10006;
    declare_ = 0;
    chips_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_player_declare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_player_declare];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_declare;
        break;
      }

      // optional .game_zhajinhua_protocols.e_player_declare declare = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_declare:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_player_declare_IsValid(value)) {
            set_declare(static_cast< ::game_zhajinhua_protocols::e_player_declare >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chips;
        break;
      }

      // optional int32 chips = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chips_)));
          set_has_chips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_player_declare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_player_declare];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_zhajinhua_protocols.e_player_declare declare = 2;
  if (has_declare()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->declare(), output);
  }

  // optional int32 chips = 3;
  if (has_chips()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chips(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_player_declare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_player_declare];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_zhajinhua_protocols.e_player_declare declare = 2;
  if (has_declare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->declare(), target);
  }

  // optional int32 chips = 3;
  if (has_chips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chips(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_player_declare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_player_declare];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_zhajinhua_protocols.e_player_declare declare = 2;
    if (has_declare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->declare());
    }

    // optional int32 chips = 3;
    if (has_chips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chips());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_player_declare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_player_declare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_player_declare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_player_declare::MergeFrom(const packetc2l_player_declare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_declare()) {
      set_declare(from.declare());
    }
    if (from.has_chips()) {
      set_chips(from.chips());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_player_declare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_player_declare::CopyFrom(const packetc2l_player_declare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_player_declare::IsInitialized() const {

  return true;
}

void packetc2l_player_declare::Swap(packetc2l_player_declare* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(declare_, other->declare_);
    std::swap(chips_, other->chips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_player_declare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_player_declare_descriptor_;
  metadata.reflection = packetc2l_player_declare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_player_declare_result::kPacketIdFieldNumber;
const int packetl2c_player_declare_result::kResultFieldNumber;
const int packetl2c_player_declare_result::kDeclareFieldNumber;
const int packetl2c_player_declare_result::kChipsFieldNumber;
const int packetl2c_player_declare_result::kPlayerIdFieldNumber;
const int packetl2c_player_declare_result::kCardsFieldNumber;
const int packetl2c_player_declare_result::kCardTypeFieldNumber;
#endif  // !_MSC_VER

packetl2c_player_declare_result::packetl2c_player_declare_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_player_declare_result::InitAsDefaultInstance() {
}

packetl2c_player_declare_result::packetl2c_player_declare_result(const packetl2c_player_declare_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_player_declare_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15007;
  result_ = 2;
  declare_ = 0;
  chips_ = 0;
  player_id_ = 0;
  card_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_player_declare_result::~packetl2c_player_declare_result() {
  SharedDtor();
}

void packetl2c_player_declare_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_player_declare_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_player_declare_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_player_declare_result_descriptor_;
}

const packetl2c_player_declare_result& packetl2c_player_declare_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_player_declare_result* packetl2c_player_declare_result::default_instance_ = NULL;

packetl2c_player_declare_result* packetl2c_player_declare_result::New() const {
  return new packetl2c_player_declare_result;
}

void packetl2c_player_declare_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15007;
    result_ = 2;
    declare_ = 0;
    chips_ = 0;
    player_id_ = 0;
    card_type_ = 0;
  }
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_player_declare_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_declare_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_declare;
        break;
      }

      // optional .game_zhajinhua_protocols.e_player_declare declare = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_declare:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_player_declare_IsValid(value)) {
            set_declare(static_cast< ::game_zhajinhua_protocols::e_player_declare >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chips;
        break;
      }

      // optional int32 chips = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chips_)));
          set_has_chips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cards;
        if (input->ExpectTag(56)) goto parse_card_type;
        break;
      }

      // optional int32 card_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_type_)));
          set_has_card_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_player_declare_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_declare_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional .game_zhajinhua_protocols.e_player_declare declare = 3;
  if (has_declare()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->declare(), output);
  }

  // optional int32 chips = 4;
  if (has_chips()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chips(), output);
  }

  // optional int32 player_id = 5;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->player_id(), output);
  }

  // repeated int32 cards = 6;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->cards(i), output);
  }

  // optional int32 card_type = 7;
  if (has_card_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->card_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_player_declare_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_declare_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional .game_zhajinhua_protocols.e_player_declare declare = 3;
  if (has_declare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->declare(), target);
  }

  // optional int32 chips = 4;
  if (has_chips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chips(), target);
  }

  // optional int32 player_id = 5;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->player_id(), target);
  }

  // repeated int32 cards = 6;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->cards(i), target);
  }

  // optional int32 card_type = 7;
  if (has_card_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->card_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_player_declare_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_declare_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .game_zhajinhua_protocols.e_player_declare declare = 3;
    if (has_declare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->declare());
    }

    // optional int32 chips = 4;
    if (has_chips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chips());
    }

    // optional int32 player_id = 5;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 card_type = 7;
    if (has_card_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_type());
    }

  }
  // repeated int32 cards = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_player_declare_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_player_declare_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_player_declare_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_player_declare_result::MergeFrom(const packetl2c_player_declare_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_declare()) {
      set_declare(from.declare());
    }
    if (from.has_chips()) {
      set_chips(from.chips());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_card_type()) {
      set_card_type(from.card_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_player_declare_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_player_declare_result::CopyFrom(const packetl2c_player_declare_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_player_declare_result::IsInitialized() const {

  return true;
}

void packetl2c_player_declare_result::Swap(packetl2c_player_declare_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(declare_, other->declare_);
    std::swap(chips_, other->chips_);
    std::swap(player_id_, other->player_id_);
    cards_.Swap(&other->cards_);
    std::swap(card_type_, other->card_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_player_declare_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_player_declare_result_descriptor_;
  metadata.reflection = packetl2c_player_declare_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notify_declare::kPacketIdFieldNumber;
const int packetl2c_notify_declare::kPlayerIdFieldNumber;
const int packetl2c_notify_declare::kCurRoundFieldNumber;
#endif  // !_MSC_VER

packetl2c_notify_declare::packetl2c_notify_declare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_notify_declare::InitAsDefaultInstance() {
}

packetl2c_notify_declare::packetl2c_notify_declare(const packetl2c_notify_declare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_notify_declare::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15012;
  player_id_ = 0;
  cur_round_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notify_declare::~packetl2c_notify_declare() {
  SharedDtor();
}

void packetl2c_notify_declare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_notify_declare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notify_declare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notify_declare_descriptor_;
}

const packetl2c_notify_declare& packetl2c_notify_declare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notify_declare* packetl2c_notify_declare::default_instance_ = NULL;

packetl2c_notify_declare* packetl2c_notify_declare::New() const {
  return new packetl2c_notify_declare;
}

void packetl2c_notify_declare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15012;
    player_id_ = 0;
    cur_round_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notify_declare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_12c_notify_declare];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_round;
        break;
      }

      // optional int32 cur_round = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_round_)));
          set_has_cur_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_notify_declare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_12c_notify_declare];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 cur_round = 3;
  if (has_cur_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_round(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_notify_declare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_12c_notify_declare];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 cur_round = 3;
  if (has_cur_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_round(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_notify_declare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_12c_notify_declare];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 cur_round = 3;
    if (has_cur_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_round());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notify_declare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notify_declare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notify_declare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notify_declare::MergeFrom(const packetl2c_notify_declare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_cur_round()) {
      set_cur_round(from.cur_round());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notify_declare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notify_declare::CopyFrom(const packetl2c_notify_declare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notify_declare::IsInitialized() const {

  return true;
}

void packetl2c_notify_declare::Swap(packetl2c_notify_declare* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(cur_round_, other->cur_round_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notify_declare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notify_declare_descriptor_;
  metadata.reflection = packetl2c_notify_declare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_compare_cards::kPacketIdFieldNumber;
const int packetc2l_compare_cards::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_compare_cards::packetc2l_compare_cards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_compare_cards::InitAsDefaultInstance() {
}

packetc2l_compare_cards::packetc2l_compare_cards(const packetc2l_compare_cards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_compare_cards::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10008;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_compare_cards::~packetc2l_compare_cards() {
  SharedDtor();
}

void packetc2l_compare_cards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_compare_cards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_compare_cards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_compare_cards_descriptor_;
}

const packetc2l_compare_cards& packetc2l_compare_cards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_compare_cards* packetc2l_compare_cards::default_instance_ = NULL;

packetc2l_compare_cards* packetc2l_compare_cards::New() const {
  return new packetc2l_compare_cards;
}

void packetc2l_compare_cards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10008;
    player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_compare_cards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_compare_cards];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_compare_cards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_compare_cards];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_compare_cards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_compare_cards];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_compare_cards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_compare_cards];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_compare_cards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_compare_cards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_compare_cards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_compare_cards::MergeFrom(const packetc2l_compare_cards& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_compare_cards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_compare_cards::CopyFrom(const packetc2l_compare_cards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_compare_cards::IsInitialized() const {

  return true;
}

void packetc2l_compare_cards::Swap(packetc2l_compare_cards* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_compare_cards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_compare_cards_descriptor_;
  metadata.reflection = packetc2l_compare_cards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_compare_cards_result::kPacketIdFieldNumber;
const int packetl2c_compare_cards_result::kResultFieldNumber;
const int packetl2c_compare_cards_result::kChipsFieldNumber;
const int packetl2c_compare_cards_result::kPlayerIdFieldNumber;
const int packetl2c_compare_cards_result::kWinPlayerFieldNumber;
const int packetl2c_compare_cards_result::kCompareResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_compare_cards_result::packetl2c_compare_cards_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_compare_cards_result::InitAsDefaultInstance() {
}

packetl2c_compare_cards_result::packetl2c_compare_cards_result(const packetl2c_compare_cards_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_compare_cards_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15009;
  result_ = 2;
  chips_ = 0;
  player_id_ = 0;
  win_player_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_compare_cards_result::~packetl2c_compare_cards_result() {
  SharedDtor();
}

void packetl2c_compare_cards_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_compare_cards_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_compare_cards_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_compare_cards_result_descriptor_;
}

const packetl2c_compare_cards_result& packetl2c_compare_cards_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_compare_cards_result* packetl2c_compare_cards_result::default_instance_ = NULL;

packetl2c_compare_cards_result* packetl2c_compare_cards_result::New() const {
  return new packetl2c_compare_cards_result;
}

void packetl2c_compare_cards_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15009;
    result_ = 2;
    chips_ = 0;
    player_id_ = 0;
    win_player_ = 0;
  }
  compare_result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_compare_cards_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_compare_cards_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chips;
        break;
      }

      // optional int32 chips = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chips_)));
          set_has_chips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_win_player;
        break;
      }

      // optional int32 win_player = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_player_)));
          set_has_win_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_compare_result;
        break;
      }

      // repeated .game_zhajinhua_protocols.msg_compare_cards compare_result = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_compare_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_compare_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_compare_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_compare_cards_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_compare_cards_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 chips = 3;
  if (has_chips()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chips(), output);
  }

  // optional int32 player_id = 4;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->player_id(), output);
  }

  // optional int32 win_player = 5;
  if (has_win_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->win_player(), output);
  }

  // repeated .game_zhajinhua_protocols.msg_compare_cards compare_result = 6;
  for (int i = 0; i < this->compare_result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->compare_result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_compare_cards_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_compare_cards_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 chips = 3;
  if (has_chips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chips(), target);
  }

  // optional int32 player_id = 4;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->player_id(), target);
  }

  // optional int32 win_player = 5;
  if (has_win_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->win_player(), target);
  }

  // repeated .game_zhajinhua_protocols.msg_compare_cards compare_result = 6;
  for (int i = 0; i < this->compare_result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->compare_result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_compare_cards_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_compare_cards_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 chips = 3;
    if (has_chips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chips());
    }

    // optional int32 player_id = 4;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 win_player = 5;
    if (has_win_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_player());
    }

  }
  // repeated .game_zhajinhua_protocols.msg_compare_cards compare_result = 6;
  total_size += 1 * this->compare_result_size();
  for (int i = 0; i < this->compare_result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->compare_result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_compare_cards_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_compare_cards_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_compare_cards_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_compare_cards_result::MergeFrom(const packetl2c_compare_cards_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  compare_result_.MergeFrom(from.compare_result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_chips()) {
      set_chips(from.chips());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_win_player()) {
      set_win_player(from.win_player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_compare_cards_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_compare_cards_result::CopyFrom(const packetl2c_compare_cards_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_compare_cards_result::IsInitialized() const {

  return true;
}

void packetl2c_compare_cards_result::Swap(packetl2c_compare_cards_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(chips_, other->chips_);
    std::swap(player_id_, other->player_id_);
    std::swap(win_player_, other->win_player_);
    compare_result_.Swap(&other->compare_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_compare_cards_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_compare_cards_result_descriptor_;
  metadata.reflection = packetl2c_compare_cards_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_game_settlement::kPacketIdFieldNumber;
const int packetl2c_game_settlement::kPlayerSettlementInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_game_settlement::packetl2c_game_settlement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_game_settlement::InitAsDefaultInstance() {
}

packetl2c_game_settlement::packetl2c_game_settlement(const packetl2c_game_settlement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_game_settlement::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15010;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_game_settlement::~packetl2c_game_settlement() {
  SharedDtor();
}

void packetl2c_game_settlement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_game_settlement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_game_settlement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_game_settlement_descriptor_;
}

const packetl2c_game_settlement& packetl2c_game_settlement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_game_settlement* packetl2c_game_settlement::default_instance_ = NULL;

packetl2c_game_settlement* packetl2c_game_settlement::New() const {
  return new packetl2c_game_settlement;
}

void packetl2c_game_settlement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15010;
  }
  player_settlement_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_game_settlement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_settlement];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_settlement_info;
        break;
      }

      // repeated .game_zhajinhua_protocols.msg_player_settlement player_settlement_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_settlement_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_settlement_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_settlement_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_game_settlement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_settlement];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_zhajinhua_protocols.msg_player_settlement player_settlement_info = 2;
  for (int i = 0; i < this->player_settlement_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_settlement_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_game_settlement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_settlement];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_zhajinhua_protocols.msg_player_settlement player_settlement_info = 2;
  for (int i = 0; i < this->player_settlement_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_settlement_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_game_settlement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_settlement];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_zhajinhua_protocols.msg_player_settlement player_settlement_info = 2;
  total_size += 1 * this->player_settlement_info_size();
  for (int i = 0; i < this->player_settlement_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_settlement_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_game_settlement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_game_settlement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_game_settlement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_game_settlement::MergeFrom(const packetl2c_game_settlement& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_settlement_info_.MergeFrom(from.player_settlement_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_game_settlement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_game_settlement::CopyFrom(const packetl2c_game_settlement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_game_settlement::IsInitialized() const {

  return true;
}

void packetl2c_game_settlement::Swap(packetl2c_game_settlement* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    player_settlement_info_.Swap(&other->player_settlement_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_game_settlement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_game_settlement_descriptor_;
  metadata.reflection = packetl2c_game_settlement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_change_table::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_change_table::packetc2l_change_table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_change_table::InitAsDefaultInstance() {
}

packetc2l_change_table::packetc2l_change_table(const packetc2l_change_table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_change_table::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10010;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_change_table::~packetc2l_change_table() {
  SharedDtor();
}

void packetc2l_change_table::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_change_table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_change_table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_change_table_descriptor_;
}

const packetc2l_change_table& packetc2l_change_table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_change_table* packetc2l_change_table::default_instance_ = NULL;

packetc2l_change_table* packetc2l_change_table::New() const {
  return new packetc2l_change_table;
}

void packetc2l_change_table::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10010;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_change_table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_table];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_change_table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_table];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_change_table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_table];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_change_table::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_table];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_change_table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_change_table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_change_table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_change_table::MergeFrom(const packetc2l_change_table& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_change_table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_change_table::CopyFrom(const packetc2l_change_table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_change_table::IsInitialized() const {

  return true;
}

void packetc2l_change_table::Swap(packetc2l_change_table* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_change_table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_change_table_descriptor_;
  metadata.reflection = packetc2l_change_table_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_change_table_result::kPacketIdFieldNumber;
const int packetl2c_change_table_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_change_table_result::packetl2c_change_table_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_change_table_result::InitAsDefaultInstance() {
}

packetl2c_change_table_result::packetl2c_change_table_result(const packetl2c_change_table_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_change_table_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15014;
  result_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_change_table_result::~packetl2c_change_table_result() {
  SharedDtor();
}

void packetl2c_change_table_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_change_table_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_change_table_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_change_table_result_descriptor_;
}

const packetl2c_change_table_result& packetl2c_change_table_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_change_table_result* packetl2c_change_table_result::default_instance_ = NULL;

packetl2c_change_table_result* packetl2c_change_table_result::New() const {
  return new packetl2c_change_table_result;
}

void packetl2c_change_table_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15014;
    result_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_change_table_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_table_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_change_table_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_table_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_change_table_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_table_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_change_table_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_table_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_change_table_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_change_table_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_change_table_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_change_table_result::MergeFrom(const packetl2c_change_table_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_change_table_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_change_table_result::CopyFrom(const packetl2c_change_table_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_change_table_result::IsInitialized() const {

  return true;
}

void packetl2c_change_table_result::Swap(packetl2c_change_table_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_change_table_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_change_table_result_descriptor_;
  metadata.reflection = packetl2c_change_table_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_show_cards::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_show_cards::packetc2l_show_cards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_show_cards::InitAsDefaultInstance() {
}

packetc2l_show_cards::packetc2l_show_cards(const packetc2l_show_cards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_show_cards::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10011;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_show_cards::~packetc2l_show_cards() {
  SharedDtor();
}

void packetc2l_show_cards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_show_cards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_show_cards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_show_cards_descriptor_;
}

const packetc2l_show_cards& packetc2l_show_cards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_show_cards* packetc2l_show_cards::default_instance_ = NULL;

packetc2l_show_cards* packetc2l_show_cards::New() const {
  return new packetc2l_show_cards;
}

void packetc2l_show_cards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10011;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_show_cards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_show_cards];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_show_cards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_show_cards];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_show_cards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_show_cards];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_show_cards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_show_cards];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_show_cards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_show_cards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_show_cards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_show_cards::MergeFrom(const packetc2l_show_cards& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_show_cards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_show_cards::CopyFrom(const packetc2l_show_cards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_show_cards::IsInitialized() const {

  return true;
}

void packetc2l_show_cards::Swap(packetc2l_show_cards* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_show_cards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_show_cards_descriptor_;
  metadata.reflection = packetc2l_show_cards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notify_show_cards::kPacketIdFieldNumber;
const int packetl2c_notify_show_cards::kResultFieldNumber;
const int packetl2c_notify_show_cards::kPlayerIdFieldNumber;
const int packetl2c_notify_show_cards::kCardsFieldNumber;
#endif  // !_MSC_VER

packetl2c_notify_show_cards::packetl2c_notify_show_cards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_notify_show_cards::InitAsDefaultInstance() {
}

packetl2c_notify_show_cards::packetl2c_notify_show_cards(const packetl2c_notify_show_cards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_notify_show_cards::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15016;
  result_ = 2;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notify_show_cards::~packetl2c_notify_show_cards() {
  SharedDtor();
}

void packetl2c_notify_show_cards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_notify_show_cards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notify_show_cards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notify_show_cards_descriptor_;
}

const packetl2c_notify_show_cards& packetl2c_notify_show_cards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notify_show_cards* packetl2c_notify_show_cards::default_instance_ = NULL;

packetl2c_notify_show_cards* packetl2c_notify_show_cards::New() const {
  return new packetl2c_notify_show_cards;
}

void packetl2c_notify_show_cards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15016;
    result_ = 2;
    player_id_ = 0;
  }
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notify_show_cards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notify_show_cards];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_zhajinhua_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_notify_show_cards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notify_show_cards];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_id(), output);
  }

  // repeated int32 cards = 4;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_notify_show_cards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notify_show_cards];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_id(), target);
  }

  // repeated int32 cards = 4;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_notify_show_cards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_zhajinhua_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notify_show_cards];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  // repeated int32 cards = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notify_show_cards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notify_show_cards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notify_show_cards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notify_show_cards::MergeFrom(const packetl2c_notify_show_cards& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notify_show_cards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notify_show_cards::CopyFrom(const packetl2c_notify_show_cards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notify_show_cards::IsInitialized() const {

  return true;
}

void packetl2c_notify_show_cards::Swap(packetl2c_notify_show_cards* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(player_id_, other->player_id_);
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notify_show_cards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notify_show_cards_descriptor_;
  metadata.reflection = packetl2c_notify_show_cards_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_zhajinhua_protocols

// @@protoc_insertion_point(global_scope)
