// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_dice_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_dice_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dice_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2l_check_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_check_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_check_state_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_check_state_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_get_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_room_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_room_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* other_bet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  other_bet_reflection_ = NULL;
const ::google::protobuf::Descriptor* table_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  table_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_entertable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_entertable_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_entertable_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_entertable_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_leavetable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_leavetable_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_leavetable_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_leavetable_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_get_table_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_table_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_get_table_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_table_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* dice_bet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dice_bet_reflection_ = NULL;
const ::google::protobuf::Descriptor* bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_bet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_bet_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_bet_again_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_bet_again_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_bet_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_bet_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_bc_bet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_bc_bet_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_unbet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_unbet_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_unbet_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_unbet_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_bc_unbet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_bc_unbet_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_bc_client_shake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_bc_client_shake_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_bc_client_beginbet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_bc_client_beginbet_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_bc_client_endbet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_bc_client_endbet_reflection_ = NULL;
const ::google::protobuf::Descriptor* dice_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dice_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_bc_client_dice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_bc_client_dice_reflection_ = NULL;
const ::google::protobuf::Descriptor* gold_change_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gold_change_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_bc_gold_change_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_bc_gold_change_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_bc_table_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_bc_table_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* chang_table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chang_table_reflection_ = NULL;
const ::google::protobuf::Descriptor* chang_table_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chang_table_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_command_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_list_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_list_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_list_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_list_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* other_player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  other_player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* balance_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  balance_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* bc_other_bet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bc_other_bet_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_game_control_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_game_control_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_game_control_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_game_control_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_debuginfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_debuginfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_msg_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_msg_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_all_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_all_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_debuginfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_debuginfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto() {
  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_dice_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2l_check_state_descriptor_ = file->message_type(0);
  static const int packetc2l_check_state_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, packet_id_),
  };
  packetc2l_check_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_check_state_descriptor_,
      packetc2l_check_state::default_instance_,
      packetc2l_check_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_check_state));
  packetc2l_check_state_result_descriptor_ = file->message_type(1);
  static const int packetc2l_check_state_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state_result, in_table_),
  };
  packetc2l_check_state_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_check_state_result_descriptor_,
      packetc2l_check_state_result::default_instance_,
      packetc2l_check_state_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_check_state_result));
  packetc2l_get_room_info_descriptor_ = file->message_type(2);
  static const int packetc2l_get_room_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, packet_id_),
  };
  packetc2l_get_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_room_info_descriptor_,
      packetc2l_get_room_info::default_instance_,
      packetc2l_get_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_room_info));
  room_info_descriptor_ = file->message_type(3);
  static const int room_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, id_),
  };
  room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      room_info_descriptor_,
      room_info::default_instance_,
      room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(room_info));
  packetl2c_get_room_info_result_descriptor_ = file->message_type(4);
  static const int packetl2c_get_room_info_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, room_),
  };
  packetl2c_get_room_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_room_info_result_descriptor_,
      packetl2c_get_room_info_result::default_instance_,
      packetl2c_get_room_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_room_info_result));
  player_info_descriptor_ = file->message_type(5);
  static const int player_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_head_id_custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_vip_lv_),
  };
  player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_info_descriptor_,
      player_info::default_instance_,
      player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_info));
  other_bet_descriptor_ = file->message_type(6);
  static const int other_bet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(other_bet, bet_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(other_bet, bet_gold_),
  };
  other_bet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      other_bet_descriptor_,
      other_bet::default_instance_,
      other_bet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(other_bet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(other_bet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(other_bet));
  table_info_descriptor_ = file->message_type(7);
  static const int table_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_info, game_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_info, cd_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_info, list_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_info, player_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_info, playe_ticket_count_),
  };
  table_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      table_info_descriptor_,
      table_info::default_instance_,
      table_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(table_info));
  packetc2l_entertable_descriptor_ = file->message_type(8);
  static const int packetc2l_entertable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_entertable, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_entertable, room_id_),
  };
  packetc2l_entertable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_entertable_descriptor_,
      packetc2l_entertable::default_instance_,
      packetc2l_entertable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_entertable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_entertable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_entertable));
  packetc2l_entertable_result_descriptor_ = file->message_type(9);
  static const int packetc2l_entertable_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_entertable_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_entertable_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_entertable_result, room_id_),
  };
  packetc2l_entertable_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_entertable_result_descriptor_,
      packetc2l_entertable_result::default_instance_,
      packetc2l_entertable_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_entertable_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_entertable_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_entertable_result));
  packetc2l_leavetable_descriptor_ = file->message_type(10);
  static const int packetc2l_leavetable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leavetable, packet_id_),
  };
  packetc2l_leavetable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_leavetable_descriptor_,
      packetc2l_leavetable::default_instance_,
      packetc2l_leavetable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leavetable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leavetable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_leavetable));
  packetc2l_leavetable_result_descriptor_ = file->message_type(11);
  static const int packetc2l_leavetable_result_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leavetable_result, packet_id_),
  };
  packetc2l_leavetable_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_leavetable_result_descriptor_,
      packetc2l_leavetable_result::default_instance_,
      packetc2l_leavetable_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leavetable_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leavetable_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_leavetable_result));
  packetc2l_get_table_info_descriptor_ = file->message_type(12);
  static const int packetc2l_get_table_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_table_info, packet_id_),
  };
  packetc2l_get_table_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_table_info_descriptor_,
      packetc2l_get_table_info::default_instance_,
      packetc2l_get_table_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_table_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_table_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_table_info));
  packetc2l_get_table_info_result_descriptor_ = file->message_type(13);
  static const int packetc2l_get_table_info_result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_table_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_table_info_result, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_table_info_result, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_table_info_result, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_table_info_result, self_info_),
  };
  packetc2l_get_table_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_table_info_result_descriptor_,
      packetc2l_get_table_info_result::default_instance_,
      packetc2l_get_table_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_table_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_table_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_table_info_result));
  dice_bet_descriptor_ = file->message_type(14);
  static const int dice_bet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_bet, chip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_bet, dice_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_bet, gold_),
  };
  dice_bet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dice_bet_descriptor_,
      dice_bet::default_instance_,
      dice_bet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_bet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_bet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dice_bet));
  bet_info_descriptor_ = file->message_type(15);
  static const int bet_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bet_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bet_info, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bet_info, db_),
  };
  bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bet_info_descriptor_,
      bet_info::default_instance_,
      bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bet_info));
  packetc2l_bet_descriptor_ = file->message_type(16);
  static const int packetc2l_bet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bet, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bet, db_),
  };
  packetc2l_bet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_bet_descriptor_,
      packetc2l_bet::default_instance_,
      packetc2l_bet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_bet));
  packetc2l_bet_again_descriptor_ = file->message_type(17);
  static const int packetc2l_bet_again_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bet_again, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bet_again, db_),
  };
  packetc2l_bet_again_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_bet_again_descriptor_,
      packetc2l_bet_again::default_instance_,
      packetc2l_bet_again_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bet_again, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bet_again, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_bet_again));
  packetc2l_bet_result_descriptor_ = file->message_type(18);
  static const int packetc2l_bet_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bet_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bet_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bet_result, db_),
  };
  packetc2l_bet_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_bet_result_descriptor_,
      packetc2l_bet_result::default_instance_,
      packetc2l_bet_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bet_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bet_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_bet_result));
  packetc2l_bc_bet_descriptor_ = file->message_type(19);
  static const int packetc2l_bc_bet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_bet, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_bet, bi_),
  };
  packetc2l_bc_bet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_bc_bet_descriptor_,
      packetc2l_bc_bet::default_instance_,
      packetc2l_bc_bet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_bet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_bet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_bc_bet));
  packetc2l_unbet_descriptor_ = file->message_type(20);
  static const int packetc2l_unbet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_unbet, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_unbet, result_),
  };
  packetc2l_unbet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_unbet_descriptor_,
      packetc2l_unbet::default_instance_,
      packetc2l_unbet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_unbet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_unbet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_unbet));
  packetc2l_unbet_result_descriptor_ = file->message_type(21);
  static const int packetc2l_unbet_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_unbet_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_unbet_result, result_),
  };
  packetc2l_unbet_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_unbet_result_descriptor_,
      packetc2l_unbet_result::default_instance_,
      packetc2l_unbet_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_unbet_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_unbet_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_unbet_result));
  packetc2l_bc_unbet_descriptor_ = file->message_type(22);
  static const int packetc2l_bc_unbet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_unbet, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_unbet, player_id_),
  };
  packetc2l_bc_unbet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_bc_unbet_descriptor_,
      packetc2l_bc_unbet::default_instance_,
      packetc2l_bc_unbet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_unbet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_unbet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_bc_unbet));
  packetc2l_bc_client_shake_descriptor_ = file->message_type(23);
  static const int packetc2l_bc_client_shake_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_client_shake, packet_id_),
  };
  packetc2l_bc_client_shake_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_bc_client_shake_descriptor_,
      packetc2l_bc_client_shake::default_instance_,
      packetc2l_bc_client_shake_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_client_shake, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_client_shake, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_bc_client_shake));
  packetc2l_bc_client_beginbet_descriptor_ = file->message_type(24);
  static const int packetc2l_bc_client_beginbet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_client_beginbet, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_client_beginbet, cd_time_),
  };
  packetc2l_bc_client_beginbet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_bc_client_beginbet_descriptor_,
      packetc2l_bc_client_beginbet::default_instance_,
      packetc2l_bc_client_beginbet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_client_beginbet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_client_beginbet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_bc_client_beginbet));
  packetc2l_bc_client_endbet_descriptor_ = file->message_type(25);
  static const int packetc2l_bc_client_endbet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_client_endbet, packet_id_),
  };
  packetc2l_bc_client_endbet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_bc_client_endbet_descriptor_,
      packetc2l_bc_client_endbet::default_instance_,
      packetc2l_bc_client_endbet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_client_endbet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_client_endbet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_bc_client_endbet));
  dice_info_descriptor_ = file->message_type(26);
  static const int dice_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_info, dice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_info, dice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_info, dice3_),
  };
  dice_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dice_info_descriptor_,
      dice_info::default_instance_,
      dice_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dice_info));
  packetc2l_bc_client_dice_descriptor_ = file->message_type(27);
  static const int packetc2l_bc_client_dice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_client_dice, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_client_dice, di_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_client_dice, cd_time_),
  };
  packetc2l_bc_client_dice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_bc_client_dice_descriptor_,
      packetc2l_bc_client_dice::default_instance_,
      packetc2l_bc_client_dice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_client_dice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_client_dice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_bc_client_dice));
  gold_change_info_descriptor_ = file->message_type(28);
  static const int gold_change_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gold_change_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gold_change_info, gold_),
  };
  gold_change_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gold_change_info_descriptor_,
      gold_change_info::default_instance_,
      gold_change_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gold_change_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gold_change_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gold_change_info));
  packetc2l_bc_gold_change_descriptor_ = file->message_type(29);
  static const int packetc2l_bc_gold_change_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_gold_change, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_gold_change, change_),
  };
  packetc2l_bc_gold_change_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_bc_gold_change_descriptor_,
      packetc2l_bc_gold_change::default_instance_,
      packetc2l_bc_gold_change_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_gold_change, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_gold_change, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_bc_gold_change));
  packetc2l_bc_table_info_descriptor_ = file->message_type(30);
  static const int packetc2l_bc_table_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_table_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_table_info, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_table_info, flag_),
  };
  packetc2l_bc_table_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_bc_table_info_descriptor_,
      packetc2l_bc_table_info::default_instance_,
      packetc2l_bc_table_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_table_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bc_table_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_bc_table_info));
  chang_table_descriptor_ = file->message_type(31);
  static const int chang_table_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chang_table, packet_id_),
  };
  chang_table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chang_table_descriptor_,
      chang_table::default_instance_,
      chang_table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chang_table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chang_table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chang_table));
  chang_table_result_descriptor_ = file->message_type(32);
  static const int chang_table_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chang_table_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chang_table_result, result_),
  };
  chang_table_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chang_table_result_descriptor_,
      chang_table_result::default_instance_,
      chang_table_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chang_table_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chang_table_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chang_table_result));
  gm_command_descriptor_ = file->message_type(33);
  static const int gm_command_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_command, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_command, dice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_command, dice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_command, dice3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_command, open_),
  };
  gm_command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_command_descriptor_,
      gm_command::default_instance_,
      gm_command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_command));
  player_list_info_descriptor_ = file->message_type(34);
  static const int player_list_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_list_info, packet_id_),
  };
  player_list_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_list_info_descriptor_,
      player_list_info::default_instance_,
      player_list_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_list_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_list_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_list_info));
  player_list_info_result_descriptor_ = file->message_type(35);
  static const int player_list_info_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_list_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_list_info_result, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_list_info_result, player_num_),
  };
  player_list_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_list_info_result_descriptor_,
      player_list_info_result::default_instance_,
      player_list_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_list_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_list_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_list_info_result));
  other_player_info_descriptor_ = file->message_type(36);
  static const int other_player_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(other_player_info, player_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(other_player_info, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(other_player_info, player_id_),
  };
  other_player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      other_player_info_descriptor_,
      other_player_info::default_instance_,
      other_player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(other_player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(other_player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(other_player_info));
  balance_result_descriptor_ = file->message_type(37);
  static const int balance_result_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(balance_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(balance_result, player_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(balance_result, playe_ticket_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(balance_result, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(balance_result, bet_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(balance_result, win_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(balance_result, orderindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(balance_result, cd_time_),
  };
  balance_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      balance_result_descriptor_,
      balance_result::default_instance_,
      balance_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(balance_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(balance_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(balance_result));
  bc_other_bet_descriptor_ = file->message_type(38);
  static const int bc_other_bet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bc_other_bet, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bc_other_bet, info_),
  };
  bc_other_bet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bc_other_bet_descriptor_,
      bc_other_bet::default_instance_,
      bc_other_bet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bc_other_bet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bc_other_bet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bc_other_bet));
  packetc2l_game_control_descriptor_ = file->message_type(39);
  static const int packetc2l_game_control_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_game_control, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_game_control, dice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_game_control, dice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_game_control, dice3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_game_control, dicebigsmall_),
  };
  packetc2l_game_control_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_game_control_descriptor_,
      packetc2l_game_control::default_instance_,
      packetc2l_game_control_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_game_control, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_game_control, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_game_control));
  packetl2c_game_control_result_descriptor_ = file->message_type(40);
  static const int packetl2c_game_control_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_control_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_control_result, result_),
  };
  packetl2c_game_control_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_game_control_result_descriptor_,
      packetl2c_game_control_result::default_instance_,
      packetl2c_game_control_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_control_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_control_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_game_control_result));
  packetl2c_debuginfo_descriptor_ = file->message_type(41);
  static const int packetl2c_debuginfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_debuginfo, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_debuginfo, debug_infos_),
  };
  packetl2c_debuginfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_debuginfo_descriptor_,
      packetl2c_debuginfo::default_instance_,
      packetl2c_debuginfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_debuginfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_debuginfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_debuginfo));
  msg_bet_info_descriptor_ = file->message_type(42);
  static const int msg_bet_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, bet_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, bet_count_),
  };
  msg_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_bet_info_descriptor_,
      msg_bet_info::default_instance_,
      msg_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_bet_info));
  gm_msg_bet_info_descriptor_ = file->message_type(43);
  static const int gm_msg_bet_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_msg_bet_info, player_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_msg_bet_info, bet_info_),
  };
  gm_msg_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_msg_bet_info_descriptor_,
      gm_msg_bet_info::default_instance_,
      gm_msg_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_msg_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_msg_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_msg_bet_info));
  packetl2c_notice_all_bet_info_descriptor_ = file->message_type(44);
  static const int packetl2c_notice_all_bet_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_all_bet_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_all_bet_info, bet_info_list_),
  };
  packetl2c_notice_all_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_all_bet_info_descriptor_,
      packetl2c_notice_all_bet_info::default_instance_,
      packetl2c_notice_all_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_all_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_all_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_all_bet_info));
  packetl2c_bc_debuginfo_descriptor_ = file->message_type(45);
  static const int packetl2c_bc_debuginfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, total_profit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, total_stock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, debug_infos_),
  };
  packetl2c_bc_debuginfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_debuginfo_descriptor_,
      packetl2c_bc_debuginfo::default_instance_,
      packetl2c_bc_debuginfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_debuginfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_check_state_descriptor_, &packetc2l_check_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_check_state_result_descriptor_, &packetc2l_check_state_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_room_info_descriptor_, &packetc2l_get_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    room_info_descriptor_, &room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_room_info_result_descriptor_, &packetl2c_get_room_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_info_descriptor_, &player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    other_bet_descriptor_, &other_bet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    table_info_descriptor_, &table_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_entertable_descriptor_, &packetc2l_entertable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_entertable_result_descriptor_, &packetc2l_entertable_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_leavetable_descriptor_, &packetc2l_leavetable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_leavetable_result_descriptor_, &packetc2l_leavetable_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_table_info_descriptor_, &packetc2l_get_table_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_table_info_result_descriptor_, &packetc2l_get_table_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dice_bet_descriptor_, &dice_bet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bet_info_descriptor_, &bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_bet_descriptor_, &packetc2l_bet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_bet_again_descriptor_, &packetc2l_bet_again::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_bet_result_descriptor_, &packetc2l_bet_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_bc_bet_descriptor_, &packetc2l_bc_bet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_unbet_descriptor_, &packetc2l_unbet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_unbet_result_descriptor_, &packetc2l_unbet_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_bc_unbet_descriptor_, &packetc2l_bc_unbet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_bc_client_shake_descriptor_, &packetc2l_bc_client_shake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_bc_client_beginbet_descriptor_, &packetc2l_bc_client_beginbet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_bc_client_endbet_descriptor_, &packetc2l_bc_client_endbet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dice_info_descriptor_, &dice_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_bc_client_dice_descriptor_, &packetc2l_bc_client_dice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gold_change_info_descriptor_, &gold_change_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_bc_gold_change_descriptor_, &packetc2l_bc_gold_change::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_bc_table_info_descriptor_, &packetc2l_bc_table_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chang_table_descriptor_, &chang_table::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chang_table_result_descriptor_, &chang_table_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_command_descriptor_, &gm_command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_list_info_descriptor_, &player_list_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_list_info_result_descriptor_, &player_list_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    other_player_info_descriptor_, &other_player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    balance_result_descriptor_, &balance_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bc_other_bet_descriptor_, &bc_other_bet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_game_control_descriptor_, &packetc2l_game_control::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_game_control_result_descriptor_, &packetl2c_game_control_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_debuginfo_descriptor_, &packetl2c_debuginfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_bet_info_descriptor_, &msg_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_msg_bet_info_descriptor_, &gm_msg_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_all_bet_info_descriptor_, &packetl2c_notice_all_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_debuginfo_descriptor_, &packetl2c_bc_debuginfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto() {
  delete packetc2l_check_state::default_instance_;
  delete packetc2l_check_state_reflection_;
  delete packetc2l_check_state_result::default_instance_;
  delete packetc2l_check_state_result_reflection_;
  delete packetc2l_get_room_info::default_instance_;
  delete packetc2l_get_room_info_reflection_;
  delete room_info::default_instance_;
  delete room_info_reflection_;
  delete packetl2c_get_room_info_result::default_instance_;
  delete packetl2c_get_room_info_result_reflection_;
  delete player_info::default_instance_;
  delete player_info_reflection_;
  delete other_bet::default_instance_;
  delete other_bet_reflection_;
  delete table_info::default_instance_;
  delete table_info_reflection_;
  delete packetc2l_entertable::default_instance_;
  delete packetc2l_entertable_reflection_;
  delete packetc2l_entertable_result::default_instance_;
  delete packetc2l_entertable_result_reflection_;
  delete packetc2l_leavetable::default_instance_;
  delete packetc2l_leavetable_reflection_;
  delete packetc2l_leavetable_result::default_instance_;
  delete packetc2l_leavetable_result_reflection_;
  delete packetc2l_get_table_info::default_instance_;
  delete packetc2l_get_table_info_reflection_;
  delete packetc2l_get_table_info_result::default_instance_;
  delete packetc2l_get_table_info_result_reflection_;
  delete dice_bet::default_instance_;
  delete dice_bet_reflection_;
  delete bet_info::default_instance_;
  delete bet_info_reflection_;
  delete packetc2l_bet::default_instance_;
  delete packetc2l_bet_reflection_;
  delete packetc2l_bet_again::default_instance_;
  delete packetc2l_bet_again_reflection_;
  delete packetc2l_bet_result::default_instance_;
  delete packetc2l_bet_result_reflection_;
  delete packetc2l_bc_bet::default_instance_;
  delete packetc2l_bc_bet_reflection_;
  delete packetc2l_unbet::default_instance_;
  delete packetc2l_unbet_reflection_;
  delete packetc2l_unbet_result::default_instance_;
  delete packetc2l_unbet_result_reflection_;
  delete packetc2l_bc_unbet::default_instance_;
  delete packetc2l_bc_unbet_reflection_;
  delete packetc2l_bc_client_shake::default_instance_;
  delete packetc2l_bc_client_shake_reflection_;
  delete packetc2l_bc_client_beginbet::default_instance_;
  delete packetc2l_bc_client_beginbet_reflection_;
  delete packetc2l_bc_client_endbet::default_instance_;
  delete packetc2l_bc_client_endbet_reflection_;
  delete dice_info::default_instance_;
  delete dice_info_reflection_;
  delete packetc2l_bc_client_dice::default_instance_;
  delete packetc2l_bc_client_dice_reflection_;
  delete gold_change_info::default_instance_;
  delete gold_change_info_reflection_;
  delete packetc2l_bc_gold_change::default_instance_;
  delete packetc2l_bc_gold_change_reflection_;
  delete packetc2l_bc_table_info::default_instance_;
  delete packetc2l_bc_table_info_reflection_;
  delete chang_table::default_instance_;
  delete chang_table_reflection_;
  delete chang_table_result::default_instance_;
  delete chang_table_result_reflection_;
  delete gm_command::default_instance_;
  delete gm_command_reflection_;
  delete player_list_info::default_instance_;
  delete player_list_info_reflection_;
  delete player_list_info_result::default_instance_;
  delete player_list_info_result_reflection_;
  delete other_player_info::default_instance_;
  delete other_player_info_reflection_;
  delete balance_result::default_instance_;
  delete balance_result_reflection_;
  delete bc_other_bet::default_instance_;
  delete bc_other_bet_reflection_;
  delete packetc2l_game_control::default_instance_;
  delete packetc2l_game_control_reflection_;
  delete packetl2c_game_control_result::default_instance_;
  delete packetl2c_game_control_result_reflection_;
  delete packetl2c_debuginfo::default_instance_;
  delete packetl2c_debuginfo_reflection_;
  delete msg_bet_info::default_instance_;
  delete msg_bet_info_reflection_;
  delete gm_msg_bet_info::default_instance_;
  delete gm_msg_bet_info_reflection_;
  delete packetl2c_notice_all_bet_info::default_instance_;
  delete packetl2c_notice_all_bet_info_reflection_;
  delete packetl2c_bc_debuginfo::default_instance_;
  delete packetl2c_bc_debuginfo_reflection_;
}

void protobuf_AddDesc_game_5fdice_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dice_protocols::protobuf_AddDesc_game_5fdice_5fdef_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030game_dice_protocol.proto\022\016dice_protoco"
    "ls\032\023game_dice_def.proto\032\022msg_type_def.pr"
    "oto\"d\n\025packetc2l_check_state\022K\n\tpacket_i"
    "d\030\001 \001(\0162!.dice_protocols.e_server_msg_ty"
    "pe:\025e_mst_c2l_check_state\"\213\001\n\034packetc2l_"
    "check_state_result\022R\n\tpacket_id\030\001 \001(\0162!."
    "dice_protocols.e_server_msg_type:\034e_mst_"
    "l2c_check_state_result\022\027\n\010in_table\030\002 \001(\010"
    ":\005false\"h\n\027packetc2l_get_room_info\022M\n\tpa"
    "cket_id\030\001 \001(\0162!.dice_protocols.e_server_"
    "msg_type:\027e_mst_c2l_get_room_info\"\027\n\troo"
    "m_info\022\n\n\002id\030\001 \001(\005\"\237\001\n\036packetl2c_get_roo"
    "m_info_result\022T\n\tpacket_id\030\001 \001(\0162!.dice_"
    "protocols.e_server_msg_type:\036e_mst_l2c_g"
    "et_room_info_result\022\'\n\004room\030\002 \003(\0132\031.dice"
    "_protocols.room_info\"\260\001\n\013player_info\022\021\n\t"
    "player_id\030\002 \001(\005\022\027\n\017player_nickname\030\003 \001(\t"
    "\022\026\n\016player_head_id\030\004 \001(\005\022\035\n\025player_head_"
    "id_custom\030\005 \001(\t\022\023\n\013player_gold\030\006 \001(\003\022\022\n\n"
    "player_sex\030\007 \001(\005\022\025\n\rplayer_vip_lv\030\010 \001(\005\""
    "/\n\tother_bet\022\020\n\010bet_area\030\001 \001(\005\022\020\n\010bet_go"
    "ld\030\002 \001(\003\"\266\001\n\ntable_info\0228\n\ngame_state\030\001 "
    "\001(\0162$.dice_protocols.e_msg_gamestate_typ"
    "e\022\017\n\007cd_time\030\002 \001(\005\022,\n\tlist_info\030\004 \003(\0132\031."
    "dice_protocols.dice_info\022\023\n\013player_gold\030"
    "\005 \001(\003\022\032\n\022playe_ticket_count\030\006 \001(\005\"t\n\024pac"
    "ketc2l_entertable\022K\n\tpacket_id\030\001 \001(\0162!.d"
    "ice_protocols.e_server_msg_type:\025e_mst_c"
    "2l_enter_table\022\017\n\007room_id\030\002 \001(\005\"\301\001\n\033pack"
    "etc2l_entertable_result\022R\n\tpacket_id\030\001 \001"
    "(\0162!.dice_protocols.e_server_msg_type:\034e"
    "_mst_l2c_enter_table_result\022=\n\006result\030\002 "
    "\001(\0162\036.msg_type_def.e_msg_result_def:\re_r"
    "mt_success\022\017\n\007room_id\030\003 \001(\005\"c\n\024packetc2l"
    "_leavetable\022K\n\tpacket_id\030\001 \001(\0162!.dice_pr"
    "otocols.e_server_msg_type:\025e_mst_c2l_lea"
    "ve_table\"q\n\033packetc2l_leavetable_result\022"
    "R\n\tpacket_id\030\001 \001(\0162!.dice_protocols.e_se"
    "rver_msg_type:\034e_mst_l2c_leave_table_res"
    "ult\"j\n\030packetc2l_get_table_info\022N\n\tpacke"
    "t_id\030\001 \001(\0162!.dice_protocols.e_server_msg"
    "_type:\030e_mst_c2l_get_table_info\"\213\002\n\037pack"
    "etc2l_get_table_info_result\022U\n\tpacket_id"
    "\030\001 \001(\0162!.dice_protocols.e_server_msg_typ"
    "e:\037e_mst_l2c_get_table_info_result\022\017\n\007ro"
    "om_id\030\002 \001(\005\022)\n\005table\030\003 \001(\0132\032.dice_protoc"
    "ols.table_info\022\'\n\004info\030\004 \003(\0132\031.dice_prot"
    "ocols.other_bet\022,\n\tself_info\030\005 \003(\0132\031.dic"
    "e_protocols.other_bet\"[\n\010dice_bet\022\021\n\tchi"
    "p_type\030\001 \001(\005\022.\n\tdice_type\030\002 \001(\0162\033.dice_p"
    "rotocols.e_dice_type\022\014\n\004gold\030\003 \001(\003\"Q\n\010be"
    "t_info\022\021\n\tplayer_id\030\001 \001(\005\022\014\n\004gold\030\002 \001(\003\022"
    "$\n\002db\030\003 \003(\0132\030.dice_protocols.dice_bet\"z\n"
    "\rpacketc2l_bet\022C\n\tpacket_id\030\001 \001(\0162!.dice"
    "_protocols.e_server_msg_type:\re_mst_c2l_"
    "bet\022$\n\002db\030\002 \001(\0132\030.dice_protocols.dice_be"
    "t\"\206\001\n\023packetc2l_bet_again\022I\n\tpacket_id\030\001"
    " \001(\0162!.dice_protocols.e_server_msg_type:"
    "\023e_mst_c2l_bet_again\022$\n\002db\030\002 \003(\0132\030.dice_"
    "protocols.dice_bet\"\307\001\n\024packetc2l_bet_res"
    "ult\022J\n\tpacket_id\030\001 \001(\0162!.dice_protocols."
    "e_server_msg_type:\024e_mst_l2c_bet_result\022"
    "=\n\006result\030\002 \001(\0162\036.msg_type_def.e_msg_res"
    "ult_def:\re_rmt_success\022$\n\002db\030\003 \001(\0132\030.dic"
    "e_protocols.dice_bet\"|\n\020packetc2l_bc_bet"
    "\022B\n\tpacket_id\030\001 \001(\0162!.dice_protocols.e_s"
    "erver_msg_type:\014e_mst_bc_bet\022$\n\002bi\030\002 \001(\013"
    "2\030.dice_protocols.bet_info\"\227\001\n\017packetc2l"
    "_unbet\022E\n\tpacket_id\030\001 \001(\0162!.dice_protoco"
    "ls.e_server_msg_type:\017e_mst_c2l_unbet\022=\n"
    "\006result\030\002 \001(\0162\036.msg_type_def.e_msg_resul"
    "t_def:\re_rmt_success\"\245\001\n\026packetc2l_unbet"
    "_result\022L\n\tpacket_id\030\001 \001(\0162!.dice_protoc"
    "ols.e_server_msg_type:\026e_mst_l2c_unbet_r"
    "esult\022=\n\006result\030\002 \001(\0162\036.msg_type_def.e_m"
    "sg_result_def:\re_rmt_success\"m\n\022packetc2"
    "l_bc_unbet\022D\n\tpacket_id\030\001 \001(\0162!.dice_pro"
    "tocols.e_server_msg_type:\016e_mst_bc_unbet"
    "\022\021\n\tplayer_id\030\002 \001(\005\"a\n\031packetc2l_bc_clie"
    "nt_shake\022D\n\tpacket_id\030\001 \001(\0162!.dice_proto"
    "cols.e_server_msg_type:\016e_mst_bc_shake\"x"
    "\n\034packetc2l_bc_client_beginbet\022G\n\tpacket"
    "_id\030\001 \001(\0162!.dice_protocols.e_server_msg_"
    "type:\021e_mst_bc_beginbet\022\017\n\007cd_time\030\002 \001(\005"
    "\"c\n\032packetc2l_bc_client_endbet\022E\n\tpacket"
    "_id\030\001 \001(\0162!.dice_protocols.e_server_msg_"
    "type:\017e_mst_bc_endbet\"8\n\tdice_info\022\r\n\005di"
    "ce1\030\001 \001(\005\022\r\n\005dice2\030\002 \001(\005\022\r\n\005dice3\030\003 \001(\005\""
    "\227\001\n\030packetc2l_bc_client_dice\022C\n\tpacket_i"
    "d\030\001 \001(\0162!.dice_protocols.e_server_msg_ty"
    "pe:\re_mst_bc_dice\022%\n\002di\030\002 \001(\0132\031.dice_pro"
    "tocols.dice_info\022\017\n\007cd_time\030\003 \001(\005\"3\n\020gol"
    "d_change_info\022\021\n\tplayer_id\030\001 \001(\005\022\014\n\004gold"
    "\030\002 \001(\003\"\230\001\n\030packetc2l_bc_gold_change\022J\n\tp"
    "acket_id\030\001 \001(\0162!.dice_protocols.e_server"
    "_msg_type:\024e_mst_bc_gold_change\0220\n\006chang"
    "e\030\002 \001(\0132 .dice_protocols.gold_change_inf"
    "o\"\235\001\n\027packetc2l_bc_table_info\022I\n\tpacket_"
    "id\030\001 \001(\0162!.dice_protocols.e_server_msg_t"
    "ype:\023e_mst_bc_table_info\022)\n\005table\030\002 \001(\0132"
    "\032.dice_protocols.table_info\022\014\n\004flag\030\003 \001("
    "\005\"V\n\013chang_table\022G\n\tpacket_id\030\001 \001(\0162!.di"
    "ce_protocols.e_server_msg_type:\021e_mst_ch"
    "ang_table\"\224\001\n\022chang_table_result\022N\n\tpack"
    "et_id\030\001 \001(\0162!.dice_protocols.e_server_ms"
    "g_type:\030e_mst_chang_table_result\022.\n\006resu"
    "lt\030\002 \001(\0162\036.msg_type_def.e_msg_result_def"
    "\"\217\001\n\ngm_command\022F\n\tpacket_id\030\001 \001(\0162!.dic"
    "e_protocols.e_server_msg_type:\020e_mst_gm_"
    "command\022\r\n\005dice1\030\002 \001(\005\022\r\n\005dice2\030\003 \001(\005\022\r\n"
    "\005dice3\030\004 \001(\005\022\014\n\004open\030\005 \001(\005\"`\n\020player_lis"
    "t_info\022L\n\tpacket_id\030\001 \001(\0162!.dice_protoco"
    "ls.e_server_msg_type:\026e_mst_player_list_"
    "info\"\255\001\n\027player_list_info_result\022S\n\tpack"
    "et_id\030\001 \001(\0162!.dice_protocols.e_server_ms"
    "g_type:\035e_mst_player_list_info_result\022)\n"
    "\004info\030\002 \003(\0132\033.dice_protocols.player_info"
    "\022\022\n\nplayer_num\030\003 \001(\005\"P\n\021other_player_inf"
    "o\022\023\n\013player_gold\030\001 \001(\003\022\023\n\013player_name\030\002 "
    "\001(\t\022\021\n\tplayer_id\030\003 \001(\005\"\207\002\n\016balance_resul"
    "t\022J\n\tpacket_id\030\001 \001(\0162!.dice_protocols.e_"
    "server_msg_type:\024e_mst_balance_result\022\023\n"
    "\013player_gold\030\002 \001(\003\022\032\n\022playe_ticket_count"
    "\030\003 \001(\005\022/\n\004info\030\004 \003(\0132!.dice_protocols.ot"
    "her_player_info\022\020\n\010bet_gold\030\005 \001(\003\022\020\n\010win"
    "_gold\030\006 \001(\003\022\022\n\norderIndex\030\007 \001(\005\022\017\n\007cd_ti"
    "me\030\010 \001(\005\"\201\001\n\014bc_other_bet\022H\n\tpacket_id\030\001"
    " \001(\0162!.dice_protocols.e_server_msg_type:"
    "\022e_mst_bc_other_bet\022\'\n\004info\030\002 \003(\0132\031.dice"
    "_protocols.other_bet\"\251\001\n\026packetc2l_game_"
    "control\022L\n\tpacket_id\030\001 \001(\0162!.dice_protoc"
    "ols.e_server_msg_type:\026e_mst_c2l_game_co"
    "ntrol\022\r\n\005dice1\030\002 \001(\005\022\r\n\005dice2\030\003 \001(\005\022\r\n\005d"
    "ice3\030\004 \001(\005\022\024\n\014diceBigSmall\030\005 \001(\005\"\244\001\n\035pac"
    "ketl2c_game_control_result\022S\n\tpacket_id\030"
    "\001 \001(\0162!.dice_protocols.e_server_msg_type"
    ":\035e_mst_l2c_game_control_result\022.\n\006resul"
    "t\030\002 \001(\0162\036.msg_type_def.e_msg_result_def\""
    "u\n\023packetl2c_debuginfo\022I\n\tpacket_id\030\001 \001("
    "\0162!.dice_protocols.e_server_msg_type:\023e_"
    "mst_l2c_debuginfo\022\023\n\013debug_infos\030\002 \001(\t\"Q"
    "\n\014msg_bet_info\022.\n\tbet_index\030\001 \001(\0162\033.dice"
    "_protocols.e_dice_type\022\021\n\tbet_count\030\002 \001("
    "\003\"s\n\017gm_msg_bet_info\0220\n\013player_info\030\001 \001("
    "\0132\033.dice_protocols.player_info\022.\n\010bet_in"
    "fo\030\002 \003(\0132\034.dice_protocols.msg_bet_info\"\257"
    "\001\n\035packetl2c_notice_all_bet_info\022V\n\tpack"
    "et_id\030\001 \001(\0162!.dice_protocols.e_server_ms"
    "g_type: e_mst_l2c_notice_gm_all_bet_info"
    "\0226\n\rbet_info_list\030\002 \003(\0132\037.dice_protocols"
    ".gm_msg_bet_info\"\277\001\n\026packetl2c_bc_debugi"
    "nfo\022L\n\tpacket_id\030\001 \001(\0162!.dice_protocols."
    "e_server_msg_type:\026e_mst_l2c_bc_debuginf"
    "o\022\021\n\tplayer_id\030\002 \001(\005\022\027\n\014total_profit\030\003 \001"
    "(\003:\0010\022\026\n\013total_stock\030\004 \001(\003:\0010\022\023\n\013debug_i"
    "nfos\030\005 \001(\t", 6210);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_dice_protocol.proto", &protobuf_RegisterTypes);
  packetc2l_check_state::default_instance_ = new packetc2l_check_state();
  packetc2l_check_state_result::default_instance_ = new packetc2l_check_state_result();
  packetc2l_get_room_info::default_instance_ = new packetc2l_get_room_info();
  room_info::default_instance_ = new room_info();
  packetl2c_get_room_info_result::default_instance_ = new packetl2c_get_room_info_result();
  player_info::default_instance_ = new player_info();
  other_bet::default_instance_ = new other_bet();
  table_info::default_instance_ = new table_info();
  packetc2l_entertable::default_instance_ = new packetc2l_entertable();
  packetc2l_entertable_result::default_instance_ = new packetc2l_entertable_result();
  packetc2l_leavetable::default_instance_ = new packetc2l_leavetable();
  packetc2l_leavetable_result::default_instance_ = new packetc2l_leavetable_result();
  packetc2l_get_table_info::default_instance_ = new packetc2l_get_table_info();
  packetc2l_get_table_info_result::default_instance_ = new packetc2l_get_table_info_result();
  dice_bet::default_instance_ = new dice_bet();
  bet_info::default_instance_ = new bet_info();
  packetc2l_bet::default_instance_ = new packetc2l_bet();
  packetc2l_bet_again::default_instance_ = new packetc2l_bet_again();
  packetc2l_bet_result::default_instance_ = new packetc2l_bet_result();
  packetc2l_bc_bet::default_instance_ = new packetc2l_bc_bet();
  packetc2l_unbet::default_instance_ = new packetc2l_unbet();
  packetc2l_unbet_result::default_instance_ = new packetc2l_unbet_result();
  packetc2l_bc_unbet::default_instance_ = new packetc2l_bc_unbet();
  packetc2l_bc_client_shake::default_instance_ = new packetc2l_bc_client_shake();
  packetc2l_bc_client_beginbet::default_instance_ = new packetc2l_bc_client_beginbet();
  packetc2l_bc_client_endbet::default_instance_ = new packetc2l_bc_client_endbet();
  dice_info::default_instance_ = new dice_info();
  packetc2l_bc_client_dice::default_instance_ = new packetc2l_bc_client_dice();
  gold_change_info::default_instance_ = new gold_change_info();
  packetc2l_bc_gold_change::default_instance_ = new packetc2l_bc_gold_change();
  packetc2l_bc_table_info::default_instance_ = new packetc2l_bc_table_info();
  chang_table::default_instance_ = new chang_table();
  chang_table_result::default_instance_ = new chang_table_result();
  gm_command::default_instance_ = new gm_command();
  player_list_info::default_instance_ = new player_list_info();
  player_list_info_result::default_instance_ = new player_list_info_result();
  other_player_info::default_instance_ = new other_player_info();
  balance_result::default_instance_ = new balance_result();
  bc_other_bet::default_instance_ = new bc_other_bet();
  packetc2l_game_control::default_instance_ = new packetc2l_game_control();
  packetl2c_game_control_result::default_instance_ = new packetl2c_game_control_result();
  packetl2c_debuginfo::default_instance_ = new packetl2c_debuginfo();
  msg_bet_info::default_instance_ = new msg_bet_info();
  gm_msg_bet_info::default_instance_ = new gm_msg_bet_info();
  packetl2c_notice_all_bet_info::default_instance_ = new packetl2c_notice_all_bet_info();
  packetl2c_bc_debuginfo::default_instance_ = new packetl2c_bc_debuginfo();
  packetc2l_check_state::default_instance_->InitAsDefaultInstance();
  packetc2l_check_state_result::default_instance_->InitAsDefaultInstance();
  packetc2l_get_room_info::default_instance_->InitAsDefaultInstance();
  room_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_room_info_result::default_instance_->InitAsDefaultInstance();
  player_info::default_instance_->InitAsDefaultInstance();
  other_bet::default_instance_->InitAsDefaultInstance();
  table_info::default_instance_->InitAsDefaultInstance();
  packetc2l_entertable::default_instance_->InitAsDefaultInstance();
  packetc2l_entertable_result::default_instance_->InitAsDefaultInstance();
  packetc2l_leavetable::default_instance_->InitAsDefaultInstance();
  packetc2l_leavetable_result::default_instance_->InitAsDefaultInstance();
  packetc2l_get_table_info::default_instance_->InitAsDefaultInstance();
  packetc2l_get_table_info_result::default_instance_->InitAsDefaultInstance();
  dice_bet::default_instance_->InitAsDefaultInstance();
  bet_info::default_instance_->InitAsDefaultInstance();
  packetc2l_bet::default_instance_->InitAsDefaultInstance();
  packetc2l_bet_again::default_instance_->InitAsDefaultInstance();
  packetc2l_bet_result::default_instance_->InitAsDefaultInstance();
  packetc2l_bc_bet::default_instance_->InitAsDefaultInstance();
  packetc2l_unbet::default_instance_->InitAsDefaultInstance();
  packetc2l_unbet_result::default_instance_->InitAsDefaultInstance();
  packetc2l_bc_unbet::default_instance_->InitAsDefaultInstance();
  packetc2l_bc_client_shake::default_instance_->InitAsDefaultInstance();
  packetc2l_bc_client_beginbet::default_instance_->InitAsDefaultInstance();
  packetc2l_bc_client_endbet::default_instance_->InitAsDefaultInstance();
  dice_info::default_instance_->InitAsDefaultInstance();
  packetc2l_bc_client_dice::default_instance_->InitAsDefaultInstance();
  gold_change_info::default_instance_->InitAsDefaultInstance();
  packetc2l_bc_gold_change::default_instance_->InitAsDefaultInstance();
  packetc2l_bc_table_info::default_instance_->InitAsDefaultInstance();
  chang_table::default_instance_->InitAsDefaultInstance();
  chang_table_result::default_instance_->InitAsDefaultInstance();
  gm_command::default_instance_->InitAsDefaultInstance();
  player_list_info::default_instance_->InitAsDefaultInstance();
  player_list_info_result::default_instance_->InitAsDefaultInstance();
  other_player_info::default_instance_->InitAsDefaultInstance();
  balance_result::default_instance_->InitAsDefaultInstance();
  bc_other_bet::default_instance_->InitAsDefaultInstance();
  packetc2l_game_control::default_instance_->InitAsDefaultInstance();
  packetl2c_game_control_result::default_instance_->InitAsDefaultInstance();
  packetl2c_debuginfo::default_instance_->InitAsDefaultInstance();
  msg_bet_info::default_instance_->InitAsDefaultInstance();
  gm_msg_bet_info::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_all_bet_info::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_debuginfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fdice_5fprotocol_2eproto {
  StaticDescriptorInitializer_game_5fdice_5fprotocol_2eproto() {
    protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  }
} static_descriptor_initializer_game_5fdice_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2l_check_state::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_check_state::packetc2l_check_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_check_state::InitAsDefaultInstance() {
}

packetc2l_check_state::packetc2l_check_state(const packetc2l_check_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_check_state::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10001;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_check_state::~packetc2l_check_state() {
  SharedDtor();
}

void packetc2l_check_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_check_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_check_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_check_state_descriptor_;
}

const packetc2l_check_state& packetc2l_check_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_check_state* packetc2l_check_state::default_instance_ = NULL;

packetc2l_check_state* packetc2l_check_state::New() const {
  return new packetc2l_check_state;
}

void packetc2l_check_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10001;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_check_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_check_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_check_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_check_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_check_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_check_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_check_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_check_state::MergeFrom(const packetc2l_check_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_check_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_check_state::CopyFrom(const packetc2l_check_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_check_state::IsInitialized() const {

  return true;
}

void packetc2l_check_state::Swap(packetc2l_check_state* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_check_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_check_state_descriptor_;
  metadata.reflection = packetc2l_check_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_check_state_result::kPacketIdFieldNumber;
const int packetc2l_check_state_result::kInTableFieldNumber;
#endif  // !_MSC_VER

packetc2l_check_state_result::packetc2l_check_state_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_check_state_result::InitAsDefaultInstance() {
}

packetc2l_check_state_result::packetc2l_check_state_result(const packetc2l_check_state_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_check_state_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15001;
  in_table_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_check_state_result::~packetc2l_check_state_result() {
  SharedDtor();
}

void packetc2l_check_state_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_check_state_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_check_state_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_check_state_result_descriptor_;
}

const packetc2l_check_state_result& packetc2l_check_state_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_check_state_result* packetc2l_check_state_result::default_instance_ = NULL;

packetc2l_check_state_result* packetc2l_check_state_result::New() const {
  return new packetc2l_check_state_result;
}

void packetc2l_check_state_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15001;
    in_table_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_check_state_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_in_table;
        break;
      }

      // optional bool in_table = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_table:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_table_)));
          set_has_in_table();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_check_state_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional bool in_table = 2 [default = false];
  if (has_in_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->in_table(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_check_state_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional bool in_table = 2 [default = false];
  if (has_in_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->in_table(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_check_state_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool in_table = 2 [default = false];
    if (has_in_table()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_check_state_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_check_state_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_check_state_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_check_state_result::MergeFrom(const packetc2l_check_state_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_in_table()) {
      set_in_table(from.in_table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_check_state_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_check_state_result::CopyFrom(const packetc2l_check_state_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_check_state_result::IsInitialized() const {

  return true;
}

void packetc2l_check_state_result::Swap(packetc2l_check_state_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(in_table_, other->in_table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_check_state_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_check_state_result_descriptor_;
  metadata.reflection = packetc2l_check_state_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_room_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_room_info::packetc2l_get_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_room_info::InitAsDefaultInstance() {
}

packetc2l_get_room_info::packetc2l_get_room_info(const packetc2l_get_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_room_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10002;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_room_info::~packetc2l_get_room_info() {
  SharedDtor();
}

void packetc2l_get_room_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_room_info_descriptor_;
}

const packetc2l_get_room_info& packetc2l_get_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_room_info* packetc2l_get_room_info::default_instance_ = NULL;

packetc2l_get_room_info* packetc2l_get_room_info::New() const {
  return new packetc2l_get_room_info;
}

void packetc2l_get_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10002;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_room_info::MergeFrom(const packetc2l_get_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_room_info::CopyFrom(const packetc2l_get_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_room_info::IsInitialized() const {

  return true;
}

void packetc2l_get_room_info::Swap(packetc2l_get_room_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_room_info_descriptor_;
  metadata.reflection = packetc2l_get_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int room_info::kIdFieldNumber;
#endif  // !_MSC_VER

room_info::room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void room_info::InitAsDefaultInstance() {
}

room_info::room_info(const room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void room_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

room_info::~room_info() {
  SharedDtor();
}

void room_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return room_info_descriptor_;
}

const room_info& room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

room_info* room_info::default_instance_ = NULL;

room_info* room_info::New() const {
  return new room_info;
}

void room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void room_info::MergeFrom(const room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void room_info::CopyFrom(const room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool room_info::IsInitialized() const {

  return true;
}

void room_info::Swap(room_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = room_info_descriptor_;
  metadata.reflection = room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_room_info_result::kPacketIdFieldNumber;
const int packetl2c_get_room_info_result::kRoomFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_room_info_result::packetl2c_get_room_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_get_room_info_result::InitAsDefaultInstance() {
}

packetl2c_get_room_info_result::packetl2c_get_room_info_result(const packetl2c_get_room_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_get_room_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15002;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_room_info_result::~packetl2c_get_room_info_result() {
  SharedDtor();
}

void packetl2c_get_room_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_get_room_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_room_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_room_info_result_descriptor_;
}

const packetl2c_get_room_info_result& packetl2c_get_room_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_get_room_info_result* packetl2c_get_room_info_result::default_instance_ = NULL;

packetl2c_get_room_info_result* packetl2c_get_room_info_result::New() const {
  return new packetl2c_get_room_info_result;
}

void packetl2c_get_room_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15002;
  }
  room_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_room_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room;
        break;
      }

      // repeated .dice_protocols.room_info room = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_get_room_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .dice_protocols.room_info room = 2;
  for (int i = 0; i < this->room_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_get_room_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .dice_protocols.room_info room = 2;
  for (int i = 0; i < this->room_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_get_room_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .dice_protocols.room_info room = 2;
  total_size += 1 * this->room_size();
  for (int i = 0; i < this->room_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_room_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_room_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_room_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_room_info_result::MergeFrom(const packetl2c_get_room_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_.MergeFrom(from.room_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_room_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_room_info_result::CopyFrom(const packetl2c_get_room_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_room_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_room_info_result::Swap(packetl2c_get_room_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    room_.Swap(&other->room_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_room_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_room_info_result_descriptor_;
  metadata.reflection = packetl2c_get_room_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_info::kPlayerIdFieldNumber;
const int player_info::kPlayerNicknameFieldNumber;
const int player_info::kPlayerHeadIdFieldNumber;
const int player_info::kPlayerHeadIdCustomFieldNumber;
const int player_info::kPlayerGoldFieldNumber;
const int player_info::kPlayerSexFieldNumber;
const int player_info::kPlayerVipLvFieldNumber;
#endif  // !_MSC_VER

player_info::player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_info::InitAsDefaultInstance() {
}

player_info::player_info(const player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_info::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  player_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_head_id_ = 0;
  player_head_id_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_gold_ = GOOGLE_LONGLONG(0);
  player_sex_ = 0;
  player_vip_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_info::~player_info() {
  SharedDtor();
}

void player_info::SharedDtor() {
  if (player_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete player_nickname_;
  }
  if (player_head_id_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete player_head_id_custom_;
  }
  if (this != default_instance_) {
  }
}

void player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_info_descriptor_;
}

const player_info& player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

player_info* player_info::default_instance_ = NULL;

player_info* player_info::New() const {
  return new player_info;
}

void player_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    if (has_player_nickname()) {
      if (player_nickname_ != &::google::protobuf::internal::kEmptyString) {
        player_nickname_->clear();
      }
    }
    player_head_id_ = 0;
    if (has_player_head_id_custom()) {
      if (player_head_id_custom_ != &::google::protobuf::internal::kEmptyString) {
        player_head_id_custom_->clear();
      }
    }
    player_gold_ = GOOGLE_LONGLONG(0);
    player_sex_ = 0;
    player_vip_lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_nickname;
        break;
      }

      // optional string player_nickname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_nickname().data(), this->player_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_player_head_id;
        break;
      }

      // optional int32 player_head_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_head_id_)));
          set_has_player_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_player_head_id_custom;
        break;
      }

      // optional string player_head_id_custom = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_head_id_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_head_id_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_head_id_custom().data(), this->player_head_id_custom().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_player_sex;
        break;
      }

      // optional int32 player_sex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_sex_)));
          set_has_player_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_player_vip_lv;
        break;
      }

      // optional int32 player_vip_lv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_vip_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_vip_lv_)));
          set_has_player_vip_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional string player_nickname = 3;
  if (has_player_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_nickname().data(), this->player_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->player_nickname(), output);
  }

  // optional int32 player_head_id = 4;
  if (has_player_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->player_head_id(), output);
  }

  // optional string player_head_id_custom = 5;
  if (has_player_head_id_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_head_id_custom().data(), this->player_head_id_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->player_head_id_custom(), output);
  }

  // optional int64 player_gold = 6;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->player_gold(), output);
  }

  // optional int32 player_sex = 7;
  if (has_player_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->player_sex(), output);
  }

  // optional int32 player_vip_lv = 8;
  if (has_player_vip_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->player_vip_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional string player_nickname = 3;
  if (has_player_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_nickname().data(), this->player_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->player_nickname(), target);
  }

  // optional int32 player_head_id = 4;
  if (has_player_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->player_head_id(), target);
  }

  // optional string player_head_id_custom = 5;
  if (has_player_head_id_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_head_id_custom().data(), this->player_head_id_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->player_head_id_custom(), target);
  }

  // optional int64 player_gold = 6;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->player_gold(), target);
  }

  // optional int32 player_sex = 7;
  if (has_player_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->player_sex(), target);
  }

  // optional int32 player_vip_lv = 8;
  if (has_player_vip_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->player_vip_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional string player_nickname = 3;
    if (has_player_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_nickname());
    }

    // optional int32 player_head_id = 4;
    if (has_player_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_head_id());
    }

    // optional string player_head_id_custom = 5;
    if (has_player_head_id_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_head_id_custom());
    }

    // optional int64 player_gold = 6;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

    // optional int32 player_sex = 7;
    if (has_player_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_sex());
    }

    // optional int32 player_vip_lv = 8;
    if (has_player_vip_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_vip_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_info::MergeFrom(const player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_nickname()) {
      set_player_nickname(from.player_nickname());
    }
    if (from.has_player_head_id()) {
      set_player_head_id(from.player_head_id());
    }
    if (from.has_player_head_id_custom()) {
      set_player_head_id_custom(from.player_head_id_custom());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
    if (from.has_player_sex()) {
      set_player_sex(from.player_sex());
    }
    if (from.has_player_vip_lv()) {
      set_player_vip_lv(from.player_vip_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_info::CopyFrom(const player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_info::IsInitialized() const {

  return true;
}

void player_info::Swap(player_info* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_nickname_, other->player_nickname_);
    std::swap(player_head_id_, other->player_head_id_);
    std::swap(player_head_id_custom_, other->player_head_id_custom_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(player_sex_, other->player_sex_);
    std::swap(player_vip_lv_, other->player_vip_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_info_descriptor_;
  metadata.reflection = player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int other_bet::kBetAreaFieldNumber;
const int other_bet::kBetGoldFieldNumber;
#endif  // !_MSC_VER

other_bet::other_bet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void other_bet::InitAsDefaultInstance() {
}

other_bet::other_bet(const other_bet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void other_bet::SharedCtor() {
  _cached_size_ = 0;
  bet_area_ = 0;
  bet_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

other_bet::~other_bet() {
  SharedDtor();
}

void other_bet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void other_bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* other_bet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return other_bet_descriptor_;
}

const other_bet& other_bet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

other_bet* other_bet::default_instance_ = NULL;

other_bet* other_bet::New() const {
  return new other_bet;
}

void other_bet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bet_area_ = 0;
    bet_gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool other_bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bet_area = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_area_)));
          set_has_bet_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bet_gold;
        break;
      }

      // optional int64 bet_gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_gold_)));
          set_has_bet_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void other_bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bet_area = 1;
  if (has_bet_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bet_area(), output);
  }

  // optional int64 bet_gold = 2;
  if (has_bet_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bet_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* other_bet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bet_area = 1;
  if (has_bet_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bet_area(), target);
  }

  // optional int64 bet_gold = 2;
  if (has_bet_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bet_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int other_bet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bet_area = 1;
    if (has_bet_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_area());
    }

    // optional int64 bet_gold = 2;
    if (has_bet_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void other_bet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const other_bet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const other_bet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void other_bet::MergeFrom(const other_bet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bet_area()) {
      set_bet_area(from.bet_area());
    }
    if (from.has_bet_gold()) {
      set_bet_gold(from.bet_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void other_bet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void other_bet::CopyFrom(const other_bet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool other_bet::IsInitialized() const {

  return true;
}

void other_bet::Swap(other_bet* other) {
  if (other != this) {
    std::swap(bet_area_, other->bet_area_);
    std::swap(bet_gold_, other->bet_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata other_bet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = other_bet_descriptor_;
  metadata.reflection = other_bet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int table_info::kGameStateFieldNumber;
const int table_info::kCdTimeFieldNumber;
const int table_info::kListInfoFieldNumber;
const int table_info::kPlayerGoldFieldNumber;
const int table_info::kPlayeTicketCountFieldNumber;
#endif  // !_MSC_VER

table_info::table_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void table_info::InitAsDefaultInstance() {
}

table_info::table_info(const table_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void table_info::SharedCtor() {
  _cached_size_ = 0;
  game_state_ = 0;
  cd_time_ = 0;
  player_gold_ = GOOGLE_LONGLONG(0);
  playe_ticket_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

table_info::~table_info() {
  SharedDtor();
}

void table_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void table_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* table_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return table_info_descriptor_;
}

const table_info& table_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

table_info* table_info::default_instance_ = NULL;

table_info* table_info::New() const {
  return new table_info;
}

void table_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_state_ = 0;
    cd_time_ = 0;
    player_gold_ = GOOGLE_LONGLONG(0);
    playe_ticket_count_ = 0;
  }
  list_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool table_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_msg_gamestate_type game_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_msg_gamestate_type_IsValid(value)) {
            set_game_state(static_cast< ::dice_protocols::e_msg_gamestate_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cd_time;
        break;
      }

      // optional int32 cd_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_time_)));
          set_has_cd_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_list_info;
        break;
      }

      // repeated .dice_protocols.dice_info list_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_list_info;
        if (input->ExpectTag(40)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_playe_ticket_count;
        break;
      }

      // optional int32 playe_ticket_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playe_ticket_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playe_ticket_count_)));
          set_has_playe_ticket_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void table_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_msg_gamestate_type game_state = 1;
  if (has_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->game_state(), output);
  }

  // optional int32 cd_time = 2;
  if (has_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cd_time(), output);
  }

  // repeated .dice_protocols.dice_info list_info = 4;
  for (int i = 0; i < this->list_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->list_info(i), output);
  }

  // optional int64 player_gold = 5;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->player_gold(), output);
  }

  // optional int32 playe_ticket_count = 6;
  if (has_playe_ticket_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->playe_ticket_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* table_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_msg_gamestate_type game_state = 1;
  if (has_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->game_state(), target);
  }

  // optional int32 cd_time = 2;
  if (has_cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cd_time(), target);
  }

  // repeated .dice_protocols.dice_info list_info = 4;
  for (int i = 0; i < this->list_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->list_info(i), target);
  }

  // optional int64 player_gold = 5;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->player_gold(), target);
  }

  // optional int32 playe_ticket_count = 6;
  if (has_playe_ticket_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->playe_ticket_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int table_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_msg_gamestate_type game_state = 1;
    if (has_game_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
    }

    // optional int32 cd_time = 2;
    if (has_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd_time());
    }

    // optional int64 player_gold = 5;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

    // optional int32 playe_ticket_count = 6;
    if (has_playe_ticket_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playe_ticket_count());
    }

  }
  // repeated .dice_protocols.dice_info list_info = 4;
  total_size += 1 * this->list_info_size();
  for (int i = 0; i < this->list_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void table_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const table_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const table_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void table_info::MergeFrom(const table_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_info_.MergeFrom(from.list_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_state()) {
      set_game_state(from.game_state());
    }
    if (from.has_cd_time()) {
      set_cd_time(from.cd_time());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
    if (from.has_playe_ticket_count()) {
      set_playe_ticket_count(from.playe_ticket_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void table_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void table_info::CopyFrom(const table_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool table_info::IsInitialized() const {

  return true;
}

void table_info::Swap(table_info* other) {
  if (other != this) {
    std::swap(game_state_, other->game_state_);
    std::swap(cd_time_, other->cd_time_);
    list_info_.Swap(&other->list_info_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(playe_ticket_count_, other->playe_ticket_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata table_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = table_info_descriptor_;
  metadata.reflection = table_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_entertable::kPacketIdFieldNumber;
const int packetc2l_entertable::kRoomIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_entertable::packetc2l_entertable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_entertable::InitAsDefaultInstance() {
}

packetc2l_entertable::packetc2l_entertable(const packetc2l_entertable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_entertable::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10004;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_entertable::~packetc2l_entertable() {
  SharedDtor();
}

void packetc2l_entertable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_entertable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_entertable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_entertable_descriptor_;
}

const packetc2l_entertable& packetc2l_entertable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_entertable* packetc2l_entertable::default_instance_ = NULL;

packetc2l_entertable* packetc2l_entertable::New() const {
  return new packetc2l_entertable;
}

void packetc2l_entertable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10004;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_entertable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_table];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_entertable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_table];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_entertable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_table];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_entertable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_table];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_entertable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_entertable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_entertable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_entertable::MergeFrom(const packetc2l_entertable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_entertable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_entertable::CopyFrom(const packetc2l_entertable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_entertable::IsInitialized() const {

  return true;
}

void packetc2l_entertable::Swap(packetc2l_entertable* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_entertable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_entertable_descriptor_;
  metadata.reflection = packetc2l_entertable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_entertable_result::kPacketIdFieldNumber;
const int packetc2l_entertable_result::kResultFieldNumber;
const int packetc2l_entertable_result::kRoomIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_entertable_result::packetc2l_entertable_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_entertable_result::InitAsDefaultInstance() {
}

packetc2l_entertable_result::packetc2l_entertable_result(const packetc2l_entertable_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_entertable_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15004;
  result_ = 1;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_entertable_result::~packetc2l_entertable_result() {
  SharedDtor();
}

void packetc2l_entertable_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_entertable_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_entertable_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_entertable_result_descriptor_;
}

const packetc2l_entertable_result& packetc2l_entertable_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_entertable_result* packetc2l_entertable_result::default_instance_ = NULL;

packetc2l_entertable_result* packetc2l_entertable_result::New() const {
  return new packetc2l_entertable_result;
}

void packetc2l_entertable_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15004;
    result_ = 1;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_entertable_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_table_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_entertable_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_table_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_entertable_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_table_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_entertable_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_table_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_entertable_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_entertable_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_entertable_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_entertable_result::MergeFrom(const packetc2l_entertable_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_entertable_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_entertable_result::CopyFrom(const packetc2l_entertable_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_entertable_result::IsInitialized() const {

  return true;
}

void packetc2l_entertable_result::Swap(packetc2l_entertable_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_entertable_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_entertable_result_descriptor_;
  metadata.reflection = packetc2l_entertable_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_leavetable::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_leavetable::packetc2l_leavetable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_leavetable::InitAsDefaultInstance() {
}

packetc2l_leavetable::packetc2l_leavetable(const packetc2l_leavetable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_leavetable::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10005;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_leavetable::~packetc2l_leavetable() {
  SharedDtor();
}

void packetc2l_leavetable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_leavetable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_leavetable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_leavetable_descriptor_;
}

const packetc2l_leavetable& packetc2l_leavetable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_leavetable* packetc2l_leavetable::default_instance_ = NULL;

packetc2l_leavetable* packetc2l_leavetable::New() const {
  return new packetc2l_leavetable;
}

void packetc2l_leavetable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10005;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_leavetable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_table];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_leavetable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_table];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_leavetable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_table];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_leavetable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_table];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_leavetable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_leavetable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_leavetable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_leavetable::MergeFrom(const packetc2l_leavetable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_leavetable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_leavetable::CopyFrom(const packetc2l_leavetable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_leavetable::IsInitialized() const {

  return true;
}

void packetc2l_leavetable::Swap(packetc2l_leavetable* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_leavetable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_leavetable_descriptor_;
  metadata.reflection = packetc2l_leavetable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_leavetable_result::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_leavetable_result::packetc2l_leavetable_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_leavetable_result::InitAsDefaultInstance() {
}

packetc2l_leavetable_result::packetc2l_leavetable_result(const packetc2l_leavetable_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_leavetable_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15005;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_leavetable_result::~packetc2l_leavetable_result() {
  SharedDtor();
}

void packetc2l_leavetable_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_leavetable_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_leavetable_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_leavetable_result_descriptor_;
}

const packetc2l_leavetable_result& packetc2l_leavetable_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_leavetable_result* packetc2l_leavetable_result::default_instance_ = NULL;

packetc2l_leavetable_result* packetc2l_leavetable_result::New() const {
  return new packetc2l_leavetable_result;
}

void packetc2l_leavetable_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15005;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_leavetable_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_table_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_leavetable_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_table_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_leavetable_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_table_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_leavetable_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_table_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_leavetable_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_leavetable_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_leavetable_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_leavetable_result::MergeFrom(const packetc2l_leavetable_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_leavetable_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_leavetable_result::CopyFrom(const packetc2l_leavetable_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_leavetable_result::IsInitialized() const {

  return true;
}

void packetc2l_leavetable_result::Swap(packetc2l_leavetable_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_leavetable_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_leavetable_result_descriptor_;
  metadata.reflection = packetc2l_leavetable_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_table_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_table_info::packetc2l_get_table_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_table_info::InitAsDefaultInstance() {
}

packetc2l_get_table_info::packetc2l_get_table_info(const packetc2l_get_table_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_table_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10003;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_table_info::~packetc2l_get_table_info() {
  SharedDtor();
}

void packetc2l_get_table_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_table_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_table_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_table_info_descriptor_;
}

const packetc2l_get_table_info& packetc2l_get_table_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_table_info* packetc2l_get_table_info::default_instance_ = NULL;

packetc2l_get_table_info* packetc2l_get_table_info::New() const {
  return new packetc2l_get_table_info;
}

void packetc2l_get_table_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10003;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_table_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_table_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_table_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_table_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_table_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_table_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_table_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_table_info::MergeFrom(const packetc2l_get_table_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_table_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_table_info::CopyFrom(const packetc2l_get_table_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_table_info::IsInitialized() const {

  return true;
}

void packetc2l_get_table_info::Swap(packetc2l_get_table_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_table_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_table_info_descriptor_;
  metadata.reflection = packetc2l_get_table_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_table_info_result::kPacketIdFieldNumber;
const int packetc2l_get_table_info_result::kRoomIdFieldNumber;
const int packetc2l_get_table_info_result::kTableFieldNumber;
const int packetc2l_get_table_info_result::kInfoFieldNumber;
const int packetc2l_get_table_info_result::kSelfInfoFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_table_info_result::packetc2l_get_table_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_table_info_result::InitAsDefaultInstance() {
  table_ = const_cast< ::dice_protocols::table_info*>(&::dice_protocols::table_info::default_instance());
}

packetc2l_get_table_info_result::packetc2l_get_table_info_result(const packetc2l_get_table_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_table_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15003;
  room_id_ = 0;
  table_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_table_info_result::~packetc2l_get_table_info_result() {
  SharedDtor();
}

void packetc2l_get_table_info_result::SharedDtor() {
  if (this != default_instance_) {
    delete table_;
  }
}

void packetc2l_get_table_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_table_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_table_info_result_descriptor_;
}

const packetc2l_get_table_info_result& packetc2l_get_table_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_table_info_result* packetc2l_get_table_info_result::default_instance_ = NULL;

packetc2l_get_table_info_result* packetc2l_get_table_info_result::New() const {
  return new packetc2l_get_table_info_result;
}

void packetc2l_get_table_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15003;
    room_id_ = 0;
    if (has_table()) {
      if (table_ != NULL) table_->::dice_protocols::table_info::Clear();
    }
  }
  info_.Clear();
  self_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_table_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_table_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table;
        break;
      }

      // optional .dice_protocols.table_info table = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // repeated .dice_protocols.other_bet info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        if (input->ExpectTag(42)) goto parse_self_info;
        break;
      }

      // repeated .dice_protocols.other_bet self_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_self_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_self_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_table_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_table_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  // optional .dice_protocols.table_info table = 3;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->table(), output);
  }

  // repeated .dice_protocols.other_bet info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(i), output);
  }

  // repeated .dice_protocols.other_bet self_info = 5;
  for (int i = 0; i < this->self_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->self_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_table_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_table_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  // optional .dice_protocols.table_info table = 3;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->table(), target);
  }

  // repeated .dice_protocols.other_bet info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(i), target);
  }

  // repeated .dice_protocols.other_bet self_info = 5;
  for (int i = 0; i < this->self_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->self_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_table_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_table_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional .dice_protocols.table_info table = 3;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table());
    }

  }
  // repeated .dice_protocols.other_bet info = 4;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  // repeated .dice_protocols.other_bet self_info = 5;
  total_size += 1 * this->self_info_size();
  for (int i = 0; i < this->self_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->self_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_table_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_table_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_table_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_table_info_result::MergeFrom(const packetc2l_get_table_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  self_info_.MergeFrom(from.self_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_table()) {
      mutable_table()->::dice_protocols::table_info::MergeFrom(from.table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_table_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_table_info_result::CopyFrom(const packetc2l_get_table_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_table_info_result::IsInitialized() const {

  return true;
}

void packetc2l_get_table_info_result::Swap(packetc2l_get_table_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(table_, other->table_);
    info_.Swap(&other->info_);
    self_info_.Swap(&other->self_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_table_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_table_info_result_descriptor_;
  metadata.reflection = packetc2l_get_table_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dice_bet::kChipTypeFieldNumber;
const int dice_bet::kDiceTypeFieldNumber;
const int dice_bet::kGoldFieldNumber;
#endif  // !_MSC_VER

dice_bet::dice_bet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dice_bet::InitAsDefaultInstance() {
}

dice_bet::dice_bet(const dice_bet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dice_bet::SharedCtor() {
  _cached_size_ = 0;
  chip_type_ = 0;
  dice_type_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dice_bet::~dice_bet() {
  SharedDtor();
}

void dice_bet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dice_bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dice_bet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dice_bet_descriptor_;
}

const dice_bet& dice_bet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

dice_bet* dice_bet::default_instance_ = NULL;

dice_bet* dice_bet::New() const {
  return new dice_bet;
}

void dice_bet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chip_type_ = 0;
    dice_type_ = 0;
    gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dice_bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chip_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chip_type_)));
          set_has_chip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dice_type;
        break;
      }

      // optional .dice_protocols.e_dice_type dice_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dice_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_dice_type_IsValid(value)) {
            set_dice_type(static_cast< ::dice_protocols::e_dice_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // optional int64 gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dice_bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chip_type = 1;
  if (has_chip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chip_type(), output);
  }

  // optional .dice_protocols.e_dice_type dice_type = 2;
  if (has_dice_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dice_type(), output);
  }

  // optional int64 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dice_bet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chip_type = 1;
  if (has_chip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chip_type(), target);
  }

  // optional .dice_protocols.e_dice_type dice_type = 2;
  if (has_dice_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dice_type(), target);
  }

  // optional int64 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dice_bet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chip_type = 1;
    if (has_chip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chip_type());
    }

    // optional .dice_protocols.e_dice_type dice_type = 2;
    if (has_dice_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dice_type());
    }

    // optional int64 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dice_bet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dice_bet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dice_bet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dice_bet::MergeFrom(const dice_bet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chip_type()) {
      set_chip_type(from.chip_type());
    }
    if (from.has_dice_type()) {
      set_dice_type(from.dice_type());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dice_bet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dice_bet::CopyFrom(const dice_bet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dice_bet::IsInitialized() const {

  return true;
}

void dice_bet::Swap(dice_bet* other) {
  if (other != this) {
    std::swap(chip_type_, other->chip_type_);
    std::swap(dice_type_, other->dice_type_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dice_bet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dice_bet_descriptor_;
  metadata.reflection = dice_bet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bet_info::kPlayerIdFieldNumber;
const int bet_info::kGoldFieldNumber;
const int bet_info::kDbFieldNumber;
#endif  // !_MSC_VER

bet_info::bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void bet_info::InitAsDefaultInstance() {
}

bet_info::bet_info(const bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void bet_info::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bet_info::~bet_info() {
  SharedDtor();
}

void bet_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bet_info_descriptor_;
}

const bet_info& bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

bet_info* bet_info::default_instance_ = NULL;

bet_info* bet_info::New() const {
  return new bet_info;
}

void bet_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    gold_ = GOOGLE_LONGLONG(0);
  }
  db_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional int64 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_db;
        break;
      }

      // repeated .dice_protocols.dice_bet db = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_db()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_db;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gold(), output);
  }

  // repeated .dice_protocols.dice_bet db = 3;
  for (int i = 0; i < this->db_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->db(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gold(), target);
  }

  // repeated .dice_protocols.dice_bet db = 3;
  for (int i = 0; i < this->db_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->db(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int bet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int64 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

  }
  // repeated .dice_protocols.dice_bet db = 3;
  total_size += 1 * this->db_size();
  for (int i = 0; i < this->db_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->db(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bet_info::MergeFrom(const bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  db_.MergeFrom(from.db_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bet_info::CopyFrom(const bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bet_info::IsInitialized() const {

  return true;
}

void bet_info::Swap(bet_info* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(gold_, other->gold_);
    db_.Swap(&other->db_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bet_info_descriptor_;
  metadata.reflection = bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_bet::kPacketIdFieldNumber;
const int packetc2l_bet::kDbFieldNumber;
#endif  // !_MSC_VER

packetc2l_bet::packetc2l_bet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_bet::InitAsDefaultInstance() {
  db_ = const_cast< ::dice_protocols::dice_bet*>(&::dice_protocols::dice_bet::default_instance());
}

packetc2l_bet::packetc2l_bet(const packetc2l_bet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_bet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10006;
  db_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_bet::~packetc2l_bet() {
  SharedDtor();
}

void packetc2l_bet::SharedDtor() {
  if (this != default_instance_) {
    delete db_;
  }
}

void packetc2l_bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_bet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_bet_descriptor_;
}

const packetc2l_bet& packetc2l_bet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_bet* packetc2l_bet::default_instance_ = NULL;

packetc2l_bet* packetc2l_bet::New() const {
  return new packetc2l_bet;
}

void packetc2l_bet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10006;
    if (has_db()) {
      if (db_ != NULL) db_->::dice_protocols::dice_bet::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bet];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_db;
        break;
      }

      // optional .dice_protocols.dice_bet db = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bet];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .dice_protocols.dice_bet db = 2;
  if (has_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->db(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_bet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bet];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .dice_protocols.dice_bet db = 2;
  if (has_db()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->db(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_bet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bet];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .dice_protocols.dice_bet db = 2;
    if (has_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_bet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_bet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_bet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_bet::MergeFrom(const packetc2l_bet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_db()) {
      mutable_db()->::dice_protocols::dice_bet::MergeFrom(from.db());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_bet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_bet::CopyFrom(const packetc2l_bet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_bet::IsInitialized() const {

  return true;
}

void packetc2l_bet::Swap(packetc2l_bet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(db_, other->db_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_bet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_bet_descriptor_;
  metadata.reflection = packetc2l_bet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_bet_again::kPacketIdFieldNumber;
const int packetc2l_bet_again::kDbFieldNumber;
#endif  // !_MSC_VER

packetc2l_bet_again::packetc2l_bet_again()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_bet_again::InitAsDefaultInstance() {
}

packetc2l_bet_again::packetc2l_bet_again(const packetc2l_bet_again& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_bet_again::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10008;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_bet_again::~packetc2l_bet_again() {
  SharedDtor();
}

void packetc2l_bet_again::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_bet_again::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_bet_again::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_bet_again_descriptor_;
}

const packetc2l_bet_again& packetc2l_bet_again::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_bet_again* packetc2l_bet_again::default_instance_ = NULL;

packetc2l_bet_again* packetc2l_bet_again::New() const {
  return new packetc2l_bet_again;
}

void packetc2l_bet_again::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10008;
  }
  db_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_bet_again::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bet_again];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_db;
        break;
      }

      // repeated .dice_protocols.dice_bet db = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_db()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_db;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_bet_again::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bet_again];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .dice_protocols.dice_bet db = 2;
  for (int i = 0; i < this->db_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->db(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_bet_again::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bet_again];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .dice_protocols.dice_bet db = 2;
  for (int i = 0; i < this->db_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->db(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_bet_again::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bet_again];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .dice_protocols.dice_bet db = 2;
  total_size += 1 * this->db_size();
  for (int i = 0; i < this->db_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->db(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_bet_again::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_bet_again* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_bet_again*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_bet_again::MergeFrom(const packetc2l_bet_again& from) {
  GOOGLE_CHECK_NE(&from, this);
  db_.MergeFrom(from.db_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_bet_again::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_bet_again::CopyFrom(const packetc2l_bet_again& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_bet_again::IsInitialized() const {

  return true;
}

void packetc2l_bet_again::Swap(packetc2l_bet_again* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    db_.Swap(&other->db_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_bet_again::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_bet_again_descriptor_;
  metadata.reflection = packetc2l_bet_again_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_bet_result::kPacketIdFieldNumber;
const int packetc2l_bet_result::kResultFieldNumber;
const int packetc2l_bet_result::kDbFieldNumber;
#endif  // !_MSC_VER

packetc2l_bet_result::packetc2l_bet_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_bet_result::InitAsDefaultInstance() {
  db_ = const_cast< ::dice_protocols::dice_bet*>(&::dice_protocols::dice_bet::default_instance());
}

packetc2l_bet_result::packetc2l_bet_result(const packetc2l_bet_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_bet_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15010;
  result_ = 1;
  db_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_bet_result::~packetc2l_bet_result() {
  SharedDtor();
}

void packetc2l_bet_result::SharedDtor() {
  if (this != default_instance_) {
    delete db_;
  }
}

void packetc2l_bet_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_bet_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_bet_result_descriptor_;
}

const packetc2l_bet_result& packetc2l_bet_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_bet_result* packetc2l_bet_result::default_instance_ = NULL;

packetc2l_bet_result* packetc2l_bet_result::New() const {
  return new packetc2l_bet_result;
}

void packetc2l_bet_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15010;
    result_ = 1;
    if (has_db()) {
      if (db_ != NULL) db_->::dice_protocols::dice_bet::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_bet_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_db;
        break;
      }

      // optional .dice_protocols.dice_bet db = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_bet_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional .dice_protocols.dice_bet db = 3;
  if (has_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->db(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_bet_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional .dice_protocols.dice_bet db = 3;
  if (has_db()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->db(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_bet_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .dice_protocols.dice_bet db = 3;
    if (has_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_bet_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_bet_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_bet_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_bet_result::MergeFrom(const packetc2l_bet_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_db()) {
      mutable_db()->::dice_protocols::dice_bet::MergeFrom(from.db());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_bet_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_bet_result::CopyFrom(const packetc2l_bet_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_bet_result::IsInitialized() const {

  return true;
}

void packetc2l_bet_result::Swap(packetc2l_bet_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(db_, other->db_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_bet_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_bet_result_descriptor_;
  metadata.reflection = packetc2l_bet_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_bc_bet::kPacketIdFieldNumber;
const int packetc2l_bc_bet::kBiFieldNumber;
#endif  // !_MSC_VER

packetc2l_bc_bet::packetc2l_bc_bet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_bc_bet::InitAsDefaultInstance() {
  bi_ = const_cast< ::dice_protocols::bet_info*>(&::dice_protocols::bet_info::default_instance());
}

packetc2l_bc_bet::packetc2l_bc_bet(const packetc2l_bc_bet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_bc_bet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15012;
  bi_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_bc_bet::~packetc2l_bc_bet() {
  SharedDtor();
}

void packetc2l_bc_bet::SharedDtor() {
  if (this != default_instance_) {
    delete bi_;
  }
}

void packetc2l_bc_bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_bc_bet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_bc_bet_descriptor_;
}

const packetc2l_bc_bet& packetc2l_bc_bet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_bc_bet* packetc2l_bc_bet::default_instance_ = NULL;

packetc2l_bc_bet* packetc2l_bc_bet::New() const {
  return new packetc2l_bc_bet;
}

void packetc2l_bc_bet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15012;
    if (has_bi()) {
      if (bi_ != NULL) bi_->::dice_protocols::bet_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_bc_bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_bet];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bi;
        break;
      }

      // optional .dice_protocols.bet_info bi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_bc_bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_bet];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .dice_protocols.bet_info bi = 2;
  if (has_bi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_bc_bet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_bet];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .dice_protocols.bet_info bi = 2;
  if (has_bi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_bc_bet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_bet];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .dice_protocols.bet_info bi = 2;
    if (has_bi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_bc_bet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_bc_bet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_bc_bet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_bc_bet::MergeFrom(const packetc2l_bc_bet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_bi()) {
      mutable_bi()->::dice_protocols::bet_info::MergeFrom(from.bi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_bc_bet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_bc_bet::CopyFrom(const packetc2l_bc_bet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_bc_bet::IsInitialized() const {

  return true;
}

void packetc2l_bc_bet::Swap(packetc2l_bc_bet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(bi_, other->bi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_bc_bet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_bc_bet_descriptor_;
  metadata.reflection = packetc2l_bc_bet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_unbet::kPacketIdFieldNumber;
const int packetc2l_unbet::kResultFieldNumber;
#endif  // !_MSC_VER

packetc2l_unbet::packetc2l_unbet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_unbet::InitAsDefaultInstance() {
}

packetc2l_unbet::packetc2l_unbet(const packetc2l_unbet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_unbet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10007;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_unbet::~packetc2l_unbet() {
  SharedDtor();
}

void packetc2l_unbet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_unbet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_unbet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_unbet_descriptor_;
}

const packetc2l_unbet& packetc2l_unbet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_unbet* packetc2l_unbet::default_instance_ = NULL;

packetc2l_unbet* packetc2l_unbet::New() const {
  return new packetc2l_unbet;
}

void packetc2l_unbet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10007;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_unbet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_unbet];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_unbet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_unbet];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_unbet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_unbet];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_unbet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_unbet];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_unbet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_unbet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_unbet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_unbet::MergeFrom(const packetc2l_unbet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_unbet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_unbet::CopyFrom(const packetc2l_unbet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_unbet::IsInitialized() const {

  return true;
}

void packetc2l_unbet::Swap(packetc2l_unbet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_unbet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_unbet_descriptor_;
  metadata.reflection = packetc2l_unbet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_unbet_result::kPacketIdFieldNumber;
const int packetc2l_unbet_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetc2l_unbet_result::packetc2l_unbet_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_unbet_result::InitAsDefaultInstance() {
}

packetc2l_unbet_result::packetc2l_unbet_result(const packetc2l_unbet_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_unbet_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15011;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_unbet_result::~packetc2l_unbet_result() {
  SharedDtor();
}

void packetc2l_unbet_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_unbet_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_unbet_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_unbet_result_descriptor_;
}

const packetc2l_unbet_result& packetc2l_unbet_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_unbet_result* packetc2l_unbet_result::default_instance_ = NULL;

packetc2l_unbet_result* packetc2l_unbet_result::New() const {
  return new packetc2l_unbet_result;
}

void packetc2l_unbet_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15011;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_unbet_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_unbet_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_unbet_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_unbet_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_unbet_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_unbet_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_unbet_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_unbet_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_unbet_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_unbet_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_unbet_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_unbet_result::MergeFrom(const packetc2l_unbet_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_unbet_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_unbet_result::CopyFrom(const packetc2l_unbet_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_unbet_result::IsInitialized() const {

  return true;
}

void packetc2l_unbet_result::Swap(packetc2l_unbet_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_unbet_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_unbet_result_descriptor_;
  metadata.reflection = packetc2l_unbet_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_bc_unbet::kPacketIdFieldNumber;
const int packetc2l_bc_unbet::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_bc_unbet::packetc2l_bc_unbet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_bc_unbet::InitAsDefaultInstance() {
}

packetc2l_bc_unbet::packetc2l_bc_unbet(const packetc2l_bc_unbet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_bc_unbet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15013;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_bc_unbet::~packetc2l_bc_unbet() {
  SharedDtor();
}

void packetc2l_bc_unbet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_bc_unbet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_bc_unbet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_bc_unbet_descriptor_;
}

const packetc2l_bc_unbet& packetc2l_bc_unbet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_bc_unbet* packetc2l_bc_unbet::default_instance_ = NULL;

packetc2l_bc_unbet* packetc2l_bc_unbet::New() const {
  return new packetc2l_bc_unbet;
}

void packetc2l_bc_unbet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15013;
    player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_bc_unbet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_unbet];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_bc_unbet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_unbet];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_bc_unbet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_unbet];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_bc_unbet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_unbet];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_bc_unbet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_bc_unbet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_bc_unbet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_bc_unbet::MergeFrom(const packetc2l_bc_unbet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_bc_unbet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_bc_unbet::CopyFrom(const packetc2l_bc_unbet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_bc_unbet::IsInitialized() const {

  return true;
}

void packetc2l_bc_unbet::Swap(packetc2l_bc_unbet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_bc_unbet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_bc_unbet_descriptor_;
  metadata.reflection = packetc2l_bc_unbet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_bc_client_shake::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_bc_client_shake::packetc2l_bc_client_shake()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_bc_client_shake::InitAsDefaultInstance() {
}

packetc2l_bc_client_shake::packetc2l_bc_client_shake(const packetc2l_bc_client_shake& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_bc_client_shake::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15006;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_bc_client_shake::~packetc2l_bc_client_shake() {
  SharedDtor();
}

void packetc2l_bc_client_shake::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_bc_client_shake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_bc_client_shake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_bc_client_shake_descriptor_;
}

const packetc2l_bc_client_shake& packetc2l_bc_client_shake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_bc_client_shake* packetc2l_bc_client_shake::default_instance_ = NULL;

packetc2l_bc_client_shake* packetc2l_bc_client_shake::New() const {
  return new packetc2l_bc_client_shake;
}

void packetc2l_bc_client_shake::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15006;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_bc_client_shake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_shake];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_bc_client_shake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_shake];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_bc_client_shake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_shake];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_bc_client_shake::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_shake];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_bc_client_shake::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_bc_client_shake* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_bc_client_shake*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_bc_client_shake::MergeFrom(const packetc2l_bc_client_shake& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_bc_client_shake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_bc_client_shake::CopyFrom(const packetc2l_bc_client_shake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_bc_client_shake::IsInitialized() const {

  return true;
}

void packetc2l_bc_client_shake::Swap(packetc2l_bc_client_shake* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_bc_client_shake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_bc_client_shake_descriptor_;
  metadata.reflection = packetc2l_bc_client_shake_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_bc_client_beginbet::kPacketIdFieldNumber;
const int packetc2l_bc_client_beginbet::kCdTimeFieldNumber;
#endif  // !_MSC_VER

packetc2l_bc_client_beginbet::packetc2l_bc_client_beginbet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_bc_client_beginbet::InitAsDefaultInstance() {
}

packetc2l_bc_client_beginbet::packetc2l_bc_client_beginbet(const packetc2l_bc_client_beginbet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_bc_client_beginbet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15007;
  cd_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_bc_client_beginbet::~packetc2l_bc_client_beginbet() {
  SharedDtor();
}

void packetc2l_bc_client_beginbet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_bc_client_beginbet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_bc_client_beginbet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_bc_client_beginbet_descriptor_;
}

const packetc2l_bc_client_beginbet& packetc2l_bc_client_beginbet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_bc_client_beginbet* packetc2l_bc_client_beginbet::default_instance_ = NULL;

packetc2l_bc_client_beginbet* packetc2l_bc_client_beginbet::New() const {
  return new packetc2l_bc_client_beginbet;
}

void packetc2l_bc_client_beginbet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15007;
    cd_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_bc_client_beginbet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_beginbet];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cd_time;
        break;
      }

      // optional int32 cd_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_time_)));
          set_has_cd_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_bc_client_beginbet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_beginbet];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 cd_time = 2;
  if (has_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cd_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_bc_client_beginbet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_beginbet];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 cd_time = 2;
  if (has_cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cd_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_bc_client_beginbet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_beginbet];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 cd_time = 2;
    if (has_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_bc_client_beginbet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_bc_client_beginbet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_bc_client_beginbet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_bc_client_beginbet::MergeFrom(const packetc2l_bc_client_beginbet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_cd_time()) {
      set_cd_time(from.cd_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_bc_client_beginbet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_bc_client_beginbet::CopyFrom(const packetc2l_bc_client_beginbet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_bc_client_beginbet::IsInitialized() const {

  return true;
}

void packetc2l_bc_client_beginbet::Swap(packetc2l_bc_client_beginbet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(cd_time_, other->cd_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_bc_client_beginbet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_bc_client_beginbet_descriptor_;
  metadata.reflection = packetc2l_bc_client_beginbet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_bc_client_endbet::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_bc_client_endbet::packetc2l_bc_client_endbet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_bc_client_endbet::InitAsDefaultInstance() {
}

packetc2l_bc_client_endbet::packetc2l_bc_client_endbet(const packetc2l_bc_client_endbet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_bc_client_endbet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15008;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_bc_client_endbet::~packetc2l_bc_client_endbet() {
  SharedDtor();
}

void packetc2l_bc_client_endbet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_bc_client_endbet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_bc_client_endbet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_bc_client_endbet_descriptor_;
}

const packetc2l_bc_client_endbet& packetc2l_bc_client_endbet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_bc_client_endbet* packetc2l_bc_client_endbet::default_instance_ = NULL;

packetc2l_bc_client_endbet* packetc2l_bc_client_endbet::New() const {
  return new packetc2l_bc_client_endbet;
}

void packetc2l_bc_client_endbet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15008;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_bc_client_endbet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_endbet];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_bc_client_endbet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_endbet];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_bc_client_endbet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_endbet];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_bc_client_endbet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_endbet];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_bc_client_endbet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_bc_client_endbet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_bc_client_endbet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_bc_client_endbet::MergeFrom(const packetc2l_bc_client_endbet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_bc_client_endbet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_bc_client_endbet::CopyFrom(const packetc2l_bc_client_endbet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_bc_client_endbet::IsInitialized() const {

  return true;
}

void packetc2l_bc_client_endbet::Swap(packetc2l_bc_client_endbet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_bc_client_endbet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_bc_client_endbet_descriptor_;
  metadata.reflection = packetc2l_bc_client_endbet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dice_info::kDice1FieldNumber;
const int dice_info::kDice2FieldNumber;
const int dice_info::kDice3FieldNumber;
#endif  // !_MSC_VER

dice_info::dice_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dice_info::InitAsDefaultInstance() {
}

dice_info::dice_info(const dice_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dice_info::SharedCtor() {
  _cached_size_ = 0;
  dice1_ = 0;
  dice2_ = 0;
  dice3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dice_info::~dice_info() {
  SharedDtor();
}

void dice_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dice_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dice_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dice_info_descriptor_;
}

const dice_info& dice_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

dice_info* dice_info::default_instance_ = NULL;

dice_info* dice_info::New() const {
  return new dice_info;
}

void dice_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dice1_ = 0;
    dice2_ = 0;
    dice3_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dice_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dice1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dice1_)));
          set_has_dice1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dice2;
        break;
      }

      // optional int32 dice2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dice2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dice2_)));
          set_has_dice2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dice3;
        break;
      }

      // optional int32 dice3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dice3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dice3_)));
          set_has_dice3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dice_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dice1 = 1;
  if (has_dice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dice1(), output);
  }

  // optional int32 dice2 = 2;
  if (has_dice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dice2(), output);
  }

  // optional int32 dice3 = 3;
  if (has_dice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dice3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dice_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dice1 = 1;
  if (has_dice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dice1(), target);
  }

  // optional int32 dice2 = 2;
  if (has_dice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dice2(), target);
  }

  // optional int32 dice3 = 3;
  if (has_dice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dice3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dice_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dice1 = 1;
    if (has_dice1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dice1());
    }

    // optional int32 dice2 = 2;
    if (has_dice2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dice2());
    }

    // optional int32 dice3 = 3;
    if (has_dice3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dice3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dice_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dice_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dice_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dice_info::MergeFrom(const dice_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dice1()) {
      set_dice1(from.dice1());
    }
    if (from.has_dice2()) {
      set_dice2(from.dice2());
    }
    if (from.has_dice3()) {
      set_dice3(from.dice3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dice_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dice_info::CopyFrom(const dice_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dice_info::IsInitialized() const {

  return true;
}

void dice_info::Swap(dice_info* other) {
  if (other != this) {
    std::swap(dice1_, other->dice1_);
    std::swap(dice2_, other->dice2_);
    std::swap(dice3_, other->dice3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dice_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dice_info_descriptor_;
  metadata.reflection = dice_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_bc_client_dice::kPacketIdFieldNumber;
const int packetc2l_bc_client_dice::kDiFieldNumber;
const int packetc2l_bc_client_dice::kCdTimeFieldNumber;
#endif  // !_MSC_VER

packetc2l_bc_client_dice::packetc2l_bc_client_dice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_bc_client_dice::InitAsDefaultInstance() {
  di_ = const_cast< ::dice_protocols::dice_info*>(&::dice_protocols::dice_info::default_instance());
}

packetc2l_bc_client_dice::packetc2l_bc_client_dice(const packetc2l_bc_client_dice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_bc_client_dice::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15009;
  di_ = NULL;
  cd_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_bc_client_dice::~packetc2l_bc_client_dice() {
  SharedDtor();
}

void packetc2l_bc_client_dice::SharedDtor() {
  if (this != default_instance_) {
    delete di_;
  }
}

void packetc2l_bc_client_dice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_bc_client_dice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_bc_client_dice_descriptor_;
}

const packetc2l_bc_client_dice& packetc2l_bc_client_dice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_bc_client_dice* packetc2l_bc_client_dice::default_instance_ = NULL;

packetc2l_bc_client_dice* packetc2l_bc_client_dice::New() const {
  return new packetc2l_bc_client_dice;
}

void packetc2l_bc_client_dice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15009;
    if (has_di()) {
      if (di_ != NULL) di_->::dice_protocols::dice_info::Clear();
    }
    cd_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_bc_client_dice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_dice];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_di;
        break;
      }

      // optional .dice_protocols.dice_info di = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_di:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_di()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cd_time;
        break;
      }

      // optional int32 cd_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_time_)));
          set_has_cd_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_bc_client_dice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_dice];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .dice_protocols.dice_info di = 2;
  if (has_di()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->di(), output);
  }

  // optional int32 cd_time = 3;
  if (has_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cd_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_bc_client_dice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_dice];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .dice_protocols.dice_info di = 2;
  if (has_di()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->di(), target);
  }

  // optional int32 cd_time = 3;
  if (has_cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cd_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_bc_client_dice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_dice];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .dice_protocols.dice_info di = 2;
    if (has_di()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->di());
    }

    // optional int32 cd_time = 3;
    if (has_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_bc_client_dice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_bc_client_dice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_bc_client_dice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_bc_client_dice::MergeFrom(const packetc2l_bc_client_dice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_di()) {
      mutable_di()->::dice_protocols::dice_info::MergeFrom(from.di());
    }
    if (from.has_cd_time()) {
      set_cd_time(from.cd_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_bc_client_dice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_bc_client_dice::CopyFrom(const packetc2l_bc_client_dice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_bc_client_dice::IsInitialized() const {

  return true;
}

void packetc2l_bc_client_dice::Swap(packetc2l_bc_client_dice* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(di_, other->di_);
    std::swap(cd_time_, other->cd_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_bc_client_dice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_bc_client_dice_descriptor_;
  metadata.reflection = packetc2l_bc_client_dice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gold_change_info::kPlayerIdFieldNumber;
const int gold_change_info::kGoldFieldNumber;
#endif  // !_MSC_VER

gold_change_info::gold_change_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gold_change_info::InitAsDefaultInstance() {
}

gold_change_info::gold_change_info(const gold_change_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gold_change_info::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gold_change_info::~gold_change_info() {
  SharedDtor();
}

void gold_change_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gold_change_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gold_change_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gold_change_info_descriptor_;
}

const gold_change_info& gold_change_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

gold_change_info* gold_change_info::default_instance_ = NULL;

gold_change_info* gold_change_info::New() const {
  return new gold_change_info;
}

void gold_change_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gold_change_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional int64 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gold_change_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gold_change_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gold_change_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int64 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gold_change_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gold_change_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gold_change_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gold_change_info::MergeFrom(const gold_change_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gold_change_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gold_change_info::CopyFrom(const gold_change_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gold_change_info::IsInitialized() const {

  return true;
}

void gold_change_info::Swap(gold_change_info* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gold_change_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gold_change_info_descriptor_;
  metadata.reflection = gold_change_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_bc_gold_change::kPacketIdFieldNumber;
const int packetc2l_bc_gold_change::kChangeFieldNumber;
#endif  // !_MSC_VER

packetc2l_bc_gold_change::packetc2l_bc_gold_change()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_bc_gold_change::InitAsDefaultInstance() {
  change_ = const_cast< ::dice_protocols::gold_change_info*>(&::dice_protocols::gold_change_info::default_instance());
}

packetc2l_bc_gold_change::packetc2l_bc_gold_change(const packetc2l_bc_gold_change& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_bc_gold_change::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15015;
  change_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_bc_gold_change::~packetc2l_bc_gold_change() {
  SharedDtor();
}

void packetc2l_bc_gold_change::SharedDtor() {
  if (this != default_instance_) {
    delete change_;
  }
}

void packetc2l_bc_gold_change::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_bc_gold_change::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_bc_gold_change_descriptor_;
}

const packetc2l_bc_gold_change& packetc2l_bc_gold_change::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_bc_gold_change* packetc2l_bc_gold_change::default_instance_ = NULL;

packetc2l_bc_gold_change* packetc2l_bc_gold_change::New() const {
  return new packetc2l_bc_gold_change;
}

void packetc2l_bc_gold_change::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15015;
    if (has_change()) {
      if (change_ != NULL) change_->::dice_protocols::gold_change_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_bc_gold_change::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_gold_change];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_change;
        break;
      }

      // optional .dice_protocols.gold_change_info change = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_bc_gold_change::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_gold_change];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .dice_protocols.gold_change_info change = 2;
  if (has_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->change(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_bc_gold_change::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_gold_change];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .dice_protocols.gold_change_info change = 2;
  if (has_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->change(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_bc_gold_change::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_gold_change];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .dice_protocols.gold_change_info change = 2;
    if (has_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_bc_gold_change::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_bc_gold_change* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_bc_gold_change*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_bc_gold_change::MergeFrom(const packetc2l_bc_gold_change& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_change()) {
      mutable_change()->::dice_protocols::gold_change_info::MergeFrom(from.change());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_bc_gold_change::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_bc_gold_change::CopyFrom(const packetc2l_bc_gold_change& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_bc_gold_change::IsInitialized() const {

  return true;
}

void packetc2l_bc_gold_change::Swap(packetc2l_bc_gold_change* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(change_, other->change_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_bc_gold_change::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_bc_gold_change_descriptor_;
  metadata.reflection = packetc2l_bc_gold_change_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_bc_table_info::kPacketIdFieldNumber;
const int packetc2l_bc_table_info::kTableFieldNumber;
const int packetc2l_bc_table_info::kFlagFieldNumber;
#endif  // !_MSC_VER

packetc2l_bc_table_info::packetc2l_bc_table_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_bc_table_info::InitAsDefaultInstance() {
  table_ = const_cast< ::dice_protocols::table_info*>(&::dice_protocols::table_info::default_instance());
}

packetc2l_bc_table_info::packetc2l_bc_table_info(const packetc2l_bc_table_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_bc_table_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15014;
  table_ = NULL;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_bc_table_info::~packetc2l_bc_table_info() {
  SharedDtor();
}

void packetc2l_bc_table_info::SharedDtor() {
  if (this != default_instance_) {
    delete table_;
  }
}

void packetc2l_bc_table_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_bc_table_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_bc_table_info_descriptor_;
}

const packetc2l_bc_table_info& packetc2l_bc_table_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_bc_table_info* packetc2l_bc_table_info::default_instance_ = NULL;

packetc2l_bc_table_info* packetc2l_bc_table_info::New() const {
  return new packetc2l_bc_table_info;
}

void packetc2l_bc_table_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15014;
    if (has_table()) {
      if (table_ != NULL) table_->::dice_protocols::table_info::Clear();
    }
    flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_bc_table_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_table_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // optional .dice_protocols.table_info table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }

      // optional int32 flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_bc_table_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_table_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .dice_protocols.table_info table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table(), output);
  }

  // optional int32 flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_bc_table_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_table_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .dice_protocols.table_info table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table(), target);
  }

  // optional int32 flag = 3;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_bc_table_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_table_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .dice_protocols.table_info table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table());
    }

    // optional int32 flag = 3;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_bc_table_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_bc_table_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_bc_table_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_bc_table_info::MergeFrom(const packetc2l_bc_table_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_table()) {
      mutable_table()->::dice_protocols::table_info::MergeFrom(from.table());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_bc_table_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_bc_table_info::CopyFrom(const packetc2l_bc_table_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_bc_table_info::IsInitialized() const {

  return true;
}

void packetc2l_bc_table_info::Swap(packetc2l_bc_table_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(table_, other->table_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_bc_table_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_bc_table_info_descriptor_;
  metadata.reflection = packetc2l_bc_table_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chang_table::kPacketIdFieldNumber;
#endif  // !_MSC_VER

chang_table::chang_table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chang_table::InitAsDefaultInstance() {
}

chang_table::chang_table(const chang_table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chang_table::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10010;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chang_table::~chang_table() {
  SharedDtor();
}

void chang_table::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chang_table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chang_table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chang_table_descriptor_;
}

const chang_table& chang_table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

chang_table* chang_table::default_instance_ = NULL;

chang_table* chang_table::New() const {
  return new chang_table;
}

void chang_table::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10010;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chang_table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_chang_table];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chang_table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_chang_table];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chang_table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_chang_table];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chang_table::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_chang_table];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chang_table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chang_table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chang_table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chang_table::MergeFrom(const chang_table& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chang_table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chang_table::CopyFrom(const chang_table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chang_table::IsInitialized() const {

  return true;
}

void chang_table::Swap(chang_table* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chang_table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chang_table_descriptor_;
  metadata.reflection = chang_table_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chang_table_result::kPacketIdFieldNumber;
const int chang_table_result::kResultFieldNumber;
#endif  // !_MSC_VER

chang_table_result::chang_table_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chang_table_result::InitAsDefaultInstance() {
}

chang_table_result::chang_table_result(const chang_table_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chang_table_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15016;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chang_table_result::~chang_table_result() {
  SharedDtor();
}

void chang_table_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chang_table_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chang_table_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chang_table_result_descriptor_;
}

const chang_table_result& chang_table_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

chang_table_result* chang_table_result::default_instance_ = NULL;

chang_table_result* chang_table_result::New() const {
  return new chang_table_result;
}

void chang_table_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15016;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chang_table_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_chang_table_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chang_table_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_chang_table_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chang_table_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_chang_table_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chang_table_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_chang_table_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chang_table_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chang_table_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chang_table_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chang_table_result::MergeFrom(const chang_table_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chang_table_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chang_table_result::CopyFrom(const chang_table_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chang_table_result::IsInitialized() const {

  return true;
}

void chang_table_result::Swap(chang_table_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chang_table_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chang_table_result_descriptor_;
  metadata.reflection = chang_table_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm_command::kPacketIdFieldNumber;
const int gm_command::kDice1FieldNumber;
const int gm_command::kDice2FieldNumber;
const int gm_command::kDice3FieldNumber;
const int gm_command::kOpenFieldNumber;
#endif  // !_MSC_VER

gm_command::gm_command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_command::InitAsDefaultInstance() {
}

gm_command::gm_command(const gm_command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_command::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10009;
  dice1_ = 0;
  dice2_ = 0;
  dice3_ = 0;
  open_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_command::~gm_command() {
  SharedDtor();
}

void gm_command::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gm_command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_command_descriptor_;
}

const gm_command& gm_command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

gm_command* gm_command::default_instance_ = NULL;

gm_command* gm_command::New() const {
  return new gm_command;
}

void gm_command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10009;
    dice1_ = 0;
    dice2_ = 0;
    dice3_ = 0;
    open_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gm_command];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dice1;
        break;
      }

      // optional int32 dice1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dice1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dice1_)));
          set_has_dice1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dice2;
        break;
      }

      // optional int32 dice2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dice2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dice2_)));
          set_has_dice2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dice3;
        break;
      }

      // optional int32 dice3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dice3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dice3_)));
          set_has_dice3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_open;
        break;
      }

      // optional int32 open = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm_command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gm_command];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 dice1 = 2;
  if (has_dice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dice1(), output);
  }

  // optional int32 dice2 = 3;
  if (has_dice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dice2(), output);
  }

  // optional int32 dice3 = 4;
  if (has_dice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dice3(), output);
  }

  // optional int32 open = 5;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gm_command];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 dice1 = 2;
  if (has_dice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dice1(), target);
  }

  // optional int32 dice2 = 3;
  if (has_dice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dice2(), target);
  }

  // optional int32 dice3 = 4;
  if (has_dice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dice3(), target);
  }

  // optional int32 open = 5;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gm_command];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 dice1 = 2;
    if (has_dice1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dice1());
    }

    // optional int32 dice2 = 3;
    if (has_dice2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dice2());
    }

    // optional int32 dice3 = 4;
    if (has_dice3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dice3());
    }

    // optional int32 open = 5;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_command::MergeFrom(const gm_command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_dice1()) {
      set_dice1(from.dice1());
    }
    if (from.has_dice2()) {
      set_dice2(from.dice2());
    }
    if (from.has_dice3()) {
      set_dice3(from.dice3());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_command::CopyFrom(const gm_command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_command::IsInitialized() const {

  return true;
}

void gm_command::Swap(gm_command* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(dice1_, other->dice1_);
    std::swap(dice2_, other->dice2_);
    std::swap(dice3_, other->dice3_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_command_descriptor_;
  metadata.reflection = gm_command_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_list_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

player_list_info::player_list_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_list_info::InitAsDefaultInstance() {
}

player_list_info::player_list_info(const player_list_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_list_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10011;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_list_info::~player_list_info() {
  SharedDtor();
}

void player_list_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void player_list_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_list_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_list_info_descriptor_;
}

const player_list_info& player_list_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

player_list_info* player_list_info::default_instance_ = NULL;

player_list_info* player_list_info::New() const {
  return new player_list_info;
}

void player_list_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10011;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_list_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_player_list_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_list_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_player_list_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_list_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_player_list_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_list_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_player_list_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_list_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_list_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_list_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_list_info::MergeFrom(const player_list_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_list_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_list_info::CopyFrom(const player_list_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_list_info::IsInitialized() const {

  return true;
}

void player_list_info::Swap(player_list_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_list_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_list_info_descriptor_;
  metadata.reflection = player_list_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_list_info_result::kPacketIdFieldNumber;
const int player_list_info_result::kInfoFieldNumber;
const int player_list_info_result::kPlayerNumFieldNumber;
#endif  // !_MSC_VER

player_list_info_result::player_list_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_list_info_result::InitAsDefaultInstance() {
}

player_list_info_result::player_list_info_result(const player_list_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_list_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15018;
  player_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_list_info_result::~player_list_info_result() {
  SharedDtor();
}

void player_list_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void player_list_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_list_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_list_info_result_descriptor_;
}

const player_list_info_result& player_list_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

player_list_info_result* player_list_info_result::default_instance_ = NULL;

player_list_info_result* player_list_info_result::New() const {
  return new player_list_info_result;
}

void player_list_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15018;
    player_num_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_list_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_player_list_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .dice_protocols.player_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_player_num;
        break;
      }

      // optional int32 player_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_num_)));
          set_has_player_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_list_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_player_list_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .dice_protocols.player_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional int32 player_num = 3;
  if (has_player_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_list_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_player_list_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .dice_protocols.player_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional int32 player_num = 3;
  if (has_player_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_list_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_player_list_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_num = 3;
    if (has_player_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_num());
    }

  }
  // repeated .dice_protocols.player_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_list_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_list_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_list_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_list_info_result::MergeFrom(const player_list_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_num()) {
      set_player_num(from.player_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_list_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_list_info_result::CopyFrom(const player_list_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_list_info_result::IsInitialized() const {

  return true;
}

void player_list_info_result::Swap(player_list_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    info_.Swap(&other->info_);
    std::swap(player_num_, other->player_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_list_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_list_info_result_descriptor_;
  metadata.reflection = player_list_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int other_player_info::kPlayerGoldFieldNumber;
const int other_player_info::kPlayerNameFieldNumber;
const int other_player_info::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

other_player_info::other_player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void other_player_info::InitAsDefaultInstance() {
}

other_player_info::other_player_info(const other_player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void other_player_info::SharedCtor() {
  _cached_size_ = 0;
  player_gold_ = GOOGLE_LONGLONG(0);
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

other_player_info::~other_player_info() {
  SharedDtor();
}

void other_player_info::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void other_player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* other_player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return other_player_info_descriptor_;
}

const other_player_info& other_player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

other_player_info* other_player_info::default_instance_ = NULL;

other_player_info* other_player_info::New() const {
  return new other_player_info;
}

void other_player_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_gold_ = GOOGLE_LONGLONG(0);
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool other_player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 player_gold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void other_player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 player_gold = 1;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->player_gold(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* other_player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 player_gold = 1;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->player_gold(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int other_player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 player_gold = 1;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional int32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void other_player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const other_player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const other_player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void other_player_info::MergeFrom(const other_player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void other_player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void other_player_info::CopyFrom(const other_player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool other_player_info::IsInitialized() const {

  return true;
}

void other_player_info::Swap(other_player_info* other) {
  if (other != this) {
    std::swap(player_gold_, other->player_gold_);
    std::swap(player_name_, other->player_name_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata other_player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = other_player_info_descriptor_;
  metadata.reflection = other_player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int balance_result::kPacketIdFieldNumber;
const int balance_result::kPlayerGoldFieldNumber;
const int balance_result::kPlayeTicketCountFieldNumber;
const int balance_result::kInfoFieldNumber;
const int balance_result::kBetGoldFieldNumber;
const int balance_result::kWinGoldFieldNumber;
const int balance_result::kOrderIndexFieldNumber;
const int balance_result::kCdTimeFieldNumber;
#endif  // !_MSC_VER

balance_result::balance_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void balance_result::InitAsDefaultInstance() {
}

balance_result::balance_result(const balance_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void balance_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15017;
  player_gold_ = GOOGLE_LONGLONG(0);
  playe_ticket_count_ = 0;
  bet_gold_ = GOOGLE_LONGLONG(0);
  win_gold_ = GOOGLE_LONGLONG(0);
  orderindex_ = 0;
  cd_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

balance_result::~balance_result() {
  SharedDtor();
}

void balance_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void balance_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* balance_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return balance_result_descriptor_;
}

const balance_result& balance_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

balance_result* balance_result::default_instance_ = NULL;

balance_result* balance_result::New() const {
  return new balance_result;
}

void balance_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15017;
    player_gold_ = GOOGLE_LONGLONG(0);
    playe_ticket_count_ = 0;
    bet_gold_ = GOOGLE_LONGLONG(0);
    win_gold_ = GOOGLE_LONGLONG(0);
    orderindex_ = 0;
    cd_time_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool balance_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_balance_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playe_ticket_count;
        break;
      }

      // optional int32 playe_ticket_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playe_ticket_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playe_ticket_count_)));
          set_has_playe_ticket_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // repeated .dice_protocols.other_player_info info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        if (input->ExpectTag(40)) goto parse_bet_gold;
        break;
      }

      // optional int64 bet_gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_gold_)));
          set_has_bet_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win_gold;
        break;
      }

      // optional int64 win_gold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_gold_)));
          set_has_win_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_orderIndex;
        break;
      }

      // optional int32 orderIndex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orderIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderindex_)));
          set_has_orderindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cd_time;
        break;
      }

      // optional int32 cd_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_time_)));
          set_has_cd_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void balance_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_balance_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int64 player_gold = 2;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->player_gold(), output);
  }

  // optional int32 playe_ticket_count = 3;
  if (has_playe_ticket_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playe_ticket_count(), output);
  }

  // repeated .dice_protocols.other_player_info info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(i), output);
  }

  // optional int64 bet_gold = 5;
  if (has_bet_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->bet_gold(), output);
  }

  // optional int64 win_gold = 6;
  if (has_win_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->win_gold(), output);
  }

  // optional int32 orderIndex = 7;
  if (has_orderindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->orderindex(), output);
  }

  // optional int32 cd_time = 8;
  if (has_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cd_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* balance_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_balance_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int64 player_gold = 2;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->player_gold(), target);
  }

  // optional int32 playe_ticket_count = 3;
  if (has_playe_ticket_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playe_ticket_count(), target);
  }

  // repeated .dice_protocols.other_player_info info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(i), target);
  }

  // optional int64 bet_gold = 5;
  if (has_bet_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->bet_gold(), target);
  }

  // optional int64 win_gold = 6;
  if (has_win_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->win_gold(), target);
  }

  // optional int32 orderIndex = 7;
  if (has_orderindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->orderindex(), target);
  }

  // optional int32 cd_time = 8;
  if (has_cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cd_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int balance_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_balance_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int64 player_gold = 2;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

    // optional int32 playe_ticket_count = 3;
    if (has_playe_ticket_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playe_ticket_count());
    }

    // optional int64 bet_gold = 5;
    if (has_bet_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_gold());
    }

    // optional int64 win_gold = 6;
    if (has_win_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_gold());
    }

    // optional int32 orderIndex = 7;
    if (has_orderindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderindex());
    }

    // optional int32 cd_time = 8;
    if (has_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd_time());
    }

  }
  // repeated .dice_protocols.other_player_info info = 4;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void balance_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const balance_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const balance_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void balance_result::MergeFrom(const balance_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
    if (from.has_playe_ticket_count()) {
      set_playe_ticket_count(from.playe_ticket_count());
    }
    if (from.has_bet_gold()) {
      set_bet_gold(from.bet_gold());
    }
    if (from.has_win_gold()) {
      set_win_gold(from.win_gold());
    }
    if (from.has_orderindex()) {
      set_orderindex(from.orderindex());
    }
    if (from.has_cd_time()) {
      set_cd_time(from.cd_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void balance_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void balance_result::CopyFrom(const balance_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool balance_result::IsInitialized() const {

  return true;
}

void balance_result::Swap(balance_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(playe_ticket_count_, other->playe_ticket_count_);
    info_.Swap(&other->info_);
    std::swap(bet_gold_, other->bet_gold_);
    std::swap(win_gold_, other->win_gold_);
    std::swap(orderindex_, other->orderindex_);
    std::swap(cd_time_, other->cd_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata balance_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = balance_result_descriptor_;
  metadata.reflection = balance_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bc_other_bet::kPacketIdFieldNumber;
const int bc_other_bet::kInfoFieldNumber;
#endif  // !_MSC_VER

bc_other_bet::bc_other_bet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void bc_other_bet::InitAsDefaultInstance() {
}

bc_other_bet::bc_other_bet(const bc_other_bet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void bc_other_bet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15019;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bc_other_bet::~bc_other_bet() {
  SharedDtor();
}

void bc_other_bet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void bc_other_bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bc_other_bet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bc_other_bet_descriptor_;
}

const bc_other_bet& bc_other_bet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

bc_other_bet* bc_other_bet::default_instance_ = NULL;

bc_other_bet* bc_other_bet::New() const {
  return new bc_other_bet;
}

void bc_other_bet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15019;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bc_other_bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_other_bet];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .dice_protocols.other_bet info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void bc_other_bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_other_bet];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .dice_protocols.other_bet info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* bc_other_bet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_other_bet];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .dice_protocols.other_bet info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int bc_other_bet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_other_bet];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .dice_protocols.other_bet info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bc_other_bet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bc_other_bet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bc_other_bet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bc_other_bet::MergeFrom(const bc_other_bet& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bc_other_bet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bc_other_bet::CopyFrom(const bc_other_bet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bc_other_bet::IsInitialized() const {

  return true;
}

void bc_other_bet::Swap(bc_other_bet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bc_other_bet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bc_other_bet_descriptor_;
  metadata.reflection = bc_other_bet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_game_control::kPacketIdFieldNumber;
const int packetc2l_game_control::kDice1FieldNumber;
const int packetc2l_game_control::kDice2FieldNumber;
const int packetc2l_game_control::kDice3FieldNumber;
const int packetc2l_game_control::kDiceBigSmallFieldNumber;
#endif  // !_MSC_VER

packetc2l_game_control::packetc2l_game_control()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_game_control::InitAsDefaultInstance() {
}

packetc2l_game_control::packetc2l_game_control(const packetc2l_game_control& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_game_control::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10012;
  dice1_ = 0;
  dice2_ = 0;
  dice3_ = 0;
  dicebigsmall_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_game_control::~packetc2l_game_control() {
  SharedDtor();
}

void packetc2l_game_control::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_game_control::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_game_control::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_game_control_descriptor_;
}

const packetc2l_game_control& packetc2l_game_control::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_game_control* packetc2l_game_control::default_instance_ = NULL;

packetc2l_game_control* packetc2l_game_control::New() const {
  return new packetc2l_game_control;
}

void packetc2l_game_control::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10012;
    dice1_ = 0;
    dice2_ = 0;
    dice3_ = 0;
    dicebigsmall_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_game_control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_game_control];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dice1;
        break;
      }

      // optional int32 dice1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dice1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dice1_)));
          set_has_dice1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dice2;
        break;
      }

      // optional int32 dice2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dice2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dice2_)));
          set_has_dice2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dice3;
        break;
      }

      // optional int32 dice3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dice3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dice3_)));
          set_has_dice3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_diceBigSmall;
        break;
      }

      // optional int32 diceBigSmall = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diceBigSmall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicebigsmall_)));
          set_has_dicebigsmall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_game_control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_game_control];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 dice1 = 2;
  if (has_dice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dice1(), output);
  }

  // optional int32 dice2 = 3;
  if (has_dice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dice2(), output);
  }

  // optional int32 dice3 = 4;
  if (has_dice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dice3(), output);
  }

  // optional int32 diceBigSmall = 5;
  if (has_dicebigsmall()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dicebigsmall(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_game_control::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_game_control];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 dice1 = 2;
  if (has_dice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dice1(), target);
  }

  // optional int32 dice2 = 3;
  if (has_dice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dice2(), target);
  }

  // optional int32 dice3 = 4;
  if (has_dice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dice3(), target);
  }

  // optional int32 diceBigSmall = 5;
  if (has_dicebigsmall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dicebigsmall(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_game_control::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_game_control];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 dice1 = 2;
    if (has_dice1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dice1());
    }

    // optional int32 dice2 = 3;
    if (has_dice2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dice2());
    }

    // optional int32 dice3 = 4;
    if (has_dice3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dice3());
    }

    // optional int32 diceBigSmall = 5;
    if (has_dicebigsmall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicebigsmall());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_game_control::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_game_control* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_game_control*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_game_control::MergeFrom(const packetc2l_game_control& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_dice1()) {
      set_dice1(from.dice1());
    }
    if (from.has_dice2()) {
      set_dice2(from.dice2());
    }
    if (from.has_dice3()) {
      set_dice3(from.dice3());
    }
    if (from.has_dicebigsmall()) {
      set_dicebigsmall(from.dicebigsmall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_game_control::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_game_control::CopyFrom(const packetc2l_game_control& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_game_control::IsInitialized() const {

  return true;
}

void packetc2l_game_control::Swap(packetc2l_game_control* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(dice1_, other->dice1_);
    std::swap(dice2_, other->dice2_);
    std::swap(dice3_, other->dice3_);
    std::swap(dicebigsmall_, other->dicebigsmall_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_game_control::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_game_control_descriptor_;
  metadata.reflection = packetc2l_game_control_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_game_control_result::kPacketIdFieldNumber;
const int packetl2c_game_control_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_game_control_result::packetl2c_game_control_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_game_control_result::InitAsDefaultInstance() {
}

packetl2c_game_control_result::packetl2c_game_control_result(const packetl2c_game_control_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_game_control_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15022;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_game_control_result::~packetl2c_game_control_result() {
  SharedDtor();
}

void packetl2c_game_control_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_game_control_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_game_control_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_game_control_result_descriptor_;
}

const packetl2c_game_control_result& packetl2c_game_control_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_game_control_result* packetl2c_game_control_result::default_instance_ = NULL;

packetl2c_game_control_result* packetl2c_game_control_result::New() const {
  return new packetl2c_game_control_result;
}

void packetl2c_game_control_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15022;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_game_control_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_control_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_game_control_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_control_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_game_control_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_control_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_game_control_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_control_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_game_control_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_game_control_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_game_control_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_game_control_result::MergeFrom(const packetl2c_game_control_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_game_control_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_game_control_result::CopyFrom(const packetl2c_game_control_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_game_control_result::IsInitialized() const {

  return true;
}

void packetl2c_game_control_result::Swap(packetl2c_game_control_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_game_control_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_game_control_result_descriptor_;
  metadata.reflection = packetl2c_game_control_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_debuginfo::kPacketIdFieldNumber;
const int packetl2c_debuginfo::kDebugInfosFieldNumber;
#endif  // !_MSC_VER

packetl2c_debuginfo::packetl2c_debuginfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_debuginfo::InitAsDefaultInstance() {
}

packetl2c_debuginfo::packetl2c_debuginfo(const packetl2c_debuginfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_debuginfo::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15020;
  debug_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_debuginfo::~packetl2c_debuginfo() {
  SharedDtor();
}

void packetl2c_debuginfo::SharedDtor() {
  if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_infos_;
  }
  if (this != default_instance_) {
  }
}

void packetl2c_debuginfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_debuginfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_debuginfo_descriptor_;
}

const packetl2c_debuginfo& packetl2c_debuginfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_debuginfo* packetl2c_debuginfo::default_instance_ = NULL;

packetl2c_debuginfo* packetl2c_debuginfo::New() const {
  return new packetl2c_debuginfo;
}

void packetl2c_debuginfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15020;
    if (has_debug_infos()) {
      if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
        debug_infos_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_debuginfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_debuginfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_debug_infos;
        break;
      }

      // optional string debug_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_infos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_infos().data(), this->debug_infos().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_debuginfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_debuginfo];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string debug_infos = 2;
  if (has_debug_infos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_infos().data(), this->debug_infos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->debug_infos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_debuginfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_debuginfo];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string debug_infos = 2;
  if (has_debug_infos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_infos().data(), this->debug_infos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->debug_infos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_debuginfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_debuginfo];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string debug_infos = 2;
    if (has_debug_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_infos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_debuginfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_debuginfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_debuginfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_debuginfo::MergeFrom(const packetl2c_debuginfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_debug_infos()) {
      set_debug_infos(from.debug_infos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_debuginfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_debuginfo::CopyFrom(const packetl2c_debuginfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_debuginfo::IsInitialized() const {

  return true;
}

void packetl2c_debuginfo::Swap(packetl2c_debuginfo* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(debug_infos_, other->debug_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_debuginfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_debuginfo_descriptor_;
  metadata.reflection = packetl2c_debuginfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_bet_info::kBetIndexFieldNumber;
const int msg_bet_info::kBetCountFieldNumber;
#endif  // !_MSC_VER

msg_bet_info::msg_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_bet_info::InitAsDefaultInstance() {
}

msg_bet_info::msg_bet_info(const msg_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_bet_info::SharedCtor() {
  _cached_size_ = 0;
  bet_index_ = 0;
  bet_count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_bet_info::~msg_bet_info() {
  SharedDtor();
}

void msg_bet_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_bet_info_descriptor_;
}

const msg_bet_info& msg_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

msg_bet_info* msg_bet_info::default_instance_ = NULL;

msg_bet_info* msg_bet_info::New() const {
  return new msg_bet_info;
}

void msg_bet_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bet_index_ = 0;
    bet_count_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_dice_type bet_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_dice_type_IsValid(value)) {
            set_bet_index(static_cast< ::dice_protocols::e_dice_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bet_count;
        break;
      }

      // optional int64 bet_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_count_)));
          set_has_bet_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_dice_type bet_index = 1;
  if (has_bet_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->bet_index(), output);
  }

  // optional int64 bet_count = 2;
  if (has_bet_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bet_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_dice_type bet_index = 1;
  if (has_bet_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->bet_index(), target);
  }

  // optional int64 bet_count = 2;
  if (has_bet_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bet_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_bet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_dice_type bet_index = 1;
    if (has_bet_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bet_index());
    }

    // optional int64 bet_count = 2;
    if (has_bet_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_bet_info::MergeFrom(const msg_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bet_index()) {
      set_bet_index(from.bet_index());
    }
    if (from.has_bet_count()) {
      set_bet_count(from.bet_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_bet_info::CopyFrom(const msg_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_bet_info::IsInitialized() const {

  return true;
}

void msg_bet_info::Swap(msg_bet_info* other) {
  if (other != this) {
    std::swap(bet_index_, other->bet_index_);
    std::swap(bet_count_, other->bet_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_bet_info_descriptor_;
  metadata.reflection = msg_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm_msg_bet_info::kPlayerInfoFieldNumber;
const int gm_msg_bet_info::kBetInfoFieldNumber;
#endif  // !_MSC_VER

gm_msg_bet_info::gm_msg_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_msg_bet_info::InitAsDefaultInstance() {
  player_info_ = const_cast< ::dice_protocols::player_info*>(&::dice_protocols::player_info::default_instance());
}

gm_msg_bet_info::gm_msg_bet_info(const gm_msg_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_msg_bet_info::SharedCtor() {
  _cached_size_ = 0;
  player_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_msg_bet_info::~gm_msg_bet_info() {
  SharedDtor();
}

void gm_msg_bet_info::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
  }
}

void gm_msg_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_msg_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_msg_bet_info_descriptor_;
}

const gm_msg_bet_info& gm_msg_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

gm_msg_bet_info* gm_msg_bet_info::default_instance_ = NULL;

gm_msg_bet_info* gm_msg_bet_info::New() const {
  return new gm_msg_bet_info;
}

void gm_msg_bet_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::dice_protocols::player_info::Clear();
    }
  }
  bet_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_msg_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.player_info player_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bet_info;
        break;
      }

      // repeated .dice_protocols.msg_bet_info bet_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bet_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bet_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bet_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm_msg_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.player_info player_info = 1;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_info(), output);
  }

  // repeated .dice_protocols.msg_bet_info bet_info = 2;
  for (int i = 0; i < this->bet_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bet_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_msg_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.player_info player_info = 1;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_info(), target);
  }

  // repeated .dice_protocols.msg_bet_info bet_info = 2;
  for (int i = 0; i < this->bet_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bet_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_msg_bet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.player_info player_info = 1;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }

  }
  // repeated .dice_protocols.msg_bet_info bet_info = 2;
  total_size += 1 * this->bet_info_size();
  for (int i = 0; i < this->bet_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bet_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_msg_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_msg_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_msg_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_msg_bet_info::MergeFrom(const gm_msg_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_info_.MergeFrom(from.bet_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_info()) {
      mutable_player_info()->::dice_protocols::player_info::MergeFrom(from.player_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_msg_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_msg_bet_info::CopyFrom(const gm_msg_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_msg_bet_info::IsInitialized() const {

  return true;
}

void gm_msg_bet_info::Swap(gm_msg_bet_info* other) {
  if (other != this) {
    std::swap(player_info_, other->player_info_);
    bet_info_.Swap(&other->bet_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_msg_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_msg_bet_info_descriptor_;
  metadata.reflection = gm_msg_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_all_bet_info::kPacketIdFieldNumber;
const int packetl2c_notice_all_bet_info::kBetInfoListFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_all_bet_info::packetl2c_notice_all_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_notice_all_bet_info::InitAsDefaultInstance() {
}

packetl2c_notice_all_bet_info::packetl2c_notice_all_bet_info(const packetl2c_notice_all_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_notice_all_bet_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15021;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_all_bet_info::~packetl2c_notice_all_bet_info() {
  SharedDtor();
}

void packetl2c_notice_all_bet_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_notice_all_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_all_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_all_bet_info_descriptor_;
}

const packetl2c_notice_all_bet_info& packetl2c_notice_all_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_all_bet_info* packetl2c_notice_all_bet_info::default_instance_ = NULL;

packetl2c_notice_all_bet_info* packetl2c_notice_all_bet_info::New() const {
  return new packetl2c_notice_all_bet_info;
}

void packetl2c_notice_all_bet_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15021;
  }
  bet_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_all_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bet_info_list;
        break;
      }

      // repeated .dice_protocols.gm_msg_bet_info bet_info_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bet_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bet_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bet_info_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_notice_all_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .dice_protocols.gm_msg_bet_info bet_info_list = 2;
  for (int i = 0; i < this->bet_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bet_info_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_notice_all_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .dice_protocols.gm_msg_bet_info bet_info_list = 2;
  for (int i = 0; i < this->bet_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bet_info_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_notice_all_bet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .dice_protocols.gm_msg_bet_info bet_info_list = 2;
  total_size += 1 * this->bet_info_list_size();
  for (int i = 0; i < this->bet_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bet_info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_all_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_all_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_all_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_all_bet_info::MergeFrom(const packetl2c_notice_all_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_info_list_.MergeFrom(from.bet_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_all_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_all_bet_info::CopyFrom(const packetl2c_notice_all_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_all_bet_info::IsInitialized() const {

  return true;
}

void packetl2c_notice_all_bet_info::Swap(packetl2c_notice_all_bet_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    bet_info_list_.Swap(&other->bet_info_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_all_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_all_bet_info_descriptor_;
  metadata.reflection = packetl2c_notice_all_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_debuginfo::kPacketIdFieldNumber;
const int packetl2c_bc_debuginfo::kPlayerIdFieldNumber;
const int packetl2c_bc_debuginfo::kTotalProfitFieldNumber;
const int packetl2c_bc_debuginfo::kTotalStockFieldNumber;
const int packetl2c_bc_debuginfo::kDebugInfosFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_debuginfo::packetl2c_bc_debuginfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_debuginfo::InitAsDefaultInstance() {
}

packetl2c_bc_debuginfo::packetl2c_bc_debuginfo(const packetl2c_bc_debuginfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_debuginfo::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15023;
  player_id_ = 0;
  total_profit_ = GOOGLE_LONGLONG(0);
  total_stock_ = GOOGLE_LONGLONG(0);
  debug_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_debuginfo::~packetl2c_bc_debuginfo() {
  SharedDtor();
}

void packetl2c_bc_debuginfo::SharedDtor() {
  if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_infos_;
  }
  if (this != default_instance_) {
  }
}

void packetl2c_bc_debuginfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_debuginfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_debuginfo_descriptor_;
}

const packetl2c_bc_debuginfo& packetl2c_bc_debuginfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_debuginfo* packetl2c_bc_debuginfo::default_instance_ = NULL;

packetl2c_bc_debuginfo* packetl2c_bc_debuginfo::New() const {
  return new packetl2c_bc_debuginfo;
}

void packetl2c_bc_debuginfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15023;
    player_id_ = 0;
    total_profit_ = GOOGLE_LONGLONG(0);
    total_stock_ = GOOGLE_LONGLONG(0);
    if (has_debug_infos()) {
      if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
        debug_infos_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_debuginfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dice_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::dice_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_profit;
        break;
      }

      // optional int64 total_profit = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_profit_)));
          set_has_total_profit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_stock;
        break;
      }

      // optional int64 total_stock = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_stock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_stock_)));
          set_has_total_stock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_debug_infos;
        break;
      }

      // optional string debug_infos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_infos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_infos().data(), this->debug_infos().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_debuginfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int64 total_profit = 3 [default = 0];
  if (has_total_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->total_profit(), output);
  }

  // optional int64 total_stock = 4 [default = 0];
  if (has_total_stock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_stock(), output);
  }

  // optional string debug_infos = 5;
  if (has_debug_infos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_infos().data(), this->debug_infos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->debug_infos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_debuginfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int64 total_profit = 3 [default = 0];
  if (has_total_profit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->total_profit(), target);
  }

  // optional int64 total_stock = 4 [default = 0];
  if (has_total_stock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->total_stock(), target);
  }

  // optional string debug_infos = 5;
  if (has_debug_infos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_infos().data(), this->debug_infos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->debug_infos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_debuginfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int64 total_profit = 3 [default = 0];
    if (has_total_profit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_profit());
    }

    // optional int64 total_stock = 4 [default = 0];
    if (has_total_stock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_stock());
    }

    // optional string debug_infos = 5;
    if (has_debug_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_infos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_debuginfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_debuginfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_debuginfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_debuginfo::MergeFrom(const packetl2c_bc_debuginfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_total_profit()) {
      set_total_profit(from.total_profit());
    }
    if (from.has_total_stock()) {
      set_total_stock(from.total_stock());
    }
    if (from.has_debug_infos()) {
      set_debug_infos(from.debug_infos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_debuginfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_debuginfo::CopyFrom(const packetl2c_bc_debuginfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_debuginfo::IsInitialized() const {

  return true;
}

void packetl2c_bc_debuginfo::Swap(packetl2c_bc_debuginfo* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(total_profit_, other->total_profit_);
    std::swap(total_stock_, other->total_stock_);
    std::swap(debug_infos_, other->debug_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_debuginfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_debuginfo_descriptor_;
  metadata.reflection = packetl2c_bc_debuginfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dice_protocols

// @@protoc_insertion_point(global_scope)
