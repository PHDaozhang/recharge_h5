// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_exchange.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client2world_exchange.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

namespace {

const ::google::protobuf::Descriptor* agency_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  agency_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_agency_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_agency_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_agency_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_agency_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* payopen_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  payopen_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_askPayopen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_askPayopen_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_askPayopen_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_askPayopen_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client2world_5fexchange_2eproto() {
  protobuf_AddDesc_client2world_5fexchange_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client2world_exchange.proto");
  GOOGLE_CHECK(file != NULL);
  agency_info_descriptor_ = file->message_type(0);
  static const int agency_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agency_info, agencyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agency_info, agencytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agency_info, agencymsg_),
  };
  agency_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      agency_info_descriptor_,
      agency_info::default_instance_,
      agency_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agency_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agency_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(agency_info));
  packetc2w_agency_descriptor_ = file->message_type(1);
  static const int packetc2w_agency_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_agency, packet_id_),
  };
  packetc2w_agency_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_agency_descriptor_,
      packetc2w_agency::default_instance_,
      packetc2w_agency_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_agency, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_agency, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_agency));
  packetw2c_agency_result_descriptor_ = file->message_type(2);
  static const int packetw2c_agency_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_agency_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_agency_result, info_),
  };
  packetw2c_agency_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_agency_result_descriptor_,
      packetw2c_agency_result::default_instance_,
      packetw2c_agency_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_agency_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_agency_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_agency_result));
  payopen_info_descriptor_ = file->message_type(3);
  static const int payopen_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(payopen_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(payopen_info, isopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(payopen_info, ishot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(payopen_info, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(payopen_info, chipsvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(payopen_info, max_value_per_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(payopen_info, isshow_),
  };
  payopen_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      payopen_info_descriptor_,
      payopen_info::default_instance_,
      payopen_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(payopen_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(payopen_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(payopen_info));
  packetc2w_askPayopen_descriptor_ = file->message_type(4);
  static const int packetc2w_askPayopen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_askPayopen, packet_id_),
  };
  packetc2w_askPayopen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_askPayopen_descriptor_,
      packetc2w_askPayopen::default_instance_,
      packetc2w_askPayopen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_askPayopen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_askPayopen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_askPayopen));
  packetw2c_askPayopen_result_descriptor_ = file->message_type(5);
  static const int packetw2c_askPayopen_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_askPayopen_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_askPayopen_result, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_askPayopen_result, isappstoreopen_),
  };
  packetw2c_askPayopen_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_askPayopen_result_descriptor_,
      packetw2c_askPayopen_result::default_instance_,
      packetw2c_askPayopen_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_askPayopen_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_askPayopen_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_askPayopen_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client2world_5fexchange_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    agency_info_descriptor_, &agency_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_agency_descriptor_, &packetc2w_agency::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_agency_result_descriptor_, &packetw2c_agency_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    payopen_info_descriptor_, &payopen_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_askPayopen_descriptor_, &packetc2w_askPayopen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_askPayopen_result_descriptor_, &packetw2c_askPayopen_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client2world_5fexchange_2eproto() {
  delete agency_info::default_instance_;
  delete agency_info_reflection_;
  delete packetc2w_agency::default_instance_;
  delete packetc2w_agency_reflection_;
  delete packetw2c_agency_result::default_instance_;
  delete packetw2c_agency_result_reflection_;
  delete payopen_info::default_instance_;
  delete payopen_info_reflection_;
  delete packetc2w_askPayopen::default_instance_;
  delete packetc2w_askPayopen_reflection_;
  delete packetw2c_askPayopen_result::default_instance_;
  delete packetw2c_askPayopen_result_reflection_;
}

void protobuf_AddDesc_client2world_5fexchange_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client2world_protocols::protobuf_AddDesc_client2world_5fmsg_5ftype_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033client2world_exchange.proto\022\026client2wo"
    "rld_protocols\032\033client2world_msg_type.pro"
    "to\032\022msg_type_def.proto\032\022msg_info_def.pro"
    "to\"H\n\013agency_info\022\022\n\nagencyName\030\001 \001(\005\022\022\n"
    "\nagencyType\030\002 \001(\005\022\021\n\tagencyMsg\030\003 \001(\t\"b\n\020"
    "packetc2w_agency\022N\n\tpacket_id\030\001 \001(\0162).cl"
    "ient2world_protocols.e_server_msg_type:\020"
    "e_mst_c2w_agency\"\243\001\n\027packetw2c_agency_re"
    "sult\022U\n\tpacket_id\030\001 \001(\0162).client2world_p"
    "rotocols.e_server_msg_type:\027e_mst_w2c_ag"
    "ency_result\0221\n\004info\030\002 \003(\0132#.client2world"
    "_protocols.agency_info\"\223\001\n\014payopen_info\022"
    "\014\n\004type\030\001 \001(\005\022\016\n\006isopen\030\002 \001(\010\022\r\n\005ishot\030\003"
    " \001(\010\022\020\n\010priority\030\004 \001(\005\022\022\n\nchipsValue\030\005 \001"
    "(\t\022\032\n\022max_value_per_time\030\006 \001(\005\022\024\n\006isshow"
    "\030\007 \001(\010:\004true\"j\n\024packetc2w_askPayopen\022R\n\t"
    "packet_id\030\001 \001(\0162).client2world_protocols"
    ".e_server_msg_type:\024e_mst_c2w_askPayopen"
    "\"\304\001\n\033packetw2c_askPayopen_result\022Y\n\tpack"
    "et_id\030\001 \001(\0162).client2world_protocols.e_s"
    "erver_msg_type:\033e_mst_w2c_askPayopen_res"
    "ult\0222\n\004info\030\002 \003(\0132$.client2world_protoco"
    "ls.payopen_info\022\026\n\016isAppStoreOpen\030\003 \001(\010", 919);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client2world_exchange.proto", &protobuf_RegisterTypes);
  agency_info::default_instance_ = new agency_info();
  packetc2w_agency::default_instance_ = new packetc2w_agency();
  packetw2c_agency_result::default_instance_ = new packetw2c_agency_result();
  payopen_info::default_instance_ = new payopen_info();
  packetc2w_askPayopen::default_instance_ = new packetc2w_askPayopen();
  packetw2c_askPayopen_result::default_instance_ = new packetw2c_askPayopen_result();
  agency_info::default_instance_->InitAsDefaultInstance();
  packetc2w_agency::default_instance_->InitAsDefaultInstance();
  packetw2c_agency_result::default_instance_->InitAsDefaultInstance();
  payopen_info::default_instance_->InitAsDefaultInstance();
  packetc2w_askPayopen::default_instance_->InitAsDefaultInstance();
  packetw2c_askPayopen_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client2world_5fexchange_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client2world_5fexchange_2eproto {
  StaticDescriptorInitializer_client2world_5fexchange_2eproto() {
    protobuf_AddDesc_client2world_5fexchange_2eproto();
  }
} static_descriptor_initializer_client2world_5fexchange_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int agency_info::kAgencyNameFieldNumber;
const int agency_info::kAgencyTypeFieldNumber;
const int agency_info::kAgencyMsgFieldNumber;
#endif  // !_MSC_VER

agency_info::agency_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void agency_info::InitAsDefaultInstance() {
}

agency_info::agency_info(const agency_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void agency_info::SharedCtor() {
  _cached_size_ = 0;
  agencyname_ = 0;
  agencytype_ = 0;
  agencymsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

agency_info::~agency_info() {
  SharedDtor();
}

void agency_info::SharedDtor() {
  if (agencymsg_ != &::google::protobuf::internal::kEmptyString) {
    delete agencymsg_;
  }
  if (this != default_instance_) {
  }
}

void agency_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* agency_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return agency_info_descriptor_;
}

const agency_info& agency_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fexchange_2eproto();
  return *default_instance_;
}

agency_info* agency_info::default_instance_ = NULL;

agency_info* agency_info::New() const {
  return new agency_info;
}

void agency_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    agencyname_ = 0;
    agencytype_ = 0;
    if (has_agencymsg()) {
      if (agencymsg_ != &::google::protobuf::internal::kEmptyString) {
        agencymsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool agency_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 agencyName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agencyname_)));
          set_has_agencyname();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agencyType;
        break;
      }

      // optional int32 agencyType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agencyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agencytype_)));
          set_has_agencytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_agencyMsg;
        break;
      }

      // optional string agencyMsg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agencyMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agencymsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agencymsg().data(), this->agencymsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void agency_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 agencyName = 1;
  if (has_agencyname()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->agencyname(), output);
  }

  // optional int32 agencyType = 2;
  if (has_agencytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->agencytype(), output);
  }

  // optional string agencyMsg = 3;
  if (has_agencymsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agencymsg().data(), this->agencymsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->agencymsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* agency_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 agencyName = 1;
  if (has_agencyname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->agencyname(), target);
  }

  // optional int32 agencyType = 2;
  if (has_agencytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->agencytype(), target);
  }

  // optional string agencyMsg = 3;
  if (has_agencymsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agencymsg().data(), this->agencymsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->agencymsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int agency_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 agencyName = 1;
    if (has_agencyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agencyname());
    }

    // optional int32 agencyType = 2;
    if (has_agencytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agencytype());
    }

    // optional string agencyMsg = 3;
    if (has_agencymsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agencymsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void agency_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const agency_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const agency_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void agency_info::MergeFrom(const agency_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agencyname()) {
      set_agencyname(from.agencyname());
    }
    if (from.has_agencytype()) {
      set_agencytype(from.agencytype());
    }
    if (from.has_agencymsg()) {
      set_agencymsg(from.agencymsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void agency_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void agency_info::CopyFrom(const agency_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool agency_info::IsInitialized() const {

  return true;
}

void agency_info::Swap(agency_info* other) {
  if (other != this) {
    std::swap(agencyname_, other->agencyname_);
    std::swap(agencytype_, other->agencytype_);
    std::swap(agencymsg_, other->agencymsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata agency_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = agency_info_descriptor_;
  metadata.reflection = agency_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_agency::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_agency::packetc2w_agency()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_agency::InitAsDefaultInstance() {
}

packetc2w_agency::packetc2w_agency(const packetc2w_agency& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_agency::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5074;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_agency::~packetc2w_agency() {
  SharedDtor();
}

void packetc2w_agency::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_agency::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_agency::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_agency_descriptor_;
}

const packetc2w_agency& packetc2w_agency::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fexchange_2eproto();
  return *default_instance_;
}

packetc2w_agency* packetc2w_agency::default_instance_ = NULL;

packetc2w_agency* packetc2w_agency::New() const {
  return new packetc2w_agency;
}

void packetc2w_agency::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5074;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_agency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_agency];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_agency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_agency];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_agency::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_agency];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_agency::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_agency];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_agency::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_agency* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_agency*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_agency::MergeFrom(const packetc2w_agency& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_agency::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_agency::CopyFrom(const packetc2w_agency& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_agency::IsInitialized() const {

  return true;
}

void packetc2w_agency::Swap(packetc2w_agency* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_agency::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_agency_descriptor_;
  metadata.reflection = packetc2w_agency_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_agency_result::kPacketIdFieldNumber;
const int packetw2c_agency_result::kInfoFieldNumber;
#endif  // !_MSC_VER

packetw2c_agency_result::packetw2c_agency_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_agency_result::InitAsDefaultInstance() {
}

packetw2c_agency_result::packetw2c_agency_result(const packetw2c_agency_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_agency_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7580;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_agency_result::~packetw2c_agency_result() {
  SharedDtor();
}

void packetw2c_agency_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_agency_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_agency_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_agency_result_descriptor_;
}

const packetw2c_agency_result& packetw2c_agency_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fexchange_2eproto();
  return *default_instance_;
}

packetw2c_agency_result* packetw2c_agency_result::default_instance_ = NULL;

packetw2c_agency_result* packetw2c_agency_result::New() const {
  return new packetw2c_agency_result;
}

void packetw2c_agency_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7580;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_agency_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_agency_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .client2world_protocols.agency_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_agency_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_agency_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.agency_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_agency_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_agency_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.agency_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_agency_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_agency_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client2world_protocols.agency_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_agency_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_agency_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_agency_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_agency_result::MergeFrom(const packetw2c_agency_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_agency_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_agency_result::CopyFrom(const packetw2c_agency_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_agency_result::IsInitialized() const {

  return true;
}

void packetw2c_agency_result::Swap(packetw2c_agency_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_agency_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_agency_result_descriptor_;
  metadata.reflection = packetw2c_agency_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int payopen_info::kTypeFieldNumber;
const int payopen_info::kIsopenFieldNumber;
const int payopen_info::kIshotFieldNumber;
const int payopen_info::kPriorityFieldNumber;
const int payopen_info::kChipsValueFieldNumber;
const int payopen_info::kMaxValuePerTimeFieldNumber;
const int payopen_info::kIsshowFieldNumber;
#endif  // !_MSC_VER

payopen_info::payopen_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void payopen_info::InitAsDefaultInstance() {
}

payopen_info::payopen_info(const payopen_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void payopen_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  isopen_ = false;
  ishot_ = false;
  priority_ = 0;
  chipsvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_value_per_time_ = 0;
  isshow_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

payopen_info::~payopen_info() {
  SharedDtor();
}

void payopen_info::SharedDtor() {
  if (chipsvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete chipsvalue_;
  }
  if (this != default_instance_) {
  }
}

void payopen_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* payopen_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return payopen_info_descriptor_;
}

const payopen_info& payopen_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fexchange_2eproto();
  return *default_instance_;
}

payopen_info* payopen_info::default_instance_ = NULL;

payopen_info* payopen_info::New() const {
  return new payopen_info;
}

void payopen_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    isopen_ = false;
    ishot_ = false;
    priority_ = 0;
    if (has_chipsvalue()) {
      if (chipsvalue_ != &::google::protobuf::internal::kEmptyString) {
        chipsvalue_->clear();
      }
    }
    max_value_per_time_ = 0;
    isshow_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool payopen_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isopen;
        break;
      }

      // optional bool isopen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isopen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ishot;
        break;
      }

      // optional bool ishot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ishot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishot_)));
          set_has_ishot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_priority;
        break;
      }

      // optional int32 priority = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_chipsValue;
        break;
      }

      // optional string chipsValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chipsValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chipsvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chipsvalue().data(), this->chipsvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_value_per_time;
        break;
      }

      // optional int32 max_value_per_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_value_per_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_value_per_time_)));
          set_has_max_value_per_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isshow;
        break;
      }

      // optional bool isshow = 7 [default = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isshow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshow_)));
          set_has_isshow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void payopen_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional bool isopen = 2;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isopen(), output);
  }

  // optional bool ishot = 3;
  if (has_ishot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ishot(), output);
  }

  // optional int32 priority = 4;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->priority(), output);
  }

  // optional string chipsValue = 5;
  if (has_chipsvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chipsvalue().data(), this->chipsvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->chipsvalue(), output);
  }

  // optional int32 max_value_per_time = 6;
  if (has_max_value_per_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_value_per_time(), output);
  }

  // optional bool isshow = 7 [default = true];
  if (has_isshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isshow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* payopen_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional bool isopen = 2;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isopen(), target);
  }

  // optional bool ishot = 3;
  if (has_ishot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ishot(), target);
  }

  // optional int32 priority = 4;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->priority(), target);
  }

  // optional string chipsValue = 5;
  if (has_chipsvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chipsvalue().data(), this->chipsvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->chipsvalue(), target);
  }

  // optional int32 max_value_per_time = 6;
  if (has_max_value_per_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_value_per_time(), target);
  }

  // optional bool isshow = 7 [default = true];
  if (has_isshow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isshow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int payopen_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bool isopen = 2;
    if (has_isopen()) {
      total_size += 1 + 1;
    }

    // optional bool ishot = 3;
    if (has_ishot()) {
      total_size += 1 + 1;
    }

    // optional int32 priority = 4;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional string chipsValue = 5;
    if (has_chipsvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chipsvalue());
    }

    // optional int32 max_value_per_time = 6;
    if (has_max_value_per_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_value_per_time());
    }

    // optional bool isshow = 7 [default = true];
    if (has_isshow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void payopen_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const payopen_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const payopen_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void payopen_info::MergeFrom(const payopen_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
    if (from.has_ishot()) {
      set_ishot(from.ishot());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_chipsvalue()) {
      set_chipsvalue(from.chipsvalue());
    }
    if (from.has_max_value_per_time()) {
      set_max_value_per_time(from.max_value_per_time());
    }
    if (from.has_isshow()) {
      set_isshow(from.isshow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void payopen_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void payopen_info::CopyFrom(const payopen_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool payopen_info::IsInitialized() const {

  return true;
}

void payopen_info::Swap(payopen_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(isopen_, other->isopen_);
    std::swap(ishot_, other->ishot_);
    std::swap(priority_, other->priority_);
    std::swap(chipsvalue_, other->chipsvalue_);
    std::swap(max_value_per_time_, other->max_value_per_time_);
    std::swap(isshow_, other->isshow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata payopen_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = payopen_info_descriptor_;
  metadata.reflection = payopen_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_askPayopen::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_askPayopen::packetc2w_askPayopen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_askPayopen::InitAsDefaultInstance() {
}

packetc2w_askPayopen::packetc2w_askPayopen(const packetc2w_askPayopen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_askPayopen::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5084;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_askPayopen::~packetc2w_askPayopen() {
  SharedDtor();
}

void packetc2w_askPayopen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_askPayopen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_askPayopen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_askPayopen_descriptor_;
}

const packetc2w_askPayopen& packetc2w_askPayopen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fexchange_2eproto();
  return *default_instance_;
}

packetc2w_askPayopen* packetc2w_askPayopen::default_instance_ = NULL;

packetc2w_askPayopen* packetc2w_askPayopen::New() const {
  return new packetc2w_askPayopen;
}

void packetc2w_askPayopen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5084;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_askPayopen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_askPayopen];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_askPayopen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_askPayopen];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_askPayopen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_askPayopen];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_askPayopen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_askPayopen];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_askPayopen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_askPayopen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_askPayopen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_askPayopen::MergeFrom(const packetc2w_askPayopen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_askPayopen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_askPayopen::CopyFrom(const packetc2w_askPayopen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_askPayopen::IsInitialized() const {

  return true;
}

void packetc2w_askPayopen::Swap(packetc2w_askPayopen* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_askPayopen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_askPayopen_descriptor_;
  metadata.reflection = packetc2w_askPayopen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_askPayopen_result::kPacketIdFieldNumber;
const int packetw2c_askPayopen_result::kInfoFieldNumber;
const int packetw2c_askPayopen_result::kIsAppStoreOpenFieldNumber;
#endif  // !_MSC_VER

packetw2c_askPayopen_result::packetw2c_askPayopen_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_askPayopen_result::InitAsDefaultInstance() {
}

packetw2c_askPayopen_result::packetw2c_askPayopen_result(const packetw2c_askPayopen_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_askPayopen_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7592;
  isappstoreopen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_askPayopen_result::~packetw2c_askPayopen_result() {
  SharedDtor();
}

void packetw2c_askPayopen_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_askPayopen_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_askPayopen_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_askPayopen_result_descriptor_;
}

const packetw2c_askPayopen_result& packetw2c_askPayopen_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fexchange_2eproto();
  return *default_instance_;
}

packetw2c_askPayopen_result* packetw2c_askPayopen_result::default_instance_ = NULL;

packetw2c_askPayopen_result* packetw2c_askPayopen_result::New() const {
  return new packetw2c_askPayopen_result;
}

void packetw2c_askPayopen_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7592;
    isappstoreopen_ = false;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_askPayopen_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_askPayopen_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .client2world_protocols.payopen_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_isAppStoreOpen;
        break;
      }

      // optional bool isAppStoreOpen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAppStoreOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isappstoreopen_)));
          set_has_isappstoreopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_askPayopen_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_askPayopen_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.payopen_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional bool isAppStoreOpen = 3;
  if (has_isappstoreopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isappstoreopen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_askPayopen_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_askPayopen_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.payopen_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional bool isAppStoreOpen = 3;
  if (has_isappstoreopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isappstoreopen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_askPayopen_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_askPayopen_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool isAppStoreOpen = 3;
    if (has_isappstoreopen()) {
      total_size += 1 + 1;
    }

  }
  // repeated .client2world_protocols.payopen_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_askPayopen_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_askPayopen_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_askPayopen_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_askPayopen_result::MergeFrom(const packetw2c_askPayopen_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_isappstoreopen()) {
      set_isappstoreopen(from.isappstoreopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_askPayopen_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_askPayopen_result::CopyFrom(const packetw2c_askPayopen_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_askPayopen_result::IsInitialized() const {

  return true;
}

void packetw2c_askPayopen_result::Swap(packetw2c_askPayopen_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    info_.Swap(&other->info_);
    std::swap(isappstoreopen_, other->isappstoreopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_askPayopen_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_askPayopen_result_descriptor_;
  metadata.reflection = packetw2c_askPayopen_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

// @@protoc_insertion_point(global_scope)
