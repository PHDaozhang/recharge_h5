// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_prizeClaw_protocol.proto

#ifndef PROTOBUF_game_5fprizeClaw_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_game_5fprizeClaw_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "game_prizeClaw_def.pb.h"
#include "msg_type_def.pb.h"
// @@protoc_insertion_point(includes)

namespace game_prizeClaw_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
void protobuf_AssignDesc_game_5fprizeClaw_5fprotocol_2eproto();
void protobuf_ShutdownFile_game_5fprizeClaw_5fprotocol_2eproto();

class packetc2l_get_player_info;
class packetl2c_get_player_info_result;
class packetc21_req_start_game;
class packet12c_req_start_game_result;
class packetc2l_req_leave_game;
class packetl2c_req_leave_game_result;
class packetc21_req_begin_pass;
class packet12c_req_begin_pass_result;
class packetc21_claw;
class packet12c_claw_result;
class packetc21_miss;
class packet12c_miss_result;

// ===================================================================

class packetc2l_get_player_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_player_info();
  virtual ~packetc2l_get_player_info();

  packetc2l_get_player_info(const packetc2l_get_player_info& from);

  inline packetc2l_get_player_info& operator=(const packetc2l_get_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_player_info& default_instance();

  void Swap(packetc2l_get_player_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_player_info& from);
  void MergeFrom(const packetc2l_get_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_player_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_prizeClaw_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_prizeClaw_protocols.packetc2l_get_player_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fprizeClaw_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_player_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_get_player_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_get_player_info_result();
  virtual ~packetl2c_get_player_info_result();

  packetl2c_get_player_info_result(const packetl2c_get_player_info_result& from);

  inline packetl2c_get_player_info_result& operator=(const packetl2c_get_player_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_get_player_info_result& default_instance();

  void Swap(packetl2c_get_player_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_get_player_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_get_player_info_result& from);
  void MergeFrom(const packetl2c_get_player_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_player_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_prizeClaw_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value);

  // optional int32 game_state = 2;
  inline bool has_game_state() const;
  inline void clear_game_state();
  static const int kGameStateFieldNumber = 2;
  inline ::google::protobuf::int32 game_state() const;
  inline void set_game_state(::google::protobuf::int32 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 cd_time = 4;
  inline bool has_cd_time() const;
  inline void clear_cd_time();
  static const int kCdTimeFieldNumber = 4;
  inline ::google::protobuf::int32 cd_time() const;
  inline void set_cd_time(::google::protobuf::int32 value);

  // optional int32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 catch_ret = 6;
  inline bool has_catch_ret() const;
  inline void clear_catch_ret();
  static const int kCatchRetFieldNumber = 6;
  inline ::google::protobuf::int32 catch_ret() const;
  inline void set_catch_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_prizeClaw_protocols.packetl2c_get_player_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_game_state();
  inline void clear_has_game_state();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cd_time();
  inline void clear_has_cd_time();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_catch_ret();
  inline void clear_has_catch_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 game_state_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 cd_time_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 catch_ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fprizeClaw_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_get_player_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc21_req_start_game : public ::google::protobuf::Message {
 public:
  packetc21_req_start_game();
  virtual ~packetc21_req_start_game();

  packetc21_req_start_game(const packetc21_req_start_game& from);

  inline packetc21_req_start_game& operator=(const packetc21_req_start_game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc21_req_start_game& default_instance();

  void Swap(packetc21_req_start_game* other);

  // implements Message ----------------------------------------------

  packetc21_req_start_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc21_req_start_game& from);
  void MergeFrom(const packetc21_req_start_game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_start_game];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_prizeClaw_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_prizeClaw_protocols.packetc21_req_start_game)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fprizeClaw_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc21_req_start_game* default_instance_;
};
// -------------------------------------------------------------------

class packet12c_req_start_game_result : public ::google::protobuf::Message {
 public:
  packet12c_req_start_game_result();
  virtual ~packet12c_req_start_game_result();

  packet12c_req_start_game_result(const packet12c_req_start_game_result& from);

  inline packet12c_req_start_game_result& operator=(const packet12c_req_start_game_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet12c_req_start_game_result& default_instance();

  void Swap(packet12c_req_start_game_result* other);

  // implements Message ----------------------------------------------

  packet12c_req_start_game_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet12c_req_start_game_result& from);
  void MergeFrom(const packet12c_req_start_game_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_start_game];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_prizeClaw_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_prizeClaw_protocols.packet12c_req_start_game_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fprizeClaw_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet12c_req_start_game_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_req_leave_game : public ::google::protobuf::Message {
 public:
  packetc2l_req_leave_game();
  virtual ~packetc2l_req_leave_game();

  packetc2l_req_leave_game(const packetc2l_req_leave_game& from);

  inline packetc2l_req_leave_game& operator=(const packetc2l_req_leave_game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_req_leave_game& default_instance();

  void Swap(packetc2l_req_leave_game* other);

  // implements Message ----------------------------------------------

  packetc2l_req_leave_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_req_leave_game& from);
  void MergeFrom(const packetc2l_req_leave_game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_leave_game];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_prizeClaw_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_prizeClaw_protocols.packetc2l_req_leave_game)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fprizeClaw_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_req_leave_game* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_req_leave_game_result : public ::google::protobuf::Message {
 public:
  packetl2c_req_leave_game_result();
  virtual ~packetl2c_req_leave_game_result();

  packetl2c_req_leave_game_result(const packetl2c_req_leave_game_result& from);

  inline packetl2c_req_leave_game_result& operator=(const packetl2c_req_leave_game_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_req_leave_game_result& default_instance();

  void Swap(packetl2c_req_leave_game_result* other);

  // implements Message ----------------------------------------------

  packetl2c_req_leave_game_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_req_leave_game_result& from);
  void MergeFrom(const packetl2c_req_leave_game_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_leave_game];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_prizeClaw_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_prizeClaw_protocols.packetl2c_req_leave_game_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fprizeClaw_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_req_leave_game_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc21_req_begin_pass : public ::google::protobuf::Message {
 public:
  packetc21_req_begin_pass();
  virtual ~packetc21_req_begin_pass();

  packetc21_req_begin_pass(const packetc21_req_begin_pass& from);

  inline packetc21_req_begin_pass& operator=(const packetc21_req_begin_pass& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc21_req_begin_pass& default_instance();

  void Swap(packetc21_req_begin_pass* other);

  // implements Message ----------------------------------------------

  packetc21_req_begin_pass* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc21_req_begin_pass& from);
  void MergeFrom(const packetc21_req_begin_pass& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_begin_pass];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_prizeClaw_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_prizeClaw_protocols.packetc21_req_begin_pass)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fprizeClaw_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc21_req_begin_pass* default_instance_;
};
// -------------------------------------------------------------------

class packet12c_req_begin_pass_result : public ::google::protobuf::Message {
 public:
  packet12c_req_begin_pass_result();
  virtual ~packet12c_req_begin_pass_result();

  packet12c_req_begin_pass_result(const packet12c_req_begin_pass_result& from);

  inline packet12c_req_begin_pass_result& operator=(const packet12c_req_begin_pass_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet12c_req_begin_pass_result& default_instance();

  void Swap(packet12c_req_begin_pass_result* other);

  // implements Message ----------------------------------------------

  packet12c_req_begin_pass_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet12c_req_begin_pass_result& from);
  void MergeFrom(const packet12c_req_begin_pass_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_begin_pass];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_prizeClaw_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_prizeClaw_protocols.packet12c_req_begin_pass_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fprizeClaw_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet12c_req_begin_pass_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc21_claw : public ::google::protobuf::Message {
 public:
  packetc21_claw();
  virtual ~packetc21_claw();

  packetc21_claw(const packetc21_claw& from);

  inline packetc21_claw& operator=(const packetc21_claw& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc21_claw& default_instance();

  void Swap(packetc21_claw* other);

  // implements Message ----------------------------------------------

  packetc21_claw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc21_claw& from);
  void MergeFrom(const packetc21_claw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_claw];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_prizeClaw_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value);

  // optional int32 item_id = 3;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_prizeClaw_protocols.packetc21_claw)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_item_id();
  inline void clear_has_item_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 item_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fprizeClaw_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc21_claw* default_instance_;
};
// -------------------------------------------------------------------

class packet12c_claw_result : public ::google::protobuf::Message {
 public:
  packet12c_claw_result();
  virtual ~packet12c_claw_result();

  packet12c_claw_result(const packet12c_claw_result& from);

  inline packet12c_claw_result& operator=(const packet12c_claw_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet12c_claw_result& default_instance();

  void Swap(packet12c_claw_result* other);

  // implements Message ----------------------------------------------

  packet12c_claw_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet12c_claw_result& from);
  void MergeFrom(const packet12c_claw_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_claw];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_prizeClaw_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_prizeClaw_protocols.packet12c_claw_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fprizeClaw_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet12c_claw_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc21_miss : public ::google::protobuf::Message {
 public:
  packetc21_miss();
  virtual ~packetc21_miss();

  packetc21_miss(const packetc21_miss& from);

  inline packetc21_miss& operator=(const packetc21_miss& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc21_miss& default_instance();

  void Swap(packetc21_miss* other);

  // implements Message ----------------------------------------------

  packetc21_miss* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc21_miss& from);
  void MergeFrom(const packetc21_miss& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_miss];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_prizeClaw_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_prizeClaw_protocols.packetc21_miss)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fprizeClaw_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc21_miss* default_instance_;
};
// -------------------------------------------------------------------

class packet12c_miss_result : public ::google::protobuf::Message {
 public:
  packet12c_miss_result();
  virtual ~packet12c_miss_result();

  packet12c_miss_result(const packet12c_miss_result& from);

  inline packet12c_miss_result& operator=(const packet12c_miss_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet12c_miss_result& default_instance();

  void Swap(packet12c_miss_result* other);

  // implements Message ----------------------------------------------

  packet12c_miss_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet12c_miss_result& from);
  void MergeFrom(const packet12c_miss_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_12c_miss];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_prizeClaw_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_prizeClaw_protocols.packet12c_miss_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fprizeClaw_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fprizeClaw_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet12c_miss_result* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2l_get_player_info

// optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_player_info];
inline bool packetc2l_get_player_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_player_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_player_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_player_info::clear_packet_id() {
  packet_id_ = 10001;
  clear_has_packet_id();
}
inline ::game_prizeClaw_protocols::e_server_msg_type packetc2l_get_player_info::packet_id() const {
  return static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_player_info::set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value) {
  assert(::game_prizeClaw_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_get_player_info_result

// optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_player_info];
inline bool packetl2c_get_player_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_get_player_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_get_player_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_get_player_info_result::clear_packet_id() {
  packet_id_ = 15001;
  clear_has_packet_id();
}
inline ::game_prizeClaw_protocols::e_server_msg_type packetl2c_get_player_info_result::packet_id() const {
  return static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_get_player_info_result::set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value) {
  assert(::game_prizeClaw_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 game_state = 2;
inline bool packetl2c_get_player_info_result::has_game_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_get_player_info_result::set_has_game_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_get_player_info_result::clear_has_game_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_get_player_info_result::clear_game_state() {
  game_state_ = 0;
  clear_has_game_state();
}
inline ::google::protobuf::int32 packetl2c_get_player_info_result::game_state() const {
  return game_state_;
}
inline void packetl2c_get_player_info_result::set_game_state(::google::protobuf::int32 value) {
  set_has_game_state();
  game_state_ = value;
}

// optional int32 type = 3;
inline bool packetl2c_get_player_info_result::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_get_player_info_result::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_get_player_info_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_get_player_info_result::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 packetl2c_get_player_info_result::type() const {
  return type_;
}
inline void packetl2c_get_player_info_result::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 cd_time = 4;
inline bool packetl2c_get_player_info_result::has_cd_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_get_player_info_result::set_has_cd_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_get_player_info_result::clear_has_cd_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_get_player_info_result::clear_cd_time() {
  cd_time_ = 0;
  clear_has_cd_time();
}
inline ::google::protobuf::int32 packetl2c_get_player_info_result::cd_time() const {
  return cd_time_;
}
inline void packetl2c_get_player_info_result::set_cd_time(::google::protobuf::int32 value) {
  set_has_cd_time();
  cd_time_ = value;
}

// optional int32 count = 5;
inline bool packetl2c_get_player_info_result::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_get_player_info_result::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_get_player_info_result::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_get_player_info_result::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 packetl2c_get_player_info_result::count() const {
  return count_;
}
inline void packetl2c_get_player_info_result::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 catch_ret = 6;
inline bool packetl2c_get_player_info_result::has_catch_ret() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_get_player_info_result::set_has_catch_ret() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_get_player_info_result::clear_has_catch_ret() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_get_player_info_result::clear_catch_ret() {
  catch_ret_ = 0;
  clear_has_catch_ret();
}
inline ::google::protobuf::int32 packetl2c_get_player_info_result::catch_ret() const {
  return catch_ret_;
}
inline void packetl2c_get_player_info_result::set_catch_ret(::google::protobuf::int32 value) {
  set_has_catch_ret();
  catch_ret_ = value;
}

// -------------------------------------------------------------------

// packetc21_req_start_game

// optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_start_game];
inline bool packetc21_req_start_game::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc21_req_start_game::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc21_req_start_game::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc21_req_start_game::clear_packet_id() {
  packet_id_ = 10002;
  clear_has_packet_id();
}
inline ::game_prizeClaw_protocols::e_server_msg_type packetc21_req_start_game::packet_id() const {
  return static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc21_req_start_game::set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value) {
  assert(::game_prizeClaw_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 type = 2;
inline bool packetc21_req_start_game::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc21_req_start_game::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc21_req_start_game::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc21_req_start_game::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 packetc21_req_start_game::type() const {
  return type_;
}
inline void packetc21_req_start_game::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// packet12c_req_start_game_result

// optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_start_game];
inline bool packet12c_req_start_game_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet12c_req_start_game_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet12c_req_start_game_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet12c_req_start_game_result::clear_packet_id() {
  packet_id_ = 15002;
  clear_has_packet_id();
}
inline ::game_prizeClaw_protocols::e_server_msg_type packet12c_req_start_game_result::packet_id() const {
  return static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(packet_id_);
}
inline void packet12c_req_start_game_result::set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value) {
  assert(::game_prizeClaw_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packet12c_req_start_game_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet12c_req_start_game_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet12c_req_start_game_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet12c_req_start_game_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packet12c_req_start_game_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packet12c_req_start_game_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 type = 3;
inline bool packet12c_req_start_game_result::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packet12c_req_start_game_result::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packet12c_req_start_game_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packet12c_req_start_game_result::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 packet12c_req_start_game_result::type() const {
  return type_;
}
inline void packet12c_req_start_game_result::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// packetc2l_req_leave_game

// optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_leave_game];
inline bool packetc2l_req_leave_game::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_req_leave_game::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_req_leave_game::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_req_leave_game::clear_packet_id() {
  packet_id_ = 10003;
  clear_has_packet_id();
}
inline ::game_prizeClaw_protocols::e_server_msg_type packetc2l_req_leave_game::packet_id() const {
  return static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_req_leave_game::set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value) {
  assert(::game_prizeClaw_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_req_leave_game_result

// optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_leave_game];
inline bool packetl2c_req_leave_game_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_req_leave_game_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_req_leave_game_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_req_leave_game_result::clear_packet_id() {
  packet_id_ = 15003;
  clear_has_packet_id();
}
inline ::game_prizeClaw_protocols::e_server_msg_type packetl2c_req_leave_game_result::packet_id() const {
  return static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_req_leave_game_result::set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value) {
  assert(::game_prizeClaw_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_req_leave_game_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_req_leave_game_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_req_leave_game_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_req_leave_game_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_req_leave_game_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_req_leave_game_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc21_req_begin_pass

// optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_begin_pass];
inline bool packetc21_req_begin_pass::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc21_req_begin_pass::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc21_req_begin_pass::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc21_req_begin_pass::clear_packet_id() {
  packet_id_ = 10004;
  clear_has_packet_id();
}
inline ::game_prizeClaw_protocols::e_server_msg_type packetc21_req_begin_pass::packet_id() const {
  return static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc21_req_begin_pass::set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value) {
  assert(::game_prizeClaw_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packet12c_req_begin_pass_result

// optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_begin_pass];
inline bool packet12c_req_begin_pass_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet12c_req_begin_pass_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet12c_req_begin_pass_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet12c_req_begin_pass_result::clear_packet_id() {
  packet_id_ = 15004;
  clear_has_packet_id();
}
inline ::game_prizeClaw_protocols::e_server_msg_type packet12c_req_begin_pass_result::packet_id() const {
  return static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(packet_id_);
}
inline void packet12c_req_begin_pass_result::set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value) {
  assert(::game_prizeClaw_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packet12c_req_begin_pass_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet12c_req_begin_pass_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet12c_req_begin_pass_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet12c_req_begin_pass_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packet12c_req_begin_pass_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packet12c_req_begin_pass_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 count = 3;
inline bool packet12c_req_begin_pass_result::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packet12c_req_begin_pass_result::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packet12c_req_begin_pass_result::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packet12c_req_begin_pass_result::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 packet12c_req_begin_pass_result::count() const {
  return count_;
}
inline void packet12c_req_begin_pass_result::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// packetc21_claw

// optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_claw];
inline bool packetc21_claw::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc21_claw::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc21_claw::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc21_claw::clear_packet_id() {
  packet_id_ = 10005;
  clear_has_packet_id();
}
inline ::game_prizeClaw_protocols::e_server_msg_type packetc21_claw::packet_id() const {
  return static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc21_claw::set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value) {
  assert(::game_prizeClaw_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 item_id = 3;
inline bool packetc21_claw::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc21_claw::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc21_claw::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc21_claw::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 packetc21_claw::item_id() const {
  return item_id_;
}
inline void packetc21_claw::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// -------------------------------------------------------------------

// packet12c_claw_result

// optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_claw];
inline bool packet12c_claw_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet12c_claw_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet12c_claw_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet12c_claw_result::clear_packet_id() {
  packet_id_ = 15005;
  clear_has_packet_id();
}
inline ::game_prizeClaw_protocols::e_server_msg_type packet12c_claw_result::packet_id() const {
  return static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(packet_id_);
}
inline void packet12c_claw_result::set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value) {
  assert(::game_prizeClaw_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packet12c_claw_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet12c_claw_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet12c_claw_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet12c_claw_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packet12c_claw_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packet12c_claw_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 count = 3;
inline bool packet12c_claw_result::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packet12c_claw_result::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packet12c_claw_result::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packet12c_claw_result::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 packet12c_claw_result::count() const {
  return count_;
}
inline void packet12c_claw_result::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// packetc21_miss

// optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_miss];
inline bool packetc21_miss::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc21_miss::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc21_miss::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc21_miss::clear_packet_id() {
  packet_id_ = 10006;
  clear_has_packet_id();
}
inline ::game_prizeClaw_protocols::e_server_msg_type packetc21_miss::packet_id() const {
  return static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc21_miss::set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value) {
  assert(::game_prizeClaw_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packet12c_miss_result

// optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_12c_miss];
inline bool packet12c_miss_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet12c_miss_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet12c_miss_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet12c_miss_result::clear_packet_id() {
  packet_id_ = 15006;
  clear_has_packet_id();
}
inline ::game_prizeClaw_protocols::e_server_msg_type packet12c_miss_result::packet_id() const {
  return static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(packet_id_);
}
inline void packet12c_miss_result::set_packet_id(::game_prizeClaw_protocols::e_server_msg_type value) {
  assert(::game_prizeClaw_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packet12c_miss_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet12c_miss_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet12c_miss_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet12c_miss_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packet12c_miss_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packet12c_miss_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 count = 3;
inline bool packet12c_miss_result::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packet12c_miss_result::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packet12c_miss_result::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packet12c_miss_result::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 packet12c_miss_result::count() const {
  return count_;
}
inline void packet12c_miss_result::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_prizeClaw_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fprizeClaw_5fprotocol_2eproto__INCLUDED
