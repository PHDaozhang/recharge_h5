// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_zhajinhua_def.proto

#ifndef PROTOBUF_game_5fzhajinhua_5fdef_2eproto__INCLUDED
#define PROTOBUF_game_5fzhajinhua_5fdef_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace game_zhajinhua_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5fzhajinhua_5fdef_2eproto();
void protobuf_AssignDesc_game_5fzhajinhua_5fdef_2eproto();
void protobuf_ShutdownFile_game_5fzhajinhua_5fdef_2eproto();

class msg_player_info;
class msg_player_cards;
class msg_compare_cards;
class msg_player_settlement;

enum e_server_msg_type {
  e_mst_start_c2l = 10000,
  e_mst_c2l_get_room_info = 10001,
  e_mst_c2l_join_table = 10002,
  e_mst_c2l_leave_table = 10003,
  e_mst_c2l_req_sitdown = 10004,
  e_mst_c2l_set_ready = 10005,
  e_mst_c2l_player_declare = 10006,
  e_mst_c2l_compare_cards = 10008,
  e_mst_c2l_get_table_scene_info = 10009,
  e_mst_c2l_change_table = 10010,
  e_mst_c2l_show_cards = 10011,
  e_mst_c2l_check_state = 10012,
  e_mst_start_l2c = 15000,
  e_mst_l2c_get_room_info_result = 15001,
  e_mst_l2c_join_table_result = 15002,
  e_mst_l2c_leave_table_result = 15003,
  e_mst_l2c_req_sitdown_result = 15004,
  e_mst_l2c_set_ready_result = 15005,
  e_mst_l2c_game_start = 15006,
  e_mst_l2c_player_declare_result = 15007,
  e_mst_l2c_check_cards_result = 15008,
  e_mst_l2c_compare_cards_result = 15009,
  e_mst_l2c_game_settlement = 15010,
  e_mst_l2c_get_table_scene_info_result = 15011,
  e_mst_12c_notify_declare = 15012,
  e_mst_l2c_bc_join_room = 15013,
  e_mst_l2c_change_table_result = 15014,
  e_mst_l2c_bc_leave_table = 15015,
  e_mst_l2c_notify_show_cards = 15016,
  e_mst_l2c_check_state_result = 15017,
  e_mst_clend_index = 20000
};
bool e_server_msg_type_IsValid(int value);
const e_server_msg_type e_server_msg_type_MIN = e_mst_start_c2l;
const e_server_msg_type e_server_msg_type_MAX = e_mst_clend_index;
const int e_server_msg_type_ARRAYSIZE = e_server_msg_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_server_msg_type_descriptor();
inline const ::std::string& e_server_msg_type_Name(e_server_msg_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_server_msg_type_descriptor(), value);
}
inline bool e_server_msg_type_Parse(
    const ::std::string& name, e_server_msg_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_server_msg_type>(
    e_server_msg_type_descriptor(), name, value);
}
enum e_table_state {
  e_gst_wait = 0,
  e_gst_start = 1,
  e_gst_settlement = 3,
  e_gst_end = 4
};
bool e_table_state_IsValid(int value);
const e_table_state e_table_state_MIN = e_gst_wait;
const e_table_state e_table_state_MAX = e_gst_end;
const int e_table_state_ARRAYSIZE = e_table_state_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_table_state_descriptor();
inline const ::std::string& e_table_state_Name(e_table_state value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_table_state_descriptor(), value);
}
inline bool e_table_state_Parse(
    const ::std::string& name, e_table_state* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_table_state>(
    e_table_state_descriptor(), name, value);
}
enum e_seat_state {
  e_state_none = 0,
  e_state_occupy_seat = 1,
  e_state_ready = 2,
  e_state_game = 3,
  e_state_lose = 4
};
bool e_seat_state_IsValid(int value);
const e_seat_state e_seat_state_MIN = e_state_none;
const e_seat_state e_seat_state_MAX = e_state_lose;
const int e_seat_state_ARRAYSIZE = e_seat_state_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_seat_state_descriptor();
inline const ::std::string& e_seat_state_Name(e_seat_state value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_seat_state_descriptor(), value);
}
inline bool e_seat_state_Parse(
    const ::std::string& name, e_seat_state* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_seat_state>(
    e_seat_state_descriptor(), name, value);
}
enum e_player_declare {
  e_declare_none = 0,
  e_declare_check = 1,
  e_declare_fold = 2,
  e_declare_call = 3,
  e_declare_compare = 4,
  e_declare_raise = 5,
  e_declare_all_in = 6
};
bool e_player_declare_IsValid(int value);
const e_player_declare e_player_declare_MIN = e_declare_none;
const e_player_declare e_player_declare_MAX = e_declare_all_in;
const int e_player_declare_ARRAYSIZE = e_player_declare_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_player_declare_descriptor();
inline const ::std::string& e_player_declare_Name(e_player_declare value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_player_declare_descriptor(), value);
}
inline bool e_player_declare_Parse(
    const ::std::string& name, e_player_declare* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_player_declare>(
    e_player_declare_descriptor(), name, value);
}
// ===================================================================

class msg_player_info : public ::google::protobuf::Message {
 public:
  msg_player_info();
  virtual ~msg_player_info();

  msg_player_info(const msg_player_info& from);

  inline msg_player_info& operator=(const msg_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_player_info& default_instance();

  void Swap(msg_player_info* other);

  // implements Message ----------------------------------------------

  msg_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_player_info& from);
  void MergeFrom(const msg_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 cur_chips = 3;
  inline bool has_cur_chips() const;
  inline void clear_cur_chips();
  static const int kCurChipsFieldNumber = 3;
  inline ::google::protobuf::int32 cur_chips() const;
  inline void set_cur_chips(::google::protobuf::int32 value);

  // optional int32 has_bet = 4;
  inline bool has_has_bet() const;
  inline void clear_has_bet();
  static const int kHasBetFieldNumber = 4;
  inline ::google::protobuf::int32 has_bet() const;
  inline void set_has_bet(::google::protobuf::int32 value);

  // optional int32 seat = 5;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 5;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional .game_zhajinhua_protocols.e_seat_state state = 6;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline ::game_zhajinhua_protocols::e_seat_state state() const;
  inline void set_state(::game_zhajinhua_protocols::e_seat_state value);

  // optional int32 head_frame = 7;
  inline bool has_head_frame() const;
  inline void clear_head_frame();
  static const int kHeadFrameFieldNumber = 7;
  inline ::google::protobuf::int32 head_frame() const;
  inline void set_head_frame(::google::protobuf::int32 value);

  // optional string head_custom = 8;
  inline bool has_head_custom() const;
  inline void clear_head_custom();
  static const int kHeadCustomFieldNumber = 8;
  inline const ::std::string& head_custom() const;
  inline void set_head_custom(const ::std::string& value);
  inline void set_head_custom(const char* value);
  inline void set_head_custom(const char* value, size_t size);
  inline ::std::string* mutable_head_custom();
  inline ::std::string* release_head_custom();
  inline void set_allocated_head_custom(::std::string* head_custom);

  // optional int32 sex = 9;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 9;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 vip_level = 10;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 10;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);

  // optional .game_zhajinhua_protocols.e_player_declare player_declare = 11;
  inline bool has_player_declare() const;
  inline void clear_player_declare();
  static const int kPlayerDeclareFieldNumber = 11;
  inline ::game_zhajinhua_protocols::e_player_declare player_declare() const;
  inline void set_player_declare(::game_zhajinhua_protocols::e_player_declare value);

  // @@protoc_insertion_point(class_scope:game_zhajinhua_protocols.msg_player_info)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_cur_chips();
  inline void clear_has_cur_chips();
  inline void set_has_has_bet();
  inline void clear_has_has_bet();
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_head_frame();
  inline void clear_has_head_frame();
  inline void set_has_head_custom();
  inline void clear_has_head_custom();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_player_declare();
  inline void clear_has_player_declare();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 cur_chips_;
  ::google::protobuf::int32 has_bet_;
  ::google::protobuf::int32 seat_;
  int state_;
  ::google::protobuf::int32 head_frame_;
  ::std::string* head_custom_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 vip_level_;
  int player_declare_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fzhajinhua_5fdef_2eproto();
  friend void protobuf_AssignDesc_game_5fzhajinhua_5fdef_2eproto();
  friend void protobuf_ShutdownFile_game_5fzhajinhua_5fdef_2eproto();

  void InitAsDefaultInstance();
  static msg_player_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_player_cards : public ::google::protobuf::Message {
 public:
  msg_player_cards();
  virtual ~msg_player_cards();

  msg_player_cards(const msg_player_cards& from);

  inline msg_player_cards& operator=(const msg_player_cards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_player_cards& default_instance();

  void Swap(msg_player_cards* other);

  // implements Message ----------------------------------------------

  msg_player_cards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_player_cards& from);
  void MergeFrom(const msg_player_cards& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // repeated int32 cards = 2;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // optional bool check = 3;
  inline bool has_check() const;
  inline void clear_check();
  static const int kCheckFieldNumber = 3;
  inline bool check() const;
  inline void set_check(bool value);

  // optional int32 card_type = 4;
  inline bool has_card_type() const;
  inline void clear_card_type();
  static const int kCardTypeFieldNumber = 4;
  inline ::google::protobuf::int32 card_type() const;
  inline void set_card_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_zhajinhua_protocols.msg_player_cards)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_check();
  inline void clear_has_check();
  inline void set_has_card_type();
  inline void clear_has_card_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::int32 player_id_;
  bool check_;
  ::google::protobuf::int32 card_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fzhajinhua_5fdef_2eproto();
  friend void protobuf_AssignDesc_game_5fzhajinhua_5fdef_2eproto();
  friend void protobuf_ShutdownFile_game_5fzhajinhua_5fdef_2eproto();

  void InitAsDefaultInstance();
  static msg_player_cards* default_instance_;
};
// -------------------------------------------------------------------

class msg_compare_cards : public ::google::protobuf::Message {
 public:
  msg_compare_cards();
  virtual ~msg_compare_cards();

  msg_compare_cards(const msg_compare_cards& from);

  inline msg_compare_cards& operator=(const msg_compare_cards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_compare_cards& default_instance();

  void Swap(msg_compare_cards* other);

  // implements Message ----------------------------------------------

  msg_compare_cards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_compare_cards& from);
  void MergeFrom(const msg_compare_cards& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // repeated int32 cards = 2;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // optional bool check = 3;
  inline bool has_check() const;
  inline void clear_check();
  static const int kCheckFieldNumber = 3;
  inline bool check() const;
  inline void set_check(bool value);

  // @@protoc_insertion_point(class_scope:game_zhajinhua_protocols.msg_compare_cards)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_check();
  inline void clear_has_check();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::int32 player_id_;
  bool check_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fzhajinhua_5fdef_2eproto();
  friend void protobuf_AssignDesc_game_5fzhajinhua_5fdef_2eproto();
  friend void protobuf_ShutdownFile_game_5fzhajinhua_5fdef_2eproto();

  void InitAsDefaultInstance();
  static msg_compare_cards* default_instance_;
};
// -------------------------------------------------------------------

class msg_player_settlement : public ::google::protobuf::Message {
 public:
  msg_player_settlement();
  virtual ~msg_player_settlement();

  msg_player_settlement(const msg_player_settlement& from);

  inline msg_player_settlement& operator=(const msg_player_settlement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_player_settlement& default_instance();

  void Swap(msg_player_settlement* other);

  // implements Message ----------------------------------------------

  msg_player_settlement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_player_settlement& from);
  void MergeFrom(const msg_player_settlement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // repeated int32 cards = 3;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 3;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // optional bool check = 4;
  inline bool has_check() const;
  inline void clear_check();
  static const int kCheckFieldNumber = 4;
  inline bool check() const;
  inline void set_check(bool value);

  // repeated int32 can_check_player = 5;
  inline int can_check_player_size() const;
  inline void clear_can_check_player();
  static const int kCanCheckPlayerFieldNumber = 5;
  inline ::google::protobuf::int32 can_check_player(int index) const;
  inline void set_can_check_player(int index, ::google::protobuf::int32 value);
  inline void add_can_check_player(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      can_check_player() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_can_check_player();

  // optional int32 card_type = 6;
  inline bool has_card_type() const;
  inline void clear_card_type();
  static const int kCardTypeFieldNumber = 6;
  inline ::google::protobuf::int32 card_type() const;
  inline void set_card_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_zhajinhua_protocols.msg_player_settlement)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_check();
  inline void clear_has_check();
  inline void set_has_card_type();
  inline void clear_has_card_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > can_check_player_;
  bool check_;
  ::google::protobuf::int32 card_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fzhajinhua_5fdef_2eproto();
  friend void protobuf_AssignDesc_game_5fzhajinhua_5fdef_2eproto();
  friend void protobuf_ShutdownFile_game_5fzhajinhua_5fdef_2eproto();

  void InitAsDefaultInstance();
  static msg_player_settlement* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_player_info

// optional int32 player_id = 1;
inline bool msg_player_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_player_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_player_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_player_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_player_info::player_id() const {
  return player_id_;
}
inline void msg_player_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string nickname = 2;
inline bool msg_player_info::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_player_info::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_player_info::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_player_info::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& msg_player_info::nickname() const {
  return *nickname_;
}
inline void msg_player_info::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void msg_player_info::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void msg_player_info::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_player_info::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* msg_player_info::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_player_info::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 cur_chips = 3;
inline bool msg_player_info::has_cur_chips() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_player_info::set_has_cur_chips() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_player_info::clear_has_cur_chips() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_player_info::clear_cur_chips() {
  cur_chips_ = 0;
  clear_has_cur_chips();
}
inline ::google::protobuf::int32 msg_player_info::cur_chips() const {
  return cur_chips_;
}
inline void msg_player_info::set_cur_chips(::google::protobuf::int32 value) {
  set_has_cur_chips();
  cur_chips_ = value;
}

// optional int32 has_bet = 4;
inline bool msg_player_info::has_has_bet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_player_info::set_has_has_bet() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_player_info::clear_has_has_bet() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_player_info::clear_has_bet() {
  has_bet_ = 0;
  clear_has_has_bet();
}
inline ::google::protobuf::int32 msg_player_info::has_bet() const {
  return has_bet_;
}
inline void msg_player_info::set_has_bet(::google::protobuf::int32 value) {
  set_has_has_bet();
  has_bet_ = value;
}

// optional int32 seat = 5;
inline bool msg_player_info::has_seat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_player_info::set_has_seat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_player_info::clear_has_seat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_player_info::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 msg_player_info::seat() const {
  return seat_;
}
inline void msg_player_info::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional .game_zhajinhua_protocols.e_seat_state state = 6;
inline bool msg_player_info::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_player_info::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_player_info::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_player_info::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::game_zhajinhua_protocols::e_seat_state msg_player_info::state() const {
  return static_cast< ::game_zhajinhua_protocols::e_seat_state >(state_);
}
inline void msg_player_info::set_state(::game_zhajinhua_protocols::e_seat_state value) {
  assert(::game_zhajinhua_protocols::e_seat_state_IsValid(value));
  set_has_state();
  state_ = value;
}

// optional int32 head_frame = 7;
inline bool msg_player_info::has_head_frame() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_player_info::set_has_head_frame() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_player_info::clear_has_head_frame() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_player_info::clear_head_frame() {
  head_frame_ = 0;
  clear_has_head_frame();
}
inline ::google::protobuf::int32 msg_player_info::head_frame() const {
  return head_frame_;
}
inline void msg_player_info::set_head_frame(::google::protobuf::int32 value) {
  set_has_head_frame();
  head_frame_ = value;
}

// optional string head_custom = 8;
inline bool msg_player_info::has_head_custom() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_player_info::set_has_head_custom() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_player_info::clear_has_head_custom() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_player_info::clear_head_custom() {
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    head_custom_->clear();
  }
  clear_has_head_custom();
}
inline const ::std::string& msg_player_info::head_custom() const {
  return *head_custom_;
}
inline void msg_player_info::set_head_custom(const ::std::string& value) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(value);
}
inline void msg_player_info::set_head_custom(const char* value) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(value);
}
inline void msg_player_info::set_head_custom(const char* value, size_t size) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_player_info::mutable_head_custom() {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  return head_custom_;
}
inline ::std::string* msg_player_info::release_head_custom() {
  clear_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_custom_;
    head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_player_info::set_allocated_head_custom(::std::string* head_custom) {
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete head_custom_;
  }
  if (head_custom) {
    set_has_head_custom();
    head_custom_ = head_custom;
  } else {
    clear_has_head_custom();
    head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 sex = 9;
inline bool msg_player_info::has_sex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msg_player_info::set_has_sex() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msg_player_info::clear_has_sex() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msg_player_info::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 msg_player_info::sex() const {
  return sex_;
}
inline void msg_player_info::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 vip_level = 10;
inline bool msg_player_info::has_vip_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void msg_player_info::set_has_vip_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void msg_player_info::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void msg_player_info::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 msg_player_info::vip_level() const {
  return vip_level_;
}
inline void msg_player_info::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional .game_zhajinhua_protocols.e_player_declare player_declare = 11;
inline bool msg_player_info::has_player_declare() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void msg_player_info::set_has_player_declare() {
  _has_bits_[0] |= 0x00000400u;
}
inline void msg_player_info::clear_has_player_declare() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void msg_player_info::clear_player_declare() {
  player_declare_ = 0;
  clear_has_player_declare();
}
inline ::game_zhajinhua_protocols::e_player_declare msg_player_info::player_declare() const {
  return static_cast< ::game_zhajinhua_protocols::e_player_declare >(player_declare_);
}
inline void msg_player_info::set_player_declare(::game_zhajinhua_protocols::e_player_declare value) {
  assert(::game_zhajinhua_protocols::e_player_declare_IsValid(value));
  set_has_player_declare();
  player_declare_ = value;
}

// -------------------------------------------------------------------

// msg_player_cards

// optional int32 player_id = 1;
inline bool msg_player_cards::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_player_cards::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_player_cards::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_player_cards::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_player_cards::player_id() const {
  return player_id_;
}
inline void msg_player_cards::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// repeated int32 cards = 2;
inline int msg_player_cards::cards_size() const {
  return cards_.size();
}
inline void msg_player_cards::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 msg_player_cards::cards(int index) const {
  return cards_.Get(index);
}
inline void msg_player_cards::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
}
inline void msg_player_cards::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_player_cards::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_player_cards::mutable_cards() {
  return &cards_;
}

// optional bool check = 3;
inline bool msg_player_cards::has_check() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_player_cards::set_has_check() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_player_cards::clear_has_check() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_player_cards::clear_check() {
  check_ = false;
  clear_has_check();
}
inline bool msg_player_cards::check() const {
  return check_;
}
inline void msg_player_cards::set_check(bool value) {
  set_has_check();
  check_ = value;
}

// optional int32 card_type = 4;
inline bool msg_player_cards::has_card_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_player_cards::set_has_card_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_player_cards::clear_has_card_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_player_cards::clear_card_type() {
  card_type_ = 0;
  clear_has_card_type();
}
inline ::google::protobuf::int32 msg_player_cards::card_type() const {
  return card_type_;
}
inline void msg_player_cards::set_card_type(::google::protobuf::int32 value) {
  set_has_card_type();
  card_type_ = value;
}

// -------------------------------------------------------------------

// msg_compare_cards

// optional int32 player_id = 1;
inline bool msg_compare_cards::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_compare_cards::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_compare_cards::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_compare_cards::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_compare_cards::player_id() const {
  return player_id_;
}
inline void msg_compare_cards::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// repeated int32 cards = 2;
inline int msg_compare_cards::cards_size() const {
  return cards_.size();
}
inline void msg_compare_cards::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 msg_compare_cards::cards(int index) const {
  return cards_.Get(index);
}
inline void msg_compare_cards::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
}
inline void msg_compare_cards::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_compare_cards::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_compare_cards::mutable_cards() {
  return &cards_;
}

// optional bool check = 3;
inline bool msg_compare_cards::has_check() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_compare_cards::set_has_check() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_compare_cards::clear_has_check() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_compare_cards::clear_check() {
  check_ = false;
  clear_has_check();
}
inline bool msg_compare_cards::check() const {
  return check_;
}
inline void msg_compare_cards::set_check(bool value) {
  set_has_check();
  check_ = value;
}

// -------------------------------------------------------------------

// msg_player_settlement

// optional int32 player_id = 1;
inline bool msg_player_settlement::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_player_settlement::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_player_settlement::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_player_settlement::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_player_settlement::player_id() const {
  return player_id_;
}
inline void msg_player_settlement::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 score = 2;
inline bool msg_player_settlement::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_player_settlement::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_player_settlement::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_player_settlement::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 msg_player_settlement::score() const {
  return score_;
}
inline void msg_player_settlement::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// repeated int32 cards = 3;
inline int msg_player_settlement::cards_size() const {
  return cards_.size();
}
inline void msg_player_settlement::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 msg_player_settlement::cards(int index) const {
  return cards_.Get(index);
}
inline void msg_player_settlement::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
}
inline void msg_player_settlement::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_player_settlement::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_player_settlement::mutable_cards() {
  return &cards_;
}

// optional bool check = 4;
inline bool msg_player_settlement::has_check() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_player_settlement::set_has_check() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_player_settlement::clear_has_check() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_player_settlement::clear_check() {
  check_ = false;
  clear_has_check();
}
inline bool msg_player_settlement::check() const {
  return check_;
}
inline void msg_player_settlement::set_check(bool value) {
  set_has_check();
  check_ = value;
}

// repeated int32 can_check_player = 5;
inline int msg_player_settlement::can_check_player_size() const {
  return can_check_player_.size();
}
inline void msg_player_settlement::clear_can_check_player() {
  can_check_player_.Clear();
}
inline ::google::protobuf::int32 msg_player_settlement::can_check_player(int index) const {
  return can_check_player_.Get(index);
}
inline void msg_player_settlement::set_can_check_player(int index, ::google::protobuf::int32 value) {
  can_check_player_.Set(index, value);
}
inline void msg_player_settlement::add_can_check_player(::google::protobuf::int32 value) {
  can_check_player_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_player_settlement::can_check_player() const {
  return can_check_player_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_player_settlement::mutable_can_check_player() {
  return &can_check_player_;
}

// optional int32 card_type = 6;
inline bool msg_player_settlement::has_card_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_player_settlement::set_has_card_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_player_settlement::clear_has_card_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_player_settlement::clear_card_type() {
  card_type_ = 0;
  clear_has_card_type();
}
inline ::google::protobuf::int32 msg_player_settlement::card_type() const {
  return card_type_;
}
inline void msg_player_settlement::set_card_type(::google::protobuf::int32 value) {
  set_has_card_type();
  card_type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_zhajinhua_protocols

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_zhajinhua_protocols::e_server_msg_type>() {
  return ::game_zhajinhua_protocols::e_server_msg_type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_zhajinhua_protocols::e_table_state>() {
  return ::game_zhajinhua_protocols::e_table_state_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_zhajinhua_protocols::e_seat_state>() {
  return ::game_zhajinhua_protocols::e_seat_state_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_zhajinhua_protocols::e_player_declare>() {
  return ::game_zhajinhua_protocols::e_player_declare_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fzhajinhua_5fdef_2eproto__INCLUDED
