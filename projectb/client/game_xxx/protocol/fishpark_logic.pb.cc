// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fishpark_logic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fishpark_logic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fishpark_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2l_get_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_seat_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_seat_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_scene_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_scene_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_change_seat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_change_seat_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_change_rate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_change_rate_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_change_seat_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_change_seat_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_enter_seat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_enter_seat_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_leave_seat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_leave_seat_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_robot_enter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_robot_enter_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_robot_leave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_robot_leave_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_change_rate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_change_rate_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_change_attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_change_attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fish_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fish_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_create_fish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_create_fish_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_create_generator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_create_generator_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_manual_fire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_manual_fire_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_manual_fire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_manual_fire_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_hit_fish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_hit_fish_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_hit_fishs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_hit_fishs_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_fish_die_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_fish_die_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_specialfish_die_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_specialfish_die_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_fishs_die_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_fishs_die_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_change_scene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_change_scene_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_freeze_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_freeze_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_change_scene_bg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_change_scene_bg_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_scene_time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_scene_time_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_hit_fishs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_hit_fishs_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_turret_rotate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_turret_rotate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fishpark_5flogic_2eproto() {
  protobuf_AddDesc_fishpark_5flogic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fishpark_logic.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2l_get_scene_info_descriptor_ = file->message_type(0);
  static const int packetc2l_get_scene_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_scene_info, packet_id_),
  };
  packetc2l_get_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_scene_info_descriptor_,
      packetc2l_get_scene_info::default_instance_,
      packetc2l_get_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_scene_info));
  msg_scene_info_descriptor_ = file->message_type(1);
  static const int msg_scene_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, seat_info_),
  };
  msg_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_scene_info_descriptor_,
      msg_scene_info::default_instance_,
      msg_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_scene_info));
  msg_seat_info_descriptor_ = file->message_type(2);
  static const int msg_seat_info_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, seat_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, player_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, turret_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, turret_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, photo_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, icon_custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, player_ticket_),
  };
  msg_seat_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_seat_info_descriptor_,
      msg_seat_info::default_instance_,
      msg_seat_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_seat_info));
  packetl2c_get_scene_info_result_descriptor_ = file->message_type(3);
  static const int packetl2c_get_scene_info_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_scene_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_scene_info_result, scene_info_),
  };
  packetl2c_get_scene_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_scene_info_result_descriptor_,
      packetl2c_get_scene_info_result::default_instance_,
      packetl2c_get_scene_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_scene_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_scene_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_scene_info_result));
  packetc2l_change_seat_descriptor_ = file->message_type(4);
  static const int packetc2l_change_seat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_change_seat, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_change_seat, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_change_seat, seat_index_),
  };
  packetc2l_change_seat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_change_seat_descriptor_,
      packetc2l_change_seat::default_instance_,
      packetc2l_change_seat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_change_seat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_change_seat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_change_seat));
  packetc2l_change_rate_descriptor_ = file->message_type(5);
  static const int packetc2l_change_rate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_change_rate, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_change_rate, turret_rate_),
  };
  packetc2l_change_rate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_change_rate_descriptor_,
      packetc2l_change_rate::default_instance_,
      packetc2l_change_rate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_change_rate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_change_rate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_change_rate));
  packetl2c_change_seat_result_descriptor_ = file->message_type(6);
  static const int packetl2c_change_seat_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_change_seat_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_change_seat_result, result_),
  };
  packetl2c_change_seat_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_change_seat_result_descriptor_,
      packetl2c_change_seat_result::default_instance_,
      packetl2c_change_seat_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_change_seat_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_change_seat_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_change_seat_result));
  packetl2c_bc_enter_seat_descriptor_ = file->message_type(7);
  static const int packetl2c_bc_enter_seat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_enter_seat, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_enter_seat, seat_info_),
  };
  packetl2c_bc_enter_seat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_enter_seat_descriptor_,
      packetl2c_bc_enter_seat::default_instance_,
      packetl2c_bc_enter_seat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_enter_seat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_enter_seat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_enter_seat));
  packetl2c_bc_leave_seat_descriptor_ = file->message_type(8);
  static const int packetl2c_bc_leave_seat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_leave_seat, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_leave_seat, player_id_),
  };
  packetl2c_bc_leave_seat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_leave_seat_descriptor_,
      packetl2c_bc_leave_seat::default_instance_,
      packetl2c_bc_leave_seat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_leave_seat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_leave_seat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_leave_seat));
  packetl2c_robot_enter_descriptor_ = file->message_type(9);
  static const int packetl2c_robot_enter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_robot_enter, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_robot_enter, seat_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_robot_enter, scene_id_),
  };
  packetl2c_robot_enter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_robot_enter_descriptor_,
      packetl2c_robot_enter::default_instance_,
      packetl2c_robot_enter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_robot_enter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_robot_enter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_robot_enter));
  packetl2c_robot_leave_descriptor_ = file->message_type(10);
  static const int packetl2c_robot_leave_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_robot_leave, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_robot_leave, player_id_),
  };
  packetl2c_robot_leave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_robot_leave_descriptor_,
      packetl2c_robot_leave::default_instance_,
      packetl2c_robot_leave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_robot_leave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_robot_leave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_robot_leave));
  packetl2c_bc_change_rate_descriptor_ = file->message_type(11);
  static const int packetl2c_bc_change_rate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_rate, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_rate, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_rate, turret_rate_),
  };
  packetl2c_bc_change_rate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_change_rate_descriptor_,
      packetl2c_bc_change_rate::default_instance_,
      packetl2c_bc_change_rate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_rate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_rate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_change_rate));
  packetl2c_bc_change_attr_descriptor_ = file->message_type(12);
  static const int packetl2c_bc_change_attr_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, change_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, change_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, change_ticket_),
  };
  packetl2c_bc_change_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_change_attr_descriptor_,
      packetl2c_bc_change_attr::default_instance_,
      packetl2c_bc_change_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_change_attr));
  msg_fish_info_descriptor_ = file->message_type(13);
  static const int msg_fish_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fish_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fish_info, fish_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fish_info, route_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fish_info, is_camouflage_),
  };
  msg_fish_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fish_info_descriptor_,
      msg_fish_info::default_instance_,
      msg_fish_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fish_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fish_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fish_info));
  packetl2c_bc_create_fish_descriptor_ = file->message_type(14);
  static const int packetl2c_bc_create_fish_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_fish, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_fish, fish_info_),
  };
  packetl2c_bc_create_fish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_create_fish_descriptor_,
      packetl2c_bc_create_fish::default_instance_,
      packetl2c_bc_create_fish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_fish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_fish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_create_fish));
  packetl2c_bc_create_generator_descriptor_ = file->message_type(15);
  static const int packetl2c_bc_create_generator_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_generator, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_generator, generator_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_generator, start_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_generator, route_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_generator, is_red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_generator, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_generator, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_generator, is_flash_),
  };
  packetl2c_bc_create_generator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_create_generator_descriptor_,
      packetl2c_bc_create_generator::default_instance_,
      packetl2c_bc_create_generator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_generator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_generator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_create_generator));
  packetc2l_manual_fire_descriptor_ = file->message_type(16);
  static const int packetc2l_manual_fire_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_manual_fire, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_manual_fire, bullet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_manual_fire, bullet_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_manual_fire, bullet_rate_),
  };
  packetc2l_manual_fire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_manual_fire_descriptor_,
      packetc2l_manual_fire::default_instance_,
      packetc2l_manual_fire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_manual_fire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_manual_fire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_manual_fire));
  packetl2c_bc_manual_fire_descriptor_ = file->message_type(17);
  static const int packetl2c_bc_manual_fire_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_manual_fire, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_manual_fire, bullet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_manual_fire, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_manual_fire, bullet_angle_),
  };
  packetl2c_bc_manual_fire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_manual_fire_descriptor_,
      packetl2c_bc_manual_fire::default_instance_,
      packetl2c_bc_manual_fire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_manual_fire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_manual_fire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_manual_fire));
  packetc2l_hit_fish_descriptor_ = file->message_type(18);
  static const int packetc2l_hit_fish_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fish, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fish, bullet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fish, fish_id_),
  };
  packetc2l_hit_fish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_hit_fish_descriptor_,
      packetc2l_hit_fish::default_instance_,
      packetc2l_hit_fish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_hit_fish));
  packetc2l_hit_fishs_descriptor_ = file->message_type(19);
  static const int packetc2l_hit_fishs_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fishs, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fishs, hit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fishs, bullet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fishs, fish_ids_),
  };
  packetc2l_hit_fishs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_hit_fishs_descriptor_,
      packetc2l_hit_fishs::default_instance_,
      packetc2l_hit_fishs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fishs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fishs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_hit_fishs));
  packetl2c_bc_fish_die_descriptor_ = file->message_type(20);
  static const int packetl2c_bc_fish_die_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fish_die, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fish_die, fish_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fish_die, kill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fish_die, base_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fish_die, add_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fish_die, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fish_die, getstar_),
  };
  packetl2c_bc_fish_die_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_fish_die_descriptor_,
      packetl2c_bc_fish_die::default_instance_,
      packetl2c_bc_fish_die_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fish_die, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fish_die, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_fish_die));
  packetl2c_bc_specialfish_die_descriptor_ = file->message_type(21);
  static const int packetl2c_bc_specialfish_die_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_specialfish_die, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_specialfish_die, fish_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_specialfish_die, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_specialfish_die, bullet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_specialfish_die, base_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_specialfish_die, add_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_specialfish_die, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_specialfish_die, getstar_),
  };
  packetl2c_bc_specialfish_die_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_specialfish_die_descriptor_,
      packetl2c_bc_specialfish_die::default_instance_,
      packetl2c_bc_specialfish_die_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_specialfish_die, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_specialfish_die, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_specialfish_die));
  packetl2c_bc_fishs_die_descriptor_ = file->message_type(22);
  static const int packetl2c_bc_fishs_die_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fishs_die, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fishs_die, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fishs_die, die_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fishs_die, die_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fishs_die, total_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fishs_die, base_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fishs_die, add_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fishs_die, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fishs_die, getstar_),
  };
  packetl2c_bc_fishs_die_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_fishs_die_descriptor_,
      packetl2c_bc_fishs_die::default_instance_,
      packetl2c_bc_fishs_die_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fishs_die, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fishs_die, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_fishs_die));
  packetl2c_bc_change_scene_descriptor_ = file->message_type(23);
  static const int packetl2c_bc_change_scene_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_scene, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_scene, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_scene, large_fish_id_),
  };
  packetl2c_bc_change_scene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_change_scene_descriptor_,
      packetl2c_bc_change_scene::default_instance_,
      packetl2c_bc_change_scene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_scene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_scene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_change_scene));
  packetl2c_bc_freeze_descriptor_ = file->message_type(24);
  static const int packetl2c_bc_freeze_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_freeze, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_freeze, freeze_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_freeze, is_show_),
  };
  packetl2c_bc_freeze_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_freeze_descriptor_,
      packetl2c_bc_freeze::default_instance_,
      packetl2c_bc_freeze_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_freeze, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_freeze, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_freeze));
  packetl2c_bc_change_scene_bg_descriptor_ = file->message_type(25);
  static const int packetl2c_bc_change_scene_bg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_scene_bg, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_scene_bg, scene_id_),
  };
  packetl2c_bc_change_scene_bg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_change_scene_bg_descriptor_,
      packetl2c_bc_change_scene_bg::default_instance_,
      packetl2c_bc_change_scene_bg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_scene_bg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_scene_bg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_change_scene_bg));
  packetl2c_bc_scene_time_descriptor_ = file->message_type(26);
  static const int packetl2c_bc_scene_time_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_time, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_time, scene_time_),
  };
  packetl2c_bc_scene_time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_scene_time_descriptor_,
      packetl2c_bc_scene_time::default_instance_,
      packetl2c_bc_scene_time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_time, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_scene_time));
  packetl2c_bc_hit_fishs_descriptor_ = file->message_type(27);
  static const int packetl2c_bc_hit_fishs_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_hit_fishs, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_hit_fishs, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_hit_fishs, hit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_hit_fishs, fish_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_hit_fishs, params_),
  };
  packetl2c_bc_hit_fishs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_hit_fishs_descriptor_,
      packetl2c_bc_hit_fishs::default_instance_,
      packetl2c_bc_hit_fishs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_hit_fishs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_hit_fishs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_hit_fishs));
  packetl2c_bc_turret_rotate_descriptor_ = file->message_type(28);
  static const int packetl2c_bc_turret_rotate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_turret_rotate, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_turret_rotate, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_turret_rotate, rotate_angle_),
  };
  packetl2c_bc_turret_rotate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_turret_rotate_descriptor_,
      packetl2c_bc_turret_rotate::default_instance_,
      packetl2c_bc_turret_rotate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_turret_rotate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_turret_rotate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_turret_rotate));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fishpark_5flogic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_scene_info_descriptor_, &packetc2l_get_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_scene_info_descriptor_, &msg_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_seat_info_descriptor_, &msg_seat_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_scene_info_result_descriptor_, &packetl2c_get_scene_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_change_seat_descriptor_, &packetc2l_change_seat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_change_rate_descriptor_, &packetc2l_change_rate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_change_seat_result_descriptor_, &packetl2c_change_seat_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_enter_seat_descriptor_, &packetl2c_bc_enter_seat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_leave_seat_descriptor_, &packetl2c_bc_leave_seat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_robot_enter_descriptor_, &packetl2c_robot_enter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_robot_leave_descriptor_, &packetl2c_robot_leave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_change_rate_descriptor_, &packetl2c_bc_change_rate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_change_attr_descriptor_, &packetl2c_bc_change_attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fish_info_descriptor_, &msg_fish_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_create_fish_descriptor_, &packetl2c_bc_create_fish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_create_generator_descriptor_, &packetl2c_bc_create_generator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_manual_fire_descriptor_, &packetc2l_manual_fire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_manual_fire_descriptor_, &packetl2c_bc_manual_fire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_hit_fish_descriptor_, &packetc2l_hit_fish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_hit_fishs_descriptor_, &packetc2l_hit_fishs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_fish_die_descriptor_, &packetl2c_bc_fish_die::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_specialfish_die_descriptor_, &packetl2c_bc_specialfish_die::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_fishs_die_descriptor_, &packetl2c_bc_fishs_die::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_change_scene_descriptor_, &packetl2c_bc_change_scene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_freeze_descriptor_, &packetl2c_bc_freeze::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_change_scene_bg_descriptor_, &packetl2c_bc_change_scene_bg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_scene_time_descriptor_, &packetl2c_bc_scene_time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_hit_fishs_descriptor_, &packetl2c_bc_hit_fishs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_turret_rotate_descriptor_, &packetl2c_bc_turret_rotate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fishpark_5flogic_2eproto() {
  delete packetc2l_get_scene_info::default_instance_;
  delete packetc2l_get_scene_info_reflection_;
  delete msg_scene_info::default_instance_;
  delete msg_scene_info_reflection_;
  delete msg_seat_info::default_instance_;
  delete msg_seat_info_reflection_;
  delete packetl2c_get_scene_info_result::default_instance_;
  delete packetl2c_get_scene_info_result_reflection_;
  delete packetc2l_change_seat::default_instance_;
  delete packetc2l_change_seat_reflection_;
  delete packetc2l_change_rate::default_instance_;
  delete packetc2l_change_rate_reflection_;
  delete packetl2c_change_seat_result::default_instance_;
  delete packetl2c_change_seat_result_reflection_;
  delete packetl2c_bc_enter_seat::default_instance_;
  delete packetl2c_bc_enter_seat_reflection_;
  delete packetl2c_bc_leave_seat::default_instance_;
  delete packetl2c_bc_leave_seat_reflection_;
  delete packetl2c_robot_enter::default_instance_;
  delete packetl2c_robot_enter_reflection_;
  delete packetl2c_robot_leave::default_instance_;
  delete packetl2c_robot_leave_reflection_;
  delete packetl2c_bc_change_rate::default_instance_;
  delete packetl2c_bc_change_rate_reflection_;
  delete packetl2c_bc_change_attr::default_instance_;
  delete packetl2c_bc_change_attr_reflection_;
  delete msg_fish_info::default_instance_;
  delete msg_fish_info_reflection_;
  delete packetl2c_bc_create_fish::default_instance_;
  delete packetl2c_bc_create_fish_reflection_;
  delete packetl2c_bc_create_generator::default_instance_;
  delete packetl2c_bc_create_generator_reflection_;
  delete packetc2l_manual_fire::default_instance_;
  delete packetc2l_manual_fire_reflection_;
  delete packetl2c_bc_manual_fire::default_instance_;
  delete packetl2c_bc_manual_fire_reflection_;
  delete packetc2l_hit_fish::default_instance_;
  delete packetc2l_hit_fish_reflection_;
  delete packetc2l_hit_fishs::default_instance_;
  delete packetc2l_hit_fishs_reflection_;
  delete packetl2c_bc_fish_die::default_instance_;
  delete packetl2c_bc_fish_die_reflection_;
  delete packetl2c_bc_specialfish_die::default_instance_;
  delete packetl2c_bc_specialfish_die_reflection_;
  delete packetl2c_bc_fishs_die::default_instance_;
  delete packetl2c_bc_fishs_die_reflection_;
  delete packetl2c_bc_change_scene::default_instance_;
  delete packetl2c_bc_change_scene_reflection_;
  delete packetl2c_bc_freeze::default_instance_;
  delete packetl2c_bc_freeze_reflection_;
  delete packetl2c_bc_change_scene_bg::default_instance_;
  delete packetl2c_bc_change_scene_bg_reflection_;
  delete packetl2c_bc_scene_time::default_instance_;
  delete packetl2c_bc_scene_time_reflection_;
  delete packetl2c_bc_hit_fishs::default_instance_;
  delete packetl2c_bc_hit_fishs_reflection_;
  delete packetl2c_bc_turret_rotate::default_instance_;
  delete packetl2c_bc_turret_rotate_reflection_;
}

void protobuf_AddDesc_fishpark_5flogic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::fishpark_protocols::protobuf_AddDesc_fishpark_5fdef_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024fishpark_logic.proto\022\022fishpark_protoco"
    "ls\032\022fishpark_def.proto\032\022msg_type_def.pro"
    "to\"n\n\030packetc2l_get_scene_info\022R\n\tpacket"
    "_id\030\001 \001(\0162%.fishpark_protocols.e_server_"
    "msg_type:\030e_mst_c2l_get_scene_info\"g\n\016ms"
    "g_scene_info\022\017\n\007sceneid\030\001 \001(\005\022\016\n\006roomid\030"
    "\002 \001(\005\0224\n\tseat_info\030\003 \003(\0132!.fishpark_prot"
    "ocols.msg_seat_info\"\340\001\n\rmsg_seat_info\022\022\n"
    "\nseat_index\030\001 \001(\005\022\021\n\tplayer_id\030\002 \001(\005\022\020\n\010"
    "nickname\030\003 \001(\t\022\023\n\013player_gold\030\004 \001(\005\022\023\n\013t"
    "urret_rate\030\005 \001(\005\022\021\n\tturret_id\030\006 \001(\005\022\023\n\013p"
    "hoto_frame\030\007 \001(\005\022\023\n\013icon_custom\030\010 \001(\t\022\013\n"
    "\003sex\030\t \001(\005\022\013\n\003vip\030\n \001(\005\022\025\n\rplayer_ticket"
    "\030\013 \001(\005\"\264\001\n\037packetl2c_get_scene_info_resu"
    "lt\022Y\n\tpacket_id\030\001 \001(\0162%.fishpark_protoco"
    "ls.e_server_msg_type:\037e_mst_l2c_get_scen"
    "e_info_result\0226\n\nscene_info\030\002 \001(\0132\".fish"
    "park_protocols.msg_scene_info\"\217\001\n\025packet"
    "c2l_change_seat\022O\n\tpacket_id\030\001 \001(\0162%.fis"
    "hpark_protocols.e_server_msg_type:\025e_mst"
    "_c2l_change_seat\022\021\n\tplayer_id\030\002 \001(\005\022\022\n\ns"
    "eat_index\030\003 \001(\005\"}\n\025packetc2l_change_rate"
    "\022O\n\tpacket_id\030\001 \001(\0162%.fishpark_protocols"
    ".e_server_msg_type:\025e_mst_c2l_change_rat"
    "e\022\023\n\013turret_rate\030\002 \001(\005\"\262\001\n\034packetl2c_cha"
    "nge_seat_result\022V\n\tpacket_id\030\001 \001(\0162%.fis"
    "hpark_protocols.e_server_msg_type:\034e_mst"
    "_l2c_change_seat_result\022:\n\006result\030\002 \001(\0162"
    "\036.msg_type_def.e_msg_result_def:\ne_rmt_f"
    "ail\"\242\001\n\027packetl2c_bc_enter_seat\022Q\n\tpacke"
    "t_id\030\001 \001(\0162%.fishpark_protocols.e_server"
    "_msg_type:\027e_mst_l2c_bc_enter_seat\0224\n\tse"
    "at_info\030\002 \001(\0132!.fishpark_protocols.msg_s"
    "eat_info\"\177\n\027packetl2c_bc_leave_seat\022Q\n\tp"
    "acket_id\030\001 \001(\0162%.fishpark_protocols.e_se"
    "rver_msg_type:\027e_mst_l2c_bc_leave_seat\022\021"
    "\n\tplayer_id\030\002 \001(\005\"\260\001\n\025packetl2c_robot_en"
    "ter\022O\n\tpacket_id\030\001 \001(\0162%.fishpark_protoc"
    "ols.e_server_msg_type:\025e_mst_c2l_robot_e"
    "nter\0224\n\tseat_info\030\002 \001(\0132!.fishpark_proto"
    "cols.msg_seat_info\022\020\n\010scene_id\030\003 \001(\005\"{\n\025"
    "packetl2c_robot_leave\022O\n\tpacket_id\030\001 \001(\016"
    "2%.fishpark_protocols.e_server_msg_type:"
    "\025e_mst_l2c_robot_leave\022\021\n\tplayer_id\030\002 \001("
    "\005\"\226\001\n\030packetl2c_bc_change_rate\022R\n\tpacket"
    "_id\030\001 \001(\0162%.fishpark_protocols.e_server_"
    "msg_type:\030e_mst_l2c_bc_change_rate\022\021\n\tpl"
    "ayer_id\030\002 \001(\005\022\023\n\013turret_rate\030\003 \001(\005\"\301\001\n\030p"
    "acketl2c_bc_change_attr\022R\n\tpacket_id\030\001 \001"
    "(\0162%.fishpark_protocols.e_server_msg_typ"
    "e:\030e_mst_l2c_bc_change_attr\022\021\n\tplayer_id"
    "\030\002 \001(\005\022\023\n\013change_gold\030\003 \001(\005\022\022\n\nchange_vi"
    "p\030\004 \001(\005\022\025\n\rchange_ticket\030\005 \001(\005\"\\\n\rmsg_fi"
    "sh_info\022\n\n\002id\030\001 \001(\005\022\017\n\007fish_id\030\002 \001(\005\022\020\n\010"
    "route_id\030\003 \001(\005\022\034\n\ris_camouflage\030\004 \001(\010:\005f"
    "alse\"\244\001\n\030packetl2c_bc_create_fish\022R\n\tpac"
    "ket_id\030\001 \001(\0162%.fishpark_protocols.e_serv"
    "er_msg_type:\030e_mst_l2c_bc_create_fish\0224\n"
    "\tfish_info\030\002 \001(\0132!.fishpark_protocols.ms"
    "g_fish_info\"\203\002\n\035packetl2c_bc_create_gene"
    "rator\022W\n\tpacket_id\030\001 \001(\0162%.fishpark_prot"
    "ocols.e_server_msg_type:\035e_mst_l2c_bc_cr"
    "eate_generator\022\024\n\014generator_id\030\002 \001(\005\022\020\n\010"
    "start_id\030\003 \001(\005\022\023\n\010route_id\030\004 \001(\005:\0010\022\025\n\006i"
    "s_red\030\005 \001(\010:\005false\022\r\n\005pos_x\030\006 \001(\005\022\r\n\005pos"
    "_y\030\007 \001(\005\022\027\n\010is_flash\030\010 \001(\010:\005false\"\246\001\n\025pa"
    "cketc2l_manual_fire\022O\n\tpacket_id\030\001 \001(\0162%"
    ".fishpark_protocols.e_server_msg_type:\025e"
    "_mst_c2l_manual_fire\022\021\n\tbullet_id\030\002 \001(\005\022"
    "\024\n\014bullet_angle\030\003 \001(\005\022\023\n\013bullet_rate\030\004 \001"
    "(\005\"\252\001\n\030packetl2c_bc_manual_fire\022R\n\tpacke"
    "t_id\030\001 \001(\0162%.fishpark_protocols.e_server"
    "_msg_type:\030e_mst_l2c_bc_manual_fire\022\021\n\tb"
    "ullet_id\030\002 \001(\005\022\021\n\tplayer_id\030\003 \001(\005\022\024\n\014bul"
    "let_angle\030\004 \001(\005\"\206\001\n\022packetc2l_hit_fish\022L"
    "\n\tpacket_id\030\001 \001(\0162%.fishpark_protocols.e"
    "_server_msg_type:\022e_mst_c2l_hit_fish\022\021\n\t"
    "bullet_id\030\003 \001(\005\022\017\n\007fish_id\030\004 \001(\005\"\233\001\n\023pac"
    "ketc2l_hit_fishs\022M\n\tpacket_id\030\001 \001(\0162%.fi"
    "shpark_protocols.e_server_msg_type:\023e_ms"
    "t_c2l_hit_fishs\022\020\n\010hit_type\030\002 \001(\005\022\021\n\tbul"
    "let_id\030\003 \001(\005\022\020\n\010fish_ids\030\004 \003(\005\"\337\001\n\025packe"
    "tl2c_bc_fish_die\022O\n\tpacket_id\030\001 \001(\0162%.fi"
    "shpark_protocols.e_server_msg_type:\025e_ms"
    "t_l2c_bc_fish_die\022\017\n\007fish_id\030\002 \001(\005\022\017\n\007ki"
    "ll_id\030\003 \001(\005\022\022\n\nbase_score\030\004 \001(\005\022\024\n\tadd_s"
    "core\030\005 \001(\005:\0010\022\021\n\006ticket\030\006 \001(\005:\0010\022\026\n\007gets"
    "tar\030\007 \001(\010:\005false\"\202\002\n\034packetl2c_bc_specia"
    "lfish_die\022V\n\tpacket_id\030\001 \001(\0162%.fishpark_"
    "protocols.e_server_msg_type:\034e_mst_l2c_b"
    "c_specialfish_die\022\017\n\007fish_id\030\002 \001(\005\022\021\n\tpl"
    "ayer_id\030\003 \001(\005\022\021\n\tbullet_id\030\004 \001(\005\022\022\n\nbase"
    "_score\030\005 \001(\005\022\024\n\tadd_score\030\006 \001(\005:\0010\022\021\n\006ti"
    "cket\030\007 \001(\005:\0010\022\026\n\007getstar\030\010 \001(\010:\005false\"\213\002"
    "\n\026packetl2c_bc_fishs_die\022P\n\tpacket_id\030\001 "
    "\001(\0162%.fishpark_protocols.e_server_msg_ty"
    "pe:\026e_mst_l2c_bc_fishs_die\022\021\n\tplayer_id\030"
    "\002 \001(\005\022\020\n\010die_type\030\003 \001(\005\022\022\n\ndie_params\030\004 "
    "\003(\005\022\023\n\013total_score\030\005 \001(\005\022\021\n\tbase_rate\030\006 "
    "\001(\005\022\023\n\010add_rate\030\007 \001(\005:\0010\022\021\n\006ticket\030\010 \001(\005"
    ":\0010\022\026\n\007getstar\030\t \001(\010:\005false\"\231\001\n\031packetl2"
    "c_bc_change_scene\022S\n\tpacket_id\030\001 \001(\0162%.f"
    "ishpark_protocols.e_server_msg_type:\031e_m"
    "st_l2c_bc_change_scene\022\020\n\010scene_id\030\002 \001(\005"
    "\022\025\n\rlarge_fish_id\030\003 \001(\005\"\212\001\n\023packetl2c_bc"
    "_freeze\022M\n\tpacket_id\030\001 \001(\0162%.fishpark_pr"
    "otocols.e_server_msg_type:\023e_mst_l2c_bc_"
    "freeze\022\023\n\013freeze_Time\030\002 \001(\005\022\017\n\007is_show\030\003"
    " \001(\010\"\210\001\n\034packetl2c_bc_change_scene_bg\022V\n"
    "\tpacket_id\030\001 \001(\0162%.fishpark_protocols.e_"
    "server_msg_type:\034e_mst_l2c_bc_change_sce"
    "ne_bg\022\020\n\010scene_id\030\002 \001(\005\"\200\001\n\027packetl2c_bc"
    "_scene_time\022Q\n\tpacket_id\030\001 \001(\0162%.fishpar"
    "k_protocols.e_server_msg_type:\027e_mst_l2c"
    "_bc_scene_time\022\022\n\nscene_time\030\002 \001(\005\"\261\001\n\026p"
    "acketl2c_bc_hit_fishs\022P\n\tpacket_id\030\001 \001(\016"
    "2%.fishpark_protocols.e_server_msg_type:"
    "\026e_mst_l2c_bc_hit_fishs\022\021\n\tplayer_id\030\002 \001"
    "(\005\022\020\n\010hit_type\030\003 \001(\005\022\020\n\010fish_ids\030\004 \003(\005\022\016"
    "\n\006params\030\005 \003(\005\"\233\001\n\032packetl2c_bc_turret_r"
    "otate\022T\n\tpacket_id\030\001 \001(\0162%.fishpark_prot"
    "ocols.e_server_msg_type:\032e_mst_l2c_bc_tu"
    "rret_rotate\022\021\n\tplayer_id\030\002 \001(\005\022\024\n\014rotate"
    "_angle\030\003 \001(\005", 4932);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fishpark_logic.proto", &protobuf_RegisterTypes);
  packetc2l_get_scene_info::default_instance_ = new packetc2l_get_scene_info();
  msg_scene_info::default_instance_ = new msg_scene_info();
  msg_seat_info::default_instance_ = new msg_seat_info();
  packetl2c_get_scene_info_result::default_instance_ = new packetl2c_get_scene_info_result();
  packetc2l_change_seat::default_instance_ = new packetc2l_change_seat();
  packetc2l_change_rate::default_instance_ = new packetc2l_change_rate();
  packetl2c_change_seat_result::default_instance_ = new packetl2c_change_seat_result();
  packetl2c_bc_enter_seat::default_instance_ = new packetl2c_bc_enter_seat();
  packetl2c_bc_leave_seat::default_instance_ = new packetl2c_bc_leave_seat();
  packetl2c_robot_enter::default_instance_ = new packetl2c_robot_enter();
  packetl2c_robot_leave::default_instance_ = new packetl2c_robot_leave();
  packetl2c_bc_change_rate::default_instance_ = new packetl2c_bc_change_rate();
  packetl2c_bc_change_attr::default_instance_ = new packetl2c_bc_change_attr();
  msg_fish_info::default_instance_ = new msg_fish_info();
  packetl2c_bc_create_fish::default_instance_ = new packetl2c_bc_create_fish();
  packetl2c_bc_create_generator::default_instance_ = new packetl2c_bc_create_generator();
  packetc2l_manual_fire::default_instance_ = new packetc2l_manual_fire();
  packetl2c_bc_manual_fire::default_instance_ = new packetl2c_bc_manual_fire();
  packetc2l_hit_fish::default_instance_ = new packetc2l_hit_fish();
  packetc2l_hit_fishs::default_instance_ = new packetc2l_hit_fishs();
  packetl2c_bc_fish_die::default_instance_ = new packetl2c_bc_fish_die();
  packetl2c_bc_specialfish_die::default_instance_ = new packetl2c_bc_specialfish_die();
  packetl2c_bc_fishs_die::default_instance_ = new packetl2c_bc_fishs_die();
  packetl2c_bc_change_scene::default_instance_ = new packetl2c_bc_change_scene();
  packetl2c_bc_freeze::default_instance_ = new packetl2c_bc_freeze();
  packetl2c_bc_change_scene_bg::default_instance_ = new packetl2c_bc_change_scene_bg();
  packetl2c_bc_scene_time::default_instance_ = new packetl2c_bc_scene_time();
  packetl2c_bc_hit_fishs::default_instance_ = new packetl2c_bc_hit_fishs();
  packetl2c_bc_turret_rotate::default_instance_ = new packetl2c_bc_turret_rotate();
  packetc2l_get_scene_info::default_instance_->InitAsDefaultInstance();
  msg_scene_info::default_instance_->InitAsDefaultInstance();
  msg_seat_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_scene_info_result::default_instance_->InitAsDefaultInstance();
  packetc2l_change_seat::default_instance_->InitAsDefaultInstance();
  packetc2l_change_rate::default_instance_->InitAsDefaultInstance();
  packetl2c_change_seat_result::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_enter_seat::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_leave_seat::default_instance_->InitAsDefaultInstance();
  packetl2c_robot_enter::default_instance_->InitAsDefaultInstance();
  packetl2c_robot_leave::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_change_rate::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_change_attr::default_instance_->InitAsDefaultInstance();
  msg_fish_info::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_create_fish::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_create_generator::default_instance_->InitAsDefaultInstance();
  packetc2l_manual_fire::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_manual_fire::default_instance_->InitAsDefaultInstance();
  packetc2l_hit_fish::default_instance_->InitAsDefaultInstance();
  packetc2l_hit_fishs::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_fish_die::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_specialfish_die::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_fishs_die::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_change_scene::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_freeze::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_change_scene_bg::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_scene_time::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_hit_fishs::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_turret_rotate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fishpark_5flogic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fishpark_5flogic_2eproto {
  StaticDescriptorInitializer_fishpark_5flogic_2eproto() {
    protobuf_AddDesc_fishpark_5flogic_2eproto();
  }
} static_descriptor_initializer_fishpark_5flogic_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_scene_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_scene_info::packetc2l_get_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_scene_info::InitAsDefaultInstance() {
}

packetc2l_get_scene_info::packetc2l_get_scene_info(const packetc2l_get_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_scene_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10100;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_scene_info::~packetc2l_get_scene_info() {
  SharedDtor();
}

void packetc2l_get_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_scene_info_descriptor_;
}

const packetc2l_get_scene_info& packetc2l_get_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_get_scene_info* packetc2l_get_scene_info::default_instance_ = NULL;

packetc2l_get_scene_info* packetc2l_get_scene_info::New() const {
  return new packetc2l_get_scene_info;
}

void packetc2l_get_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10100;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_scene_info::MergeFrom(const packetc2l_get_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_scene_info::CopyFrom(const packetc2l_get_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_scene_info::IsInitialized() const {

  return true;
}

void packetc2l_get_scene_info::Swap(packetc2l_get_scene_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_scene_info_descriptor_;
  metadata.reflection = packetc2l_get_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_scene_info::kSceneidFieldNumber;
const int msg_scene_info::kRoomidFieldNumber;
const int msg_scene_info::kSeatInfoFieldNumber;
#endif  // !_MSC_VER

msg_scene_info::msg_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_scene_info::InitAsDefaultInstance() {
}

msg_scene_info::msg_scene_info(const msg_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_scene_info::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_scene_info::~msg_scene_info() {
  SharedDtor();
}

void msg_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_scene_info_descriptor_;
}

const msg_scene_info& msg_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

msg_scene_info* msg_scene_info::default_instance_ = NULL;

msg_scene_info* msg_scene_info::New() const {
  return new msg_scene_info;
}

void msg_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0;
    roomid_ = 0;
  }
  seat_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sceneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional int32 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_seat_info;
        break;
      }

      // repeated .fishpark_protocols.msg_seat_info seat_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seat_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seat_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_seat_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sceneid = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneid(), output);
  }

  // optional int32 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // repeated .fishpark_protocols.msg_seat_info seat_info = 3;
  for (int i = 0; i < this->seat_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->seat_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sceneid = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneid(), target);
  }

  // optional int32 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // repeated .fishpark_protocols.msg_seat_info seat_info = 3;
  for (int i = 0; i < this->seat_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->seat_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sceneid = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

    // optional int32 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  // repeated .fishpark_protocols.msg_seat_info seat_info = 3;
  total_size += 1 * this->seat_info_size();
  for (int i = 0; i < this->seat_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seat_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_scene_info::MergeFrom(const msg_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  seat_info_.MergeFrom(from.seat_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_scene_info::CopyFrom(const msg_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_scene_info::IsInitialized() const {

  return true;
}

void msg_scene_info::Swap(msg_scene_info* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(roomid_, other->roomid_);
    seat_info_.Swap(&other->seat_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_scene_info_descriptor_;
  metadata.reflection = msg_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_seat_info::kSeatIndexFieldNumber;
const int msg_seat_info::kPlayerIdFieldNumber;
const int msg_seat_info::kNicknameFieldNumber;
const int msg_seat_info::kPlayerGoldFieldNumber;
const int msg_seat_info::kTurretRateFieldNumber;
const int msg_seat_info::kTurretIdFieldNumber;
const int msg_seat_info::kPhotoFrameFieldNumber;
const int msg_seat_info::kIconCustomFieldNumber;
const int msg_seat_info::kSexFieldNumber;
const int msg_seat_info::kVipFieldNumber;
const int msg_seat_info::kPlayerTicketFieldNumber;
#endif  // !_MSC_VER

msg_seat_info::msg_seat_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_seat_info::InitAsDefaultInstance() {
}

msg_seat_info::msg_seat_info(const msg_seat_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_seat_info::SharedCtor() {
  _cached_size_ = 0;
  seat_index_ = 0;
  player_id_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_gold_ = 0;
  turret_rate_ = 0;
  turret_id_ = 0;
  photo_frame_ = 0;
  icon_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  vip_ = 0;
  player_ticket_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_seat_info::~msg_seat_info() {
  SharedDtor();
}

void msg_seat_info::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (icon_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_custom_;
  }
  if (this != default_instance_) {
  }
}

void msg_seat_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_seat_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_seat_info_descriptor_;
}

const msg_seat_info& msg_seat_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

msg_seat_info* msg_seat_info::default_instance_ = NULL;

msg_seat_info* msg_seat_info::New() const {
  return new msg_seat_info;
}

void msg_seat_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_index_ = 0;
    player_id_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    player_gold_ = 0;
    turret_rate_ = 0;
    turret_id_ = 0;
    photo_frame_ = 0;
    if (has_icon_custom()) {
      if (icon_custom_ != &::google::protobuf::internal::kEmptyString) {
        icon_custom_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sex_ = 0;
    vip_ = 0;
    player_ticket_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_seat_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_index_)));
          set_has_seat_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_player_gold;
        break;
      }

      // optional int32 player_gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_turret_rate;
        break;
      }

      // optional int32 turret_rate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turret_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turret_rate_)));
          set_has_turret_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_turret_id;
        break;
      }

      // optional int32 turret_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turret_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turret_id_)));
          set_has_turret_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_photo_frame;
        break;
      }

      // optional int32 photo_frame = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photo_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photo_frame_)));
          set_has_photo_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_icon_custom;
        break;
      }

      // optional string icon_custom = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon_custom().data(), this->icon_custom().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sex;
        break;
      }

      // optional int32 sex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vip;
        break;
      }

      // optional int32 vip = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_player_ticket;
        break;
      }

      // optional int32 player_ticket = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_ticket_)));
          set_has_player_ticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_seat_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_index = 1;
  if (has_seat_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_index(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }

  // optional int32 player_gold = 4;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->player_gold(), output);
  }

  // optional int32 turret_rate = 5;
  if (has_turret_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->turret_rate(), output);
  }

  // optional int32 turret_id = 6;
  if (has_turret_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->turret_id(), output);
  }

  // optional int32 photo_frame = 7;
  if (has_photo_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->photo_frame(), output);
  }

  // optional string icon_custom = 8;
  if (has_icon_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon_custom().data(), this->icon_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->icon_custom(), output);
  }

  // optional int32 sex = 9;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sex(), output);
  }

  // optional int32 vip = 10;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->vip(), output);
  }

  // optional int32 player_ticket = 11;
  if (has_player_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->player_ticket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_seat_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_index = 1;
  if (has_seat_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_index(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional int32 player_gold = 4;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->player_gold(), target);
  }

  // optional int32 turret_rate = 5;
  if (has_turret_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->turret_rate(), target);
  }

  // optional int32 turret_id = 6;
  if (has_turret_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->turret_id(), target);
  }

  // optional int32 photo_frame = 7;
  if (has_photo_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->photo_frame(), target);
  }

  // optional string icon_custom = 8;
  if (has_icon_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon_custom().data(), this->icon_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->icon_custom(), target);
  }

  // optional int32 sex = 9;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sex(), target);
  }

  // optional int32 vip = 10;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->vip(), target);
  }

  // optional int32 player_ticket = 11;
  if (has_player_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->player_ticket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_seat_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_index = 1;
    if (has_seat_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_index());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 player_gold = 4;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_gold());
    }

    // optional int32 turret_rate = 5;
    if (has_turret_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turret_rate());
    }

    // optional int32 turret_id = 6;
    if (has_turret_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turret_id());
    }

    // optional int32 photo_frame = 7;
    if (has_photo_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->photo_frame());
    }

    // optional string icon_custom = 8;
    if (has_icon_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_custom());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 sex = 9;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 vip = 10;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

    // optional int32 player_ticket = 11;
    if (has_player_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_ticket());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_seat_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_seat_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_seat_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_seat_info::MergeFrom(const msg_seat_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_index()) {
      set_seat_index(from.seat_index());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
    if (from.has_turret_rate()) {
      set_turret_rate(from.turret_rate());
    }
    if (from.has_turret_id()) {
      set_turret_id(from.turret_id());
    }
    if (from.has_photo_frame()) {
      set_photo_frame(from.photo_frame());
    }
    if (from.has_icon_custom()) {
      set_icon_custom(from.icon_custom());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_player_ticket()) {
      set_player_ticket(from.player_ticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_seat_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_seat_info::CopyFrom(const msg_seat_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_seat_info::IsInitialized() const {

  return true;
}

void msg_seat_info::Swap(msg_seat_info* other) {
  if (other != this) {
    std::swap(seat_index_, other->seat_index_);
    std::swap(player_id_, other->player_id_);
    std::swap(nickname_, other->nickname_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(turret_rate_, other->turret_rate_);
    std::swap(turret_id_, other->turret_id_);
    std::swap(photo_frame_, other->photo_frame_);
    std::swap(icon_custom_, other->icon_custom_);
    std::swap(sex_, other->sex_);
    std::swap(vip_, other->vip_);
    std::swap(player_ticket_, other->player_ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_seat_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_seat_info_descriptor_;
  metadata.reflection = msg_seat_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_scene_info_result::kPacketIdFieldNumber;
const int packetl2c_get_scene_info_result::kSceneInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_scene_info_result::packetl2c_get_scene_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_get_scene_info_result::InitAsDefaultInstance() {
  scene_info_ = const_cast< ::fishpark_protocols::msg_scene_info*>(&::fishpark_protocols::msg_scene_info::default_instance());
}

packetl2c_get_scene_info_result::packetl2c_get_scene_info_result(const packetl2c_get_scene_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_get_scene_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15100;
  scene_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_scene_info_result::~packetl2c_get_scene_info_result() {
  SharedDtor();
}

void packetl2c_get_scene_info_result::SharedDtor() {
  if (this != default_instance_) {
    delete scene_info_;
  }
}

void packetl2c_get_scene_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_scene_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_scene_info_result_descriptor_;
}

const packetl2c_get_scene_info_result& packetl2c_get_scene_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_get_scene_info_result* packetl2c_get_scene_info_result::default_instance_ = NULL;

packetl2c_get_scene_info_result* packetl2c_get_scene_info_result::New() const {
  return new packetl2c_get_scene_info_result;
}

void packetl2c_get_scene_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15100;
    if (has_scene_info()) {
      if (scene_info_ != NULL) scene_info_->::fishpark_protocols::msg_scene_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_scene_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scene_info;
        break;
      }

      // optional .fishpark_protocols.msg_scene_info scene_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_get_scene_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .fishpark_protocols.msg_scene_info scene_info = 2;
  if (has_scene_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scene_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_get_scene_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .fishpark_protocols.msg_scene_info scene_info = 2;
  if (has_scene_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scene_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_get_scene_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .fishpark_protocols.msg_scene_info scene_info = 2;
    if (has_scene_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scene_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_scene_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_scene_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_scene_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_scene_info_result::MergeFrom(const packetl2c_get_scene_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_scene_info()) {
      mutable_scene_info()->::fishpark_protocols::msg_scene_info::MergeFrom(from.scene_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_scene_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_scene_info_result::CopyFrom(const packetl2c_get_scene_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_scene_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_scene_info_result::Swap(packetl2c_get_scene_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(scene_info_, other->scene_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_scene_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_scene_info_result_descriptor_;
  metadata.reflection = packetl2c_get_scene_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_change_seat::kPacketIdFieldNumber;
const int packetc2l_change_seat::kPlayerIdFieldNumber;
const int packetc2l_change_seat::kSeatIndexFieldNumber;
#endif  // !_MSC_VER

packetc2l_change_seat::packetc2l_change_seat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_change_seat::InitAsDefaultInstance() {
}

packetc2l_change_seat::packetc2l_change_seat(const packetc2l_change_seat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_change_seat::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10101;
  player_id_ = 0;
  seat_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_change_seat::~packetc2l_change_seat() {
  SharedDtor();
}

void packetc2l_change_seat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_change_seat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_change_seat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_change_seat_descriptor_;
}

const packetc2l_change_seat& packetc2l_change_seat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_change_seat* packetc2l_change_seat::default_instance_ = NULL;

packetc2l_change_seat* packetc2l_change_seat::New() const {
  return new packetc2l_change_seat;
}

void packetc2l_change_seat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10101;
    player_id_ = 0;
    seat_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_change_seat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_seat];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat_index;
        break;
      }

      // optional int32 seat_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_index_)));
          set_has_seat_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_change_seat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_seat];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 seat_index = 3;
  if (has_seat_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_change_seat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_seat];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 seat_index = 3;
  if (has_seat_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_change_seat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_seat];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 seat_index = 3;
    if (has_seat_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_change_seat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_change_seat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_change_seat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_change_seat::MergeFrom(const packetc2l_change_seat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_seat_index()) {
      set_seat_index(from.seat_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_change_seat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_change_seat::CopyFrom(const packetc2l_change_seat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_change_seat::IsInitialized() const {

  return true;
}

void packetc2l_change_seat::Swap(packetc2l_change_seat* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(seat_index_, other->seat_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_change_seat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_change_seat_descriptor_;
  metadata.reflection = packetc2l_change_seat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_change_rate::kPacketIdFieldNumber;
const int packetc2l_change_rate::kTurretRateFieldNumber;
#endif  // !_MSC_VER

packetc2l_change_rate::packetc2l_change_rate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_change_rate::InitAsDefaultInstance() {
}

packetc2l_change_rate::packetc2l_change_rate(const packetc2l_change_rate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_change_rate::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10102;
  turret_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_change_rate::~packetc2l_change_rate() {
  SharedDtor();
}

void packetc2l_change_rate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_change_rate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_change_rate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_change_rate_descriptor_;
}

const packetc2l_change_rate& packetc2l_change_rate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_change_rate* packetc2l_change_rate::default_instance_ = NULL;

packetc2l_change_rate* packetc2l_change_rate::New() const {
  return new packetc2l_change_rate;
}

void packetc2l_change_rate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10102;
    turret_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_change_rate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_rate];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_turret_rate;
        break;
      }

      // optional int32 turret_rate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turret_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turret_rate_)));
          set_has_turret_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_change_rate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_rate];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 turret_rate = 2;
  if (has_turret_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->turret_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_change_rate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_rate];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 turret_rate = 2;
  if (has_turret_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->turret_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_change_rate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_rate];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 turret_rate = 2;
    if (has_turret_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turret_rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_change_rate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_change_rate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_change_rate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_change_rate::MergeFrom(const packetc2l_change_rate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_turret_rate()) {
      set_turret_rate(from.turret_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_change_rate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_change_rate::CopyFrom(const packetc2l_change_rate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_change_rate::IsInitialized() const {

  return true;
}

void packetc2l_change_rate::Swap(packetc2l_change_rate* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(turret_rate_, other->turret_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_change_rate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_change_rate_descriptor_;
  metadata.reflection = packetc2l_change_rate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_change_seat_result::kPacketIdFieldNumber;
const int packetl2c_change_seat_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_change_seat_result::packetl2c_change_seat_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_change_seat_result::InitAsDefaultInstance() {
}

packetl2c_change_seat_result::packetl2c_change_seat_result(const packetl2c_change_seat_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_change_seat_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15101;
  result_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_change_seat_result::~packetl2c_change_seat_result() {
  SharedDtor();
}

void packetl2c_change_seat_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_change_seat_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_change_seat_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_change_seat_result_descriptor_;
}

const packetl2c_change_seat_result& packetl2c_change_seat_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_change_seat_result* packetl2c_change_seat_result::default_instance_ = NULL;

packetl2c_change_seat_result* packetl2c_change_seat_result::New() const {
  return new packetl2c_change_seat_result;
}

void packetl2c_change_seat_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15101;
    result_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_change_seat_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_seat_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_change_seat_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_seat_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_change_seat_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_seat_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_change_seat_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_seat_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_change_seat_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_change_seat_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_change_seat_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_change_seat_result::MergeFrom(const packetl2c_change_seat_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_change_seat_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_change_seat_result::CopyFrom(const packetl2c_change_seat_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_change_seat_result::IsInitialized() const {

  return true;
}

void packetl2c_change_seat_result::Swap(packetl2c_change_seat_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_change_seat_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_change_seat_result_descriptor_;
  metadata.reflection = packetl2c_change_seat_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_enter_seat::kPacketIdFieldNumber;
const int packetl2c_bc_enter_seat::kSeatInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_enter_seat::packetl2c_bc_enter_seat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_enter_seat::InitAsDefaultInstance() {
  seat_info_ = const_cast< ::fishpark_protocols::msg_seat_info*>(&::fishpark_protocols::msg_seat_info::default_instance());
}

packetl2c_bc_enter_seat::packetl2c_bc_enter_seat(const packetl2c_bc_enter_seat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_enter_seat::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15201;
  seat_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_enter_seat::~packetl2c_bc_enter_seat() {
  SharedDtor();
}

void packetl2c_bc_enter_seat::SharedDtor() {
  if (this != default_instance_) {
    delete seat_info_;
  }
}

void packetl2c_bc_enter_seat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_enter_seat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_enter_seat_descriptor_;
}

const packetl2c_bc_enter_seat& packetl2c_bc_enter_seat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_enter_seat* packetl2c_bc_enter_seat::default_instance_ = NULL;

packetl2c_bc_enter_seat* packetl2c_bc_enter_seat::New() const {
  return new packetl2c_bc_enter_seat;
}

void packetl2c_bc_enter_seat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15201;
    if (has_seat_info()) {
      if (seat_info_ != NULL) seat_info_->::fishpark_protocols::msg_seat_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_enter_seat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_enter_seat];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_seat_info;
        break;
      }

      // optional .fishpark_protocols.msg_seat_info seat_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seat_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seat_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_enter_seat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_enter_seat];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .fishpark_protocols.msg_seat_info seat_info = 2;
  if (has_seat_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->seat_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_enter_seat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_enter_seat];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .fishpark_protocols.msg_seat_info seat_info = 2;
  if (has_seat_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->seat_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_enter_seat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_enter_seat];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .fishpark_protocols.msg_seat_info seat_info = 2;
    if (has_seat_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seat_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_enter_seat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_enter_seat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_enter_seat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_enter_seat::MergeFrom(const packetl2c_bc_enter_seat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_seat_info()) {
      mutable_seat_info()->::fishpark_protocols::msg_seat_info::MergeFrom(from.seat_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_enter_seat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_enter_seat::CopyFrom(const packetl2c_bc_enter_seat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_enter_seat::IsInitialized() const {

  return true;
}

void packetl2c_bc_enter_seat::Swap(packetl2c_bc_enter_seat* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(seat_info_, other->seat_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_enter_seat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_enter_seat_descriptor_;
  metadata.reflection = packetl2c_bc_enter_seat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_leave_seat::kPacketIdFieldNumber;
const int packetl2c_bc_leave_seat::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_leave_seat::packetl2c_bc_leave_seat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_leave_seat::InitAsDefaultInstance() {
}

packetl2c_bc_leave_seat::packetl2c_bc_leave_seat(const packetl2c_bc_leave_seat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_leave_seat::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15202;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_leave_seat::~packetl2c_bc_leave_seat() {
  SharedDtor();
}

void packetl2c_bc_leave_seat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_leave_seat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_leave_seat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_leave_seat_descriptor_;
}

const packetl2c_bc_leave_seat& packetl2c_bc_leave_seat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_leave_seat* packetl2c_bc_leave_seat::default_instance_ = NULL;

packetl2c_bc_leave_seat* packetl2c_bc_leave_seat::New() const {
  return new packetl2c_bc_leave_seat;
}

void packetl2c_bc_leave_seat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15202;
    player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_leave_seat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_leave_seat];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_leave_seat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_leave_seat];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_leave_seat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_leave_seat];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_leave_seat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_leave_seat];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_leave_seat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_leave_seat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_leave_seat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_leave_seat::MergeFrom(const packetl2c_bc_leave_seat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_leave_seat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_leave_seat::CopyFrom(const packetl2c_bc_leave_seat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_leave_seat::IsInitialized() const {

  return true;
}

void packetl2c_bc_leave_seat::Swap(packetl2c_bc_leave_seat* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_leave_seat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_leave_seat_descriptor_;
  metadata.reflection = packetl2c_bc_leave_seat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_robot_enter::kPacketIdFieldNumber;
const int packetl2c_robot_enter::kSeatInfoFieldNumber;
const int packetl2c_robot_enter::kSceneIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_robot_enter::packetl2c_robot_enter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_robot_enter::InitAsDefaultInstance() {
  seat_info_ = const_cast< ::fishpark_protocols::msg_seat_info*>(&::fishpark_protocols::msg_seat_info::default_instance());
}

packetl2c_robot_enter::packetl2c_robot_enter(const packetl2c_robot_enter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_robot_enter::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 16000;
  seat_info_ = NULL;
  scene_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_robot_enter::~packetl2c_robot_enter() {
  SharedDtor();
}

void packetl2c_robot_enter::SharedDtor() {
  if (this != default_instance_) {
    delete seat_info_;
  }
}

void packetl2c_robot_enter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_robot_enter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_robot_enter_descriptor_;
}

const packetl2c_robot_enter& packetl2c_robot_enter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_robot_enter* packetl2c_robot_enter::default_instance_ = NULL;

packetl2c_robot_enter* packetl2c_robot_enter::New() const {
  return new packetl2c_robot_enter;
}

void packetl2c_robot_enter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 16000;
    if (has_seat_info()) {
      if (seat_info_ != NULL) seat_info_->::fishpark_protocols::msg_seat_info::Clear();
    }
    scene_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_robot_enter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_robot_enter];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_seat_info;
        break;
      }

      // optional .fishpark_protocols.msg_seat_info seat_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seat_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seat_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_id;
        break;
      }

      // optional int32 scene_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_robot_enter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_robot_enter];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .fishpark_protocols.msg_seat_info seat_info = 2;
  if (has_seat_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->seat_info(), output);
  }

  // optional int32 scene_id = 3;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_robot_enter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_robot_enter];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .fishpark_protocols.msg_seat_info seat_info = 2;
  if (has_seat_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->seat_info(), target);
  }

  // optional int32 scene_id = 3;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_robot_enter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_robot_enter];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .fishpark_protocols.msg_seat_info seat_info = 2;
    if (has_seat_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seat_info());
    }

    // optional int32 scene_id = 3;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_robot_enter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_robot_enter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_robot_enter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_robot_enter::MergeFrom(const packetl2c_robot_enter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_seat_info()) {
      mutable_seat_info()->::fishpark_protocols::msg_seat_info::MergeFrom(from.seat_info());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_robot_enter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_robot_enter::CopyFrom(const packetl2c_robot_enter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_robot_enter::IsInitialized() const {

  return true;
}

void packetl2c_robot_enter::Swap(packetl2c_robot_enter* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(seat_info_, other->seat_info_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_robot_enter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_robot_enter_descriptor_;
  metadata.reflection = packetl2c_robot_enter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_robot_leave::kPacketIdFieldNumber;
const int packetl2c_robot_leave::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_robot_leave::packetl2c_robot_leave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_robot_leave::InitAsDefaultInstance() {
}

packetl2c_robot_leave::packetl2c_robot_leave(const packetl2c_robot_leave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_robot_leave::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 16100;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_robot_leave::~packetl2c_robot_leave() {
  SharedDtor();
}

void packetl2c_robot_leave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_robot_leave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_robot_leave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_robot_leave_descriptor_;
}

const packetl2c_robot_leave& packetl2c_robot_leave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_robot_leave* packetl2c_robot_leave::default_instance_ = NULL;

packetl2c_robot_leave* packetl2c_robot_leave::New() const {
  return new packetl2c_robot_leave;
}

void packetl2c_robot_leave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 16100;
    player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_robot_leave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_robot_leave];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_robot_leave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_robot_leave];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_robot_leave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_robot_leave];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_robot_leave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_robot_leave];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_robot_leave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_robot_leave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_robot_leave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_robot_leave::MergeFrom(const packetl2c_robot_leave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_robot_leave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_robot_leave::CopyFrom(const packetl2c_robot_leave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_robot_leave::IsInitialized() const {

  return true;
}

void packetl2c_robot_leave::Swap(packetl2c_robot_leave* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_robot_leave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_robot_leave_descriptor_;
  metadata.reflection = packetl2c_robot_leave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_change_rate::kPacketIdFieldNumber;
const int packetl2c_bc_change_rate::kPlayerIdFieldNumber;
const int packetl2c_bc_change_rate::kTurretRateFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_change_rate::packetl2c_bc_change_rate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_change_rate::InitAsDefaultInstance() {
}

packetl2c_bc_change_rate::packetl2c_bc_change_rate(const packetl2c_bc_change_rate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_change_rate::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15203;
  player_id_ = 0;
  turret_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_change_rate::~packetl2c_bc_change_rate() {
  SharedDtor();
}

void packetl2c_bc_change_rate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_change_rate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_change_rate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_change_rate_descriptor_;
}

const packetl2c_bc_change_rate& packetl2c_bc_change_rate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_change_rate* packetl2c_bc_change_rate::default_instance_ = NULL;

packetl2c_bc_change_rate* packetl2c_bc_change_rate::New() const {
  return new packetl2c_bc_change_rate;
}

void packetl2c_bc_change_rate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15203;
    player_id_ = 0;
    turret_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_change_rate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_rate];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_turret_rate;
        break;
      }

      // optional int32 turret_rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turret_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turret_rate_)));
          set_has_turret_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_change_rate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_rate];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 turret_rate = 3;
  if (has_turret_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->turret_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_change_rate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_rate];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 turret_rate = 3;
  if (has_turret_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->turret_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_change_rate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_rate];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 turret_rate = 3;
    if (has_turret_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turret_rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_change_rate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_change_rate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_change_rate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_change_rate::MergeFrom(const packetl2c_bc_change_rate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_turret_rate()) {
      set_turret_rate(from.turret_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_change_rate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_change_rate::CopyFrom(const packetl2c_bc_change_rate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_change_rate::IsInitialized() const {

  return true;
}

void packetl2c_bc_change_rate::Swap(packetl2c_bc_change_rate* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(turret_rate_, other->turret_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_change_rate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_change_rate_descriptor_;
  metadata.reflection = packetl2c_bc_change_rate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_change_attr::kPacketIdFieldNumber;
const int packetl2c_bc_change_attr::kPlayerIdFieldNumber;
const int packetl2c_bc_change_attr::kChangeGoldFieldNumber;
const int packetl2c_bc_change_attr::kChangeVipFieldNumber;
const int packetl2c_bc_change_attr::kChangeTicketFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_change_attr::packetl2c_bc_change_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_change_attr::InitAsDefaultInstance() {
}

packetl2c_bc_change_attr::packetl2c_bc_change_attr(const packetl2c_bc_change_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_change_attr::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15207;
  player_id_ = 0;
  change_gold_ = 0;
  change_vip_ = 0;
  change_ticket_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_change_attr::~packetl2c_bc_change_attr() {
  SharedDtor();
}

void packetl2c_bc_change_attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_change_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_change_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_change_attr_descriptor_;
}

const packetl2c_bc_change_attr& packetl2c_bc_change_attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_change_attr* packetl2c_bc_change_attr::default_instance_ = NULL;

packetl2c_bc_change_attr* packetl2c_bc_change_attr::New() const {
  return new packetl2c_bc_change_attr;
}

void packetl2c_bc_change_attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15207;
    player_id_ = 0;
    change_gold_ = 0;
    change_vip_ = 0;
    change_ticket_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_change_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_change_gold;
        break;
      }

      // optional int32 change_gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_gold_)));
          set_has_change_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_change_vip;
        break;
      }

      // optional int32 change_vip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_vip_)));
          set_has_change_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_change_ticket;
        break;
      }

      // optional int32 change_ticket = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_ticket_)));
          set_has_change_ticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_change_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 change_gold = 3;
  if (has_change_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->change_gold(), output);
  }

  // optional int32 change_vip = 4;
  if (has_change_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->change_vip(), output);
  }

  // optional int32 change_ticket = 5;
  if (has_change_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->change_ticket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_change_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 change_gold = 3;
  if (has_change_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->change_gold(), target);
  }

  // optional int32 change_vip = 4;
  if (has_change_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->change_vip(), target);
  }

  // optional int32 change_ticket = 5;
  if (has_change_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->change_ticket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_change_attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 change_gold = 3;
    if (has_change_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_gold());
    }

    // optional int32 change_vip = 4;
    if (has_change_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_vip());
    }

    // optional int32 change_ticket = 5;
    if (has_change_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_ticket());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_change_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_change_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_change_attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_change_attr::MergeFrom(const packetl2c_bc_change_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_change_gold()) {
      set_change_gold(from.change_gold());
    }
    if (from.has_change_vip()) {
      set_change_vip(from.change_vip());
    }
    if (from.has_change_ticket()) {
      set_change_ticket(from.change_ticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_change_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_change_attr::CopyFrom(const packetl2c_bc_change_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_change_attr::IsInitialized() const {

  return true;
}

void packetl2c_bc_change_attr::Swap(packetl2c_bc_change_attr* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(change_gold_, other->change_gold_);
    std::swap(change_vip_, other->change_vip_);
    std::swap(change_ticket_, other->change_ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_change_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_change_attr_descriptor_;
  metadata.reflection = packetl2c_bc_change_attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fish_info::kIdFieldNumber;
const int msg_fish_info::kFishIdFieldNumber;
const int msg_fish_info::kRouteIdFieldNumber;
const int msg_fish_info::kIsCamouflageFieldNumber;
#endif  // !_MSC_VER

msg_fish_info::msg_fish_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fish_info::InitAsDefaultInstance() {
}

msg_fish_info::msg_fish_info(const msg_fish_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fish_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  fish_id_ = 0;
  route_id_ = 0;
  is_camouflage_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fish_info::~msg_fish_info() {
  SharedDtor();
}

void msg_fish_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fish_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fish_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fish_info_descriptor_;
}

const msg_fish_info& msg_fish_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

msg_fish_info* msg_fish_info::default_instance_ = NULL;

msg_fish_info* msg_fish_info::New() const {
  return new msg_fish_info;
}

void msg_fish_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    fish_id_ = 0;
    route_id_ = 0;
    is_camouflage_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fish_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fish_id;
        break;
      }

      // optional int32 fish_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fish_id_)));
          set_has_fish_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_route_id;
        break;
      }

      // optional int32 route_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_route_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &route_id_)));
          set_has_route_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_camouflage;
        break;
      }

      // optional bool is_camouflage = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_camouflage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_camouflage_)));
          set_has_is_camouflage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fish_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 fish_id = 2;
  if (has_fish_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fish_id(), output);
  }

  // optional int32 route_id = 3;
  if (has_route_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->route_id(), output);
  }

  // optional bool is_camouflage = 4 [default = false];
  if (has_is_camouflage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_camouflage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fish_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 fish_id = 2;
  if (has_fish_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fish_id(), target);
  }

  // optional int32 route_id = 3;
  if (has_route_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->route_id(), target);
  }

  // optional bool is_camouflage = 4 [default = false];
  if (has_is_camouflage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_camouflage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fish_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 fish_id = 2;
    if (has_fish_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fish_id());
    }

    // optional int32 route_id = 3;
    if (has_route_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->route_id());
    }

    // optional bool is_camouflage = 4 [default = false];
    if (has_is_camouflage()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fish_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fish_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fish_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fish_info::MergeFrom(const msg_fish_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_fish_id()) {
      set_fish_id(from.fish_id());
    }
    if (from.has_route_id()) {
      set_route_id(from.route_id());
    }
    if (from.has_is_camouflage()) {
      set_is_camouflage(from.is_camouflage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fish_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fish_info::CopyFrom(const msg_fish_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fish_info::IsInitialized() const {

  return true;
}

void msg_fish_info::Swap(msg_fish_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(fish_id_, other->fish_id_);
    std::swap(route_id_, other->route_id_);
    std::swap(is_camouflage_, other->is_camouflage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fish_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fish_info_descriptor_;
  metadata.reflection = msg_fish_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_create_fish::kPacketIdFieldNumber;
const int packetl2c_bc_create_fish::kFishInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_create_fish::packetl2c_bc_create_fish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_create_fish::InitAsDefaultInstance() {
  fish_info_ = const_cast< ::fishpark_protocols::msg_fish_info*>(&::fishpark_protocols::msg_fish_info::default_instance());
}

packetl2c_bc_create_fish::packetl2c_bc_create_fish(const packetl2c_bc_create_fish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_create_fish::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15204;
  fish_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_create_fish::~packetl2c_bc_create_fish() {
  SharedDtor();
}

void packetl2c_bc_create_fish::SharedDtor() {
  if (this != default_instance_) {
    delete fish_info_;
  }
}

void packetl2c_bc_create_fish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_create_fish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_create_fish_descriptor_;
}

const packetl2c_bc_create_fish& packetl2c_bc_create_fish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_create_fish* packetl2c_bc_create_fish::default_instance_ = NULL;

packetl2c_bc_create_fish* packetl2c_bc_create_fish::New() const {
  return new packetl2c_bc_create_fish;
}

void packetl2c_bc_create_fish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15204;
    if (has_fish_info()) {
      if (fish_info_ != NULL) fish_info_->::fishpark_protocols::msg_fish_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_create_fish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_create_fish];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fish_info;
        break;
      }

      // optional .fishpark_protocols.msg_fish_info fish_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fish_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fish_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_create_fish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_create_fish];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .fishpark_protocols.msg_fish_info fish_info = 2;
  if (has_fish_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fish_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_create_fish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_create_fish];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .fishpark_protocols.msg_fish_info fish_info = 2;
  if (has_fish_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fish_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_create_fish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_create_fish];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .fishpark_protocols.msg_fish_info fish_info = 2;
    if (has_fish_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fish_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_create_fish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_create_fish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_create_fish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_create_fish::MergeFrom(const packetl2c_bc_create_fish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_fish_info()) {
      mutable_fish_info()->::fishpark_protocols::msg_fish_info::MergeFrom(from.fish_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_create_fish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_create_fish::CopyFrom(const packetl2c_bc_create_fish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_create_fish::IsInitialized() const {

  return true;
}

void packetl2c_bc_create_fish::Swap(packetl2c_bc_create_fish* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(fish_info_, other->fish_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_create_fish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_create_fish_descriptor_;
  metadata.reflection = packetl2c_bc_create_fish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_create_generator::kPacketIdFieldNumber;
const int packetl2c_bc_create_generator::kGeneratorIdFieldNumber;
const int packetl2c_bc_create_generator::kStartIdFieldNumber;
const int packetl2c_bc_create_generator::kRouteIdFieldNumber;
const int packetl2c_bc_create_generator::kIsRedFieldNumber;
const int packetl2c_bc_create_generator::kPosXFieldNumber;
const int packetl2c_bc_create_generator::kPosYFieldNumber;
const int packetl2c_bc_create_generator::kIsFlashFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_create_generator::packetl2c_bc_create_generator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_create_generator::InitAsDefaultInstance() {
}

packetl2c_bc_create_generator::packetl2c_bc_create_generator(const packetl2c_bc_create_generator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_create_generator::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15208;
  generator_id_ = 0;
  start_id_ = 0;
  route_id_ = 0;
  is_red_ = false;
  pos_x_ = 0;
  pos_y_ = 0;
  is_flash_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_create_generator::~packetl2c_bc_create_generator() {
  SharedDtor();
}

void packetl2c_bc_create_generator::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_create_generator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_create_generator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_create_generator_descriptor_;
}

const packetl2c_bc_create_generator& packetl2c_bc_create_generator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_create_generator* packetl2c_bc_create_generator::default_instance_ = NULL;

packetl2c_bc_create_generator* packetl2c_bc_create_generator::New() const {
  return new packetl2c_bc_create_generator;
}

void packetl2c_bc_create_generator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15208;
    generator_id_ = 0;
    start_id_ = 0;
    route_id_ = 0;
    is_red_ = false;
    pos_x_ = 0;
    pos_y_ = 0;
    is_flash_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_create_generator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_create_generator];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_generator_id;
        break;
      }

      // optional int32 generator_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_generator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &generator_id_)));
          set_has_generator_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_id;
        break;
      }

      // optional int32 start_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_id_)));
          set_has_start_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_route_id;
        break;
      }

      // optional int32 route_id = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_route_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &route_id_)));
          set_has_route_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_red;
        break;
      }

      // optional bool is_red = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_red:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_red_)));
          set_has_is_red();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pos_x;
        break;
      }

      // optional int32 pos_x = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_flash;
        break;
      }

      // optional bool is_flash = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_flash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_flash_)));
          set_has_is_flash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_create_generator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_create_generator];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 generator_id = 2;
  if (has_generator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->generator_id(), output);
  }

  // optional int32 start_id = 3;
  if (has_start_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_id(), output);
  }

  // optional int32 route_id = 4 [default = 0];
  if (has_route_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->route_id(), output);
  }

  // optional bool is_red = 5 [default = false];
  if (has_is_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_red(), output);
  }

  // optional int32 pos_x = 6;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pos_x(), output);
  }

  // optional int32 pos_y = 7;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pos_y(), output);
  }

  // optional bool is_flash = 8 [default = false];
  if (has_is_flash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_flash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_create_generator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_create_generator];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 generator_id = 2;
  if (has_generator_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->generator_id(), target);
  }

  // optional int32 start_id = 3;
  if (has_start_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start_id(), target);
  }

  // optional int32 route_id = 4 [default = 0];
  if (has_route_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->route_id(), target);
  }

  // optional bool is_red = 5 [default = false];
  if (has_is_red()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_red(), target);
  }

  // optional int32 pos_x = 6;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pos_x(), target);
  }

  // optional int32 pos_y = 7;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pos_y(), target);
  }

  // optional bool is_flash = 8 [default = false];
  if (has_is_flash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_flash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_create_generator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_create_generator];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 generator_id = 2;
    if (has_generator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->generator_id());
    }

    // optional int32 start_id = 3;
    if (has_start_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_id());
    }

    // optional int32 route_id = 4 [default = 0];
    if (has_route_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->route_id());
    }

    // optional bool is_red = 5 [default = false];
    if (has_is_red()) {
      total_size += 1 + 1;
    }

    // optional int32 pos_x = 6;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 7;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // optional bool is_flash = 8 [default = false];
    if (has_is_flash()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_create_generator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_create_generator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_create_generator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_create_generator::MergeFrom(const packetl2c_bc_create_generator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_generator_id()) {
      set_generator_id(from.generator_id());
    }
    if (from.has_start_id()) {
      set_start_id(from.start_id());
    }
    if (from.has_route_id()) {
      set_route_id(from.route_id());
    }
    if (from.has_is_red()) {
      set_is_red(from.is_red());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_is_flash()) {
      set_is_flash(from.is_flash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_create_generator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_create_generator::CopyFrom(const packetl2c_bc_create_generator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_create_generator::IsInitialized() const {

  return true;
}

void packetl2c_bc_create_generator::Swap(packetl2c_bc_create_generator* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(generator_id_, other->generator_id_);
    std::swap(start_id_, other->start_id_);
    std::swap(route_id_, other->route_id_);
    std::swap(is_red_, other->is_red_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(is_flash_, other->is_flash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_create_generator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_create_generator_descriptor_;
  metadata.reflection = packetl2c_bc_create_generator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_manual_fire::kPacketIdFieldNumber;
const int packetc2l_manual_fire::kBulletIdFieldNumber;
const int packetc2l_manual_fire::kBulletAngleFieldNumber;
const int packetc2l_manual_fire::kBulletRateFieldNumber;
#endif  // !_MSC_VER

packetc2l_manual_fire::packetc2l_manual_fire()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_manual_fire::InitAsDefaultInstance() {
}

packetc2l_manual_fire::packetc2l_manual_fire(const packetc2l_manual_fire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_manual_fire::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10103;
  bullet_id_ = 0;
  bullet_angle_ = 0;
  bullet_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_manual_fire::~packetc2l_manual_fire() {
  SharedDtor();
}

void packetc2l_manual_fire::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_manual_fire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_manual_fire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_manual_fire_descriptor_;
}

const packetc2l_manual_fire& packetc2l_manual_fire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_manual_fire* packetc2l_manual_fire::default_instance_ = NULL;

packetc2l_manual_fire* packetc2l_manual_fire::New() const {
  return new packetc2l_manual_fire;
}

void packetc2l_manual_fire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10103;
    bullet_id_ = 0;
    bullet_angle_ = 0;
    bullet_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_manual_fire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_manual_fire];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bullet_id;
        break;
      }

      // optional int32 bullet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_id_)));
          set_has_bullet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bullet_angle;
        break;
      }

      // optional int32 bullet_angle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_angle_)));
          set_has_bullet_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bullet_rate;
        break;
      }

      // optional int32 bullet_rate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_rate_)));
          set_has_bullet_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_manual_fire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_manual_fire];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 bullet_id = 2;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bullet_id(), output);
  }

  // optional int32 bullet_angle = 3;
  if (has_bullet_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bullet_angle(), output);
  }

  // optional int32 bullet_rate = 4;
  if (has_bullet_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bullet_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_manual_fire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_manual_fire];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 bullet_id = 2;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bullet_id(), target);
  }

  // optional int32 bullet_angle = 3;
  if (has_bullet_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bullet_angle(), target);
  }

  // optional int32 bullet_rate = 4;
  if (has_bullet_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bullet_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_manual_fire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_manual_fire];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 bullet_id = 2;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_id());
    }

    // optional int32 bullet_angle = 3;
    if (has_bullet_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_angle());
    }

    // optional int32 bullet_rate = 4;
    if (has_bullet_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_manual_fire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_manual_fire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_manual_fire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_manual_fire::MergeFrom(const packetc2l_manual_fire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
    if (from.has_bullet_angle()) {
      set_bullet_angle(from.bullet_angle());
    }
    if (from.has_bullet_rate()) {
      set_bullet_rate(from.bullet_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_manual_fire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_manual_fire::CopyFrom(const packetc2l_manual_fire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_manual_fire::IsInitialized() const {

  return true;
}

void packetc2l_manual_fire::Swap(packetc2l_manual_fire* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(bullet_id_, other->bullet_id_);
    std::swap(bullet_angle_, other->bullet_angle_);
    std::swap(bullet_rate_, other->bullet_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_manual_fire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_manual_fire_descriptor_;
  metadata.reflection = packetc2l_manual_fire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_manual_fire::kPacketIdFieldNumber;
const int packetl2c_bc_manual_fire::kBulletIdFieldNumber;
const int packetl2c_bc_manual_fire::kPlayerIdFieldNumber;
const int packetl2c_bc_manual_fire::kBulletAngleFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_manual_fire::packetl2c_bc_manual_fire()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_manual_fire::InitAsDefaultInstance() {
}

packetl2c_bc_manual_fire::packetl2c_bc_manual_fire(const packetl2c_bc_manual_fire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_manual_fire::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15205;
  bullet_id_ = 0;
  player_id_ = 0;
  bullet_angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_manual_fire::~packetl2c_bc_manual_fire() {
  SharedDtor();
}

void packetl2c_bc_manual_fire::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_manual_fire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_manual_fire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_manual_fire_descriptor_;
}

const packetl2c_bc_manual_fire& packetl2c_bc_manual_fire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_manual_fire* packetl2c_bc_manual_fire::default_instance_ = NULL;

packetl2c_bc_manual_fire* packetl2c_bc_manual_fire::New() const {
  return new packetl2c_bc_manual_fire;
}

void packetl2c_bc_manual_fire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15205;
    bullet_id_ = 0;
    player_id_ = 0;
    bullet_angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_manual_fire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_manual_fire];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bullet_id;
        break;
      }

      // optional int32 bullet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_id_)));
          set_has_bullet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bullet_angle;
        break;
      }

      // optional int32 bullet_angle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_angle_)));
          set_has_bullet_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_manual_fire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_manual_fire];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 bullet_id = 2;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bullet_id(), output);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_id(), output);
  }

  // optional int32 bullet_angle = 4;
  if (has_bullet_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bullet_angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_manual_fire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_manual_fire];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 bullet_id = 2;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bullet_id(), target);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_id(), target);
  }

  // optional int32 bullet_angle = 4;
  if (has_bullet_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bullet_angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_manual_fire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_manual_fire];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 bullet_id = 2;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_id());
    }

    // optional int32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 bullet_angle = 4;
    if (has_bullet_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_angle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_manual_fire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_manual_fire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_manual_fire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_manual_fire::MergeFrom(const packetl2c_bc_manual_fire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_bullet_angle()) {
      set_bullet_angle(from.bullet_angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_manual_fire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_manual_fire::CopyFrom(const packetl2c_bc_manual_fire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_manual_fire::IsInitialized() const {

  return true;
}

void packetl2c_bc_manual_fire::Swap(packetl2c_bc_manual_fire* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(bullet_id_, other->bullet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(bullet_angle_, other->bullet_angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_manual_fire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_manual_fire_descriptor_;
  metadata.reflection = packetl2c_bc_manual_fire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_hit_fish::kPacketIdFieldNumber;
const int packetc2l_hit_fish::kBulletIdFieldNumber;
const int packetc2l_hit_fish::kFishIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_hit_fish::packetc2l_hit_fish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_hit_fish::InitAsDefaultInstance() {
}

packetc2l_hit_fish::packetc2l_hit_fish(const packetc2l_hit_fish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_hit_fish::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10104;
  bullet_id_ = 0;
  fish_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_hit_fish::~packetc2l_hit_fish() {
  SharedDtor();
}

void packetc2l_hit_fish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_hit_fish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_hit_fish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_hit_fish_descriptor_;
}

const packetc2l_hit_fish& packetc2l_hit_fish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_hit_fish* packetc2l_hit_fish::default_instance_ = NULL;

packetc2l_hit_fish* packetc2l_hit_fish::New() const {
  return new packetc2l_hit_fish;
}

void packetc2l_hit_fish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10104;
    bullet_id_ = 0;
    fish_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_hit_fish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_hit_fish];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bullet_id;
        break;
      }

      // optional int32 bullet_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_id_)));
          set_has_bullet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fish_id;
        break;
      }

      // optional int32 fish_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fish_id_)));
          set_has_fish_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_hit_fish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_hit_fish];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 bullet_id = 3;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bullet_id(), output);
  }

  // optional int32 fish_id = 4;
  if (has_fish_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fish_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_hit_fish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_hit_fish];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 bullet_id = 3;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bullet_id(), target);
  }

  // optional int32 fish_id = 4;
  if (has_fish_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fish_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_hit_fish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_hit_fish];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 bullet_id = 3;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_id());
    }

    // optional int32 fish_id = 4;
    if (has_fish_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fish_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_hit_fish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_hit_fish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_hit_fish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_hit_fish::MergeFrom(const packetc2l_hit_fish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
    if (from.has_fish_id()) {
      set_fish_id(from.fish_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_hit_fish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_hit_fish::CopyFrom(const packetc2l_hit_fish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_hit_fish::IsInitialized() const {

  return true;
}

void packetc2l_hit_fish::Swap(packetc2l_hit_fish* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(bullet_id_, other->bullet_id_);
    std::swap(fish_id_, other->fish_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_hit_fish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_hit_fish_descriptor_;
  metadata.reflection = packetc2l_hit_fish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_hit_fishs::kPacketIdFieldNumber;
const int packetc2l_hit_fishs::kHitTypeFieldNumber;
const int packetc2l_hit_fishs::kBulletIdFieldNumber;
const int packetc2l_hit_fishs::kFishIdsFieldNumber;
#endif  // !_MSC_VER

packetc2l_hit_fishs::packetc2l_hit_fishs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_hit_fishs::InitAsDefaultInstance() {
}

packetc2l_hit_fishs::packetc2l_hit_fishs(const packetc2l_hit_fishs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_hit_fishs::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10108;
  hit_type_ = 0;
  bullet_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_hit_fishs::~packetc2l_hit_fishs() {
  SharedDtor();
}

void packetc2l_hit_fishs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_hit_fishs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_hit_fishs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_hit_fishs_descriptor_;
}

const packetc2l_hit_fishs& packetc2l_hit_fishs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_hit_fishs* packetc2l_hit_fishs::default_instance_ = NULL;

packetc2l_hit_fishs* packetc2l_hit_fishs::New() const {
  return new packetc2l_hit_fishs;
}

void packetc2l_hit_fishs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10108;
    hit_type_ = 0;
    bullet_id_ = 0;
  }
  fish_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_hit_fishs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_hit_fishs];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hit_type;
        break;
      }

      // optional int32 hit_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_type_)));
          set_has_hit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bullet_id;
        break;
      }

      // optional int32 bullet_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_id_)));
          set_has_bullet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fish_ids;
        break;
      }

      // repeated int32 fish_ids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_fish_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fish_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fish_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_hit_fishs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_hit_fishs];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 hit_type = 2;
  if (has_hit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hit_type(), output);
  }

  // optional int32 bullet_id = 3;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bullet_id(), output);
  }

  // repeated int32 fish_ids = 4;
  for (int i = 0; i < this->fish_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->fish_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_hit_fishs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_hit_fishs];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 hit_type = 2;
  if (has_hit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hit_type(), target);
  }

  // optional int32 bullet_id = 3;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bullet_id(), target);
  }

  // repeated int32 fish_ids = 4;
  for (int i = 0; i < this->fish_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->fish_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_hit_fishs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_hit_fishs];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 hit_type = 2;
    if (has_hit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit_type());
    }

    // optional int32 bullet_id = 3;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_id());
    }

  }
  // repeated int32 fish_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->fish_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fish_ids(i));
    }
    total_size += 1 * this->fish_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_hit_fishs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_hit_fishs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_hit_fishs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_hit_fishs::MergeFrom(const packetc2l_hit_fishs& from) {
  GOOGLE_CHECK_NE(&from, this);
  fish_ids_.MergeFrom(from.fish_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_hit_type()) {
      set_hit_type(from.hit_type());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_hit_fishs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_hit_fishs::CopyFrom(const packetc2l_hit_fishs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_hit_fishs::IsInitialized() const {

  return true;
}

void packetc2l_hit_fishs::Swap(packetc2l_hit_fishs* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(hit_type_, other->hit_type_);
    std::swap(bullet_id_, other->bullet_id_);
    fish_ids_.Swap(&other->fish_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_hit_fishs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_hit_fishs_descriptor_;
  metadata.reflection = packetc2l_hit_fishs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_fish_die::kPacketIdFieldNumber;
const int packetl2c_bc_fish_die::kFishIdFieldNumber;
const int packetl2c_bc_fish_die::kKillIdFieldNumber;
const int packetl2c_bc_fish_die::kBaseScoreFieldNumber;
const int packetl2c_bc_fish_die::kAddScoreFieldNumber;
const int packetl2c_bc_fish_die::kTicketFieldNumber;
const int packetl2c_bc_fish_die::kGetstarFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_fish_die::packetl2c_bc_fish_die()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_fish_die::InitAsDefaultInstance() {
}

packetl2c_bc_fish_die::packetl2c_bc_fish_die(const packetl2c_bc_fish_die& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_fish_die::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15206;
  fish_id_ = 0;
  kill_id_ = 0;
  base_score_ = 0;
  add_score_ = 0;
  ticket_ = 0;
  getstar_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_fish_die::~packetl2c_bc_fish_die() {
  SharedDtor();
}

void packetl2c_bc_fish_die::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_fish_die::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_fish_die::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_fish_die_descriptor_;
}

const packetl2c_bc_fish_die& packetl2c_bc_fish_die::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_fish_die* packetl2c_bc_fish_die::default_instance_ = NULL;

packetl2c_bc_fish_die* packetl2c_bc_fish_die::New() const {
  return new packetl2c_bc_fish_die;
}

void packetl2c_bc_fish_die::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15206;
    fish_id_ = 0;
    kill_id_ = 0;
    base_score_ = 0;
    add_score_ = 0;
    ticket_ = 0;
    getstar_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_fish_die::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_fish_die];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fish_id;
        break;
      }

      // optional int32 fish_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fish_id_)));
          set_has_fish_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kill_id;
        break;
      }

      // optional int32 kill_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_id_)));
          set_has_kill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_base_score;
        break;
      }

      // optional int32 base_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_score_)));
          set_has_base_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_add_score;
        break;
      }

      // optional int32 add_score = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_score_)));
          set_has_add_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ticket;
        break;
      }

      // optional int32 ticket = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_)));
          set_has_ticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_getstar;
        break;
      }

      // optional bool getstar = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getstar_)));
          set_has_getstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_fish_die::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_fish_die];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 fish_id = 2;
  if (has_fish_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fish_id(), output);
  }

  // optional int32 kill_id = 3;
  if (has_kill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kill_id(), output);
  }

  // optional int32 base_score = 4;
  if (has_base_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->base_score(), output);
  }

  // optional int32 add_score = 5 [default = 0];
  if (has_add_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->add_score(), output);
  }

  // optional int32 ticket = 6 [default = 0];
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ticket(), output);
  }

  // optional bool getstar = 7 [default = false];
  if (has_getstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->getstar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_fish_die::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_fish_die];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 fish_id = 2;
  if (has_fish_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fish_id(), target);
  }

  // optional int32 kill_id = 3;
  if (has_kill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kill_id(), target);
  }

  // optional int32 base_score = 4;
  if (has_base_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->base_score(), target);
  }

  // optional int32 add_score = 5 [default = 0];
  if (has_add_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->add_score(), target);
  }

  // optional int32 ticket = 6 [default = 0];
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ticket(), target);
  }

  // optional bool getstar = 7 [default = false];
  if (has_getstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->getstar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_fish_die::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_fish_die];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 fish_id = 2;
    if (has_fish_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fish_id());
    }

    // optional int32 kill_id = 3;
    if (has_kill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_id());
    }

    // optional int32 base_score = 4;
    if (has_base_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_score());
    }

    // optional int32 add_score = 5 [default = 0];
    if (has_add_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_score());
    }

    // optional int32 ticket = 6 [default = 0];
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ticket());
    }

    // optional bool getstar = 7 [default = false];
    if (has_getstar()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_fish_die::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_fish_die* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_fish_die*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_fish_die::MergeFrom(const packetl2c_bc_fish_die& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_fish_id()) {
      set_fish_id(from.fish_id());
    }
    if (from.has_kill_id()) {
      set_kill_id(from.kill_id());
    }
    if (from.has_base_score()) {
      set_base_score(from.base_score());
    }
    if (from.has_add_score()) {
      set_add_score(from.add_score());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
    if (from.has_getstar()) {
      set_getstar(from.getstar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_fish_die::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_fish_die::CopyFrom(const packetl2c_bc_fish_die& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_fish_die::IsInitialized() const {

  return true;
}

void packetl2c_bc_fish_die::Swap(packetl2c_bc_fish_die* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(fish_id_, other->fish_id_);
    std::swap(kill_id_, other->kill_id_);
    std::swap(base_score_, other->base_score_);
    std::swap(add_score_, other->add_score_);
    std::swap(ticket_, other->ticket_);
    std::swap(getstar_, other->getstar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_fish_die::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_fish_die_descriptor_;
  metadata.reflection = packetl2c_bc_fish_die_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_specialfish_die::kPacketIdFieldNumber;
const int packetl2c_bc_specialfish_die::kFishIdFieldNumber;
const int packetl2c_bc_specialfish_die::kPlayerIdFieldNumber;
const int packetl2c_bc_specialfish_die::kBulletIdFieldNumber;
const int packetl2c_bc_specialfish_die::kBaseScoreFieldNumber;
const int packetl2c_bc_specialfish_die::kAddScoreFieldNumber;
const int packetl2c_bc_specialfish_die::kTicketFieldNumber;
const int packetl2c_bc_specialfish_die::kGetstarFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_specialfish_die::packetl2c_bc_specialfish_die()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_specialfish_die::InitAsDefaultInstance() {
}

packetl2c_bc_specialfish_die::packetl2c_bc_specialfish_die(const packetl2c_bc_specialfish_die& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_specialfish_die::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15219;
  fish_id_ = 0;
  player_id_ = 0;
  bullet_id_ = 0;
  base_score_ = 0;
  add_score_ = 0;
  ticket_ = 0;
  getstar_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_specialfish_die::~packetl2c_bc_specialfish_die() {
  SharedDtor();
}

void packetl2c_bc_specialfish_die::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_specialfish_die::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_specialfish_die::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_specialfish_die_descriptor_;
}

const packetl2c_bc_specialfish_die& packetl2c_bc_specialfish_die::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_specialfish_die* packetl2c_bc_specialfish_die::default_instance_ = NULL;

packetl2c_bc_specialfish_die* packetl2c_bc_specialfish_die::New() const {
  return new packetl2c_bc_specialfish_die;
}

void packetl2c_bc_specialfish_die::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15219;
    fish_id_ = 0;
    player_id_ = 0;
    bullet_id_ = 0;
    base_score_ = 0;
    add_score_ = 0;
    ticket_ = 0;
    getstar_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_specialfish_die::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_specialfish_die];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fish_id;
        break;
      }

      // optional int32 fish_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fish_id_)));
          set_has_fish_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bullet_id;
        break;
      }

      // optional int32 bullet_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_id_)));
          set_has_bullet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_base_score;
        break;
      }

      // optional int32 base_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_score_)));
          set_has_base_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_add_score;
        break;
      }

      // optional int32 add_score = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_score_)));
          set_has_add_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ticket;
        break;
      }

      // optional int32 ticket = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_)));
          set_has_ticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_getstar;
        break;
      }

      // optional bool getstar = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getstar_)));
          set_has_getstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_specialfish_die::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_specialfish_die];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 fish_id = 2;
  if (has_fish_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fish_id(), output);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_id(), output);
  }

  // optional int32 bullet_id = 4;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bullet_id(), output);
  }

  // optional int32 base_score = 5;
  if (has_base_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->base_score(), output);
  }

  // optional int32 add_score = 6 [default = 0];
  if (has_add_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->add_score(), output);
  }

  // optional int32 ticket = 7 [default = 0];
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ticket(), output);
  }

  // optional bool getstar = 8 [default = false];
  if (has_getstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->getstar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_specialfish_die::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_specialfish_die];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 fish_id = 2;
  if (has_fish_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fish_id(), target);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_id(), target);
  }

  // optional int32 bullet_id = 4;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bullet_id(), target);
  }

  // optional int32 base_score = 5;
  if (has_base_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->base_score(), target);
  }

  // optional int32 add_score = 6 [default = 0];
  if (has_add_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->add_score(), target);
  }

  // optional int32 ticket = 7 [default = 0];
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ticket(), target);
  }

  // optional bool getstar = 8 [default = false];
  if (has_getstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->getstar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_specialfish_die::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_specialfish_die];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 fish_id = 2;
    if (has_fish_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fish_id());
    }

    // optional int32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 bullet_id = 4;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_id());
    }

    // optional int32 base_score = 5;
    if (has_base_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_score());
    }

    // optional int32 add_score = 6 [default = 0];
    if (has_add_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_score());
    }

    // optional int32 ticket = 7 [default = 0];
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ticket());
    }

    // optional bool getstar = 8 [default = false];
    if (has_getstar()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_specialfish_die::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_specialfish_die* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_specialfish_die*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_specialfish_die::MergeFrom(const packetl2c_bc_specialfish_die& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_fish_id()) {
      set_fish_id(from.fish_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
    if (from.has_base_score()) {
      set_base_score(from.base_score());
    }
    if (from.has_add_score()) {
      set_add_score(from.add_score());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
    if (from.has_getstar()) {
      set_getstar(from.getstar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_specialfish_die::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_specialfish_die::CopyFrom(const packetl2c_bc_specialfish_die& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_specialfish_die::IsInitialized() const {

  return true;
}

void packetl2c_bc_specialfish_die::Swap(packetl2c_bc_specialfish_die* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(fish_id_, other->fish_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(bullet_id_, other->bullet_id_);
    std::swap(base_score_, other->base_score_);
    std::swap(add_score_, other->add_score_);
    std::swap(ticket_, other->ticket_);
    std::swap(getstar_, other->getstar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_specialfish_die::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_specialfish_die_descriptor_;
  metadata.reflection = packetl2c_bc_specialfish_die_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_fishs_die::kPacketIdFieldNumber;
const int packetl2c_bc_fishs_die::kPlayerIdFieldNumber;
const int packetl2c_bc_fishs_die::kDieTypeFieldNumber;
const int packetl2c_bc_fishs_die::kDieParamsFieldNumber;
const int packetl2c_bc_fishs_die::kTotalScoreFieldNumber;
const int packetl2c_bc_fishs_die::kBaseRateFieldNumber;
const int packetl2c_bc_fishs_die::kAddRateFieldNumber;
const int packetl2c_bc_fishs_die::kTicketFieldNumber;
const int packetl2c_bc_fishs_die::kGetstarFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_fishs_die::packetl2c_bc_fishs_die()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_fishs_die::InitAsDefaultInstance() {
}

packetl2c_bc_fishs_die::packetl2c_bc_fishs_die(const packetl2c_bc_fishs_die& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_fishs_die::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15218;
  player_id_ = 0;
  die_type_ = 0;
  total_score_ = 0;
  base_rate_ = 0;
  add_rate_ = 0;
  ticket_ = 0;
  getstar_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_fishs_die::~packetl2c_bc_fishs_die() {
  SharedDtor();
}

void packetl2c_bc_fishs_die::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_fishs_die::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_fishs_die::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_fishs_die_descriptor_;
}

const packetl2c_bc_fishs_die& packetl2c_bc_fishs_die::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_fishs_die* packetl2c_bc_fishs_die::default_instance_ = NULL;

packetl2c_bc_fishs_die* packetl2c_bc_fishs_die::New() const {
  return new packetl2c_bc_fishs_die;
}

void packetl2c_bc_fishs_die::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15218;
    player_id_ = 0;
    die_type_ = 0;
    total_score_ = 0;
    base_rate_ = 0;
    add_rate_ = 0;
    ticket_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    getstar_ = false;
  }
  die_params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_fishs_die::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_fishs_die];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_die_type;
        break;
      }

      // optional int32 die_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_die_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &die_type_)));
          set_has_die_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_die_params;
        break;
      }

      // repeated int32 die_params = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_die_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_die_params())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_die_params())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_die_params;
        if (input->ExpectTag(40)) goto parse_total_score;
        break;
      }

      // optional int32 total_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_score_)));
          set_has_total_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_base_rate;
        break;
      }

      // optional int32 base_rate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_rate_)));
          set_has_base_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_add_rate;
        break;
      }

      // optional int32 add_rate = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_rate_)));
          set_has_add_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ticket;
        break;
      }

      // optional int32 ticket = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_)));
          set_has_ticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_getstar;
        break;
      }

      // optional bool getstar = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getstar_)));
          set_has_getstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_fishs_die::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_fishs_die];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 die_type = 3;
  if (has_die_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->die_type(), output);
  }

  // repeated int32 die_params = 4;
  for (int i = 0; i < this->die_params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->die_params(i), output);
  }

  // optional int32 total_score = 5;
  if (has_total_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total_score(), output);
  }

  // optional int32 base_rate = 6;
  if (has_base_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->base_rate(), output);
  }

  // optional int32 add_rate = 7 [default = 0];
  if (has_add_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->add_rate(), output);
  }

  // optional int32 ticket = 8 [default = 0];
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ticket(), output);
  }

  // optional bool getstar = 9 [default = false];
  if (has_getstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->getstar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_fishs_die::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_fishs_die];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 die_type = 3;
  if (has_die_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->die_type(), target);
  }

  // repeated int32 die_params = 4;
  for (int i = 0; i < this->die_params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->die_params(i), target);
  }

  // optional int32 total_score = 5;
  if (has_total_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total_score(), target);
  }

  // optional int32 base_rate = 6;
  if (has_base_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->base_rate(), target);
  }

  // optional int32 add_rate = 7 [default = 0];
  if (has_add_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->add_rate(), target);
  }

  // optional int32 ticket = 8 [default = 0];
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ticket(), target);
  }

  // optional bool getstar = 9 [default = false];
  if (has_getstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->getstar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_fishs_die::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_fishs_die];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 die_type = 3;
    if (has_die_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->die_type());
    }

    // optional int32 total_score = 5;
    if (has_total_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_score());
    }

    // optional int32 base_rate = 6;
    if (has_base_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_rate());
    }

    // optional int32 add_rate = 7 [default = 0];
    if (has_add_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_rate());
    }

    // optional int32 ticket = 8 [default = 0];
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ticket());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool getstar = 9 [default = false];
    if (has_getstar()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 die_params = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->die_params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->die_params(i));
    }
    total_size += 1 * this->die_params_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_fishs_die::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_fishs_die* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_fishs_die*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_fishs_die::MergeFrom(const packetl2c_bc_fishs_die& from) {
  GOOGLE_CHECK_NE(&from, this);
  die_params_.MergeFrom(from.die_params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_die_type()) {
      set_die_type(from.die_type());
    }
    if (from.has_total_score()) {
      set_total_score(from.total_score());
    }
    if (from.has_base_rate()) {
      set_base_rate(from.base_rate());
    }
    if (from.has_add_rate()) {
      set_add_rate(from.add_rate());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_getstar()) {
      set_getstar(from.getstar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_fishs_die::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_fishs_die::CopyFrom(const packetl2c_bc_fishs_die& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_fishs_die::IsInitialized() const {

  return true;
}

void packetl2c_bc_fishs_die::Swap(packetl2c_bc_fishs_die* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(die_type_, other->die_type_);
    die_params_.Swap(&other->die_params_);
    std::swap(total_score_, other->total_score_);
    std::swap(base_rate_, other->base_rate_);
    std::swap(add_rate_, other->add_rate_);
    std::swap(ticket_, other->ticket_);
    std::swap(getstar_, other->getstar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_fishs_die::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_fishs_die_descriptor_;
  metadata.reflection = packetl2c_bc_fishs_die_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_change_scene::kPacketIdFieldNumber;
const int packetl2c_bc_change_scene::kSceneIdFieldNumber;
const int packetl2c_bc_change_scene::kLargeFishIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_change_scene::packetl2c_bc_change_scene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_change_scene::InitAsDefaultInstance() {
}

packetl2c_bc_change_scene::packetl2c_bc_change_scene(const packetl2c_bc_change_scene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_change_scene::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15209;
  scene_id_ = 0;
  large_fish_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_change_scene::~packetl2c_bc_change_scene() {
  SharedDtor();
}

void packetl2c_bc_change_scene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_change_scene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_change_scene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_change_scene_descriptor_;
}

const packetl2c_bc_change_scene& packetl2c_bc_change_scene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_change_scene* packetl2c_bc_change_scene::default_instance_ = NULL;

packetl2c_bc_change_scene* packetl2c_bc_change_scene::New() const {
  return new packetl2c_bc_change_scene;
}

void packetl2c_bc_change_scene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15209;
    scene_id_ = 0;
    large_fish_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_change_scene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_scene];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // optional int32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_large_fish_id;
        break;
      }

      // optional int32 large_fish_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_large_fish_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &large_fish_id_)));
          set_has_large_fish_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_change_scene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_scene];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene_id(), output);
  }

  // optional int32 large_fish_id = 3;
  if (has_large_fish_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->large_fish_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_change_scene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_scene];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene_id(), target);
  }

  // optional int32 large_fish_id = 3;
  if (has_large_fish_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->large_fish_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_change_scene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_scene];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

    // optional int32 large_fish_id = 3;
    if (has_large_fish_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->large_fish_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_change_scene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_change_scene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_change_scene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_change_scene::MergeFrom(const packetl2c_bc_change_scene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_large_fish_id()) {
      set_large_fish_id(from.large_fish_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_change_scene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_change_scene::CopyFrom(const packetl2c_bc_change_scene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_change_scene::IsInitialized() const {

  return true;
}

void packetl2c_bc_change_scene::Swap(packetl2c_bc_change_scene* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(large_fish_id_, other->large_fish_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_change_scene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_change_scene_descriptor_;
  metadata.reflection = packetl2c_bc_change_scene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_freeze::kPacketIdFieldNumber;
const int packetl2c_bc_freeze::kFreezeTimeFieldNumber;
const int packetl2c_bc_freeze::kIsShowFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_freeze::packetl2c_bc_freeze()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_freeze::InitAsDefaultInstance() {
}

packetl2c_bc_freeze::packetl2c_bc_freeze(const packetl2c_bc_freeze& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_freeze::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15217;
  freeze_time_ = 0;
  is_show_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_freeze::~packetl2c_bc_freeze() {
  SharedDtor();
}

void packetl2c_bc_freeze::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_freeze::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_freeze::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_freeze_descriptor_;
}

const packetl2c_bc_freeze& packetl2c_bc_freeze::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_freeze* packetl2c_bc_freeze::default_instance_ = NULL;

packetl2c_bc_freeze* packetl2c_bc_freeze::New() const {
  return new packetl2c_bc_freeze;
}

void packetl2c_bc_freeze::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15217;
    freeze_time_ = 0;
    is_show_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_freeze::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_freeze];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_freeze_Time;
        break;
      }

      // optional int32 freeze_Time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeze_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freeze_time_)));
          set_has_freeze_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_show;
        break;
      }

      // optional bool is_show = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_show_)));
          set_has_is_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_freeze::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_freeze];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 freeze_Time = 2;
  if (has_freeze_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->freeze_time(), output);
  }

  // optional bool is_show = 3;
  if (has_is_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_show(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_freeze::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_freeze];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 freeze_Time = 2;
  if (has_freeze_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->freeze_time(), target);
  }

  // optional bool is_show = 3;
  if (has_is_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_show(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_freeze::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_freeze];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 freeze_Time = 2;
    if (has_freeze_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freeze_time());
    }

    // optional bool is_show = 3;
    if (has_is_show()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_freeze::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_freeze* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_freeze*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_freeze::MergeFrom(const packetl2c_bc_freeze& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_freeze_time()) {
      set_freeze_time(from.freeze_time());
    }
    if (from.has_is_show()) {
      set_is_show(from.is_show());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_freeze::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_freeze::CopyFrom(const packetl2c_bc_freeze& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_freeze::IsInitialized() const {

  return true;
}

void packetl2c_bc_freeze::Swap(packetl2c_bc_freeze* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(freeze_time_, other->freeze_time_);
    std::swap(is_show_, other->is_show_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_freeze::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_freeze_descriptor_;
  metadata.reflection = packetl2c_bc_freeze_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_change_scene_bg::kPacketIdFieldNumber;
const int packetl2c_bc_change_scene_bg::kSceneIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_change_scene_bg::packetl2c_bc_change_scene_bg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_change_scene_bg::InitAsDefaultInstance() {
}

packetl2c_bc_change_scene_bg::packetl2c_bc_change_scene_bg(const packetl2c_bc_change_scene_bg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_change_scene_bg::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15220;
  scene_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_change_scene_bg::~packetl2c_bc_change_scene_bg() {
  SharedDtor();
}

void packetl2c_bc_change_scene_bg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_change_scene_bg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_change_scene_bg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_change_scene_bg_descriptor_;
}

const packetl2c_bc_change_scene_bg& packetl2c_bc_change_scene_bg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_change_scene_bg* packetl2c_bc_change_scene_bg::default_instance_ = NULL;

packetl2c_bc_change_scene_bg* packetl2c_bc_change_scene_bg::New() const {
  return new packetl2c_bc_change_scene_bg;
}

void packetl2c_bc_change_scene_bg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15220;
    scene_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_change_scene_bg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_scene_bg];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // optional int32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_change_scene_bg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_scene_bg];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_change_scene_bg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_scene_bg];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_change_scene_bg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_scene_bg];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_change_scene_bg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_change_scene_bg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_change_scene_bg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_change_scene_bg::MergeFrom(const packetl2c_bc_change_scene_bg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_change_scene_bg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_change_scene_bg::CopyFrom(const packetl2c_bc_change_scene_bg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_change_scene_bg::IsInitialized() const {

  return true;
}

void packetl2c_bc_change_scene_bg::Swap(packetl2c_bc_change_scene_bg* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_change_scene_bg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_change_scene_bg_descriptor_;
  metadata.reflection = packetl2c_bc_change_scene_bg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_scene_time::kPacketIdFieldNumber;
const int packetl2c_bc_scene_time::kSceneTimeFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_scene_time::packetl2c_bc_scene_time()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_scene_time::InitAsDefaultInstance() {
}

packetl2c_bc_scene_time::packetl2c_bc_scene_time(const packetl2c_bc_scene_time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_scene_time::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15221;
  scene_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_scene_time::~packetl2c_bc_scene_time() {
  SharedDtor();
}

void packetl2c_bc_scene_time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_scene_time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_scene_time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_scene_time_descriptor_;
}

const packetl2c_bc_scene_time& packetl2c_bc_scene_time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_scene_time* packetl2c_bc_scene_time::default_instance_ = NULL;

packetl2c_bc_scene_time* packetl2c_bc_scene_time::New() const {
  return new packetl2c_bc_scene_time;
}

void packetl2c_bc_scene_time::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15221;
    scene_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_scene_time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_time];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_time;
        break;
      }

      // optional int32 scene_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_time_)));
          set_has_scene_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_scene_time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_time];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 scene_time = 2;
  if (has_scene_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_scene_time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_time];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 scene_time = 2;
  if (has_scene_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_scene_time::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_time];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 scene_time = 2;
    if (has_scene_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_scene_time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_scene_time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_scene_time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_scene_time::MergeFrom(const packetl2c_bc_scene_time& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_scene_time()) {
      set_scene_time(from.scene_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_scene_time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_scene_time::CopyFrom(const packetl2c_bc_scene_time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_scene_time::IsInitialized() const {

  return true;
}

void packetl2c_bc_scene_time::Swap(packetl2c_bc_scene_time* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(scene_time_, other->scene_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_scene_time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_scene_time_descriptor_;
  metadata.reflection = packetl2c_bc_scene_time_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_hit_fishs::kPacketIdFieldNumber;
const int packetl2c_bc_hit_fishs::kPlayerIdFieldNumber;
const int packetl2c_bc_hit_fishs::kHitTypeFieldNumber;
const int packetl2c_bc_hit_fishs::kFishIdsFieldNumber;
const int packetl2c_bc_hit_fishs::kParamsFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_hit_fishs::packetl2c_bc_hit_fishs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_hit_fishs::InitAsDefaultInstance() {
}

packetl2c_bc_hit_fishs::packetl2c_bc_hit_fishs(const packetl2c_bc_hit_fishs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_hit_fishs::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15223;
  player_id_ = 0;
  hit_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_hit_fishs::~packetl2c_bc_hit_fishs() {
  SharedDtor();
}

void packetl2c_bc_hit_fishs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_hit_fishs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_hit_fishs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_hit_fishs_descriptor_;
}

const packetl2c_bc_hit_fishs& packetl2c_bc_hit_fishs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_hit_fishs* packetl2c_bc_hit_fishs::default_instance_ = NULL;

packetl2c_bc_hit_fishs* packetl2c_bc_hit_fishs::New() const {
  return new packetl2c_bc_hit_fishs;
}

void packetl2c_bc_hit_fishs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15223;
    player_id_ = 0;
    hit_type_ = 0;
  }
  fish_ids_.Clear();
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_hit_fishs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_hit_fishs];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hit_type;
        break;
      }

      // optional int32 hit_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_type_)));
          set_has_hit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fish_ids;
        break;
      }

      // repeated int32 fish_ids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_fish_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fish_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fish_ids;
        if (input->ExpectTag(40)) goto parse_params;
        break;
      }

      // repeated int32 params = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_params())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_params())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_hit_fishs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_hit_fishs];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 hit_type = 3;
  if (has_hit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hit_type(), output);
  }

  // repeated int32 fish_ids = 4;
  for (int i = 0; i < this->fish_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->fish_ids(i), output);
  }

  // repeated int32 params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_hit_fishs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_hit_fishs];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 hit_type = 3;
  if (has_hit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hit_type(), target);
  }

  // repeated int32 fish_ids = 4;
  for (int i = 0; i < this->fish_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->fish_ids(i), target);
  }

  // repeated int32 params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_hit_fishs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_hit_fishs];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 hit_type = 3;
    if (has_hit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit_type());
    }

  }
  // repeated int32 fish_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->fish_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fish_ids(i));
    }
    total_size += 1 * this->fish_ids_size() + data_size;
  }

  // repeated int32 params = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->params(i));
    }
    total_size += 1 * this->params_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_hit_fishs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_hit_fishs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_hit_fishs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_hit_fishs::MergeFrom(const packetl2c_bc_hit_fishs& from) {
  GOOGLE_CHECK_NE(&from, this);
  fish_ids_.MergeFrom(from.fish_ids_);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_hit_type()) {
      set_hit_type(from.hit_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_hit_fishs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_hit_fishs::CopyFrom(const packetl2c_bc_hit_fishs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_hit_fishs::IsInitialized() const {

  return true;
}

void packetl2c_bc_hit_fishs::Swap(packetl2c_bc_hit_fishs* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(hit_type_, other->hit_type_);
    fish_ids_.Swap(&other->fish_ids_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_hit_fishs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_hit_fishs_descriptor_;
  metadata.reflection = packetl2c_bc_hit_fishs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_turret_rotate::kPacketIdFieldNumber;
const int packetl2c_bc_turret_rotate::kPlayerIdFieldNumber;
const int packetl2c_bc_turret_rotate::kRotateAngleFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_turret_rotate::packetl2c_bc_turret_rotate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_turret_rotate::InitAsDefaultInstance() {
}

packetl2c_bc_turret_rotate::packetl2c_bc_turret_rotate(const packetl2c_bc_turret_rotate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_turret_rotate::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15224;
  player_id_ = 0;
  rotate_angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_turret_rotate::~packetl2c_bc_turret_rotate() {
  SharedDtor();
}

void packetl2c_bc_turret_rotate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_turret_rotate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_turret_rotate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_turret_rotate_descriptor_;
}

const packetl2c_bc_turret_rotate& packetl2c_bc_turret_rotate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishpark_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_turret_rotate* packetl2c_bc_turret_rotate::default_instance_ = NULL;

packetl2c_bc_turret_rotate* packetl2c_bc_turret_rotate::New() const {
  return new packetl2c_bc_turret_rotate;
}

void packetl2c_bc_turret_rotate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15224;
    player_id_ = 0;
    rotate_angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_turret_rotate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_turret_rotate];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fishpark_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fishpark_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rotate_angle;
        break;
      }

      // optional int32 rotate_angle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rotate_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rotate_angle_)));
          set_has_rotate_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_turret_rotate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_turret_rotate];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 rotate_angle = 3;
  if (has_rotate_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rotate_angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_turret_rotate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_turret_rotate];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 rotate_angle = 3;
  if (has_rotate_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rotate_angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_turret_rotate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fishpark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_turret_rotate];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 rotate_angle = 3;
    if (has_rotate_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rotate_angle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_turret_rotate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_turret_rotate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_turret_rotate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_turret_rotate::MergeFrom(const packetl2c_bc_turret_rotate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_rotate_angle()) {
      set_rotate_angle(from.rotate_angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_turret_rotate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_turret_rotate::CopyFrom(const packetl2c_bc_turret_rotate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_turret_rotate::IsInitialized() const {

  return true;
}

void packetl2c_bc_turret_rotate::Swap(packetl2c_bc_turret_rotate* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(rotate_angle_, other->rotate_angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_turret_rotate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_turret_rotate_descriptor_;
  metadata.reflection = packetl2c_bc_turret_rotate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fishpark_protocols

// @@protoc_insertion_point(global_scope)
