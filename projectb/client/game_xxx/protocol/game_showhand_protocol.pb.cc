// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_showhand_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_showhand_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game_showhand_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2l_get_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_room_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_room_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_enter_game_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_enter_game_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_enter_game_room_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_enter_game_room_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_control_enter_game_room_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_control_enter_game_room_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_quit_game_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_quit_game_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_quit_game_room_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_quit_game_room_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_choose_desk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_choose_desk_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_choose_desk_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_choose_desk_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_remove_rob_desk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_remove_rob_desk_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_remove_rob_desk_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_remove_rob_desk_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_get_table_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_table_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_table_scene_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_table_scene_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_quit_desk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_quit_desk_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_l2c_quit_desk_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_l2c_quit_desk_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_player_ready_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_player_ready_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_player_ready_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_player_ready_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_view_card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_view_card_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_view_card_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_view_card_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bet_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bet_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_start_game_message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_start_game_message_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_control_message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_control_message_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_sendcard_message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_sendcard_message_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_bet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_bet_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_award_message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_award_message_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_check_message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_check_message_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_join_table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_join_table_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_leave_table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_leave_table_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_update_table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_update_table_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_table_player_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_table_player_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_check_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_check_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_check_state_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_check_state_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_control_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_control_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_control_change_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_control_change_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_gm_luck_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_gm_luck_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_offline_time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_offline_time_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_out_time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_out_time_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_debuginfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_debuginfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto() {
  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_showhand_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2l_get_room_info_descriptor_ = file->message_type(0);
  static const int packetc2l_get_room_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, packet_id_),
  };
  packetc2l_get_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_room_info_descriptor_,
      packetc2l_get_room_info::default_instance_,
      packetc2l_get_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_room_info));
  packetl2c_get_room_info_result_descriptor_ = file->message_type(1);
  static const int packetl2c_get_room_info_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, room_ids_),
  };
  packetl2c_get_room_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_room_info_result_descriptor_,
      packetl2c_get_room_info_result::default_instance_,
      packetl2c_get_room_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_room_info_result));
  packetc2l_enter_game_room_descriptor_ = file->message_type(2);
  static const int packetc2l_enter_game_room_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game_room, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game_room, room_id_),
  };
  packetc2l_enter_game_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_enter_game_room_descriptor_,
      packetc2l_enter_game_room::default_instance_,
      packetc2l_enter_game_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_enter_game_room));
  packetl2c_enter_game_room_result_descriptor_ = file->message_type(3);
  static const int packetl2c_enter_game_room_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_game_room_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_game_room_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_game_room_result, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_game_room_result, table_list_),
  };
  packetl2c_enter_game_room_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_enter_game_room_result_descriptor_,
      packetl2c_enter_game_room_result::default_instance_,
      packetl2c_enter_game_room_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_game_room_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_game_room_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_enter_game_room_result));
  packetl2c_control_enter_game_room_result_descriptor_ = file->message_type(4);
  static const int packetl2c_control_enter_game_room_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_control_enter_game_room_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_control_enter_game_room_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_control_enter_game_room_result, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_control_enter_game_room_result, table_list_),
  };
  packetl2c_control_enter_game_room_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_control_enter_game_room_result_descriptor_,
      packetl2c_control_enter_game_room_result::default_instance_,
      packetl2c_control_enter_game_room_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_control_enter_game_room_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_control_enter_game_room_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_control_enter_game_room_result));
  packetc2l_quit_game_room_descriptor_ = file->message_type(5);
  static const int packetc2l_quit_game_room_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_quit_game_room, packet_id_),
  };
  packetc2l_quit_game_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_quit_game_room_descriptor_,
      packetc2l_quit_game_room::default_instance_,
      packetc2l_quit_game_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_quit_game_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_quit_game_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_quit_game_room));
  packetl2c_quit_game_room_result_descriptor_ = file->message_type(6);
  static const int packetl2c_quit_game_room_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_quit_game_room_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_quit_game_room_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_quit_game_room_result, room_ids_),
  };
  packetl2c_quit_game_room_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_quit_game_room_result_descriptor_,
      packetl2c_quit_game_room_result::default_instance_,
      packetl2c_quit_game_room_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_quit_game_room_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_quit_game_room_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_quit_game_room_result));
  packetc2l_choose_desk_descriptor_ = file->message_type(7);
  static const int packetc2l_choose_desk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_choose_desk, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_choose_desk, table_id_),
  };
  packetc2l_choose_desk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_choose_desk_descriptor_,
      packetc2l_choose_desk::default_instance_,
      packetc2l_choose_desk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_choose_desk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_choose_desk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_choose_desk));
  packetl2c_choose_desk_result_descriptor_ = file->message_type(8);
  static const int packetl2c_choose_desk_result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_choose_desk_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_choose_desk_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_choose_desk_result, table_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_choose_desk_result, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_choose_desk_result, table_state_),
  };
  packetl2c_choose_desk_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_choose_desk_result_descriptor_,
      packetl2c_choose_desk_result::default_instance_,
      packetl2c_choose_desk_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_choose_desk_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_choose_desk_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_choose_desk_result));
  packetc2l_remove_rob_desk_descriptor_ = file->message_type(9);
  static const int packetc2l_remove_rob_desk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_remove_rob_desk, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_remove_rob_desk, table_id_),
  };
  packetc2l_remove_rob_desk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_remove_rob_desk_descriptor_,
      packetc2l_remove_rob_desk::default_instance_,
      packetc2l_remove_rob_desk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_remove_rob_desk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_remove_rob_desk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_remove_rob_desk));
  packetl2c_remove_rob_desk_result_descriptor_ = file->message_type(10);
  static const int packetl2c_remove_rob_desk_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_remove_rob_desk_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_remove_rob_desk_result, result_),
  };
  packetl2c_remove_rob_desk_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_remove_rob_desk_result_descriptor_,
      packetl2c_remove_rob_desk_result::default_instance_,
      packetl2c_remove_rob_desk_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_remove_rob_desk_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_remove_rob_desk_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_remove_rob_desk_result));
  packetc2l_get_table_scene_info_descriptor_ = file->message_type(11);
  static const int packetc2l_get_table_scene_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_table_scene_info, packet_id_),
  };
  packetc2l_get_table_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_table_scene_info_descriptor_,
      packetc2l_get_table_scene_info::default_instance_,
      packetc2l_get_table_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_table_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_table_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_table_scene_info));
  packetl2c_get_table_scene_result_descriptor_ = file->message_type(12);
  static const int packetl2c_get_table_scene_result_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_result, table_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_result, bet_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_result, bet_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_result, left_betcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_result, right_betcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_result, minbetcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_result, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_result, left_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_result, right_count_),
  };
  packetl2c_get_table_scene_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_table_scene_result_descriptor_,
      packetl2c_get_table_scene_result::default_instance_,
      packetl2c_get_table_scene_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_table_scene_result));
  packetc2l_quit_desk_descriptor_ = file->message_type(13);
  static const int packetc2l_quit_desk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_quit_desk, packet_id_),
  };
  packetc2l_quit_desk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_quit_desk_descriptor_,
      packetc2l_quit_desk::default_instance_,
      packetc2l_quit_desk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_quit_desk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_quit_desk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_quit_desk));
  packet_l2c_quit_desk_result_descriptor_ = file->message_type(14);
  static const int packet_l2c_quit_desk_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_l2c_quit_desk_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_l2c_quit_desk_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_l2c_quit_desk_result, table_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_l2c_quit_desk_result, room_id_),
  };
  packet_l2c_quit_desk_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_l2c_quit_desk_result_descriptor_,
      packet_l2c_quit_desk_result::default_instance_,
      packet_l2c_quit_desk_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_l2c_quit_desk_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_l2c_quit_desk_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_l2c_quit_desk_result));
  packetc2l_player_ready_descriptor_ = file->message_type(15);
  static const int packetc2l_player_ready_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_player_ready, packet_id_),
  };
  packetc2l_player_ready_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_player_ready_descriptor_,
      packetc2l_player_ready::default_instance_,
      packetc2l_player_ready_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_player_ready, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_player_ready, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_player_ready));
  packetl2c_player_ready_result_descriptor_ = file->message_type(16);
  static const int packetl2c_player_ready_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_ready_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_ready_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_ready_result, player_id_),
  };
  packetl2c_player_ready_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_player_ready_result_descriptor_,
      packetl2c_player_ready_result::default_instance_,
      packetl2c_player_ready_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_ready_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_ready_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_player_ready_result));
  packetc2l_view_card_descriptor_ = file->message_type(17);
  static const int packetc2l_view_card_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_view_card, packet_id_),
  };
  packetc2l_view_card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_view_card_descriptor_,
      packetc2l_view_card::default_instance_,
      packetc2l_view_card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_view_card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_view_card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_view_card));
  packetl2c_view_card_result_descriptor_ = file->message_type(18);
  static const int packetl2c_view_card_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_view_card_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_view_card_result, player_id_),
  };
  packetl2c_view_card_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_view_card_result_descriptor_,
      packetl2c_view_card_result::default_instance_,
      packetl2c_view_card_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_view_card_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_view_card_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_view_card_result));
  packetc2l_bet_info_descriptor_ = file->message_type(19);
  static const int packetc2l_bet_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bet_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bet_info, bet_info_),
  };
  packetc2l_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_bet_info_descriptor_,
      packetc2l_bet_info::default_instance_,
      packetc2l_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_bet_info));
  packetl2c_bet_info_result_descriptor_ = file->message_type(20);
  static const int packetl2c_bet_info_result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, bet_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, bet_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, player_id_),
  };
  packetl2c_bet_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bet_info_result_descriptor_,
      packetl2c_bet_info_result::default_instance_,
      packetl2c_bet_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bet_info_result));
  packetl2c_notice_start_game_message_descriptor_ = file->message_type(21);
  static const int packetl2c_notice_start_game_message_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_start_game_message, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_start_game_message, minbetcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_start_game_message, player_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_start_game_message, player_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_start_game_message, bet_state_),
  };
  packetl2c_notice_start_game_message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_start_game_message_descriptor_,
      packetl2c_notice_start_game_message::default_instance_,
      packetl2c_notice_start_game_message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_start_game_message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_start_game_message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_start_game_message));
  packetl2c_notice_control_message_descriptor_ = file->message_type(22);
  static const int packetl2c_notice_control_message_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_control_message, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_control_message, player_info_),
  };
  packetl2c_notice_control_message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_control_message_descriptor_,
      packetl2c_notice_control_message::default_instance_,
      packetl2c_notice_control_message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_control_message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_control_message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_control_message));
  packetl2c_notice_sendcard_message_descriptor_ = file->message_type(23);
  static const int packetl2c_notice_sendcard_message_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_sendcard_message, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_sendcard_message, player_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_sendcard_message, player_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_sendcard_message, bet_state_),
  };
  packetl2c_notice_sendcard_message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_sendcard_message_descriptor_,
      packetl2c_notice_sendcard_message::default_instance_,
      packetl2c_notice_sendcard_message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_sendcard_message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_sendcard_message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_sendcard_message));
  packetl2c_notice_bet_descriptor_ = file->message_type(24);
  static const int packetl2c_notice_bet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_bet, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_bet, bet_state_),
  };
  packetl2c_notice_bet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_bet_descriptor_,
      packetl2c_notice_bet::default_instance_,
      packetl2c_notice_bet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_bet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_bet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_bet));
  packetl2c_notice_award_message_descriptor_ = file->message_type(25);
  static const int packetl2c_notice_award_message_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_award_message, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_award_message, player_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_award_message, player_right_),
  };
  packetl2c_notice_award_message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_award_message_descriptor_,
      packetl2c_notice_award_message::default_instance_,
      packetl2c_notice_award_message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_award_message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_award_message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_award_message));
  packetl2c_notice_check_message_descriptor_ = file->message_type(26);
  static const int packetl2c_notice_check_message_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_check_message, packet_id_),
  };
  packetl2c_notice_check_message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_check_message_descriptor_,
      packetl2c_notice_check_message::default_instance_,
      packetl2c_notice_check_message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_check_message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_check_message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_check_message));
  packetl2c_notice_join_table_descriptor_ = file->message_type(27);
  static const int packetl2c_notice_join_table_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_join_table, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_join_table, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_join_table, player_info_),
  };
  packetl2c_notice_join_table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_join_table_descriptor_,
      packetl2c_notice_join_table::default_instance_,
      packetl2c_notice_join_table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_join_table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_join_table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_join_table));
  packetl2c_notice_leave_table_descriptor_ = file->message_type(28);
  static const int packetl2c_notice_leave_table_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_leave_table, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_leave_table, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_leave_table, player_id_),
  };
  packetl2c_notice_leave_table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_leave_table_descriptor_,
      packetl2c_notice_leave_table::default_instance_,
      packetl2c_notice_leave_table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_leave_table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_leave_table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_leave_table));
  packetl2c_notice_update_table_descriptor_ = file->message_type(29);
  static const int packetl2c_notice_update_table_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_update_table, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_update_table, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_update_table, player_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_update_table, player_right_),
  };
  packetl2c_notice_update_table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_update_table_descriptor_,
      packetl2c_notice_update_table::default_instance_,
      packetl2c_notice_update_table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_update_table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_update_table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_update_table));
  packetl2c_notice_table_player_state_descriptor_ = file->message_type(30);
  static const int packetl2c_notice_table_player_state_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_table_player_state, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_table_player_state, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_table_player_state, left_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_table_player_state, right_state_),
  };
  packetl2c_notice_table_player_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_table_player_state_descriptor_,
      packetl2c_notice_table_player_state::default_instance_,
      packetl2c_notice_table_player_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_table_player_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_table_player_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_table_player_state));
  packetc2l_check_state_descriptor_ = file->message_type(31);
  static const int packetc2l_check_state_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, packet_id_),
  };
  packetc2l_check_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_check_state_descriptor_,
      packetc2l_check_state::default_instance_,
      packetc2l_check_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_check_state));
  packetl2c_check_state_result_descriptor_ = file->message_type(32);
  static const int packetl2c_check_state_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, state_),
  };
  packetl2c_check_state_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_check_state_result_descriptor_,
      packetl2c_check_state_result::default_instance_,
      packetl2c_check_state_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_check_state_result));
  packetc2l_control_info_descriptor_ = file->message_type(33);
  static const int packetc2l_control_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_control_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_control_info, win_),
  };
  packetc2l_control_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_control_info_descriptor_,
      packetc2l_control_info::default_instance_,
      packetc2l_control_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_control_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_control_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_control_info));
  packetl2c_control_change_result_descriptor_ = file->message_type(34);
  static const int packetl2c_control_change_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_control_change_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_control_change_result, result_),
  };
  packetl2c_control_change_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_control_change_result_descriptor_,
      packetl2c_control_change_result::default_instance_,
      packetl2c_control_change_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_control_change_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_control_change_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_control_change_result));
  packetl2c_notice_gm_luck_info_descriptor_ = file->message_type(35);
  static const int packetl2c_notice_gm_luck_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_gm_luck_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_gm_luck_info, total_luck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_gm_luck_info, add_luck_),
  };
  packetl2c_notice_gm_luck_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_gm_luck_info_descriptor_,
      packetl2c_notice_gm_luck_info::default_instance_,
      packetl2c_notice_gm_luck_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_gm_luck_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_gm_luck_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_gm_luck_info));
  packetl2c_offline_time_descriptor_ = file->message_type(36);
  static const int packetl2c_offline_time_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_offline_time, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_offline_time, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_offline_time, offline_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_offline_time, bet_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_offline_time, bet_player_id_),
  };
  packetl2c_offline_time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_offline_time_descriptor_,
      packetl2c_offline_time::default_instance_,
      packetl2c_offline_time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_offline_time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_offline_time, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_offline_time));
  packetl2c_notice_out_time_descriptor_ = file->message_type(37);
  static const int packetl2c_notice_out_time_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_out_time, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_out_time, out_state_),
  };
  packetl2c_notice_out_time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_out_time_descriptor_,
      packetl2c_notice_out_time::default_instance_,
      packetl2c_notice_out_time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_out_time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_out_time, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_out_time));
  packetl2c_bc_debuginfo_descriptor_ = file->message_type(38);
  static const int packetl2c_bc_debuginfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, total_profit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, total_stock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, total_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, debug_infos_),
  };
  packetl2c_bc_debuginfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_debuginfo_descriptor_,
      packetl2c_bc_debuginfo::default_instance_,
      packetl2c_bc_debuginfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_debuginfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_room_info_descriptor_, &packetc2l_get_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_room_info_result_descriptor_, &packetl2c_get_room_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_enter_game_room_descriptor_, &packetc2l_enter_game_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_enter_game_room_result_descriptor_, &packetl2c_enter_game_room_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_control_enter_game_room_result_descriptor_, &packetl2c_control_enter_game_room_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_quit_game_room_descriptor_, &packetc2l_quit_game_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_quit_game_room_result_descriptor_, &packetl2c_quit_game_room_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_choose_desk_descriptor_, &packetc2l_choose_desk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_choose_desk_result_descriptor_, &packetl2c_choose_desk_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_remove_rob_desk_descriptor_, &packetc2l_remove_rob_desk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_remove_rob_desk_result_descriptor_, &packetl2c_remove_rob_desk_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_table_scene_info_descriptor_, &packetc2l_get_table_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_table_scene_result_descriptor_, &packetl2c_get_table_scene_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_quit_desk_descriptor_, &packetc2l_quit_desk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_l2c_quit_desk_result_descriptor_, &packet_l2c_quit_desk_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_player_ready_descriptor_, &packetc2l_player_ready::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_player_ready_result_descriptor_, &packetl2c_player_ready_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_view_card_descriptor_, &packetc2l_view_card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_view_card_result_descriptor_, &packetl2c_view_card_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_bet_info_descriptor_, &packetc2l_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bet_info_result_descriptor_, &packetl2c_bet_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_start_game_message_descriptor_, &packetl2c_notice_start_game_message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_control_message_descriptor_, &packetl2c_notice_control_message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_sendcard_message_descriptor_, &packetl2c_notice_sendcard_message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_bet_descriptor_, &packetl2c_notice_bet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_award_message_descriptor_, &packetl2c_notice_award_message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_check_message_descriptor_, &packetl2c_notice_check_message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_join_table_descriptor_, &packetl2c_notice_join_table::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_leave_table_descriptor_, &packetl2c_notice_leave_table::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_update_table_descriptor_, &packetl2c_notice_update_table::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_table_player_state_descriptor_, &packetl2c_notice_table_player_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_check_state_descriptor_, &packetc2l_check_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_check_state_result_descriptor_, &packetl2c_check_state_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_control_info_descriptor_, &packetc2l_control_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_control_change_result_descriptor_, &packetl2c_control_change_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_gm_luck_info_descriptor_, &packetl2c_notice_gm_luck_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_offline_time_descriptor_, &packetl2c_offline_time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_out_time_descriptor_, &packetl2c_notice_out_time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_debuginfo_descriptor_, &packetl2c_bc_debuginfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto() {
  delete packetc2l_get_room_info::default_instance_;
  delete packetc2l_get_room_info_reflection_;
  delete packetl2c_get_room_info_result::default_instance_;
  delete packetl2c_get_room_info_result_reflection_;
  delete packetc2l_enter_game_room::default_instance_;
  delete packetc2l_enter_game_room_reflection_;
  delete packetl2c_enter_game_room_result::default_instance_;
  delete packetl2c_enter_game_room_result_reflection_;
  delete packetl2c_control_enter_game_room_result::default_instance_;
  delete packetl2c_control_enter_game_room_result_reflection_;
  delete packetc2l_quit_game_room::default_instance_;
  delete packetc2l_quit_game_room_reflection_;
  delete packetl2c_quit_game_room_result::default_instance_;
  delete packetl2c_quit_game_room_result_reflection_;
  delete packetc2l_choose_desk::default_instance_;
  delete packetc2l_choose_desk_reflection_;
  delete packetl2c_choose_desk_result::default_instance_;
  delete packetl2c_choose_desk_result_reflection_;
  delete packetc2l_remove_rob_desk::default_instance_;
  delete packetc2l_remove_rob_desk_reflection_;
  delete packetl2c_remove_rob_desk_result::default_instance_;
  delete packetl2c_remove_rob_desk_result_reflection_;
  delete packetc2l_get_table_scene_info::default_instance_;
  delete packetc2l_get_table_scene_info_reflection_;
  delete packetl2c_get_table_scene_result::default_instance_;
  delete packetl2c_get_table_scene_result_reflection_;
  delete packetc2l_quit_desk::default_instance_;
  delete packetc2l_quit_desk_reflection_;
  delete packet_l2c_quit_desk_result::default_instance_;
  delete packet_l2c_quit_desk_result_reflection_;
  delete packetc2l_player_ready::default_instance_;
  delete packetc2l_player_ready_reflection_;
  delete packetl2c_player_ready_result::default_instance_;
  delete packetl2c_player_ready_result_reflection_;
  delete packetc2l_view_card::default_instance_;
  delete packetc2l_view_card_reflection_;
  delete packetl2c_view_card_result::default_instance_;
  delete packetl2c_view_card_result_reflection_;
  delete packetc2l_bet_info::default_instance_;
  delete packetc2l_bet_info_reflection_;
  delete packetl2c_bet_info_result::default_instance_;
  delete packetl2c_bet_info_result_reflection_;
  delete packetl2c_notice_start_game_message::default_instance_;
  delete packetl2c_notice_start_game_message_reflection_;
  delete packetl2c_notice_control_message::default_instance_;
  delete packetl2c_notice_control_message_reflection_;
  delete packetl2c_notice_sendcard_message::default_instance_;
  delete packetl2c_notice_sendcard_message_reflection_;
  delete packetl2c_notice_bet::default_instance_;
  delete packetl2c_notice_bet_reflection_;
  delete packetl2c_notice_award_message::default_instance_;
  delete packetl2c_notice_award_message_reflection_;
  delete packetl2c_notice_check_message::default_instance_;
  delete packetl2c_notice_check_message_reflection_;
  delete packetl2c_notice_join_table::default_instance_;
  delete packetl2c_notice_join_table_reflection_;
  delete packetl2c_notice_leave_table::default_instance_;
  delete packetl2c_notice_leave_table_reflection_;
  delete packetl2c_notice_update_table::default_instance_;
  delete packetl2c_notice_update_table_reflection_;
  delete packetl2c_notice_table_player_state::default_instance_;
  delete packetl2c_notice_table_player_state_reflection_;
  delete packetc2l_check_state::default_instance_;
  delete packetc2l_check_state_reflection_;
  delete packetl2c_check_state_result::default_instance_;
  delete packetl2c_check_state_result_reflection_;
  delete packetc2l_control_info::default_instance_;
  delete packetc2l_control_info_reflection_;
  delete packetl2c_control_change_result::default_instance_;
  delete packetl2c_control_change_result_reflection_;
  delete packetl2c_notice_gm_luck_info::default_instance_;
  delete packetl2c_notice_gm_luck_info_reflection_;
  delete packetl2c_offline_time::default_instance_;
  delete packetl2c_offline_time_reflection_;
  delete packetl2c_notice_out_time::default_instance_;
  delete packetl2c_notice_out_time_reflection_;
  delete packetl2c_bc_debuginfo::default_instance_;
  delete packetl2c_bc_debuginfo_reflection_;
}

void protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::game_showhand_protocols::protobuf_AddDesc_game_5fshowhand_5fdef_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034game_showhand_protocol.proto\022\027game_sho"
    "whand_protocols\032\027game_showhand_def.proto"
    "\032\022msg_type_def.proto\"q\n\027packetc2l_get_ro"
    "om_info\022V\n\tpacket_id\030\001 \001(\0162*.game_showha"
    "nd_protocols.e_server_msg_type:\027e_mst_c2"
    "l_get_room_info\"\221\001\n\036packetl2c_get_room_i"
    "nfo_result\022]\n\tpacket_id\030\001 \001(\0162*.game_sho"
    "whand_protocols.e_server_msg_type:\036e_mst"
    "_l2c_get_room_info_result\022\020\n\010room_ids\030\002 "
    "\003(\005\"\206\001\n\031packetc2l_enter_game_room\022X\n\tpac"
    "ket_id\030\001 \001(\0162*.game_showhand_protocols.e"
    "_server_msg_type:\031e_mst_c2l_enter_game_r"
    "oom\022\017\n\007room_id\030\002 \001(\005\"\201\002\n packetl2c_enter"
    "_game_room_result\022_\n\tpacket_id\030\001 \001(\0162*.g"
    "ame_showhand_protocols.e_server_msg_type"
    ": e_mst_l2c_enter_game_room_result\022.\n\006re"
    "sult\030\002 \001(\0162\036.msg_type_def.e_msg_result_d"
    "ef\022\017\n\007room_id\030\003 \001(\005\022;\n\ntable_list\030\004 \003(\0132"
    "\'.game_showhand_protocols.msg_table_info"
    "\"\221\002\n(packetl2c_control_enter_game_room_r"
    "esult\022g\n\tpacket_id\030\001 \001(\0162*.game_showhand"
    "_protocols.e_server_msg_type:(e_mst_l2c_"
    "control_enter_game_room_result\022.\n\006result"
    "\030\002 \001(\0162\036.msg_type_def.e_msg_result_def\022\017"
    "\n\007room_id\030\003 \001(\005\022;\n\ntable_list\030\004 \003(\0132\'.ga"
    "me_showhand_protocols.msg_table_info\"s\n\030"
    "packetc2l_quit_game_room\022W\n\tpacket_id\030\001 "
    "\001(\0162*.game_showhand_protocols.e_server_m"
    "sg_type:\030e_mst_c2l_quit_game_room\"\303\001\n\037pa"
    "cketl2c_quit_game_room_result\022^\n\tpacket_"
    "id\030\001 \001(\0162*.game_showhand_protocols.e_ser"
    "ver_msg_type:\037e_mst_l2c_quit_game_room_r"
    "esult\022.\n\006result\030\002 \001(\0162\036.msg_type_def.e_m"
    "sg_result_def\022\020\n\010room_ids\030\003 \003(\005\"\177\n\025packe"
    "tc2l_choose_desk\022T\n\tpacket_id\030\001 \001(\0162*.ga"
    "me_showhand_protocols.e_server_msg_type:"
    "\025e_mst_c2l_choose_desk\022\020\n\010table_id\030\002 \001(\005"
    "\"\216\002\n\034packetl2c_choose_desk_result\022[\n\tpac"
    "ket_id\030\001 \001(\0162*.game_showhand_protocols.e"
    "_server_msg_type:\034e_mst_l2c_choose_desk_"
    "result\022.\n\006result\030\002 \001(\0162\036.msg_type_def.e_"
    "msg_result_def\022;\n\ntable_info\030\003 \001(\0132\'.gam"
    "e_showhand_protocols.msg_table_info\022\017\n\007r"
    "oom_id\030\004 \001(\005\022\023\n\013table_state\030\005 \001(\005\"\207\001\n\031pa"
    "cketc2l_remove_rob_desk\022X\n\tpacket_id\030\001 \001"
    "(\0162*.game_showhand_protocols.e_server_ms"
    "g_type:\031e_mst_c2l_remove_rob_desk\022\020\n\010tab"
    "le_id\030\002 \001(\005\"\263\001\n packetl2c_remove_rob_des"
    "k_result\022_\n\tpacket_id\030\001 \001(\0162*.game_showh"
    "and_protocols.e_server_msg_type: e_mst_l"
    "2c_remove_rob_desk_result\022.\n\006result\030\002 \001("
    "\0162\036.msg_type_def.e_msg_result_def\"\177\n\036pac"
    "ketc2l_get_table_scene_info\022]\n\tpacket_id"
    "\030\001 \001(\0162*.game_showhand_protocols.e_serve"
    "r_msg_type:\036e_mst_c2l_get_table_scene_in"
    "fo\"\206\003\n packetl2c_get_table_scene_result\022"
    "]\n\tpacket_id\030\001 \001(\0162*.game_showhand_proto"
    "cols.e_server_msg_type:\036e_mst_l2c_get_ta"
    "ble_scene_info\022;\n\ntable_info\030\002 \001(\0132\'.gam"
    "e_showhand_protocols.msg_table_info\0227\n\tb"
    "et_state\030\003 \003(\0132$.game_showhand_protocols"
    ".p_bet_state\022\020\n\010bet_time\030\004 \001(\005\022\025\n\rleft_b"
    "etcount\030\005 \001(\003\022\026\n\016right_betcount\030\006 \001(\003\022\023\n"
    "\013minBetCount\030\007 \001(\003\022\016\n\006roomId\030\010 \001(\005\022\022\n\nle"
    "ft_count\030\t \001(\003\022\023\n\013right_count\030\n \001(\003\"i\n\023p"
    "acketc2l_quit_desk\022R\n\tpacket_id\030\001 \001(\0162*."
    "game_showhand_protocols.e_server_msg_typ"
    "e:\023e_mst_c2l_quit_desk\"\366\001\n\033packet_l2c_qu"
    "it_desk_result\022Y\n\tpacket_id\030\001 \001(\0162*.game"
    "_showhand_protocols.e_server_msg_type:\032e"
    "_mst_l2c_quit_desk_result\022.\n\006result\030\002 \001("
    "\0162\036.msg_type_def.e_msg_result_def\022;\n\ntab"
    "le_list\030\003 \003(\0132\'.game_showhand_protocols."
    "msg_table_info\022\017\n\007room_id\030\004 \001(\005\"o\n\026packe"
    "tc2l_player_ready\022U\n\tpacket_id\030\001 \001(\0162*.g"
    "ame_showhand_protocols.e_server_msg_type"
    ":\026e_mst_c2l_player_ready\"\300\001\n\035packetl2c_p"
    "layer_ready_result\022\\\n\tpacket_id\030\001 \001(\0162*."
    "game_showhand_protocols.e_server_msg_typ"
    "e:\035e_mst_l2c_player_ready_result\022.\n\006resu"
    "lt\030\002 \001(\0162\036.msg_type_def.e_msg_result_def"
    "\022\021\n\tplayer_id\030\003 \001(\005\"i\n\023packetc2l_view_ca"
    "rd\022R\n\tpacket_id\030\001 \001(\0162*.game_showhand_pr"
    "otocols.e_server_msg_type:\023e_mst_c2l_vie"
    "w_card\"\212\001\n\032packetl2c_view_card_result\022Y\n"
    "\tpacket_id\030\001 \001(\0162*.game_showhand_protoco"
    "ls.e_server_msg_type:\032e_mst_l2c_view_car"
    "d_result\022\021\n\tplayer_id\030\002 \001(\005\"\240\001\n\022packetc2"
    "l_bet_info\022Q\n\tpacket_id\030\001 \001(\0162*.game_sho"
    "whand_protocols.e_server_msg_type:\022e_mst"
    "_c2l_bet_info\0227\n\010bet_info\030\002 \001(\0132%.game_s"
    "howhand_protocols.msg_bet_info\"\377\001\n\031packe"
    "tl2c_bet_info_result\022S\n\tpacket_id\030\001 \001(\0162"
    "*.game_showhand_protocols.e_server_msg_t"
    "ype:\024e_mst_l2c_bet_result\022.\n\006result\030\002 \001("
    "\0162\036.msg_type_def.e_msg_result_def\0227\n\010bet"
    "_info\030\003 \001(\0132%.game_showhand_protocols.ms"
    "g_bet_info\022\021\n\tbet_count\030\004 \001(\003\022\021\n\tplayer_"
    "id\030\005 \001(\005\"\326\002\n#packetl2c_notice_start_game"
    "_message\022b\n\tpacket_id\030\001 \001(\0162*.game_showh"
    "and_protocols.e_server_msg_type:#e_mst_l"
    "2c_notice_start_game_message\022\023\n\013minBetCo"
    "unt\030\002 \001(\003\022=\n\013player_left\030\003 \001(\0132(.game_sh"
    "owhand_protocols.msg_player_info\022>\n\014play"
    "er_right\030\004 \001(\0132(.game_showhand_protocols"
    ".msg_player_info\0227\n\tbet_state\030\005 \003(\0132$.ga"
    "me_showhand_protocols.p_bet_state\"\302\001\n pa"
    "cketl2c_notice_control_message\022_\n\tpacket"
    "_id\030\001 \001(\0162*.game_showhand_protocols.e_se"
    "rver_msg_type: e_mst_l2c_notice_control_"
    "message\022=\n\013player_info\030\002 \001(\0132(.game_show"
    "hand_protocols.msg_player_info\"\351\001\n!packe"
    "tl2c_notice_sendcard_message\022`\n\tpacket_i"
    "d\030\001 \001(\0162*.game_showhand_protocols.e_serv"
    "er_msg_type:!e_mst_l2c_notice_sendcard_m"
    "essage\022\023\n\013player_left\030\002 \001(\005\022\024\n\014player_ri"
    "ght\030\003 \001(\005\0227\n\tbet_state\030\004 \003(\0132$.game_show"
    "hand_protocols.p_bet_state\"\262\001\n\024packetl2c"
    "_notice_bet\022a\n\tpacket_id\030\001 \001(\0162*.game_sh"
    "owhand_protocols.e_server_msg_type:\"e_ms"
    "t_l2c_notice_start_bet_message\0227\n\tbet_st"
    "ate\030\002 \003(\0132$.game_showhand_protocols.p_be"
    "t_state\"\210\002\n\036packetl2c_notice_award_messa"
    "ge\022c\n\tpacket_id\030\001 \001(\0162*.game_showhand_pr"
    "otocols.e_server_msg_type:$e_mst_l2c_not"
    "ice_start_award_message\022\?\n\013player_left\030\002"
    " \001(\0132*.game_showhand_protocols.msg_playe"
    "r_result\022@\n\014player_right\030\003 \001(\0132*.game_sh"
    "owhand_protocols.msg_player_result\"\177\n\036pa"
    "cketl2c_notice_check_message\022]\n\tpacket_i"
    "d\030\001 \001(\0162*.game_showhand_protocols.e_serv"
    "er_msg_type:\036e_mst_l2c_notice_check_mess"
    "age\"\322\001\n\033packetl2c_notice_join_table\022b\n\tp"
    "acket_id\030\001 \001(\0162*.game_showhand_protocols"
    ".e_server_msg_type:#e_mst_l2c_notice_joi"
    "n_table_message\022\020\n\010table_id\030\002 \001(\005\022=\n\013pla"
    "yer_info\030\003 \001(\0132(.game_showhand_protocols"
    ".msg_player_info\"\250\001\n\034packetl2c_notice_le"
    "ave_table\022c\n\tpacket_id\030\001 \001(\0162*.game_show"
    "hand_protocols.e_server_msg_type:$e_mst_"
    "l2c_notice_leave_table_message\022\020\n\010table_"
    "id\030\002 \001(\005\022\021\n\tplayer_id\030\003 \001(\005\"\226\002\n\035packetl2"
    "c_notice_update_table\022d\n\tpacket_id\030\001 \001(\016"
    "2*.game_showhand_protocols.e_server_msg_"
    "type:%e_mst_l2c_notice_update_table_mess"
    "age\022\020\n\010table_id\030\002 \001(\005\022=\n\013player_left\030\003 \001"
    "(\0132(.game_showhand_protocols.msg_player_"
    "info\022>\n\014player_right\030\004 \001(\0132(.game_showha"
    "nd_protocols.msg_player_info\"\306\001\n#packetl"
    "2c_notice_table_player_state\022d\n\tpacket_i"
    "d\030\001 \001(\0162*.game_showhand_protocols.e_serv"
    "er_msg_type:%e_mst_l2c_notice_table_play"
    "er_message\022\020\n\010table_id\030\002 \001(\r\022\022\n\nleft_sta"
    "te\030\003 \001(\r\022\023\n\013right_state\030\004 \001(\r\"m\n\025packetc"
    "2l_check_state\022T\n\tpacket_id\030\001 \001(\0162*.game"
    "_showhand_protocols.e_server_msg_type:\025e"
    "_mst_c2l_check_state\"\212\001\n\034packetl2c_check"
    "_state_result\022[\n\tpacket_id\030\001 \001(\0162*.game_"
    "showhand_protocols.e_server_msg_type:\034e_"
    "mst_l2c_check_state_result\022\r\n\005state\030\002 \001("
    "\r\"\200\001\n\026packetc2l_control_info\022Y\n\tpacket_i"
    "d\030\001 \001(\0162*.game_showhand_protocols.e_serv"
    "er_msg_type:\032e_mst_c2l_control_win_info\022"
    "\013\n\003win\030\002 \001(\005\"\300\001\n\037packetl2c_control_chang"
    "e_result\022^\n\tpacket_id\030\001 \001(\0162*.game_showh"
    "and_protocols.e_server_msg_type:\037e_mst_l"
    "2c_control_change_result\022=\n\006result\030\002 \001(\016"
    "2\036.msg_type_def.e_msg_result_def:\re_rmt_"
    "success\"\243\001\n\035packetl2c_notice_gm_luck_inf"
    "o\022\\\n\tpacket_id\030\001 \001(\0162*.game_showhand_pro"
    "tocols.e_server_msg_type:\035e_mst_l2c_noti"
    "ce_gm_luck_info\022\022\n\nTotal_Luck\030\002 \001(\003\022\020\n\010a"
    "dd_luck\030\003 \001(\003\"\302\001\n\026packetl2c_offline_time"
    "\022U\n\tpacket_id\030\001 \001(\0162*.game_showhand_prot"
    "ocols.e_server_msg_type:\026e_mst_l2c_offli"
    "ne_time\022\021\n\tplayer_id\030\002 \001(\005\022\025\n\roffline_st"
    "ate\030\003 \001(\005\022\020\n\010bet_time\030\004 \001(\005\022\025\n\rbet_playe"
    "r_id\030\005 \001(\005\"\201\001\n\031packetl2c_notice_out_time"
    "\022Q\n\tpacket_id\030\001 \001(\0162*.game_showhand_prot"
    "ocols.e_server_msg_type:\022e_mst_l2c_out_t"
    "ime\022\021\n\tout_state\030\002 \001(\005\"\337\001\n\026packetl2c_bc_"
    "debuginfo\022U\n\tpacket_id\030\001 \001(\0162*.game_show"
    "hand_protocols.e_server_msg_type:\026e_mst_"
    "l2c_bc_debuginfo\022\021\n\tplayer_id\030\002 \001(\005\022\027\n\014t"
    "otal_profit\030\003 \001(\003:\0010\022\026\n\013total_stock\030\004 \001("
    "\003:\0010\022\025\n\ntotal_Rate\030\006 \001(\003:\0010\022\023\n\013debug_inf"
    "os\030\005 \001(\t", 7448);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_showhand_protocol.proto", &protobuf_RegisterTypes);
  packetc2l_get_room_info::default_instance_ = new packetc2l_get_room_info();
  packetl2c_get_room_info_result::default_instance_ = new packetl2c_get_room_info_result();
  packetc2l_enter_game_room::default_instance_ = new packetc2l_enter_game_room();
  packetl2c_enter_game_room_result::default_instance_ = new packetl2c_enter_game_room_result();
  packetl2c_control_enter_game_room_result::default_instance_ = new packetl2c_control_enter_game_room_result();
  packetc2l_quit_game_room::default_instance_ = new packetc2l_quit_game_room();
  packetl2c_quit_game_room_result::default_instance_ = new packetl2c_quit_game_room_result();
  packetc2l_choose_desk::default_instance_ = new packetc2l_choose_desk();
  packetl2c_choose_desk_result::default_instance_ = new packetl2c_choose_desk_result();
  packetc2l_remove_rob_desk::default_instance_ = new packetc2l_remove_rob_desk();
  packetl2c_remove_rob_desk_result::default_instance_ = new packetl2c_remove_rob_desk_result();
  packetc2l_get_table_scene_info::default_instance_ = new packetc2l_get_table_scene_info();
  packetl2c_get_table_scene_result::default_instance_ = new packetl2c_get_table_scene_result();
  packetc2l_quit_desk::default_instance_ = new packetc2l_quit_desk();
  packet_l2c_quit_desk_result::default_instance_ = new packet_l2c_quit_desk_result();
  packetc2l_player_ready::default_instance_ = new packetc2l_player_ready();
  packetl2c_player_ready_result::default_instance_ = new packetl2c_player_ready_result();
  packetc2l_view_card::default_instance_ = new packetc2l_view_card();
  packetl2c_view_card_result::default_instance_ = new packetl2c_view_card_result();
  packetc2l_bet_info::default_instance_ = new packetc2l_bet_info();
  packetl2c_bet_info_result::default_instance_ = new packetl2c_bet_info_result();
  packetl2c_notice_start_game_message::default_instance_ = new packetl2c_notice_start_game_message();
  packetl2c_notice_control_message::default_instance_ = new packetl2c_notice_control_message();
  packetl2c_notice_sendcard_message::default_instance_ = new packetl2c_notice_sendcard_message();
  packetl2c_notice_bet::default_instance_ = new packetl2c_notice_bet();
  packetl2c_notice_award_message::default_instance_ = new packetl2c_notice_award_message();
  packetl2c_notice_check_message::default_instance_ = new packetl2c_notice_check_message();
  packetl2c_notice_join_table::default_instance_ = new packetl2c_notice_join_table();
  packetl2c_notice_leave_table::default_instance_ = new packetl2c_notice_leave_table();
  packetl2c_notice_update_table::default_instance_ = new packetl2c_notice_update_table();
  packetl2c_notice_table_player_state::default_instance_ = new packetl2c_notice_table_player_state();
  packetc2l_check_state::default_instance_ = new packetc2l_check_state();
  packetl2c_check_state_result::default_instance_ = new packetl2c_check_state_result();
  packetc2l_control_info::default_instance_ = new packetc2l_control_info();
  packetl2c_control_change_result::default_instance_ = new packetl2c_control_change_result();
  packetl2c_notice_gm_luck_info::default_instance_ = new packetl2c_notice_gm_luck_info();
  packetl2c_offline_time::default_instance_ = new packetl2c_offline_time();
  packetl2c_notice_out_time::default_instance_ = new packetl2c_notice_out_time();
  packetl2c_bc_debuginfo::default_instance_ = new packetl2c_bc_debuginfo();
  packetc2l_get_room_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_room_info_result::default_instance_->InitAsDefaultInstance();
  packetc2l_enter_game_room::default_instance_->InitAsDefaultInstance();
  packetl2c_enter_game_room_result::default_instance_->InitAsDefaultInstance();
  packetl2c_control_enter_game_room_result::default_instance_->InitAsDefaultInstance();
  packetc2l_quit_game_room::default_instance_->InitAsDefaultInstance();
  packetl2c_quit_game_room_result::default_instance_->InitAsDefaultInstance();
  packetc2l_choose_desk::default_instance_->InitAsDefaultInstance();
  packetl2c_choose_desk_result::default_instance_->InitAsDefaultInstance();
  packetc2l_remove_rob_desk::default_instance_->InitAsDefaultInstance();
  packetl2c_remove_rob_desk_result::default_instance_->InitAsDefaultInstance();
  packetc2l_get_table_scene_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_table_scene_result::default_instance_->InitAsDefaultInstance();
  packetc2l_quit_desk::default_instance_->InitAsDefaultInstance();
  packet_l2c_quit_desk_result::default_instance_->InitAsDefaultInstance();
  packetc2l_player_ready::default_instance_->InitAsDefaultInstance();
  packetl2c_player_ready_result::default_instance_->InitAsDefaultInstance();
  packetc2l_view_card::default_instance_->InitAsDefaultInstance();
  packetl2c_view_card_result::default_instance_->InitAsDefaultInstance();
  packetc2l_bet_info::default_instance_->InitAsDefaultInstance();
  packetl2c_bet_info_result::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_start_game_message::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_control_message::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_sendcard_message::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_bet::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_award_message::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_check_message::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_join_table::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_leave_table::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_update_table::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_table_player_state::default_instance_->InitAsDefaultInstance();
  packetc2l_check_state::default_instance_->InitAsDefaultInstance();
  packetl2c_check_state_result::default_instance_->InitAsDefaultInstance();
  packetc2l_control_info::default_instance_->InitAsDefaultInstance();
  packetl2c_control_change_result::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_gm_luck_info::default_instance_->InitAsDefaultInstance();
  packetl2c_offline_time::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_out_time::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_debuginfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fshowhand_5fprotocol_2eproto {
  StaticDescriptorInitializer_game_5fshowhand_5fprotocol_2eproto() {
    protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  }
} static_descriptor_initializer_game_5fshowhand_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_room_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_room_info::packetc2l_get_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_room_info::InitAsDefaultInstance() {
}

packetc2l_get_room_info::packetc2l_get_room_info(const packetc2l_get_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_room_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10001;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_room_info::~packetc2l_get_room_info() {
  SharedDtor();
}

void packetc2l_get_room_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_room_info_descriptor_;
}

const packetc2l_get_room_info& packetc2l_get_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_room_info* packetc2l_get_room_info::default_instance_ = NULL;

packetc2l_get_room_info* packetc2l_get_room_info::New() const {
  return new packetc2l_get_room_info;
}

void packetc2l_get_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10001;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_room_info::MergeFrom(const packetc2l_get_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_room_info::CopyFrom(const packetc2l_get_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_room_info::IsInitialized() const {

  return true;
}

void packetc2l_get_room_info::Swap(packetc2l_get_room_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_room_info_descriptor_;
  metadata.reflection = packetc2l_get_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_room_info_result::kPacketIdFieldNumber;
const int packetl2c_get_room_info_result::kRoomIdsFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_room_info_result::packetl2c_get_room_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_get_room_info_result::InitAsDefaultInstance() {
}

packetl2c_get_room_info_result::packetl2c_get_room_info_result(const packetl2c_get_room_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_get_room_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15001;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_room_info_result::~packetl2c_get_room_info_result() {
  SharedDtor();
}

void packetl2c_get_room_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_get_room_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_room_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_room_info_result_descriptor_;
}

const packetl2c_get_room_info_result& packetl2c_get_room_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_get_room_info_result* packetl2c_get_room_info_result::default_instance_ = NULL;

packetl2c_get_room_info_result* packetl2c_get_room_info_result::New() const {
  return new packetl2c_get_room_info_result;
}

void packetl2c_get_room_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15001;
  }
  room_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_room_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_ids;
        break;
      }

      // repeated int32 room_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_room_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_room_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_get_room_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated int32 room_ids = 2;
  for (int i = 0; i < this->room_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->room_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_get_room_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated int32 room_ids = 2;
  for (int i = 0; i < this->room_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->room_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_get_room_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated int32 room_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->room_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->room_ids(i));
    }
    total_size += 1 * this->room_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_room_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_room_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_room_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_room_info_result::MergeFrom(const packetl2c_get_room_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_ids_.MergeFrom(from.room_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_room_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_room_info_result::CopyFrom(const packetl2c_get_room_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_room_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_room_info_result::Swap(packetl2c_get_room_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    room_ids_.Swap(&other->room_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_room_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_room_info_result_descriptor_;
  metadata.reflection = packetl2c_get_room_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_enter_game_room::kPacketIdFieldNumber;
const int packetc2l_enter_game_room::kRoomIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_enter_game_room::packetc2l_enter_game_room()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_enter_game_room::InitAsDefaultInstance() {
}

packetc2l_enter_game_room::packetc2l_enter_game_room(const packetc2l_enter_game_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_enter_game_room::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10002;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_enter_game_room::~packetc2l_enter_game_room() {
  SharedDtor();
}

void packetc2l_enter_game_room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_enter_game_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_enter_game_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_enter_game_room_descriptor_;
}

const packetc2l_enter_game_room& packetc2l_enter_game_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_enter_game_room* packetc2l_enter_game_room::default_instance_ = NULL;

packetc2l_enter_game_room* packetc2l_enter_game_room::New() const {
  return new packetc2l_enter_game_room;
}

void packetc2l_enter_game_room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10002;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_enter_game_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_game_room];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_enter_game_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_game_room];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_enter_game_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_game_room];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_enter_game_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_game_room];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_enter_game_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_enter_game_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_enter_game_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_enter_game_room::MergeFrom(const packetc2l_enter_game_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_enter_game_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_enter_game_room::CopyFrom(const packetc2l_enter_game_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_enter_game_room::IsInitialized() const {

  return true;
}

void packetc2l_enter_game_room::Swap(packetc2l_enter_game_room* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_enter_game_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_enter_game_room_descriptor_;
  metadata.reflection = packetc2l_enter_game_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_enter_game_room_result::kPacketIdFieldNumber;
const int packetl2c_enter_game_room_result::kResultFieldNumber;
const int packetl2c_enter_game_room_result::kRoomIdFieldNumber;
const int packetl2c_enter_game_room_result::kTableListFieldNumber;
#endif  // !_MSC_VER

packetl2c_enter_game_room_result::packetl2c_enter_game_room_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_enter_game_room_result::InitAsDefaultInstance() {
}

packetl2c_enter_game_room_result::packetl2c_enter_game_room_result(const packetl2c_enter_game_room_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_enter_game_room_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15002;
  result_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_enter_game_room_result::~packetl2c_enter_game_room_result() {
  SharedDtor();
}

void packetl2c_enter_game_room_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_enter_game_room_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_enter_game_room_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_enter_game_room_result_descriptor_;
}

const packetl2c_enter_game_room_result& packetl2c_enter_game_room_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_enter_game_room_result* packetl2c_enter_game_room_result::default_instance_ = NULL;

packetl2c_enter_game_room_result* packetl2c_enter_game_room_result::New() const {
  return new packetl2c_enter_game_room_result;
}

void packetl2c_enter_game_room_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15002;
    result_ = 0;
    room_id_ = 0;
  }
  table_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_enter_game_room_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_game_room_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_table_list;
        break;
      }

      // repeated .game_showhand_protocols.msg_table_info table_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_table_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_enter_game_room_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_game_room_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  // repeated .game_showhand_protocols.msg_table_info table_list = 4;
  for (int i = 0; i < this->table_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->table_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_enter_game_room_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_game_room_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  // repeated .game_showhand_protocols.msg_table_info table_list = 4;
  for (int i = 0; i < this->table_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->table_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_enter_game_room_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_game_room_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  // repeated .game_showhand_protocols.msg_table_info table_list = 4;
  total_size += 1 * this->table_list_size();
  for (int i = 0; i < this->table_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_enter_game_room_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_enter_game_room_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_enter_game_room_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_enter_game_room_result::MergeFrom(const packetl2c_enter_game_room_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_list_.MergeFrom(from.table_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_enter_game_room_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_enter_game_room_result::CopyFrom(const packetl2c_enter_game_room_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_enter_game_room_result::IsInitialized() const {

  return true;
}

void packetl2c_enter_game_room_result::Swap(packetl2c_enter_game_room_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(room_id_, other->room_id_);
    table_list_.Swap(&other->table_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_enter_game_room_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_enter_game_room_result_descriptor_;
  metadata.reflection = packetl2c_enter_game_room_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_control_enter_game_room_result::kPacketIdFieldNumber;
const int packetl2c_control_enter_game_room_result::kResultFieldNumber;
const int packetl2c_control_enter_game_room_result::kRoomIdFieldNumber;
const int packetl2c_control_enter_game_room_result::kTableListFieldNumber;
#endif  // !_MSC_VER

packetl2c_control_enter_game_room_result::packetl2c_control_enter_game_room_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_control_enter_game_room_result::InitAsDefaultInstance() {
}

packetl2c_control_enter_game_room_result::packetl2c_control_enter_game_room_result(const packetl2c_control_enter_game_room_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_control_enter_game_room_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15012;
  result_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_control_enter_game_room_result::~packetl2c_control_enter_game_room_result() {
  SharedDtor();
}

void packetl2c_control_enter_game_room_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_control_enter_game_room_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_control_enter_game_room_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_control_enter_game_room_result_descriptor_;
}

const packetl2c_control_enter_game_room_result& packetl2c_control_enter_game_room_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_control_enter_game_room_result* packetl2c_control_enter_game_room_result::default_instance_ = NULL;

packetl2c_control_enter_game_room_result* packetl2c_control_enter_game_room_result::New() const {
  return new packetl2c_control_enter_game_room_result;
}

void packetl2c_control_enter_game_room_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15012;
    result_ = 0;
    room_id_ = 0;
  }
  table_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_control_enter_game_room_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_control_enter_game_room_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_table_list;
        break;
      }

      // repeated .game_showhand_protocols.msg_table_info table_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_table_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_control_enter_game_room_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_control_enter_game_room_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  // repeated .game_showhand_protocols.msg_table_info table_list = 4;
  for (int i = 0; i < this->table_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->table_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_control_enter_game_room_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_control_enter_game_room_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  // repeated .game_showhand_protocols.msg_table_info table_list = 4;
  for (int i = 0; i < this->table_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->table_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_control_enter_game_room_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_control_enter_game_room_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  // repeated .game_showhand_protocols.msg_table_info table_list = 4;
  total_size += 1 * this->table_list_size();
  for (int i = 0; i < this->table_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_control_enter_game_room_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_control_enter_game_room_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_control_enter_game_room_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_control_enter_game_room_result::MergeFrom(const packetl2c_control_enter_game_room_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_list_.MergeFrom(from.table_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_control_enter_game_room_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_control_enter_game_room_result::CopyFrom(const packetl2c_control_enter_game_room_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_control_enter_game_room_result::IsInitialized() const {

  return true;
}

void packetl2c_control_enter_game_room_result::Swap(packetl2c_control_enter_game_room_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(room_id_, other->room_id_);
    table_list_.Swap(&other->table_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_control_enter_game_room_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_control_enter_game_room_result_descriptor_;
  metadata.reflection = packetl2c_control_enter_game_room_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_quit_game_room::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_quit_game_room::packetc2l_quit_game_room()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_quit_game_room::InitAsDefaultInstance() {
}

packetc2l_quit_game_room::packetc2l_quit_game_room(const packetc2l_quit_game_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_quit_game_room::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10003;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_quit_game_room::~packetc2l_quit_game_room() {
  SharedDtor();
}

void packetc2l_quit_game_room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_quit_game_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_quit_game_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_quit_game_room_descriptor_;
}

const packetc2l_quit_game_room& packetc2l_quit_game_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_quit_game_room* packetc2l_quit_game_room::default_instance_ = NULL;

packetc2l_quit_game_room* packetc2l_quit_game_room::New() const {
  return new packetc2l_quit_game_room;
}

void packetc2l_quit_game_room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10003;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_quit_game_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_quit_game_room];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_quit_game_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_quit_game_room];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_quit_game_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_quit_game_room];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_quit_game_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_quit_game_room];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_quit_game_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_quit_game_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_quit_game_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_quit_game_room::MergeFrom(const packetc2l_quit_game_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_quit_game_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_quit_game_room::CopyFrom(const packetc2l_quit_game_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_quit_game_room::IsInitialized() const {

  return true;
}

void packetc2l_quit_game_room::Swap(packetc2l_quit_game_room* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_quit_game_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_quit_game_room_descriptor_;
  metadata.reflection = packetc2l_quit_game_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_quit_game_room_result::kPacketIdFieldNumber;
const int packetl2c_quit_game_room_result::kResultFieldNumber;
const int packetl2c_quit_game_room_result::kRoomIdsFieldNumber;
#endif  // !_MSC_VER

packetl2c_quit_game_room_result::packetl2c_quit_game_room_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_quit_game_room_result::InitAsDefaultInstance() {
}

packetl2c_quit_game_room_result::packetl2c_quit_game_room_result(const packetl2c_quit_game_room_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_quit_game_room_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15009;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_quit_game_room_result::~packetl2c_quit_game_room_result() {
  SharedDtor();
}

void packetl2c_quit_game_room_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_quit_game_room_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_quit_game_room_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_quit_game_room_result_descriptor_;
}

const packetl2c_quit_game_room_result& packetl2c_quit_game_room_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_quit_game_room_result* packetl2c_quit_game_room_result::default_instance_ = NULL;

packetl2c_quit_game_room_result* packetl2c_quit_game_room_result::New() const {
  return new packetl2c_quit_game_room_result;
}

void packetl2c_quit_game_room_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15009;
    result_ = 0;
  }
  room_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_quit_game_room_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_quit_game_room_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_ids;
        break;
      }

      // repeated int32 room_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_room_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_room_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_quit_game_room_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_quit_game_room_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // repeated int32 room_ids = 3;
  for (int i = 0; i < this->room_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->room_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_quit_game_room_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_quit_game_room_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // repeated int32 room_ids = 3;
  for (int i = 0; i < this->room_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->room_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_quit_game_room_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_quit_game_room_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated int32 room_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->room_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->room_ids(i));
    }
    total_size += 1 * this->room_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_quit_game_room_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_quit_game_room_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_quit_game_room_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_quit_game_room_result::MergeFrom(const packetl2c_quit_game_room_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_ids_.MergeFrom(from.room_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_quit_game_room_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_quit_game_room_result::CopyFrom(const packetl2c_quit_game_room_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_quit_game_room_result::IsInitialized() const {

  return true;
}

void packetl2c_quit_game_room_result::Swap(packetl2c_quit_game_room_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    room_ids_.Swap(&other->room_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_quit_game_room_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_quit_game_room_result_descriptor_;
  metadata.reflection = packetl2c_quit_game_room_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_choose_desk::kPacketIdFieldNumber;
const int packetc2l_choose_desk::kTableIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_choose_desk::packetc2l_choose_desk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_choose_desk::InitAsDefaultInstance() {
}

packetc2l_choose_desk::packetc2l_choose_desk(const packetc2l_choose_desk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_choose_desk::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10005;
  table_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_choose_desk::~packetc2l_choose_desk() {
  SharedDtor();
}

void packetc2l_choose_desk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_choose_desk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_choose_desk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_choose_desk_descriptor_;
}

const packetc2l_choose_desk& packetc2l_choose_desk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_choose_desk* packetc2l_choose_desk::default_instance_ = NULL;

packetc2l_choose_desk* packetc2l_choose_desk::New() const {
  return new packetc2l_choose_desk;
}

void packetc2l_choose_desk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10005;
    table_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_choose_desk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_choose_desk];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_table_id;
        break;
      }

      // optional int32 table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_choose_desk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_choose_desk];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 table_id = 2;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_choose_desk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_choose_desk];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 table_id = 2;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_choose_desk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_choose_desk];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 table_id = 2;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_choose_desk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_choose_desk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_choose_desk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_choose_desk::MergeFrom(const packetc2l_choose_desk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_choose_desk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_choose_desk::CopyFrom(const packetc2l_choose_desk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_choose_desk::IsInitialized() const {

  return true;
}

void packetc2l_choose_desk::Swap(packetc2l_choose_desk* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_choose_desk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_choose_desk_descriptor_;
  metadata.reflection = packetc2l_choose_desk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_choose_desk_result::kPacketIdFieldNumber;
const int packetl2c_choose_desk_result::kResultFieldNumber;
const int packetl2c_choose_desk_result::kTableInfoFieldNumber;
const int packetl2c_choose_desk_result::kRoomIdFieldNumber;
const int packetl2c_choose_desk_result::kTableStateFieldNumber;
#endif  // !_MSC_VER

packetl2c_choose_desk_result::packetl2c_choose_desk_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_choose_desk_result::InitAsDefaultInstance() {
  table_info_ = const_cast< ::game_showhand_protocols::msg_table_info*>(&::game_showhand_protocols::msg_table_info::default_instance());
}

packetl2c_choose_desk_result::packetl2c_choose_desk_result(const packetl2c_choose_desk_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_choose_desk_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15004;
  result_ = 0;
  table_info_ = NULL;
  room_id_ = 0;
  table_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_choose_desk_result::~packetl2c_choose_desk_result() {
  SharedDtor();
}

void packetl2c_choose_desk_result::SharedDtor() {
  if (this != default_instance_) {
    delete table_info_;
  }
}

void packetl2c_choose_desk_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_choose_desk_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_choose_desk_result_descriptor_;
}

const packetl2c_choose_desk_result& packetl2c_choose_desk_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_choose_desk_result* packetl2c_choose_desk_result::default_instance_ = NULL;

packetl2c_choose_desk_result* packetl2c_choose_desk_result::New() const {
  return new packetl2c_choose_desk_result;
}

void packetl2c_choose_desk_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15004;
    result_ = 0;
    if (has_table_info()) {
      if (table_info_ != NULL) table_info_->::game_showhand_protocols::msg_table_info::Clear();
    }
    room_id_ = 0;
    table_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_choose_desk_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_choose_desk_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table_info;
        break;
      }

      // optional .game_showhand_protocols.msg_table_info table_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_table_state;
        break;
      }

      // optional int32 table_state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_state_)));
          set_has_table_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_choose_desk_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_choose_desk_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional .game_showhand_protocols.msg_table_info table_info = 3;
  if (has_table_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->table_info(), output);
  }

  // optional int32 room_id = 4;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->room_id(), output);
  }

  // optional int32 table_state = 5;
  if (has_table_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->table_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_choose_desk_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_choose_desk_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional .game_showhand_protocols.msg_table_info table_info = 3;
  if (has_table_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->table_info(), target);
  }

  // optional int32 room_id = 4;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->room_id(), target);
  }

  // optional int32 table_state = 5;
  if (has_table_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->table_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_choose_desk_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_choose_desk_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .game_showhand_protocols.msg_table_info table_info = 3;
    if (has_table_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_info());
    }

    // optional int32 room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int32 table_state = 5;
    if (has_table_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_choose_desk_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_choose_desk_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_choose_desk_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_choose_desk_result::MergeFrom(const packetl2c_choose_desk_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_table_info()) {
      mutable_table_info()->::game_showhand_protocols::msg_table_info::MergeFrom(from.table_info());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_table_state()) {
      set_table_state(from.table_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_choose_desk_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_choose_desk_result::CopyFrom(const packetl2c_choose_desk_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_choose_desk_result::IsInitialized() const {

  return true;
}

void packetl2c_choose_desk_result::Swap(packetl2c_choose_desk_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(table_info_, other->table_info_);
    std::swap(room_id_, other->room_id_);
    std::swap(table_state_, other->table_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_choose_desk_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_choose_desk_result_descriptor_;
  metadata.reflection = packetl2c_choose_desk_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_remove_rob_desk::kPacketIdFieldNumber;
const int packetc2l_remove_rob_desk::kTableIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_remove_rob_desk::packetc2l_remove_rob_desk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_remove_rob_desk::InitAsDefaultInstance() {
}

packetc2l_remove_rob_desk::packetc2l_remove_rob_desk(const packetc2l_remove_rob_desk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_remove_rob_desk::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10013;
  table_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_remove_rob_desk::~packetc2l_remove_rob_desk() {
  SharedDtor();
}

void packetc2l_remove_rob_desk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_remove_rob_desk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_remove_rob_desk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_remove_rob_desk_descriptor_;
}

const packetc2l_remove_rob_desk& packetc2l_remove_rob_desk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_remove_rob_desk* packetc2l_remove_rob_desk::default_instance_ = NULL;

packetc2l_remove_rob_desk* packetc2l_remove_rob_desk::New() const {
  return new packetc2l_remove_rob_desk;
}

void packetc2l_remove_rob_desk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10013;
    table_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_remove_rob_desk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_remove_rob_desk];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_table_id;
        break;
      }

      // optional int32 table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_remove_rob_desk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_remove_rob_desk];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 table_id = 2;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_remove_rob_desk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_remove_rob_desk];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 table_id = 2;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_remove_rob_desk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_remove_rob_desk];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 table_id = 2;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_remove_rob_desk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_remove_rob_desk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_remove_rob_desk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_remove_rob_desk::MergeFrom(const packetc2l_remove_rob_desk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_remove_rob_desk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_remove_rob_desk::CopyFrom(const packetc2l_remove_rob_desk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_remove_rob_desk::IsInitialized() const {

  return true;
}

void packetc2l_remove_rob_desk::Swap(packetc2l_remove_rob_desk* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_remove_rob_desk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_remove_rob_desk_descriptor_;
  metadata.reflection = packetc2l_remove_rob_desk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_remove_rob_desk_result::kPacketIdFieldNumber;
const int packetl2c_remove_rob_desk_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_remove_rob_desk_result::packetl2c_remove_rob_desk_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_remove_rob_desk_result::InitAsDefaultInstance() {
}

packetl2c_remove_rob_desk_result::packetl2c_remove_rob_desk_result(const packetl2c_remove_rob_desk_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_remove_rob_desk_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15037;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_remove_rob_desk_result::~packetl2c_remove_rob_desk_result() {
  SharedDtor();
}

void packetl2c_remove_rob_desk_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_remove_rob_desk_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_remove_rob_desk_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_remove_rob_desk_result_descriptor_;
}

const packetl2c_remove_rob_desk_result& packetl2c_remove_rob_desk_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_remove_rob_desk_result* packetl2c_remove_rob_desk_result::default_instance_ = NULL;

packetl2c_remove_rob_desk_result* packetl2c_remove_rob_desk_result::New() const {
  return new packetl2c_remove_rob_desk_result;
}

void packetl2c_remove_rob_desk_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15037;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_remove_rob_desk_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_remove_rob_desk_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_remove_rob_desk_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_remove_rob_desk_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_remove_rob_desk_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_remove_rob_desk_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_remove_rob_desk_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_remove_rob_desk_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_remove_rob_desk_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_remove_rob_desk_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_remove_rob_desk_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_remove_rob_desk_result::MergeFrom(const packetl2c_remove_rob_desk_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_remove_rob_desk_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_remove_rob_desk_result::CopyFrom(const packetl2c_remove_rob_desk_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_remove_rob_desk_result::IsInitialized() const {

  return true;
}

void packetl2c_remove_rob_desk_result::Swap(packetl2c_remove_rob_desk_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_remove_rob_desk_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_remove_rob_desk_result_descriptor_;
  metadata.reflection = packetl2c_remove_rob_desk_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_table_scene_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_table_scene_info::packetc2l_get_table_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_table_scene_info::InitAsDefaultInstance() {
}

packetc2l_get_table_scene_info::packetc2l_get_table_scene_info(const packetc2l_get_table_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_table_scene_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10006;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_table_scene_info::~packetc2l_get_table_scene_info() {
  SharedDtor();
}

void packetc2l_get_table_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_table_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_table_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_table_scene_info_descriptor_;
}

const packetc2l_get_table_scene_info& packetc2l_get_table_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_table_scene_info* packetc2l_get_table_scene_info::default_instance_ = NULL;

packetc2l_get_table_scene_info* packetc2l_get_table_scene_info::New() const {
  return new packetc2l_get_table_scene_info;
}

void packetc2l_get_table_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10006;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_table_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_scene_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_table_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_table_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_table_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_table_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_table_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_table_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_table_scene_info::MergeFrom(const packetc2l_get_table_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_table_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_table_scene_info::CopyFrom(const packetc2l_get_table_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_table_scene_info::IsInitialized() const {

  return true;
}

void packetc2l_get_table_scene_info::Swap(packetc2l_get_table_scene_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_table_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_table_scene_info_descriptor_;
  metadata.reflection = packetc2l_get_table_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_table_scene_result::kPacketIdFieldNumber;
const int packetl2c_get_table_scene_result::kTableInfoFieldNumber;
const int packetl2c_get_table_scene_result::kBetStateFieldNumber;
const int packetl2c_get_table_scene_result::kBetTimeFieldNumber;
const int packetl2c_get_table_scene_result::kLeftBetcountFieldNumber;
const int packetl2c_get_table_scene_result::kRightBetcountFieldNumber;
const int packetl2c_get_table_scene_result::kMinBetCountFieldNumber;
const int packetl2c_get_table_scene_result::kRoomIdFieldNumber;
const int packetl2c_get_table_scene_result::kLeftCountFieldNumber;
const int packetl2c_get_table_scene_result::kRightCountFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_table_scene_result::packetl2c_get_table_scene_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_get_table_scene_result::InitAsDefaultInstance() {
  table_info_ = const_cast< ::game_showhand_protocols::msg_table_info*>(&::game_showhand_protocols::msg_table_info::default_instance());
}

packetl2c_get_table_scene_result::packetl2c_get_table_scene_result(const packetl2c_get_table_scene_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_get_table_scene_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15005;
  table_info_ = NULL;
  bet_time_ = 0;
  left_betcount_ = GOOGLE_LONGLONG(0);
  right_betcount_ = GOOGLE_LONGLONG(0);
  minbetcount_ = GOOGLE_LONGLONG(0);
  roomid_ = 0;
  left_count_ = GOOGLE_LONGLONG(0);
  right_count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_table_scene_result::~packetl2c_get_table_scene_result() {
  SharedDtor();
}

void packetl2c_get_table_scene_result::SharedDtor() {
  if (this != default_instance_) {
    delete table_info_;
  }
}

void packetl2c_get_table_scene_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_table_scene_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_table_scene_result_descriptor_;
}

const packetl2c_get_table_scene_result& packetl2c_get_table_scene_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_get_table_scene_result* packetl2c_get_table_scene_result::default_instance_ = NULL;

packetl2c_get_table_scene_result* packetl2c_get_table_scene_result::New() const {
  return new packetl2c_get_table_scene_result;
}

void packetl2c_get_table_scene_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15005;
    if (has_table_info()) {
      if (table_info_ != NULL) table_info_->::game_showhand_protocols::msg_table_info::Clear();
    }
    bet_time_ = 0;
    left_betcount_ = GOOGLE_LONGLONG(0);
    right_betcount_ = GOOGLE_LONGLONG(0);
    minbetcount_ = GOOGLE_LONGLONG(0);
    roomid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    left_count_ = GOOGLE_LONGLONG(0);
    right_count_ = GOOGLE_LONGLONG(0);
  }
  bet_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_table_scene_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_table_scene_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_info;
        break;
      }

      // optional .game_showhand_protocols.msg_table_info table_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bet_state;
        break;
      }

      // repeated .game_showhand_protocols.p_bet_state bet_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bet_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bet_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bet_state;
        if (input->ExpectTag(32)) goto parse_bet_time;
        break;
      }

      // optional int32 bet_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_time_)));
          set_has_bet_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_left_betcount;
        break;
      }

      // optional int64 left_betcount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_betcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &left_betcount_)));
          set_has_left_betcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_right_betcount;
        break;
      }

      // optional int64 right_betcount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right_betcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &right_betcount_)));
          set_has_right_betcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_minBetCount;
        break;
      }

      // optional int64 minBetCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minBetCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &minbetcount_)));
          set_has_minbetcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_roomId;
        break;
      }

      // optional int32 roomId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_left_count;
        break;
      }

      // optional int64 left_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &left_count_)));
          set_has_left_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_right_count;
        break;
      }

      // optional int64 right_count = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &right_count_)));
          set_has_right_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_get_table_scene_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_table_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_showhand_protocols.msg_table_info table_info = 2;
  if (has_table_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_info(), output);
  }

  // repeated .game_showhand_protocols.p_bet_state bet_state = 3;
  for (int i = 0; i < this->bet_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bet_state(i), output);
  }

  // optional int32 bet_time = 4;
  if (has_bet_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bet_time(), output);
  }

  // optional int64 left_betcount = 5;
  if (has_left_betcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->left_betcount(), output);
  }

  // optional int64 right_betcount = 6;
  if (has_right_betcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->right_betcount(), output);
  }

  // optional int64 minBetCount = 7;
  if (has_minbetcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->minbetcount(), output);
  }

  // optional int32 roomId = 8;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->roomid(), output);
  }

  // optional int64 left_count = 9;
  if (has_left_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->left_count(), output);
  }

  // optional int64 right_count = 10;
  if (has_right_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->right_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_get_table_scene_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_table_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_showhand_protocols.msg_table_info table_info = 2;
  if (has_table_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_info(), target);
  }

  // repeated .game_showhand_protocols.p_bet_state bet_state = 3;
  for (int i = 0; i < this->bet_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bet_state(i), target);
  }

  // optional int32 bet_time = 4;
  if (has_bet_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bet_time(), target);
  }

  // optional int64 left_betcount = 5;
  if (has_left_betcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->left_betcount(), target);
  }

  // optional int64 right_betcount = 6;
  if (has_right_betcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->right_betcount(), target);
  }

  // optional int64 minBetCount = 7;
  if (has_minbetcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->minbetcount(), target);
  }

  // optional int32 roomId = 8;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->roomid(), target);
  }

  // optional int64 left_count = 9;
  if (has_left_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->left_count(), target);
  }

  // optional int64 right_count = 10;
  if (has_right_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->right_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_get_table_scene_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_table_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_showhand_protocols.msg_table_info table_info = 2;
    if (has_table_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_info());
    }

    // optional int32 bet_time = 4;
    if (has_bet_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_time());
    }

    // optional int64 left_betcount = 5;
    if (has_left_betcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->left_betcount());
    }

    // optional int64 right_betcount = 6;
    if (has_right_betcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->right_betcount());
    }

    // optional int64 minBetCount = 7;
    if (has_minbetcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->minbetcount());
    }

    // optional int32 roomId = 8;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 left_count = 9;
    if (has_left_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->left_count());
    }

    // optional int64 right_count = 10;
    if (has_right_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->right_count());
    }

  }
  // repeated .game_showhand_protocols.p_bet_state bet_state = 3;
  total_size += 1 * this->bet_state_size();
  for (int i = 0; i < this->bet_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bet_state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_table_scene_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_table_scene_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_table_scene_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_table_scene_result::MergeFrom(const packetl2c_get_table_scene_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_state_.MergeFrom(from.bet_state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_table_info()) {
      mutable_table_info()->::game_showhand_protocols::msg_table_info::MergeFrom(from.table_info());
    }
    if (from.has_bet_time()) {
      set_bet_time(from.bet_time());
    }
    if (from.has_left_betcount()) {
      set_left_betcount(from.left_betcount());
    }
    if (from.has_right_betcount()) {
      set_right_betcount(from.right_betcount());
    }
    if (from.has_minbetcount()) {
      set_minbetcount(from.minbetcount());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_left_count()) {
      set_left_count(from.left_count());
    }
    if (from.has_right_count()) {
      set_right_count(from.right_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_table_scene_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_table_scene_result::CopyFrom(const packetl2c_get_table_scene_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_table_scene_result::IsInitialized() const {

  return true;
}

void packetl2c_get_table_scene_result::Swap(packetl2c_get_table_scene_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(table_info_, other->table_info_);
    bet_state_.Swap(&other->bet_state_);
    std::swap(bet_time_, other->bet_time_);
    std::swap(left_betcount_, other->left_betcount_);
    std::swap(right_betcount_, other->right_betcount_);
    std::swap(minbetcount_, other->minbetcount_);
    std::swap(roomid_, other->roomid_);
    std::swap(left_count_, other->left_count_);
    std::swap(right_count_, other->right_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_table_scene_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_table_scene_result_descriptor_;
  metadata.reflection = packetl2c_get_table_scene_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_quit_desk::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_quit_desk::packetc2l_quit_desk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_quit_desk::InitAsDefaultInstance() {
}

packetc2l_quit_desk::packetc2l_quit_desk(const packetc2l_quit_desk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_quit_desk::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10007;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_quit_desk::~packetc2l_quit_desk() {
  SharedDtor();
}

void packetc2l_quit_desk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_quit_desk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_quit_desk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_quit_desk_descriptor_;
}

const packetc2l_quit_desk& packetc2l_quit_desk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_quit_desk* packetc2l_quit_desk::default_instance_ = NULL;

packetc2l_quit_desk* packetc2l_quit_desk::New() const {
  return new packetc2l_quit_desk;
}

void packetc2l_quit_desk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10007;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_quit_desk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_quit_desk];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_quit_desk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_quit_desk];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_quit_desk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_quit_desk];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_quit_desk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_quit_desk];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_quit_desk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_quit_desk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_quit_desk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_quit_desk::MergeFrom(const packetc2l_quit_desk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_quit_desk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_quit_desk::CopyFrom(const packetc2l_quit_desk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_quit_desk::IsInitialized() const {

  return true;
}

void packetc2l_quit_desk::Swap(packetc2l_quit_desk* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_quit_desk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_quit_desk_descriptor_;
  metadata.reflection = packetc2l_quit_desk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_l2c_quit_desk_result::kPacketIdFieldNumber;
const int packet_l2c_quit_desk_result::kResultFieldNumber;
const int packet_l2c_quit_desk_result::kTableListFieldNumber;
const int packet_l2c_quit_desk_result::kRoomIdFieldNumber;
#endif  // !_MSC_VER

packet_l2c_quit_desk_result::packet_l2c_quit_desk_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_l2c_quit_desk_result::InitAsDefaultInstance() {
}

packet_l2c_quit_desk_result::packet_l2c_quit_desk_result(const packet_l2c_quit_desk_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_l2c_quit_desk_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15010;
  result_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_l2c_quit_desk_result::~packet_l2c_quit_desk_result() {
  SharedDtor();
}

void packet_l2c_quit_desk_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet_l2c_quit_desk_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_l2c_quit_desk_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_l2c_quit_desk_result_descriptor_;
}

const packet_l2c_quit_desk_result& packet_l2c_quit_desk_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packet_l2c_quit_desk_result* packet_l2c_quit_desk_result::default_instance_ = NULL;

packet_l2c_quit_desk_result* packet_l2c_quit_desk_result::New() const {
  return new packet_l2c_quit_desk_result;
}

void packet_l2c_quit_desk_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15010;
    result_ = 0;
    room_id_ = 0;
  }
  table_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_l2c_quit_desk_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_quit_desk_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table_list;
        break;
      }

      // repeated .game_showhand_protocols.msg_table_info table_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table_list;
        if (input->ExpectTag(32)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_l2c_quit_desk_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_quit_desk_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // repeated .game_showhand_protocols.msg_table_info table_list = 3;
  for (int i = 0; i < this->table_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->table_list(i), output);
  }

  // optional int32 room_id = 4;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_l2c_quit_desk_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_quit_desk_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // repeated .game_showhand_protocols.msg_table_info table_list = 3;
  for (int i = 0; i < this->table_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->table_list(i), target);
  }

  // optional int32 room_id = 4;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_l2c_quit_desk_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_quit_desk_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  // repeated .game_showhand_protocols.msg_table_info table_list = 3;
  total_size += 1 * this->table_list_size();
  for (int i = 0; i < this->table_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_l2c_quit_desk_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_l2c_quit_desk_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_l2c_quit_desk_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_l2c_quit_desk_result::MergeFrom(const packet_l2c_quit_desk_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_list_.MergeFrom(from.table_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_l2c_quit_desk_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_l2c_quit_desk_result::CopyFrom(const packet_l2c_quit_desk_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_l2c_quit_desk_result::IsInitialized() const {

  return true;
}

void packet_l2c_quit_desk_result::Swap(packet_l2c_quit_desk_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    table_list_.Swap(&other->table_list_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_l2c_quit_desk_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_l2c_quit_desk_result_descriptor_;
  metadata.reflection = packet_l2c_quit_desk_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_player_ready::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_player_ready::packetc2l_player_ready()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_player_ready::InitAsDefaultInstance() {
}

packetc2l_player_ready::packetc2l_player_ready(const packetc2l_player_ready& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_player_ready::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10008;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_player_ready::~packetc2l_player_ready() {
  SharedDtor();
}

void packetc2l_player_ready::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_player_ready::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_player_ready::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_player_ready_descriptor_;
}

const packetc2l_player_ready& packetc2l_player_ready::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_player_ready* packetc2l_player_ready::default_instance_ = NULL;

packetc2l_player_ready* packetc2l_player_ready::New() const {
  return new packetc2l_player_ready;
}

void packetc2l_player_ready::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10008;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_player_ready::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_player_ready];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_player_ready::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_player_ready];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_player_ready::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_player_ready];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_player_ready::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_player_ready];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_player_ready::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_player_ready* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_player_ready*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_player_ready::MergeFrom(const packetc2l_player_ready& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_player_ready::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_player_ready::CopyFrom(const packetc2l_player_ready& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_player_ready::IsInitialized() const {

  return true;
}

void packetc2l_player_ready::Swap(packetc2l_player_ready* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_player_ready::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_player_ready_descriptor_;
  metadata.reflection = packetc2l_player_ready_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_player_ready_result::kPacketIdFieldNumber;
const int packetl2c_player_ready_result::kResultFieldNumber;
const int packetl2c_player_ready_result::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_player_ready_result::packetl2c_player_ready_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_player_ready_result::InitAsDefaultInstance() {
}

packetl2c_player_ready_result::packetl2c_player_ready_result(const packetl2c_player_ready_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_player_ready_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15006;
  result_ = 0;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_player_ready_result::~packetl2c_player_ready_result() {
  SharedDtor();
}

void packetl2c_player_ready_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_player_ready_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_player_ready_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_player_ready_result_descriptor_;
}

const packetl2c_player_ready_result& packetl2c_player_ready_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_player_ready_result* packetl2c_player_ready_result::default_instance_ = NULL;

packetl2c_player_ready_result* packetl2c_player_ready_result::New() const {
  return new packetl2c_player_ready_result;
}

void packetl2c_player_ready_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15006;
    result_ = 0;
    player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_player_ready_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_ready_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_player_ready_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_ready_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_player_ready_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_ready_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_player_ready_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_ready_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_player_ready_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_player_ready_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_player_ready_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_player_ready_result::MergeFrom(const packetl2c_player_ready_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_player_ready_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_player_ready_result::CopyFrom(const packetl2c_player_ready_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_player_ready_result::IsInitialized() const {

  return true;
}

void packetl2c_player_ready_result::Swap(packetl2c_player_ready_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_player_ready_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_player_ready_result_descriptor_;
  metadata.reflection = packetl2c_player_ready_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_view_card::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_view_card::packetc2l_view_card()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_view_card::InitAsDefaultInstance() {
}

packetc2l_view_card::packetc2l_view_card(const packetc2l_view_card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_view_card::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10009;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_view_card::~packetc2l_view_card() {
  SharedDtor();
}

void packetc2l_view_card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_view_card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_view_card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_view_card_descriptor_;
}

const packetc2l_view_card& packetc2l_view_card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_view_card* packetc2l_view_card::default_instance_ = NULL;

packetc2l_view_card* packetc2l_view_card::New() const {
  return new packetc2l_view_card;
}

void packetc2l_view_card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10009;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_view_card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_view_card];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_view_card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_view_card];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_view_card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_view_card];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_view_card::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_view_card];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_view_card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_view_card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_view_card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_view_card::MergeFrom(const packetc2l_view_card& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_view_card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_view_card::CopyFrom(const packetc2l_view_card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_view_card::IsInitialized() const {

  return true;
}

void packetc2l_view_card::Swap(packetc2l_view_card* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_view_card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_view_card_descriptor_;
  metadata.reflection = packetc2l_view_card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_view_card_result::kPacketIdFieldNumber;
const int packetl2c_view_card_result::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_view_card_result::packetl2c_view_card_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_view_card_result::InitAsDefaultInstance() {
}

packetl2c_view_card_result::packetl2c_view_card_result(const packetl2c_view_card_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_view_card_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15007;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_view_card_result::~packetl2c_view_card_result() {
  SharedDtor();
}

void packetl2c_view_card_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_view_card_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_view_card_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_view_card_result_descriptor_;
}

const packetl2c_view_card_result& packetl2c_view_card_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_view_card_result* packetl2c_view_card_result::default_instance_ = NULL;

packetl2c_view_card_result* packetl2c_view_card_result::New() const {
  return new packetl2c_view_card_result;
}

void packetl2c_view_card_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15007;
    player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_view_card_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_view_card_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_view_card_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_view_card_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_view_card_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_view_card_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_view_card_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_view_card_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_view_card_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_view_card_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_view_card_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_view_card_result::MergeFrom(const packetl2c_view_card_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_view_card_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_view_card_result::CopyFrom(const packetl2c_view_card_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_view_card_result::IsInitialized() const {

  return true;
}

void packetl2c_view_card_result::Swap(packetl2c_view_card_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_view_card_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_view_card_result_descriptor_;
  metadata.reflection = packetl2c_view_card_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_bet_info::kPacketIdFieldNumber;
const int packetc2l_bet_info::kBetInfoFieldNumber;
#endif  // !_MSC_VER

packetc2l_bet_info::packetc2l_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_bet_info::InitAsDefaultInstance() {
  bet_info_ = const_cast< ::game_showhand_protocols::msg_bet_info*>(&::game_showhand_protocols::msg_bet_info::default_instance());
}

packetc2l_bet_info::packetc2l_bet_info(const packetc2l_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_bet_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10010;
  bet_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_bet_info::~packetc2l_bet_info() {
  SharedDtor();
}

void packetc2l_bet_info::SharedDtor() {
  if (this != default_instance_) {
    delete bet_info_;
  }
}

void packetc2l_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_bet_info_descriptor_;
}

const packetc2l_bet_info& packetc2l_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_bet_info* packetc2l_bet_info::default_instance_ = NULL;

packetc2l_bet_info* packetc2l_bet_info::New() const {
  return new packetc2l_bet_info;
}

void packetc2l_bet_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10010;
    if (has_bet_info()) {
      if (bet_info_ != NULL) bet_info_->::game_showhand_protocols::msg_bet_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bet_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bet_info;
        break;
      }

      // optional .game_showhand_protocols.msg_bet_info bet_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bet_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bet_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bet_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_showhand_protocols.msg_bet_info bet_info = 2;
  if (has_bet_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bet_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bet_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_showhand_protocols.msg_bet_info bet_info = 2;
  if (has_bet_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bet_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_bet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bet_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_showhand_protocols.msg_bet_info bet_info = 2;
    if (has_bet_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bet_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_bet_info::MergeFrom(const packetc2l_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_bet_info()) {
      mutable_bet_info()->::game_showhand_protocols::msg_bet_info::MergeFrom(from.bet_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_bet_info::CopyFrom(const packetc2l_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_bet_info::IsInitialized() const {

  return true;
}

void packetc2l_bet_info::Swap(packetc2l_bet_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(bet_info_, other->bet_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_bet_info_descriptor_;
  metadata.reflection = packetc2l_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bet_info_result::kPacketIdFieldNumber;
const int packetl2c_bet_info_result::kResultFieldNumber;
const int packetl2c_bet_info_result::kBetInfoFieldNumber;
const int packetl2c_bet_info_result::kBetCountFieldNumber;
const int packetl2c_bet_info_result::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_bet_info_result::packetl2c_bet_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bet_info_result::InitAsDefaultInstance() {
  bet_info_ = const_cast< ::game_showhand_protocols::msg_bet_info*>(&::game_showhand_protocols::msg_bet_info::default_instance());
}

packetl2c_bet_info_result::packetl2c_bet_info_result(const packetl2c_bet_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bet_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15008;
  result_ = 0;
  bet_info_ = NULL;
  bet_count_ = GOOGLE_LONGLONG(0);
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bet_info_result::~packetl2c_bet_info_result() {
  SharedDtor();
}

void packetl2c_bet_info_result::SharedDtor() {
  if (this != default_instance_) {
    delete bet_info_;
  }
}

void packetl2c_bet_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bet_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bet_info_result_descriptor_;
}

const packetl2c_bet_info_result& packetl2c_bet_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bet_info_result* packetl2c_bet_info_result::default_instance_ = NULL;

packetl2c_bet_info_result* packetl2c_bet_info_result::New() const {
  return new packetl2c_bet_info_result;
}

void packetl2c_bet_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15008;
    result_ = 0;
    if (has_bet_info()) {
      if (bet_info_ != NULL) bet_info_->::game_showhand_protocols::msg_bet_info::Clear();
    }
    bet_count_ = GOOGLE_LONGLONG(0);
    player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bet_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bet_info;
        break;
      }

      // optional .game_showhand_protocols.msg_bet_info bet_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bet_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bet_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bet_count;
        break;
      }

      // optional int64 bet_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_count_)));
          set_has_bet_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bet_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional .game_showhand_protocols.msg_bet_info bet_info = 3;
  if (has_bet_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bet_info(), output);
  }

  // optional int64 bet_count = 4;
  if (has_bet_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->bet_count(), output);
  }

  // optional int32 player_id = 5;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bet_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional .game_showhand_protocols.msg_bet_info bet_info = 3;
  if (has_bet_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bet_info(), target);
  }

  // optional int64 bet_count = 4;
  if (has_bet_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->bet_count(), target);
  }

  // optional int32 player_id = 5;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bet_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .game_showhand_protocols.msg_bet_info bet_info = 3;
    if (has_bet_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bet_info());
    }

    // optional int64 bet_count = 4;
    if (has_bet_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_count());
    }

    // optional int32 player_id = 5;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bet_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bet_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bet_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bet_info_result::MergeFrom(const packetl2c_bet_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_bet_info()) {
      mutable_bet_info()->::game_showhand_protocols::msg_bet_info::MergeFrom(from.bet_info());
    }
    if (from.has_bet_count()) {
      set_bet_count(from.bet_count());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bet_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bet_info_result::CopyFrom(const packetl2c_bet_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bet_info_result::IsInitialized() const {

  return true;
}

void packetl2c_bet_info_result::Swap(packetl2c_bet_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(bet_info_, other->bet_info_);
    std::swap(bet_count_, other->bet_count_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bet_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bet_info_result_descriptor_;
  metadata.reflection = packetl2c_bet_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_start_game_message::kPacketIdFieldNumber;
const int packetl2c_notice_start_game_message::kMinBetCountFieldNumber;
const int packetl2c_notice_start_game_message::kPlayerLeftFieldNumber;
const int packetl2c_notice_start_game_message::kPlayerRightFieldNumber;
const int packetl2c_notice_start_game_message::kBetStateFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_start_game_message::packetl2c_notice_start_game_message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_notice_start_game_message::InitAsDefaultInstance() {
  player_left_ = const_cast< ::game_showhand_protocols::msg_player_info*>(&::game_showhand_protocols::msg_player_info::default_instance());
  player_right_ = const_cast< ::game_showhand_protocols::msg_player_info*>(&::game_showhand_protocols::msg_player_info::default_instance());
}

packetl2c_notice_start_game_message::packetl2c_notice_start_game_message(const packetl2c_notice_start_game_message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_notice_start_game_message::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15021;
  minbetcount_ = GOOGLE_LONGLONG(0);
  player_left_ = NULL;
  player_right_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_start_game_message::~packetl2c_notice_start_game_message() {
  SharedDtor();
}

void packetl2c_notice_start_game_message::SharedDtor() {
  if (this != default_instance_) {
    delete player_left_;
    delete player_right_;
  }
}

void packetl2c_notice_start_game_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_start_game_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_start_game_message_descriptor_;
}

const packetl2c_notice_start_game_message& packetl2c_notice_start_game_message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_start_game_message* packetl2c_notice_start_game_message::default_instance_ = NULL;

packetl2c_notice_start_game_message* packetl2c_notice_start_game_message::New() const {
  return new packetl2c_notice_start_game_message;
}

void packetl2c_notice_start_game_message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15021;
    minbetcount_ = GOOGLE_LONGLONG(0);
    if (has_player_left()) {
      if (player_left_ != NULL) player_left_->::game_showhand_protocols::msg_player_info::Clear();
    }
    if (has_player_right()) {
      if (player_right_ != NULL) player_right_->::game_showhand_protocols::msg_player_info::Clear();
    }
  }
  bet_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_start_game_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_game_message];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minBetCount;
        break;
      }

      // optional int64 minBetCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minBetCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &minbetcount_)));
          set_has_minbetcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_left;
        break;
      }

      // optional .game_showhand_protocols.msg_player_info player_left = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_left:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_left()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_right;
        break;
      }

      // optional .game_showhand_protocols.msg_player_info player_right = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_right()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bet_state;
        break;
      }

      // repeated .game_showhand_protocols.p_bet_state bet_state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bet_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bet_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bet_state;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_notice_start_game_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_game_message];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int64 minBetCount = 2;
  if (has_minbetcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->minbetcount(), output);
  }

  // optional .game_showhand_protocols.msg_player_info player_left = 3;
  if (has_player_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_left(), output);
  }

  // optional .game_showhand_protocols.msg_player_info player_right = 4;
  if (has_player_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_right(), output);
  }

  // repeated .game_showhand_protocols.p_bet_state bet_state = 5;
  for (int i = 0; i < this->bet_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bet_state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_notice_start_game_message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_game_message];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int64 minBetCount = 2;
  if (has_minbetcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->minbetcount(), target);
  }

  // optional .game_showhand_protocols.msg_player_info player_left = 3;
  if (has_player_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_left(), target);
  }

  // optional .game_showhand_protocols.msg_player_info player_right = 4;
  if (has_player_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player_right(), target);
  }

  // repeated .game_showhand_protocols.p_bet_state bet_state = 5;
  for (int i = 0; i < this->bet_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bet_state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_notice_start_game_message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_game_message];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int64 minBetCount = 2;
    if (has_minbetcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->minbetcount());
    }

    // optional .game_showhand_protocols.msg_player_info player_left = 3;
    if (has_player_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_left());
    }

    // optional .game_showhand_protocols.msg_player_info player_right = 4;
    if (has_player_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_right());
    }

  }
  // repeated .game_showhand_protocols.p_bet_state bet_state = 5;
  total_size += 1 * this->bet_state_size();
  for (int i = 0; i < this->bet_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bet_state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_start_game_message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_start_game_message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_start_game_message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_start_game_message::MergeFrom(const packetl2c_notice_start_game_message& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_state_.MergeFrom(from.bet_state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_minbetcount()) {
      set_minbetcount(from.minbetcount());
    }
    if (from.has_player_left()) {
      mutable_player_left()->::game_showhand_protocols::msg_player_info::MergeFrom(from.player_left());
    }
    if (from.has_player_right()) {
      mutable_player_right()->::game_showhand_protocols::msg_player_info::MergeFrom(from.player_right());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_start_game_message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_start_game_message::CopyFrom(const packetl2c_notice_start_game_message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_start_game_message::IsInitialized() const {

  return true;
}

void packetl2c_notice_start_game_message::Swap(packetl2c_notice_start_game_message* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(minbetcount_, other->minbetcount_);
    std::swap(player_left_, other->player_left_);
    std::swap(player_right_, other->player_right_);
    bet_state_.Swap(&other->bet_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_start_game_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_start_game_message_descriptor_;
  metadata.reflection = packetl2c_notice_start_game_message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_control_message::kPacketIdFieldNumber;
const int packetl2c_notice_control_message::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_control_message::packetl2c_notice_control_message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_notice_control_message::InitAsDefaultInstance() {
  player_info_ = const_cast< ::game_showhand_protocols::msg_player_info*>(&::game_showhand_protocols::msg_player_info::default_instance());
}

packetl2c_notice_control_message::packetl2c_notice_control_message(const packetl2c_notice_control_message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_notice_control_message::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15026;
  player_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_control_message::~packetl2c_notice_control_message() {
  SharedDtor();
}

void packetl2c_notice_control_message::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
  }
}

void packetl2c_notice_control_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_control_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_control_message_descriptor_;
}

const packetl2c_notice_control_message& packetl2c_notice_control_message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_control_message* packetl2c_notice_control_message::default_instance_ = NULL;

packetl2c_notice_control_message* packetl2c_notice_control_message::New() const {
  return new packetl2c_notice_control_message;
}

void packetl2c_notice_control_message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15026;
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::game_showhand_protocols::msg_player_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_control_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_control_message];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_info;
        break;
      }

      // optional .game_showhand_protocols.msg_player_info player_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_notice_control_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_control_message];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_showhand_protocols.msg_player_info player_info = 2;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_notice_control_message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_control_message];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_showhand_protocols.msg_player_info player_info = 2;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_notice_control_message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_control_message];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_showhand_protocols.msg_player_info player_info = 2;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_control_message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_control_message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_control_message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_control_message::MergeFrom(const packetl2c_notice_control_message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_info()) {
      mutable_player_info()->::game_showhand_protocols::msg_player_info::MergeFrom(from.player_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_control_message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_control_message::CopyFrom(const packetl2c_notice_control_message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_control_message::IsInitialized() const {

  return true;
}

void packetl2c_notice_control_message::Swap(packetl2c_notice_control_message* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_info_, other->player_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_control_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_control_message_descriptor_;
  metadata.reflection = packetl2c_notice_control_message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_sendcard_message::kPacketIdFieldNumber;
const int packetl2c_notice_sendcard_message::kPlayerLeftFieldNumber;
const int packetl2c_notice_sendcard_message::kPlayerRightFieldNumber;
const int packetl2c_notice_sendcard_message::kBetStateFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_sendcard_message::packetl2c_notice_sendcard_message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_notice_sendcard_message::InitAsDefaultInstance() {
}

packetl2c_notice_sendcard_message::packetl2c_notice_sendcard_message(const packetl2c_notice_sendcard_message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_notice_sendcard_message::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15023;
  player_left_ = 0;
  player_right_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_sendcard_message::~packetl2c_notice_sendcard_message() {
  SharedDtor();
}

void packetl2c_notice_sendcard_message::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_notice_sendcard_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_sendcard_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_sendcard_message_descriptor_;
}

const packetl2c_notice_sendcard_message& packetl2c_notice_sendcard_message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_sendcard_message* packetl2c_notice_sendcard_message::default_instance_ = NULL;

packetl2c_notice_sendcard_message* packetl2c_notice_sendcard_message::New() const {
  return new packetl2c_notice_sendcard_message;
}

void packetl2c_notice_sendcard_message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15023;
    player_left_ = 0;
    player_right_ = 0;
  }
  bet_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_sendcard_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_sendcard_message];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_left;
        break;
      }

      // optional int32 player_left = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_left_)));
          set_has_player_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_right;
        break;
      }

      // optional int32 player_right = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_right_)));
          set_has_player_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bet_state;
        break;
      }

      // repeated .game_showhand_protocols.p_bet_state bet_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bet_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bet_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bet_state;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_notice_sendcard_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_sendcard_message];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_left = 2;
  if (has_player_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_left(), output);
  }

  // optional int32 player_right = 3;
  if (has_player_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_right(), output);
  }

  // repeated .game_showhand_protocols.p_bet_state bet_state = 4;
  for (int i = 0; i < this->bet_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bet_state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_notice_sendcard_message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_sendcard_message];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_left = 2;
  if (has_player_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_left(), target);
  }

  // optional int32 player_right = 3;
  if (has_player_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_right(), target);
  }

  // repeated .game_showhand_protocols.p_bet_state bet_state = 4;
  for (int i = 0; i < this->bet_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bet_state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_notice_sendcard_message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_sendcard_message];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_left = 2;
    if (has_player_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_left());
    }

    // optional int32 player_right = 3;
    if (has_player_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_right());
    }

  }
  // repeated .game_showhand_protocols.p_bet_state bet_state = 4;
  total_size += 1 * this->bet_state_size();
  for (int i = 0; i < this->bet_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bet_state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_sendcard_message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_sendcard_message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_sendcard_message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_sendcard_message::MergeFrom(const packetl2c_notice_sendcard_message& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_state_.MergeFrom(from.bet_state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_left()) {
      set_player_left(from.player_left());
    }
    if (from.has_player_right()) {
      set_player_right(from.player_right());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_sendcard_message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_sendcard_message::CopyFrom(const packetl2c_notice_sendcard_message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_sendcard_message::IsInitialized() const {

  return true;
}

void packetl2c_notice_sendcard_message::Swap(packetl2c_notice_sendcard_message* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_left_, other->player_left_);
    std::swap(player_right_, other->player_right_);
    bet_state_.Swap(&other->bet_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_sendcard_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_sendcard_message_descriptor_;
  metadata.reflection = packetl2c_notice_sendcard_message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_bet::kPacketIdFieldNumber;
const int packetl2c_notice_bet::kBetStateFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_bet::packetl2c_notice_bet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_notice_bet::InitAsDefaultInstance() {
}

packetl2c_notice_bet::packetl2c_notice_bet(const packetl2c_notice_bet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_notice_bet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15022;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_bet::~packetl2c_notice_bet() {
  SharedDtor();
}

void packetl2c_notice_bet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_notice_bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_bet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_bet_descriptor_;
}

const packetl2c_notice_bet& packetl2c_notice_bet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_bet* packetl2c_notice_bet::default_instance_ = NULL;

packetl2c_notice_bet* packetl2c_notice_bet::New() const {
  return new packetl2c_notice_bet;
}

void packetl2c_notice_bet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15022;
  }
  bet_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_bet_message];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bet_state;
        break;
      }

      // repeated .game_showhand_protocols.p_bet_state bet_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bet_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bet_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bet_state;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_notice_bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_bet_message];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_showhand_protocols.p_bet_state bet_state = 2;
  for (int i = 0; i < this->bet_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bet_state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_notice_bet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_bet_message];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_showhand_protocols.p_bet_state bet_state = 2;
  for (int i = 0; i < this->bet_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bet_state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_notice_bet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_bet_message];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_showhand_protocols.p_bet_state bet_state = 2;
  total_size += 1 * this->bet_state_size();
  for (int i = 0; i < this->bet_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bet_state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_bet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_bet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_bet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_bet::MergeFrom(const packetl2c_notice_bet& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_state_.MergeFrom(from.bet_state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_bet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_bet::CopyFrom(const packetl2c_notice_bet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_bet::IsInitialized() const {

  return true;
}

void packetl2c_notice_bet::Swap(packetl2c_notice_bet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    bet_state_.Swap(&other->bet_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_bet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_bet_descriptor_;
  metadata.reflection = packetl2c_notice_bet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_award_message::kPacketIdFieldNumber;
const int packetl2c_notice_award_message::kPlayerLeftFieldNumber;
const int packetl2c_notice_award_message::kPlayerRightFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_award_message::packetl2c_notice_award_message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_notice_award_message::InitAsDefaultInstance() {
  player_left_ = const_cast< ::game_showhand_protocols::msg_player_result*>(&::game_showhand_protocols::msg_player_result::default_instance());
  player_right_ = const_cast< ::game_showhand_protocols::msg_player_result*>(&::game_showhand_protocols::msg_player_result::default_instance());
}

packetl2c_notice_award_message::packetl2c_notice_award_message(const packetl2c_notice_award_message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_notice_award_message::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15024;
  player_left_ = NULL;
  player_right_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_award_message::~packetl2c_notice_award_message() {
  SharedDtor();
}

void packetl2c_notice_award_message::SharedDtor() {
  if (this != default_instance_) {
    delete player_left_;
    delete player_right_;
  }
}

void packetl2c_notice_award_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_award_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_award_message_descriptor_;
}

const packetl2c_notice_award_message& packetl2c_notice_award_message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_award_message* packetl2c_notice_award_message::default_instance_ = NULL;

packetl2c_notice_award_message* packetl2c_notice_award_message::New() const {
  return new packetl2c_notice_award_message;
}

void packetl2c_notice_award_message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15024;
    if (has_player_left()) {
      if (player_left_ != NULL) player_left_->::game_showhand_protocols::msg_player_result::Clear();
    }
    if (has_player_right()) {
      if (player_right_ != NULL) player_right_->::game_showhand_protocols::msg_player_result::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_award_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_award_message];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_left;
        break;
      }

      // optional .game_showhand_protocols.msg_player_result player_left = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_left:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_left()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_right;
        break;
      }

      // optional .game_showhand_protocols.msg_player_result player_right = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_right()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_notice_award_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_award_message];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_showhand_protocols.msg_player_result player_left = 2;
  if (has_player_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_left(), output);
  }

  // optional .game_showhand_protocols.msg_player_result player_right = 3;
  if (has_player_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_right(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_notice_award_message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_award_message];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_showhand_protocols.msg_player_result player_left = 2;
  if (has_player_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_left(), target);
  }

  // optional .game_showhand_protocols.msg_player_result player_right = 3;
  if (has_player_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_right(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_notice_award_message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_award_message];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_showhand_protocols.msg_player_result player_left = 2;
    if (has_player_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_left());
    }

    // optional .game_showhand_protocols.msg_player_result player_right = 3;
    if (has_player_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_right());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_award_message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_award_message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_award_message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_award_message::MergeFrom(const packetl2c_notice_award_message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_left()) {
      mutable_player_left()->::game_showhand_protocols::msg_player_result::MergeFrom(from.player_left());
    }
    if (from.has_player_right()) {
      mutable_player_right()->::game_showhand_protocols::msg_player_result::MergeFrom(from.player_right());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_award_message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_award_message::CopyFrom(const packetl2c_notice_award_message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_award_message::IsInitialized() const {

  return true;
}

void packetl2c_notice_award_message::Swap(packetl2c_notice_award_message* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_left_, other->player_left_);
    std::swap(player_right_, other->player_right_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_award_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_award_message_descriptor_;
  metadata.reflection = packetl2c_notice_award_message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_check_message::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_check_message::packetl2c_notice_check_message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_notice_check_message::InitAsDefaultInstance() {
}

packetl2c_notice_check_message::packetl2c_notice_check_message(const packetl2c_notice_check_message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_notice_check_message::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15025;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_check_message::~packetl2c_notice_check_message() {
  SharedDtor();
}

void packetl2c_notice_check_message::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_notice_check_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_check_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_check_message_descriptor_;
}

const packetl2c_notice_check_message& packetl2c_notice_check_message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_check_message* packetl2c_notice_check_message::default_instance_ = NULL;

packetl2c_notice_check_message* packetl2c_notice_check_message::New() const {
  return new packetl2c_notice_check_message;
}

void packetl2c_notice_check_message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15025;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_check_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_check_message];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_notice_check_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_check_message];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_notice_check_message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_check_message];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_notice_check_message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_check_message];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_check_message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_check_message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_check_message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_check_message::MergeFrom(const packetl2c_notice_check_message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_check_message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_check_message::CopyFrom(const packetl2c_notice_check_message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_check_message::IsInitialized() const {

  return true;
}

void packetl2c_notice_check_message::Swap(packetl2c_notice_check_message* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_check_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_check_message_descriptor_;
  metadata.reflection = packetl2c_notice_check_message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_join_table::kPacketIdFieldNumber;
const int packetl2c_notice_join_table::kTableIdFieldNumber;
const int packetl2c_notice_join_table::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_join_table::packetl2c_notice_join_table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_notice_join_table::InitAsDefaultInstance() {
  player_info_ = const_cast< ::game_showhand_protocols::msg_player_info*>(&::game_showhand_protocols::msg_player_info::default_instance());
}

packetl2c_notice_join_table::packetl2c_notice_join_table(const packetl2c_notice_join_table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_notice_join_table::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15030;
  table_id_ = 0;
  player_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_join_table::~packetl2c_notice_join_table() {
  SharedDtor();
}

void packetl2c_notice_join_table::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
  }
}

void packetl2c_notice_join_table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_join_table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_join_table_descriptor_;
}

const packetl2c_notice_join_table& packetl2c_notice_join_table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_join_table* packetl2c_notice_join_table::default_instance_ = NULL;

packetl2c_notice_join_table* packetl2c_notice_join_table::New() const {
  return new packetl2c_notice_join_table;
}

void packetl2c_notice_join_table::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15030;
    table_id_ = 0;
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::game_showhand_protocols::msg_player_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_join_table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_join_table_message];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_table_id;
        break;
      }

      // optional int32 table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_info;
        break;
      }

      // optional .game_showhand_protocols.msg_player_info player_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_notice_join_table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_join_table_message];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 table_id = 2;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->table_id(), output);
  }

  // optional .game_showhand_protocols.msg_player_info player_info = 3;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_notice_join_table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_join_table_message];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 table_id = 2;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->table_id(), target);
  }

  // optional .game_showhand_protocols.msg_player_info player_info = 3;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_notice_join_table::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_join_table_message];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 table_id = 2;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

    // optional .game_showhand_protocols.msg_player_info player_info = 3;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_join_table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_join_table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_join_table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_join_table::MergeFrom(const packetl2c_notice_join_table& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_player_info()) {
      mutable_player_info()->::game_showhand_protocols::msg_player_info::MergeFrom(from.player_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_join_table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_join_table::CopyFrom(const packetl2c_notice_join_table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_join_table::IsInitialized() const {

  return true;
}

void packetl2c_notice_join_table::Swap(packetl2c_notice_join_table* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(table_id_, other->table_id_);
    std::swap(player_info_, other->player_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_join_table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_join_table_descriptor_;
  metadata.reflection = packetl2c_notice_join_table_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_leave_table::kPacketIdFieldNumber;
const int packetl2c_notice_leave_table::kTableIdFieldNumber;
const int packetl2c_notice_leave_table::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_leave_table::packetl2c_notice_leave_table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_notice_leave_table::InitAsDefaultInstance() {
}

packetl2c_notice_leave_table::packetl2c_notice_leave_table(const packetl2c_notice_leave_table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_notice_leave_table::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15031;
  table_id_ = 0;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_leave_table::~packetl2c_notice_leave_table() {
  SharedDtor();
}

void packetl2c_notice_leave_table::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_notice_leave_table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_leave_table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_leave_table_descriptor_;
}

const packetl2c_notice_leave_table& packetl2c_notice_leave_table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_leave_table* packetl2c_notice_leave_table::default_instance_ = NULL;

packetl2c_notice_leave_table* packetl2c_notice_leave_table::New() const {
  return new packetl2c_notice_leave_table;
}

void packetl2c_notice_leave_table::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15031;
    table_id_ = 0;
    player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_leave_table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_leave_table_message];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_table_id;
        break;
      }

      // optional int32 table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_notice_leave_table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_leave_table_message];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 table_id = 2;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->table_id(), output);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_notice_leave_table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_leave_table_message];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 table_id = 2;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->table_id(), target);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_notice_leave_table::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_leave_table_message];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 table_id = 2;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

    // optional int32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_leave_table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_leave_table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_leave_table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_leave_table::MergeFrom(const packetl2c_notice_leave_table& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_leave_table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_leave_table::CopyFrom(const packetl2c_notice_leave_table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_leave_table::IsInitialized() const {

  return true;
}

void packetl2c_notice_leave_table::Swap(packetl2c_notice_leave_table* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(table_id_, other->table_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_leave_table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_leave_table_descriptor_;
  metadata.reflection = packetl2c_notice_leave_table_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_update_table::kPacketIdFieldNumber;
const int packetl2c_notice_update_table::kTableIdFieldNumber;
const int packetl2c_notice_update_table::kPlayerLeftFieldNumber;
const int packetl2c_notice_update_table::kPlayerRightFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_update_table::packetl2c_notice_update_table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_notice_update_table::InitAsDefaultInstance() {
  player_left_ = const_cast< ::game_showhand_protocols::msg_player_info*>(&::game_showhand_protocols::msg_player_info::default_instance());
  player_right_ = const_cast< ::game_showhand_protocols::msg_player_info*>(&::game_showhand_protocols::msg_player_info::default_instance());
}

packetl2c_notice_update_table::packetl2c_notice_update_table(const packetl2c_notice_update_table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_notice_update_table::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15036;
  table_id_ = 0;
  player_left_ = NULL;
  player_right_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_update_table::~packetl2c_notice_update_table() {
  SharedDtor();
}

void packetl2c_notice_update_table::SharedDtor() {
  if (this != default_instance_) {
    delete player_left_;
    delete player_right_;
  }
}

void packetl2c_notice_update_table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_update_table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_update_table_descriptor_;
}

const packetl2c_notice_update_table& packetl2c_notice_update_table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_update_table* packetl2c_notice_update_table::default_instance_ = NULL;

packetl2c_notice_update_table* packetl2c_notice_update_table::New() const {
  return new packetl2c_notice_update_table;
}

void packetl2c_notice_update_table::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15036;
    table_id_ = 0;
    if (has_player_left()) {
      if (player_left_ != NULL) player_left_->::game_showhand_protocols::msg_player_info::Clear();
    }
    if (has_player_right()) {
      if (player_right_ != NULL) player_right_->::game_showhand_protocols::msg_player_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_update_table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_update_table_message];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_table_id;
        break;
      }

      // optional int32 table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_left;
        break;
      }

      // optional .game_showhand_protocols.msg_player_info player_left = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_left:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_left()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_right;
        break;
      }

      // optional .game_showhand_protocols.msg_player_info player_right = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_right()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_notice_update_table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_update_table_message];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 table_id = 2;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->table_id(), output);
  }

  // optional .game_showhand_protocols.msg_player_info player_left = 3;
  if (has_player_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_left(), output);
  }

  // optional .game_showhand_protocols.msg_player_info player_right = 4;
  if (has_player_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_right(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_notice_update_table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_update_table_message];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 table_id = 2;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->table_id(), target);
  }

  // optional .game_showhand_protocols.msg_player_info player_left = 3;
  if (has_player_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_left(), target);
  }

  // optional .game_showhand_protocols.msg_player_info player_right = 4;
  if (has_player_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player_right(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_notice_update_table::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_update_table_message];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 table_id = 2;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

    // optional .game_showhand_protocols.msg_player_info player_left = 3;
    if (has_player_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_left());
    }

    // optional .game_showhand_protocols.msg_player_info player_right = 4;
    if (has_player_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_right());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_update_table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_update_table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_update_table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_update_table::MergeFrom(const packetl2c_notice_update_table& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_player_left()) {
      mutable_player_left()->::game_showhand_protocols::msg_player_info::MergeFrom(from.player_left());
    }
    if (from.has_player_right()) {
      mutable_player_right()->::game_showhand_protocols::msg_player_info::MergeFrom(from.player_right());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_update_table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_update_table::CopyFrom(const packetl2c_notice_update_table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_update_table::IsInitialized() const {

  return true;
}

void packetl2c_notice_update_table::Swap(packetl2c_notice_update_table* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(table_id_, other->table_id_);
    std::swap(player_left_, other->player_left_);
    std::swap(player_right_, other->player_right_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_update_table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_update_table_descriptor_;
  metadata.reflection = packetl2c_notice_update_table_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_table_player_state::kPacketIdFieldNumber;
const int packetl2c_notice_table_player_state::kTableIdFieldNumber;
const int packetl2c_notice_table_player_state::kLeftStateFieldNumber;
const int packetl2c_notice_table_player_state::kRightStateFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_table_player_state::packetl2c_notice_table_player_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_notice_table_player_state::InitAsDefaultInstance() {
}

packetl2c_notice_table_player_state::packetl2c_notice_table_player_state(const packetl2c_notice_table_player_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_notice_table_player_state::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15032;
  table_id_ = 0u;
  left_state_ = 0u;
  right_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_table_player_state::~packetl2c_notice_table_player_state() {
  SharedDtor();
}

void packetl2c_notice_table_player_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_notice_table_player_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_table_player_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_table_player_state_descriptor_;
}

const packetl2c_notice_table_player_state& packetl2c_notice_table_player_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_table_player_state* packetl2c_notice_table_player_state::default_instance_ = NULL;

packetl2c_notice_table_player_state* packetl2c_notice_table_player_state::New() const {
  return new packetl2c_notice_table_player_state;
}

void packetl2c_notice_table_player_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15032;
    table_id_ = 0u;
    left_state_ = 0u;
    right_state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_table_player_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_table_player_message];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_table_id;
        break;
      }

      // optional uint32 table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_state;
        break;
      }

      // optional uint32 left_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_state_)));
          set_has_left_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_right_state;
        break;
      }

      // optional uint32 right_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &right_state_)));
          set_has_right_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_notice_table_player_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_table_player_message];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional uint32 table_id = 2;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->table_id(), output);
  }

  // optional uint32 left_state = 3;
  if (has_left_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->left_state(), output);
  }

  // optional uint32 right_state = 4;
  if (has_right_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->right_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_notice_table_player_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_table_player_message];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional uint32 table_id = 2;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->table_id(), target);
  }

  // optional uint32 left_state = 3;
  if (has_left_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->left_state(), target);
  }

  // optional uint32 right_state = 4;
  if (has_right_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->right_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_notice_table_player_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_table_player_message];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional uint32 table_id = 2;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

    // optional uint32 left_state = 3;
    if (has_left_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_state());
    }

    // optional uint32 right_state = 4;
    if (has_right_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->right_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_table_player_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_table_player_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_table_player_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_table_player_state::MergeFrom(const packetl2c_notice_table_player_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_left_state()) {
      set_left_state(from.left_state());
    }
    if (from.has_right_state()) {
      set_right_state(from.right_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_table_player_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_table_player_state::CopyFrom(const packetl2c_notice_table_player_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_table_player_state::IsInitialized() const {

  return true;
}

void packetl2c_notice_table_player_state::Swap(packetl2c_notice_table_player_state* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(table_id_, other->table_id_);
    std::swap(left_state_, other->left_state_);
    std::swap(right_state_, other->right_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_table_player_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_table_player_state_descriptor_;
  metadata.reflection = packetl2c_notice_table_player_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_check_state::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_check_state::packetc2l_check_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_check_state::InitAsDefaultInstance() {
}

packetc2l_check_state::packetc2l_check_state(const packetc2l_check_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_check_state::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10011;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_check_state::~packetc2l_check_state() {
  SharedDtor();
}

void packetc2l_check_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_check_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_check_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_check_state_descriptor_;
}

const packetc2l_check_state& packetc2l_check_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_check_state* packetc2l_check_state::default_instance_ = NULL;

packetc2l_check_state* packetc2l_check_state::New() const {
  return new packetc2l_check_state;
}

void packetc2l_check_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10011;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_check_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_check_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_check_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_check_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_check_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_check_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_check_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_check_state::MergeFrom(const packetc2l_check_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_check_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_check_state::CopyFrom(const packetc2l_check_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_check_state::IsInitialized() const {

  return true;
}

void packetc2l_check_state::Swap(packetc2l_check_state* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_check_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_check_state_descriptor_;
  metadata.reflection = packetc2l_check_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_check_state_result::kPacketIdFieldNumber;
const int packetl2c_check_state_result::kStateFieldNumber;
#endif  // !_MSC_VER

packetl2c_check_state_result::packetl2c_check_state_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_check_state_result::InitAsDefaultInstance() {
}

packetl2c_check_state_result::packetl2c_check_state_result(const packetl2c_check_state_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_check_state_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15011;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_check_state_result::~packetl2c_check_state_result() {
  SharedDtor();
}

void packetl2c_check_state_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_check_state_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_check_state_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_check_state_result_descriptor_;
}

const packetl2c_check_state_result& packetl2c_check_state_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_check_state_result* packetl2c_check_state_result::default_instance_ = NULL;

packetl2c_check_state_result* packetl2c_check_state_result::New() const {
  return new packetl2c_check_state_result;
}

void packetl2c_check_state_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15011;
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_check_state_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_check_state_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_check_state_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_check_state_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_check_state_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_check_state_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_check_state_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_check_state_result::MergeFrom(const packetl2c_check_state_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_check_state_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_check_state_result::CopyFrom(const packetl2c_check_state_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_check_state_result::IsInitialized() const {

  return true;
}

void packetl2c_check_state_result::Swap(packetl2c_check_state_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_check_state_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_check_state_result_descriptor_;
  metadata.reflection = packetl2c_check_state_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_control_info::kPacketIdFieldNumber;
const int packetc2l_control_info::kWinFieldNumber;
#endif  // !_MSC_VER

packetc2l_control_info::packetc2l_control_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_control_info::InitAsDefaultInstance() {
}

packetc2l_control_info::packetc2l_control_info(const packetc2l_control_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_control_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10012;
  win_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_control_info::~packetc2l_control_info() {
  SharedDtor();
}

void packetc2l_control_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_control_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_control_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_control_info_descriptor_;
}

const packetc2l_control_info& packetc2l_control_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_control_info* packetc2l_control_info::default_instance_ = NULL;

packetc2l_control_info* packetc2l_control_info::New() const {
  return new packetc2l_control_info;
}

void packetc2l_control_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10012;
    win_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_control_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_control_win_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win;
        break;
      }

      // optional int32 win = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_control_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_control_win_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 win = 2;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->win(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_control_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_control_win_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 win = 2;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->win(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_control_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_control_win_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 win = 2;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_control_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_control_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_control_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_control_info::MergeFrom(const packetc2l_control_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_control_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_control_info::CopyFrom(const packetc2l_control_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_control_info::IsInitialized() const {

  return true;
}

void packetc2l_control_info::Swap(packetc2l_control_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(win_, other->win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_control_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_control_info_descriptor_;
  metadata.reflection = packetc2l_control_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_control_change_result::kPacketIdFieldNumber;
const int packetl2c_control_change_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_control_change_result::packetl2c_control_change_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_control_change_result::InitAsDefaultInstance() {
}

packetl2c_control_change_result::packetl2c_control_change_result(const packetl2c_control_change_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_control_change_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15033;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_control_change_result::~packetl2c_control_change_result() {
  SharedDtor();
}

void packetl2c_control_change_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_control_change_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_control_change_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_control_change_result_descriptor_;
}

const packetl2c_control_change_result& packetl2c_control_change_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_control_change_result* packetl2c_control_change_result::default_instance_ = NULL;

packetl2c_control_change_result* packetl2c_control_change_result::New() const {
  return new packetl2c_control_change_result;
}

void packetl2c_control_change_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15033;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_control_change_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_control_change_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_control_change_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_control_change_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_control_change_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_control_change_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_control_change_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_control_change_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_control_change_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_control_change_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_control_change_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_control_change_result::MergeFrom(const packetl2c_control_change_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_control_change_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_control_change_result::CopyFrom(const packetl2c_control_change_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_control_change_result::IsInitialized() const {

  return true;
}

void packetl2c_control_change_result::Swap(packetl2c_control_change_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_control_change_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_control_change_result_descriptor_;
  metadata.reflection = packetl2c_control_change_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_gm_luck_info::kPacketIdFieldNumber;
const int packetl2c_notice_gm_luck_info::kTotalLuckFieldNumber;
const int packetl2c_notice_gm_luck_info::kAddLuckFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_gm_luck_info::packetl2c_notice_gm_luck_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_notice_gm_luck_info::InitAsDefaultInstance() {
}

packetl2c_notice_gm_luck_info::packetl2c_notice_gm_luck_info(const packetl2c_notice_gm_luck_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_notice_gm_luck_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 17002;
  total_luck_ = GOOGLE_LONGLONG(0);
  add_luck_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_gm_luck_info::~packetl2c_notice_gm_luck_info() {
  SharedDtor();
}

void packetl2c_notice_gm_luck_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_notice_gm_luck_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_gm_luck_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_gm_luck_info_descriptor_;
}

const packetl2c_notice_gm_luck_info& packetl2c_notice_gm_luck_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_gm_luck_info* packetl2c_notice_gm_luck_info::default_instance_ = NULL;

packetl2c_notice_gm_luck_info* packetl2c_notice_gm_luck_info::New() const {
  return new packetl2c_notice_gm_luck_info;
}

void packetl2c_notice_gm_luck_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 17002;
    total_luck_ = GOOGLE_LONGLONG(0);
    add_luck_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_gm_luck_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_luck_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Total_Luck;
        break;
      }

      // optional int64 Total_Luck = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Total_Luck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_luck_)));
          set_has_total_luck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_add_luck;
        break;
      }

      // optional int64 add_luck = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_luck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &add_luck_)));
          set_has_add_luck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_notice_gm_luck_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_luck_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int64 Total_Luck = 2;
  if (has_total_luck()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->total_luck(), output);
  }

  // optional int64 add_luck = 3;
  if (has_add_luck()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->add_luck(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_notice_gm_luck_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_luck_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int64 Total_Luck = 2;
  if (has_total_luck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->total_luck(), target);
  }

  // optional int64 add_luck = 3;
  if (has_add_luck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->add_luck(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_notice_gm_luck_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_luck_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int64 Total_Luck = 2;
    if (has_total_luck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_luck());
    }

    // optional int64 add_luck = 3;
    if (has_add_luck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->add_luck());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_gm_luck_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_gm_luck_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_gm_luck_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_gm_luck_info::MergeFrom(const packetl2c_notice_gm_luck_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_total_luck()) {
      set_total_luck(from.total_luck());
    }
    if (from.has_add_luck()) {
      set_add_luck(from.add_luck());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_gm_luck_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_gm_luck_info::CopyFrom(const packetl2c_notice_gm_luck_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_gm_luck_info::IsInitialized() const {

  return true;
}

void packetl2c_notice_gm_luck_info::Swap(packetl2c_notice_gm_luck_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(total_luck_, other->total_luck_);
    std::swap(add_luck_, other->add_luck_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_gm_luck_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_gm_luck_info_descriptor_;
  metadata.reflection = packetl2c_notice_gm_luck_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_offline_time::kPacketIdFieldNumber;
const int packetl2c_offline_time::kPlayerIdFieldNumber;
const int packetl2c_offline_time::kOfflineStateFieldNumber;
const int packetl2c_offline_time::kBetTimeFieldNumber;
const int packetl2c_offline_time::kBetPlayerIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_offline_time::packetl2c_offline_time()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_offline_time::InitAsDefaultInstance() {
}

packetl2c_offline_time::packetl2c_offline_time(const packetl2c_offline_time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_offline_time::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15034;
  player_id_ = 0;
  offline_state_ = 0;
  bet_time_ = 0;
  bet_player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_offline_time::~packetl2c_offline_time() {
  SharedDtor();
}

void packetl2c_offline_time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_offline_time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_offline_time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_offline_time_descriptor_;
}

const packetl2c_offline_time& packetl2c_offline_time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_offline_time* packetl2c_offline_time::default_instance_ = NULL;

packetl2c_offline_time* packetl2c_offline_time::New() const {
  return new packetl2c_offline_time;
}

void packetl2c_offline_time::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15034;
    player_id_ = 0;
    offline_state_ = 0;
    bet_time_ = 0;
    bet_player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_offline_time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_offline_time];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offline_state;
        break;
      }

      // optional int32 offline_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offline_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offline_state_)));
          set_has_offline_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bet_time;
        break;
      }

      // optional int32 bet_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_time_)));
          set_has_bet_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bet_player_id;
        break;
      }

      // optional int32 bet_player_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_player_id_)));
          set_has_bet_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_offline_time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_offline_time];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 offline_state = 3;
  if (has_offline_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offline_state(), output);
  }

  // optional int32 bet_time = 4;
  if (has_bet_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bet_time(), output);
  }

  // optional int32 bet_player_id = 5;
  if (has_bet_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bet_player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_offline_time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_offline_time];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 offline_state = 3;
  if (has_offline_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offline_state(), target);
  }

  // optional int32 bet_time = 4;
  if (has_bet_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bet_time(), target);
  }

  // optional int32 bet_player_id = 5;
  if (has_bet_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bet_player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_offline_time::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_offline_time];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 offline_state = 3;
    if (has_offline_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offline_state());
    }

    // optional int32 bet_time = 4;
    if (has_bet_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_time());
    }

    // optional int32 bet_player_id = 5;
    if (has_bet_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_offline_time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_offline_time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_offline_time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_offline_time::MergeFrom(const packetl2c_offline_time& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_offline_state()) {
      set_offline_state(from.offline_state());
    }
    if (from.has_bet_time()) {
      set_bet_time(from.bet_time());
    }
    if (from.has_bet_player_id()) {
      set_bet_player_id(from.bet_player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_offline_time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_offline_time::CopyFrom(const packetl2c_offline_time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_offline_time::IsInitialized() const {

  return true;
}

void packetl2c_offline_time::Swap(packetl2c_offline_time* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(offline_state_, other->offline_state_);
    std::swap(bet_time_, other->bet_time_);
    std::swap(bet_player_id_, other->bet_player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_offline_time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_offline_time_descriptor_;
  metadata.reflection = packetl2c_offline_time_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_out_time::kPacketIdFieldNumber;
const int packetl2c_notice_out_time::kOutStateFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_out_time::packetl2c_notice_out_time()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_notice_out_time::InitAsDefaultInstance() {
}

packetl2c_notice_out_time::packetl2c_notice_out_time(const packetl2c_notice_out_time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_notice_out_time::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15035;
  out_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_out_time::~packetl2c_notice_out_time() {
  SharedDtor();
}

void packetl2c_notice_out_time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_notice_out_time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_out_time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_out_time_descriptor_;
}

const packetl2c_notice_out_time& packetl2c_notice_out_time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_out_time* packetl2c_notice_out_time::default_instance_ = NULL;

packetl2c_notice_out_time* packetl2c_notice_out_time::New() const {
  return new packetl2c_notice_out_time;
}

void packetl2c_notice_out_time::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15035;
    out_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_out_time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_out_time];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_out_state;
        break;
      }

      // optional int32 out_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_state_)));
          set_has_out_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_notice_out_time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_out_time];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 out_state = 2;
  if (has_out_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->out_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_notice_out_time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_out_time];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 out_state = 2;
  if (has_out_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->out_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_notice_out_time::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_out_time];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 out_state = 2;
    if (has_out_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_out_time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_out_time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_out_time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_out_time::MergeFrom(const packetl2c_notice_out_time& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_out_state()) {
      set_out_state(from.out_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_out_time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_out_time::CopyFrom(const packetl2c_notice_out_time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_out_time::IsInitialized() const {

  return true;
}

void packetl2c_notice_out_time::Swap(packetl2c_notice_out_time* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(out_state_, other->out_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_out_time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_out_time_descriptor_;
  metadata.reflection = packetl2c_notice_out_time_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_debuginfo::kPacketIdFieldNumber;
const int packetl2c_bc_debuginfo::kPlayerIdFieldNumber;
const int packetl2c_bc_debuginfo::kTotalProfitFieldNumber;
const int packetl2c_bc_debuginfo::kTotalStockFieldNumber;
const int packetl2c_bc_debuginfo::kTotalRateFieldNumber;
const int packetl2c_bc_debuginfo::kDebugInfosFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_debuginfo::packetl2c_bc_debuginfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_debuginfo::InitAsDefaultInstance() {
}

packetl2c_bc_debuginfo::packetl2c_bc_debuginfo(const packetl2c_bc_debuginfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_debuginfo::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 17001;
  player_id_ = 0;
  total_profit_ = GOOGLE_LONGLONG(0);
  total_stock_ = GOOGLE_LONGLONG(0);
  total_rate_ = GOOGLE_LONGLONG(0);
  debug_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_debuginfo::~packetl2c_bc_debuginfo() {
  SharedDtor();
}

void packetl2c_bc_debuginfo::SharedDtor() {
  if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_infos_;
  }
  if (this != default_instance_) {
  }
}

void packetl2c_bc_debuginfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_debuginfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_debuginfo_descriptor_;
}

const packetl2c_bc_debuginfo& packetl2c_bc_debuginfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_debuginfo* packetl2c_bc_debuginfo::default_instance_ = NULL;

packetl2c_bc_debuginfo* packetl2c_bc_debuginfo::New() const {
  return new packetl2c_bc_debuginfo;
}

void packetl2c_bc_debuginfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 17001;
    player_id_ = 0;
    total_profit_ = GOOGLE_LONGLONG(0);
    total_stock_ = GOOGLE_LONGLONG(0);
    total_rate_ = GOOGLE_LONGLONG(0);
    if (has_debug_infos()) {
      if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
        debug_infos_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_debuginfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_showhand_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_profit;
        break;
      }

      // optional int64 total_profit = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_profit_)));
          set_has_total_profit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_stock;
        break;
      }

      // optional int64 total_stock = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_stock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_stock_)));
          set_has_total_stock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_debug_infos;
        break;
      }

      // optional string debug_infos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_infos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_infos().data(), this->debug_infos().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total_Rate;
        break;
      }

      // optional int64 total_Rate = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_rate_)));
          set_has_total_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_debuginfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int64 total_profit = 3 [default = 0];
  if (has_total_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->total_profit(), output);
  }

  // optional int64 total_stock = 4 [default = 0];
  if (has_total_stock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_stock(), output);
  }

  // optional string debug_infos = 5;
  if (has_debug_infos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_infos().data(), this->debug_infos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->debug_infos(), output);
  }

  // optional int64 total_Rate = 6 [default = 0];
  if (has_total_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->total_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_debuginfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int64 total_profit = 3 [default = 0];
  if (has_total_profit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->total_profit(), target);
  }

  // optional int64 total_stock = 4 [default = 0];
  if (has_total_stock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->total_stock(), target);
  }

  // optional string debug_infos = 5;
  if (has_debug_infos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_infos().data(), this->debug_infos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->debug_infos(), target);
  }

  // optional int64 total_Rate = 6 [default = 0];
  if (has_total_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->total_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_debuginfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int64 total_profit = 3 [default = 0];
    if (has_total_profit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_profit());
    }

    // optional int64 total_stock = 4 [default = 0];
    if (has_total_stock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_stock());
    }

    // optional int64 total_Rate = 6 [default = 0];
    if (has_total_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_rate());
    }

    // optional string debug_infos = 5;
    if (has_debug_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_infos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_debuginfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_debuginfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_debuginfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_debuginfo::MergeFrom(const packetl2c_bc_debuginfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_total_profit()) {
      set_total_profit(from.total_profit());
    }
    if (from.has_total_stock()) {
      set_total_stock(from.total_stock());
    }
    if (from.has_total_rate()) {
      set_total_rate(from.total_rate());
    }
    if (from.has_debug_infos()) {
      set_debug_infos(from.debug_infos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_debuginfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_debuginfo::CopyFrom(const packetl2c_bc_debuginfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_debuginfo::IsInitialized() const {

  return true;
}

void packetl2c_bc_debuginfo::Swap(packetl2c_bc_debuginfo* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(total_profit_, other->total_profit_);
    std::swap(total_stock_, other->total_stock_);
    std::swap(total_rate_, other->total_rate_);
    std::swap(debug_infos_, other->debug_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_debuginfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_debuginfo_descriptor_;
  metadata.reflection = packetl2c_bc_debuginfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_showhand_protocols

// @@protoc_insertion_point(global_scope)
