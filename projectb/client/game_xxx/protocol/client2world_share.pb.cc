// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_share.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client2world_share.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

namespace {

const ::google::protobuf::Descriptor* packetw2c_notify_share_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_notify_share_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_receive_share_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_receive_share_reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_receive_share_reward_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_receive_share_reward_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client2world_5fshare_2eproto() {
  protobuf_AddDesc_client2world_5fshare_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client2world_share.proto");
  GOOGLE_CHECK(file != NULL);
  packetw2c_notify_share_descriptor_ = file->message_type(0);
  static const int packetw2c_notify_share_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notify_share, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notify_share, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notify_share, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notify_share, win_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notify_share, share_reward_),
  };
  packetw2c_notify_share_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_notify_share_descriptor_,
      packetw2c_notify_share::default_instance_,
      packetw2c_notify_share_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notify_share, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notify_share, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_notify_share));
  packetc2w_receive_share_reward_descriptor_ = file->message_type(1);
  static const int packetc2w_receive_share_reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_receive_share_reward, packet_id_),
  };
  packetc2w_receive_share_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_receive_share_reward_descriptor_,
      packetc2w_receive_share_reward::default_instance_,
      packetc2w_receive_share_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_receive_share_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_receive_share_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_receive_share_reward));
  packetw2c_receive_share_reward_result_descriptor_ = file->message_type(2);
  static const int packetw2c_receive_share_reward_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_receive_share_reward_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_receive_share_reward_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_receive_share_reward_result, reward_),
  };
  packetw2c_receive_share_reward_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_receive_share_reward_result_descriptor_,
      packetw2c_receive_share_reward_result::default_instance_,
      packetw2c_receive_share_reward_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_receive_share_reward_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_receive_share_reward_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_receive_share_reward_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client2world_5fshare_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_notify_share_descriptor_, &packetw2c_notify_share::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_receive_share_reward_descriptor_, &packetc2w_receive_share_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_receive_share_reward_result_descriptor_, &packetw2c_receive_share_reward_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client2world_5fshare_2eproto() {
  delete packetw2c_notify_share::default_instance_;
  delete packetw2c_notify_share_reflection_;
  delete packetc2w_receive_share_reward::default_instance_;
  delete packetc2w_receive_share_reward_reflection_;
  delete packetw2c_receive_share_reward_result::default_instance_;
  delete packetw2c_receive_share_reward_result_reflection_;
}

void protobuf_AddDesc_client2world_5fshare_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client2world_protocols::protobuf_AddDesc_client2world_5fmsg_5ftype_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030client2world_share.proto\022\026client2world"
    "_protocols\032\033client2world_msg_type.proto\032"
    "\022msg_type_def.proto\032\022msg_info_def.proto\""
    "\270\001\n\026packetw2c_notify_share\022T\n\tpacket_id\030"
    "\001 \001(\0162).client2world_protocols.e_server_"
    "msg_type:\026e_mst_w2c_notify_share\022\017\n\007game"
    "_id\030\002 \001(\005\022\017\n\007room_id\030\003 \001(\005\022\020\n\010win_gold\030\004"
    " \001(\003\022\024\n\014share_reward\030\005 \001(\005\"~\n\036packetc2w_"
    "receive_share_reward\022\\\n\tpacket_id\030\001 \001(\0162"
    ").client2world_protocols.e_server_msg_ty"
    "pe:\036e_mst_c2w_receive_share_reward\"\330\001\n%p"
    "acketw2c_receive_share_reward_result\022c\n\t"
    "packet_id\030\001 \001(\0162).client2world_protocols"
    ".e_server_msg_type:%e_mst_w2c_receive_sh"
    "are_reward_result\022:\n\006result\030\002 \001(\0162\036.msg_"
    "type_def.e_msg_result_def:\ne_rmt_fail\022\016\n"
    "\006reward\030\003 \001(\003", 653);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client2world_share.proto", &protobuf_RegisterTypes);
  packetw2c_notify_share::default_instance_ = new packetw2c_notify_share();
  packetc2w_receive_share_reward::default_instance_ = new packetc2w_receive_share_reward();
  packetw2c_receive_share_reward_result::default_instance_ = new packetw2c_receive_share_reward_result();
  packetw2c_notify_share::default_instance_->InitAsDefaultInstance();
  packetc2w_receive_share_reward::default_instance_->InitAsDefaultInstance();
  packetw2c_receive_share_reward_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client2world_5fshare_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client2world_5fshare_2eproto {
  StaticDescriptorInitializer_client2world_5fshare_2eproto() {
    protobuf_AddDesc_client2world_5fshare_2eproto();
  }
} static_descriptor_initializer_client2world_5fshare_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetw2c_notify_share::kPacketIdFieldNumber;
const int packetw2c_notify_share::kGameIdFieldNumber;
const int packetw2c_notify_share::kRoomIdFieldNumber;
const int packetw2c_notify_share::kWinGoldFieldNumber;
const int packetw2c_notify_share::kShareRewardFieldNumber;
#endif  // !_MSC_VER

packetw2c_notify_share::packetw2c_notify_share()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_notify_share::InitAsDefaultInstance() {
}

packetw2c_notify_share::packetw2c_notify_share(const packetw2c_notify_share& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_notify_share::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7599;
  game_id_ = 0;
  room_id_ = 0;
  win_gold_ = GOOGLE_LONGLONG(0);
  share_reward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_notify_share::~packetw2c_notify_share() {
  SharedDtor();
}

void packetw2c_notify_share::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_notify_share::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_notify_share::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_notify_share_descriptor_;
}

const packetw2c_notify_share& packetw2c_notify_share::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fshare_2eproto();
  return *default_instance_;
}

packetw2c_notify_share* packetw2c_notify_share::default_instance_ = NULL;

packetw2c_notify_share* packetw2c_notify_share::New() const {
  return new packetw2c_notify_share;
}

void packetw2c_notify_share::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7599;
    game_id_ = 0;
    room_id_ = 0;
    win_gold_ = GOOGLE_LONGLONG(0);
    share_reward_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_notify_share::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_notify_share];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional int32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_win_gold;
        break;
      }

      // optional int64 win_gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_gold_)));
          set_has_win_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_share_reward;
        break;
      }

      // optional int32 share_reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_share_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &share_reward_)));
          set_has_share_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_notify_share::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_notify_share];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_id(), output);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  // optional int64 win_gold = 4;
  if (has_win_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->win_gold(), output);
  }

  // optional int32 share_reward = 5;
  if (has_share_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->share_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_notify_share::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_notify_share];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_id(), target);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  // optional int64 win_gold = 4;
  if (has_win_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->win_gold(), target);
  }

  // optional int32 share_reward = 5;
  if (has_share_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->share_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_notify_share::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_notify_share];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_id());
    }

    // optional int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int64 win_gold = 4;
    if (has_win_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_gold());
    }

    // optional int32 share_reward = 5;
    if (has_share_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->share_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_notify_share::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_notify_share* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_notify_share*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_notify_share::MergeFrom(const packetw2c_notify_share& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_win_gold()) {
      set_win_gold(from.win_gold());
    }
    if (from.has_share_reward()) {
      set_share_reward(from.share_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_notify_share::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_notify_share::CopyFrom(const packetw2c_notify_share& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_notify_share::IsInitialized() const {

  return true;
}

void packetw2c_notify_share::Swap(packetw2c_notify_share* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(win_gold_, other->win_gold_);
    std::swap(share_reward_, other->share_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_notify_share::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_notify_share_descriptor_;
  metadata.reflection = packetw2c_notify_share_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_receive_share_reward::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_receive_share_reward::packetc2w_receive_share_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_receive_share_reward::InitAsDefaultInstance() {
}

packetc2w_receive_share_reward::packetc2w_receive_share_reward(const packetc2w_receive_share_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_receive_share_reward::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5091;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_receive_share_reward::~packetc2w_receive_share_reward() {
  SharedDtor();
}

void packetc2w_receive_share_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_receive_share_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_receive_share_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_receive_share_reward_descriptor_;
}

const packetc2w_receive_share_reward& packetc2w_receive_share_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fshare_2eproto();
  return *default_instance_;
}

packetc2w_receive_share_reward* packetc2w_receive_share_reward::default_instance_ = NULL;

packetc2w_receive_share_reward* packetc2w_receive_share_reward::New() const {
  return new packetc2w_receive_share_reward;
}

void packetc2w_receive_share_reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5091;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_receive_share_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_receive_share_reward];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_receive_share_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_receive_share_reward];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_receive_share_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_receive_share_reward];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_receive_share_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_receive_share_reward];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_receive_share_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_receive_share_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_receive_share_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_receive_share_reward::MergeFrom(const packetc2w_receive_share_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_receive_share_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_receive_share_reward::CopyFrom(const packetc2w_receive_share_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_receive_share_reward::IsInitialized() const {

  return true;
}

void packetc2w_receive_share_reward::Swap(packetc2w_receive_share_reward* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_receive_share_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_receive_share_reward_descriptor_;
  metadata.reflection = packetc2w_receive_share_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_receive_share_reward_result::kPacketIdFieldNumber;
const int packetw2c_receive_share_reward_result::kResultFieldNumber;
const int packetw2c_receive_share_reward_result::kRewardFieldNumber;
#endif  // !_MSC_VER

packetw2c_receive_share_reward_result::packetw2c_receive_share_reward_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_receive_share_reward_result::InitAsDefaultInstance() {
}

packetw2c_receive_share_reward_result::packetw2c_receive_share_reward_result(const packetw2c_receive_share_reward_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_receive_share_reward_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7600;
  result_ = 2;
  reward_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_receive_share_reward_result::~packetw2c_receive_share_reward_result() {
  SharedDtor();
}

void packetw2c_receive_share_reward_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_receive_share_reward_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_receive_share_reward_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_receive_share_reward_result_descriptor_;
}

const packetw2c_receive_share_reward_result& packetw2c_receive_share_reward_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fshare_2eproto();
  return *default_instance_;
}

packetw2c_receive_share_reward_result* packetw2c_receive_share_reward_result::default_instance_ = NULL;

packetw2c_receive_share_reward_result* packetw2c_receive_share_reward_result::New() const {
  return new packetw2c_receive_share_reward_result;
}

void packetw2c_receive_share_reward_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7600;
    result_ = 2;
    reward_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_receive_share_reward_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_receive_share_reward_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward;
        break;
      }

      // optional int64 reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_receive_share_reward_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_receive_share_reward_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int64 reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_receive_share_reward_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_receive_share_reward_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int64 reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_receive_share_reward_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_receive_share_reward_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int64 reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_receive_share_reward_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_receive_share_reward_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_receive_share_reward_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_receive_share_reward_result::MergeFrom(const packetw2c_receive_share_reward_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_receive_share_reward_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_receive_share_reward_result::CopyFrom(const packetw2c_receive_share_reward_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_receive_share_reward_result::IsInitialized() const {

  return true;
}

void packetw2c_receive_share_reward_result::Swap(packetw2c_receive_share_reward_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_receive_share_reward_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_receive_share_reward_result_descriptor_;
  metadata.reflection = packetw2c_receive_share_reward_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

// @@protoc_insertion_point(global_scope)
