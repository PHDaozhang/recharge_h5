// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_showhand_protocol.proto

#ifndef PROTOBUF_game_5fshowhand_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_game_5fshowhand_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "game_showhand_def.pb.h"
#include "msg_type_def.pb.h"
// @@protoc_insertion_point(includes)

namespace game_showhand_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

class packetc2l_get_room_info;
class packetl2c_get_room_info_result;
class packetc2l_enter_game_room;
class packetl2c_enter_game_room_result;
class packetl2c_control_enter_game_room_result;
class packetc2l_quit_game_room;
class packetl2c_quit_game_room_result;
class packetc2l_choose_desk;
class packetl2c_choose_desk_result;
class packetc2l_remove_rob_desk;
class packetl2c_remove_rob_desk_result;
class packetc2l_get_table_scene_info;
class packetl2c_get_table_scene_result;
class packetc2l_quit_desk;
class packet_l2c_quit_desk_result;
class packetc2l_player_ready;
class packetl2c_player_ready_result;
class packetc2l_view_card;
class packetl2c_view_card_result;
class packetc2l_bet_info;
class packetl2c_bet_info_result;
class packetl2c_notice_start_game_message;
class packetl2c_notice_control_message;
class packetl2c_notice_sendcard_message;
class packetl2c_notice_bet;
class packetl2c_notice_award_message;
class packetl2c_notice_check_message;
class packetl2c_notice_join_table;
class packetl2c_notice_leave_table;
class packetl2c_notice_update_table;
class packetl2c_notice_table_player_state;
class packetc2l_check_state;
class packetl2c_check_state_result;
class packetc2l_control_info;
class packetl2c_control_change_result;
class packetl2c_notice_gm_luck_info;
class packetl2c_offline_time;
class packetl2c_notice_out_time;
class packetl2c_bc_debuginfo;

// ===================================================================

class packetc2l_get_room_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_room_info();
  virtual ~packetc2l_get_room_info();

  packetc2l_get_room_info(const packetc2l_get_room_info& from);

  inline packetc2l_get_room_info& operator=(const packetc2l_get_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_room_info& default_instance();

  void Swap(packetc2l_get_room_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_room_info& from);
  void MergeFrom(const packetc2l_get_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_get_room_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_get_room_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_get_room_info_result();
  virtual ~packetl2c_get_room_info_result();

  packetl2c_get_room_info_result(const packetl2c_get_room_info_result& from);

  inline packetl2c_get_room_info_result& operator=(const packetl2c_get_room_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_get_room_info_result& default_instance();

  void Swap(packetl2c_get_room_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_get_room_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_get_room_info_result& from);
  void MergeFrom(const packetl2c_get_room_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // repeated int32 room_ids = 2;
  inline int room_ids_size() const;
  inline void clear_room_ids();
  static const int kRoomIdsFieldNumber = 2;
  inline ::google::protobuf::int32 room_ids(int index) const;
  inline void set_room_ids(int index, ::google::protobuf::int32 value);
  inline void add_room_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      room_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_room_ids();

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_get_room_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > room_ids_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_get_room_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_enter_game_room : public ::google::protobuf::Message {
 public:
  packetc2l_enter_game_room();
  virtual ~packetc2l_enter_game_room();

  packetc2l_enter_game_room(const packetc2l_enter_game_room& from);

  inline packetc2l_enter_game_room& operator=(const packetc2l_enter_game_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_enter_game_room& default_instance();

  void Swap(packetc2l_enter_game_room* other);

  // implements Message ----------------------------------------------

  packetc2l_enter_game_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_enter_game_room& from);
  void MergeFrom(const packetc2l_enter_game_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_game_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_enter_game_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_enter_game_room* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_enter_game_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_enter_game_room_result();
  virtual ~packetl2c_enter_game_room_result();

  packetl2c_enter_game_room_result(const packetl2c_enter_game_room_result& from);

  inline packetl2c_enter_game_room_result& operator=(const packetl2c_enter_game_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_enter_game_room_result& default_instance();

  void Swap(packetl2c_enter_game_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_enter_game_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_enter_game_room_result& from);
  void MergeFrom(const packetl2c_enter_game_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_game_room_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // repeated .game_showhand_protocols.msg_table_info table_list = 4;
  inline int table_list_size() const;
  inline void clear_table_list();
  static const int kTableListFieldNumber = 4;
  inline const ::game_showhand_protocols::msg_table_info& table_list(int index) const;
  inline ::game_showhand_protocols::msg_table_info* mutable_table_list(int index);
  inline ::game_showhand_protocols::msg_table_info* add_table_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info >&
      table_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info >*
      mutable_table_list();

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_enter_game_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info > table_list_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_enter_game_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_control_enter_game_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_control_enter_game_room_result();
  virtual ~packetl2c_control_enter_game_room_result();

  packetl2c_control_enter_game_room_result(const packetl2c_control_enter_game_room_result& from);

  inline packetl2c_control_enter_game_room_result& operator=(const packetl2c_control_enter_game_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_control_enter_game_room_result& default_instance();

  void Swap(packetl2c_control_enter_game_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_control_enter_game_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_control_enter_game_room_result& from);
  void MergeFrom(const packetl2c_control_enter_game_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_control_enter_game_room_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // repeated .game_showhand_protocols.msg_table_info table_list = 4;
  inline int table_list_size() const;
  inline void clear_table_list();
  static const int kTableListFieldNumber = 4;
  inline const ::game_showhand_protocols::msg_table_info& table_list(int index) const;
  inline ::game_showhand_protocols::msg_table_info* mutable_table_list(int index);
  inline ::game_showhand_protocols::msg_table_info* add_table_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info >&
      table_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info >*
      mutable_table_list();

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_control_enter_game_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info > table_list_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_control_enter_game_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_quit_game_room : public ::google::protobuf::Message {
 public:
  packetc2l_quit_game_room();
  virtual ~packetc2l_quit_game_room();

  packetc2l_quit_game_room(const packetc2l_quit_game_room& from);

  inline packetc2l_quit_game_room& operator=(const packetc2l_quit_game_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_quit_game_room& default_instance();

  void Swap(packetc2l_quit_game_room* other);

  // implements Message ----------------------------------------------

  packetc2l_quit_game_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_quit_game_room& from);
  void MergeFrom(const packetc2l_quit_game_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_quit_game_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_quit_game_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_quit_game_room* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_quit_game_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_quit_game_room_result();
  virtual ~packetl2c_quit_game_room_result();

  packetl2c_quit_game_room_result(const packetl2c_quit_game_room_result& from);

  inline packetl2c_quit_game_room_result& operator=(const packetl2c_quit_game_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_quit_game_room_result& default_instance();

  void Swap(packetl2c_quit_game_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_quit_game_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_quit_game_room_result& from);
  void MergeFrom(const packetl2c_quit_game_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_quit_game_room_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // repeated int32 room_ids = 3;
  inline int room_ids_size() const;
  inline void clear_room_ids();
  static const int kRoomIdsFieldNumber = 3;
  inline ::google::protobuf::int32 room_ids(int index) const;
  inline void set_room_ids(int index, ::google::protobuf::int32 value);
  inline void add_room_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      room_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_room_ids();

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_quit_game_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > room_ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_quit_game_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_choose_desk : public ::google::protobuf::Message {
 public:
  packetc2l_choose_desk();
  virtual ~packetc2l_choose_desk();

  packetc2l_choose_desk(const packetc2l_choose_desk& from);

  inline packetc2l_choose_desk& operator=(const packetc2l_choose_desk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_choose_desk& default_instance();

  void Swap(packetc2l_choose_desk* other);

  // implements Message ----------------------------------------------

  packetc2l_choose_desk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_choose_desk& from);
  void MergeFrom(const packetc2l_choose_desk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_choose_desk];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int32 table_id = 2;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 2;
  inline ::google::protobuf::int32 table_id() const;
  inline void set_table_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_choose_desk)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_table_id();
  inline void clear_has_table_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 table_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_choose_desk* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_choose_desk_result : public ::google::protobuf::Message {
 public:
  packetl2c_choose_desk_result();
  virtual ~packetl2c_choose_desk_result();

  packetl2c_choose_desk_result(const packetl2c_choose_desk_result& from);

  inline packetl2c_choose_desk_result& operator=(const packetl2c_choose_desk_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_choose_desk_result& default_instance();

  void Swap(packetl2c_choose_desk_result* other);

  // implements Message ----------------------------------------------

  packetl2c_choose_desk_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_choose_desk_result& from);
  void MergeFrom(const packetl2c_choose_desk_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_choose_desk_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional .game_showhand_protocols.msg_table_info table_info = 3;
  inline bool has_table_info() const;
  inline void clear_table_info();
  static const int kTableInfoFieldNumber = 3;
  inline const ::game_showhand_protocols::msg_table_info& table_info() const;
  inline ::game_showhand_protocols::msg_table_info* mutable_table_info();
  inline ::game_showhand_protocols::msg_table_info* release_table_info();
  inline void set_allocated_table_info(::game_showhand_protocols::msg_table_info* table_info);

  // optional int32 room_id = 4;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 4;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional int32 table_state = 5;
  inline bool has_table_state() const;
  inline void clear_table_state();
  static const int kTableStateFieldNumber = 5;
  inline ::google::protobuf::int32 table_state() const;
  inline void set_table_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_choose_desk_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_table_info();
  inline void clear_has_table_info();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_table_state();
  inline void clear_has_table_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::game_showhand_protocols::msg_table_info* table_info_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 table_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_choose_desk_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_remove_rob_desk : public ::google::protobuf::Message {
 public:
  packetc2l_remove_rob_desk();
  virtual ~packetc2l_remove_rob_desk();

  packetc2l_remove_rob_desk(const packetc2l_remove_rob_desk& from);

  inline packetc2l_remove_rob_desk& operator=(const packetc2l_remove_rob_desk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_remove_rob_desk& default_instance();

  void Swap(packetc2l_remove_rob_desk* other);

  // implements Message ----------------------------------------------

  packetc2l_remove_rob_desk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_remove_rob_desk& from);
  void MergeFrom(const packetc2l_remove_rob_desk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_remove_rob_desk];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int32 table_id = 2;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 2;
  inline ::google::protobuf::int32 table_id() const;
  inline void set_table_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_remove_rob_desk)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_table_id();
  inline void clear_has_table_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 table_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_remove_rob_desk* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_remove_rob_desk_result : public ::google::protobuf::Message {
 public:
  packetl2c_remove_rob_desk_result();
  virtual ~packetl2c_remove_rob_desk_result();

  packetl2c_remove_rob_desk_result(const packetl2c_remove_rob_desk_result& from);

  inline packetl2c_remove_rob_desk_result& operator=(const packetl2c_remove_rob_desk_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_remove_rob_desk_result& default_instance();

  void Swap(packetl2c_remove_rob_desk_result* other);

  // implements Message ----------------------------------------------

  packetl2c_remove_rob_desk_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_remove_rob_desk_result& from);
  void MergeFrom(const packetl2c_remove_rob_desk_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_remove_rob_desk_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_remove_rob_desk_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_remove_rob_desk_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_table_scene_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_table_scene_info();
  virtual ~packetc2l_get_table_scene_info();

  packetc2l_get_table_scene_info(const packetc2l_get_table_scene_info& from);

  inline packetc2l_get_table_scene_info& operator=(const packetc2l_get_table_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_table_scene_info& default_instance();

  void Swap(packetc2l_get_table_scene_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_table_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_table_scene_info& from);
  void MergeFrom(const packetc2l_get_table_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_get_table_scene_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_table_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_get_table_scene_result : public ::google::protobuf::Message {
 public:
  packetl2c_get_table_scene_result();
  virtual ~packetl2c_get_table_scene_result();

  packetl2c_get_table_scene_result(const packetl2c_get_table_scene_result& from);

  inline packetl2c_get_table_scene_result& operator=(const packetl2c_get_table_scene_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_get_table_scene_result& default_instance();

  void Swap(packetl2c_get_table_scene_result* other);

  // implements Message ----------------------------------------------

  packetl2c_get_table_scene_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_get_table_scene_result& from);
  void MergeFrom(const packetl2c_get_table_scene_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_table_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .game_showhand_protocols.msg_table_info table_info = 2;
  inline bool has_table_info() const;
  inline void clear_table_info();
  static const int kTableInfoFieldNumber = 2;
  inline const ::game_showhand_protocols::msg_table_info& table_info() const;
  inline ::game_showhand_protocols::msg_table_info* mutable_table_info();
  inline ::game_showhand_protocols::msg_table_info* release_table_info();
  inline void set_allocated_table_info(::game_showhand_protocols::msg_table_info* table_info);

  // repeated .game_showhand_protocols.p_bet_state bet_state = 3;
  inline int bet_state_size() const;
  inline void clear_bet_state();
  static const int kBetStateFieldNumber = 3;
  inline const ::game_showhand_protocols::p_bet_state& bet_state(int index) const;
  inline ::game_showhand_protocols::p_bet_state* mutable_bet_state(int index);
  inline ::game_showhand_protocols::p_bet_state* add_bet_state();
  inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >&
      bet_state() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >*
      mutable_bet_state();

  // optional int32 bet_time = 4;
  inline bool has_bet_time() const;
  inline void clear_bet_time();
  static const int kBetTimeFieldNumber = 4;
  inline ::google::protobuf::int32 bet_time() const;
  inline void set_bet_time(::google::protobuf::int32 value);

  // optional int64 left_betcount = 5;
  inline bool has_left_betcount() const;
  inline void clear_left_betcount();
  static const int kLeftBetcountFieldNumber = 5;
  inline ::google::protobuf::int64 left_betcount() const;
  inline void set_left_betcount(::google::protobuf::int64 value);

  // optional int64 right_betcount = 6;
  inline bool has_right_betcount() const;
  inline void clear_right_betcount();
  static const int kRightBetcountFieldNumber = 6;
  inline ::google::protobuf::int64 right_betcount() const;
  inline void set_right_betcount(::google::protobuf::int64 value);

  // optional int64 minBetCount = 7;
  inline bool has_minbetcount() const;
  inline void clear_minbetcount();
  static const int kMinBetCountFieldNumber = 7;
  inline ::google::protobuf::int64 minbetcount() const;
  inline void set_minbetcount(::google::protobuf::int64 value);

  // optional int32 roomId = 8;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIdFieldNumber = 8;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // optional int64 left_count = 9;
  inline bool has_left_count() const;
  inline void clear_left_count();
  static const int kLeftCountFieldNumber = 9;
  inline ::google::protobuf::int64 left_count() const;
  inline void set_left_count(::google::protobuf::int64 value);

  // optional int64 right_count = 10;
  inline bool has_right_count() const;
  inline void clear_right_count();
  static const int kRightCountFieldNumber = 10;
  inline ::google::protobuf::int64 right_count() const;
  inline void set_right_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_get_table_scene_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_table_info();
  inline void clear_has_table_info();
  inline void set_has_bet_time();
  inline void clear_has_bet_time();
  inline void set_has_left_betcount();
  inline void clear_has_left_betcount();
  inline void set_has_right_betcount();
  inline void clear_has_right_betcount();
  inline void set_has_minbetcount();
  inline void clear_has_minbetcount();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_left_count();
  inline void clear_has_left_count();
  inline void set_has_right_count();
  inline void clear_has_right_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game_showhand_protocols::msg_table_info* table_info_;
  int packet_id_;
  ::google::protobuf::int32 bet_time_;
  ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state > bet_state_;
  ::google::protobuf::int64 left_betcount_;
  ::google::protobuf::int64 right_betcount_;
  ::google::protobuf::int64 minbetcount_;
  ::google::protobuf::int64 left_count_;
  ::google::protobuf::int64 right_count_;
  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_get_table_scene_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_quit_desk : public ::google::protobuf::Message {
 public:
  packetc2l_quit_desk();
  virtual ~packetc2l_quit_desk();

  packetc2l_quit_desk(const packetc2l_quit_desk& from);

  inline packetc2l_quit_desk& operator=(const packetc2l_quit_desk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_quit_desk& default_instance();

  void Swap(packetc2l_quit_desk* other);

  // implements Message ----------------------------------------------

  packetc2l_quit_desk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_quit_desk& from);
  void MergeFrom(const packetc2l_quit_desk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_quit_desk];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_quit_desk)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_quit_desk* default_instance_;
};
// -------------------------------------------------------------------

class packet_l2c_quit_desk_result : public ::google::protobuf::Message {
 public:
  packet_l2c_quit_desk_result();
  virtual ~packet_l2c_quit_desk_result();

  packet_l2c_quit_desk_result(const packet_l2c_quit_desk_result& from);

  inline packet_l2c_quit_desk_result& operator=(const packet_l2c_quit_desk_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_l2c_quit_desk_result& default_instance();

  void Swap(packet_l2c_quit_desk_result* other);

  // implements Message ----------------------------------------------

  packet_l2c_quit_desk_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_l2c_quit_desk_result& from);
  void MergeFrom(const packet_l2c_quit_desk_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_quit_desk_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // repeated .game_showhand_protocols.msg_table_info table_list = 3;
  inline int table_list_size() const;
  inline void clear_table_list();
  static const int kTableListFieldNumber = 3;
  inline const ::game_showhand_protocols::msg_table_info& table_list(int index) const;
  inline ::game_showhand_protocols::msg_table_info* mutable_table_list(int index);
  inline ::game_showhand_protocols::msg_table_info* add_table_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info >&
      table_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info >*
      mutable_table_list();

  // optional int32 room_id = 4;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 4;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packet_l2c_quit_desk_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info > table_list_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_l2c_quit_desk_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_player_ready : public ::google::protobuf::Message {
 public:
  packetc2l_player_ready();
  virtual ~packetc2l_player_ready();

  packetc2l_player_ready(const packetc2l_player_ready& from);

  inline packetc2l_player_ready& operator=(const packetc2l_player_ready& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_player_ready& default_instance();

  void Swap(packetc2l_player_ready* other);

  // implements Message ----------------------------------------------

  packetc2l_player_ready* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_player_ready& from);
  void MergeFrom(const packetc2l_player_ready& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_player_ready];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_player_ready)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_player_ready* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_player_ready_result : public ::google::protobuf::Message {
 public:
  packetl2c_player_ready_result();
  virtual ~packetl2c_player_ready_result();

  packetl2c_player_ready_result(const packetl2c_player_ready_result& from);

  inline packetl2c_player_ready_result& operator=(const packetl2c_player_ready_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_player_ready_result& default_instance();

  void Swap(packetl2c_player_ready_result* other);

  // implements Message ----------------------------------------------

  packetl2c_player_ready_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_player_ready_result& from);
  void MergeFrom(const packetl2c_player_ready_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_ready_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_player_ready_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_player_ready_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_view_card : public ::google::protobuf::Message {
 public:
  packetc2l_view_card();
  virtual ~packetc2l_view_card();

  packetc2l_view_card(const packetc2l_view_card& from);

  inline packetc2l_view_card& operator=(const packetc2l_view_card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_view_card& default_instance();

  void Swap(packetc2l_view_card* other);

  // implements Message ----------------------------------------------

  packetc2l_view_card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_view_card& from);
  void MergeFrom(const packetc2l_view_card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_view_card];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_view_card)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_view_card* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_view_card_result : public ::google::protobuf::Message {
 public:
  packetl2c_view_card_result();
  virtual ~packetl2c_view_card_result();

  packetl2c_view_card_result(const packetl2c_view_card_result& from);

  inline packetl2c_view_card_result& operator=(const packetl2c_view_card_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_view_card_result& default_instance();

  void Swap(packetl2c_view_card_result* other);

  // implements Message ----------------------------------------------

  packetl2c_view_card_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_view_card_result& from);
  void MergeFrom(const packetl2c_view_card_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_view_card_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_view_card_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_view_card_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_bet_info : public ::google::protobuf::Message {
 public:
  packetc2l_bet_info();
  virtual ~packetc2l_bet_info();

  packetc2l_bet_info(const packetc2l_bet_info& from);

  inline packetc2l_bet_info& operator=(const packetc2l_bet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_bet_info& default_instance();

  void Swap(packetc2l_bet_info* other);

  // implements Message ----------------------------------------------

  packetc2l_bet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_bet_info& from);
  void MergeFrom(const packetc2l_bet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bet_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .game_showhand_protocols.msg_bet_info bet_info = 2;
  inline bool has_bet_info() const;
  inline void clear_bet_info();
  static const int kBetInfoFieldNumber = 2;
  inline const ::game_showhand_protocols::msg_bet_info& bet_info() const;
  inline ::game_showhand_protocols::msg_bet_info* mutable_bet_info();
  inline ::game_showhand_protocols::msg_bet_info* release_bet_info();
  inline void set_allocated_bet_info(::game_showhand_protocols::msg_bet_info* bet_info);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_bet_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_bet_info();
  inline void clear_has_bet_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game_showhand_protocols::msg_bet_info* bet_info_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_bet_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bet_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_bet_info_result();
  virtual ~packetl2c_bet_info_result();

  packetl2c_bet_info_result(const packetl2c_bet_info_result& from);

  inline packetl2c_bet_info_result& operator=(const packetl2c_bet_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bet_info_result& default_instance();

  void Swap(packetl2c_bet_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_bet_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bet_info_result& from);
  void MergeFrom(const packetl2c_bet_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional .game_showhand_protocols.msg_bet_info bet_info = 3;
  inline bool has_bet_info() const;
  inline void clear_bet_info();
  static const int kBetInfoFieldNumber = 3;
  inline const ::game_showhand_protocols::msg_bet_info& bet_info() const;
  inline ::game_showhand_protocols::msg_bet_info* mutable_bet_info();
  inline ::game_showhand_protocols::msg_bet_info* release_bet_info();
  inline void set_allocated_bet_info(::game_showhand_protocols::msg_bet_info* bet_info);

  // optional int64 bet_count = 4;
  inline bool has_bet_count() const;
  inline void clear_bet_count();
  static const int kBetCountFieldNumber = 4;
  inline ::google::protobuf::int64 bet_count() const;
  inline void set_bet_count(::google::protobuf::int64 value);

  // optional int32 player_id = 5;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 5;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_bet_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_bet_info();
  inline void clear_has_bet_info();
  inline void set_has_bet_count();
  inline void clear_has_bet_count();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::game_showhand_protocols::msg_bet_info* bet_info_;
  ::google::protobuf::int64 bet_count_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bet_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_start_game_message : public ::google::protobuf::Message {
 public:
  packetl2c_notice_start_game_message();
  virtual ~packetl2c_notice_start_game_message();

  packetl2c_notice_start_game_message(const packetl2c_notice_start_game_message& from);

  inline packetl2c_notice_start_game_message& operator=(const packetl2c_notice_start_game_message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_start_game_message& default_instance();

  void Swap(packetl2c_notice_start_game_message* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_start_game_message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_start_game_message& from);
  void MergeFrom(const packetl2c_notice_start_game_message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_game_message];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int64 minBetCount = 2;
  inline bool has_minbetcount() const;
  inline void clear_minbetcount();
  static const int kMinBetCountFieldNumber = 2;
  inline ::google::protobuf::int64 minbetcount() const;
  inline void set_minbetcount(::google::protobuf::int64 value);

  // optional .game_showhand_protocols.msg_player_info player_left = 3;
  inline bool has_player_left() const;
  inline void clear_player_left();
  static const int kPlayerLeftFieldNumber = 3;
  inline const ::game_showhand_protocols::msg_player_info& player_left() const;
  inline ::game_showhand_protocols::msg_player_info* mutable_player_left();
  inline ::game_showhand_protocols::msg_player_info* release_player_left();
  inline void set_allocated_player_left(::game_showhand_protocols::msg_player_info* player_left);

  // optional .game_showhand_protocols.msg_player_info player_right = 4;
  inline bool has_player_right() const;
  inline void clear_player_right();
  static const int kPlayerRightFieldNumber = 4;
  inline const ::game_showhand_protocols::msg_player_info& player_right() const;
  inline ::game_showhand_protocols::msg_player_info* mutable_player_right();
  inline ::game_showhand_protocols::msg_player_info* release_player_right();
  inline void set_allocated_player_right(::game_showhand_protocols::msg_player_info* player_right);

  // repeated .game_showhand_protocols.p_bet_state bet_state = 5;
  inline int bet_state_size() const;
  inline void clear_bet_state();
  static const int kBetStateFieldNumber = 5;
  inline const ::game_showhand_protocols::p_bet_state& bet_state(int index) const;
  inline ::game_showhand_protocols::p_bet_state* mutable_bet_state(int index);
  inline ::game_showhand_protocols::p_bet_state* add_bet_state();
  inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >&
      bet_state() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >*
      mutable_bet_state();

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_notice_start_game_message)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_minbetcount();
  inline void clear_has_minbetcount();
  inline void set_has_player_left();
  inline void clear_has_player_left();
  inline void set_has_player_right();
  inline void clear_has_player_right();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 minbetcount_;
  ::game_showhand_protocols::msg_player_info* player_left_;
  ::game_showhand_protocols::msg_player_info* player_right_;
  ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state > bet_state_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_start_game_message* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_control_message : public ::google::protobuf::Message {
 public:
  packetl2c_notice_control_message();
  virtual ~packetl2c_notice_control_message();

  packetl2c_notice_control_message(const packetl2c_notice_control_message& from);

  inline packetl2c_notice_control_message& operator=(const packetl2c_notice_control_message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_control_message& default_instance();

  void Swap(packetl2c_notice_control_message* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_control_message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_control_message& from);
  void MergeFrom(const packetl2c_notice_control_message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_control_message];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .game_showhand_protocols.msg_player_info player_info = 2;
  inline bool has_player_info() const;
  inline void clear_player_info();
  static const int kPlayerInfoFieldNumber = 2;
  inline const ::game_showhand_protocols::msg_player_info& player_info() const;
  inline ::game_showhand_protocols::msg_player_info* mutable_player_info();
  inline ::game_showhand_protocols::msg_player_info* release_player_info();
  inline void set_allocated_player_info(::game_showhand_protocols::msg_player_info* player_info);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_notice_control_message)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_info();
  inline void clear_has_player_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game_showhand_protocols::msg_player_info* player_info_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_control_message* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_sendcard_message : public ::google::protobuf::Message {
 public:
  packetl2c_notice_sendcard_message();
  virtual ~packetl2c_notice_sendcard_message();

  packetl2c_notice_sendcard_message(const packetl2c_notice_sendcard_message& from);

  inline packetl2c_notice_sendcard_message& operator=(const packetl2c_notice_sendcard_message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_sendcard_message& default_instance();

  void Swap(packetl2c_notice_sendcard_message* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_sendcard_message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_sendcard_message& from);
  void MergeFrom(const packetl2c_notice_sendcard_message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_sendcard_message];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int32 player_left = 2;
  inline bool has_player_left() const;
  inline void clear_player_left();
  static const int kPlayerLeftFieldNumber = 2;
  inline ::google::protobuf::int32 player_left() const;
  inline void set_player_left(::google::protobuf::int32 value);

  // optional int32 player_right = 3;
  inline bool has_player_right() const;
  inline void clear_player_right();
  static const int kPlayerRightFieldNumber = 3;
  inline ::google::protobuf::int32 player_right() const;
  inline void set_player_right(::google::protobuf::int32 value);

  // repeated .game_showhand_protocols.p_bet_state bet_state = 4;
  inline int bet_state_size() const;
  inline void clear_bet_state();
  static const int kBetStateFieldNumber = 4;
  inline const ::game_showhand_protocols::p_bet_state& bet_state(int index) const;
  inline ::game_showhand_protocols::p_bet_state* mutable_bet_state(int index);
  inline ::game_showhand_protocols::p_bet_state* add_bet_state();
  inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >&
      bet_state() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >*
      mutable_bet_state();

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_notice_sendcard_message)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_left();
  inline void clear_has_player_left();
  inline void set_has_player_right();
  inline void clear_has_player_right();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_left_;
  ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state > bet_state_;
  ::google::protobuf::int32 player_right_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_sendcard_message* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_bet : public ::google::protobuf::Message {
 public:
  packetl2c_notice_bet();
  virtual ~packetl2c_notice_bet();

  packetl2c_notice_bet(const packetl2c_notice_bet& from);

  inline packetl2c_notice_bet& operator=(const packetl2c_notice_bet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_bet& default_instance();

  void Swap(packetl2c_notice_bet* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_bet& from);
  void MergeFrom(const packetl2c_notice_bet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_bet_message];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // repeated .game_showhand_protocols.p_bet_state bet_state = 2;
  inline int bet_state_size() const;
  inline void clear_bet_state();
  static const int kBetStateFieldNumber = 2;
  inline const ::game_showhand_protocols::p_bet_state& bet_state(int index) const;
  inline ::game_showhand_protocols::p_bet_state* mutable_bet_state(int index);
  inline ::game_showhand_protocols::p_bet_state* add_bet_state();
  inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >&
      bet_state() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >*
      mutable_bet_state();

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_notice_bet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state > bet_state_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_bet* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_award_message : public ::google::protobuf::Message {
 public:
  packetl2c_notice_award_message();
  virtual ~packetl2c_notice_award_message();

  packetl2c_notice_award_message(const packetl2c_notice_award_message& from);

  inline packetl2c_notice_award_message& operator=(const packetl2c_notice_award_message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_award_message& default_instance();

  void Swap(packetl2c_notice_award_message* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_award_message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_award_message& from);
  void MergeFrom(const packetl2c_notice_award_message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_award_message];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .game_showhand_protocols.msg_player_result player_left = 2;
  inline bool has_player_left() const;
  inline void clear_player_left();
  static const int kPlayerLeftFieldNumber = 2;
  inline const ::game_showhand_protocols::msg_player_result& player_left() const;
  inline ::game_showhand_protocols::msg_player_result* mutable_player_left();
  inline ::game_showhand_protocols::msg_player_result* release_player_left();
  inline void set_allocated_player_left(::game_showhand_protocols::msg_player_result* player_left);

  // optional .game_showhand_protocols.msg_player_result player_right = 3;
  inline bool has_player_right() const;
  inline void clear_player_right();
  static const int kPlayerRightFieldNumber = 3;
  inline const ::game_showhand_protocols::msg_player_result& player_right() const;
  inline ::game_showhand_protocols::msg_player_result* mutable_player_right();
  inline ::game_showhand_protocols::msg_player_result* release_player_right();
  inline void set_allocated_player_right(::game_showhand_protocols::msg_player_result* player_right);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_notice_award_message)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_left();
  inline void clear_has_player_left();
  inline void set_has_player_right();
  inline void clear_has_player_right();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game_showhand_protocols::msg_player_result* player_left_;
  ::game_showhand_protocols::msg_player_result* player_right_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_award_message* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_check_message : public ::google::protobuf::Message {
 public:
  packetl2c_notice_check_message();
  virtual ~packetl2c_notice_check_message();

  packetl2c_notice_check_message(const packetl2c_notice_check_message& from);

  inline packetl2c_notice_check_message& operator=(const packetl2c_notice_check_message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_check_message& default_instance();

  void Swap(packetl2c_notice_check_message* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_check_message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_check_message& from);
  void MergeFrom(const packetl2c_notice_check_message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_check_message];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_notice_check_message)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_check_message* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_join_table : public ::google::protobuf::Message {
 public:
  packetl2c_notice_join_table();
  virtual ~packetl2c_notice_join_table();

  packetl2c_notice_join_table(const packetl2c_notice_join_table& from);

  inline packetl2c_notice_join_table& operator=(const packetl2c_notice_join_table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_join_table& default_instance();

  void Swap(packetl2c_notice_join_table* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_join_table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_join_table& from);
  void MergeFrom(const packetl2c_notice_join_table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_join_table_message];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int32 table_id = 2;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 2;
  inline ::google::protobuf::int32 table_id() const;
  inline void set_table_id(::google::protobuf::int32 value);

  // optional .game_showhand_protocols.msg_player_info player_info = 3;
  inline bool has_player_info() const;
  inline void clear_player_info();
  static const int kPlayerInfoFieldNumber = 3;
  inline const ::game_showhand_protocols::msg_player_info& player_info() const;
  inline ::game_showhand_protocols::msg_player_info* mutable_player_info();
  inline ::game_showhand_protocols::msg_player_info* release_player_info();
  inline void set_allocated_player_info(::game_showhand_protocols::msg_player_info* player_info);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_notice_join_table)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_player_info();
  inline void clear_has_player_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 table_id_;
  ::game_showhand_protocols::msg_player_info* player_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_join_table* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_leave_table : public ::google::protobuf::Message {
 public:
  packetl2c_notice_leave_table();
  virtual ~packetl2c_notice_leave_table();

  packetl2c_notice_leave_table(const packetl2c_notice_leave_table& from);

  inline packetl2c_notice_leave_table& operator=(const packetl2c_notice_leave_table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_leave_table& default_instance();

  void Swap(packetl2c_notice_leave_table* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_leave_table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_leave_table& from);
  void MergeFrom(const packetl2c_notice_leave_table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_leave_table_message];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int32 table_id = 2;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 2;
  inline ::google::protobuf::int32 table_id() const;
  inline void set_table_id(::google::protobuf::int32 value);

  // optional int32 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_notice_leave_table)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 table_id_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_leave_table* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_update_table : public ::google::protobuf::Message {
 public:
  packetl2c_notice_update_table();
  virtual ~packetl2c_notice_update_table();

  packetl2c_notice_update_table(const packetl2c_notice_update_table& from);

  inline packetl2c_notice_update_table& operator=(const packetl2c_notice_update_table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_update_table& default_instance();

  void Swap(packetl2c_notice_update_table* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_update_table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_update_table& from);
  void MergeFrom(const packetl2c_notice_update_table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_update_table_message];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int32 table_id = 2;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 2;
  inline ::google::protobuf::int32 table_id() const;
  inline void set_table_id(::google::protobuf::int32 value);

  // optional .game_showhand_protocols.msg_player_info player_left = 3;
  inline bool has_player_left() const;
  inline void clear_player_left();
  static const int kPlayerLeftFieldNumber = 3;
  inline const ::game_showhand_protocols::msg_player_info& player_left() const;
  inline ::game_showhand_protocols::msg_player_info* mutable_player_left();
  inline ::game_showhand_protocols::msg_player_info* release_player_left();
  inline void set_allocated_player_left(::game_showhand_protocols::msg_player_info* player_left);

  // optional .game_showhand_protocols.msg_player_info player_right = 4;
  inline bool has_player_right() const;
  inline void clear_player_right();
  static const int kPlayerRightFieldNumber = 4;
  inline const ::game_showhand_protocols::msg_player_info& player_right() const;
  inline ::game_showhand_protocols::msg_player_info* mutable_player_right();
  inline ::game_showhand_protocols::msg_player_info* release_player_right();
  inline void set_allocated_player_right(::game_showhand_protocols::msg_player_info* player_right);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_notice_update_table)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_player_left();
  inline void clear_has_player_left();
  inline void set_has_player_right();
  inline void clear_has_player_right();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 table_id_;
  ::game_showhand_protocols::msg_player_info* player_left_;
  ::game_showhand_protocols::msg_player_info* player_right_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_update_table* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_table_player_state : public ::google::protobuf::Message {
 public:
  packetl2c_notice_table_player_state();
  virtual ~packetl2c_notice_table_player_state();

  packetl2c_notice_table_player_state(const packetl2c_notice_table_player_state& from);

  inline packetl2c_notice_table_player_state& operator=(const packetl2c_notice_table_player_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_table_player_state& default_instance();

  void Swap(packetl2c_notice_table_player_state* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_table_player_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_table_player_state& from);
  void MergeFrom(const packetl2c_notice_table_player_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_table_player_message];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional uint32 table_id = 2;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 2;
  inline ::google::protobuf::uint32 table_id() const;
  inline void set_table_id(::google::protobuf::uint32 value);

  // optional uint32 left_state = 3;
  inline bool has_left_state() const;
  inline void clear_left_state();
  static const int kLeftStateFieldNumber = 3;
  inline ::google::protobuf::uint32 left_state() const;
  inline void set_left_state(::google::protobuf::uint32 value);

  // optional uint32 right_state = 4;
  inline bool has_right_state() const;
  inline void clear_right_state();
  static const int kRightStateFieldNumber = 4;
  inline ::google::protobuf::uint32 right_state() const;
  inline void set_right_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_notice_table_player_state)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_left_state();
  inline void clear_has_left_state();
  inline void set_has_right_state();
  inline void clear_has_right_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::uint32 table_id_;
  ::google::protobuf::uint32 left_state_;
  ::google::protobuf::uint32 right_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_table_player_state* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_check_state : public ::google::protobuf::Message {
 public:
  packetc2l_check_state();
  virtual ~packetc2l_check_state();

  packetc2l_check_state(const packetc2l_check_state& from);

  inline packetc2l_check_state& operator=(const packetc2l_check_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_check_state& default_instance();

  void Swap(packetc2l_check_state* other);

  // implements Message ----------------------------------------------

  packetc2l_check_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_check_state& from);
  void MergeFrom(const packetc2l_check_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_check_state)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_check_state* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_check_state_result : public ::google::protobuf::Message {
 public:
  packetl2c_check_state_result();
  virtual ~packetl2c_check_state_result();

  packetl2c_check_state_result(const packetl2c_check_state_result& from);

  inline packetl2c_check_state_result& operator=(const packetl2c_check_state_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_check_state_result& default_instance();

  void Swap(packetl2c_check_state_result* other);

  // implements Message ----------------------------------------------

  packetl2c_check_state_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_check_state_result& from);
  void MergeFrom(const packetl2c_check_state_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional uint32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_check_state_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::uint32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_check_state_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_control_info : public ::google::protobuf::Message {
 public:
  packetc2l_control_info();
  virtual ~packetc2l_control_info();

  packetc2l_control_info(const packetc2l_control_info& from);

  inline packetc2l_control_info& operator=(const packetc2l_control_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_control_info& default_instance();

  void Swap(packetc2l_control_info* other);

  // implements Message ----------------------------------------------

  packetc2l_control_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_control_info& from);
  void MergeFrom(const packetc2l_control_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_control_win_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int32 win = 2;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 2;
  inline ::google::protobuf::int32 win() const;
  inline void set_win(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_control_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_win();
  inline void clear_has_win();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_control_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_control_change_result : public ::google::protobuf::Message {
 public:
  packetl2c_control_change_result();
  virtual ~packetl2c_control_change_result();

  packetl2c_control_change_result(const packetl2c_control_change_result& from);

  inline packetl2c_control_change_result& operator=(const packetl2c_control_change_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_control_change_result& default_instance();

  void Swap(packetl2c_control_change_result* other);

  // implements Message ----------------------------------------------

  packetl2c_control_change_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_control_change_result& from);
  void MergeFrom(const packetl2c_control_change_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_control_change_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_control_change_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_control_change_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_gm_luck_info : public ::google::protobuf::Message {
 public:
  packetl2c_notice_gm_luck_info();
  virtual ~packetl2c_notice_gm_luck_info();

  packetl2c_notice_gm_luck_info(const packetl2c_notice_gm_luck_info& from);

  inline packetl2c_notice_gm_luck_info& operator=(const packetl2c_notice_gm_luck_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_gm_luck_info& default_instance();

  void Swap(packetl2c_notice_gm_luck_info* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_gm_luck_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_gm_luck_info& from);
  void MergeFrom(const packetl2c_notice_gm_luck_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_luck_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int64 Total_Luck = 2;
  inline bool has_total_luck() const;
  inline void clear_total_luck();
  static const int kTotalLuckFieldNumber = 2;
  inline ::google::protobuf::int64 total_luck() const;
  inline void set_total_luck(::google::protobuf::int64 value);

  // optional int64 add_luck = 3;
  inline bool has_add_luck() const;
  inline void clear_add_luck();
  static const int kAddLuckFieldNumber = 3;
  inline ::google::protobuf::int64 add_luck() const;
  inline void set_add_luck(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_notice_gm_luck_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_total_luck();
  inline void clear_has_total_luck();
  inline void set_has_add_luck();
  inline void clear_has_add_luck();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 total_luck_;
  ::google::protobuf::int64 add_luck_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_gm_luck_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_offline_time : public ::google::protobuf::Message {
 public:
  packetl2c_offline_time();
  virtual ~packetl2c_offline_time();

  packetl2c_offline_time(const packetl2c_offline_time& from);

  inline packetl2c_offline_time& operator=(const packetl2c_offline_time& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_offline_time& default_instance();

  void Swap(packetl2c_offline_time* other);

  // implements Message ----------------------------------------------

  packetl2c_offline_time* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_offline_time& from);
  void MergeFrom(const packetl2c_offline_time& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_offline_time];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int32 offline_state = 3;
  inline bool has_offline_state() const;
  inline void clear_offline_state();
  static const int kOfflineStateFieldNumber = 3;
  inline ::google::protobuf::int32 offline_state() const;
  inline void set_offline_state(::google::protobuf::int32 value);

  // optional int32 bet_time = 4;
  inline bool has_bet_time() const;
  inline void clear_bet_time();
  static const int kBetTimeFieldNumber = 4;
  inline ::google::protobuf::int32 bet_time() const;
  inline void set_bet_time(::google::protobuf::int32 value);

  // optional int32 bet_player_id = 5;
  inline bool has_bet_player_id() const;
  inline void clear_bet_player_id();
  static const int kBetPlayerIdFieldNumber = 5;
  inline ::google::protobuf::int32 bet_player_id() const;
  inline void set_bet_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_offline_time)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_offline_state();
  inline void clear_has_offline_state();
  inline void set_has_bet_time();
  inline void clear_has_bet_time();
  inline void set_has_bet_player_id();
  inline void clear_has_bet_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 offline_state_;
  ::google::protobuf::int32 bet_time_;
  ::google::protobuf::int32 bet_player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_offline_time* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_out_time : public ::google::protobuf::Message {
 public:
  packetl2c_notice_out_time();
  virtual ~packetl2c_notice_out_time();

  packetl2c_notice_out_time(const packetl2c_notice_out_time& from);

  inline packetl2c_notice_out_time& operator=(const packetl2c_notice_out_time& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_out_time& default_instance();

  void Swap(packetl2c_notice_out_time* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_out_time* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_out_time& from);
  void MergeFrom(const packetl2c_notice_out_time& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_out_time];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int32 out_state = 2;
  inline bool has_out_state() const;
  inline void clear_out_state();
  static const int kOutStateFieldNumber = 2;
  inline ::google::protobuf::int32 out_state() const;
  inline void set_out_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_notice_out_time)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_out_state();
  inline void clear_has_out_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 out_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_out_time* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_debuginfo : public ::google::protobuf::Message {
 public:
  packetl2c_bc_debuginfo();
  virtual ~packetl2c_bc_debuginfo();

  packetl2c_bc_debuginfo(const packetl2c_bc_debuginfo& from);

  inline packetl2c_bc_debuginfo& operator=(const packetl2c_bc_debuginfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_debuginfo& default_instance();

  void Swap(packetl2c_bc_debuginfo* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_debuginfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_debuginfo& from);
  void MergeFrom(const packetl2c_bc_debuginfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int64 total_profit = 3 [default = 0];
  inline bool has_total_profit() const;
  inline void clear_total_profit();
  static const int kTotalProfitFieldNumber = 3;
  inline ::google::protobuf::int64 total_profit() const;
  inline void set_total_profit(::google::protobuf::int64 value);

  // optional int64 total_stock = 4 [default = 0];
  inline bool has_total_stock() const;
  inline void clear_total_stock();
  static const int kTotalStockFieldNumber = 4;
  inline ::google::protobuf::int64 total_stock() const;
  inline void set_total_stock(::google::protobuf::int64 value);

  // optional int64 total_Rate = 6 [default = 0];
  inline bool has_total_rate() const;
  inline void clear_total_rate();
  static const int kTotalRateFieldNumber = 6;
  inline ::google::protobuf::int64 total_rate() const;
  inline void set_total_rate(::google::protobuf::int64 value);

  // optional string debug_infos = 5;
  inline bool has_debug_infos() const;
  inline void clear_debug_infos();
  static const int kDebugInfosFieldNumber = 5;
  inline const ::std::string& debug_infos() const;
  inline void set_debug_infos(const ::std::string& value);
  inline void set_debug_infos(const char* value);
  inline void set_debug_infos(const char* value, size_t size);
  inline ::std::string* mutable_debug_infos();
  inline ::std::string* release_debug_infos();
  inline void set_allocated_debug_infos(::std::string* debug_infos);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_bc_debuginfo)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_total_profit();
  inline void clear_has_total_profit();
  inline void set_has_total_stock();
  inline void clear_has_total_stock();
  inline void set_has_total_rate();
  inline void clear_has_total_rate();
  inline void set_has_debug_infos();
  inline void clear_has_debug_infos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int64 total_profit_;
  ::google::protobuf::int64 total_stock_;
  ::google::protobuf::int64 total_rate_;
  ::std::string* debug_infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_debuginfo* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2l_get_room_info

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
inline bool packetc2l_get_room_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_room_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_room_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_room_info::clear_packet_id() {
  packet_id_ = 10001;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_get_room_info::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_room_info::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_get_room_info_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
inline bool packetl2c_get_room_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_get_room_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_get_room_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_get_room_info_result::clear_packet_id() {
  packet_id_ = 15001;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_get_room_info_result::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_get_room_info_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated int32 room_ids = 2;
inline int packetl2c_get_room_info_result::room_ids_size() const {
  return room_ids_.size();
}
inline void packetl2c_get_room_info_result::clear_room_ids() {
  room_ids_.Clear();
}
inline ::google::protobuf::int32 packetl2c_get_room_info_result::room_ids(int index) const {
  return room_ids_.Get(index);
}
inline void packetl2c_get_room_info_result::set_room_ids(int index, ::google::protobuf::int32 value) {
  room_ids_.Set(index, value);
}
inline void packetl2c_get_room_info_result::add_room_ids(::google::protobuf::int32 value) {
  room_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_get_room_info_result::room_ids() const {
  return room_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_get_room_info_result::mutable_room_ids() {
  return &room_ids_;
}

// -------------------------------------------------------------------

// packetc2l_enter_game_room

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_game_room];
inline bool packetc2l_enter_game_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_enter_game_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_enter_game_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_enter_game_room::clear_packet_id() {
  packet_id_ = 10002;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_enter_game_room::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_enter_game_room::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 room_id = 2;
inline bool packetc2l_enter_game_room::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_enter_game_room::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_enter_game_room::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_enter_game_room::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetc2l_enter_game_room::room_id() const {
  return room_id_;
}
inline void packetc2l_enter_game_room::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_enter_game_room_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_game_room_result];
inline bool packetl2c_enter_game_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_enter_game_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_enter_game_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_enter_game_room_result::clear_packet_id() {
  packet_id_ = 15002;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_enter_game_room_result::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_enter_game_room_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2;
inline bool packetl2c_enter_game_room_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_enter_game_room_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_enter_game_room_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_enter_game_room_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_enter_game_room_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_enter_game_room_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 room_id = 3;
inline bool packetl2c_enter_game_room_result::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_enter_game_room_result::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_enter_game_room_result::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_enter_game_room_result::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetl2c_enter_game_room_result::room_id() const {
  return room_id_;
}
inline void packetl2c_enter_game_room_result::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// repeated .game_showhand_protocols.msg_table_info table_list = 4;
inline int packetl2c_enter_game_room_result::table_list_size() const {
  return table_list_.size();
}
inline void packetl2c_enter_game_room_result::clear_table_list() {
  table_list_.Clear();
}
inline const ::game_showhand_protocols::msg_table_info& packetl2c_enter_game_room_result::table_list(int index) const {
  return table_list_.Get(index);
}
inline ::game_showhand_protocols::msg_table_info* packetl2c_enter_game_room_result::mutable_table_list(int index) {
  return table_list_.Mutable(index);
}
inline ::game_showhand_protocols::msg_table_info* packetl2c_enter_game_room_result::add_table_list() {
  return table_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info >&
packetl2c_enter_game_room_result::table_list() const {
  return table_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info >*
packetl2c_enter_game_room_result::mutable_table_list() {
  return &table_list_;
}

// -------------------------------------------------------------------

// packetl2c_control_enter_game_room_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_control_enter_game_room_result];
inline bool packetl2c_control_enter_game_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_control_enter_game_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_control_enter_game_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_control_enter_game_room_result::clear_packet_id() {
  packet_id_ = 15012;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_control_enter_game_room_result::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_control_enter_game_room_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2;
inline bool packetl2c_control_enter_game_room_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_control_enter_game_room_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_control_enter_game_room_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_control_enter_game_room_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_control_enter_game_room_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_control_enter_game_room_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 room_id = 3;
inline bool packetl2c_control_enter_game_room_result::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_control_enter_game_room_result::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_control_enter_game_room_result::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_control_enter_game_room_result::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetl2c_control_enter_game_room_result::room_id() const {
  return room_id_;
}
inline void packetl2c_control_enter_game_room_result::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// repeated .game_showhand_protocols.msg_table_info table_list = 4;
inline int packetl2c_control_enter_game_room_result::table_list_size() const {
  return table_list_.size();
}
inline void packetl2c_control_enter_game_room_result::clear_table_list() {
  table_list_.Clear();
}
inline const ::game_showhand_protocols::msg_table_info& packetl2c_control_enter_game_room_result::table_list(int index) const {
  return table_list_.Get(index);
}
inline ::game_showhand_protocols::msg_table_info* packetl2c_control_enter_game_room_result::mutable_table_list(int index) {
  return table_list_.Mutable(index);
}
inline ::game_showhand_protocols::msg_table_info* packetl2c_control_enter_game_room_result::add_table_list() {
  return table_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info >&
packetl2c_control_enter_game_room_result::table_list() const {
  return table_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info >*
packetl2c_control_enter_game_room_result::mutable_table_list() {
  return &table_list_;
}

// -------------------------------------------------------------------

// packetc2l_quit_game_room

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_quit_game_room];
inline bool packetc2l_quit_game_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_quit_game_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_quit_game_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_quit_game_room::clear_packet_id() {
  packet_id_ = 10003;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_quit_game_room::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_quit_game_room::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_quit_game_room_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_quit_game_room_result];
inline bool packetl2c_quit_game_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_quit_game_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_quit_game_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_quit_game_room_result::clear_packet_id() {
  packet_id_ = 15009;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_quit_game_room_result::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_quit_game_room_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2;
inline bool packetl2c_quit_game_room_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_quit_game_room_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_quit_game_room_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_quit_game_room_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_quit_game_room_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_quit_game_room_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// repeated int32 room_ids = 3;
inline int packetl2c_quit_game_room_result::room_ids_size() const {
  return room_ids_.size();
}
inline void packetl2c_quit_game_room_result::clear_room_ids() {
  room_ids_.Clear();
}
inline ::google::protobuf::int32 packetl2c_quit_game_room_result::room_ids(int index) const {
  return room_ids_.Get(index);
}
inline void packetl2c_quit_game_room_result::set_room_ids(int index, ::google::protobuf::int32 value) {
  room_ids_.Set(index, value);
}
inline void packetl2c_quit_game_room_result::add_room_ids(::google::protobuf::int32 value) {
  room_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_quit_game_room_result::room_ids() const {
  return room_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_quit_game_room_result::mutable_room_ids() {
  return &room_ids_;
}

// -------------------------------------------------------------------

// packetc2l_choose_desk

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_choose_desk];
inline bool packetc2l_choose_desk::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_choose_desk::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_choose_desk::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_choose_desk::clear_packet_id() {
  packet_id_ = 10005;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_choose_desk::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_choose_desk::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 table_id = 2;
inline bool packetc2l_choose_desk::has_table_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_choose_desk::set_has_table_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_choose_desk::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_choose_desk::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
inline ::google::protobuf::int32 packetc2l_choose_desk::table_id() const {
  return table_id_;
}
inline void packetc2l_choose_desk::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_choose_desk_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_choose_desk_result];
inline bool packetl2c_choose_desk_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_choose_desk_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_choose_desk_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_choose_desk_result::clear_packet_id() {
  packet_id_ = 15004;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_choose_desk_result::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_choose_desk_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2;
inline bool packetl2c_choose_desk_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_choose_desk_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_choose_desk_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_choose_desk_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_choose_desk_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_choose_desk_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional .game_showhand_protocols.msg_table_info table_info = 3;
inline bool packetl2c_choose_desk_result::has_table_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_choose_desk_result::set_has_table_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_choose_desk_result::clear_has_table_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_choose_desk_result::clear_table_info() {
  if (table_info_ != NULL) table_info_->::game_showhand_protocols::msg_table_info::Clear();
  clear_has_table_info();
}
inline const ::game_showhand_protocols::msg_table_info& packetl2c_choose_desk_result::table_info() const {
  return table_info_ != NULL ? *table_info_ : *default_instance_->table_info_;
}
inline ::game_showhand_protocols::msg_table_info* packetl2c_choose_desk_result::mutable_table_info() {
  set_has_table_info();
  if (table_info_ == NULL) table_info_ = new ::game_showhand_protocols::msg_table_info;
  return table_info_;
}
inline ::game_showhand_protocols::msg_table_info* packetl2c_choose_desk_result::release_table_info() {
  clear_has_table_info();
  ::game_showhand_protocols::msg_table_info* temp = table_info_;
  table_info_ = NULL;
  return temp;
}
inline void packetl2c_choose_desk_result::set_allocated_table_info(::game_showhand_protocols::msg_table_info* table_info) {
  delete table_info_;
  table_info_ = table_info;
  if (table_info) {
    set_has_table_info();
  } else {
    clear_has_table_info();
  }
}

// optional int32 room_id = 4;
inline bool packetl2c_choose_desk_result::has_room_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_choose_desk_result::set_has_room_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_choose_desk_result::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_choose_desk_result::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetl2c_choose_desk_result::room_id() const {
  return room_id_;
}
inline void packetl2c_choose_desk_result::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional int32 table_state = 5;
inline bool packetl2c_choose_desk_result::has_table_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_choose_desk_result::set_has_table_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_choose_desk_result::clear_has_table_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_choose_desk_result::clear_table_state() {
  table_state_ = 0;
  clear_has_table_state();
}
inline ::google::protobuf::int32 packetl2c_choose_desk_result::table_state() const {
  return table_state_;
}
inline void packetl2c_choose_desk_result::set_table_state(::google::protobuf::int32 value) {
  set_has_table_state();
  table_state_ = value;
}

// -------------------------------------------------------------------

// packetc2l_remove_rob_desk

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_remove_rob_desk];
inline bool packetc2l_remove_rob_desk::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_remove_rob_desk::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_remove_rob_desk::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_remove_rob_desk::clear_packet_id() {
  packet_id_ = 10013;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_remove_rob_desk::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_remove_rob_desk::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 table_id = 2;
inline bool packetc2l_remove_rob_desk::has_table_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_remove_rob_desk::set_has_table_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_remove_rob_desk::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_remove_rob_desk::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
inline ::google::protobuf::int32 packetc2l_remove_rob_desk::table_id() const {
  return table_id_;
}
inline void packetc2l_remove_rob_desk::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_remove_rob_desk_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_remove_rob_desk_result];
inline bool packetl2c_remove_rob_desk_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_remove_rob_desk_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_remove_rob_desk_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_remove_rob_desk_result::clear_packet_id() {
  packet_id_ = 15037;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_remove_rob_desk_result::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_remove_rob_desk_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2;
inline bool packetl2c_remove_rob_desk_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_remove_rob_desk_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_remove_rob_desk_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_remove_rob_desk_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_remove_rob_desk_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_remove_rob_desk_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_get_table_scene_info

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_scene_info];
inline bool packetc2l_get_table_scene_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_table_scene_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_table_scene_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_table_scene_info::clear_packet_id() {
  packet_id_ = 10006;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_get_table_scene_info::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_table_scene_info::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_get_table_scene_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_table_scene_info];
inline bool packetl2c_get_table_scene_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_get_table_scene_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_get_table_scene_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_get_table_scene_result::clear_packet_id() {
  packet_id_ = 15005;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_get_table_scene_result::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_get_table_scene_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_showhand_protocols.msg_table_info table_info = 2;
inline bool packetl2c_get_table_scene_result::has_table_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_get_table_scene_result::set_has_table_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_get_table_scene_result::clear_has_table_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_get_table_scene_result::clear_table_info() {
  if (table_info_ != NULL) table_info_->::game_showhand_protocols::msg_table_info::Clear();
  clear_has_table_info();
}
inline const ::game_showhand_protocols::msg_table_info& packetl2c_get_table_scene_result::table_info() const {
  return table_info_ != NULL ? *table_info_ : *default_instance_->table_info_;
}
inline ::game_showhand_protocols::msg_table_info* packetl2c_get_table_scene_result::mutable_table_info() {
  set_has_table_info();
  if (table_info_ == NULL) table_info_ = new ::game_showhand_protocols::msg_table_info;
  return table_info_;
}
inline ::game_showhand_protocols::msg_table_info* packetl2c_get_table_scene_result::release_table_info() {
  clear_has_table_info();
  ::game_showhand_protocols::msg_table_info* temp = table_info_;
  table_info_ = NULL;
  return temp;
}
inline void packetl2c_get_table_scene_result::set_allocated_table_info(::game_showhand_protocols::msg_table_info* table_info) {
  delete table_info_;
  table_info_ = table_info;
  if (table_info) {
    set_has_table_info();
  } else {
    clear_has_table_info();
  }
}

// repeated .game_showhand_protocols.p_bet_state bet_state = 3;
inline int packetl2c_get_table_scene_result::bet_state_size() const {
  return bet_state_.size();
}
inline void packetl2c_get_table_scene_result::clear_bet_state() {
  bet_state_.Clear();
}
inline const ::game_showhand_protocols::p_bet_state& packetl2c_get_table_scene_result::bet_state(int index) const {
  return bet_state_.Get(index);
}
inline ::game_showhand_protocols::p_bet_state* packetl2c_get_table_scene_result::mutable_bet_state(int index) {
  return bet_state_.Mutable(index);
}
inline ::game_showhand_protocols::p_bet_state* packetl2c_get_table_scene_result::add_bet_state() {
  return bet_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >&
packetl2c_get_table_scene_result::bet_state() const {
  return bet_state_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >*
packetl2c_get_table_scene_result::mutable_bet_state() {
  return &bet_state_;
}

// optional int32 bet_time = 4;
inline bool packetl2c_get_table_scene_result::has_bet_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_get_table_scene_result::set_has_bet_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_get_table_scene_result::clear_has_bet_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_get_table_scene_result::clear_bet_time() {
  bet_time_ = 0;
  clear_has_bet_time();
}
inline ::google::protobuf::int32 packetl2c_get_table_scene_result::bet_time() const {
  return bet_time_;
}
inline void packetl2c_get_table_scene_result::set_bet_time(::google::protobuf::int32 value) {
  set_has_bet_time();
  bet_time_ = value;
}

// optional int64 left_betcount = 5;
inline bool packetl2c_get_table_scene_result::has_left_betcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_get_table_scene_result::set_has_left_betcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_get_table_scene_result::clear_has_left_betcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_get_table_scene_result::clear_left_betcount() {
  left_betcount_ = GOOGLE_LONGLONG(0);
  clear_has_left_betcount();
}
inline ::google::protobuf::int64 packetl2c_get_table_scene_result::left_betcount() const {
  return left_betcount_;
}
inline void packetl2c_get_table_scene_result::set_left_betcount(::google::protobuf::int64 value) {
  set_has_left_betcount();
  left_betcount_ = value;
}

// optional int64 right_betcount = 6;
inline bool packetl2c_get_table_scene_result::has_right_betcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_get_table_scene_result::set_has_right_betcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_get_table_scene_result::clear_has_right_betcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_get_table_scene_result::clear_right_betcount() {
  right_betcount_ = GOOGLE_LONGLONG(0);
  clear_has_right_betcount();
}
inline ::google::protobuf::int64 packetl2c_get_table_scene_result::right_betcount() const {
  return right_betcount_;
}
inline void packetl2c_get_table_scene_result::set_right_betcount(::google::protobuf::int64 value) {
  set_has_right_betcount();
  right_betcount_ = value;
}

// optional int64 minBetCount = 7;
inline bool packetl2c_get_table_scene_result::has_minbetcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetl2c_get_table_scene_result::set_has_minbetcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetl2c_get_table_scene_result::clear_has_minbetcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetl2c_get_table_scene_result::clear_minbetcount() {
  minbetcount_ = GOOGLE_LONGLONG(0);
  clear_has_minbetcount();
}
inline ::google::protobuf::int64 packetl2c_get_table_scene_result::minbetcount() const {
  return minbetcount_;
}
inline void packetl2c_get_table_scene_result::set_minbetcount(::google::protobuf::int64 value) {
  set_has_minbetcount();
  minbetcount_ = value;
}

// optional int32 roomId = 8;
inline bool packetl2c_get_table_scene_result::has_roomid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void packetl2c_get_table_scene_result::set_has_roomid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void packetl2c_get_table_scene_result::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void packetl2c_get_table_scene_result::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 packetl2c_get_table_scene_result::roomid() const {
  return roomid_;
}
inline void packetl2c_get_table_scene_result::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional int64 left_count = 9;
inline bool packetl2c_get_table_scene_result::has_left_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void packetl2c_get_table_scene_result::set_has_left_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void packetl2c_get_table_scene_result::clear_has_left_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void packetl2c_get_table_scene_result::clear_left_count() {
  left_count_ = GOOGLE_LONGLONG(0);
  clear_has_left_count();
}
inline ::google::protobuf::int64 packetl2c_get_table_scene_result::left_count() const {
  return left_count_;
}
inline void packetl2c_get_table_scene_result::set_left_count(::google::protobuf::int64 value) {
  set_has_left_count();
  left_count_ = value;
}

// optional int64 right_count = 10;
inline bool packetl2c_get_table_scene_result::has_right_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void packetl2c_get_table_scene_result::set_has_right_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void packetl2c_get_table_scene_result::clear_has_right_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void packetl2c_get_table_scene_result::clear_right_count() {
  right_count_ = GOOGLE_LONGLONG(0);
  clear_has_right_count();
}
inline ::google::protobuf::int64 packetl2c_get_table_scene_result::right_count() const {
  return right_count_;
}
inline void packetl2c_get_table_scene_result::set_right_count(::google::protobuf::int64 value) {
  set_has_right_count();
  right_count_ = value;
}

// -------------------------------------------------------------------

// packetc2l_quit_desk

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_quit_desk];
inline bool packetc2l_quit_desk::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_quit_desk::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_quit_desk::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_quit_desk::clear_packet_id() {
  packet_id_ = 10007;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_quit_desk::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_quit_desk::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packet_l2c_quit_desk_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_quit_desk_result];
inline bool packet_l2c_quit_desk_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_l2c_quit_desk_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_l2c_quit_desk_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_l2c_quit_desk_result::clear_packet_id() {
  packet_id_ = 15010;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packet_l2c_quit_desk_result::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_l2c_quit_desk_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2;
inline bool packet_l2c_quit_desk_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_l2c_quit_desk_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_l2c_quit_desk_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_l2c_quit_desk_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packet_l2c_quit_desk_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packet_l2c_quit_desk_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// repeated .game_showhand_protocols.msg_table_info table_list = 3;
inline int packet_l2c_quit_desk_result::table_list_size() const {
  return table_list_.size();
}
inline void packet_l2c_quit_desk_result::clear_table_list() {
  table_list_.Clear();
}
inline const ::game_showhand_protocols::msg_table_info& packet_l2c_quit_desk_result::table_list(int index) const {
  return table_list_.Get(index);
}
inline ::game_showhand_protocols::msg_table_info* packet_l2c_quit_desk_result::mutable_table_list(int index) {
  return table_list_.Mutable(index);
}
inline ::game_showhand_protocols::msg_table_info* packet_l2c_quit_desk_result::add_table_list() {
  return table_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info >&
packet_l2c_quit_desk_result::table_list() const {
  return table_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info >*
packet_l2c_quit_desk_result::mutable_table_list() {
  return &table_list_;
}

// optional int32 room_id = 4;
inline bool packet_l2c_quit_desk_result::has_room_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packet_l2c_quit_desk_result::set_has_room_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packet_l2c_quit_desk_result::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packet_l2c_quit_desk_result::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packet_l2c_quit_desk_result::room_id() const {
  return room_id_;
}
inline void packet_l2c_quit_desk_result::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_player_ready

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_player_ready];
inline bool packetc2l_player_ready::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_player_ready::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_player_ready::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_player_ready::clear_packet_id() {
  packet_id_ = 10008;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_player_ready::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_player_ready::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_player_ready_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_ready_result];
inline bool packetl2c_player_ready_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_player_ready_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_player_ready_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_player_ready_result::clear_packet_id() {
  packet_id_ = 15006;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_player_ready_result::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_player_ready_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2;
inline bool packetl2c_player_ready_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_player_ready_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_player_ready_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_player_ready_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_player_ready_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_player_ready_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 player_id = 3;
inline bool packetl2c_player_ready_result::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_player_ready_result::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_player_ready_result::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_player_ready_result::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_player_ready_result::player_id() const {
  return player_id_;
}
inline void packetl2c_player_ready_result::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_view_card

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_view_card];
inline bool packetc2l_view_card::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_view_card::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_view_card::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_view_card::clear_packet_id() {
  packet_id_ = 10009;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_view_card::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_view_card::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_view_card_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_view_card_result];
inline bool packetl2c_view_card_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_view_card_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_view_card_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_view_card_result::clear_packet_id() {
  packet_id_ = 15007;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_view_card_result::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_view_card_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_view_card_result::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_view_card_result::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_view_card_result::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_view_card_result::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_view_card_result::player_id() const {
  return player_id_;
}
inline void packetl2c_view_card_result::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_bet_info

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bet_info];
inline bool packetc2l_bet_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_bet_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_bet_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_bet_info::clear_packet_id() {
  packet_id_ = 10010;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_bet_info::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_bet_info::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_showhand_protocols.msg_bet_info bet_info = 2;
inline bool packetc2l_bet_info::has_bet_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_bet_info::set_has_bet_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_bet_info::clear_has_bet_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_bet_info::clear_bet_info() {
  if (bet_info_ != NULL) bet_info_->::game_showhand_protocols::msg_bet_info::Clear();
  clear_has_bet_info();
}
inline const ::game_showhand_protocols::msg_bet_info& packetc2l_bet_info::bet_info() const {
  return bet_info_ != NULL ? *bet_info_ : *default_instance_->bet_info_;
}
inline ::game_showhand_protocols::msg_bet_info* packetc2l_bet_info::mutable_bet_info() {
  set_has_bet_info();
  if (bet_info_ == NULL) bet_info_ = new ::game_showhand_protocols::msg_bet_info;
  return bet_info_;
}
inline ::game_showhand_protocols::msg_bet_info* packetc2l_bet_info::release_bet_info() {
  clear_has_bet_info();
  ::game_showhand_protocols::msg_bet_info* temp = bet_info_;
  bet_info_ = NULL;
  return temp;
}
inline void packetc2l_bet_info::set_allocated_bet_info(::game_showhand_protocols::msg_bet_info* bet_info) {
  delete bet_info_;
  bet_info_ = bet_info;
  if (bet_info) {
    set_has_bet_info();
  } else {
    clear_has_bet_info();
  }
}

// -------------------------------------------------------------------

// packetl2c_bet_info_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_result];
inline bool packetl2c_bet_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bet_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bet_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bet_info_result::clear_packet_id() {
  packet_id_ = 15008;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_bet_info_result::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bet_info_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2;
inline bool packetl2c_bet_info_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bet_info_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bet_info_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bet_info_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_bet_info_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_bet_info_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional .game_showhand_protocols.msg_bet_info bet_info = 3;
inline bool packetl2c_bet_info_result::has_bet_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bet_info_result::set_has_bet_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bet_info_result::clear_has_bet_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bet_info_result::clear_bet_info() {
  if (bet_info_ != NULL) bet_info_->::game_showhand_protocols::msg_bet_info::Clear();
  clear_has_bet_info();
}
inline const ::game_showhand_protocols::msg_bet_info& packetl2c_bet_info_result::bet_info() const {
  return bet_info_ != NULL ? *bet_info_ : *default_instance_->bet_info_;
}
inline ::game_showhand_protocols::msg_bet_info* packetl2c_bet_info_result::mutable_bet_info() {
  set_has_bet_info();
  if (bet_info_ == NULL) bet_info_ = new ::game_showhand_protocols::msg_bet_info;
  return bet_info_;
}
inline ::game_showhand_protocols::msg_bet_info* packetl2c_bet_info_result::release_bet_info() {
  clear_has_bet_info();
  ::game_showhand_protocols::msg_bet_info* temp = bet_info_;
  bet_info_ = NULL;
  return temp;
}
inline void packetl2c_bet_info_result::set_allocated_bet_info(::game_showhand_protocols::msg_bet_info* bet_info) {
  delete bet_info_;
  bet_info_ = bet_info;
  if (bet_info) {
    set_has_bet_info();
  } else {
    clear_has_bet_info();
  }
}

// optional int64 bet_count = 4;
inline bool packetl2c_bet_info_result::has_bet_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_bet_info_result::set_has_bet_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_bet_info_result::clear_has_bet_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_bet_info_result::clear_bet_count() {
  bet_count_ = GOOGLE_LONGLONG(0);
  clear_has_bet_count();
}
inline ::google::protobuf::int64 packetl2c_bet_info_result::bet_count() const {
  return bet_count_;
}
inline void packetl2c_bet_info_result::set_bet_count(::google::protobuf::int64 value) {
  set_has_bet_count();
  bet_count_ = value;
}

// optional int32 player_id = 5;
inline bool packetl2c_bet_info_result::has_player_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_bet_info_result::set_has_player_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_bet_info_result::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_bet_info_result::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bet_info_result::player_id() const {
  return player_id_;
}
inline void packetl2c_bet_info_result::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_notice_start_game_message

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_game_message];
inline bool packetl2c_notice_start_game_message::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_start_game_message::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_start_game_message::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_start_game_message::clear_packet_id() {
  packet_id_ = 15021;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_notice_start_game_message::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_start_game_message::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int64 minBetCount = 2;
inline bool packetl2c_notice_start_game_message::has_minbetcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_start_game_message::set_has_minbetcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_start_game_message::clear_has_minbetcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_start_game_message::clear_minbetcount() {
  minbetcount_ = GOOGLE_LONGLONG(0);
  clear_has_minbetcount();
}
inline ::google::protobuf::int64 packetl2c_notice_start_game_message::minbetcount() const {
  return minbetcount_;
}
inline void packetl2c_notice_start_game_message::set_minbetcount(::google::protobuf::int64 value) {
  set_has_minbetcount();
  minbetcount_ = value;
}

// optional .game_showhand_protocols.msg_player_info player_left = 3;
inline bool packetl2c_notice_start_game_message::has_player_left() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_start_game_message::set_has_player_left() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_start_game_message::clear_has_player_left() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_start_game_message::clear_player_left() {
  if (player_left_ != NULL) player_left_->::game_showhand_protocols::msg_player_info::Clear();
  clear_has_player_left();
}
inline const ::game_showhand_protocols::msg_player_info& packetl2c_notice_start_game_message::player_left() const {
  return player_left_ != NULL ? *player_left_ : *default_instance_->player_left_;
}
inline ::game_showhand_protocols::msg_player_info* packetl2c_notice_start_game_message::mutable_player_left() {
  set_has_player_left();
  if (player_left_ == NULL) player_left_ = new ::game_showhand_protocols::msg_player_info;
  return player_left_;
}
inline ::game_showhand_protocols::msg_player_info* packetl2c_notice_start_game_message::release_player_left() {
  clear_has_player_left();
  ::game_showhand_protocols::msg_player_info* temp = player_left_;
  player_left_ = NULL;
  return temp;
}
inline void packetl2c_notice_start_game_message::set_allocated_player_left(::game_showhand_protocols::msg_player_info* player_left) {
  delete player_left_;
  player_left_ = player_left;
  if (player_left) {
    set_has_player_left();
  } else {
    clear_has_player_left();
  }
}

// optional .game_showhand_protocols.msg_player_info player_right = 4;
inline bool packetl2c_notice_start_game_message::has_player_right() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_notice_start_game_message::set_has_player_right() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_notice_start_game_message::clear_has_player_right() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_notice_start_game_message::clear_player_right() {
  if (player_right_ != NULL) player_right_->::game_showhand_protocols::msg_player_info::Clear();
  clear_has_player_right();
}
inline const ::game_showhand_protocols::msg_player_info& packetl2c_notice_start_game_message::player_right() const {
  return player_right_ != NULL ? *player_right_ : *default_instance_->player_right_;
}
inline ::game_showhand_protocols::msg_player_info* packetl2c_notice_start_game_message::mutable_player_right() {
  set_has_player_right();
  if (player_right_ == NULL) player_right_ = new ::game_showhand_protocols::msg_player_info;
  return player_right_;
}
inline ::game_showhand_protocols::msg_player_info* packetl2c_notice_start_game_message::release_player_right() {
  clear_has_player_right();
  ::game_showhand_protocols::msg_player_info* temp = player_right_;
  player_right_ = NULL;
  return temp;
}
inline void packetl2c_notice_start_game_message::set_allocated_player_right(::game_showhand_protocols::msg_player_info* player_right) {
  delete player_right_;
  player_right_ = player_right;
  if (player_right) {
    set_has_player_right();
  } else {
    clear_has_player_right();
  }
}

// repeated .game_showhand_protocols.p_bet_state bet_state = 5;
inline int packetl2c_notice_start_game_message::bet_state_size() const {
  return bet_state_.size();
}
inline void packetl2c_notice_start_game_message::clear_bet_state() {
  bet_state_.Clear();
}
inline const ::game_showhand_protocols::p_bet_state& packetl2c_notice_start_game_message::bet_state(int index) const {
  return bet_state_.Get(index);
}
inline ::game_showhand_protocols::p_bet_state* packetl2c_notice_start_game_message::mutable_bet_state(int index) {
  return bet_state_.Mutable(index);
}
inline ::game_showhand_protocols::p_bet_state* packetl2c_notice_start_game_message::add_bet_state() {
  return bet_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >&
packetl2c_notice_start_game_message::bet_state() const {
  return bet_state_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >*
packetl2c_notice_start_game_message::mutable_bet_state() {
  return &bet_state_;
}

// -------------------------------------------------------------------

// packetl2c_notice_control_message

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_control_message];
inline bool packetl2c_notice_control_message::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_control_message::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_control_message::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_control_message::clear_packet_id() {
  packet_id_ = 15026;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_notice_control_message::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_control_message::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_showhand_protocols.msg_player_info player_info = 2;
inline bool packetl2c_notice_control_message::has_player_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_control_message::set_has_player_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_control_message::clear_has_player_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_control_message::clear_player_info() {
  if (player_info_ != NULL) player_info_->::game_showhand_protocols::msg_player_info::Clear();
  clear_has_player_info();
}
inline const ::game_showhand_protocols::msg_player_info& packetl2c_notice_control_message::player_info() const {
  return player_info_ != NULL ? *player_info_ : *default_instance_->player_info_;
}
inline ::game_showhand_protocols::msg_player_info* packetl2c_notice_control_message::mutable_player_info() {
  set_has_player_info();
  if (player_info_ == NULL) player_info_ = new ::game_showhand_protocols::msg_player_info;
  return player_info_;
}
inline ::game_showhand_protocols::msg_player_info* packetl2c_notice_control_message::release_player_info() {
  clear_has_player_info();
  ::game_showhand_protocols::msg_player_info* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
inline void packetl2c_notice_control_message::set_allocated_player_info(::game_showhand_protocols::msg_player_info* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    set_has_player_info();
  } else {
    clear_has_player_info();
  }
}

// -------------------------------------------------------------------

// packetl2c_notice_sendcard_message

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_sendcard_message];
inline bool packetl2c_notice_sendcard_message::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_sendcard_message::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_sendcard_message::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_sendcard_message::clear_packet_id() {
  packet_id_ = 15023;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_notice_sendcard_message::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_sendcard_message::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_left = 2;
inline bool packetl2c_notice_sendcard_message::has_player_left() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_sendcard_message::set_has_player_left() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_sendcard_message::clear_has_player_left() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_sendcard_message::clear_player_left() {
  player_left_ = 0;
  clear_has_player_left();
}
inline ::google::protobuf::int32 packetl2c_notice_sendcard_message::player_left() const {
  return player_left_;
}
inline void packetl2c_notice_sendcard_message::set_player_left(::google::protobuf::int32 value) {
  set_has_player_left();
  player_left_ = value;
}

// optional int32 player_right = 3;
inline bool packetl2c_notice_sendcard_message::has_player_right() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_sendcard_message::set_has_player_right() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_sendcard_message::clear_has_player_right() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_sendcard_message::clear_player_right() {
  player_right_ = 0;
  clear_has_player_right();
}
inline ::google::protobuf::int32 packetl2c_notice_sendcard_message::player_right() const {
  return player_right_;
}
inline void packetl2c_notice_sendcard_message::set_player_right(::google::protobuf::int32 value) {
  set_has_player_right();
  player_right_ = value;
}

// repeated .game_showhand_protocols.p_bet_state bet_state = 4;
inline int packetl2c_notice_sendcard_message::bet_state_size() const {
  return bet_state_.size();
}
inline void packetl2c_notice_sendcard_message::clear_bet_state() {
  bet_state_.Clear();
}
inline const ::game_showhand_protocols::p_bet_state& packetl2c_notice_sendcard_message::bet_state(int index) const {
  return bet_state_.Get(index);
}
inline ::game_showhand_protocols::p_bet_state* packetl2c_notice_sendcard_message::mutable_bet_state(int index) {
  return bet_state_.Mutable(index);
}
inline ::game_showhand_protocols::p_bet_state* packetl2c_notice_sendcard_message::add_bet_state() {
  return bet_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >&
packetl2c_notice_sendcard_message::bet_state() const {
  return bet_state_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >*
packetl2c_notice_sendcard_message::mutable_bet_state() {
  return &bet_state_;
}

// -------------------------------------------------------------------

// packetl2c_notice_bet

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_bet_message];
inline bool packetl2c_notice_bet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_bet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_bet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_bet::clear_packet_id() {
  packet_id_ = 15022;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_notice_bet::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_bet::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_showhand_protocols.p_bet_state bet_state = 2;
inline int packetl2c_notice_bet::bet_state_size() const {
  return bet_state_.size();
}
inline void packetl2c_notice_bet::clear_bet_state() {
  bet_state_.Clear();
}
inline const ::game_showhand_protocols::p_bet_state& packetl2c_notice_bet::bet_state(int index) const {
  return bet_state_.Get(index);
}
inline ::game_showhand_protocols::p_bet_state* packetl2c_notice_bet::mutable_bet_state(int index) {
  return bet_state_.Mutable(index);
}
inline ::game_showhand_protocols::p_bet_state* packetl2c_notice_bet::add_bet_state() {
  return bet_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >&
packetl2c_notice_bet::bet_state() const {
  return bet_state_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >*
packetl2c_notice_bet::mutable_bet_state() {
  return &bet_state_;
}

// -------------------------------------------------------------------

// packetl2c_notice_award_message

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_award_message];
inline bool packetl2c_notice_award_message::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_award_message::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_award_message::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_award_message::clear_packet_id() {
  packet_id_ = 15024;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_notice_award_message::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_award_message::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_showhand_protocols.msg_player_result player_left = 2;
inline bool packetl2c_notice_award_message::has_player_left() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_award_message::set_has_player_left() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_award_message::clear_has_player_left() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_award_message::clear_player_left() {
  if (player_left_ != NULL) player_left_->::game_showhand_protocols::msg_player_result::Clear();
  clear_has_player_left();
}
inline const ::game_showhand_protocols::msg_player_result& packetl2c_notice_award_message::player_left() const {
  return player_left_ != NULL ? *player_left_ : *default_instance_->player_left_;
}
inline ::game_showhand_protocols::msg_player_result* packetl2c_notice_award_message::mutable_player_left() {
  set_has_player_left();
  if (player_left_ == NULL) player_left_ = new ::game_showhand_protocols::msg_player_result;
  return player_left_;
}
inline ::game_showhand_protocols::msg_player_result* packetl2c_notice_award_message::release_player_left() {
  clear_has_player_left();
  ::game_showhand_protocols::msg_player_result* temp = player_left_;
  player_left_ = NULL;
  return temp;
}
inline void packetl2c_notice_award_message::set_allocated_player_left(::game_showhand_protocols::msg_player_result* player_left) {
  delete player_left_;
  player_left_ = player_left;
  if (player_left) {
    set_has_player_left();
  } else {
    clear_has_player_left();
  }
}

// optional .game_showhand_protocols.msg_player_result player_right = 3;
inline bool packetl2c_notice_award_message::has_player_right() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_award_message::set_has_player_right() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_award_message::clear_has_player_right() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_award_message::clear_player_right() {
  if (player_right_ != NULL) player_right_->::game_showhand_protocols::msg_player_result::Clear();
  clear_has_player_right();
}
inline const ::game_showhand_protocols::msg_player_result& packetl2c_notice_award_message::player_right() const {
  return player_right_ != NULL ? *player_right_ : *default_instance_->player_right_;
}
inline ::game_showhand_protocols::msg_player_result* packetl2c_notice_award_message::mutable_player_right() {
  set_has_player_right();
  if (player_right_ == NULL) player_right_ = new ::game_showhand_protocols::msg_player_result;
  return player_right_;
}
inline ::game_showhand_protocols::msg_player_result* packetl2c_notice_award_message::release_player_right() {
  clear_has_player_right();
  ::game_showhand_protocols::msg_player_result* temp = player_right_;
  player_right_ = NULL;
  return temp;
}
inline void packetl2c_notice_award_message::set_allocated_player_right(::game_showhand_protocols::msg_player_result* player_right) {
  delete player_right_;
  player_right_ = player_right;
  if (player_right) {
    set_has_player_right();
  } else {
    clear_has_player_right();
  }
}

// -------------------------------------------------------------------

// packetl2c_notice_check_message

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_check_message];
inline bool packetl2c_notice_check_message::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_check_message::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_check_message::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_check_message::clear_packet_id() {
  packet_id_ = 15025;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_notice_check_message::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_check_message::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_notice_join_table

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_join_table_message];
inline bool packetl2c_notice_join_table::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_join_table::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_join_table::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_join_table::clear_packet_id() {
  packet_id_ = 15030;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_notice_join_table::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_join_table::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 table_id = 2;
inline bool packetl2c_notice_join_table::has_table_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_join_table::set_has_table_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_join_table::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_join_table::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
inline ::google::protobuf::int32 packetl2c_notice_join_table::table_id() const {
  return table_id_;
}
inline void packetl2c_notice_join_table::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
}

// optional .game_showhand_protocols.msg_player_info player_info = 3;
inline bool packetl2c_notice_join_table::has_player_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_join_table::set_has_player_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_join_table::clear_has_player_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_join_table::clear_player_info() {
  if (player_info_ != NULL) player_info_->::game_showhand_protocols::msg_player_info::Clear();
  clear_has_player_info();
}
inline const ::game_showhand_protocols::msg_player_info& packetl2c_notice_join_table::player_info() const {
  return player_info_ != NULL ? *player_info_ : *default_instance_->player_info_;
}
inline ::game_showhand_protocols::msg_player_info* packetl2c_notice_join_table::mutable_player_info() {
  set_has_player_info();
  if (player_info_ == NULL) player_info_ = new ::game_showhand_protocols::msg_player_info;
  return player_info_;
}
inline ::game_showhand_protocols::msg_player_info* packetl2c_notice_join_table::release_player_info() {
  clear_has_player_info();
  ::game_showhand_protocols::msg_player_info* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
inline void packetl2c_notice_join_table::set_allocated_player_info(::game_showhand_protocols::msg_player_info* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    set_has_player_info();
  } else {
    clear_has_player_info();
  }
}

// -------------------------------------------------------------------

// packetl2c_notice_leave_table

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_leave_table_message];
inline bool packetl2c_notice_leave_table::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_leave_table::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_leave_table::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_leave_table::clear_packet_id() {
  packet_id_ = 15031;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_notice_leave_table::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_leave_table::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 table_id = 2;
inline bool packetl2c_notice_leave_table::has_table_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_leave_table::set_has_table_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_leave_table::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_leave_table::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
inline ::google::protobuf::int32 packetl2c_notice_leave_table::table_id() const {
  return table_id_;
}
inline void packetl2c_notice_leave_table::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
}

// optional int32 player_id = 3;
inline bool packetl2c_notice_leave_table::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_leave_table::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_leave_table::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_leave_table::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_notice_leave_table::player_id() const {
  return player_id_;
}
inline void packetl2c_notice_leave_table::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_notice_update_table

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_update_table_message];
inline bool packetl2c_notice_update_table::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_update_table::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_update_table::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_update_table::clear_packet_id() {
  packet_id_ = 15036;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_notice_update_table::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_update_table::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 table_id = 2;
inline bool packetl2c_notice_update_table::has_table_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_update_table::set_has_table_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_update_table::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_update_table::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
inline ::google::protobuf::int32 packetl2c_notice_update_table::table_id() const {
  return table_id_;
}
inline void packetl2c_notice_update_table::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
}

// optional .game_showhand_protocols.msg_player_info player_left = 3;
inline bool packetl2c_notice_update_table::has_player_left() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_update_table::set_has_player_left() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_update_table::clear_has_player_left() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_update_table::clear_player_left() {
  if (player_left_ != NULL) player_left_->::game_showhand_protocols::msg_player_info::Clear();
  clear_has_player_left();
}
inline const ::game_showhand_protocols::msg_player_info& packetl2c_notice_update_table::player_left() const {
  return player_left_ != NULL ? *player_left_ : *default_instance_->player_left_;
}
inline ::game_showhand_protocols::msg_player_info* packetl2c_notice_update_table::mutable_player_left() {
  set_has_player_left();
  if (player_left_ == NULL) player_left_ = new ::game_showhand_protocols::msg_player_info;
  return player_left_;
}
inline ::game_showhand_protocols::msg_player_info* packetl2c_notice_update_table::release_player_left() {
  clear_has_player_left();
  ::game_showhand_protocols::msg_player_info* temp = player_left_;
  player_left_ = NULL;
  return temp;
}
inline void packetl2c_notice_update_table::set_allocated_player_left(::game_showhand_protocols::msg_player_info* player_left) {
  delete player_left_;
  player_left_ = player_left;
  if (player_left) {
    set_has_player_left();
  } else {
    clear_has_player_left();
  }
}

// optional .game_showhand_protocols.msg_player_info player_right = 4;
inline bool packetl2c_notice_update_table::has_player_right() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_notice_update_table::set_has_player_right() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_notice_update_table::clear_has_player_right() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_notice_update_table::clear_player_right() {
  if (player_right_ != NULL) player_right_->::game_showhand_protocols::msg_player_info::Clear();
  clear_has_player_right();
}
inline const ::game_showhand_protocols::msg_player_info& packetl2c_notice_update_table::player_right() const {
  return player_right_ != NULL ? *player_right_ : *default_instance_->player_right_;
}
inline ::game_showhand_protocols::msg_player_info* packetl2c_notice_update_table::mutable_player_right() {
  set_has_player_right();
  if (player_right_ == NULL) player_right_ = new ::game_showhand_protocols::msg_player_info;
  return player_right_;
}
inline ::game_showhand_protocols::msg_player_info* packetl2c_notice_update_table::release_player_right() {
  clear_has_player_right();
  ::game_showhand_protocols::msg_player_info* temp = player_right_;
  player_right_ = NULL;
  return temp;
}
inline void packetl2c_notice_update_table::set_allocated_player_right(::game_showhand_protocols::msg_player_info* player_right) {
  delete player_right_;
  player_right_ = player_right;
  if (player_right) {
    set_has_player_right();
  } else {
    clear_has_player_right();
  }
}

// -------------------------------------------------------------------

// packetl2c_notice_table_player_state

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_table_player_message];
inline bool packetl2c_notice_table_player_state::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_table_player_state::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_table_player_state::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_table_player_state::clear_packet_id() {
  packet_id_ = 15032;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_notice_table_player_state::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_table_player_state::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional uint32 table_id = 2;
inline bool packetl2c_notice_table_player_state::has_table_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_table_player_state::set_has_table_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_table_player_state::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_table_player_state::clear_table_id() {
  table_id_ = 0u;
  clear_has_table_id();
}
inline ::google::protobuf::uint32 packetl2c_notice_table_player_state::table_id() const {
  return table_id_;
}
inline void packetl2c_notice_table_player_state::set_table_id(::google::protobuf::uint32 value) {
  set_has_table_id();
  table_id_ = value;
}

// optional uint32 left_state = 3;
inline bool packetl2c_notice_table_player_state::has_left_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_table_player_state::set_has_left_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_table_player_state::clear_has_left_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_table_player_state::clear_left_state() {
  left_state_ = 0u;
  clear_has_left_state();
}
inline ::google::protobuf::uint32 packetl2c_notice_table_player_state::left_state() const {
  return left_state_;
}
inline void packetl2c_notice_table_player_state::set_left_state(::google::protobuf::uint32 value) {
  set_has_left_state();
  left_state_ = value;
}

// optional uint32 right_state = 4;
inline bool packetl2c_notice_table_player_state::has_right_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_notice_table_player_state::set_has_right_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_notice_table_player_state::clear_has_right_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_notice_table_player_state::clear_right_state() {
  right_state_ = 0u;
  clear_has_right_state();
}
inline ::google::protobuf::uint32 packetl2c_notice_table_player_state::right_state() const {
  return right_state_;
}
inline void packetl2c_notice_table_player_state::set_right_state(::google::protobuf::uint32 value) {
  set_has_right_state();
  right_state_ = value;
}

// -------------------------------------------------------------------

// packetc2l_check_state

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
inline bool packetc2l_check_state::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_check_state::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_check_state::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_check_state::clear_packet_id() {
  packet_id_ = 10011;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_check_state::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_check_state::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_check_state_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
inline bool packetl2c_check_state_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_check_state_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_check_state_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_check_state_result::clear_packet_id() {
  packet_id_ = 15011;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_check_state_result::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_check_state_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional uint32 state = 2;
inline bool packetl2c_check_state_result::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_check_state_result::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_check_state_result::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_check_state_result::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 packetl2c_check_state_result::state() const {
  return state_;
}
inline void packetl2c_check_state_result::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// packetc2l_control_info

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_control_win_info];
inline bool packetc2l_control_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_control_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_control_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_control_info::clear_packet_id() {
  packet_id_ = 10012;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_control_info::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_control_info::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 win = 2;
inline bool packetc2l_control_info::has_win() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_control_info::set_has_win() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_control_info::clear_has_win() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_control_info::clear_win() {
  win_ = 0;
  clear_has_win();
}
inline ::google::protobuf::int32 packetc2l_control_info::win() const {
  return win_;
}
inline void packetc2l_control_info::set_win(::google::protobuf::int32 value) {
  set_has_win();
  win_ = value;
}

// -------------------------------------------------------------------

// packetl2c_control_change_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_control_change_result];
inline bool packetl2c_control_change_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_control_change_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_control_change_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_control_change_result::clear_packet_id() {
  packet_id_ = 15033;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_control_change_result::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_control_change_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
inline bool packetl2c_control_change_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_control_change_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_control_change_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_control_change_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_control_change_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_control_change_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetl2c_notice_gm_luck_info

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_luck_info];
inline bool packetl2c_notice_gm_luck_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_gm_luck_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_gm_luck_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_gm_luck_info::clear_packet_id() {
  packet_id_ = 17002;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_notice_gm_luck_info::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_gm_luck_info::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int64 Total_Luck = 2;
inline bool packetl2c_notice_gm_luck_info::has_total_luck() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_gm_luck_info::set_has_total_luck() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_gm_luck_info::clear_has_total_luck() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_gm_luck_info::clear_total_luck() {
  total_luck_ = GOOGLE_LONGLONG(0);
  clear_has_total_luck();
}
inline ::google::protobuf::int64 packetl2c_notice_gm_luck_info::total_luck() const {
  return total_luck_;
}
inline void packetl2c_notice_gm_luck_info::set_total_luck(::google::protobuf::int64 value) {
  set_has_total_luck();
  total_luck_ = value;
}

// optional int64 add_luck = 3;
inline bool packetl2c_notice_gm_luck_info::has_add_luck() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_gm_luck_info::set_has_add_luck() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_gm_luck_info::clear_has_add_luck() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_gm_luck_info::clear_add_luck() {
  add_luck_ = GOOGLE_LONGLONG(0);
  clear_has_add_luck();
}
inline ::google::protobuf::int64 packetl2c_notice_gm_luck_info::add_luck() const {
  return add_luck_;
}
inline void packetl2c_notice_gm_luck_info::set_add_luck(::google::protobuf::int64 value) {
  set_has_add_luck();
  add_luck_ = value;
}

// -------------------------------------------------------------------

// packetl2c_offline_time

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_offline_time];
inline bool packetl2c_offline_time::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_offline_time::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_offline_time::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_offline_time::clear_packet_id() {
  packet_id_ = 15034;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_offline_time::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_offline_time::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_offline_time::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_offline_time::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_offline_time::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_offline_time::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_offline_time::player_id() const {
  return player_id_;
}
inline void packetl2c_offline_time::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 offline_state = 3;
inline bool packetl2c_offline_time::has_offline_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_offline_time::set_has_offline_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_offline_time::clear_has_offline_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_offline_time::clear_offline_state() {
  offline_state_ = 0;
  clear_has_offline_state();
}
inline ::google::protobuf::int32 packetl2c_offline_time::offline_state() const {
  return offline_state_;
}
inline void packetl2c_offline_time::set_offline_state(::google::protobuf::int32 value) {
  set_has_offline_state();
  offline_state_ = value;
}

// optional int32 bet_time = 4;
inline bool packetl2c_offline_time::has_bet_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_offline_time::set_has_bet_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_offline_time::clear_has_bet_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_offline_time::clear_bet_time() {
  bet_time_ = 0;
  clear_has_bet_time();
}
inline ::google::protobuf::int32 packetl2c_offline_time::bet_time() const {
  return bet_time_;
}
inline void packetl2c_offline_time::set_bet_time(::google::protobuf::int32 value) {
  set_has_bet_time();
  bet_time_ = value;
}

// optional int32 bet_player_id = 5;
inline bool packetl2c_offline_time::has_bet_player_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_offline_time::set_has_bet_player_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_offline_time::clear_has_bet_player_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_offline_time::clear_bet_player_id() {
  bet_player_id_ = 0;
  clear_has_bet_player_id();
}
inline ::google::protobuf::int32 packetl2c_offline_time::bet_player_id() const {
  return bet_player_id_;
}
inline void packetl2c_offline_time::set_bet_player_id(::google::protobuf::int32 value) {
  set_has_bet_player_id();
  bet_player_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_notice_out_time

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_out_time];
inline bool packetl2c_notice_out_time::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_out_time::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_out_time::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_out_time::clear_packet_id() {
  packet_id_ = 15035;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_notice_out_time::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_out_time::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 out_state = 2;
inline bool packetl2c_notice_out_time::has_out_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_out_time::set_has_out_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_out_time::clear_has_out_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_out_time::clear_out_state() {
  out_state_ = 0;
  clear_has_out_state();
}
inline ::google::protobuf::int32 packetl2c_notice_out_time::out_state() const {
  return out_state_;
}
inline void packetl2c_notice_out_time::set_out_state(::google::protobuf::int32 value) {
  set_has_out_state();
  out_state_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_debuginfo

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
inline bool packetl2c_bc_debuginfo::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_debuginfo::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_debuginfo::clear_packet_id() {
  packet_id_ = 17001;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_bc_debuginfo::packet_id() const {
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_debuginfo::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_bc_debuginfo::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_debuginfo::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_debuginfo::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_debuginfo::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_debuginfo::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int64 total_profit = 3 [default = 0];
inline bool packetl2c_bc_debuginfo::has_total_profit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_total_profit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_debuginfo::clear_has_total_profit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_debuginfo::clear_total_profit() {
  total_profit_ = GOOGLE_LONGLONG(0);
  clear_has_total_profit();
}
inline ::google::protobuf::int64 packetl2c_bc_debuginfo::total_profit() const {
  return total_profit_;
}
inline void packetl2c_bc_debuginfo::set_total_profit(::google::protobuf::int64 value) {
  set_has_total_profit();
  total_profit_ = value;
}

// optional int64 total_stock = 4 [default = 0];
inline bool packetl2c_bc_debuginfo::has_total_stock() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_total_stock() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_bc_debuginfo::clear_has_total_stock() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_bc_debuginfo::clear_total_stock() {
  total_stock_ = GOOGLE_LONGLONG(0);
  clear_has_total_stock();
}
inline ::google::protobuf::int64 packetl2c_bc_debuginfo::total_stock() const {
  return total_stock_;
}
inline void packetl2c_bc_debuginfo::set_total_stock(::google::protobuf::int64 value) {
  set_has_total_stock();
  total_stock_ = value;
}

// optional int64 total_Rate = 6 [default = 0];
inline bool packetl2c_bc_debuginfo::has_total_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_total_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_bc_debuginfo::clear_has_total_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_bc_debuginfo::clear_total_rate() {
  total_rate_ = GOOGLE_LONGLONG(0);
  clear_has_total_rate();
}
inline ::google::protobuf::int64 packetl2c_bc_debuginfo::total_rate() const {
  return total_rate_;
}
inline void packetl2c_bc_debuginfo::set_total_rate(::google::protobuf::int64 value) {
  set_has_total_rate();
  total_rate_ = value;
}

// optional string debug_infos = 5;
inline bool packetl2c_bc_debuginfo::has_debug_infos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_debug_infos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_bc_debuginfo::clear_has_debug_infos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_bc_debuginfo::clear_debug_infos() {
  if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
    debug_infos_->clear();
  }
  clear_has_debug_infos();
}
inline const ::std::string& packetl2c_bc_debuginfo::debug_infos() const {
  return *debug_infos_;
}
inline void packetl2c_bc_debuginfo::set_debug_infos(const ::std::string& value) {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  debug_infos_->assign(value);
}
inline void packetl2c_bc_debuginfo::set_debug_infos(const char* value) {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  debug_infos_->assign(value);
}
inline void packetl2c_bc_debuginfo::set_debug_infos(const char* value, size_t size) {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  debug_infos_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetl2c_bc_debuginfo::mutable_debug_infos() {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  return debug_infos_;
}
inline ::std::string* packetl2c_bc_debuginfo::release_debug_infos() {
  clear_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = debug_infos_;
    debug_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetl2c_bc_debuginfo::set_allocated_debug_infos(::std::string* debug_infos) {
  if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_infos_;
  }
  if (debug_infos) {
    set_has_debug_infos();
    debug_infos_ = debug_infos;
  } else {
    clear_has_debug_infos();
    debug_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_showhand_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fshowhand_5fprotocol_2eproto__INCLUDED
