// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_srmj_protocol.proto

#ifndef PROTOBUF_game_5fsrmj_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_game_5fsrmj_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "game_srmj_def.pb.h"
#include "msg_type_def.pb.h"
// @@protoc_insertion_point(includes)

namespace game_srmj_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

class msg_player_info;
class packetc2l_check_state;
class packetl2c_check_state_result;
class packetc2l_get_scene_info;
class msg_room_scene_info;
class msg_playing_scene_info;
class packetl2c_scene_info_result;
class packetc2l_enter_room;
class packetl2c_enter_room_result;
class packetc2l_leave_room;
class packetl2c_leave_room_result;
class packetc2l_user_trustee;
class packetl2c_user_trustee_notify;
class packetc2l_ready;
class packetl2c_send_all_playerinfos;
class pile_card_data;
class pile_cards_data;
class card_data;
class cards_data;
class packetl2c_game_start;
class packetc2l_out_card;
class packetl2c_out_card_notify;
class packetl2c_operate_notify;
class packetc2l_operate_card;
class packetl2c_operate_result;
class packetl2c_add_win_list;
class packetl2c_send_card;
class lose_result;
class win_result;
class packetl2c_game_end;
class packetl2c_game_notify;
class gm_player_info;
class packetc2l_gm_list;
class gm_room_info;
class packetl2c_gm_list;
class packetc2l_gm_kill;
class packetc2l_exchange_card;
class exchange_card_data;
class packetl2c_exchange_card;
class packetc2l_decide_vacancy;
class packetl2c_decide_vacancy;

// ===================================================================

class msg_player_info : public ::google::protobuf::Message {
 public:
  msg_player_info();
  virtual ~msg_player_info();

  msg_player_info(const msg_player_info& from);

  inline msg_player_info& operator=(const msg_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_player_info& default_instance();

  void Swap(msg_player_info* other);

  // implements Message ----------------------------------------------

  msg_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_player_info& from);
  void MergeFrom(const msg_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional int32 head_frame = 3;
  inline bool has_head_frame() const;
  inline void clear_head_frame();
  static const int kHeadFrameFieldNumber = 3;
  inline ::google::protobuf::int32 head_frame() const;
  inline void set_head_frame(::google::protobuf::int32 value);

  // optional string head_custom = 4;
  inline bool has_head_custom() const;
  inline void clear_head_custom();
  static const int kHeadCustomFieldNumber = 4;
  inline const ::std::string& head_custom() const;
  inline void set_head_custom(const ::std::string& value);
  inline void set_head_custom(const char* value);
  inline void set_head_custom(const char* value, size_t size);
  inline ::std::string* mutable_head_custom();
  inline ::std::string* release_head_custom();
  inline void set_allocated_head_custom(::std::string* head_custom);

  // optional int64 player_gold = 5;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 5;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // optional int32 player_sex = 6;
  inline bool has_player_sex() const;
  inline void clear_player_sex();
  static const int kPlayerSexFieldNumber = 6;
  inline ::google::protobuf::int32 player_sex() const;
  inline void set_player_sex(::google::protobuf::int32 value);

  // optional int32 vip_level = 7;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 7;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.msg_player_info)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_head_frame();
  inline void clear_has_head_frame();
  inline void set_has_head_custom();
  inline void clear_has_head_custom();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();
  inline void set_has_player_sex();
  inline void clear_has_player_sex();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_name_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 head_frame_;
  ::std::string* head_custom_;
  ::google::protobuf::int64 player_gold_;
  ::google::protobuf::int32 player_sex_;
  ::google::protobuf::int32 vip_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_player_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_check_state : public ::google::protobuf::Message {
 public:
  packetc2l_check_state();
  virtual ~packetc2l_check_state();

  packetc2l_check_state(const packetc2l_check_state& from);

  inline packetc2l_check_state& operator=(const packetc2l_check_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_check_state& default_instance();

  void Swap(packetc2l_check_state* other);

  // implements Message ----------------------------------------------

  packetc2l_check_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_check_state& from);
  void MergeFrom(const packetc2l_check_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetc2l_check_state)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_check_state* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_check_state_result : public ::google::protobuf::Message {
 public:
  packetl2c_check_state_result();
  virtual ~packetl2c_check_state_result();

  packetl2c_check_state_result(const packetl2c_check_state_result& from);

  inline packetl2c_check_state_result& operator=(const packetl2c_check_state_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_check_state_result& default_instance();

  void Swap(packetl2c_check_state_result* other);

  // implements Message ----------------------------------------------

  packetl2c_check_state_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_check_state_result& from);
  void MergeFrom(const packetl2c_check_state_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // optional int32 result = 2 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetl2c_check_state_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_check_state_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_scene_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_scene_info();
  virtual ~packetc2l_get_scene_info();

  packetc2l_get_scene_info(const packetc2l_get_scene_info& from);

  inline packetc2l_get_scene_info& operator=(const packetc2l_get_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_scene_info& default_instance();

  void Swap(packetc2l_get_scene_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_scene_info& from);
  void MergeFrom(const packetc2l_get_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetc2l_get_scene_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_room_scene_info : public ::google::protobuf::Message {
 public:
  msg_room_scene_info();
  virtual ~msg_room_scene_info();

  msg_room_scene_info(const msg_room_scene_info& from);

  inline msg_room_scene_info& operator=(const msg_room_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_room_scene_info& default_instance();

  void Swap(msg_room_scene_info* other);

  // implements Message ----------------------------------------------

  msg_room_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_room_scene_info& from);
  void MergeFrom(const msg_room_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool ready = 1;
  inline bool has_ready() const;
  inline void clear_ready();
  static const int kReadyFieldNumber = 1;
  inline bool ready() const;
  inline void set_ready(bool value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.msg_room_scene_info)
 private:
  inline void set_has_ready();
  inline void clear_has_ready();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool ready_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_room_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_playing_scene_info : public ::google::protobuf::Message {
 public:
  msg_playing_scene_info();
  virtual ~msg_playing_scene_info();

  msg_playing_scene_info(const msg_playing_scene_info& from);

  inline msg_playing_scene_info& operator=(const msg_playing_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_playing_scene_info& default_instance();

  void Swap(msg_playing_scene_info* other);

  // implements Message ----------------------------------------------

  msg_playing_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_playing_scene_info& from);
  void MergeFrom(const msg_playing_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 banker_chair_id = 1;
  inline bool has_banker_chair_id() const;
  inline void clear_banker_chair_id();
  static const int kBankerChairIdFieldNumber = 1;
  inline ::google::protobuf::int32 banker_chair_id() const;
  inline void set_banker_chair_id(::google::protobuf::int32 value);

  // optional int32 current_user = 2;
  inline bool has_current_user() const;
  inline void clear_current_user();
  static const int kCurrentUserFieldNumber = 2;
  inline ::google::protobuf::int32 current_user() const;
  inline void set_current_user(::google::protobuf::int32 value);

  // optional int32 out_card = 3;
  inline bool has_out_card() const;
  inline void clear_out_card();
  static const int kOutCardFieldNumber = 3;
  inline ::google::protobuf::int32 out_card() const;
  inline void set_out_card(::google::protobuf::int32 value);

  // optional int32 action_code = 4;
  inline bool has_action_code() const;
  inline void clear_action_code();
  static const int kActionCodeFieldNumber = 4;
  inline ::google::protobuf::int32 action_code() const;
  inline void set_action_code(::google::protobuf::int32 value);

  // optional int32 remain_seconds = 5;
  inline bool has_remain_seconds() const;
  inline void clear_remain_seconds();
  static const int kRemainSecondsFieldNumber = 5;
  inline ::google::protobuf::int32 remain_seconds() const;
  inline void set_remain_seconds(::google::protobuf::int32 value);

  // repeated bool user_trustee = 6;
  inline int user_trustee_size() const;
  inline void clear_user_trustee();
  static const int kUserTrusteeFieldNumber = 6;
  inline bool user_trustee(int index) const;
  inline void set_user_trustee(int index, bool value);
  inline void add_user_trustee(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      user_trustee() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_user_trustee();

  // repeated .game_srmj_protocols.cards_data hu_cards = 7;
  inline int hu_cards_size() const;
  inline void clear_hu_cards();
  static const int kHuCardsFieldNumber = 7;
  inline const ::game_srmj_protocols::cards_data& hu_cards(int index) const;
  inline ::game_srmj_protocols::cards_data* mutable_hu_cards(int index);
  inline ::game_srmj_protocols::cards_data* add_hu_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >&
      hu_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >*
      mutable_hu_cards();

  // repeated .game_srmj_protocols.cards_data hand_cards = 8;
  inline int hand_cards_size() const;
  inline void clear_hand_cards();
  static const int kHandCardsFieldNumber = 8;
  inline const ::game_srmj_protocols::cards_data& hand_cards(int index) const;
  inline ::game_srmj_protocols::cards_data* mutable_hand_cards(int index);
  inline ::game_srmj_protocols::cards_data* add_hand_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >&
      hand_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >*
      mutable_hand_cards();

  // repeated .game_srmj_protocols.cards_data river_cards = 9;
  inline int river_cards_size() const;
  inline void clear_river_cards();
  static const int kRiverCardsFieldNumber = 9;
  inline const ::game_srmj_protocols::cards_data& river_cards(int index) const;
  inline ::game_srmj_protocols::cards_data* mutable_river_cards(int index);
  inline ::game_srmj_protocols::cards_data* add_river_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >&
      river_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >*
      mutable_river_cards();

  // repeated .game_srmj_protocols.pile_cards_data pile_cards = 10;
  inline int pile_cards_size() const;
  inline void clear_pile_cards();
  static const int kPileCardsFieldNumber = 10;
  inline const ::game_srmj_protocols::pile_cards_data& pile_cards(int index) const;
  inline ::game_srmj_protocols::pile_cards_data* mutable_pile_cards(int index);
  inline ::game_srmj_protocols::pile_cards_data* add_pile_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::pile_cards_data >&
      pile_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::pile_cards_data >*
      mutable_pile_cards();

  // repeated int32 pass_times = 11;
  inline int pass_times_size() const;
  inline void clear_pass_times();
  static const int kPassTimesFieldNumber = 11;
  inline ::google::protobuf::int32 pass_times(int index) const;
  inline void set_pass_times(int index, ::google::protobuf::int32 value);
  inline void add_pass_times(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pass_times() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pass_times();

  // repeated bool exchanged = 12;
  inline int exchanged_size() const;
  inline void clear_exchanged();
  static const int kExchangedFieldNumber = 12;
  inline bool exchanged(int index) const;
  inline void set_exchanged(int index, bool value);
  inline void add_exchanged(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      exchanged() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_exchanged();

  // repeated int32 vacancy = 13;
  inline int vacancy_size() const;
  inline void clear_vacancy();
  static const int kVacancyFieldNumber = 13;
  inline ::google::protobuf::int32 vacancy(int index) const;
  inline void set_vacancy(int index, ::google::protobuf::int32 value);
  inline void add_vacancy(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      vacancy() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_vacancy();

  // optional int32 dice_count = 14;
  inline bool has_dice_count() const;
  inline void clear_dice_count();
  static const int kDiceCountFieldNumber = 14;
  inline ::google::protobuf::int32 dice_count() const;
  inline void set_dice_count(::google::protobuf::int32 value);

  // repeated .game_srmj_protocols.win_result hu_list = 15;
  inline int hu_list_size() const;
  inline void clear_hu_list();
  static const int kHuListFieldNumber = 15;
  inline const ::game_srmj_protocols::win_result& hu_list(int index) const;
  inline ::game_srmj_protocols::win_result* mutable_hu_list(int index);
  inline ::game_srmj_protocols::win_result* add_hu_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::win_result >&
      hu_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::win_result >*
      mutable_hu_list();

  // optional int32 used_card_cnt = 16;
  inline bool has_used_card_cnt() const;
  inline void clear_used_card_cnt();
  static const int kUsedCardCntFieldNumber = 16;
  inline ::google::protobuf::int32 used_card_cnt() const;
  inline void set_used_card_cnt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.msg_playing_scene_info)
 private:
  inline void set_has_banker_chair_id();
  inline void clear_has_banker_chair_id();
  inline void set_has_current_user();
  inline void clear_has_current_user();
  inline void set_has_out_card();
  inline void clear_has_out_card();
  inline void set_has_action_code();
  inline void clear_has_action_code();
  inline void set_has_remain_seconds();
  inline void clear_has_remain_seconds();
  inline void set_has_dice_count();
  inline void clear_has_dice_count();
  inline void set_has_used_card_cnt();
  inline void clear_has_used_card_cnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 banker_chair_id_;
  ::google::protobuf::int32 current_user_;
  ::google::protobuf::int32 out_card_;
  ::google::protobuf::int32 action_code_;
  ::google::protobuf::RepeatedField< bool > user_trustee_;
  ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data > hu_cards_;
  ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data > hand_cards_;
  ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data > river_cards_;
  ::google::protobuf::int32 remain_seconds_;
  ::google::protobuf::int32 dice_count_;
  ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::pile_cards_data > pile_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pass_times_;
  ::google::protobuf::RepeatedField< bool > exchanged_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > vacancy_;
  ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::win_result > hu_list_;
  ::google::protobuf::int32 used_card_cnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_playing_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_scene_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_scene_info_result();
  virtual ~packetl2c_scene_info_result();

  packetl2c_scene_info_result(const packetl2c_scene_info_result& from);

  inline packetl2c_scene_info_result& operator=(const packetl2c_scene_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_scene_info_result& default_instance();

  void Swap(packetl2c_scene_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_scene_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_scene_info_result& from);
  void MergeFrom(const packetl2c_scene_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // optional int32 room_type = 2;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 2;
  inline ::google::protobuf::int32 room_type() const;
  inline void set_room_type(::google::protobuf::int32 value);

  // optional .game_srmj_protocols.msg_room_scene_info scene_info1 = 3;
  inline bool has_scene_info1() const;
  inline void clear_scene_info1();
  static const int kSceneInfo1FieldNumber = 3;
  inline const ::game_srmj_protocols::msg_room_scene_info& scene_info1() const;
  inline ::game_srmj_protocols::msg_room_scene_info* mutable_scene_info1();
  inline ::game_srmj_protocols::msg_room_scene_info* release_scene_info1();
  inline void set_allocated_scene_info1(::game_srmj_protocols::msg_room_scene_info* scene_info1);

  // optional .game_srmj_protocols.msg_playing_scene_info scene_info3 = 4;
  inline bool has_scene_info3() const;
  inline void clear_scene_info3();
  static const int kSceneInfo3FieldNumber = 4;
  inline const ::game_srmj_protocols::msg_playing_scene_info& scene_info3() const;
  inline ::game_srmj_protocols::msg_playing_scene_info* mutable_scene_info3();
  inline ::game_srmj_protocols::msg_playing_scene_info* release_scene_info3();
  inline void set_allocated_scene_info3(::game_srmj_protocols::msg_playing_scene_info* scene_info3);

  // optional int32 info_type = 5;
  inline bool has_info_type() const;
  inline void clear_info_type();
  static const int kInfoTypeFieldNumber = 5;
  inline ::google::protobuf::int32 info_type() const;
  inline void set_info_type(::google::protobuf::int32 value);

  // optional .game_srmj_protocols.packetl2c_game_end scene_info4 = 6;
  inline bool has_scene_info4() const;
  inline void clear_scene_info4();
  static const int kSceneInfo4FieldNumber = 6;
  inline const ::game_srmj_protocols::packetl2c_game_end& scene_info4() const;
  inline ::game_srmj_protocols::packetl2c_game_end* mutable_scene_info4();
  inline ::game_srmj_protocols::packetl2c_game_end* release_scene_info4();
  inline void set_allocated_scene_info4(::game_srmj_protocols::packetl2c_game_end* scene_info4);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetl2c_scene_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_type();
  inline void clear_has_room_type();
  inline void set_has_scene_info1();
  inline void clear_has_scene_info1();
  inline void set_has_scene_info3();
  inline void clear_has_scene_info3();
  inline void set_has_info_type();
  inline void clear_has_info_type();
  inline void set_has_scene_info4();
  inline void clear_has_scene_info4();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 room_type_;
  ::game_srmj_protocols::msg_room_scene_info* scene_info1_;
  ::game_srmj_protocols::msg_playing_scene_info* scene_info3_;
  ::game_srmj_protocols::packetl2c_game_end* scene_info4_;
  ::google::protobuf::int32 info_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_scene_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_enter_room : public ::google::protobuf::Message {
 public:
  packetc2l_enter_room();
  virtual ~packetc2l_enter_room();

  packetc2l_enter_room(const packetc2l_enter_room& from);

  inline packetc2l_enter_room& operator=(const packetc2l_enter_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_enter_room& default_instance();

  void Swap(packetc2l_enter_room* other);

  // implements Message ----------------------------------------------

  packetc2l_enter_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_enter_room& from);
  void MergeFrom(const packetc2l_enter_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // optional int32 room_type = 2;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 2;
  inline ::google::protobuf::int32 room_type() const;
  inline void set_room_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetc2l_enter_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_type();
  inline void clear_has_room_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 room_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_enter_room* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_enter_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_enter_room_result();
  virtual ~packetl2c_enter_room_result();

  packetl2c_enter_room_result(const packetl2c_enter_room_result& from);

  inline packetl2c_enter_room_result& operator=(const packetl2c_enter_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_enter_room_result& default_instance();

  void Swap(packetl2c_enter_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_enter_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_enter_room_result& from);
  void MergeFrom(const packetl2c_enter_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetl2c_enter_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_enter_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_leave_room : public ::google::protobuf::Message {
 public:
  packetc2l_leave_room();
  virtual ~packetc2l_leave_room();

  packetc2l_leave_room(const packetc2l_leave_room& from);

  inline packetc2l_leave_room& operator=(const packetc2l_leave_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_leave_room& default_instance();

  void Swap(packetc2l_leave_room* other);

  // implements Message ----------------------------------------------

  packetc2l_leave_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_leave_room& from);
  void MergeFrom(const packetc2l_leave_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetc2l_leave_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_leave_room* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_leave_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_leave_room_result();
  virtual ~packetl2c_leave_room_result();

  packetl2c_leave_room_result(const packetl2c_leave_room_result& from);

  inline packetl2c_leave_room_result& operator=(const packetl2c_leave_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_leave_room_result& default_instance();

  void Swap(packetl2c_leave_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_leave_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_leave_room_result& from);
  void MergeFrom(const packetl2c_leave_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // optional int64 player_gold = 2;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 2;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetl2c_leave_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 player_gold_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_leave_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_user_trustee : public ::google::protobuf::Message {
 public:
  packetc2l_user_trustee();
  virtual ~packetc2l_user_trustee();

  packetc2l_user_trustee(const packetc2l_user_trustee& from);

  inline packetc2l_user_trustee& operator=(const packetc2l_user_trustee& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_user_trustee& default_instance();

  void Swap(packetc2l_user_trustee* other);

  // implements Message ----------------------------------------------

  packetc2l_user_trustee* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_user_trustee& from);
  void MergeFrom(const packetc2l_user_trustee& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_user_trustee];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // optional bool trustee = 2;
  inline bool has_trustee() const;
  inline void clear_trustee();
  static const int kTrusteeFieldNumber = 2;
  inline bool trustee() const;
  inline void set_trustee(bool value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetc2l_user_trustee)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_trustee();
  inline void clear_has_trustee();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  bool trustee_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_user_trustee* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_user_trustee_notify : public ::google::protobuf::Message {
 public:
  packetl2c_user_trustee_notify();
  virtual ~packetl2c_user_trustee_notify();

  packetl2c_user_trustee_notify(const packetl2c_user_trustee_notify& from);

  inline packetl2c_user_trustee_notify& operator=(const packetl2c_user_trustee_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_user_trustee_notify& default_instance();

  void Swap(packetl2c_user_trustee_notify* other);

  // implements Message ----------------------------------------------

  packetl2c_user_trustee_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_user_trustee_notify& from);
  void MergeFrom(const packetl2c_user_trustee_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_user_trustee];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // optional int32 chair_id = 2;
  inline bool has_chair_id() const;
  inline void clear_chair_id();
  static const int kChairIdFieldNumber = 2;
  inline ::google::protobuf::int32 chair_id() const;
  inline void set_chair_id(::google::protobuf::int32 value);

  // optional bool trustee = 3;
  inline bool has_trustee() const;
  inline void clear_trustee();
  static const int kTrusteeFieldNumber = 3;
  inline bool trustee() const;
  inline void set_trustee(bool value);

  // optional int32 remain_seconds = 4;
  inline bool has_remain_seconds() const;
  inline void clear_remain_seconds();
  static const int kRemainSecondsFieldNumber = 4;
  inline ::google::protobuf::int32 remain_seconds() const;
  inline void set_remain_seconds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetl2c_user_trustee_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_chair_id();
  inline void clear_has_chair_id();
  inline void set_has_trustee();
  inline void clear_has_trustee();
  inline void set_has_remain_seconds();
  inline void clear_has_remain_seconds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 chair_id_;
  bool trustee_;
  ::google::protobuf::int32 remain_seconds_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_user_trustee_notify* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_ready : public ::google::protobuf::Message {
 public:
  packetc2l_ready();
  virtual ~packetc2l_ready();

  packetc2l_ready(const packetc2l_ready& from);

  inline packetc2l_ready& operator=(const packetc2l_ready& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_ready& default_instance();

  void Swap(packetc2l_ready* other);

  // implements Message ----------------------------------------------

  packetc2l_ready* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_ready& from);
  void MergeFrom(const packetc2l_ready& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ready];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // optional bool change_table = 2;
  inline bool has_change_table() const;
  inline void clear_change_table();
  static const int kChangeTableFieldNumber = 2;
  inline bool change_table() const;
  inline void set_change_table(bool value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetc2l_ready)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_change_table();
  inline void clear_has_change_table();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  bool change_table_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_ready* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_send_all_playerinfos : public ::google::protobuf::Message {
 public:
  packetl2c_send_all_playerinfos();
  virtual ~packetl2c_send_all_playerinfos();

  packetl2c_send_all_playerinfos(const packetl2c_send_all_playerinfos& from);

  inline packetl2c_send_all_playerinfos& operator=(const packetl2c_send_all_playerinfos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_send_all_playerinfos& default_instance();

  void Swap(packetl2c_send_all_playerinfos* other);

  // implements Message ----------------------------------------------

  packetl2c_send_all_playerinfos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_send_all_playerinfos& from);
  void MergeFrom(const packetl2c_send_all_playerinfos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_all_playerinfos];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // repeated .game_srmj_protocols.msg_player_info player_info = 2;
  inline int player_info_size() const;
  inline void clear_player_info();
  static const int kPlayerInfoFieldNumber = 2;
  inline const ::game_srmj_protocols::msg_player_info& player_info(int index) const;
  inline ::game_srmj_protocols::msg_player_info* mutable_player_info(int index);
  inline ::game_srmj_protocols::msg_player_info* add_player_info();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::msg_player_info >&
      player_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::msg_player_info >*
      mutable_player_info();

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetl2c_send_all_playerinfos)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::msg_player_info > player_info_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_send_all_playerinfos* default_instance_;
};
// -------------------------------------------------------------------

class pile_card_data : public ::google::protobuf::Message {
 public:
  pile_card_data();
  virtual ~pile_card_data();

  pile_card_data(const pile_card_data& from);

  inline pile_card_data& operator=(const pile_card_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pile_card_data& default_instance();

  void Swap(pile_card_data* other);

  // implements Message ----------------------------------------------

  pile_card_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pile_card_data& from);
  void MergeFrom(const pile_card_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 action_code = 1;
  inline bool has_action_code() const;
  inline void clear_action_code();
  static const int kActionCodeFieldNumber = 1;
  inline ::google::protobuf::int32 action_code() const;
  inline void set_action_code(::google::protobuf::int32 value);

  // repeated int32 cards = 2;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // optional bool ming_gang = 3;
  inline bool has_ming_gang() const;
  inline void clear_ming_gang();
  static const int kMingGangFieldNumber = 3;
  inline bool ming_gang() const;
  inline void set_ming_gang(bool value);

  // optional bool jia_gang = 4;
  inline bool has_jia_gang() const;
  inline void clear_jia_gang();
  static const int kJiaGangFieldNumber = 4;
  inline bool jia_gang() const;
  inline void set_jia_gang(bool value);

  // optional int32 provider = 5;
  inline bool has_provider() const;
  inline void clear_provider();
  static const int kProviderFieldNumber = 5;
  inline ::google::protobuf::int32 provider() const;
  inline void set_provider(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.pile_card_data)
 private:
  inline void set_has_action_code();
  inline void clear_has_action_code();
  inline void set_has_ming_gang();
  inline void clear_has_ming_gang();
  inline void set_has_jia_gang();
  inline void clear_has_jia_gang();
  inline void set_has_provider();
  inline void clear_has_provider();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::int32 action_code_;
  bool ming_gang_;
  bool jia_gang_;
  ::google::protobuf::int32 provider_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static pile_card_data* default_instance_;
};
// -------------------------------------------------------------------

class pile_cards_data : public ::google::protobuf::Message {
 public:
  pile_cards_data();
  virtual ~pile_cards_data();

  pile_cards_data(const pile_cards_data& from);

  inline pile_cards_data& operator=(const pile_cards_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pile_cards_data& default_instance();

  void Swap(pile_cards_data* other);

  // implements Message ----------------------------------------------

  pile_cards_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pile_cards_data& from);
  void MergeFrom(const pile_cards_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .game_srmj_protocols.pile_card_data card = 1;
  inline int card_size() const;
  inline void clear_card();
  static const int kCardFieldNumber = 1;
  inline const ::game_srmj_protocols::pile_card_data& card(int index) const;
  inline ::game_srmj_protocols::pile_card_data* mutable_card(int index);
  inline ::game_srmj_protocols::pile_card_data* add_card();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::pile_card_data >&
      card() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::pile_card_data >*
      mutable_card();

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.pile_cards_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::pile_card_data > card_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static pile_cards_data* default_instance_;
};
// -------------------------------------------------------------------

class card_data : public ::google::protobuf::Message {
 public:
  card_data();
  virtual ~card_data();

  card_data(const card_data& from);

  inline card_data& operator=(const card_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const card_data& default_instance();

  void Swap(card_data* other);

  // implements Message ----------------------------------------------

  card_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const card_data& from);
  void MergeFrom(const card_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 card_id = 1;
  inline bool has_card_id() const;
  inline void clear_card_id();
  static const int kCardIdFieldNumber = 1;
  inline ::google::protobuf::int32 card_id() const;
  inline void set_card_id(::google::protobuf::int32 value);

  // optional int32 card_val = 2;
  inline bool has_card_val() const;
  inline void clear_card_val();
  static const int kCardValFieldNumber = 2;
  inline ::google::protobuf::int32 card_val() const;
  inline void set_card_val(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.card_data)
 private:
  inline void set_has_card_id();
  inline void clear_has_card_id();
  inline void set_has_card_val();
  inline void clear_has_card_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 card_id_;
  ::google::protobuf::int32 card_val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static card_data* default_instance_;
};
// -------------------------------------------------------------------

class cards_data : public ::google::protobuf::Message {
 public:
  cards_data();
  virtual ~cards_data();

  cards_data(const cards_data& from);

  inline cards_data& operator=(const cards_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cards_data& default_instance();

  void Swap(cards_data* other);

  // implements Message ----------------------------------------------

  cards_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cards_data& from);
  void MergeFrom(const cards_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .game_srmj_protocols.card_data card = 1;
  inline int card_size() const;
  inline void clear_card();
  static const int kCardFieldNumber = 1;
  inline const ::game_srmj_protocols::card_data& card(int index) const;
  inline ::game_srmj_protocols::card_data* mutable_card(int index);
  inline ::game_srmj_protocols::card_data* add_card();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::card_data >&
      card() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::card_data >*
      mutable_card();

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.cards_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::card_data > card_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cards_data* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_game_start : public ::google::protobuf::Message {
 public:
  packetl2c_game_start();
  virtual ~packetl2c_game_start();

  packetl2c_game_start(const packetl2c_game_start& from);

  inline packetl2c_game_start& operator=(const packetl2c_game_start& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_game_start& default_instance();

  void Swap(packetl2c_game_start* other);

  // implements Message ----------------------------------------------

  packetl2c_game_start* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_game_start& from);
  void MergeFrom(const packetl2c_game_start& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // optional int32 dice_count = 2;
  inline bool has_dice_count() const;
  inline void clear_dice_count();
  static const int kDiceCountFieldNumber = 2;
  inline ::google::protobuf::int32 dice_count() const;
  inline void set_dice_count(::google::protobuf::int32 value);

  // optional int32 banker_user = 3;
  inline bool has_banker_user() const;
  inline void clear_banker_user();
  static const int kBankerUserFieldNumber = 3;
  inline ::google::protobuf::int32 banker_user() const;
  inline void set_banker_user(::google::protobuf::int32 value);

  // repeated .game_srmj_protocols.cards_data cards = 5;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 5;
  inline const ::game_srmj_protocols::cards_data& cards(int index) const;
  inline ::game_srmj_protocols::cards_data* mutable_cards(int index);
  inline ::game_srmj_protocols::cards_data* add_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >&
      cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetl2c_game_start)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_dice_count();
  inline void clear_has_dice_count();
  inline void set_has_banker_user();
  inline void clear_has_banker_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 dice_count_;
  ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data > cards_;
  ::google::protobuf::int32 banker_user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_game_start* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_out_card : public ::google::protobuf::Message {
 public:
  packetc2l_out_card();
  virtual ~packetc2l_out_card();

  packetc2l_out_card(const packetc2l_out_card& from);

  inline packetc2l_out_card& operator=(const packetc2l_out_card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_out_card& default_instance();

  void Swap(packetc2l_out_card* other);

  // implements Message ----------------------------------------------

  packetc2l_out_card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_out_card& from);
  void MergeFrom(const packetc2l_out_card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_out_card];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // optional int32 card_id = 2;
  inline bool has_card_id() const;
  inline void clear_card_id();
  static const int kCardIdFieldNumber = 2;
  inline ::google::protobuf::int32 card_id() const;
  inline void set_card_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetc2l_out_card)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_card_id();
  inline void clear_has_card_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 card_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_out_card* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_out_card_notify : public ::google::protobuf::Message {
 public:
  packetl2c_out_card_notify();
  virtual ~packetl2c_out_card_notify();

  packetl2c_out_card_notify(const packetl2c_out_card_notify& from);

  inline packetl2c_out_card_notify& operator=(const packetl2c_out_card_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_out_card_notify& default_instance();

  void Swap(packetl2c_out_card_notify* other);

  // implements Message ----------------------------------------------

  packetl2c_out_card_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_out_card_notify& from);
  void MergeFrom(const packetl2c_out_card_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_out_card_notify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // optional int32 action_user = 2;
  inline bool has_action_user() const;
  inline void clear_action_user();
  static const int kActionUserFieldNumber = 2;
  inline ::google::protobuf::int32 action_user() const;
  inline void set_action_user(::google::protobuf::int32 value);

  // optional .game_srmj_protocols.card_data card = 3;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 3;
  inline const ::game_srmj_protocols::card_data& card() const;
  inline ::game_srmj_protocols::card_data* mutable_card();
  inline ::game_srmj_protocols::card_data* release_card();
  inline void set_allocated_card(::game_srmj_protocols::card_data* card);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetl2c_out_card_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_action_user();
  inline void clear_has_action_user();
  inline void set_has_card();
  inline void clear_has_card();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 action_user_;
  ::game_srmj_protocols::card_data* card_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_out_card_notify* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_operate_notify : public ::google::protobuf::Message {
 public:
  packetl2c_operate_notify();
  virtual ~packetl2c_operate_notify();

  packetl2c_operate_notify(const packetl2c_operate_notify& from);

  inline packetl2c_operate_notify& operator=(const packetl2c_operate_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_operate_notify& default_instance();

  void Swap(packetl2c_operate_notify* other);

  // implements Message ----------------------------------------------

  packetl2c_operate_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_operate_notify& from);
  void MergeFrom(const packetl2c_operate_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_operate_notify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // optional int32 user_action = 2;
  inline bool has_user_action() const;
  inline void clear_user_action();
  static const int kUserActionFieldNumber = 2;
  inline ::google::protobuf::int32 user_action() const;
  inline void set_user_action(::google::protobuf::int32 value);

  // optional int32 card_val = 3;
  inline bool has_card_val() const;
  inline void clear_card_val();
  static const int kCardValFieldNumber = 3;
  inline ::google::protobuf::int32 card_val() const;
  inline void set_card_val(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetl2c_operate_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_user_action();
  inline void clear_has_user_action();
  inline void set_has_card_val();
  inline void clear_has_card_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 user_action_;
  ::google::protobuf::int32 card_val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_operate_notify* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_operate_card : public ::google::protobuf::Message {
 public:
  packetc2l_operate_card();
  virtual ~packetc2l_operate_card();

  packetc2l_operate_card(const packetc2l_operate_card& from);

  inline packetc2l_operate_card& operator=(const packetc2l_operate_card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_operate_card& default_instance();

  void Swap(packetc2l_operate_card* other);

  // implements Message ----------------------------------------------

  packetc2l_operate_card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_operate_card& from);
  void MergeFrom(const packetc2l_operate_card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_operate_card];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // optional int32 user_action = 2;
  inline bool has_user_action() const;
  inline void clear_user_action();
  static const int kUserActionFieldNumber = 2;
  inline ::google::protobuf::int32 user_action() const;
  inline void set_user_action(::google::protobuf::int32 value);

  // optional int32 card_id = 3;
  inline bool has_card_id() const;
  inline void clear_card_id();
  static const int kCardIdFieldNumber = 3;
  inline ::google::protobuf::int32 card_id() const;
  inline void set_card_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetc2l_operate_card)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_user_action();
  inline void clear_has_user_action();
  inline void set_has_card_id();
  inline void clear_has_card_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 user_action_;
  ::google::protobuf::int32 card_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_operate_card* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_operate_result : public ::google::protobuf::Message {
 public:
  packetl2c_operate_result();
  virtual ~packetl2c_operate_result();

  packetl2c_operate_result(const packetl2c_operate_result& from);

  inline packetl2c_operate_result& operator=(const packetl2c_operate_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_operate_result& default_instance();

  void Swap(packetl2c_operate_result* other);

  // implements Message ----------------------------------------------

  packetl2c_operate_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_operate_result& from);
  void MergeFrom(const packetl2c_operate_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_operate_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // optional int32 action_user = 2;
  inline bool has_action_user() const;
  inline void clear_action_user();
  static const int kActionUserFieldNumber = 2;
  inline ::google::protobuf::int32 action_user() const;
  inline void set_action_user(::google::protobuf::int32 value);

  // optional int32 user_action = 3;
  inline bool has_user_action() const;
  inline void clear_user_action();
  static const int kUserActionFieldNumber = 3;
  inline ::google::protobuf::int32 user_action() const;
  inline void set_user_action(::google::protobuf::int32 value);

  // optional int32 provide_user = 4;
  inline bool has_provide_user() const;
  inline void clear_provide_user();
  static const int kProvideUserFieldNumber = 4;
  inline ::google::protobuf::int32 provide_user() const;
  inline void set_provide_user(::google::protobuf::int32 value);

  // optional int32 card_val = 5;
  inline bool has_card_val() const;
  inline void clear_card_val();
  static const int kCardValFieldNumber = 5;
  inline ::google::protobuf::int32 card_val() const;
  inline void set_card_val(::google::protobuf::int32 value);

  // repeated .game_srmj_protocols.card_data pile_cards = 6;
  inline int pile_cards_size() const;
  inline void clear_pile_cards();
  static const int kPileCardsFieldNumber = 6;
  inline const ::game_srmj_protocols::card_data& pile_cards(int index) const;
  inline ::game_srmj_protocols::card_data* mutable_pile_cards(int index);
  inline ::game_srmj_protocols::card_data* add_pile_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::card_data >&
      pile_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::card_data >*
      mutable_pile_cards();

  // optional .game_srmj_protocols.win_result hu_data = 7;
  inline bool has_hu_data() const;
  inline void clear_hu_data();
  static const int kHuDataFieldNumber = 7;
  inline const ::game_srmj_protocols::win_result& hu_data() const;
  inline ::game_srmj_protocols::win_result* mutable_hu_data();
  inline ::game_srmj_protocols::win_result* release_hu_data();
  inline void set_allocated_hu_data(::game_srmj_protocols::win_result* hu_data);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetl2c_operate_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_action_user();
  inline void clear_has_action_user();
  inline void set_has_user_action();
  inline void clear_has_user_action();
  inline void set_has_provide_user();
  inline void clear_has_provide_user();
  inline void set_has_card_val();
  inline void clear_has_card_val();
  inline void set_has_hu_data();
  inline void clear_has_hu_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 action_user_;
  ::google::protobuf::int32 user_action_;
  ::google::protobuf::int32 provide_user_;
  ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::card_data > pile_cards_;
  ::game_srmj_protocols::win_result* hu_data_;
  ::google::protobuf::int32 card_val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_operate_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_add_win_list : public ::google::protobuf::Message {
 public:
  packetl2c_add_win_list();
  virtual ~packetl2c_add_win_list();

  packetl2c_add_win_list(const packetl2c_add_win_list& from);

  inline packetl2c_add_win_list& operator=(const packetl2c_add_win_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_add_win_list& default_instance();

  void Swap(packetl2c_add_win_list* other);

  // implements Message ----------------------------------------------

  packetl2c_add_win_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_add_win_list& from);
  void MergeFrom(const packetl2c_add_win_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_add_win_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // optional .game_srmj_protocols.win_result hu_data = 2;
  inline bool has_hu_data() const;
  inline void clear_hu_data();
  static const int kHuDataFieldNumber = 2;
  inline const ::game_srmj_protocols::win_result& hu_data() const;
  inline ::game_srmj_protocols::win_result* mutable_hu_data();
  inline ::game_srmj_protocols::win_result* release_hu_data();
  inline void set_allocated_hu_data(::game_srmj_protocols::win_result* hu_data);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetl2c_add_win_list)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_hu_data();
  inline void clear_has_hu_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game_srmj_protocols::win_result* hu_data_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_add_win_list* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_send_card : public ::google::protobuf::Message {
 public:
  packetl2c_send_card();
  virtual ~packetl2c_send_card();

  packetl2c_send_card(const packetl2c_send_card& from);

  inline packetl2c_send_card& operator=(const packetl2c_send_card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_send_card& default_instance();

  void Swap(packetl2c_send_card* other);

  // implements Message ----------------------------------------------

  packetl2c_send_card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_send_card& from);
  void MergeFrom(const packetl2c_send_card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_card];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // optional int32 current_user = 2;
  inline bool has_current_user() const;
  inline void clear_current_user();
  static const int kCurrentUserFieldNumber = 2;
  inline ::google::protobuf::int32 current_user() const;
  inline void set_current_user(::google::protobuf::int32 value);

  // optional .game_srmj_protocols.card_data card = 3;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 3;
  inline const ::game_srmj_protocols::card_data& card() const;
  inline ::game_srmj_protocols::card_data* mutable_card();
  inline ::game_srmj_protocols::card_data* release_card();
  inline void set_allocated_card(::game_srmj_protocols::card_data* card);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetl2c_send_card)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_current_user();
  inline void clear_has_current_user();
  inline void set_has_card();
  inline void clear_has_card();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 current_user_;
  ::game_srmj_protocols::card_data* card_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_send_card* default_instance_;
};
// -------------------------------------------------------------------

class lose_result : public ::google::protobuf::Message {
 public:
  lose_result();
  virtual ~lose_result();

  lose_result(const lose_result& from);

  inline lose_result& operator=(const lose_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const lose_result& default_instance();

  void Swap(lose_result* other);

  // implements Message ----------------------------------------------

  lose_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const lose_result& from);
  void MergeFrom(const lose_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 lose_idx = 1;
  inline bool has_lose_idx() const;
  inline void clear_lose_idx();
  static const int kLoseIdxFieldNumber = 1;
  inline ::google::protobuf::int32 lose_idx() const;
  inline void set_lose_idx(::google::protobuf::int32 value);

  // optional int32 lose_account = 2;
  inline bool has_lose_account() const;
  inline void clear_lose_account();
  static const int kLoseAccountFieldNumber = 2;
  inline ::google::protobuf::int32 lose_account() const;
  inline void set_lose_account(::google::protobuf::int32 value);

  // optional bool lose_limited = 3;
  inline bool has_lose_limited() const;
  inline void clear_lose_limited();
  static const int kLoseLimitedFieldNumber = 3;
  inline bool lose_limited() const;
  inline void set_lose_limited(bool value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.lose_result)
 private:
  inline void set_has_lose_idx();
  inline void clear_has_lose_idx();
  inline void set_has_lose_account();
  inline void clear_has_lose_account();
  inline void set_has_lose_limited();
  inline void clear_has_lose_limited();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 lose_idx_;
  ::google::protobuf::int32 lose_account_;
  bool lose_limited_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static lose_result* default_instance_;
};
// -------------------------------------------------------------------

class win_result : public ::google::protobuf::Message {
 public:
  win_result();
  virtual ~win_result();

  win_result(const win_result& from);

  inline win_result& operator=(const win_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const win_result& default_instance();

  void Swap(win_result* other);

  // implements Message ----------------------------------------------

  win_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const win_result& from);
  void MergeFrom(const win_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 win_idx = 1;
  inline bool has_win_idx() const;
  inline void clear_win_idx();
  static const int kWinIdxFieldNumber = 1;
  inline ::google::protobuf::int32 win_idx() const;
  inline void set_win_idx(::google::protobuf::int32 value);

  // optional int32 win_account = 2;
  inline bool has_win_account() const;
  inline void clear_win_account();
  static const int kWinAccountFieldNumber = 2;
  inline ::google::protobuf::int32 win_account() const;
  inline void set_win_account(::google::protobuf::int32 value);

  // optional bool win_limited = 3;
  inline bool has_win_limited() const;
  inline void clear_win_limited();
  static const int kWinLimitedFieldNumber = 3;
  inline bool win_limited() const;
  inline void set_win_limited(bool value);

  // repeated .game_srmj_protocols.lose_result lose = 4;
  inline int lose_size() const;
  inline void clear_lose();
  static const int kLoseFieldNumber = 4;
  inline const ::game_srmj_protocols::lose_result& lose(int index) const;
  inline ::game_srmj_protocols::lose_result* mutable_lose(int index);
  inline ::game_srmj_protocols::lose_result* add_lose();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::lose_result >&
      lose() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::lose_result >*
      mutable_lose();

  // optional int32 fan_cnt = 5;
  inline bool has_fan_cnt() const;
  inline void clear_fan_cnt();
  static const int kFanCntFieldNumber = 5;
  inline ::google::protobuf::int32 fan_cnt() const;
  inline void set_fan_cnt(::google::protobuf::int32 value);

  // repeated uint32 result1 = 6;
  inline int result1_size() const;
  inline void clear_result1();
  static const int kResult1FieldNumber = 6;
  inline ::google::protobuf::uint32 result1(int index) const;
  inline void set_result1(int index, ::google::protobuf::uint32 value);
  inline void add_result1(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      result1() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_result1();

  // repeated uint32 result2 = 7;
  inline int result2_size() const;
  inline void clear_result2();
  static const int kResult2FieldNumber = 7;
  inline ::google::protobuf::uint32 result2(int index) const;
  inline void set_result2(int index, ::google::protobuf::uint32 value);
  inline void add_result2(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      result2() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_result2();

  // repeated uint32 result3 = 8;
  inline int result3_size() const;
  inline void clear_result3();
  static const int kResult3FieldNumber = 8;
  inline ::google::protobuf::uint32 result3(int index) const;
  inline void set_result3(int index, ::google::protobuf::uint32 value);
  inline void add_result3(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      result3() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_result3();

  // optional int32 win_root_cnt = 9;
  inline bool has_win_root_cnt() const;
  inline void clear_win_root_cnt();
  static const int kWinRootCntFieldNumber = 9;
  inline ::google::protobuf::int32 win_root_cnt() const;
  inline void set_win_root_cnt(::google::protobuf::int32 value);

  // optional int32 user_action = 10;
  inline bool has_user_action() const;
  inline void clear_user_action();
  static const int kUserActionFieldNumber = 10;
  inline ::google::protobuf::int32 user_action() const;
  inline void set_user_action(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.win_result)
 private:
  inline void set_has_win_idx();
  inline void clear_has_win_idx();
  inline void set_has_win_account();
  inline void clear_has_win_account();
  inline void set_has_win_limited();
  inline void clear_has_win_limited();
  inline void set_has_fan_cnt();
  inline void clear_has_fan_cnt();
  inline void set_has_win_root_cnt();
  inline void clear_has_win_root_cnt();
  inline void set_has_user_action();
  inline void clear_has_user_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 win_idx_;
  ::google::protobuf::int32 win_account_;
  ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::lose_result > lose_;
  bool win_limited_;
  ::google::protobuf::int32 fan_cnt_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > result1_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > result2_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > result3_;
  ::google::protobuf::int32 win_root_cnt_;
  ::google::protobuf::int32 user_action_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static win_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_game_end : public ::google::protobuf::Message {
 public:
  packetl2c_game_end();
  virtual ~packetl2c_game_end();

  packetl2c_game_end(const packetl2c_game_end& from);

  inline packetl2c_game_end& operator=(const packetl2c_game_end& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_game_end& default_instance();

  void Swap(packetl2c_game_end* other);

  // implements Message ----------------------------------------------

  packetl2c_game_end* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_game_end& from);
  void MergeFrom(const packetl2c_game_end& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // repeated int32 game_score = 3;
  inline int game_score_size() const;
  inline void clear_game_score();
  static const int kGameScoreFieldNumber = 3;
  inline ::google::protobuf::int32 game_score(int index) const;
  inline void set_game_score(int index, ::google::protobuf::int32 value);
  inline void add_game_score(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      game_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_game_score();

  // repeated int32 win_account = 4;
  inline int win_account_size() const;
  inline void clear_win_account();
  static const int kWinAccountFieldNumber = 4;
  inline ::google::protobuf::int32 win_account(int index) const;
  inline void set_win_account(int index, ::google::protobuf::int32 value);
  inline void add_win_account(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      win_account() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_win_account();

  // repeated int32 win_fee = 5;
  inline int win_fee_size() const;
  inline void clear_win_fee();
  static const int kWinFeeFieldNumber = 5;
  inline ::google::protobuf::int32 win_fee(int index) const;
  inline void set_win_fee(int index, ::google::protobuf::int32 value);
  inline void add_win_fee(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      win_fee() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_win_fee();

  // repeated .game_srmj_protocols.cards_data hand_cards = 6;
  inline int hand_cards_size() const;
  inline void clear_hand_cards();
  static const int kHandCardsFieldNumber = 6;
  inline const ::game_srmj_protocols::cards_data& hand_cards(int index) const;
  inline ::game_srmj_protocols::cards_data* mutable_hand_cards(int index);
  inline ::game_srmj_protocols::cards_data* add_hand_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >&
      hand_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >*
      mutable_hand_cards();

  // repeated .game_srmj_protocols.pile_cards_data pile_cards = 7;
  inline int pile_cards_size() const;
  inline void clear_pile_cards();
  static const int kPileCardsFieldNumber = 7;
  inline const ::game_srmj_protocols::pile_cards_data& pile_cards(int index) const;
  inline ::game_srmj_protocols::pile_cards_data* mutable_pile_cards(int index);
  inline ::game_srmj_protocols::pile_cards_data* add_pile_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::pile_cards_data >&
      pile_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::pile_cards_data >*
      mutable_pile_cards();

  // repeated .game_srmj_protocols.cards_data hu_cards = 8;
  inline int hu_cards_size() const;
  inline void clear_hu_cards();
  static const int kHuCardsFieldNumber = 8;
  inline const ::game_srmj_protocols::cards_data& hu_cards(int index) const;
  inline ::game_srmj_protocols::cards_data* mutable_hu_cards(int index);
  inline ::game_srmj_protocols::cards_data* add_hu_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >&
      hu_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >*
      mutable_hu_cards();

  // repeated .game_srmj_protocols.win_result hu_list = 9;
  inline int hu_list_size() const;
  inline void clear_hu_list();
  static const int kHuListFieldNumber = 9;
  inline const ::game_srmj_protocols::win_result& hu_list(int index) const;
  inline ::game_srmj_protocols::win_result* mutable_hu_list(int index);
  inline ::game_srmj_protocols::win_result* add_hu_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::win_result >&
      hu_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::win_result >*
      mutable_hu_list();

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetl2c_game_end)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > game_score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > win_account_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > win_fee_;
  ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data > hand_cards_;
  ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::pile_cards_data > pile_cards_;
  ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data > hu_cards_;
  ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::win_result > hu_list_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_game_end* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_game_notify : public ::google::protobuf::Message {
 public:
  packetl2c_game_notify();
  virtual ~packetl2c_game_notify();

  packetl2c_game_notify(const packetl2c_game_notify& from);

  inline packetl2c_game_notify& operator=(const packetl2c_game_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_game_notify& default_instance();

  void Swap(packetl2c_game_notify* other);

  // implements Message ----------------------------------------------

  packetl2c_game_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_game_notify& from);
  void MergeFrom(const packetl2c_game_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_notify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // optional .game_srmj_protocols.e_notify_type notify_type = 2;
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 2;
  inline ::game_srmj_protocols::e_notify_type notify_type() const;
  inline void set_notify_type(::game_srmj_protocols::e_notify_type value);

  // optional int32 notify_param = 3;
  inline bool has_notify_param() const;
  inline void clear_notify_param();
  static const int kNotifyParamFieldNumber = 3;
  inline ::google::protobuf::int32 notify_param() const;
  inline void set_notify_param(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetl2c_game_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_notify_type();
  inline void clear_has_notify_type();
  inline void set_has_notify_param();
  inline void clear_has_notify_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int notify_type_;
  ::google::protobuf::int32 notify_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_game_notify* default_instance_;
};
// -------------------------------------------------------------------

class gm_player_info : public ::google::protobuf::Message {
 public:
  gm_player_info();
  virtual ~gm_player_info();

  gm_player_info(const gm_player_info& from);

  inline gm_player_info& operator=(const gm_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gm_player_info& default_instance();

  void Swap(gm_player_info* other);

  // implements Message ----------------------------------------------

  gm_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gm_player_info& from);
  void MergeFrom(const gm_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional int64 player_gold = 3;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 3;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // optional int32 player_room = 4;
  inline bool has_player_room() const;
  inline void clear_player_room();
  static const int kPlayerRoomFieldNumber = 4;
  inline ::google::protobuf::int32 player_room() const;
  inline void set_player_room(::google::protobuf::int32 value);

  // optional int64 player_profit = 5;
  inline bool has_player_profit() const;
  inline void clear_player_profit();
  static const int kPlayerProfitFieldNumber = 5;
  inline ::google::protobuf::int64 player_profit() const;
  inline void set_player_profit(::google::protobuf::int64 value);

  // optional int64 player_kill_type = 6;
  inline bool has_player_kill_type() const;
  inline void clear_player_kill_type();
  static const int kPlayerKillTypeFieldNumber = 6;
  inline ::google::protobuf::int64 player_kill_type() const;
  inline void set_player_kill_type(::google::protobuf::int64 value);

  // optional int64 player_kill_cnt = 7;
  inline bool has_player_kill_cnt() const;
  inline void clear_player_kill_cnt();
  static const int kPlayerKillCntFieldNumber = 7;
  inline ::google::protobuf::int64 player_kill_cnt() const;
  inline void set_player_kill_cnt(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.gm_player_info)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();
  inline void set_has_player_room();
  inline void clear_has_player_room();
  inline void set_has_player_profit();
  inline void clear_has_player_profit();
  inline void set_has_player_kill_type();
  inline void clear_has_player_kill_type();
  inline void set_has_player_kill_cnt();
  inline void clear_has_player_kill_cnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_name_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 player_room_;
  ::google::protobuf::int64 player_gold_;
  ::google::protobuf::int64 player_profit_;
  ::google::protobuf::int64 player_kill_type_;
  ::google::protobuf::int64 player_kill_cnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gm_player_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_gm_list : public ::google::protobuf::Message {
 public:
  packetc2l_gm_list();
  virtual ~packetc2l_gm_list();

  packetc2l_gm_list(const packetc2l_gm_list& from);

  inline packetc2l_gm_list& operator=(const packetc2l_gm_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_gm_list& default_instance();

  void Swap(packetc2l_gm_list* other);

  // implements Message ----------------------------------------------

  packetc2l_gm_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_gm_list& from);
  void MergeFrom(const packetc2l_gm_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // optional int32 hours = 2;
  inline bool has_hours() const;
  inline void clear_hours();
  static const int kHoursFieldNumber = 2;
  inline ::google::protobuf::int32 hours() const;
  inline void set_hours(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetc2l_gm_list)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_hours();
  inline void clear_has_hours();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 hours_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_gm_list* default_instance_;
};
// -------------------------------------------------------------------

class gm_room_info : public ::google::protobuf::Message {
 public:
  gm_room_info();
  virtual ~gm_room_info();

  gm_room_info(const gm_room_info& from);

  inline gm_room_info& operator=(const gm_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gm_room_info& default_instance();

  void Swap(gm_room_info* other);

  // implements Message ----------------------------------------------

  gm_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gm_room_info& from);
  void MergeFrom(const gm_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 player_fee = 2;
  inline bool has_player_fee() const;
  inline void clear_player_fee();
  static const int kPlayerFeeFieldNumber = 2;
  inline ::google::protobuf::int32 player_fee() const;
  inline void set_player_fee(::google::protobuf::int32 value);

  // optional int64 player_win = 3;
  inline bool has_player_win() const;
  inline void clear_player_win();
  static const int kPlayerWinFieldNumber = 3;
  inline ::google::protobuf::int64 player_win() const;
  inline void set_player_win(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.gm_room_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_player_fee();
  inline void clear_has_player_fee();
  inline void set_has_player_win();
  inline void clear_has_player_win();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 player_fee_;
  ::google::protobuf::int64 player_win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gm_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_gm_list : public ::google::protobuf::Message {
 public:
  packetl2c_gm_list();
  virtual ~packetl2c_gm_list();

  packetl2c_gm_list(const packetl2c_gm_list& from);

  inline packetl2c_gm_list& operator=(const packetl2c_gm_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_gm_list& default_instance();

  void Swap(packetl2c_gm_list* other);

  // implements Message ----------------------------------------------

  packetl2c_gm_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_gm_list& from);
  void MergeFrom(const packetl2c_gm_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // repeated .game_srmj_protocols.gm_player_info players = 2;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 2;
  inline const ::game_srmj_protocols::gm_player_info& players(int index) const;
  inline ::game_srmj_protocols::gm_player_info* mutable_players(int index);
  inline ::game_srmj_protocols::gm_player_info* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::gm_player_info >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::gm_player_info >*
      mutable_players();

  // repeated .game_srmj_protocols.gm_room_info rooms = 3;
  inline int rooms_size() const;
  inline void clear_rooms();
  static const int kRoomsFieldNumber = 3;
  inline const ::game_srmj_protocols::gm_room_info& rooms(int index) const;
  inline ::game_srmj_protocols::gm_room_info* mutable_rooms(int index);
  inline ::game_srmj_protocols::gm_room_info* add_rooms();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::gm_room_info >&
      rooms() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::gm_room_info >*
      mutable_rooms();

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetl2c_gm_list)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::gm_player_info > players_;
  ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::gm_room_info > rooms_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_gm_list* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_gm_kill : public ::google::protobuf::Message {
 public:
  packetc2l_gm_kill();
  virtual ~packetc2l_gm_kill();

  packetc2l_gm_kill(const packetc2l_gm_kill& from);

  inline packetc2l_gm_kill& operator=(const packetc2l_gm_kill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_gm_kill& default_instance();

  void Swap(packetc2l_gm_kill* other);

  // implements Message ----------------------------------------------

  packetc2l_gm_kill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_gm_kill& from);
  void MergeFrom(const packetc2l_gm_kill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_kill];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int32 kill_type = 3;
  inline bool has_kill_type() const;
  inline void clear_kill_type();
  static const int kKillTypeFieldNumber = 3;
  inline ::google::protobuf::int32 kill_type() const;
  inline void set_kill_type(::google::protobuf::int32 value);

  // optional int32 kill_cnt = 4;
  inline bool has_kill_cnt() const;
  inline void clear_kill_cnt();
  static const int kKillCntFieldNumber = 4;
  inline ::google::protobuf::int32 kill_cnt() const;
  inline void set_kill_cnt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetc2l_gm_kill)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_kill_type();
  inline void clear_has_kill_type();
  inline void set_has_kill_cnt();
  inline void clear_has_kill_cnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 kill_type_;
  ::google::protobuf::int32 kill_cnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_gm_kill* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_exchange_card : public ::google::protobuf::Message {
 public:
  packetc2l_exchange_card();
  virtual ~packetc2l_exchange_card();

  packetc2l_exchange_card(const packetc2l_exchange_card& from);

  inline packetc2l_exchange_card& operator=(const packetc2l_exchange_card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_exchange_card& default_instance();

  void Swap(packetc2l_exchange_card* other);

  // implements Message ----------------------------------------------

  packetc2l_exchange_card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_exchange_card& from);
  void MergeFrom(const packetc2l_exchange_card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_exchange_card];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // repeated int32 card = 2;
  inline int card_size() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline ::google::protobuf::int32 card(int index) const;
  inline void set_card(int index, ::google::protobuf::int32 value);
  inline void add_card(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_card();

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetc2l_exchange_card)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_exchange_card* default_instance_;
};
// -------------------------------------------------------------------

class exchange_card_data : public ::google::protobuf::Message {
 public:
  exchange_card_data();
  virtual ~exchange_card_data();

  exchange_card_data(const exchange_card_data& from);

  inline exchange_card_data& operator=(const exchange_card_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const exchange_card_data& default_instance();

  void Swap(exchange_card_data* other);

  // implements Message ----------------------------------------------

  exchange_card_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const exchange_card_data& from);
  void MergeFrom(const exchange_card_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 old_card_id = 1;
  inline int old_card_id_size() const;
  inline void clear_old_card_id();
  static const int kOldCardIdFieldNumber = 1;
  inline ::google::protobuf::int32 old_card_id(int index) const;
  inline void set_old_card_id(int index, ::google::protobuf::int32 value);
  inline void add_old_card_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      old_card_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_old_card_id();

  // repeated int32 new_card_id = 2;
  inline int new_card_id_size() const;
  inline void clear_new_card_id();
  static const int kNewCardIdFieldNumber = 2;
  inline ::google::protobuf::int32 new_card_id(int index) const;
  inline void set_new_card_id(int index, ::google::protobuf::int32 value);
  inline void add_new_card_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      new_card_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_new_card_id();

  // repeated int32 new_card_val = 3;
  inline int new_card_val_size() const;
  inline void clear_new_card_val();
  static const int kNewCardValFieldNumber = 3;
  inline ::google::protobuf::int32 new_card_val(int index) const;
  inline void set_new_card_val(int index, ::google::protobuf::int32 value);
  inline void add_new_card_val(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      new_card_val() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_new_card_val();

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.exchange_card_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > old_card_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > new_card_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > new_card_val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static exchange_card_data* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_exchange_card : public ::google::protobuf::Message {
 public:
  packetl2c_exchange_card();
  virtual ~packetl2c_exchange_card();

  packetl2c_exchange_card(const packetl2c_exchange_card& from);

  inline packetl2c_exchange_card& operator=(const packetl2c_exchange_card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_exchange_card& default_instance();

  void Swap(packetl2c_exchange_card* other);

  // implements Message ----------------------------------------------

  packetl2c_exchange_card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_exchange_card& from);
  void MergeFrom(const packetl2c_exchange_card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_exchange_card];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // optional int32 exchange_type = 2;
  inline bool has_exchange_type() const;
  inline void clear_exchange_type();
  static const int kExchangeTypeFieldNumber = 2;
  inline ::google::protobuf::int32 exchange_type() const;
  inline void set_exchange_type(::google::protobuf::int32 value);

  // repeated .game_srmj_protocols.exchange_card_data cards = 3;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 3;
  inline const ::game_srmj_protocols::exchange_card_data& cards(int index) const;
  inline ::game_srmj_protocols::exchange_card_data* mutable_cards(int index);
  inline ::game_srmj_protocols::exchange_card_data* add_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::exchange_card_data >&
      cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::exchange_card_data >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetl2c_exchange_card)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_exchange_type();
  inline void clear_has_exchange_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 exchange_type_;
  ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::exchange_card_data > cards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_exchange_card* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_decide_vacancy : public ::google::protobuf::Message {
 public:
  packetc2l_decide_vacancy();
  virtual ~packetc2l_decide_vacancy();

  packetc2l_decide_vacancy(const packetc2l_decide_vacancy& from);

  inline packetc2l_decide_vacancy& operator=(const packetc2l_decide_vacancy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_decide_vacancy& default_instance();

  void Swap(packetc2l_decide_vacancy* other);

  // implements Message ----------------------------------------------

  packetc2l_decide_vacancy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_decide_vacancy& from);
  void MergeFrom(const packetc2l_decide_vacancy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_decide_vacancy];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetc2l_decide_vacancy)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_decide_vacancy* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_decide_vacancy : public ::google::protobuf::Message {
 public:
  packetl2c_decide_vacancy();
  virtual ~packetl2c_decide_vacancy();

  packetl2c_decide_vacancy(const packetl2c_decide_vacancy& from);

  inline packetl2c_decide_vacancy& operator=(const packetl2c_decide_vacancy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_decide_vacancy& default_instance();

  void Swap(packetl2c_decide_vacancy* other);

  // implements Message ----------------------------------------------

  packetl2c_decide_vacancy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_decide_vacancy& from);
  void MergeFrom(const packetl2c_decide_vacancy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_decide_vacancy];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srmj_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srmj_protocols::e_server_msg_type value);

  // repeated int32 types = 2;
  inline int types_size() const;
  inline void clear_types();
  static const int kTypesFieldNumber = 2;
  inline ::google::protobuf::int32 types(int index) const;
  inline void set_types(int index, ::google::protobuf::int32 value);
  inline void add_types(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      types() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_types();

  // @@protoc_insertion_point(class_scope:game_srmj_protocols.packetl2c_decide_vacancy)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > types_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrmj_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrmj_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_decide_vacancy* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_player_info

// optional int32 player_id = 1;
inline bool msg_player_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_player_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_player_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_player_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_player_info::player_id() const {
  return player_id_;
}
inline void msg_player_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string player_name = 2;
inline bool msg_player_info::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_player_info::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_player_info::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_player_info::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& msg_player_info::player_name() const {
  return *player_name_;
}
inline void msg_player_info::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void msg_player_info::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void msg_player_info::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_player_info::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* msg_player_info::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_player_info::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 head_frame = 3;
inline bool msg_player_info::has_head_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_player_info::set_has_head_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_player_info::clear_has_head_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_player_info::clear_head_frame() {
  head_frame_ = 0;
  clear_has_head_frame();
}
inline ::google::protobuf::int32 msg_player_info::head_frame() const {
  return head_frame_;
}
inline void msg_player_info::set_head_frame(::google::protobuf::int32 value) {
  set_has_head_frame();
  head_frame_ = value;
}

// optional string head_custom = 4;
inline bool msg_player_info::has_head_custom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_player_info::set_has_head_custom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_player_info::clear_has_head_custom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_player_info::clear_head_custom() {
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    head_custom_->clear();
  }
  clear_has_head_custom();
}
inline const ::std::string& msg_player_info::head_custom() const {
  return *head_custom_;
}
inline void msg_player_info::set_head_custom(const ::std::string& value) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(value);
}
inline void msg_player_info::set_head_custom(const char* value) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(value);
}
inline void msg_player_info::set_head_custom(const char* value, size_t size) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_player_info::mutable_head_custom() {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  return head_custom_;
}
inline ::std::string* msg_player_info::release_head_custom() {
  clear_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_custom_;
    head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_player_info::set_allocated_head_custom(::std::string* head_custom) {
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete head_custom_;
  }
  if (head_custom) {
    set_has_head_custom();
    head_custom_ = head_custom;
  } else {
    clear_has_head_custom();
    head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 player_gold = 5;
inline bool msg_player_info::has_player_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_player_info::set_has_player_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_player_info::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_player_info::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 msg_player_info::player_gold() const {
  return player_gold_;
}
inline void msg_player_info::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// optional int32 player_sex = 6;
inline bool msg_player_info::has_player_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_player_info::set_has_player_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_player_info::clear_has_player_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_player_info::clear_player_sex() {
  player_sex_ = 0;
  clear_has_player_sex();
}
inline ::google::protobuf::int32 msg_player_info::player_sex() const {
  return player_sex_;
}
inline void msg_player_info::set_player_sex(::google::protobuf::int32 value) {
  set_has_player_sex();
  player_sex_ = value;
}

// optional int32 vip_level = 7;
inline bool msg_player_info::has_vip_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_player_info::set_has_vip_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_player_info::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_player_info::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 msg_player_info::vip_level() const {
  return vip_level_;
}
inline void msg_player_info::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// -------------------------------------------------------------------

// packetc2l_check_state

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
inline bool packetc2l_check_state::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_check_state::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_check_state::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_check_state::clear_packet_id() {
  packet_id_ = 10001;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetc2l_check_state::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_check_state::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_check_state_result

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
inline bool packetl2c_check_state_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_check_state_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_check_state_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_check_state_result::clear_packet_id() {
  packet_id_ = 15001;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetl2c_check_state_result::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_check_state_result::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 result = 2 [default = 0];
inline bool packetl2c_check_state_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_check_state_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_check_state_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_check_state_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetl2c_check_state_result::result() const {
  return result_;
}
inline void packetl2c_check_state_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_get_scene_info

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
inline bool packetc2l_get_scene_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_scene_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_scene_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_scene_info::clear_packet_id() {
  packet_id_ = 10002;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetc2l_get_scene_info::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_scene_info::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// msg_room_scene_info

// optional bool ready = 1;
inline bool msg_room_scene_info::has_ready() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_room_scene_info::set_has_ready() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_room_scene_info::clear_has_ready() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_room_scene_info::clear_ready() {
  ready_ = false;
  clear_has_ready();
}
inline bool msg_room_scene_info::ready() const {
  return ready_;
}
inline void msg_room_scene_info::set_ready(bool value) {
  set_has_ready();
  ready_ = value;
}

// -------------------------------------------------------------------

// msg_playing_scene_info

// optional int32 banker_chair_id = 1;
inline bool msg_playing_scene_info::has_banker_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_playing_scene_info::set_has_banker_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_playing_scene_info::clear_has_banker_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_playing_scene_info::clear_banker_chair_id() {
  banker_chair_id_ = 0;
  clear_has_banker_chair_id();
}
inline ::google::protobuf::int32 msg_playing_scene_info::banker_chair_id() const {
  return banker_chair_id_;
}
inline void msg_playing_scene_info::set_banker_chair_id(::google::protobuf::int32 value) {
  set_has_banker_chair_id();
  banker_chair_id_ = value;
}

// optional int32 current_user = 2;
inline bool msg_playing_scene_info::has_current_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_playing_scene_info::set_has_current_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_playing_scene_info::clear_has_current_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_playing_scene_info::clear_current_user() {
  current_user_ = 0;
  clear_has_current_user();
}
inline ::google::protobuf::int32 msg_playing_scene_info::current_user() const {
  return current_user_;
}
inline void msg_playing_scene_info::set_current_user(::google::protobuf::int32 value) {
  set_has_current_user();
  current_user_ = value;
}

// optional int32 out_card = 3;
inline bool msg_playing_scene_info::has_out_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_playing_scene_info::set_has_out_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_playing_scene_info::clear_has_out_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_playing_scene_info::clear_out_card() {
  out_card_ = 0;
  clear_has_out_card();
}
inline ::google::protobuf::int32 msg_playing_scene_info::out_card() const {
  return out_card_;
}
inline void msg_playing_scene_info::set_out_card(::google::protobuf::int32 value) {
  set_has_out_card();
  out_card_ = value;
}

// optional int32 action_code = 4;
inline bool msg_playing_scene_info::has_action_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_playing_scene_info::set_has_action_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_playing_scene_info::clear_has_action_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_playing_scene_info::clear_action_code() {
  action_code_ = 0;
  clear_has_action_code();
}
inline ::google::protobuf::int32 msg_playing_scene_info::action_code() const {
  return action_code_;
}
inline void msg_playing_scene_info::set_action_code(::google::protobuf::int32 value) {
  set_has_action_code();
  action_code_ = value;
}

// optional int32 remain_seconds = 5;
inline bool msg_playing_scene_info::has_remain_seconds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_playing_scene_info::set_has_remain_seconds() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_playing_scene_info::clear_has_remain_seconds() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_playing_scene_info::clear_remain_seconds() {
  remain_seconds_ = 0;
  clear_has_remain_seconds();
}
inline ::google::protobuf::int32 msg_playing_scene_info::remain_seconds() const {
  return remain_seconds_;
}
inline void msg_playing_scene_info::set_remain_seconds(::google::protobuf::int32 value) {
  set_has_remain_seconds();
  remain_seconds_ = value;
}

// repeated bool user_trustee = 6;
inline int msg_playing_scene_info::user_trustee_size() const {
  return user_trustee_.size();
}
inline void msg_playing_scene_info::clear_user_trustee() {
  user_trustee_.Clear();
}
inline bool msg_playing_scene_info::user_trustee(int index) const {
  return user_trustee_.Get(index);
}
inline void msg_playing_scene_info::set_user_trustee(int index, bool value) {
  user_trustee_.Set(index, value);
}
inline void msg_playing_scene_info::add_user_trustee(bool value) {
  user_trustee_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
msg_playing_scene_info::user_trustee() const {
  return user_trustee_;
}
inline ::google::protobuf::RepeatedField< bool >*
msg_playing_scene_info::mutable_user_trustee() {
  return &user_trustee_;
}

// repeated .game_srmj_protocols.cards_data hu_cards = 7;
inline int msg_playing_scene_info::hu_cards_size() const {
  return hu_cards_.size();
}
inline void msg_playing_scene_info::clear_hu_cards() {
  hu_cards_.Clear();
}
inline const ::game_srmj_protocols::cards_data& msg_playing_scene_info::hu_cards(int index) const {
  return hu_cards_.Get(index);
}
inline ::game_srmj_protocols::cards_data* msg_playing_scene_info::mutable_hu_cards(int index) {
  return hu_cards_.Mutable(index);
}
inline ::game_srmj_protocols::cards_data* msg_playing_scene_info::add_hu_cards() {
  return hu_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >&
msg_playing_scene_info::hu_cards() const {
  return hu_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >*
msg_playing_scene_info::mutable_hu_cards() {
  return &hu_cards_;
}

// repeated .game_srmj_protocols.cards_data hand_cards = 8;
inline int msg_playing_scene_info::hand_cards_size() const {
  return hand_cards_.size();
}
inline void msg_playing_scene_info::clear_hand_cards() {
  hand_cards_.Clear();
}
inline const ::game_srmj_protocols::cards_data& msg_playing_scene_info::hand_cards(int index) const {
  return hand_cards_.Get(index);
}
inline ::game_srmj_protocols::cards_data* msg_playing_scene_info::mutable_hand_cards(int index) {
  return hand_cards_.Mutable(index);
}
inline ::game_srmj_protocols::cards_data* msg_playing_scene_info::add_hand_cards() {
  return hand_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >&
msg_playing_scene_info::hand_cards() const {
  return hand_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >*
msg_playing_scene_info::mutable_hand_cards() {
  return &hand_cards_;
}

// repeated .game_srmj_protocols.cards_data river_cards = 9;
inline int msg_playing_scene_info::river_cards_size() const {
  return river_cards_.size();
}
inline void msg_playing_scene_info::clear_river_cards() {
  river_cards_.Clear();
}
inline const ::game_srmj_protocols::cards_data& msg_playing_scene_info::river_cards(int index) const {
  return river_cards_.Get(index);
}
inline ::game_srmj_protocols::cards_data* msg_playing_scene_info::mutable_river_cards(int index) {
  return river_cards_.Mutable(index);
}
inline ::game_srmj_protocols::cards_data* msg_playing_scene_info::add_river_cards() {
  return river_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >&
msg_playing_scene_info::river_cards() const {
  return river_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >*
msg_playing_scene_info::mutable_river_cards() {
  return &river_cards_;
}

// repeated .game_srmj_protocols.pile_cards_data pile_cards = 10;
inline int msg_playing_scene_info::pile_cards_size() const {
  return pile_cards_.size();
}
inline void msg_playing_scene_info::clear_pile_cards() {
  pile_cards_.Clear();
}
inline const ::game_srmj_protocols::pile_cards_data& msg_playing_scene_info::pile_cards(int index) const {
  return pile_cards_.Get(index);
}
inline ::game_srmj_protocols::pile_cards_data* msg_playing_scene_info::mutable_pile_cards(int index) {
  return pile_cards_.Mutable(index);
}
inline ::game_srmj_protocols::pile_cards_data* msg_playing_scene_info::add_pile_cards() {
  return pile_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::pile_cards_data >&
msg_playing_scene_info::pile_cards() const {
  return pile_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::pile_cards_data >*
msg_playing_scene_info::mutable_pile_cards() {
  return &pile_cards_;
}

// repeated int32 pass_times = 11;
inline int msg_playing_scene_info::pass_times_size() const {
  return pass_times_.size();
}
inline void msg_playing_scene_info::clear_pass_times() {
  pass_times_.Clear();
}
inline ::google::protobuf::int32 msg_playing_scene_info::pass_times(int index) const {
  return pass_times_.Get(index);
}
inline void msg_playing_scene_info::set_pass_times(int index, ::google::protobuf::int32 value) {
  pass_times_.Set(index, value);
}
inline void msg_playing_scene_info::add_pass_times(::google::protobuf::int32 value) {
  pass_times_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_playing_scene_info::pass_times() const {
  return pass_times_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_playing_scene_info::mutable_pass_times() {
  return &pass_times_;
}

// repeated bool exchanged = 12;
inline int msg_playing_scene_info::exchanged_size() const {
  return exchanged_.size();
}
inline void msg_playing_scene_info::clear_exchanged() {
  exchanged_.Clear();
}
inline bool msg_playing_scene_info::exchanged(int index) const {
  return exchanged_.Get(index);
}
inline void msg_playing_scene_info::set_exchanged(int index, bool value) {
  exchanged_.Set(index, value);
}
inline void msg_playing_scene_info::add_exchanged(bool value) {
  exchanged_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
msg_playing_scene_info::exchanged() const {
  return exchanged_;
}
inline ::google::protobuf::RepeatedField< bool >*
msg_playing_scene_info::mutable_exchanged() {
  return &exchanged_;
}

// repeated int32 vacancy = 13;
inline int msg_playing_scene_info::vacancy_size() const {
  return vacancy_.size();
}
inline void msg_playing_scene_info::clear_vacancy() {
  vacancy_.Clear();
}
inline ::google::protobuf::int32 msg_playing_scene_info::vacancy(int index) const {
  return vacancy_.Get(index);
}
inline void msg_playing_scene_info::set_vacancy(int index, ::google::protobuf::int32 value) {
  vacancy_.Set(index, value);
}
inline void msg_playing_scene_info::add_vacancy(::google::protobuf::int32 value) {
  vacancy_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_playing_scene_info::vacancy() const {
  return vacancy_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_playing_scene_info::mutable_vacancy() {
  return &vacancy_;
}

// optional int32 dice_count = 14;
inline bool msg_playing_scene_info::has_dice_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void msg_playing_scene_info::set_has_dice_count() {
  _has_bits_[0] |= 0x00002000u;
}
inline void msg_playing_scene_info::clear_has_dice_count() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void msg_playing_scene_info::clear_dice_count() {
  dice_count_ = 0;
  clear_has_dice_count();
}
inline ::google::protobuf::int32 msg_playing_scene_info::dice_count() const {
  return dice_count_;
}
inline void msg_playing_scene_info::set_dice_count(::google::protobuf::int32 value) {
  set_has_dice_count();
  dice_count_ = value;
}

// repeated .game_srmj_protocols.win_result hu_list = 15;
inline int msg_playing_scene_info::hu_list_size() const {
  return hu_list_.size();
}
inline void msg_playing_scene_info::clear_hu_list() {
  hu_list_.Clear();
}
inline const ::game_srmj_protocols::win_result& msg_playing_scene_info::hu_list(int index) const {
  return hu_list_.Get(index);
}
inline ::game_srmj_protocols::win_result* msg_playing_scene_info::mutable_hu_list(int index) {
  return hu_list_.Mutable(index);
}
inline ::game_srmj_protocols::win_result* msg_playing_scene_info::add_hu_list() {
  return hu_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::win_result >&
msg_playing_scene_info::hu_list() const {
  return hu_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::win_result >*
msg_playing_scene_info::mutable_hu_list() {
  return &hu_list_;
}

// optional int32 used_card_cnt = 16;
inline bool msg_playing_scene_info::has_used_card_cnt() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void msg_playing_scene_info::set_has_used_card_cnt() {
  _has_bits_[0] |= 0x00008000u;
}
inline void msg_playing_scene_info::clear_has_used_card_cnt() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void msg_playing_scene_info::clear_used_card_cnt() {
  used_card_cnt_ = 0;
  clear_has_used_card_cnt();
}
inline ::google::protobuf::int32 msg_playing_scene_info::used_card_cnt() const {
  return used_card_cnt_;
}
inline void msg_playing_scene_info::set_used_card_cnt(::google::protobuf::int32 value) {
  set_has_used_card_cnt();
  used_card_cnt_ = value;
}

// -------------------------------------------------------------------

// packetl2c_scene_info_result

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_info_result];
inline bool packetl2c_scene_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_scene_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_scene_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_scene_info_result::clear_packet_id() {
  packet_id_ = 15002;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetl2c_scene_info_result::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_scene_info_result::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 room_type = 2;
inline bool packetl2c_scene_info_result::has_room_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_scene_info_result::set_has_room_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_scene_info_result::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_scene_info_result::clear_room_type() {
  room_type_ = 0;
  clear_has_room_type();
}
inline ::google::protobuf::int32 packetl2c_scene_info_result::room_type() const {
  return room_type_;
}
inline void packetl2c_scene_info_result::set_room_type(::google::protobuf::int32 value) {
  set_has_room_type();
  room_type_ = value;
}

// optional .game_srmj_protocols.msg_room_scene_info scene_info1 = 3;
inline bool packetl2c_scene_info_result::has_scene_info1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_scene_info_result::set_has_scene_info1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_scene_info_result::clear_has_scene_info1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_scene_info_result::clear_scene_info1() {
  if (scene_info1_ != NULL) scene_info1_->::game_srmj_protocols::msg_room_scene_info::Clear();
  clear_has_scene_info1();
}
inline const ::game_srmj_protocols::msg_room_scene_info& packetl2c_scene_info_result::scene_info1() const {
  return scene_info1_ != NULL ? *scene_info1_ : *default_instance_->scene_info1_;
}
inline ::game_srmj_protocols::msg_room_scene_info* packetl2c_scene_info_result::mutable_scene_info1() {
  set_has_scene_info1();
  if (scene_info1_ == NULL) scene_info1_ = new ::game_srmj_protocols::msg_room_scene_info;
  return scene_info1_;
}
inline ::game_srmj_protocols::msg_room_scene_info* packetl2c_scene_info_result::release_scene_info1() {
  clear_has_scene_info1();
  ::game_srmj_protocols::msg_room_scene_info* temp = scene_info1_;
  scene_info1_ = NULL;
  return temp;
}
inline void packetl2c_scene_info_result::set_allocated_scene_info1(::game_srmj_protocols::msg_room_scene_info* scene_info1) {
  delete scene_info1_;
  scene_info1_ = scene_info1;
  if (scene_info1) {
    set_has_scene_info1();
  } else {
    clear_has_scene_info1();
  }
}

// optional .game_srmj_protocols.msg_playing_scene_info scene_info3 = 4;
inline bool packetl2c_scene_info_result::has_scene_info3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_scene_info_result::set_has_scene_info3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_scene_info_result::clear_has_scene_info3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_scene_info_result::clear_scene_info3() {
  if (scene_info3_ != NULL) scene_info3_->::game_srmj_protocols::msg_playing_scene_info::Clear();
  clear_has_scene_info3();
}
inline const ::game_srmj_protocols::msg_playing_scene_info& packetl2c_scene_info_result::scene_info3() const {
  return scene_info3_ != NULL ? *scene_info3_ : *default_instance_->scene_info3_;
}
inline ::game_srmj_protocols::msg_playing_scene_info* packetl2c_scene_info_result::mutable_scene_info3() {
  set_has_scene_info3();
  if (scene_info3_ == NULL) scene_info3_ = new ::game_srmj_protocols::msg_playing_scene_info;
  return scene_info3_;
}
inline ::game_srmj_protocols::msg_playing_scene_info* packetl2c_scene_info_result::release_scene_info3() {
  clear_has_scene_info3();
  ::game_srmj_protocols::msg_playing_scene_info* temp = scene_info3_;
  scene_info3_ = NULL;
  return temp;
}
inline void packetl2c_scene_info_result::set_allocated_scene_info3(::game_srmj_protocols::msg_playing_scene_info* scene_info3) {
  delete scene_info3_;
  scene_info3_ = scene_info3;
  if (scene_info3) {
    set_has_scene_info3();
  } else {
    clear_has_scene_info3();
  }
}

// optional int32 info_type = 5;
inline bool packetl2c_scene_info_result::has_info_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_scene_info_result::set_has_info_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_scene_info_result::clear_has_info_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_scene_info_result::clear_info_type() {
  info_type_ = 0;
  clear_has_info_type();
}
inline ::google::protobuf::int32 packetl2c_scene_info_result::info_type() const {
  return info_type_;
}
inline void packetl2c_scene_info_result::set_info_type(::google::protobuf::int32 value) {
  set_has_info_type();
  info_type_ = value;
}

// optional .game_srmj_protocols.packetl2c_game_end scene_info4 = 6;
inline bool packetl2c_scene_info_result::has_scene_info4() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_scene_info_result::set_has_scene_info4() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_scene_info_result::clear_has_scene_info4() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_scene_info_result::clear_scene_info4() {
  if (scene_info4_ != NULL) scene_info4_->::game_srmj_protocols::packetl2c_game_end::Clear();
  clear_has_scene_info4();
}
inline const ::game_srmj_protocols::packetl2c_game_end& packetl2c_scene_info_result::scene_info4() const {
  return scene_info4_ != NULL ? *scene_info4_ : *default_instance_->scene_info4_;
}
inline ::game_srmj_protocols::packetl2c_game_end* packetl2c_scene_info_result::mutable_scene_info4() {
  set_has_scene_info4();
  if (scene_info4_ == NULL) scene_info4_ = new ::game_srmj_protocols::packetl2c_game_end;
  return scene_info4_;
}
inline ::game_srmj_protocols::packetl2c_game_end* packetl2c_scene_info_result::release_scene_info4() {
  clear_has_scene_info4();
  ::game_srmj_protocols::packetl2c_game_end* temp = scene_info4_;
  scene_info4_ = NULL;
  return temp;
}
inline void packetl2c_scene_info_result::set_allocated_scene_info4(::game_srmj_protocols::packetl2c_game_end* scene_info4) {
  delete scene_info4_;
  scene_info4_ = scene_info4;
  if (scene_info4) {
    set_has_scene_info4();
  } else {
    clear_has_scene_info4();
  }
}

// -------------------------------------------------------------------

// packetc2l_enter_room

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
inline bool packetc2l_enter_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_enter_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_enter_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_enter_room::clear_packet_id() {
  packet_id_ = 10009;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetc2l_enter_room::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_enter_room::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 room_type = 2;
inline bool packetc2l_enter_room::has_room_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_enter_room::set_has_room_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_enter_room::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_enter_room::clear_room_type() {
  room_type_ = 0;
  clear_has_room_type();
}
inline ::google::protobuf::int32 packetc2l_enter_room::room_type() const {
  return room_type_;
}
inline void packetc2l_enter_room::set_room_type(::google::protobuf::int32 value) {
  set_has_room_type();
  room_type_ = value;
}

// -------------------------------------------------------------------

// packetl2c_enter_room_result

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
inline bool packetl2c_enter_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_enter_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_enter_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_enter_room_result::clear_packet_id() {
  packet_id_ = 15009;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetl2c_enter_room_result::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_enter_room_result::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_enter_room_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_enter_room_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_enter_room_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_enter_room_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_enter_room_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_enter_room_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_leave_room

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
inline bool packetc2l_leave_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_leave_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_leave_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_leave_room::clear_packet_id() {
  packet_id_ = 10010;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetc2l_leave_room::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_leave_room::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_leave_room_result

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
inline bool packetl2c_leave_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_leave_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_leave_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_leave_room_result::clear_packet_id() {
  packet_id_ = 15010;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetl2c_leave_room_result::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_leave_room_result::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int64 player_gold = 2;
inline bool packetl2c_leave_room_result::has_player_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_leave_room_result::set_has_player_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_leave_room_result::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_leave_room_result::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 packetl2c_leave_room_result::player_gold() const {
  return player_gold_;
}
inline void packetl2c_leave_room_result::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// -------------------------------------------------------------------

// packetc2l_user_trustee

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_user_trustee];
inline bool packetc2l_user_trustee::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_user_trustee::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_user_trustee::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_user_trustee::clear_packet_id() {
  packet_id_ = 10008;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetc2l_user_trustee::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_user_trustee::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional bool trustee = 2;
inline bool packetc2l_user_trustee::has_trustee() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_user_trustee::set_has_trustee() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_user_trustee::clear_has_trustee() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_user_trustee::clear_trustee() {
  trustee_ = false;
  clear_has_trustee();
}
inline bool packetc2l_user_trustee::trustee() const {
  return trustee_;
}
inline void packetc2l_user_trustee::set_trustee(bool value) {
  set_has_trustee();
  trustee_ = value;
}

// -------------------------------------------------------------------

// packetl2c_user_trustee_notify

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_user_trustee];
inline bool packetl2c_user_trustee_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_user_trustee_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_user_trustee_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_user_trustee_notify::clear_packet_id() {
  packet_id_ = 15008;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetl2c_user_trustee_notify::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_user_trustee_notify::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 chair_id = 2;
inline bool packetl2c_user_trustee_notify::has_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_user_trustee_notify::set_has_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_user_trustee_notify::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_user_trustee_notify::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 packetl2c_user_trustee_notify::chair_id() const {
  return chair_id_;
}
inline void packetl2c_user_trustee_notify::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
}

// optional bool trustee = 3;
inline bool packetl2c_user_trustee_notify::has_trustee() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_user_trustee_notify::set_has_trustee() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_user_trustee_notify::clear_has_trustee() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_user_trustee_notify::clear_trustee() {
  trustee_ = false;
  clear_has_trustee();
}
inline bool packetl2c_user_trustee_notify::trustee() const {
  return trustee_;
}
inline void packetl2c_user_trustee_notify::set_trustee(bool value) {
  set_has_trustee();
  trustee_ = value;
}

// optional int32 remain_seconds = 4;
inline bool packetl2c_user_trustee_notify::has_remain_seconds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_user_trustee_notify::set_has_remain_seconds() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_user_trustee_notify::clear_has_remain_seconds() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_user_trustee_notify::clear_remain_seconds() {
  remain_seconds_ = 0;
  clear_has_remain_seconds();
}
inline ::google::protobuf::int32 packetl2c_user_trustee_notify::remain_seconds() const {
  return remain_seconds_;
}
inline void packetl2c_user_trustee_notify::set_remain_seconds(::google::protobuf::int32 value) {
  set_has_remain_seconds();
  remain_seconds_ = value;
}

// -------------------------------------------------------------------

// packetc2l_ready

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ready];
inline bool packetc2l_ready::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_ready::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_ready::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_ready::clear_packet_id() {
  packet_id_ = 10011;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetc2l_ready::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_ready::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional bool change_table = 2;
inline bool packetc2l_ready::has_change_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_ready::set_has_change_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_ready::clear_has_change_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_ready::clear_change_table() {
  change_table_ = false;
  clear_has_change_table();
}
inline bool packetc2l_ready::change_table() const {
  return change_table_;
}
inline void packetc2l_ready::set_change_table(bool value) {
  set_has_change_table();
  change_table_ = value;
}

// -------------------------------------------------------------------

// packetl2c_send_all_playerinfos

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_all_playerinfos];
inline bool packetl2c_send_all_playerinfos::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_send_all_playerinfos::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_send_all_playerinfos::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_send_all_playerinfos::clear_packet_id() {
  packet_id_ = 15017;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetl2c_send_all_playerinfos::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_send_all_playerinfos::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_srmj_protocols.msg_player_info player_info = 2;
inline int packetl2c_send_all_playerinfos::player_info_size() const {
  return player_info_.size();
}
inline void packetl2c_send_all_playerinfos::clear_player_info() {
  player_info_.Clear();
}
inline const ::game_srmj_protocols::msg_player_info& packetl2c_send_all_playerinfos::player_info(int index) const {
  return player_info_.Get(index);
}
inline ::game_srmj_protocols::msg_player_info* packetl2c_send_all_playerinfos::mutable_player_info(int index) {
  return player_info_.Mutable(index);
}
inline ::game_srmj_protocols::msg_player_info* packetl2c_send_all_playerinfos::add_player_info() {
  return player_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::msg_player_info >&
packetl2c_send_all_playerinfos::player_info() const {
  return player_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::msg_player_info >*
packetl2c_send_all_playerinfos::mutable_player_info() {
  return &player_info_;
}

// -------------------------------------------------------------------

// pile_card_data

// optional int32 action_code = 1;
inline bool pile_card_data::has_action_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pile_card_data::set_has_action_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pile_card_data::clear_has_action_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pile_card_data::clear_action_code() {
  action_code_ = 0;
  clear_has_action_code();
}
inline ::google::protobuf::int32 pile_card_data::action_code() const {
  return action_code_;
}
inline void pile_card_data::set_action_code(::google::protobuf::int32 value) {
  set_has_action_code();
  action_code_ = value;
}

// repeated int32 cards = 2;
inline int pile_card_data::cards_size() const {
  return cards_.size();
}
inline void pile_card_data::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 pile_card_data::cards(int index) const {
  return cards_.Get(index);
}
inline void pile_card_data::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
}
inline void pile_card_data::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pile_card_data::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pile_card_data::mutable_cards() {
  return &cards_;
}

// optional bool ming_gang = 3;
inline bool pile_card_data::has_ming_gang() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pile_card_data::set_has_ming_gang() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pile_card_data::clear_has_ming_gang() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pile_card_data::clear_ming_gang() {
  ming_gang_ = false;
  clear_has_ming_gang();
}
inline bool pile_card_data::ming_gang() const {
  return ming_gang_;
}
inline void pile_card_data::set_ming_gang(bool value) {
  set_has_ming_gang();
  ming_gang_ = value;
}

// optional bool jia_gang = 4;
inline bool pile_card_data::has_jia_gang() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pile_card_data::set_has_jia_gang() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pile_card_data::clear_has_jia_gang() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pile_card_data::clear_jia_gang() {
  jia_gang_ = false;
  clear_has_jia_gang();
}
inline bool pile_card_data::jia_gang() const {
  return jia_gang_;
}
inline void pile_card_data::set_jia_gang(bool value) {
  set_has_jia_gang();
  jia_gang_ = value;
}

// optional int32 provider = 5;
inline bool pile_card_data::has_provider() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pile_card_data::set_has_provider() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pile_card_data::clear_has_provider() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pile_card_data::clear_provider() {
  provider_ = 0;
  clear_has_provider();
}
inline ::google::protobuf::int32 pile_card_data::provider() const {
  return provider_;
}
inline void pile_card_data::set_provider(::google::protobuf::int32 value) {
  set_has_provider();
  provider_ = value;
}

// -------------------------------------------------------------------

// pile_cards_data

// repeated .game_srmj_protocols.pile_card_data card = 1;
inline int pile_cards_data::card_size() const {
  return card_.size();
}
inline void pile_cards_data::clear_card() {
  card_.Clear();
}
inline const ::game_srmj_protocols::pile_card_data& pile_cards_data::card(int index) const {
  return card_.Get(index);
}
inline ::game_srmj_protocols::pile_card_data* pile_cards_data::mutable_card(int index) {
  return card_.Mutable(index);
}
inline ::game_srmj_protocols::pile_card_data* pile_cards_data::add_card() {
  return card_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::pile_card_data >&
pile_cards_data::card() const {
  return card_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::pile_card_data >*
pile_cards_data::mutable_card() {
  return &card_;
}

// -------------------------------------------------------------------

// card_data

// optional int32 card_id = 1;
inline bool card_data::has_card_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void card_data::set_has_card_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void card_data::clear_has_card_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void card_data::clear_card_id() {
  card_id_ = 0;
  clear_has_card_id();
}
inline ::google::protobuf::int32 card_data::card_id() const {
  return card_id_;
}
inline void card_data::set_card_id(::google::protobuf::int32 value) {
  set_has_card_id();
  card_id_ = value;
}

// optional int32 card_val = 2;
inline bool card_data::has_card_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void card_data::set_has_card_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void card_data::clear_has_card_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void card_data::clear_card_val() {
  card_val_ = 0;
  clear_has_card_val();
}
inline ::google::protobuf::int32 card_data::card_val() const {
  return card_val_;
}
inline void card_data::set_card_val(::google::protobuf::int32 value) {
  set_has_card_val();
  card_val_ = value;
}

// -------------------------------------------------------------------

// cards_data

// repeated .game_srmj_protocols.card_data card = 1;
inline int cards_data::card_size() const {
  return card_.size();
}
inline void cards_data::clear_card() {
  card_.Clear();
}
inline const ::game_srmj_protocols::card_data& cards_data::card(int index) const {
  return card_.Get(index);
}
inline ::game_srmj_protocols::card_data* cards_data::mutable_card(int index) {
  return card_.Mutable(index);
}
inline ::game_srmj_protocols::card_data* cards_data::add_card() {
  return card_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::card_data >&
cards_data::card() const {
  return card_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::card_data >*
cards_data::mutable_card() {
  return &card_;
}

// -------------------------------------------------------------------

// packetl2c_game_start

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
inline bool packetl2c_game_start::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_game_start::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_game_start::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_game_start::clear_packet_id() {
  packet_id_ = 15013;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetl2c_game_start::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_game_start::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 dice_count = 2;
inline bool packetl2c_game_start::has_dice_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_game_start::set_has_dice_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_game_start::clear_has_dice_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_game_start::clear_dice_count() {
  dice_count_ = 0;
  clear_has_dice_count();
}
inline ::google::protobuf::int32 packetl2c_game_start::dice_count() const {
  return dice_count_;
}
inline void packetl2c_game_start::set_dice_count(::google::protobuf::int32 value) {
  set_has_dice_count();
  dice_count_ = value;
}

// optional int32 banker_user = 3;
inline bool packetl2c_game_start::has_banker_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_game_start::set_has_banker_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_game_start::clear_has_banker_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_game_start::clear_banker_user() {
  banker_user_ = 0;
  clear_has_banker_user();
}
inline ::google::protobuf::int32 packetl2c_game_start::banker_user() const {
  return banker_user_;
}
inline void packetl2c_game_start::set_banker_user(::google::protobuf::int32 value) {
  set_has_banker_user();
  banker_user_ = value;
}

// repeated .game_srmj_protocols.cards_data cards = 5;
inline int packetl2c_game_start::cards_size() const {
  return cards_.size();
}
inline void packetl2c_game_start::clear_cards() {
  cards_.Clear();
}
inline const ::game_srmj_protocols::cards_data& packetl2c_game_start::cards(int index) const {
  return cards_.Get(index);
}
inline ::game_srmj_protocols::cards_data* packetl2c_game_start::mutable_cards(int index) {
  return cards_.Mutable(index);
}
inline ::game_srmj_protocols::cards_data* packetl2c_game_start::add_cards() {
  return cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >&
packetl2c_game_start::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >*
packetl2c_game_start::mutable_cards() {
  return &cards_;
}

// -------------------------------------------------------------------

// packetc2l_out_card

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_out_card];
inline bool packetc2l_out_card::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_out_card::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_out_card::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_out_card::clear_packet_id() {
  packet_id_ = 10013;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetc2l_out_card::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_out_card::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 card_id = 2;
inline bool packetc2l_out_card::has_card_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_out_card::set_has_card_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_out_card::clear_has_card_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_out_card::clear_card_id() {
  card_id_ = 0;
  clear_has_card_id();
}
inline ::google::protobuf::int32 packetc2l_out_card::card_id() const {
  return card_id_;
}
inline void packetc2l_out_card::set_card_id(::google::protobuf::int32 value) {
  set_has_card_id();
  card_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_out_card_notify

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_out_card_notify];
inline bool packetl2c_out_card_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_out_card_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_out_card_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_out_card_notify::clear_packet_id() {
  packet_id_ = 15014;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetl2c_out_card_notify::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_out_card_notify::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 action_user = 2;
inline bool packetl2c_out_card_notify::has_action_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_out_card_notify::set_has_action_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_out_card_notify::clear_has_action_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_out_card_notify::clear_action_user() {
  action_user_ = 0;
  clear_has_action_user();
}
inline ::google::protobuf::int32 packetl2c_out_card_notify::action_user() const {
  return action_user_;
}
inline void packetl2c_out_card_notify::set_action_user(::google::protobuf::int32 value) {
  set_has_action_user();
  action_user_ = value;
}

// optional .game_srmj_protocols.card_data card = 3;
inline bool packetl2c_out_card_notify::has_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_out_card_notify::set_has_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_out_card_notify::clear_has_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_out_card_notify::clear_card() {
  if (card_ != NULL) card_->::game_srmj_protocols::card_data::Clear();
  clear_has_card();
}
inline const ::game_srmj_protocols::card_data& packetl2c_out_card_notify::card() const {
  return card_ != NULL ? *card_ : *default_instance_->card_;
}
inline ::game_srmj_protocols::card_data* packetl2c_out_card_notify::mutable_card() {
  set_has_card();
  if (card_ == NULL) card_ = new ::game_srmj_protocols::card_data;
  return card_;
}
inline ::game_srmj_protocols::card_data* packetl2c_out_card_notify::release_card() {
  clear_has_card();
  ::game_srmj_protocols::card_data* temp = card_;
  card_ = NULL;
  return temp;
}
inline void packetl2c_out_card_notify::set_allocated_card(::game_srmj_protocols::card_data* card) {
  delete card_;
  card_ = card;
  if (card) {
    set_has_card();
  } else {
    clear_has_card();
  }
}

// -------------------------------------------------------------------

// packetl2c_operate_notify

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_operate_notify];
inline bool packetl2c_operate_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_operate_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_operate_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_operate_notify::clear_packet_id() {
  packet_id_ = 15015;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetl2c_operate_notify::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_operate_notify::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 user_action = 2;
inline bool packetl2c_operate_notify::has_user_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_operate_notify::set_has_user_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_operate_notify::clear_has_user_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_operate_notify::clear_user_action() {
  user_action_ = 0;
  clear_has_user_action();
}
inline ::google::protobuf::int32 packetl2c_operate_notify::user_action() const {
  return user_action_;
}
inline void packetl2c_operate_notify::set_user_action(::google::protobuf::int32 value) {
  set_has_user_action();
  user_action_ = value;
}

// optional int32 card_val = 3;
inline bool packetl2c_operate_notify::has_card_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_operate_notify::set_has_card_val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_operate_notify::clear_has_card_val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_operate_notify::clear_card_val() {
  card_val_ = 0;
  clear_has_card_val();
}
inline ::google::protobuf::int32 packetl2c_operate_notify::card_val() const {
  return card_val_;
}
inline void packetl2c_operate_notify::set_card_val(::google::protobuf::int32 value) {
  set_has_card_val();
  card_val_ = value;
}

// -------------------------------------------------------------------

// packetc2l_operate_card

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_operate_card];
inline bool packetc2l_operate_card::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_operate_card::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_operate_card::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_operate_card::clear_packet_id() {
  packet_id_ = 10014;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetc2l_operate_card::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_operate_card::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 user_action = 2;
inline bool packetc2l_operate_card::has_user_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_operate_card::set_has_user_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_operate_card::clear_has_user_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_operate_card::clear_user_action() {
  user_action_ = 0;
  clear_has_user_action();
}
inline ::google::protobuf::int32 packetc2l_operate_card::user_action() const {
  return user_action_;
}
inline void packetc2l_operate_card::set_user_action(::google::protobuf::int32 value) {
  set_has_user_action();
  user_action_ = value;
}

// optional int32 card_id = 3;
inline bool packetc2l_operate_card::has_card_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_operate_card::set_has_card_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_operate_card::clear_has_card_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_operate_card::clear_card_id() {
  card_id_ = 0;
  clear_has_card_id();
}
inline ::google::protobuf::int32 packetc2l_operate_card::card_id() const {
  return card_id_;
}
inline void packetc2l_operate_card::set_card_id(::google::protobuf::int32 value) {
  set_has_card_id();
  card_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_operate_result

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_operate_result];
inline bool packetl2c_operate_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_operate_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_operate_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_operate_result::clear_packet_id() {
  packet_id_ = 15019;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetl2c_operate_result::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_operate_result::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 action_user = 2;
inline bool packetl2c_operate_result::has_action_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_operate_result::set_has_action_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_operate_result::clear_has_action_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_operate_result::clear_action_user() {
  action_user_ = 0;
  clear_has_action_user();
}
inline ::google::protobuf::int32 packetl2c_operate_result::action_user() const {
  return action_user_;
}
inline void packetl2c_operate_result::set_action_user(::google::protobuf::int32 value) {
  set_has_action_user();
  action_user_ = value;
}

// optional int32 user_action = 3;
inline bool packetl2c_operate_result::has_user_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_operate_result::set_has_user_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_operate_result::clear_has_user_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_operate_result::clear_user_action() {
  user_action_ = 0;
  clear_has_user_action();
}
inline ::google::protobuf::int32 packetl2c_operate_result::user_action() const {
  return user_action_;
}
inline void packetl2c_operate_result::set_user_action(::google::protobuf::int32 value) {
  set_has_user_action();
  user_action_ = value;
}

// optional int32 provide_user = 4;
inline bool packetl2c_operate_result::has_provide_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_operate_result::set_has_provide_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_operate_result::clear_has_provide_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_operate_result::clear_provide_user() {
  provide_user_ = 0;
  clear_has_provide_user();
}
inline ::google::protobuf::int32 packetl2c_operate_result::provide_user() const {
  return provide_user_;
}
inline void packetl2c_operate_result::set_provide_user(::google::protobuf::int32 value) {
  set_has_provide_user();
  provide_user_ = value;
}

// optional int32 card_val = 5;
inline bool packetl2c_operate_result::has_card_val() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_operate_result::set_has_card_val() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_operate_result::clear_has_card_val() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_operate_result::clear_card_val() {
  card_val_ = 0;
  clear_has_card_val();
}
inline ::google::protobuf::int32 packetl2c_operate_result::card_val() const {
  return card_val_;
}
inline void packetl2c_operate_result::set_card_val(::google::protobuf::int32 value) {
  set_has_card_val();
  card_val_ = value;
}

// repeated .game_srmj_protocols.card_data pile_cards = 6;
inline int packetl2c_operate_result::pile_cards_size() const {
  return pile_cards_.size();
}
inline void packetl2c_operate_result::clear_pile_cards() {
  pile_cards_.Clear();
}
inline const ::game_srmj_protocols::card_data& packetl2c_operate_result::pile_cards(int index) const {
  return pile_cards_.Get(index);
}
inline ::game_srmj_protocols::card_data* packetl2c_operate_result::mutable_pile_cards(int index) {
  return pile_cards_.Mutable(index);
}
inline ::game_srmj_protocols::card_data* packetl2c_operate_result::add_pile_cards() {
  return pile_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::card_data >&
packetl2c_operate_result::pile_cards() const {
  return pile_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::card_data >*
packetl2c_operate_result::mutable_pile_cards() {
  return &pile_cards_;
}

// optional .game_srmj_protocols.win_result hu_data = 7;
inline bool packetl2c_operate_result::has_hu_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetl2c_operate_result::set_has_hu_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetl2c_operate_result::clear_has_hu_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetl2c_operate_result::clear_hu_data() {
  if (hu_data_ != NULL) hu_data_->::game_srmj_protocols::win_result::Clear();
  clear_has_hu_data();
}
inline const ::game_srmj_protocols::win_result& packetl2c_operate_result::hu_data() const {
  return hu_data_ != NULL ? *hu_data_ : *default_instance_->hu_data_;
}
inline ::game_srmj_protocols::win_result* packetl2c_operate_result::mutable_hu_data() {
  set_has_hu_data();
  if (hu_data_ == NULL) hu_data_ = new ::game_srmj_protocols::win_result;
  return hu_data_;
}
inline ::game_srmj_protocols::win_result* packetl2c_operate_result::release_hu_data() {
  clear_has_hu_data();
  ::game_srmj_protocols::win_result* temp = hu_data_;
  hu_data_ = NULL;
  return temp;
}
inline void packetl2c_operate_result::set_allocated_hu_data(::game_srmj_protocols::win_result* hu_data) {
  delete hu_data_;
  hu_data_ = hu_data;
  if (hu_data) {
    set_has_hu_data();
  } else {
    clear_has_hu_data();
  }
}

// -------------------------------------------------------------------

// packetl2c_add_win_list

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_add_win_list];
inline bool packetl2c_add_win_list::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_add_win_list::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_add_win_list::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_add_win_list::clear_packet_id() {
  packet_id_ = 15027;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetl2c_add_win_list::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_add_win_list::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_srmj_protocols.win_result hu_data = 2;
inline bool packetl2c_add_win_list::has_hu_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_add_win_list::set_has_hu_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_add_win_list::clear_has_hu_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_add_win_list::clear_hu_data() {
  if (hu_data_ != NULL) hu_data_->::game_srmj_protocols::win_result::Clear();
  clear_has_hu_data();
}
inline const ::game_srmj_protocols::win_result& packetl2c_add_win_list::hu_data() const {
  return hu_data_ != NULL ? *hu_data_ : *default_instance_->hu_data_;
}
inline ::game_srmj_protocols::win_result* packetl2c_add_win_list::mutable_hu_data() {
  set_has_hu_data();
  if (hu_data_ == NULL) hu_data_ = new ::game_srmj_protocols::win_result;
  return hu_data_;
}
inline ::game_srmj_protocols::win_result* packetl2c_add_win_list::release_hu_data() {
  clear_has_hu_data();
  ::game_srmj_protocols::win_result* temp = hu_data_;
  hu_data_ = NULL;
  return temp;
}
inline void packetl2c_add_win_list::set_allocated_hu_data(::game_srmj_protocols::win_result* hu_data) {
  delete hu_data_;
  hu_data_ = hu_data;
  if (hu_data) {
    set_has_hu_data();
  } else {
    clear_has_hu_data();
  }
}

// -------------------------------------------------------------------

// packetl2c_send_card

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_card];
inline bool packetl2c_send_card::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_send_card::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_send_card::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_send_card::clear_packet_id() {
  packet_id_ = 15020;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetl2c_send_card::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_send_card::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 current_user = 2;
inline bool packetl2c_send_card::has_current_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_send_card::set_has_current_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_send_card::clear_has_current_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_send_card::clear_current_user() {
  current_user_ = 0;
  clear_has_current_user();
}
inline ::google::protobuf::int32 packetl2c_send_card::current_user() const {
  return current_user_;
}
inline void packetl2c_send_card::set_current_user(::google::protobuf::int32 value) {
  set_has_current_user();
  current_user_ = value;
}

// optional .game_srmj_protocols.card_data card = 3;
inline bool packetl2c_send_card::has_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_send_card::set_has_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_send_card::clear_has_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_send_card::clear_card() {
  if (card_ != NULL) card_->::game_srmj_protocols::card_data::Clear();
  clear_has_card();
}
inline const ::game_srmj_protocols::card_data& packetl2c_send_card::card() const {
  return card_ != NULL ? *card_ : *default_instance_->card_;
}
inline ::game_srmj_protocols::card_data* packetl2c_send_card::mutable_card() {
  set_has_card();
  if (card_ == NULL) card_ = new ::game_srmj_protocols::card_data;
  return card_;
}
inline ::game_srmj_protocols::card_data* packetl2c_send_card::release_card() {
  clear_has_card();
  ::game_srmj_protocols::card_data* temp = card_;
  card_ = NULL;
  return temp;
}
inline void packetl2c_send_card::set_allocated_card(::game_srmj_protocols::card_data* card) {
  delete card_;
  card_ = card;
  if (card) {
    set_has_card();
  } else {
    clear_has_card();
  }
}

// -------------------------------------------------------------------

// lose_result

// optional int32 lose_idx = 1;
inline bool lose_result::has_lose_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void lose_result::set_has_lose_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void lose_result::clear_has_lose_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void lose_result::clear_lose_idx() {
  lose_idx_ = 0;
  clear_has_lose_idx();
}
inline ::google::protobuf::int32 lose_result::lose_idx() const {
  return lose_idx_;
}
inline void lose_result::set_lose_idx(::google::protobuf::int32 value) {
  set_has_lose_idx();
  lose_idx_ = value;
}

// optional int32 lose_account = 2;
inline bool lose_result::has_lose_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void lose_result::set_has_lose_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void lose_result::clear_has_lose_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void lose_result::clear_lose_account() {
  lose_account_ = 0;
  clear_has_lose_account();
}
inline ::google::protobuf::int32 lose_result::lose_account() const {
  return lose_account_;
}
inline void lose_result::set_lose_account(::google::protobuf::int32 value) {
  set_has_lose_account();
  lose_account_ = value;
}

// optional bool lose_limited = 3;
inline bool lose_result::has_lose_limited() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void lose_result::set_has_lose_limited() {
  _has_bits_[0] |= 0x00000004u;
}
inline void lose_result::clear_has_lose_limited() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void lose_result::clear_lose_limited() {
  lose_limited_ = false;
  clear_has_lose_limited();
}
inline bool lose_result::lose_limited() const {
  return lose_limited_;
}
inline void lose_result::set_lose_limited(bool value) {
  set_has_lose_limited();
  lose_limited_ = value;
}

// -------------------------------------------------------------------

// win_result

// optional int32 win_idx = 1;
inline bool win_result::has_win_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void win_result::set_has_win_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void win_result::clear_has_win_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void win_result::clear_win_idx() {
  win_idx_ = 0;
  clear_has_win_idx();
}
inline ::google::protobuf::int32 win_result::win_idx() const {
  return win_idx_;
}
inline void win_result::set_win_idx(::google::protobuf::int32 value) {
  set_has_win_idx();
  win_idx_ = value;
}

// optional int32 win_account = 2;
inline bool win_result::has_win_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void win_result::set_has_win_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void win_result::clear_has_win_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void win_result::clear_win_account() {
  win_account_ = 0;
  clear_has_win_account();
}
inline ::google::protobuf::int32 win_result::win_account() const {
  return win_account_;
}
inline void win_result::set_win_account(::google::protobuf::int32 value) {
  set_has_win_account();
  win_account_ = value;
}

// optional bool win_limited = 3;
inline bool win_result::has_win_limited() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void win_result::set_has_win_limited() {
  _has_bits_[0] |= 0x00000004u;
}
inline void win_result::clear_has_win_limited() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void win_result::clear_win_limited() {
  win_limited_ = false;
  clear_has_win_limited();
}
inline bool win_result::win_limited() const {
  return win_limited_;
}
inline void win_result::set_win_limited(bool value) {
  set_has_win_limited();
  win_limited_ = value;
}

// repeated .game_srmj_protocols.lose_result lose = 4;
inline int win_result::lose_size() const {
  return lose_.size();
}
inline void win_result::clear_lose() {
  lose_.Clear();
}
inline const ::game_srmj_protocols::lose_result& win_result::lose(int index) const {
  return lose_.Get(index);
}
inline ::game_srmj_protocols::lose_result* win_result::mutable_lose(int index) {
  return lose_.Mutable(index);
}
inline ::game_srmj_protocols::lose_result* win_result::add_lose() {
  return lose_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::lose_result >&
win_result::lose() const {
  return lose_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::lose_result >*
win_result::mutable_lose() {
  return &lose_;
}

// optional int32 fan_cnt = 5;
inline bool win_result::has_fan_cnt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void win_result::set_has_fan_cnt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void win_result::clear_has_fan_cnt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void win_result::clear_fan_cnt() {
  fan_cnt_ = 0;
  clear_has_fan_cnt();
}
inline ::google::protobuf::int32 win_result::fan_cnt() const {
  return fan_cnt_;
}
inline void win_result::set_fan_cnt(::google::protobuf::int32 value) {
  set_has_fan_cnt();
  fan_cnt_ = value;
}

// repeated uint32 result1 = 6;
inline int win_result::result1_size() const {
  return result1_.size();
}
inline void win_result::clear_result1() {
  result1_.Clear();
}
inline ::google::protobuf::uint32 win_result::result1(int index) const {
  return result1_.Get(index);
}
inline void win_result::set_result1(int index, ::google::protobuf::uint32 value) {
  result1_.Set(index, value);
}
inline void win_result::add_result1(::google::protobuf::uint32 value) {
  result1_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
win_result::result1() const {
  return result1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
win_result::mutable_result1() {
  return &result1_;
}

// repeated uint32 result2 = 7;
inline int win_result::result2_size() const {
  return result2_.size();
}
inline void win_result::clear_result2() {
  result2_.Clear();
}
inline ::google::protobuf::uint32 win_result::result2(int index) const {
  return result2_.Get(index);
}
inline void win_result::set_result2(int index, ::google::protobuf::uint32 value) {
  result2_.Set(index, value);
}
inline void win_result::add_result2(::google::protobuf::uint32 value) {
  result2_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
win_result::result2() const {
  return result2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
win_result::mutable_result2() {
  return &result2_;
}

// repeated uint32 result3 = 8;
inline int win_result::result3_size() const {
  return result3_.size();
}
inline void win_result::clear_result3() {
  result3_.Clear();
}
inline ::google::protobuf::uint32 win_result::result3(int index) const {
  return result3_.Get(index);
}
inline void win_result::set_result3(int index, ::google::protobuf::uint32 value) {
  result3_.Set(index, value);
}
inline void win_result::add_result3(::google::protobuf::uint32 value) {
  result3_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
win_result::result3() const {
  return result3_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
win_result::mutable_result3() {
  return &result3_;
}

// optional int32 win_root_cnt = 9;
inline bool win_result::has_win_root_cnt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void win_result::set_has_win_root_cnt() {
  _has_bits_[0] |= 0x00000100u;
}
inline void win_result::clear_has_win_root_cnt() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void win_result::clear_win_root_cnt() {
  win_root_cnt_ = 0;
  clear_has_win_root_cnt();
}
inline ::google::protobuf::int32 win_result::win_root_cnt() const {
  return win_root_cnt_;
}
inline void win_result::set_win_root_cnt(::google::protobuf::int32 value) {
  set_has_win_root_cnt();
  win_root_cnt_ = value;
}

// optional int32 user_action = 10;
inline bool win_result::has_user_action() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void win_result::set_has_user_action() {
  _has_bits_[0] |= 0x00000200u;
}
inline void win_result::clear_has_user_action() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void win_result::clear_user_action() {
  user_action_ = 0;
  clear_has_user_action();
}
inline ::google::protobuf::int32 win_result::user_action() const {
  return user_action_;
}
inline void win_result::set_user_action(::google::protobuf::int32 value) {
  set_has_user_action();
  user_action_ = value;
}

// -------------------------------------------------------------------

// packetl2c_game_end

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end];
inline bool packetl2c_game_end::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_game_end::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_game_end::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_game_end::clear_packet_id() {
  packet_id_ = 15016;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetl2c_game_end::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_game_end::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated int32 game_score = 3;
inline int packetl2c_game_end::game_score_size() const {
  return game_score_.size();
}
inline void packetl2c_game_end::clear_game_score() {
  game_score_.Clear();
}
inline ::google::protobuf::int32 packetl2c_game_end::game_score(int index) const {
  return game_score_.Get(index);
}
inline void packetl2c_game_end::set_game_score(int index, ::google::protobuf::int32 value) {
  game_score_.Set(index, value);
}
inline void packetl2c_game_end::add_game_score(::google::protobuf::int32 value) {
  game_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_game_end::game_score() const {
  return game_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_game_end::mutable_game_score() {
  return &game_score_;
}

// repeated int32 win_account = 4;
inline int packetl2c_game_end::win_account_size() const {
  return win_account_.size();
}
inline void packetl2c_game_end::clear_win_account() {
  win_account_.Clear();
}
inline ::google::protobuf::int32 packetl2c_game_end::win_account(int index) const {
  return win_account_.Get(index);
}
inline void packetl2c_game_end::set_win_account(int index, ::google::protobuf::int32 value) {
  win_account_.Set(index, value);
}
inline void packetl2c_game_end::add_win_account(::google::protobuf::int32 value) {
  win_account_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_game_end::win_account() const {
  return win_account_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_game_end::mutable_win_account() {
  return &win_account_;
}

// repeated int32 win_fee = 5;
inline int packetl2c_game_end::win_fee_size() const {
  return win_fee_.size();
}
inline void packetl2c_game_end::clear_win_fee() {
  win_fee_.Clear();
}
inline ::google::protobuf::int32 packetl2c_game_end::win_fee(int index) const {
  return win_fee_.Get(index);
}
inline void packetl2c_game_end::set_win_fee(int index, ::google::protobuf::int32 value) {
  win_fee_.Set(index, value);
}
inline void packetl2c_game_end::add_win_fee(::google::protobuf::int32 value) {
  win_fee_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_game_end::win_fee() const {
  return win_fee_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_game_end::mutable_win_fee() {
  return &win_fee_;
}

// repeated .game_srmj_protocols.cards_data hand_cards = 6;
inline int packetl2c_game_end::hand_cards_size() const {
  return hand_cards_.size();
}
inline void packetl2c_game_end::clear_hand_cards() {
  hand_cards_.Clear();
}
inline const ::game_srmj_protocols::cards_data& packetl2c_game_end::hand_cards(int index) const {
  return hand_cards_.Get(index);
}
inline ::game_srmj_protocols::cards_data* packetl2c_game_end::mutable_hand_cards(int index) {
  return hand_cards_.Mutable(index);
}
inline ::game_srmj_protocols::cards_data* packetl2c_game_end::add_hand_cards() {
  return hand_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >&
packetl2c_game_end::hand_cards() const {
  return hand_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >*
packetl2c_game_end::mutable_hand_cards() {
  return &hand_cards_;
}

// repeated .game_srmj_protocols.pile_cards_data pile_cards = 7;
inline int packetl2c_game_end::pile_cards_size() const {
  return pile_cards_.size();
}
inline void packetl2c_game_end::clear_pile_cards() {
  pile_cards_.Clear();
}
inline const ::game_srmj_protocols::pile_cards_data& packetl2c_game_end::pile_cards(int index) const {
  return pile_cards_.Get(index);
}
inline ::game_srmj_protocols::pile_cards_data* packetl2c_game_end::mutable_pile_cards(int index) {
  return pile_cards_.Mutable(index);
}
inline ::game_srmj_protocols::pile_cards_data* packetl2c_game_end::add_pile_cards() {
  return pile_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::pile_cards_data >&
packetl2c_game_end::pile_cards() const {
  return pile_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::pile_cards_data >*
packetl2c_game_end::mutable_pile_cards() {
  return &pile_cards_;
}

// repeated .game_srmj_protocols.cards_data hu_cards = 8;
inline int packetl2c_game_end::hu_cards_size() const {
  return hu_cards_.size();
}
inline void packetl2c_game_end::clear_hu_cards() {
  hu_cards_.Clear();
}
inline const ::game_srmj_protocols::cards_data& packetl2c_game_end::hu_cards(int index) const {
  return hu_cards_.Get(index);
}
inline ::game_srmj_protocols::cards_data* packetl2c_game_end::mutable_hu_cards(int index) {
  return hu_cards_.Mutable(index);
}
inline ::game_srmj_protocols::cards_data* packetl2c_game_end::add_hu_cards() {
  return hu_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >&
packetl2c_game_end::hu_cards() const {
  return hu_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::cards_data >*
packetl2c_game_end::mutable_hu_cards() {
  return &hu_cards_;
}

// repeated .game_srmj_protocols.win_result hu_list = 9;
inline int packetl2c_game_end::hu_list_size() const {
  return hu_list_.size();
}
inline void packetl2c_game_end::clear_hu_list() {
  hu_list_.Clear();
}
inline const ::game_srmj_protocols::win_result& packetl2c_game_end::hu_list(int index) const {
  return hu_list_.Get(index);
}
inline ::game_srmj_protocols::win_result* packetl2c_game_end::mutable_hu_list(int index) {
  return hu_list_.Mutable(index);
}
inline ::game_srmj_protocols::win_result* packetl2c_game_end::add_hu_list() {
  return hu_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::win_result >&
packetl2c_game_end::hu_list() const {
  return hu_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::win_result >*
packetl2c_game_end::mutable_hu_list() {
  return &hu_list_;
}

// -------------------------------------------------------------------

// packetl2c_game_notify

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_notify];
inline bool packetl2c_game_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_game_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_game_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_game_notify::clear_packet_id() {
  packet_id_ = 15018;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetl2c_game_notify::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_game_notify::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_srmj_protocols.e_notify_type notify_type = 2;
inline bool packetl2c_game_notify::has_notify_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_game_notify::set_has_notify_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_game_notify::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_game_notify::clear_notify_type() {
  notify_type_ = 1;
  clear_has_notify_type();
}
inline ::game_srmj_protocols::e_notify_type packetl2c_game_notify::notify_type() const {
  return static_cast< ::game_srmj_protocols::e_notify_type >(notify_type_);
}
inline void packetl2c_game_notify::set_notify_type(::game_srmj_protocols::e_notify_type value) {
  assert(::game_srmj_protocols::e_notify_type_IsValid(value));
  set_has_notify_type();
  notify_type_ = value;
}

// optional int32 notify_param = 3;
inline bool packetl2c_game_notify::has_notify_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_game_notify::set_has_notify_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_game_notify::clear_has_notify_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_game_notify::clear_notify_param() {
  notify_param_ = 0;
  clear_has_notify_param();
}
inline ::google::protobuf::int32 packetl2c_game_notify::notify_param() const {
  return notify_param_;
}
inline void packetl2c_game_notify::set_notify_param(::google::protobuf::int32 value) {
  set_has_notify_param();
  notify_param_ = value;
}

// -------------------------------------------------------------------

// gm_player_info

// optional int32 player_id = 1;
inline bool gm_player_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gm_player_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gm_player_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gm_player_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 gm_player_info::player_id() const {
  return player_id_;
}
inline void gm_player_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string player_name = 2;
inline bool gm_player_info::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gm_player_info::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gm_player_info::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gm_player_info::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& gm_player_info::player_name() const {
  return *player_name_;
}
inline void gm_player_info::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void gm_player_info::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void gm_player_info::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gm_player_info::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* gm_player_info::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gm_player_info::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 player_gold = 3;
inline bool gm_player_info::has_player_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gm_player_info::set_has_player_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gm_player_info::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gm_player_info::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 gm_player_info::player_gold() const {
  return player_gold_;
}
inline void gm_player_info::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// optional int32 player_room = 4;
inline bool gm_player_info::has_player_room() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gm_player_info::set_has_player_room() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gm_player_info::clear_has_player_room() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gm_player_info::clear_player_room() {
  player_room_ = 0;
  clear_has_player_room();
}
inline ::google::protobuf::int32 gm_player_info::player_room() const {
  return player_room_;
}
inline void gm_player_info::set_player_room(::google::protobuf::int32 value) {
  set_has_player_room();
  player_room_ = value;
}

// optional int64 player_profit = 5;
inline bool gm_player_info::has_player_profit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gm_player_info::set_has_player_profit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gm_player_info::clear_has_player_profit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gm_player_info::clear_player_profit() {
  player_profit_ = GOOGLE_LONGLONG(0);
  clear_has_player_profit();
}
inline ::google::protobuf::int64 gm_player_info::player_profit() const {
  return player_profit_;
}
inline void gm_player_info::set_player_profit(::google::protobuf::int64 value) {
  set_has_player_profit();
  player_profit_ = value;
}

// optional int64 player_kill_type = 6;
inline bool gm_player_info::has_player_kill_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gm_player_info::set_has_player_kill_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gm_player_info::clear_has_player_kill_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gm_player_info::clear_player_kill_type() {
  player_kill_type_ = GOOGLE_LONGLONG(0);
  clear_has_player_kill_type();
}
inline ::google::protobuf::int64 gm_player_info::player_kill_type() const {
  return player_kill_type_;
}
inline void gm_player_info::set_player_kill_type(::google::protobuf::int64 value) {
  set_has_player_kill_type();
  player_kill_type_ = value;
}

// optional int64 player_kill_cnt = 7;
inline bool gm_player_info::has_player_kill_cnt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gm_player_info::set_has_player_kill_cnt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gm_player_info::clear_has_player_kill_cnt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gm_player_info::clear_player_kill_cnt() {
  player_kill_cnt_ = GOOGLE_LONGLONG(0);
  clear_has_player_kill_cnt();
}
inline ::google::protobuf::int64 gm_player_info::player_kill_cnt() const {
  return player_kill_cnt_;
}
inline void gm_player_info::set_player_kill_cnt(::google::protobuf::int64 value) {
  set_has_player_kill_cnt();
  player_kill_cnt_ = value;
}

// -------------------------------------------------------------------

// packetc2l_gm_list

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_list];
inline bool packetc2l_gm_list::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_gm_list::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_gm_list::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_gm_list::clear_packet_id() {
  packet_id_ = 10015;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetc2l_gm_list::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_gm_list::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 hours = 2;
inline bool packetc2l_gm_list::has_hours() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_gm_list::set_has_hours() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_gm_list::clear_has_hours() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_gm_list::clear_hours() {
  hours_ = 0;
  clear_has_hours();
}
inline ::google::protobuf::int32 packetc2l_gm_list::hours() const {
  return hours_;
}
inline void packetc2l_gm_list::set_hours(::google::protobuf::int32 value) {
  set_has_hours();
  hours_ = value;
}

// -------------------------------------------------------------------

// gm_room_info

// optional int32 id = 1;
inline bool gm_room_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gm_room_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gm_room_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gm_room_info::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 gm_room_info::id() const {
  return id_;
}
inline void gm_room_info::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 player_fee = 2;
inline bool gm_room_info::has_player_fee() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gm_room_info::set_has_player_fee() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gm_room_info::clear_has_player_fee() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gm_room_info::clear_player_fee() {
  player_fee_ = 0;
  clear_has_player_fee();
}
inline ::google::protobuf::int32 gm_room_info::player_fee() const {
  return player_fee_;
}
inline void gm_room_info::set_player_fee(::google::protobuf::int32 value) {
  set_has_player_fee();
  player_fee_ = value;
}

// optional int64 player_win = 3;
inline bool gm_room_info::has_player_win() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gm_room_info::set_has_player_win() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gm_room_info::clear_has_player_win() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gm_room_info::clear_player_win() {
  player_win_ = GOOGLE_LONGLONG(0);
  clear_has_player_win();
}
inline ::google::protobuf::int64 gm_room_info::player_win() const {
  return player_win_;
}
inline void gm_room_info::set_player_win(::google::protobuf::int64 value) {
  set_has_player_win();
  player_win_ = value;
}

// -------------------------------------------------------------------

// packetl2c_gm_list

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_list];
inline bool packetl2c_gm_list::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_gm_list::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_gm_list::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_gm_list::clear_packet_id() {
  packet_id_ = 15024;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetl2c_gm_list::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_gm_list::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_srmj_protocols.gm_player_info players = 2;
inline int packetl2c_gm_list::players_size() const {
  return players_.size();
}
inline void packetl2c_gm_list::clear_players() {
  players_.Clear();
}
inline const ::game_srmj_protocols::gm_player_info& packetl2c_gm_list::players(int index) const {
  return players_.Get(index);
}
inline ::game_srmj_protocols::gm_player_info* packetl2c_gm_list::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::game_srmj_protocols::gm_player_info* packetl2c_gm_list::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::gm_player_info >&
packetl2c_gm_list::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::gm_player_info >*
packetl2c_gm_list::mutable_players() {
  return &players_;
}

// repeated .game_srmj_protocols.gm_room_info rooms = 3;
inline int packetl2c_gm_list::rooms_size() const {
  return rooms_.size();
}
inline void packetl2c_gm_list::clear_rooms() {
  rooms_.Clear();
}
inline const ::game_srmj_protocols::gm_room_info& packetl2c_gm_list::rooms(int index) const {
  return rooms_.Get(index);
}
inline ::game_srmj_protocols::gm_room_info* packetl2c_gm_list::mutable_rooms(int index) {
  return rooms_.Mutable(index);
}
inline ::game_srmj_protocols::gm_room_info* packetl2c_gm_list::add_rooms() {
  return rooms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::gm_room_info >&
packetl2c_gm_list::rooms() const {
  return rooms_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::gm_room_info >*
packetl2c_gm_list::mutable_rooms() {
  return &rooms_;
}

// -------------------------------------------------------------------

// packetc2l_gm_kill

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_kill];
inline bool packetc2l_gm_kill::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_gm_kill::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_gm_kill::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_gm_kill::clear_packet_id() {
  packet_id_ = 10016;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetc2l_gm_kill::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_gm_kill::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetc2l_gm_kill::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_gm_kill::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_gm_kill::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_gm_kill::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetc2l_gm_kill::player_id() const {
  return player_id_;
}
inline void packetc2l_gm_kill::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 kill_type = 3;
inline bool packetc2l_gm_kill::has_kill_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_gm_kill::set_has_kill_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_gm_kill::clear_has_kill_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_gm_kill::clear_kill_type() {
  kill_type_ = 0;
  clear_has_kill_type();
}
inline ::google::protobuf::int32 packetc2l_gm_kill::kill_type() const {
  return kill_type_;
}
inline void packetc2l_gm_kill::set_kill_type(::google::protobuf::int32 value) {
  set_has_kill_type();
  kill_type_ = value;
}

// optional int32 kill_cnt = 4;
inline bool packetc2l_gm_kill::has_kill_cnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetc2l_gm_kill::set_has_kill_cnt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetc2l_gm_kill::clear_has_kill_cnt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetc2l_gm_kill::clear_kill_cnt() {
  kill_cnt_ = 0;
  clear_has_kill_cnt();
}
inline ::google::protobuf::int32 packetc2l_gm_kill::kill_cnt() const {
  return kill_cnt_;
}
inline void packetc2l_gm_kill::set_kill_cnt(::google::protobuf::int32 value) {
  set_has_kill_cnt();
  kill_cnt_ = value;
}

// -------------------------------------------------------------------

// packetc2l_exchange_card

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_exchange_card];
inline bool packetc2l_exchange_card::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_exchange_card::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_exchange_card::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_exchange_card::clear_packet_id() {
  packet_id_ = 10017;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetc2l_exchange_card::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_exchange_card::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated int32 card = 2;
inline int packetc2l_exchange_card::card_size() const {
  return card_.size();
}
inline void packetc2l_exchange_card::clear_card() {
  card_.Clear();
}
inline ::google::protobuf::int32 packetc2l_exchange_card::card(int index) const {
  return card_.Get(index);
}
inline void packetc2l_exchange_card::set_card(int index, ::google::protobuf::int32 value) {
  card_.Set(index, value);
}
inline void packetc2l_exchange_card::add_card(::google::protobuf::int32 value) {
  card_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetc2l_exchange_card::card() const {
  return card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetc2l_exchange_card::mutable_card() {
  return &card_;
}

// -------------------------------------------------------------------

// exchange_card_data

// repeated int32 old_card_id = 1;
inline int exchange_card_data::old_card_id_size() const {
  return old_card_id_.size();
}
inline void exchange_card_data::clear_old_card_id() {
  old_card_id_.Clear();
}
inline ::google::protobuf::int32 exchange_card_data::old_card_id(int index) const {
  return old_card_id_.Get(index);
}
inline void exchange_card_data::set_old_card_id(int index, ::google::protobuf::int32 value) {
  old_card_id_.Set(index, value);
}
inline void exchange_card_data::add_old_card_id(::google::protobuf::int32 value) {
  old_card_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
exchange_card_data::old_card_id() const {
  return old_card_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
exchange_card_data::mutable_old_card_id() {
  return &old_card_id_;
}

// repeated int32 new_card_id = 2;
inline int exchange_card_data::new_card_id_size() const {
  return new_card_id_.size();
}
inline void exchange_card_data::clear_new_card_id() {
  new_card_id_.Clear();
}
inline ::google::protobuf::int32 exchange_card_data::new_card_id(int index) const {
  return new_card_id_.Get(index);
}
inline void exchange_card_data::set_new_card_id(int index, ::google::protobuf::int32 value) {
  new_card_id_.Set(index, value);
}
inline void exchange_card_data::add_new_card_id(::google::protobuf::int32 value) {
  new_card_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
exchange_card_data::new_card_id() const {
  return new_card_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
exchange_card_data::mutable_new_card_id() {
  return &new_card_id_;
}

// repeated int32 new_card_val = 3;
inline int exchange_card_data::new_card_val_size() const {
  return new_card_val_.size();
}
inline void exchange_card_data::clear_new_card_val() {
  new_card_val_.Clear();
}
inline ::google::protobuf::int32 exchange_card_data::new_card_val(int index) const {
  return new_card_val_.Get(index);
}
inline void exchange_card_data::set_new_card_val(int index, ::google::protobuf::int32 value) {
  new_card_val_.Set(index, value);
}
inline void exchange_card_data::add_new_card_val(::google::protobuf::int32 value) {
  new_card_val_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
exchange_card_data::new_card_val() const {
  return new_card_val_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
exchange_card_data::mutable_new_card_val() {
  return &new_card_val_;
}

// -------------------------------------------------------------------

// packetl2c_exchange_card

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_exchange_card];
inline bool packetl2c_exchange_card::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_exchange_card::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_exchange_card::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_exchange_card::clear_packet_id() {
  packet_id_ = 15025;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetl2c_exchange_card::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_exchange_card::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 exchange_type = 2;
inline bool packetl2c_exchange_card::has_exchange_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_exchange_card::set_has_exchange_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_exchange_card::clear_has_exchange_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_exchange_card::clear_exchange_type() {
  exchange_type_ = 0;
  clear_has_exchange_type();
}
inline ::google::protobuf::int32 packetl2c_exchange_card::exchange_type() const {
  return exchange_type_;
}
inline void packetl2c_exchange_card::set_exchange_type(::google::protobuf::int32 value) {
  set_has_exchange_type();
  exchange_type_ = value;
}

// repeated .game_srmj_protocols.exchange_card_data cards = 3;
inline int packetl2c_exchange_card::cards_size() const {
  return cards_.size();
}
inline void packetl2c_exchange_card::clear_cards() {
  cards_.Clear();
}
inline const ::game_srmj_protocols::exchange_card_data& packetl2c_exchange_card::cards(int index) const {
  return cards_.Get(index);
}
inline ::game_srmj_protocols::exchange_card_data* packetl2c_exchange_card::mutable_cards(int index) {
  return cards_.Mutable(index);
}
inline ::game_srmj_protocols::exchange_card_data* packetl2c_exchange_card::add_cards() {
  return cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::exchange_card_data >&
packetl2c_exchange_card::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srmj_protocols::exchange_card_data >*
packetl2c_exchange_card::mutable_cards() {
  return &cards_;
}

// -------------------------------------------------------------------

// packetc2l_decide_vacancy

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_decide_vacancy];
inline bool packetc2l_decide_vacancy::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_decide_vacancy::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_decide_vacancy::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_decide_vacancy::clear_packet_id() {
  packet_id_ = 10018;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetc2l_decide_vacancy::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_decide_vacancy::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 type = 2;
inline bool packetc2l_decide_vacancy::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_decide_vacancy::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_decide_vacancy::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_decide_vacancy::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 packetc2l_decide_vacancy::type() const {
  return type_;
}
inline void packetc2l_decide_vacancy::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// packetl2c_decide_vacancy

// optional .game_srmj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_decide_vacancy];
inline bool packetl2c_decide_vacancy::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_decide_vacancy::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_decide_vacancy::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_decide_vacancy::clear_packet_id() {
  packet_id_ = 15026;
  clear_has_packet_id();
}
inline ::game_srmj_protocols::e_server_msg_type packetl2c_decide_vacancy::packet_id() const {
  return static_cast< ::game_srmj_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_decide_vacancy::set_packet_id(::game_srmj_protocols::e_server_msg_type value) {
  assert(::game_srmj_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated int32 types = 2;
inline int packetl2c_decide_vacancy::types_size() const {
  return types_.size();
}
inline void packetl2c_decide_vacancy::clear_types() {
  types_.Clear();
}
inline ::google::protobuf::int32 packetl2c_decide_vacancy::types(int index) const {
  return types_.Get(index);
}
inline void packetl2c_decide_vacancy::set_types(int index, ::google::protobuf::int32 value) {
  types_.Set(index, value);
}
inline void packetl2c_decide_vacancy::add_types(::google::protobuf::int32 value) {
  types_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_decide_vacancy::types() const {
  return types_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_decide_vacancy::mutable_types() {
  return &types_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_srmj_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fsrmj_5fprotocol_2eproto__INCLUDED
