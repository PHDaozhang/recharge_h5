// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_shuihz_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_shuihz_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game_shuihz_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2l_check_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_check_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_check_state_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_check_state_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_enter_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_enter_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_enter_game_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_enter_game_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_leave_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_leave_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_leave_game_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_leave_game_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_star_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_star_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IconInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IconInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_star_game_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_star_game_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_req_bonus_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_req_bonus_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_req_bonus_game_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_req_bonus_game_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_req_double_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_req_double_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_req_double_game_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_req_double_game_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_get_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_room_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_room_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_enter_player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_enter_player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_leave_player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_leave_player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_player_change_money_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_player_change_money_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_change_attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_change_attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_supply_chip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_supply_chip_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_supply_chip_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_supply_chip_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_get_room_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_room_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_room_scene_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_room_scene_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_settlement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_settlement_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_settlement_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_settlement_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* room_player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  room_player_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_gm_get_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_gm_get_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_gm_get_room_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_gm_get_room_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_gm_do_kill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_gm_do_kill_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_gm_do_kill_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_gm_do_kill_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fshuihz_5fprotocol_2eproto() {
  protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_shuihz_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2l_check_state_descriptor_ = file->message_type(0);
  static const int packetc2l_check_state_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, packet_id_),
  };
  packetc2l_check_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_check_state_descriptor_,
      packetc2l_check_state::default_instance_,
      packetc2l_check_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_check_state));
  packetc2l_check_state_result_descriptor_ = file->message_type(1);
  static const int packetc2l_check_state_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state_result, room_id_),
  };
  packetc2l_check_state_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_check_state_result_descriptor_,
      packetc2l_check_state_result::default_instance_,
      packetc2l_check_state_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_check_state_result));
  packetc2l_enter_game_descriptor_ = file->message_type(2);
  static const int packetc2l_enter_game_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game, room_id_),
  };
  packetc2l_enter_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_enter_game_descriptor_,
      packetc2l_enter_game::default_instance_,
      packetc2l_enter_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_enter_game));
  packetc2l_enter_game_result_descriptor_ = file->message_type(3);
  static const int packetc2l_enter_game_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game_result, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game_result, player_list_),
  };
  packetc2l_enter_game_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_enter_game_result_descriptor_,
      packetc2l_enter_game_result::default_instance_,
      packetc2l_enter_game_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_enter_game_result));
  packetc2l_leave_game_descriptor_ = file->message_type(4);
  static const int packetc2l_leave_game_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_game, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_game, room_id_),
  };
  packetc2l_leave_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_leave_game_descriptor_,
      packetc2l_leave_game::default_instance_,
      packetc2l_leave_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_leave_game));
  packetc2l_leave_game_result_descriptor_ = file->message_type(5);
  static const int packetc2l_leave_game_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_game_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_game_result, result_),
  };
  packetc2l_leave_game_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_leave_game_result_descriptor_,
      packetc2l_leave_game_result::default_instance_,
      packetc2l_leave_game_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_game_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_game_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_leave_game_result));
  packetc2l_star_game_descriptor_ = file->message_type(6);
  static const int packetc2l_star_game_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game, rateindex_),
  };
  packetc2l_star_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_star_game_descriptor_,
      packetc2l_star_game::default_instance_,
      packetc2l_star_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_star_game));
  LineInfo_descriptor_ = file->message_type(7);
  static const int LineInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineInfo, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineInfo, lightflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineInfo, leftlinkcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineInfo, rightlinkcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineInfo, lefticon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineInfo, righticon_),
  };
  LineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineInfo_descriptor_,
      LineInfo::default_instance_,
      LineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineInfo));
  IconInfo_descriptor_ = file->message_type(8);
  static const int IconInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IconInfo, iconid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IconInfo, rate_),
  };
  IconInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IconInfo_descriptor_,
      IconInfo::default_instance_,
      IconInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IconInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IconInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IconInfo));
  packetc2l_star_game_result_descriptor_ = file->message_type(9);
  static const int packetc2l_star_game_result_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, moneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, imagearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, infolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, winmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, deductmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, curmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, bonusgamecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, fulltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, fullid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, icons_),
  };
  packetc2l_star_game_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_star_game_result_descriptor_,
      packetc2l_star_game_result::default_instance_,
      packetc2l_star_game_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_star_game_result));
  packetc2l_req_bonus_game_descriptor_ = file->message_type(10);
  static const int packetc2l_req_bonus_game_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_bonus_game, packet_id_),
  };
  packetc2l_req_bonus_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_req_bonus_game_descriptor_,
      packetc2l_req_bonus_game::default_instance_,
      packetc2l_req_bonus_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_bonus_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_bonus_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_req_bonus_game));
  packetl2c_req_bonus_game_result_descriptor_ = file->message_type(11);
  static const int packetl2c_req_bonus_game_result_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_bonus_game_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_bonus_game_result, innericonarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_bonus_game_result, outericon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_bonus_game_result, winmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_bonus_game_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_bonus_game_result, showicon_),
  };
  packetl2c_req_bonus_game_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_req_bonus_game_result_descriptor_,
      packetl2c_req_bonus_game_result::default_instance_,
      packetl2c_req_bonus_game_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_bonus_game_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_bonus_game_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_req_bonus_game_result));
  packetc2l_req_double_game_descriptor_ = file->message_type(12);
  static const int packetc2l_req_double_game_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_double_game, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_double_game, betpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_double_game, betgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_double_game, betid_),
  };
  packetc2l_req_double_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_req_double_game_descriptor_,
      packetc2l_req_double_game::default_instance_,
      packetc2l_req_double_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_double_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_double_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_req_double_game));
  packetl2c_req_double_game_result_descriptor_ = file->message_type(13);
  static const int packetl2c_req_double_game_result_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_double_game_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_double_game_result, dice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_double_game_result, dice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_double_game_result, winmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_double_game_result, betpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_double_game_result, result_),
  };
  packetl2c_req_double_game_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_req_double_game_result_descriptor_,
      packetl2c_req_double_game_result::default_instance_,
      packetl2c_req_double_game_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_double_game_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_double_game_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_req_double_game_result));
  packetc2l_get_room_info_descriptor_ = file->message_type(14);
  static const int packetc2l_get_room_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, packet_id_),
  };
  packetc2l_get_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_room_info_descriptor_,
      packetc2l_get_room_info::default_instance_,
      packetc2l_get_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_room_info));
  msg_room_info_descriptor_ = file->message_type(15);
  static const int msg_room_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_info, roomid_),
  };
  msg_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_room_info_descriptor_,
      msg_room_info::default_instance_,
      msg_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_room_info));
  packetl2c_get_room_info_result_descriptor_ = file->message_type(16);
  static const int packetl2c_get_room_info_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, rooms_),
  };
  packetl2c_get_room_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_room_info_result_descriptor_,
      packetl2c_get_room_info_result::default_instance_,
      packetl2c_get_room_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_room_info_result));
  packetl2c_enter_player_info_descriptor_ = file->message_type(17);
  static const int packetl2c_enter_player_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_player_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_player_info, player_info_),
  };
  packetl2c_enter_player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_enter_player_info_descriptor_,
      packetl2c_enter_player_info::default_instance_,
      packetl2c_enter_player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_enter_player_info));
  packetl2c_leave_player_info_descriptor_ = file->message_type(18);
  static const int packetl2c_leave_player_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_player_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_player_info, player_id_),
  };
  packetl2c_leave_player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_leave_player_info_descriptor_,
      packetl2c_leave_player_info::default_instance_,
      packetl2c_leave_player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_leave_player_info));
  packetl2c_player_change_money_descriptor_ = file->message_type(19);
  static const int packetl2c_player_change_money_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_change_money, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_change_money, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_change_money, cur_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_change_money, change_money_),
  };
  packetl2c_player_change_money_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_player_change_money_descriptor_,
      packetl2c_player_change_money::default_instance_,
      packetl2c_player_change_money_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_change_money, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_change_money, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_player_change_money));
  packetl2c_bc_change_attr_descriptor_ = file->message_type(20);
  static const int packetl2c_bc_change_attr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, change_value_),
  };
  packetl2c_bc_change_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_change_attr_descriptor_,
      packetl2c_bc_change_attr::default_instance_,
      packetl2c_bc_change_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_change_attr));
  packetc2l_supply_chip_descriptor_ = file->message_type(21);
  static const int packetc2l_supply_chip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_supply_chip, packet_id_),
  };
  packetc2l_supply_chip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_supply_chip_descriptor_,
      packetc2l_supply_chip::default_instance_,
      packetc2l_supply_chip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_supply_chip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_supply_chip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_supply_chip));
  packetl2c_supply_chip_result_descriptor_ = file->message_type(22);
  static const int packetl2c_supply_chip_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_supply_chip_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_supply_chip_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_supply_chip_result, gold_),
  };
  packetl2c_supply_chip_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_supply_chip_result_descriptor_,
      packetl2c_supply_chip_result::default_instance_,
      packetl2c_supply_chip_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_supply_chip_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_supply_chip_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_supply_chip_result));
  packetc2l_get_room_scene_info_descriptor_ = file->message_type(23);
  static const int packetc2l_get_room_scene_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_scene_info, packet_id_),
  };
  packetc2l_get_room_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_room_scene_info_descriptor_,
      packetc2l_get_room_scene_info::default_instance_,
      packetc2l_get_room_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_room_scene_info));
  packetl2c_get_room_scene_info_result_descriptor_ = file->message_type(24);
  static const int packetl2c_get_room_scene_info_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, player_list_),
  };
  packetl2c_get_room_scene_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_room_scene_info_result_descriptor_,
      packetl2c_get_room_scene_info_result::default_instance_,
      packetl2c_get_room_scene_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_room_scene_info_result));
  packetc2l_settlement_descriptor_ = file->message_type(25);
  static const int packetc2l_settlement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_settlement, packet_id_),
  };
  packetc2l_settlement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_settlement_descriptor_,
      packetc2l_settlement::default_instance_,
      packetc2l_settlement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_settlement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_settlement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_settlement));
  packetl2c_settlement_result_descriptor_ = file->message_type(26);
  static const int packetl2c_settlement_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_settlement_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_settlement_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_settlement_result, gold_),
  };
  packetl2c_settlement_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_settlement_result_descriptor_,
      packetl2c_settlement_result::default_instance_,
      packetl2c_settlement_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_settlement_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_settlement_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_settlement_result));
  room_player_descriptor_ = file->message_type(27);
  static const int room_player_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_player, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_player, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_player, bet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_player, profit_today_),
  };
  room_player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      room_player_descriptor_,
      room_player::default_instance_,
      room_player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(room_player));
  packetl2c_gm_get_room_info_descriptor_ = file->message_type(28);
  static const int packetl2c_gm_get_room_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info, packet_id_),
  };
  packetl2c_gm_get_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_gm_get_room_info_descriptor_,
      packetl2c_gm_get_room_info::default_instance_,
      packetl2c_gm_get_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_gm_get_room_info));
  packetl2c_gm_get_room_info_result_descriptor_ = file->message_type(29);
  static const int packetl2c_gm_get_room_info_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info_result, killcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info_result, players_),
  };
  packetl2c_gm_get_room_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_gm_get_room_info_result_descriptor_,
      packetl2c_gm_get_room_info_result::default_instance_,
      packetl2c_gm_get_room_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_gm_get_room_info_result));
  packetl2c_gm_do_kill_descriptor_ = file->message_type(30);
  static const int packetl2c_gm_do_kill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_do_kill, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_do_kill, killcount_),
  };
  packetl2c_gm_do_kill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_gm_do_kill_descriptor_,
      packetl2c_gm_do_kill::default_instance_,
      packetl2c_gm_do_kill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_do_kill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_do_kill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_gm_do_kill));
  packetl2c_gm_do_kill_result_descriptor_ = file->message_type(31);
  static const int packetl2c_gm_do_kill_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_do_kill_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_do_kill_result, result_),
  };
  packetl2c_gm_do_kill_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_gm_do_kill_result_descriptor_,
      packetl2c_gm_do_kill_result::default_instance_,
      packetl2c_gm_do_kill_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_do_kill_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_do_kill_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_gm_do_kill_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fshuihz_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_check_state_descriptor_, &packetc2l_check_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_check_state_result_descriptor_, &packetc2l_check_state_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_enter_game_descriptor_, &packetc2l_enter_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_enter_game_result_descriptor_, &packetc2l_enter_game_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_leave_game_descriptor_, &packetc2l_leave_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_leave_game_result_descriptor_, &packetc2l_leave_game_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_star_game_descriptor_, &packetc2l_star_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineInfo_descriptor_, &LineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IconInfo_descriptor_, &IconInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_star_game_result_descriptor_, &packetc2l_star_game_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_req_bonus_game_descriptor_, &packetc2l_req_bonus_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_req_bonus_game_result_descriptor_, &packetl2c_req_bonus_game_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_req_double_game_descriptor_, &packetc2l_req_double_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_req_double_game_result_descriptor_, &packetl2c_req_double_game_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_room_info_descriptor_, &packetc2l_get_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_room_info_descriptor_, &msg_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_room_info_result_descriptor_, &packetl2c_get_room_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_enter_player_info_descriptor_, &packetl2c_enter_player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_leave_player_info_descriptor_, &packetl2c_leave_player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_player_change_money_descriptor_, &packetl2c_player_change_money::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_change_attr_descriptor_, &packetl2c_bc_change_attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_supply_chip_descriptor_, &packetc2l_supply_chip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_supply_chip_result_descriptor_, &packetl2c_supply_chip_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_room_scene_info_descriptor_, &packetc2l_get_room_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_room_scene_info_result_descriptor_, &packetl2c_get_room_scene_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_settlement_descriptor_, &packetc2l_settlement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_settlement_result_descriptor_, &packetl2c_settlement_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    room_player_descriptor_, &room_player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_gm_get_room_info_descriptor_, &packetl2c_gm_get_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_gm_get_room_info_result_descriptor_, &packetl2c_gm_get_room_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_gm_do_kill_descriptor_, &packetl2c_gm_do_kill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_gm_do_kill_result_descriptor_, &packetl2c_gm_do_kill_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fshuihz_5fprotocol_2eproto() {
  delete packetc2l_check_state::default_instance_;
  delete packetc2l_check_state_reflection_;
  delete packetc2l_check_state_result::default_instance_;
  delete packetc2l_check_state_result_reflection_;
  delete packetc2l_enter_game::default_instance_;
  delete packetc2l_enter_game_reflection_;
  delete packetc2l_enter_game_result::default_instance_;
  delete packetc2l_enter_game_result_reflection_;
  delete packetc2l_leave_game::default_instance_;
  delete packetc2l_leave_game_reflection_;
  delete packetc2l_leave_game_result::default_instance_;
  delete packetc2l_leave_game_result_reflection_;
  delete packetc2l_star_game::default_instance_;
  delete packetc2l_star_game_reflection_;
  delete LineInfo::default_instance_;
  delete LineInfo_reflection_;
  delete IconInfo::default_instance_;
  delete IconInfo_reflection_;
  delete packetc2l_star_game_result::default_instance_;
  delete packetc2l_star_game_result_reflection_;
  delete packetc2l_req_bonus_game::default_instance_;
  delete packetc2l_req_bonus_game_reflection_;
  delete packetl2c_req_bonus_game_result::default_instance_;
  delete packetl2c_req_bonus_game_result_reflection_;
  delete packetc2l_req_double_game::default_instance_;
  delete packetc2l_req_double_game_reflection_;
  delete packetl2c_req_double_game_result::default_instance_;
  delete packetl2c_req_double_game_result_reflection_;
  delete packetc2l_get_room_info::default_instance_;
  delete packetc2l_get_room_info_reflection_;
  delete msg_room_info::default_instance_;
  delete msg_room_info_reflection_;
  delete packetl2c_get_room_info_result::default_instance_;
  delete packetl2c_get_room_info_result_reflection_;
  delete packetl2c_enter_player_info::default_instance_;
  delete packetl2c_enter_player_info_reflection_;
  delete packetl2c_leave_player_info::default_instance_;
  delete packetl2c_leave_player_info_reflection_;
  delete packetl2c_player_change_money::default_instance_;
  delete packetl2c_player_change_money_reflection_;
  delete packetl2c_bc_change_attr::default_instance_;
  delete packetl2c_bc_change_attr_reflection_;
  delete packetc2l_supply_chip::default_instance_;
  delete packetc2l_supply_chip_reflection_;
  delete packetl2c_supply_chip_result::default_instance_;
  delete packetl2c_supply_chip_result_reflection_;
  delete packetc2l_get_room_scene_info::default_instance_;
  delete packetc2l_get_room_scene_info_reflection_;
  delete packetl2c_get_room_scene_info_result::default_instance_;
  delete packetl2c_get_room_scene_info_result_reflection_;
  delete packetc2l_settlement::default_instance_;
  delete packetc2l_settlement_reflection_;
  delete packetl2c_settlement_result::default_instance_;
  delete packetl2c_settlement_result_reflection_;
  delete room_player::default_instance_;
  delete room_player_reflection_;
  delete packetl2c_gm_get_room_info::default_instance_;
  delete packetl2c_gm_get_room_info_reflection_;
  delete packetl2c_gm_get_room_info_result::default_instance_;
  delete packetl2c_gm_get_room_info_result_reflection_;
  delete packetl2c_gm_do_kill::default_instance_;
  delete packetl2c_gm_do_kill_reflection_;
  delete packetl2c_gm_do_kill_result::default_instance_;
  delete packetl2c_gm_do_kill_result_reflection_;
}

void protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::game_shuihz_protocols::protobuf_AddDesc_game_5fshuihz_5fdef_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032game_shuihz_protocol.proto\022\025game_shuih"
    "z_protocols\032\025game_shuihz_def.proto\032\022msg_"
    "type_def.proto\"k\n\025packetc2l_check_state\022"
    "R\n\tpacket_id\030\001 \001(\0162(.game_shuihz_protoco"
    "ls.e_server_msg_type:\025e_mst_c2l_check_st"
    "ate\"\212\001\n\034packetc2l_check_state_result\022Y\n\t"
    "packet_id\030\001 \001(\0162(.game_shuihz_protocols."
    "e_server_msg_type:\034e_mst_l2c_check_state"
    "_result\022\017\n\007room_id\030\002 \001(\005\"z\n\024packetc2l_en"
    "ter_game\022Q\n\tpacket_id\030\001 \001(\0162(.game_shuih"
    "z_protocols.e_server_msg_type:\024e_mst_c2l"
    "_enter_game\022\017\n\007room_id\030\002 \001(\005\"\325\001\n\033packetc"
    "2l_enter_game_result\022X\n\tpacket_id\030\001 \001(\0162"
    "(.game_shuihz_protocols.e_server_msg_typ"
    "e:\033e_mst_l2c_enter_game_result\022\016\n\006result"
    "\030\002 \001(\005\022\017\n\007room_id\030\003 \001(\005\022;\n\013player_list\030\004"
    " \003(\0132&.game_shuihz_protocols.msg_player_"
    "info\"z\n\024packetc2l_leave_game\022Q\n\tpacket_i"
    "d\030\001 \001(\0162(.game_shuihz_protocols.e_server"
    "_msg_type:\024e_mst_c2l_leave_game\022\017\n\007room_"
    "id\030\002 \001(\005\"\207\001\n\033packetc2l_leave_game_result"
    "\022X\n\tpacket_id\030\001 \001(\0162(.game_shuihz_protoc"
    "ols.e_server_msg_type:\033e_mst_l2c_leave_g"
    "ame_result\022\016\n\006result\030\002 \001(\005\"z\n\023packetc2l_"
    "star_game\022P\n\tpacket_id\030\001 \001(\0162(.game_shui"
    "hz_protocols.e_server_msg_type:\023e_mst_c2"
    "l_star_game\022\021\n\trateIndex\030\002 \001(\005\"\201\001\n\010LineI"
    "nfo\022\016\n\006lineId\030\001 \001(\005\022\021\n\tlightFlag\030\002 \001(\005\022\025"
    "\n\rleftLinkCount\030\003 \001(\005\022\026\n\016rightLinkCount\030"
    "\004 \001(\005\022\020\n\010leftIcon\030\005 \001(\005\022\021\n\trightIcon\030\006 \001"
    "(\005\"(\n\010IconInfo\022\016\n\006iconId\030\001 \001(\005\022\014\n\004rate\030\002"
    " \001(\005\"\200\003\n\032packetc2l_star_game_result\022W\n\tp"
    "acket_id\030\001 \001(\0162(.game_shuihz_protocols.e"
    "_server_msg_type:\032e_mst_l2c_star_game_re"
    "sult\022\021\n\tmoneyType\030\002 \001(\005\022\020\n\010imageArr\030\003 \001("
    "\t\0221\n\010infoList\030\004 \003(\0132\037.game_shuihz_protoc"
    "ols.LineInfo\022\020\n\010winMoney\030\005 \001(\005\022\023\n\013deduct"
    "Money\030\006 \001(\005\022\016\n\006result\030\007 \001(\005\022\020\n\010curMoney\030"
    "\010 \001(\005\022\026\n\016bonusGameCount\030\t \001(\005\022\020\n\010fullTyp"
    "e\030\n \001(\005\022\016\n\006fullId\030\013 \001(\005\022.\n\005icons\030\014 \003(\0132\037"
    ".game_shuihz_protocols.IconInfo\"q\n\030packe"
    "tc2l_req_bonus_game\022U\n\tpacket_id\030\001 \001(\0162("
    ".game_shuihz_protocols.e_server_msg_type"
    ":\030e_mst_c2l_req_bonus_game\"\334\001\n\037packetl2c"
    "_req_bonus_game_result\022\\\n\tpacket_id\030\001 \001("
    "\0162(.game_shuihz_protocols.e_server_msg_t"
    "ype:\037e_mst_l2c_req_bonus_game_result\022\024\n\014"
    "innerIconArr\030\002 \001(\t\022\021\n\touterIcon\030\003 \001(\005\022\020\n"
    "\010winMoney\030\004 \001(\005\022\016\n\006result\030\005 \001(\005\022\020\n\010showI"
    "con\030\006 \001(\t\"\243\001\n\031packetc2l_req_double_game\022"
    "V\n\tpacket_id\030\001 \001(\0162(.game_shuihz_protoco"
    "ls.e_server_msg_type:\031e_mst_c2l_req_doub"
    "le_game\022\016\n\006betpos\030\002 \001(\005\022\017\n\007betgold\030\003 \001(\005"
    "\022\r\n\005betid\030\004 \001(\005\"\321\001\n packetl2c_req_double"
    "_game_result\022]\n\tpacket_id\030\001 \001(\0162(.game_s"
    "huihz_protocols.e_server_msg_type: e_mst"
    "_l2c_req_double_game_result\022\r\n\005dice1\030\002 \001"
    "(\005\022\r\n\005dice2\030\003 \001(\005\022\020\n\010winMoney\030\004 \001(\005\022\016\n\006b"
    "etpos\030\005 \001(\005\022\016\n\006result\030\006 \001(\005\"o\n\027packetc2l"
    "_get_room_info\022T\n\tpacket_id\030\001 \001(\0162(.game"
    "_shuihz_protocols.e_server_msg_type:\027e_m"
    "st_c2l_get_room_info\"\037\n\rmsg_room_info\022\016\n"
    "\006roomid\030\001 \001(\005\"\262\001\n\036packetl2c_get_room_inf"
    "o_result\022[\n\tpacket_id\030\001 \001(\0162(.game_shuih"
    "z_protocols.e_server_msg_type:\036e_mst_l2c"
    "_get_room_info_result\0223\n\005rooms\030\002 \003(\0132$.g"
    "ame_shuihz_protocols.msg_room_info\"\264\001\n\033p"
    "acketl2c_enter_player_info\022X\n\tpacket_id\030"
    "\001 \001(\0162(.game_shuihz_protocols.e_server_m"
    "sg_type:\033e_mst_l2c_enter_player_info\022;\n\013"
    "player_info\030\002 \001(\0132&.game_shuihz_protocol"
    "s.msg_player_info\"\212\001\n\033packetl2c_leave_pl"
    "ayer_info\022X\n\tpacket_id\030\001 \001(\0162(.game_shui"
    "hz_protocols.e_server_msg_type:\033e_mst_l2"
    "c_leave_player_info\022\021\n\tplayer_id\030\002 \001(\005\"\267"
    "\001\n\035packetl2c_player_change_money\022Z\n\tpack"
    "et_id\030\001 \001(\0162(.game_shuihz_protocols.e_se"
    "rver_msg_type:\035e_mst_l2c_player_change_m"
    "oney\022\021\n\tplayer_id\030\002 \001(\005\022\021\n\tcur_money\030\003 \001"
    "(\003\022\024\n\014change_money\030\004 \001(\003\"\255\001\n\030packetl2c_b"
    "c_change_attr\022U\n\tpacket_id\030\001 \001(\0162(.game_"
    "shuihz_protocols.e_server_msg_type:\030e_ms"
    "t_l2c_bc_change_attr\022\021\n\tplayer_id\030\002 \001(\005\022"
    "\021\n\titem_type\030\003 \001(\005\022\024\n\014change_value\030\004 \001(\003"
    "\"k\n\025packetc2l_supply_chip\022R\n\tpacket_id\030\001"
    " \001(\0162(.game_shuihz_protocols.e_server_ms"
    "g_type:\025e_mst_c2l_supply_chip\"\303\001\n\034packet"
    "l2c_supply_chip_result\022Y\n\tpacket_id\030\001 \001("
    "\0162(.game_shuihz_protocols.e_server_msg_t"
    "ype:\034e_mst_l2c_supply_chip_result\022:\n\006res"
    "ult\030\002 \001(\0162\036.msg_type_def.e_msg_result_de"
    "f:\ne_rmt_fail\022\014\n\004gold\030\006 \001(\003\"{\n\035packetc2l"
    "_get_room_scene_info\022Z\n\tpacket_id\030\001 \001(\0162"
    "(.game_shuihz_protocols.e_server_msg_typ"
    "e:\035e_mst_c2l_get_room_scene_info\"\320\001\n$pac"
    "ketl2c_get_room_scene_info_result\022Z\n\tpac"
    "ket_id\030\001 \001(\0162(.game_shuihz_protocols.e_s"
    "erver_msg_type:\035e_mst_l2c_get_room_scene"
    "_info\022\017\n\007room_id\030\002 \001(\005\022;\n\013player_list\030\003 "
    "\003(\0132&.game_shuihz_protocols.msg_player_i"
    "nfo\"i\n\024packetc2l_settlement\022Q\n\tpacket_id"
    "\030\001 \001(\0162(.game_shuihz_protocols.e_server_"
    "msg_type:\024e_mst_c2l_settlement\"\225\001\n\033packe"
    "tl2c_settlement_result\022X\n\tpacket_id\030\001 \001("
    "\0162(.game_shuihz_protocols.e_server_msg_t"
    "ype:\033e_mst_l2c_settlement_result\022\016\n\006resu"
    "lt\030\002 \001(\005\022\014\n\004gold\030\003 \001(\003\"Q\n\013room_player\022\021\n"
    "\tplayer_id\030\001 \001(\005\022\014\n\004gold\030\002 \001(\003\022\013\n\003bet\030\003 "
    "\001(\003\022\024\n\014profit_today\030\004 \001(\003\"u\n\032packetl2c_g"
    "m_get_room_info\022W\n\tpacket_id\030\001 \001(\0162(.gam"
    "e_shuihz_protocols.e_server_msg_type:\032e_"
    "mst_c2l_gm_get_room_info\"\333\001\n!packetl2c_g"
    "m_get_room_info_result\022^\n\tpacket_id\030\001 \001("
    "\0162(.game_shuihz_protocols.e_server_msg_t"
    "ype:!e_mst_l2c_gm_get_room_info_result\022\016"
    "\n\006result\030\002 \001(\005\022\021\n\tkillcount\030\003 \001(\005\0223\n\007pla"
    "yers\030\004 \003(\0132\".game_shuihz_protocols.room_"
    "player\"|\n\024packetl2c_gm_do_kill\022Q\n\tpacket"
    "_id\030\001 \001(\0162(.game_shuihz_protocols.e_serv"
    "er_msg_type:\024e_mst_c2l_gm_do_kill\022\021\n\tkil"
    "lcount\030\002 \001(\005\"\207\001\n\033packetl2c_gm_do_kill_re"
    "sult\022X\n\tpacket_id\030\001 \001(\0162(.game_shuihz_pr"
    "otocols.e_server_msg_type:\033e_mst_l2c_gm_"
    "do_kill_result\022\016\n\006result\030\002 \001(\005", 4950);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_shuihz_protocol.proto", &protobuf_RegisterTypes);
  packetc2l_check_state::default_instance_ = new packetc2l_check_state();
  packetc2l_check_state_result::default_instance_ = new packetc2l_check_state_result();
  packetc2l_enter_game::default_instance_ = new packetc2l_enter_game();
  packetc2l_enter_game_result::default_instance_ = new packetc2l_enter_game_result();
  packetc2l_leave_game::default_instance_ = new packetc2l_leave_game();
  packetc2l_leave_game_result::default_instance_ = new packetc2l_leave_game_result();
  packetc2l_star_game::default_instance_ = new packetc2l_star_game();
  LineInfo::default_instance_ = new LineInfo();
  IconInfo::default_instance_ = new IconInfo();
  packetc2l_star_game_result::default_instance_ = new packetc2l_star_game_result();
  packetc2l_req_bonus_game::default_instance_ = new packetc2l_req_bonus_game();
  packetl2c_req_bonus_game_result::default_instance_ = new packetl2c_req_bonus_game_result();
  packetc2l_req_double_game::default_instance_ = new packetc2l_req_double_game();
  packetl2c_req_double_game_result::default_instance_ = new packetl2c_req_double_game_result();
  packetc2l_get_room_info::default_instance_ = new packetc2l_get_room_info();
  msg_room_info::default_instance_ = new msg_room_info();
  packetl2c_get_room_info_result::default_instance_ = new packetl2c_get_room_info_result();
  packetl2c_enter_player_info::default_instance_ = new packetl2c_enter_player_info();
  packetl2c_leave_player_info::default_instance_ = new packetl2c_leave_player_info();
  packetl2c_player_change_money::default_instance_ = new packetl2c_player_change_money();
  packetl2c_bc_change_attr::default_instance_ = new packetl2c_bc_change_attr();
  packetc2l_supply_chip::default_instance_ = new packetc2l_supply_chip();
  packetl2c_supply_chip_result::default_instance_ = new packetl2c_supply_chip_result();
  packetc2l_get_room_scene_info::default_instance_ = new packetc2l_get_room_scene_info();
  packetl2c_get_room_scene_info_result::default_instance_ = new packetl2c_get_room_scene_info_result();
  packetc2l_settlement::default_instance_ = new packetc2l_settlement();
  packetl2c_settlement_result::default_instance_ = new packetl2c_settlement_result();
  room_player::default_instance_ = new room_player();
  packetl2c_gm_get_room_info::default_instance_ = new packetl2c_gm_get_room_info();
  packetl2c_gm_get_room_info_result::default_instance_ = new packetl2c_gm_get_room_info_result();
  packetl2c_gm_do_kill::default_instance_ = new packetl2c_gm_do_kill();
  packetl2c_gm_do_kill_result::default_instance_ = new packetl2c_gm_do_kill_result();
  packetc2l_check_state::default_instance_->InitAsDefaultInstance();
  packetc2l_check_state_result::default_instance_->InitAsDefaultInstance();
  packetc2l_enter_game::default_instance_->InitAsDefaultInstance();
  packetc2l_enter_game_result::default_instance_->InitAsDefaultInstance();
  packetc2l_leave_game::default_instance_->InitAsDefaultInstance();
  packetc2l_leave_game_result::default_instance_->InitAsDefaultInstance();
  packetc2l_star_game::default_instance_->InitAsDefaultInstance();
  LineInfo::default_instance_->InitAsDefaultInstance();
  IconInfo::default_instance_->InitAsDefaultInstance();
  packetc2l_star_game_result::default_instance_->InitAsDefaultInstance();
  packetc2l_req_bonus_game::default_instance_->InitAsDefaultInstance();
  packetl2c_req_bonus_game_result::default_instance_->InitAsDefaultInstance();
  packetc2l_req_double_game::default_instance_->InitAsDefaultInstance();
  packetl2c_req_double_game_result::default_instance_->InitAsDefaultInstance();
  packetc2l_get_room_info::default_instance_->InitAsDefaultInstance();
  msg_room_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_room_info_result::default_instance_->InitAsDefaultInstance();
  packetl2c_enter_player_info::default_instance_->InitAsDefaultInstance();
  packetl2c_leave_player_info::default_instance_->InitAsDefaultInstance();
  packetl2c_player_change_money::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_change_attr::default_instance_->InitAsDefaultInstance();
  packetc2l_supply_chip::default_instance_->InitAsDefaultInstance();
  packetl2c_supply_chip_result::default_instance_->InitAsDefaultInstance();
  packetc2l_get_room_scene_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_room_scene_info_result::default_instance_->InitAsDefaultInstance();
  packetc2l_settlement::default_instance_->InitAsDefaultInstance();
  packetl2c_settlement_result::default_instance_->InitAsDefaultInstance();
  room_player::default_instance_->InitAsDefaultInstance();
  packetl2c_gm_get_room_info::default_instance_->InitAsDefaultInstance();
  packetl2c_gm_get_room_info_result::default_instance_->InitAsDefaultInstance();
  packetl2c_gm_do_kill::default_instance_->InitAsDefaultInstance();
  packetl2c_gm_do_kill_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fshuihz_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fshuihz_5fprotocol_2eproto {
  StaticDescriptorInitializer_game_5fshuihz_5fprotocol_2eproto() {
    protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  }
} static_descriptor_initializer_game_5fshuihz_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2l_check_state::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_check_state::packetc2l_check_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_check_state::InitAsDefaultInstance() {
}

packetc2l_check_state::packetc2l_check_state(const packetc2l_check_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_check_state::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10001;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_check_state::~packetc2l_check_state() {
  SharedDtor();
}

void packetc2l_check_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_check_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_check_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_check_state_descriptor_;
}

const packetc2l_check_state& packetc2l_check_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_check_state* packetc2l_check_state::default_instance_ = NULL;

packetc2l_check_state* packetc2l_check_state::New() const {
  return new packetc2l_check_state;
}

void packetc2l_check_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10001;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_check_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_check_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_check_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_check_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_check_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_check_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_check_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_check_state::MergeFrom(const packetc2l_check_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_check_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_check_state::CopyFrom(const packetc2l_check_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_check_state::IsInitialized() const {

  return true;
}

void packetc2l_check_state::Swap(packetc2l_check_state* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_check_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_check_state_descriptor_;
  metadata.reflection = packetc2l_check_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_check_state_result::kPacketIdFieldNumber;
const int packetc2l_check_state_result::kRoomIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_check_state_result::packetc2l_check_state_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_check_state_result::InitAsDefaultInstance() {
}

packetc2l_check_state_result::packetc2l_check_state_result(const packetc2l_check_state_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_check_state_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15001;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_check_state_result::~packetc2l_check_state_result() {
  SharedDtor();
}

void packetc2l_check_state_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_check_state_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_check_state_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_check_state_result_descriptor_;
}

const packetc2l_check_state_result& packetc2l_check_state_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_check_state_result* packetc2l_check_state_result::default_instance_ = NULL;

packetc2l_check_state_result* packetc2l_check_state_result::New() const {
  return new packetc2l_check_state_result;
}

void packetc2l_check_state_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15001;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_check_state_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_check_state_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_check_state_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_check_state_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_check_state_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_check_state_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_check_state_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_check_state_result::MergeFrom(const packetc2l_check_state_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_check_state_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_check_state_result::CopyFrom(const packetc2l_check_state_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_check_state_result::IsInitialized() const {

  return true;
}

void packetc2l_check_state_result::Swap(packetc2l_check_state_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_check_state_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_check_state_result_descriptor_;
  metadata.reflection = packetc2l_check_state_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_enter_game::kPacketIdFieldNumber;
const int packetc2l_enter_game::kRoomIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_enter_game::packetc2l_enter_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_enter_game::InitAsDefaultInstance() {
}

packetc2l_enter_game::packetc2l_enter_game(const packetc2l_enter_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_enter_game::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10002;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_enter_game::~packetc2l_enter_game() {
  SharedDtor();
}

void packetc2l_enter_game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_enter_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_enter_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_enter_game_descriptor_;
}

const packetc2l_enter_game& packetc2l_enter_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_enter_game* packetc2l_enter_game::default_instance_ = NULL;

packetc2l_enter_game* packetc2l_enter_game::New() const {
  return new packetc2l_enter_game;
}

void packetc2l_enter_game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10002;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_enter_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_game];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_enter_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_game];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_enter_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_game];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_enter_game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_game];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_enter_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_enter_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_enter_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_enter_game::MergeFrom(const packetc2l_enter_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_enter_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_enter_game::CopyFrom(const packetc2l_enter_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_enter_game::IsInitialized() const {

  return true;
}

void packetc2l_enter_game::Swap(packetc2l_enter_game* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_enter_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_enter_game_descriptor_;
  metadata.reflection = packetc2l_enter_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_enter_game_result::kPacketIdFieldNumber;
const int packetc2l_enter_game_result::kResultFieldNumber;
const int packetc2l_enter_game_result::kRoomIdFieldNumber;
const int packetc2l_enter_game_result::kPlayerListFieldNumber;
#endif  // !_MSC_VER

packetc2l_enter_game_result::packetc2l_enter_game_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_enter_game_result::InitAsDefaultInstance() {
}

packetc2l_enter_game_result::packetc2l_enter_game_result(const packetc2l_enter_game_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_enter_game_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15002;
  result_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_enter_game_result::~packetc2l_enter_game_result() {
  SharedDtor();
}

void packetc2l_enter_game_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_enter_game_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_enter_game_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_enter_game_result_descriptor_;
}

const packetc2l_enter_game_result& packetc2l_enter_game_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_enter_game_result* packetc2l_enter_game_result::default_instance_ = NULL;

packetc2l_enter_game_result* packetc2l_enter_game_result::New() const {
  return new packetc2l_enter_game_result;
}

void packetc2l_enter_game_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15002;
    result_ = 0;
    room_id_ = 0;
  }
  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_enter_game_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_game_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_list;
        break;
      }

      // repeated .game_shuihz_protocols.msg_player_info player_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_enter_game_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_game_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  // repeated .game_shuihz_protocols.msg_player_info player_list = 4;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_enter_game_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_game_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  // repeated .game_shuihz_protocols.msg_player_info player_list = 4;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_enter_game_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_game_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  // repeated .game_shuihz_protocols.msg_player_info player_list = 4;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_enter_game_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_enter_game_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_enter_game_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_enter_game_result::MergeFrom(const packetc2l_enter_game_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_enter_game_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_enter_game_result::CopyFrom(const packetc2l_enter_game_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_enter_game_result::IsInitialized() const {

  return true;
}

void packetc2l_enter_game_result::Swap(packetc2l_enter_game_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(room_id_, other->room_id_);
    player_list_.Swap(&other->player_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_enter_game_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_enter_game_result_descriptor_;
  metadata.reflection = packetc2l_enter_game_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_leave_game::kPacketIdFieldNumber;
const int packetc2l_leave_game::kRoomIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_leave_game::packetc2l_leave_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_leave_game::InitAsDefaultInstance() {
}

packetc2l_leave_game::packetc2l_leave_game(const packetc2l_leave_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_leave_game::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10003;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_leave_game::~packetc2l_leave_game() {
  SharedDtor();
}

void packetc2l_leave_game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_leave_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_leave_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_leave_game_descriptor_;
}

const packetc2l_leave_game& packetc2l_leave_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_leave_game* packetc2l_leave_game::default_instance_ = NULL;

packetc2l_leave_game* packetc2l_leave_game::New() const {
  return new packetc2l_leave_game;
}

void packetc2l_leave_game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10003;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_leave_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_game];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_leave_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_game];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_leave_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_game];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_leave_game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_game];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_leave_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_leave_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_leave_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_leave_game::MergeFrom(const packetc2l_leave_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_leave_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_leave_game::CopyFrom(const packetc2l_leave_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_leave_game::IsInitialized() const {

  return true;
}

void packetc2l_leave_game::Swap(packetc2l_leave_game* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_leave_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_leave_game_descriptor_;
  metadata.reflection = packetc2l_leave_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_leave_game_result::kPacketIdFieldNumber;
const int packetc2l_leave_game_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetc2l_leave_game_result::packetc2l_leave_game_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_leave_game_result::InitAsDefaultInstance() {
}

packetc2l_leave_game_result::packetc2l_leave_game_result(const packetc2l_leave_game_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_leave_game_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15003;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_leave_game_result::~packetc2l_leave_game_result() {
  SharedDtor();
}

void packetc2l_leave_game_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_leave_game_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_leave_game_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_leave_game_result_descriptor_;
}

const packetc2l_leave_game_result& packetc2l_leave_game_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_leave_game_result* packetc2l_leave_game_result::default_instance_ = NULL;

packetc2l_leave_game_result* packetc2l_leave_game_result::New() const {
  return new packetc2l_leave_game_result;
}

void packetc2l_leave_game_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15003;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_leave_game_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_game_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_leave_game_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_game_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_leave_game_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_game_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_leave_game_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_game_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_leave_game_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_leave_game_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_leave_game_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_leave_game_result::MergeFrom(const packetc2l_leave_game_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_leave_game_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_leave_game_result::CopyFrom(const packetc2l_leave_game_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_leave_game_result::IsInitialized() const {

  return true;
}

void packetc2l_leave_game_result::Swap(packetc2l_leave_game_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_leave_game_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_leave_game_result_descriptor_;
  metadata.reflection = packetc2l_leave_game_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_star_game::kPacketIdFieldNumber;
const int packetc2l_star_game::kRateIndexFieldNumber;
#endif  // !_MSC_VER

packetc2l_star_game::packetc2l_star_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_star_game::InitAsDefaultInstance() {
}

packetc2l_star_game::packetc2l_star_game(const packetc2l_star_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_star_game::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10004;
  rateindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_star_game::~packetc2l_star_game() {
  SharedDtor();
}

void packetc2l_star_game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_star_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_star_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_star_game_descriptor_;
}

const packetc2l_star_game& packetc2l_star_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_star_game* packetc2l_star_game::default_instance_ = NULL;

packetc2l_star_game* packetc2l_star_game::New() const {
  return new packetc2l_star_game;
}

void packetc2l_star_game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10004;
    rateindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_star_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_star_game];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rateIndex;
        break;
      }

      // optional int32 rateIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rateIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rateindex_)));
          set_has_rateindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_star_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_star_game];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 rateIndex = 2;
  if (has_rateindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rateindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_star_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_star_game];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 rateIndex = 2;
  if (has_rateindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rateindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_star_game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_star_game];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 rateIndex = 2;
    if (has_rateindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rateindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_star_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_star_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_star_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_star_game::MergeFrom(const packetc2l_star_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_rateindex()) {
      set_rateindex(from.rateindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_star_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_star_game::CopyFrom(const packetc2l_star_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_star_game::IsInitialized() const {

  return true;
}

void packetc2l_star_game::Swap(packetc2l_star_game* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(rateindex_, other->rateindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_star_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_star_game_descriptor_;
  metadata.reflection = packetc2l_star_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineInfo::kLineIdFieldNumber;
const int LineInfo::kLightFlagFieldNumber;
const int LineInfo::kLeftLinkCountFieldNumber;
const int LineInfo::kRightLinkCountFieldNumber;
const int LineInfo::kLeftIconFieldNumber;
const int LineInfo::kRightIconFieldNumber;
#endif  // !_MSC_VER

LineInfo::LineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineInfo::InitAsDefaultInstance() {
}

LineInfo::LineInfo(const LineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineInfo::SharedCtor() {
  _cached_size_ = 0;
  lineid_ = 0;
  lightflag_ = 0;
  leftlinkcount_ = 0;
  rightlinkcount_ = 0;
  lefticon_ = 0;
  righticon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineInfo::~LineInfo() {
  SharedDtor();
}

void LineInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineInfo_descriptor_;
}

const LineInfo& LineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

LineInfo* LineInfo::default_instance_ = NULL;

LineInfo* LineInfo::New() const {
  return new LineInfo;
}

void LineInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lineid_ = 0;
    lightflag_ = 0;
    leftlinkcount_ = 0;
    rightlinkcount_ = 0;
    lefticon_ = 0;
    righticon_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lineId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineid_)));
          set_has_lineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lightFlag;
        break;
      }

      // optional int32 lightFlag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lightFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lightflag_)));
          set_has_lightflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leftLinkCount;
        break;
      }

      // optional int32 leftLinkCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftLinkCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftlinkcount_)));
          set_has_leftlinkcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rightLinkCount;
        break;
      }

      // optional int32 rightLinkCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rightLinkCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rightlinkcount_)));
          set_has_rightlinkcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_leftIcon;
        break;
      }

      // optional int32 leftIcon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftIcon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefticon_)));
          set_has_lefticon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rightIcon;
        break;
      }

      // optional int32 rightIcon = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rightIcon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &righticon_)));
          set_has_righticon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lineId = 1;
  if (has_lineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lineid(), output);
  }

  // optional int32 lightFlag = 2;
  if (has_lightflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lightflag(), output);
  }

  // optional int32 leftLinkCount = 3;
  if (has_leftlinkcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->leftlinkcount(), output);
  }

  // optional int32 rightLinkCount = 4;
  if (has_rightlinkcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rightlinkcount(), output);
  }

  // optional int32 leftIcon = 5;
  if (has_lefticon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lefticon(), output);
  }

  // optional int32 rightIcon = 6;
  if (has_righticon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->righticon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lineId = 1;
  if (has_lineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lineid(), target);
  }

  // optional int32 lightFlag = 2;
  if (has_lightflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lightflag(), target);
  }

  // optional int32 leftLinkCount = 3;
  if (has_leftlinkcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->leftlinkcount(), target);
  }

  // optional int32 rightLinkCount = 4;
  if (has_rightlinkcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rightlinkcount(), target);
  }

  // optional int32 leftIcon = 5;
  if (has_lefticon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lefticon(), target);
  }

  // optional int32 rightIcon = 6;
  if (has_righticon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->righticon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lineId = 1;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineid());
    }

    // optional int32 lightFlag = 2;
    if (has_lightflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lightflag());
    }

    // optional int32 leftLinkCount = 3;
    if (has_leftlinkcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftlinkcount());
    }

    // optional int32 rightLinkCount = 4;
    if (has_rightlinkcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rightlinkcount());
    }

    // optional int32 leftIcon = 5;
    if (has_lefticon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefticon());
    }

    // optional int32 rightIcon = 6;
    if (has_righticon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->righticon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineInfo::MergeFrom(const LineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lineid()) {
      set_lineid(from.lineid());
    }
    if (from.has_lightflag()) {
      set_lightflag(from.lightflag());
    }
    if (from.has_leftlinkcount()) {
      set_leftlinkcount(from.leftlinkcount());
    }
    if (from.has_rightlinkcount()) {
      set_rightlinkcount(from.rightlinkcount());
    }
    if (from.has_lefticon()) {
      set_lefticon(from.lefticon());
    }
    if (from.has_righticon()) {
      set_righticon(from.righticon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineInfo::CopyFrom(const LineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineInfo::IsInitialized() const {

  return true;
}

void LineInfo::Swap(LineInfo* other) {
  if (other != this) {
    std::swap(lineid_, other->lineid_);
    std::swap(lightflag_, other->lightflag_);
    std::swap(leftlinkcount_, other->leftlinkcount_);
    std::swap(rightlinkcount_, other->rightlinkcount_);
    std::swap(lefticon_, other->lefticon_);
    std::swap(righticon_, other->righticon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineInfo_descriptor_;
  metadata.reflection = LineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IconInfo::kIconIdFieldNumber;
const int IconInfo::kRateFieldNumber;
#endif  // !_MSC_VER

IconInfo::IconInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IconInfo::InitAsDefaultInstance() {
}

IconInfo::IconInfo(const IconInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IconInfo::SharedCtor() {
  _cached_size_ = 0;
  iconid_ = 0;
  rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IconInfo::~IconInfo() {
  SharedDtor();
}

void IconInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IconInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IconInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IconInfo_descriptor_;
}

const IconInfo& IconInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

IconInfo* IconInfo::default_instance_ = NULL;

IconInfo* IconInfo::New() const {
  return new IconInfo;
}

void IconInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iconid_ = 0;
    rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IconInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iconId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iconid_)));
          set_has_iconid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rate;
        break;
      }

      // optional int32 rate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IconInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iconId = 1;
  if (has_iconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iconid(), output);
  }

  // optional int32 rate = 2;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IconInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iconId = 1;
  if (has_iconid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iconid(), target);
  }

  // optional int32 rate = 2;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IconInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iconId = 1;
    if (has_iconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iconid());
    }

    // optional int32 rate = 2;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IconInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IconInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IconInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IconInfo::MergeFrom(const IconInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iconid()) {
      set_iconid(from.iconid());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IconInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IconInfo::CopyFrom(const IconInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IconInfo::IsInitialized() const {

  return true;
}

void IconInfo::Swap(IconInfo* other) {
  if (other != this) {
    std::swap(iconid_, other->iconid_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IconInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IconInfo_descriptor_;
  metadata.reflection = IconInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_star_game_result::kPacketIdFieldNumber;
const int packetc2l_star_game_result::kMoneyTypeFieldNumber;
const int packetc2l_star_game_result::kImageArrFieldNumber;
const int packetc2l_star_game_result::kInfoListFieldNumber;
const int packetc2l_star_game_result::kWinMoneyFieldNumber;
const int packetc2l_star_game_result::kDeductMoneyFieldNumber;
const int packetc2l_star_game_result::kResultFieldNumber;
const int packetc2l_star_game_result::kCurMoneyFieldNumber;
const int packetc2l_star_game_result::kBonusGameCountFieldNumber;
const int packetc2l_star_game_result::kFullTypeFieldNumber;
const int packetc2l_star_game_result::kFullIdFieldNumber;
const int packetc2l_star_game_result::kIconsFieldNumber;
#endif  // !_MSC_VER

packetc2l_star_game_result::packetc2l_star_game_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_star_game_result::InitAsDefaultInstance() {
}

packetc2l_star_game_result::packetc2l_star_game_result(const packetc2l_star_game_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_star_game_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15004;
  moneytype_ = 0;
  imagearr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  winmoney_ = 0;
  deductmoney_ = 0;
  result_ = 0;
  curmoney_ = 0;
  bonusgamecount_ = 0;
  fulltype_ = 0;
  fullid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_star_game_result::~packetc2l_star_game_result() {
  SharedDtor();
}

void packetc2l_star_game_result::SharedDtor() {
  if (imagearr_ != &::google::protobuf::internal::kEmptyString) {
    delete imagearr_;
  }
  if (this != default_instance_) {
  }
}

void packetc2l_star_game_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_star_game_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_star_game_result_descriptor_;
}

const packetc2l_star_game_result& packetc2l_star_game_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_star_game_result* packetc2l_star_game_result::default_instance_ = NULL;

packetc2l_star_game_result* packetc2l_star_game_result::New() const {
  return new packetc2l_star_game_result;
}

void packetc2l_star_game_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15004;
    moneytype_ = 0;
    if (has_imagearr()) {
      if (imagearr_ != &::google::protobuf::internal::kEmptyString) {
        imagearr_->clear();
      }
    }
    winmoney_ = 0;
    deductmoney_ = 0;
    result_ = 0;
    curmoney_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bonusgamecount_ = 0;
    fulltype_ = 0;
    fullid_ = 0;
  }
  infolist_.Clear();
  icons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_star_game_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_star_game_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moneyType;
        break;
      }

      // optional int32 moneyType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_imageArr;
        break;
      }

      // optional string imageArr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagearr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imagearr().data(), this->imagearr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_infoList;
        break;
      }

      // repeated .game_shuihz_protocols.LineInfo infoList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_infoList;
        if (input->ExpectTag(40)) goto parse_winMoney;
        break;
      }

      // optional int32 winMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winmoney_)));
          set_has_winmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_deductMoney;
        break;
      }

      // optional int32 deductMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deductMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deductmoney_)));
          set_has_deductmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_result;
        break;
      }

      // optional int32 result = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_curMoney;
        break;
      }

      // optional int32 curMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curmoney_)));
          set_has_curmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bonusGameCount;
        break;
      }

      // optional int32 bonusGameCount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonusGameCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bonusgamecount_)));
          set_has_bonusgamecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fullType;
        break;
      }

      // optional int32 fullType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fullType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fulltype_)));
          set_has_fulltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_fullId;
        break;
      }

      // optional int32 fullId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fullId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fullid_)));
          set_has_fullid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_icons;
        break;
      }

      // repeated .game_shuihz_protocols.IconInfo icons = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_icons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_icons;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_star_game_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_star_game_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 moneyType = 2;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->moneytype(), output);
  }

  // optional string imageArr = 3;
  if (has_imagearr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imagearr().data(), this->imagearr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->imagearr(), output);
  }

  // repeated .game_shuihz_protocols.LineInfo infoList = 4;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->infolist(i), output);
  }

  // optional int32 winMoney = 5;
  if (has_winmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->winmoney(), output);
  }

  // optional int32 deductMoney = 6;
  if (has_deductmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->deductmoney(), output);
  }

  // optional int32 result = 7;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->result(), output);
  }

  // optional int32 curMoney = 8;
  if (has_curmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->curmoney(), output);
  }

  // optional int32 bonusGameCount = 9;
  if (has_bonusgamecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bonusgamecount(), output);
  }

  // optional int32 fullType = 10;
  if (has_fulltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->fulltype(), output);
  }

  // optional int32 fullId = 11;
  if (has_fullid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->fullid(), output);
  }

  // repeated .game_shuihz_protocols.IconInfo icons = 12;
  for (int i = 0; i < this->icons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->icons(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_star_game_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_star_game_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 moneyType = 2;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->moneytype(), target);
  }

  // optional string imageArr = 3;
  if (has_imagearr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imagearr().data(), this->imagearr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->imagearr(), target);
  }

  // repeated .game_shuihz_protocols.LineInfo infoList = 4;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->infolist(i), target);
  }

  // optional int32 winMoney = 5;
  if (has_winmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->winmoney(), target);
  }

  // optional int32 deductMoney = 6;
  if (has_deductmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->deductmoney(), target);
  }

  // optional int32 result = 7;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->result(), target);
  }

  // optional int32 curMoney = 8;
  if (has_curmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->curmoney(), target);
  }

  // optional int32 bonusGameCount = 9;
  if (has_bonusgamecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bonusgamecount(), target);
  }

  // optional int32 fullType = 10;
  if (has_fulltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->fulltype(), target);
  }

  // optional int32 fullId = 11;
  if (has_fullid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->fullid(), target);
  }

  // repeated .game_shuihz_protocols.IconInfo icons = 12;
  for (int i = 0; i < this->icons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->icons(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_star_game_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_star_game_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 moneyType = 2;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moneytype());
    }

    // optional string imageArr = 3;
    if (has_imagearr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imagearr());
    }

    // optional int32 winMoney = 5;
    if (has_winmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winmoney());
    }

    // optional int32 deductMoney = 6;
    if (has_deductmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deductmoney());
    }

    // optional int32 result = 7;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 curMoney = 8;
    if (has_curmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curmoney());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 bonusGameCount = 9;
    if (has_bonusgamecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonusgamecount());
    }

    // optional int32 fullType = 10;
    if (has_fulltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fulltype());
    }

    // optional int32 fullId = 11;
    if (has_fullid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fullid());
    }

  }
  // repeated .game_shuihz_protocols.LineInfo infoList = 4;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  // repeated .game_shuihz_protocols.IconInfo icons = 12;
  total_size += 1 * this->icons_size();
  for (int i = 0; i < this->icons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->icons(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_star_game_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_star_game_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_star_game_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_star_game_result::MergeFrom(const packetc2l_star_game_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  icons_.MergeFrom(from.icons_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
    if (from.has_imagearr()) {
      set_imagearr(from.imagearr());
    }
    if (from.has_winmoney()) {
      set_winmoney(from.winmoney());
    }
    if (from.has_deductmoney()) {
      set_deductmoney(from.deductmoney());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_curmoney()) {
      set_curmoney(from.curmoney());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bonusgamecount()) {
      set_bonusgamecount(from.bonusgamecount());
    }
    if (from.has_fulltype()) {
      set_fulltype(from.fulltype());
    }
    if (from.has_fullid()) {
      set_fullid(from.fullid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_star_game_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_star_game_result::CopyFrom(const packetc2l_star_game_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_star_game_result::IsInitialized() const {

  return true;
}

void packetc2l_star_game_result::Swap(packetc2l_star_game_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(imagearr_, other->imagearr_);
    infolist_.Swap(&other->infolist_);
    std::swap(winmoney_, other->winmoney_);
    std::swap(deductmoney_, other->deductmoney_);
    std::swap(result_, other->result_);
    std::swap(curmoney_, other->curmoney_);
    std::swap(bonusgamecount_, other->bonusgamecount_);
    std::swap(fulltype_, other->fulltype_);
    std::swap(fullid_, other->fullid_);
    icons_.Swap(&other->icons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_star_game_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_star_game_result_descriptor_;
  metadata.reflection = packetc2l_star_game_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_req_bonus_game::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_req_bonus_game::packetc2l_req_bonus_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_req_bonus_game::InitAsDefaultInstance() {
}

packetc2l_req_bonus_game::packetc2l_req_bonus_game(const packetc2l_req_bonus_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_req_bonus_game::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10005;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_req_bonus_game::~packetc2l_req_bonus_game() {
  SharedDtor();
}

void packetc2l_req_bonus_game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_req_bonus_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_req_bonus_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_req_bonus_game_descriptor_;
}

const packetc2l_req_bonus_game& packetc2l_req_bonus_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_req_bonus_game* packetc2l_req_bonus_game::default_instance_ = NULL;

packetc2l_req_bonus_game* packetc2l_req_bonus_game::New() const {
  return new packetc2l_req_bonus_game;
}

void packetc2l_req_bonus_game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10005;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_req_bonus_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_bonus_game];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_req_bonus_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_bonus_game];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_req_bonus_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_bonus_game];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_req_bonus_game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_bonus_game];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_req_bonus_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_req_bonus_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_req_bonus_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_req_bonus_game::MergeFrom(const packetc2l_req_bonus_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_req_bonus_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_req_bonus_game::CopyFrom(const packetc2l_req_bonus_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_req_bonus_game::IsInitialized() const {

  return true;
}

void packetc2l_req_bonus_game::Swap(packetc2l_req_bonus_game* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_req_bonus_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_req_bonus_game_descriptor_;
  metadata.reflection = packetc2l_req_bonus_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_req_bonus_game_result::kPacketIdFieldNumber;
const int packetl2c_req_bonus_game_result::kInnerIconArrFieldNumber;
const int packetl2c_req_bonus_game_result::kOuterIconFieldNumber;
const int packetl2c_req_bonus_game_result::kWinMoneyFieldNumber;
const int packetl2c_req_bonus_game_result::kResultFieldNumber;
const int packetl2c_req_bonus_game_result::kShowIconFieldNumber;
#endif  // !_MSC_VER

packetl2c_req_bonus_game_result::packetl2c_req_bonus_game_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_req_bonus_game_result::InitAsDefaultInstance() {
}

packetl2c_req_bonus_game_result::packetl2c_req_bonus_game_result(const packetl2c_req_bonus_game_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_req_bonus_game_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15005;
  innericonarr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  outericon_ = 0;
  winmoney_ = 0;
  result_ = 0;
  showicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_req_bonus_game_result::~packetl2c_req_bonus_game_result() {
  SharedDtor();
}

void packetl2c_req_bonus_game_result::SharedDtor() {
  if (innericonarr_ != &::google::protobuf::internal::kEmptyString) {
    delete innericonarr_;
  }
  if (showicon_ != &::google::protobuf::internal::kEmptyString) {
    delete showicon_;
  }
  if (this != default_instance_) {
  }
}

void packetl2c_req_bonus_game_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_req_bonus_game_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_req_bonus_game_result_descriptor_;
}

const packetl2c_req_bonus_game_result& packetl2c_req_bonus_game_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_req_bonus_game_result* packetl2c_req_bonus_game_result::default_instance_ = NULL;

packetl2c_req_bonus_game_result* packetl2c_req_bonus_game_result::New() const {
  return new packetl2c_req_bonus_game_result;
}

void packetl2c_req_bonus_game_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15005;
    if (has_innericonarr()) {
      if (innericonarr_ != &::google::protobuf::internal::kEmptyString) {
        innericonarr_->clear();
      }
    }
    outericon_ = 0;
    winmoney_ = 0;
    result_ = 0;
    if (has_showicon()) {
      if (showicon_ != &::google::protobuf::internal::kEmptyString) {
        showicon_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_req_bonus_game_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_bonus_game_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_innerIconArr;
        break;
      }

      // optional string innerIconArr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_innerIconArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_innericonarr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->innericonarr().data(), this->innericonarr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outerIcon;
        break;
      }

      // optional int32 outerIcon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outerIcon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outericon_)));
          set_has_outericon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_winMoney;
        break;
      }

      // optional int32 winMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winmoney_)));
          set_has_winmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional int32 result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_showIcon;
        break;
      }

      // optional string showIcon = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_showIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_showicon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->showicon().data(), this->showicon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_req_bonus_game_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_bonus_game_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string innerIconArr = 2;
  if (has_innericonarr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->innericonarr().data(), this->innericonarr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->innericonarr(), output);
  }

  // optional int32 outerIcon = 3;
  if (has_outericon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->outericon(), output);
  }

  // optional int32 winMoney = 4;
  if (has_winmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->winmoney(), output);
  }

  // optional int32 result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->result(), output);
  }

  // optional string showIcon = 6;
  if (has_showicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->showicon().data(), this->showicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->showicon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_req_bonus_game_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_bonus_game_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string innerIconArr = 2;
  if (has_innericonarr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->innericonarr().data(), this->innericonarr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->innericonarr(), target);
  }

  // optional int32 outerIcon = 3;
  if (has_outericon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->outericon(), target);
  }

  // optional int32 winMoney = 4;
  if (has_winmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->winmoney(), target);
  }

  // optional int32 result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->result(), target);
  }

  // optional string showIcon = 6;
  if (has_showicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->showicon().data(), this->showicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->showicon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_req_bonus_game_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_bonus_game_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string innerIconArr = 2;
    if (has_innericonarr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->innericonarr());
    }

    // optional int32 outerIcon = 3;
    if (has_outericon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outericon());
    }

    // optional int32 winMoney = 4;
    if (has_winmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winmoney());
    }

    // optional int32 result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string showIcon = 6;
    if (has_showicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->showicon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_req_bonus_game_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_req_bonus_game_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_req_bonus_game_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_req_bonus_game_result::MergeFrom(const packetl2c_req_bonus_game_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_innericonarr()) {
      set_innericonarr(from.innericonarr());
    }
    if (from.has_outericon()) {
      set_outericon(from.outericon());
    }
    if (from.has_winmoney()) {
      set_winmoney(from.winmoney());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_showicon()) {
      set_showicon(from.showicon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_req_bonus_game_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_req_bonus_game_result::CopyFrom(const packetl2c_req_bonus_game_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_req_bonus_game_result::IsInitialized() const {

  return true;
}

void packetl2c_req_bonus_game_result::Swap(packetl2c_req_bonus_game_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(innericonarr_, other->innericonarr_);
    std::swap(outericon_, other->outericon_);
    std::swap(winmoney_, other->winmoney_);
    std::swap(result_, other->result_);
    std::swap(showicon_, other->showicon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_req_bonus_game_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_req_bonus_game_result_descriptor_;
  metadata.reflection = packetl2c_req_bonus_game_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_req_double_game::kPacketIdFieldNumber;
const int packetc2l_req_double_game::kBetposFieldNumber;
const int packetc2l_req_double_game::kBetgoldFieldNumber;
const int packetc2l_req_double_game::kBetidFieldNumber;
#endif  // !_MSC_VER

packetc2l_req_double_game::packetc2l_req_double_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_req_double_game::InitAsDefaultInstance() {
}

packetc2l_req_double_game::packetc2l_req_double_game(const packetc2l_req_double_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_req_double_game::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10006;
  betpos_ = 0;
  betgold_ = 0;
  betid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_req_double_game::~packetc2l_req_double_game() {
  SharedDtor();
}

void packetc2l_req_double_game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_req_double_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_req_double_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_req_double_game_descriptor_;
}

const packetc2l_req_double_game& packetc2l_req_double_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_req_double_game* packetc2l_req_double_game::default_instance_ = NULL;

packetc2l_req_double_game* packetc2l_req_double_game::New() const {
  return new packetc2l_req_double_game;
}

void packetc2l_req_double_game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10006;
    betpos_ = 0;
    betgold_ = 0;
    betid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_req_double_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_double_game];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_betpos;
        break;
      }

      // optional int32 betpos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betpos_)));
          set_has_betpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_betgold;
        break;
      }

      // optional int32 betgold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betgold_)));
          set_has_betgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_betid;
        break;
      }

      // optional int32 betid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betid_)));
          set_has_betid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_req_double_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_double_game];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 betpos = 2;
  if (has_betpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->betpos(), output);
  }

  // optional int32 betgold = 3;
  if (has_betgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->betgold(), output);
  }

  // optional int32 betid = 4;
  if (has_betid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->betid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_req_double_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_double_game];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 betpos = 2;
  if (has_betpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->betpos(), target);
  }

  // optional int32 betgold = 3;
  if (has_betgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->betgold(), target);
  }

  // optional int32 betid = 4;
  if (has_betid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->betid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_req_double_game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_double_game];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 betpos = 2;
    if (has_betpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->betpos());
    }

    // optional int32 betgold = 3;
    if (has_betgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->betgold());
    }

    // optional int32 betid = 4;
    if (has_betid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->betid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_req_double_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_req_double_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_req_double_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_req_double_game::MergeFrom(const packetc2l_req_double_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_betpos()) {
      set_betpos(from.betpos());
    }
    if (from.has_betgold()) {
      set_betgold(from.betgold());
    }
    if (from.has_betid()) {
      set_betid(from.betid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_req_double_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_req_double_game::CopyFrom(const packetc2l_req_double_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_req_double_game::IsInitialized() const {

  return true;
}

void packetc2l_req_double_game::Swap(packetc2l_req_double_game* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(betpos_, other->betpos_);
    std::swap(betgold_, other->betgold_);
    std::swap(betid_, other->betid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_req_double_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_req_double_game_descriptor_;
  metadata.reflection = packetc2l_req_double_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_req_double_game_result::kPacketIdFieldNumber;
const int packetl2c_req_double_game_result::kDice1FieldNumber;
const int packetl2c_req_double_game_result::kDice2FieldNumber;
const int packetl2c_req_double_game_result::kWinMoneyFieldNumber;
const int packetl2c_req_double_game_result::kBetposFieldNumber;
const int packetl2c_req_double_game_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_req_double_game_result::packetl2c_req_double_game_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_req_double_game_result::InitAsDefaultInstance() {
}

packetl2c_req_double_game_result::packetl2c_req_double_game_result(const packetl2c_req_double_game_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_req_double_game_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15006;
  dice1_ = 0;
  dice2_ = 0;
  winmoney_ = 0;
  betpos_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_req_double_game_result::~packetl2c_req_double_game_result() {
  SharedDtor();
}

void packetl2c_req_double_game_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_req_double_game_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_req_double_game_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_req_double_game_result_descriptor_;
}

const packetl2c_req_double_game_result& packetl2c_req_double_game_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_req_double_game_result* packetl2c_req_double_game_result::default_instance_ = NULL;

packetl2c_req_double_game_result* packetl2c_req_double_game_result::New() const {
  return new packetl2c_req_double_game_result;
}

void packetl2c_req_double_game_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15006;
    dice1_ = 0;
    dice2_ = 0;
    winmoney_ = 0;
    betpos_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_req_double_game_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_double_game_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dice1;
        break;
      }

      // optional int32 dice1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dice1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dice1_)));
          set_has_dice1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dice2;
        break;
      }

      // optional int32 dice2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dice2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dice2_)));
          set_has_dice2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_winMoney;
        break;
      }

      // optional int32 winMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winmoney_)));
          set_has_winmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_betpos;
        break;
      }

      // optional int32 betpos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betpos_)));
          set_has_betpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_result;
        break;
      }

      // optional int32 result = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_req_double_game_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_double_game_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 dice1 = 2;
  if (has_dice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dice1(), output);
  }

  // optional int32 dice2 = 3;
  if (has_dice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dice2(), output);
  }

  // optional int32 winMoney = 4;
  if (has_winmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->winmoney(), output);
  }

  // optional int32 betpos = 5;
  if (has_betpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->betpos(), output);
  }

  // optional int32 result = 6;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_req_double_game_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_double_game_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 dice1 = 2;
  if (has_dice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dice1(), target);
  }

  // optional int32 dice2 = 3;
  if (has_dice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dice2(), target);
  }

  // optional int32 winMoney = 4;
  if (has_winmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->winmoney(), target);
  }

  // optional int32 betpos = 5;
  if (has_betpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->betpos(), target);
  }

  // optional int32 result = 6;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_req_double_game_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_double_game_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 dice1 = 2;
    if (has_dice1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dice1());
    }

    // optional int32 dice2 = 3;
    if (has_dice2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dice2());
    }

    // optional int32 winMoney = 4;
    if (has_winmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winmoney());
    }

    // optional int32 betpos = 5;
    if (has_betpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->betpos());
    }

    // optional int32 result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_req_double_game_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_req_double_game_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_req_double_game_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_req_double_game_result::MergeFrom(const packetl2c_req_double_game_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_dice1()) {
      set_dice1(from.dice1());
    }
    if (from.has_dice2()) {
      set_dice2(from.dice2());
    }
    if (from.has_winmoney()) {
      set_winmoney(from.winmoney());
    }
    if (from.has_betpos()) {
      set_betpos(from.betpos());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_req_double_game_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_req_double_game_result::CopyFrom(const packetl2c_req_double_game_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_req_double_game_result::IsInitialized() const {

  return true;
}

void packetl2c_req_double_game_result::Swap(packetl2c_req_double_game_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(dice1_, other->dice1_);
    std::swap(dice2_, other->dice2_);
    std::swap(winmoney_, other->winmoney_);
    std::swap(betpos_, other->betpos_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_req_double_game_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_req_double_game_result_descriptor_;
  metadata.reflection = packetl2c_req_double_game_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_room_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_room_info::packetc2l_get_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_room_info::InitAsDefaultInstance() {
}

packetc2l_get_room_info::packetc2l_get_room_info(const packetc2l_get_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_room_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10007;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_room_info::~packetc2l_get_room_info() {
  SharedDtor();
}

void packetc2l_get_room_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_room_info_descriptor_;
}

const packetc2l_get_room_info& packetc2l_get_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_room_info* packetc2l_get_room_info::default_instance_ = NULL;

packetc2l_get_room_info* packetc2l_get_room_info::New() const {
  return new packetc2l_get_room_info;
}

void packetc2l_get_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10007;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_room_info::MergeFrom(const packetc2l_get_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_room_info::CopyFrom(const packetc2l_get_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_room_info::IsInitialized() const {

  return true;
}

void packetc2l_get_room_info::Swap(packetc2l_get_room_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_room_info_descriptor_;
  metadata.reflection = packetc2l_get_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_room_info::kRoomidFieldNumber;
#endif  // !_MSC_VER

msg_room_info::msg_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_room_info::InitAsDefaultInstance() {
}

msg_room_info::msg_room_info(const msg_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_room_info::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_room_info::~msg_room_info() {
  SharedDtor();
}

void msg_room_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_room_info_descriptor_;
}

const msg_room_info& msg_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

msg_room_info* msg_room_info::default_instance_ = NULL;

msg_room_info* msg_room_info::New() const {
  return new msg_room_info;
}

void msg_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_room_info::MergeFrom(const msg_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_room_info::CopyFrom(const msg_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_room_info::IsInitialized() const {

  return true;
}

void msg_room_info::Swap(msg_room_info* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_room_info_descriptor_;
  metadata.reflection = msg_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_room_info_result::kPacketIdFieldNumber;
const int packetl2c_get_room_info_result::kRoomsFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_room_info_result::packetl2c_get_room_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_get_room_info_result::InitAsDefaultInstance() {
}

packetl2c_get_room_info_result::packetl2c_get_room_info_result(const packetl2c_get_room_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_get_room_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15007;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_room_info_result::~packetl2c_get_room_info_result() {
  SharedDtor();
}

void packetl2c_get_room_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_get_room_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_room_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_room_info_result_descriptor_;
}

const packetl2c_get_room_info_result& packetl2c_get_room_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_get_room_info_result* packetl2c_get_room_info_result::default_instance_ = NULL;

packetl2c_get_room_info_result* packetl2c_get_room_info_result::New() const {
  return new packetl2c_get_room_info_result;
}

void packetl2c_get_room_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15007;
  }
  rooms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_room_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rooms;
        break;
      }

      // repeated .game_shuihz_protocols.msg_room_info rooms = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rooms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rooms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rooms;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_get_room_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_shuihz_protocols.msg_room_info rooms = 2;
  for (int i = 0; i < this->rooms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rooms(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_get_room_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_shuihz_protocols.msg_room_info rooms = 2;
  for (int i = 0; i < this->rooms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rooms(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_get_room_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_shuihz_protocols.msg_room_info rooms = 2;
  total_size += 1 * this->rooms_size();
  for (int i = 0; i < this->rooms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rooms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_room_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_room_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_room_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_room_info_result::MergeFrom(const packetl2c_get_room_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  rooms_.MergeFrom(from.rooms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_room_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_room_info_result::CopyFrom(const packetl2c_get_room_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_room_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_room_info_result::Swap(packetl2c_get_room_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    rooms_.Swap(&other->rooms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_room_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_room_info_result_descriptor_;
  metadata.reflection = packetl2c_get_room_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_enter_player_info::kPacketIdFieldNumber;
const int packetl2c_enter_player_info::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_enter_player_info::packetl2c_enter_player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_enter_player_info::InitAsDefaultInstance() {
  player_info_ = const_cast< ::game_shuihz_protocols::msg_player_info*>(&::game_shuihz_protocols::msg_player_info::default_instance());
}

packetl2c_enter_player_info::packetl2c_enter_player_info(const packetl2c_enter_player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_enter_player_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15008;
  player_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_enter_player_info::~packetl2c_enter_player_info() {
  SharedDtor();
}

void packetl2c_enter_player_info::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
  }
}

void packetl2c_enter_player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_enter_player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_enter_player_info_descriptor_;
}

const packetl2c_enter_player_info& packetl2c_enter_player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_enter_player_info* packetl2c_enter_player_info::default_instance_ = NULL;

packetl2c_enter_player_info* packetl2c_enter_player_info::New() const {
  return new packetl2c_enter_player_info;
}

void packetl2c_enter_player_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15008;
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::game_shuihz_protocols::msg_player_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_enter_player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_player_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_info;
        break;
      }

      // optional .game_shuihz_protocols.msg_player_info player_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_enter_player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_player_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_shuihz_protocols.msg_player_info player_info = 2;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_enter_player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_player_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_shuihz_protocols.msg_player_info player_info = 2;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_enter_player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_player_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_shuihz_protocols.msg_player_info player_info = 2;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_enter_player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_enter_player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_enter_player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_enter_player_info::MergeFrom(const packetl2c_enter_player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_info()) {
      mutable_player_info()->::game_shuihz_protocols::msg_player_info::MergeFrom(from.player_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_enter_player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_enter_player_info::CopyFrom(const packetl2c_enter_player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_enter_player_info::IsInitialized() const {

  return true;
}

void packetl2c_enter_player_info::Swap(packetl2c_enter_player_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_info_, other->player_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_enter_player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_enter_player_info_descriptor_;
  metadata.reflection = packetl2c_enter_player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_leave_player_info::kPacketIdFieldNumber;
const int packetl2c_leave_player_info::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_leave_player_info::packetl2c_leave_player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_leave_player_info::InitAsDefaultInstance() {
}

packetl2c_leave_player_info::packetl2c_leave_player_info(const packetl2c_leave_player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_leave_player_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15009;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_leave_player_info::~packetl2c_leave_player_info() {
  SharedDtor();
}

void packetl2c_leave_player_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_leave_player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_leave_player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_leave_player_info_descriptor_;
}

const packetl2c_leave_player_info& packetl2c_leave_player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_leave_player_info* packetl2c_leave_player_info::default_instance_ = NULL;

packetl2c_leave_player_info* packetl2c_leave_player_info::New() const {
  return new packetl2c_leave_player_info;
}

void packetl2c_leave_player_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15009;
    player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_leave_player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_player_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_leave_player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_player_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_leave_player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_player_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_leave_player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_player_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_leave_player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_leave_player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_leave_player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_leave_player_info::MergeFrom(const packetl2c_leave_player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_leave_player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_leave_player_info::CopyFrom(const packetl2c_leave_player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_leave_player_info::IsInitialized() const {

  return true;
}

void packetl2c_leave_player_info::Swap(packetl2c_leave_player_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_leave_player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_leave_player_info_descriptor_;
  metadata.reflection = packetl2c_leave_player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_player_change_money::kPacketIdFieldNumber;
const int packetl2c_player_change_money::kPlayerIdFieldNumber;
const int packetl2c_player_change_money::kCurMoneyFieldNumber;
const int packetl2c_player_change_money::kChangeMoneyFieldNumber;
#endif  // !_MSC_VER

packetl2c_player_change_money::packetl2c_player_change_money()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_player_change_money::InitAsDefaultInstance() {
}

packetl2c_player_change_money::packetl2c_player_change_money(const packetl2c_player_change_money& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_player_change_money::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15010;
  player_id_ = 0;
  cur_money_ = GOOGLE_LONGLONG(0);
  change_money_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_player_change_money::~packetl2c_player_change_money() {
  SharedDtor();
}

void packetl2c_player_change_money::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_player_change_money::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_player_change_money::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_player_change_money_descriptor_;
}

const packetl2c_player_change_money& packetl2c_player_change_money::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_player_change_money* packetl2c_player_change_money::default_instance_ = NULL;

packetl2c_player_change_money* packetl2c_player_change_money::New() const {
  return new packetl2c_player_change_money;
}

void packetl2c_player_change_money::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15010;
    player_id_ = 0;
    cur_money_ = GOOGLE_LONGLONG(0);
    change_money_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_player_change_money::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_change_money];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_money;
        break;
      }

      // optional int64 cur_money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_money_)));
          set_has_cur_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_change_money;
        break;
      }

      // optional int64 change_money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &change_money_)));
          set_has_change_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_player_change_money::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_change_money];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int64 cur_money = 3;
  if (has_cur_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cur_money(), output);
  }

  // optional int64 change_money = 4;
  if (has_change_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->change_money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_player_change_money::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_change_money];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int64 cur_money = 3;
  if (has_cur_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->cur_money(), target);
  }

  // optional int64 change_money = 4;
  if (has_change_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->change_money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_player_change_money::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_change_money];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int64 cur_money = 3;
    if (has_cur_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_money());
    }

    // optional int64 change_money = 4;
    if (has_change_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->change_money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_player_change_money::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_player_change_money* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_player_change_money*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_player_change_money::MergeFrom(const packetl2c_player_change_money& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_cur_money()) {
      set_cur_money(from.cur_money());
    }
    if (from.has_change_money()) {
      set_change_money(from.change_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_player_change_money::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_player_change_money::CopyFrom(const packetl2c_player_change_money& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_player_change_money::IsInitialized() const {

  return true;
}

void packetl2c_player_change_money::Swap(packetl2c_player_change_money* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(cur_money_, other->cur_money_);
    std::swap(change_money_, other->change_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_player_change_money::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_player_change_money_descriptor_;
  metadata.reflection = packetl2c_player_change_money_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_change_attr::kPacketIdFieldNumber;
const int packetl2c_bc_change_attr::kPlayerIdFieldNumber;
const int packetl2c_bc_change_attr::kItemTypeFieldNumber;
const int packetl2c_bc_change_attr::kChangeValueFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_change_attr::packetl2c_bc_change_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_change_attr::InitAsDefaultInstance() {
}

packetl2c_bc_change_attr::packetl2c_bc_change_attr(const packetl2c_bc_change_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_change_attr::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15011;
  player_id_ = 0;
  item_type_ = 0;
  change_value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_change_attr::~packetl2c_bc_change_attr() {
  SharedDtor();
}

void packetl2c_bc_change_attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_change_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_change_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_change_attr_descriptor_;
}

const packetl2c_bc_change_attr& packetl2c_bc_change_attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_change_attr* packetl2c_bc_change_attr::default_instance_ = NULL;

packetl2c_bc_change_attr* packetl2c_bc_change_attr::New() const {
  return new packetl2c_bc_change_attr;
}

void packetl2c_bc_change_attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15011;
    player_id_ = 0;
    item_type_ = 0;
    change_value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_change_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_type;
        break;
      }

      // optional int32 item_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_type_)));
          set_has_item_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_change_value;
        break;
      }

      // optional int64 change_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &change_value_)));
          set_has_change_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_change_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 item_type = 3;
  if (has_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_type(), output);
  }

  // optional int64 change_value = 4;
  if (has_change_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->change_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_change_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 item_type = 3;
  if (has_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_type(), target);
  }

  // optional int64 change_value = 4;
  if (has_change_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->change_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_change_attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 item_type = 3;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_type());
    }

    // optional int64 change_value = 4;
    if (has_change_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->change_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_change_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_change_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_change_attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_change_attr::MergeFrom(const packetl2c_bc_change_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_item_type()) {
      set_item_type(from.item_type());
    }
    if (from.has_change_value()) {
      set_change_value(from.change_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_change_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_change_attr::CopyFrom(const packetl2c_bc_change_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_change_attr::IsInitialized() const {

  return true;
}

void packetl2c_bc_change_attr::Swap(packetl2c_bc_change_attr* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(item_type_, other->item_type_);
    std::swap(change_value_, other->change_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_change_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_change_attr_descriptor_;
  metadata.reflection = packetl2c_bc_change_attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_supply_chip::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_supply_chip::packetc2l_supply_chip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_supply_chip::InitAsDefaultInstance() {
}

packetc2l_supply_chip::packetc2l_supply_chip(const packetc2l_supply_chip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_supply_chip::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10021;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_supply_chip::~packetc2l_supply_chip() {
  SharedDtor();
}

void packetc2l_supply_chip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_supply_chip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_supply_chip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_supply_chip_descriptor_;
}

const packetc2l_supply_chip& packetc2l_supply_chip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_supply_chip* packetc2l_supply_chip::default_instance_ = NULL;

packetc2l_supply_chip* packetc2l_supply_chip::New() const {
  return new packetc2l_supply_chip;
}

void packetc2l_supply_chip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10021;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_supply_chip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_supply_chip];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_supply_chip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_supply_chip];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_supply_chip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_supply_chip];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_supply_chip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_supply_chip];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_supply_chip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_supply_chip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_supply_chip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_supply_chip::MergeFrom(const packetc2l_supply_chip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_supply_chip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_supply_chip::CopyFrom(const packetc2l_supply_chip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_supply_chip::IsInitialized() const {

  return true;
}

void packetc2l_supply_chip::Swap(packetc2l_supply_chip* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_supply_chip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_supply_chip_descriptor_;
  metadata.reflection = packetc2l_supply_chip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_supply_chip_result::kPacketIdFieldNumber;
const int packetl2c_supply_chip_result::kResultFieldNumber;
const int packetl2c_supply_chip_result::kGoldFieldNumber;
#endif  // !_MSC_VER

packetl2c_supply_chip_result::packetl2c_supply_chip_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_supply_chip_result::InitAsDefaultInstance() {
}

packetl2c_supply_chip_result::packetl2c_supply_chip_result(const packetl2c_supply_chip_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_supply_chip_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15021;
  result_ = 2;
  gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_supply_chip_result::~packetl2c_supply_chip_result() {
  SharedDtor();
}

void packetl2c_supply_chip_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_supply_chip_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_supply_chip_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_supply_chip_result_descriptor_;
}

const packetl2c_supply_chip_result& packetl2c_supply_chip_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_supply_chip_result* packetl2c_supply_chip_result::default_instance_ = NULL;

packetl2c_supply_chip_result* packetl2c_supply_chip_result::New() const {
  return new packetl2c_supply_chip_result;
}

void packetl2c_supply_chip_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15021;
    result_ = 2;
    gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_supply_chip_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_supply_chip_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gold;
        break;
      }

      // optional int64 gold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_supply_chip_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_supply_chip_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int64 gold = 6;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_supply_chip_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_supply_chip_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int64 gold = 6;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_supply_chip_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_supply_chip_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int64 gold = 6;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_supply_chip_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_supply_chip_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_supply_chip_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_supply_chip_result::MergeFrom(const packetl2c_supply_chip_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_supply_chip_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_supply_chip_result::CopyFrom(const packetl2c_supply_chip_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_supply_chip_result::IsInitialized() const {

  return true;
}

void packetl2c_supply_chip_result::Swap(packetl2c_supply_chip_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_supply_chip_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_supply_chip_result_descriptor_;
  metadata.reflection = packetl2c_supply_chip_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_room_scene_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_room_scene_info::packetc2l_get_room_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_room_scene_info::InitAsDefaultInstance() {
}

packetc2l_get_room_scene_info::packetc2l_get_room_scene_info(const packetc2l_get_room_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_room_scene_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10022;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_room_scene_info::~packetc2l_get_room_scene_info() {
  SharedDtor();
}

void packetc2l_get_room_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_room_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_room_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_room_scene_info_descriptor_;
}

const packetc2l_get_room_scene_info& packetc2l_get_room_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_room_scene_info* packetc2l_get_room_scene_info::default_instance_ = NULL;

packetc2l_get_room_scene_info* packetc2l_get_room_scene_info::New() const {
  return new packetc2l_get_room_scene_info;
}

void packetc2l_get_room_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10022;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_room_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_room_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_room_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_room_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_room_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_room_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_room_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_room_scene_info::MergeFrom(const packetc2l_get_room_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_room_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_room_scene_info::CopyFrom(const packetc2l_get_room_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_room_scene_info::IsInitialized() const {

  return true;
}

void packetc2l_get_room_scene_info::Swap(packetc2l_get_room_scene_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_room_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_room_scene_info_descriptor_;
  metadata.reflection = packetc2l_get_room_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_room_scene_info_result::kPacketIdFieldNumber;
const int packetl2c_get_room_scene_info_result::kRoomIdFieldNumber;
const int packetl2c_get_room_scene_info_result::kPlayerListFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_room_scene_info_result::packetl2c_get_room_scene_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_get_room_scene_info_result::InitAsDefaultInstance() {
}

packetl2c_get_room_scene_info_result::packetl2c_get_room_scene_info_result(const packetl2c_get_room_scene_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_get_room_scene_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15022;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_room_scene_info_result::~packetl2c_get_room_scene_info_result() {
  SharedDtor();
}

void packetl2c_get_room_scene_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_get_room_scene_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_room_scene_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_room_scene_info_result_descriptor_;
}

const packetl2c_get_room_scene_info_result& packetl2c_get_room_scene_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_get_room_scene_info_result* packetl2c_get_room_scene_info_result::default_instance_ = NULL;

packetl2c_get_room_scene_info_result* packetl2c_get_room_scene_info_result::New() const {
  return new packetl2c_get_room_scene_info_result;
}

void packetl2c_get_room_scene_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15022;
    room_id_ = 0;
  }
  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_room_scene_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        break;
      }

      // repeated .game_shuihz_protocols.msg_player_info player_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_get_room_scene_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  // repeated .game_shuihz_protocols.msg_player_info player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_get_room_scene_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  // repeated .game_shuihz_protocols.msg_player_info player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_get_room_scene_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  // repeated .game_shuihz_protocols.msg_player_info player_list = 3;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_room_scene_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_room_scene_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_room_scene_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_room_scene_info_result::MergeFrom(const packetl2c_get_room_scene_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_room_scene_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_room_scene_info_result::CopyFrom(const packetl2c_get_room_scene_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_room_scene_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_room_scene_info_result::Swap(packetl2c_get_room_scene_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_id_, other->room_id_);
    player_list_.Swap(&other->player_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_room_scene_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_room_scene_info_result_descriptor_;
  metadata.reflection = packetl2c_get_room_scene_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_settlement::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_settlement::packetc2l_settlement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_settlement::InitAsDefaultInstance() {
}

packetc2l_settlement::packetc2l_settlement(const packetc2l_settlement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_settlement::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10023;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_settlement::~packetc2l_settlement() {
  SharedDtor();
}

void packetc2l_settlement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_settlement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_settlement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_settlement_descriptor_;
}

const packetc2l_settlement& packetc2l_settlement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_settlement* packetc2l_settlement::default_instance_ = NULL;

packetc2l_settlement* packetc2l_settlement::New() const {
  return new packetc2l_settlement;
}

void packetc2l_settlement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10023;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_settlement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_settlement];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_settlement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_settlement];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_settlement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_settlement];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_settlement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_settlement];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_settlement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_settlement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_settlement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_settlement::MergeFrom(const packetc2l_settlement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_settlement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_settlement::CopyFrom(const packetc2l_settlement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_settlement::IsInitialized() const {

  return true;
}

void packetc2l_settlement::Swap(packetc2l_settlement* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_settlement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_settlement_descriptor_;
  metadata.reflection = packetc2l_settlement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_settlement_result::kPacketIdFieldNumber;
const int packetl2c_settlement_result::kResultFieldNumber;
const int packetl2c_settlement_result::kGoldFieldNumber;
#endif  // !_MSC_VER

packetl2c_settlement_result::packetl2c_settlement_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_settlement_result::InitAsDefaultInstance() {
}

packetl2c_settlement_result::packetl2c_settlement_result(const packetl2c_settlement_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_settlement_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15023;
  result_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_settlement_result::~packetl2c_settlement_result() {
  SharedDtor();
}

void packetl2c_settlement_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_settlement_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_settlement_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_settlement_result_descriptor_;
}

const packetl2c_settlement_result& packetl2c_settlement_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_settlement_result* packetl2c_settlement_result::default_instance_ = NULL;

packetl2c_settlement_result* packetl2c_settlement_result::New() const {
  return new packetl2c_settlement_result;
}

void packetl2c_settlement_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15023;
    result_ = 0;
    gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_settlement_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_settlement_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // optional int64 gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_settlement_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_settlement_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int64 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_settlement_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_settlement_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int64 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_settlement_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_settlement_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_settlement_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_settlement_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_settlement_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_settlement_result::MergeFrom(const packetl2c_settlement_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_settlement_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_settlement_result::CopyFrom(const packetl2c_settlement_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_settlement_result::IsInitialized() const {

  return true;
}

void packetl2c_settlement_result::Swap(packetl2c_settlement_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_settlement_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_settlement_result_descriptor_;
  metadata.reflection = packetl2c_settlement_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int room_player::kPlayerIdFieldNumber;
const int room_player::kGoldFieldNumber;
const int room_player::kBetFieldNumber;
const int room_player::kProfitTodayFieldNumber;
#endif  // !_MSC_VER

room_player::room_player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void room_player::InitAsDefaultInstance() {
}

room_player::room_player(const room_player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void room_player::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  bet_ = GOOGLE_LONGLONG(0);
  profit_today_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

room_player::~room_player() {
  SharedDtor();
}

void room_player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void room_player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* room_player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return room_player_descriptor_;
}

const room_player& room_player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

room_player* room_player::default_instance_ = NULL;

room_player* room_player::New() const {
  return new room_player;
}

void room_player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    gold_ = GOOGLE_LONGLONG(0);
    bet_ = GOOGLE_LONGLONG(0);
    profit_today_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool room_player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional int64 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bet;
        break;
      }

      // optional int64 bet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_)));
          set_has_bet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_profit_today;
        break;
      }

      // optional int64 profit_today = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profit_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &profit_today_)));
          set_has_profit_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void room_player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gold(), output);
  }

  // optional int64 bet = 3;
  if (has_bet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bet(), output);
  }

  // optional int64 profit_today = 4;
  if (has_profit_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->profit_today(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* room_player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gold(), target);
  }

  // optional int64 bet = 3;
  if (has_bet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bet(), target);
  }

  // optional int64 profit_today = 4;
  if (has_profit_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->profit_today(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int room_player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int64 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int64 bet = 3;
    if (has_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet());
    }

    // optional int64 profit_today = 4;
    if (has_profit_today()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->profit_today());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void room_player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const room_player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const room_player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void room_player::MergeFrom(const room_player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_bet()) {
      set_bet(from.bet());
    }
    if (from.has_profit_today()) {
      set_profit_today(from.profit_today());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void room_player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void room_player::CopyFrom(const room_player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool room_player::IsInitialized() const {

  return true;
}

void room_player::Swap(room_player* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(gold_, other->gold_);
    std::swap(bet_, other->bet_);
    std::swap(profit_today_, other->profit_today_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata room_player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = room_player_descriptor_;
  metadata.reflection = room_player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_gm_get_room_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_gm_get_room_info::packetl2c_gm_get_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_gm_get_room_info::InitAsDefaultInstance() {
}

packetl2c_gm_get_room_info::packetl2c_gm_get_room_info(const packetl2c_gm_get_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_gm_get_room_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10101;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_gm_get_room_info::~packetl2c_gm_get_room_info() {
  SharedDtor();
}

void packetl2c_gm_get_room_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_gm_get_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_gm_get_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_gm_get_room_info_descriptor_;
}

const packetl2c_gm_get_room_info& packetl2c_gm_get_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_gm_get_room_info* packetl2c_gm_get_room_info::default_instance_ = NULL;

packetl2c_gm_get_room_info* packetl2c_gm_get_room_info::New() const {
  return new packetl2c_gm_get_room_info;
}

void packetl2c_gm_get_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10101;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_gm_get_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_get_room_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_gm_get_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_get_room_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_gm_get_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_get_room_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_gm_get_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_get_room_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_gm_get_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_gm_get_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_gm_get_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_gm_get_room_info::MergeFrom(const packetl2c_gm_get_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_gm_get_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_gm_get_room_info::CopyFrom(const packetl2c_gm_get_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_gm_get_room_info::IsInitialized() const {

  return true;
}

void packetl2c_gm_get_room_info::Swap(packetl2c_gm_get_room_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_gm_get_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_gm_get_room_info_descriptor_;
  metadata.reflection = packetl2c_gm_get_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_gm_get_room_info_result::kPacketIdFieldNumber;
const int packetl2c_gm_get_room_info_result::kResultFieldNumber;
const int packetl2c_gm_get_room_info_result::kKillcountFieldNumber;
const int packetl2c_gm_get_room_info_result::kPlayersFieldNumber;
#endif  // !_MSC_VER

packetl2c_gm_get_room_info_result::packetl2c_gm_get_room_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_gm_get_room_info_result::InitAsDefaultInstance() {
}

packetl2c_gm_get_room_info_result::packetl2c_gm_get_room_info_result(const packetl2c_gm_get_room_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_gm_get_room_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15101;
  result_ = 0;
  killcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_gm_get_room_info_result::~packetl2c_gm_get_room_info_result() {
  SharedDtor();
}

void packetl2c_gm_get_room_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_gm_get_room_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_gm_get_room_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_gm_get_room_info_result_descriptor_;
}

const packetl2c_gm_get_room_info_result& packetl2c_gm_get_room_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_gm_get_room_info_result* packetl2c_gm_get_room_info_result::default_instance_ = NULL;

packetl2c_gm_get_room_info_result* packetl2c_gm_get_room_info_result::New() const {
  return new packetl2c_gm_get_room_info_result;
}

void packetl2c_gm_get_room_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15101;
    result_ = 0;
    killcount_ = 0;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_gm_get_room_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_get_room_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_killcount;
        break;
      }

      // optional int32 killcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killcount_)));
          set_has_killcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_players;
        break;
      }

      // repeated .game_shuihz_protocols.room_player players = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_gm_get_room_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_get_room_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 killcount = 3;
  if (has_killcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->killcount(), output);
  }

  // repeated .game_shuihz_protocols.room_player players = 4;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_gm_get_room_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_get_room_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 killcount = 3;
  if (has_killcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->killcount(), target);
  }

  // repeated .game_shuihz_protocols.room_player players = 4;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_gm_get_room_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_get_room_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 killcount = 3;
    if (has_killcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killcount());
    }

  }
  // repeated .game_shuihz_protocols.room_player players = 4;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_gm_get_room_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_gm_get_room_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_gm_get_room_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_gm_get_room_info_result::MergeFrom(const packetl2c_gm_get_room_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_killcount()) {
      set_killcount(from.killcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_gm_get_room_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_gm_get_room_info_result::CopyFrom(const packetl2c_gm_get_room_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_gm_get_room_info_result::IsInitialized() const {

  return true;
}

void packetl2c_gm_get_room_info_result::Swap(packetl2c_gm_get_room_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(killcount_, other->killcount_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_gm_get_room_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_gm_get_room_info_result_descriptor_;
  metadata.reflection = packetl2c_gm_get_room_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_gm_do_kill::kPacketIdFieldNumber;
const int packetl2c_gm_do_kill::kKillcountFieldNumber;
#endif  // !_MSC_VER

packetl2c_gm_do_kill::packetl2c_gm_do_kill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_gm_do_kill::InitAsDefaultInstance() {
}

packetl2c_gm_do_kill::packetl2c_gm_do_kill(const packetl2c_gm_do_kill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_gm_do_kill::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10102;
  killcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_gm_do_kill::~packetl2c_gm_do_kill() {
  SharedDtor();
}

void packetl2c_gm_do_kill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_gm_do_kill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_gm_do_kill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_gm_do_kill_descriptor_;
}

const packetl2c_gm_do_kill& packetl2c_gm_do_kill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_gm_do_kill* packetl2c_gm_do_kill::default_instance_ = NULL;

packetl2c_gm_do_kill* packetl2c_gm_do_kill::New() const {
  return new packetl2c_gm_do_kill;
}

void packetl2c_gm_do_kill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10102;
    killcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_gm_do_kill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_do_kill];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_killcount;
        break;
      }

      // optional int32 killcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killcount_)));
          set_has_killcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_gm_do_kill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_do_kill];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 killcount = 2;
  if (has_killcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->killcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_gm_do_kill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_do_kill];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 killcount = 2;
  if (has_killcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->killcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_gm_do_kill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_do_kill];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 killcount = 2;
    if (has_killcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_gm_do_kill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_gm_do_kill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_gm_do_kill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_gm_do_kill::MergeFrom(const packetl2c_gm_do_kill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_killcount()) {
      set_killcount(from.killcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_gm_do_kill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_gm_do_kill::CopyFrom(const packetl2c_gm_do_kill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_gm_do_kill::IsInitialized() const {

  return true;
}

void packetl2c_gm_do_kill::Swap(packetl2c_gm_do_kill* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(killcount_, other->killcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_gm_do_kill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_gm_do_kill_descriptor_;
  metadata.reflection = packetl2c_gm_do_kill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_gm_do_kill_result::kPacketIdFieldNumber;
const int packetl2c_gm_do_kill_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_gm_do_kill_result::packetl2c_gm_do_kill_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_gm_do_kill_result::InitAsDefaultInstance() {
}

packetl2c_gm_do_kill_result::packetl2c_gm_do_kill_result(const packetl2c_gm_do_kill_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_gm_do_kill_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15102;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_gm_do_kill_result::~packetl2c_gm_do_kill_result() {
  SharedDtor();
}

void packetl2c_gm_do_kill_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_gm_do_kill_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_gm_do_kill_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_gm_do_kill_result_descriptor_;
}

const packetl2c_gm_do_kill_result& packetl2c_gm_do_kill_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshuihz_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_gm_do_kill_result* packetl2c_gm_do_kill_result::default_instance_ = NULL;

packetl2c_gm_do_kill_result* packetl2c_gm_do_kill_result::New() const {
  return new packetl2c_gm_do_kill_result;
}

void packetl2c_gm_do_kill_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15102;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_gm_do_kill_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_do_kill_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shuihz_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shuihz_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_gm_do_kill_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_do_kill_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_gm_do_kill_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_do_kill_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_gm_do_kill_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shuihz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_do_kill_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_gm_do_kill_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_gm_do_kill_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_gm_do_kill_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_gm_do_kill_result::MergeFrom(const packetl2c_gm_do_kill_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_gm_do_kill_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_gm_do_kill_result::CopyFrom(const packetl2c_gm_do_kill_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_gm_do_kill_result::IsInitialized() const {

  return true;
}

void packetl2c_gm_do_kill_result::Swap(packetl2c_gm_do_kill_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_gm_do_kill_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_gm_do_kill_result_descriptor_;
  metadata.reflection = packetl2c_gm_do_kill_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_shuihz_protocols

// @@protoc_insertion_point(global_scope)
