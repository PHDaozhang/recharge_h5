// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_rank.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client2world_rank.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

namespace {

const ::google::protobuf::Descriptor* msg_inviter_ranklist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_inviter_ranklist_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_inviter_ranklist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_inviter_ranklist_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_inviter_ranklist_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_inviter_ranklist_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_ranklist_receive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_ranklist_receive_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_ranklist_receive_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_ranklist_receive_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client2world_5frank_2eproto() {
  protobuf_AddDesc_client2world_5frank_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client2world_rank.proto");
  GOOGLE_CHECK(file != NULL);
  msg_inviter_ranklist_descriptor_ = file->message_type(0);
  static const int msg_inviter_ranklist_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_inviter_ranklist, photo_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_inviter_ranklist, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_inviter_ranklist, total_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_inviter_ranklist, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_inviter_ranklist, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_inviter_ranklist, icon_custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_inviter_ranklist, viplvl_),
  };
  msg_inviter_ranklist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_inviter_ranklist_descriptor_,
      msg_inviter_ranklist::default_instance_,
      msg_inviter_ranklist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_inviter_ranklist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_inviter_ranklist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_inviter_ranklist));
  packetc2w_inviter_ranklist_descriptor_ = file->message_type(1);
  static const int packetc2w_inviter_ranklist_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_inviter_ranklist, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_inviter_ranklist, type_),
  };
  packetc2w_inviter_ranklist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_inviter_ranklist_descriptor_,
      packetc2w_inviter_ranklist::default_instance_,
      packetc2w_inviter_ranklist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_inviter_ranklist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_inviter_ranklist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_inviter_ranklist));
  packetw2c_inviter_ranklist_result_descriptor_ = file->message_type(2);
  static const int packetw2c_inviter_ranklist_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_inviter_ranklist_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_inviter_ranklist_result, ranking_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_inviter_ranklist_result, self_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_inviter_ranklist_result, type_),
  };
  packetw2c_inviter_ranklist_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_inviter_ranklist_result_descriptor_,
      packetw2c_inviter_ranklist_result::default_instance_,
      packetw2c_inviter_ranklist_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_inviter_ranklist_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_inviter_ranklist_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_inviter_ranklist_result));
  packetc2w_ranklist_receive_descriptor_ = file->message_type(3);
  static const int packetc2w_ranklist_receive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ranklist_receive, packet_id_),
  };
  packetc2w_ranklist_receive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_ranklist_receive_descriptor_,
      packetc2w_ranklist_receive::default_instance_,
      packetc2w_ranklist_receive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ranklist_receive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ranklist_receive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_ranklist_receive));
  packetw2c_ranklist_receive_result_descriptor_ = file->message_type(4);
  static const int packetw2c_ranklist_receive_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ranklist_receive_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ranklist_receive_result, reward_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ranklist_receive_result, reward_week_),
  };
  packetw2c_ranklist_receive_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_ranklist_receive_result_descriptor_,
      packetw2c_ranklist_receive_result::default_instance_,
      packetw2c_ranklist_receive_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ranklist_receive_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ranklist_receive_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_ranklist_receive_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client2world_5frank_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_inviter_ranklist_descriptor_, &msg_inviter_ranklist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_inviter_ranklist_descriptor_, &packetc2w_inviter_ranklist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_inviter_ranklist_result_descriptor_, &packetw2c_inviter_ranklist_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_ranklist_receive_descriptor_, &packetc2w_ranklist_receive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_ranklist_receive_result_descriptor_, &packetw2c_ranklist_receive_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client2world_5frank_2eproto() {
  delete msg_inviter_ranklist::default_instance_;
  delete msg_inviter_ranklist_reflection_;
  delete packetc2w_inviter_ranklist::default_instance_;
  delete packetc2w_inviter_ranklist_reflection_;
  delete packetw2c_inviter_ranklist_result::default_instance_;
  delete packetw2c_inviter_ranklist_result_reflection_;
  delete packetc2w_ranklist_receive::default_instance_;
  delete packetc2w_ranklist_receive_reflection_;
  delete packetw2c_ranklist_receive_result::default_instance_;
  delete packetw2c_ranklist_receive_result_reflection_;
}

void protobuf_AddDesc_client2world_5frank_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client2world_protocols::protobuf_AddDesc_client2world_5fmsg_5ftype_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027client2world_rank.proto\022\026client2world_"
    "protocols\032\033client2world_msg_type.proto\032\022"
    "msg_type_def.proto\032\022msg_info_def.proto\"\234"
    "\001\n\024msg_inviter_ranklist\022\023\n\013photo_frame\030\001"
    " \001(\005\022\021\n\tnick_name\030\002 \001(\t\022\024\n\014total_reward\030"
    "\003 \001(\003\022\021\n\tplayer_id\030\004 \001(\005\022\016\n\006reward\030\005 \001(\003"
    "\022\023\n\013icon_custom\030\006 \001(\t\022\016\n\006viplvl\030\007 \001(\005\"\204\001"
    "\n\032packetc2w_inviter_ranklist\022X\n\tpacket_i"
    "d\030\001 \001(\0162).client2world_protocols.e_serve"
    "r_msg_type:\032e_mst_c2w_inviter_ranklist\022\014"
    "\n\004type\030\002 \001(\005\"\227\002\n!packetw2c_inviter_rankl"
    "ist_result\022_\n\tpacket_id\030\001 \001(\0162).client2w"
    "orld_protocols.e_server_msg_type:!e_mst_"
    "w2c_inviter_ranklist_result\022B\n\014ranking_l"
    "ist\030\002 \003(\0132,.client2world_protocols.msg_i"
    "nviter_ranklist\022\?\n\tself_info\030\003 \001(\0132,.cli"
    "ent2world_protocols.msg_inviter_ranklist"
    "\022\014\n\004type\030\004 \001(\005\"v\n\032packetc2w_ranklist_rec"
    "eive\022X\n\tpacket_id\030\001 \001(\0162).client2world_p"
    "rotocols.e_server_msg_type:\032e_mst_c2w_ra"
    "nklist_receive\"\255\001\n!packetw2c_ranklist_re"
    "ceive_result\022_\n\tpacket_id\030\001 \001(\0162).client"
    "2world_protocols.e_server_msg_type:!e_ms"
    "t_w2c_ranklist_receive_result\022\022\n\nreward_"
    "day\030\002 \003(\003\022\023\n\013reward_week\030\003 \003(\003", 990);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client2world_rank.proto", &protobuf_RegisterTypes);
  msg_inviter_ranklist::default_instance_ = new msg_inviter_ranklist();
  packetc2w_inviter_ranklist::default_instance_ = new packetc2w_inviter_ranklist();
  packetw2c_inviter_ranklist_result::default_instance_ = new packetw2c_inviter_ranklist_result();
  packetc2w_ranklist_receive::default_instance_ = new packetc2w_ranklist_receive();
  packetw2c_ranklist_receive_result::default_instance_ = new packetw2c_ranklist_receive_result();
  msg_inviter_ranklist::default_instance_->InitAsDefaultInstance();
  packetc2w_inviter_ranklist::default_instance_->InitAsDefaultInstance();
  packetw2c_inviter_ranklist_result::default_instance_->InitAsDefaultInstance();
  packetc2w_ranklist_receive::default_instance_->InitAsDefaultInstance();
  packetw2c_ranklist_receive_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client2world_5frank_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client2world_5frank_2eproto {
  StaticDescriptorInitializer_client2world_5frank_2eproto() {
    protobuf_AddDesc_client2world_5frank_2eproto();
  }
} static_descriptor_initializer_client2world_5frank_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_inviter_ranklist::kPhotoFrameFieldNumber;
const int msg_inviter_ranklist::kNickNameFieldNumber;
const int msg_inviter_ranklist::kTotalRewardFieldNumber;
const int msg_inviter_ranklist::kPlayerIdFieldNumber;
const int msg_inviter_ranklist::kRewardFieldNumber;
const int msg_inviter_ranklist::kIconCustomFieldNumber;
const int msg_inviter_ranklist::kViplvlFieldNumber;
#endif  // !_MSC_VER

msg_inviter_ranklist::msg_inviter_ranklist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_inviter_ranklist::InitAsDefaultInstance() {
}

msg_inviter_ranklist::msg_inviter_ranklist(const msg_inviter_ranklist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_inviter_ranklist::SharedCtor() {
  _cached_size_ = 0;
  photo_frame_ = 0;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_reward_ = GOOGLE_LONGLONG(0);
  player_id_ = 0;
  reward_ = GOOGLE_LONGLONG(0);
  icon_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  viplvl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_inviter_ranklist::~msg_inviter_ranklist() {
  SharedDtor();
}

void msg_inviter_ranklist::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (icon_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_custom_;
  }
  if (this != default_instance_) {
  }
}

void msg_inviter_ranklist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_inviter_ranklist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_inviter_ranklist_descriptor_;
}

const msg_inviter_ranklist& msg_inviter_ranklist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5frank_2eproto();
  return *default_instance_;
}

msg_inviter_ranklist* msg_inviter_ranklist::default_instance_ = NULL;

msg_inviter_ranklist* msg_inviter_ranklist::New() const {
  return new msg_inviter_ranklist;
}

void msg_inviter_ranklist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    photo_frame_ = 0;
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    total_reward_ = GOOGLE_LONGLONG(0);
    player_id_ = 0;
    reward_ = GOOGLE_LONGLONG(0);
    if (has_icon_custom()) {
      if (icon_custom_ != &::google::protobuf::internal::kEmptyString) {
        icon_custom_->clear();
      }
    }
    viplvl_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_inviter_ranklist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 photo_frame = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photo_frame_)));
          set_has_photo_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_reward;
        break;
      }

      // optional int64 total_reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_reward_)));
          set_has_total_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reward;
        break;
      }

      // optional int64 reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_icon_custom;
        break;
      }

      // optional string icon_custom = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon_custom().data(), this->icon_custom().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_viplvl;
        break;
      }

      // optional int32 viplvl = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplvl_)));
          set_has_viplvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_inviter_ranklist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 photo_frame = 1;
  if (has_photo_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->photo_frame(), output);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick_name(), output);
  }

  // optional int64 total_reward = 3;
  if (has_total_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->total_reward(), output);
  }

  // optional int32 player_id = 4;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->player_id(), output);
  }

  // optional int64 reward = 5;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->reward(), output);
  }

  // optional string icon_custom = 6;
  if (has_icon_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon_custom().data(), this->icon_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->icon_custom(), output);
  }

  // optional int32 viplvl = 7;
  if (has_viplvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->viplvl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_inviter_ranklist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 photo_frame = 1;
  if (has_photo_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->photo_frame(), target);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick_name(), target);
  }

  // optional int64 total_reward = 3;
  if (has_total_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->total_reward(), target);
  }

  // optional int32 player_id = 4;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->player_id(), target);
  }

  // optional int64 reward = 5;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->reward(), target);
  }

  // optional string icon_custom = 6;
  if (has_icon_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon_custom().data(), this->icon_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->icon_custom(), target);
  }

  // optional int32 viplvl = 7;
  if (has_viplvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->viplvl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_inviter_ranklist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 photo_frame = 1;
    if (has_photo_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->photo_frame());
    }

    // optional string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional int64 total_reward = 3;
    if (has_total_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_reward());
    }

    // optional int32 player_id = 4;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int64 reward = 5;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reward());
    }

    // optional string icon_custom = 6;
    if (has_icon_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_custom());
    }

    // optional int32 viplvl = 7;
    if (has_viplvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplvl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_inviter_ranklist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_inviter_ranklist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_inviter_ranklist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_inviter_ranklist::MergeFrom(const msg_inviter_ranklist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_photo_frame()) {
      set_photo_frame(from.photo_frame());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_total_reward()) {
      set_total_reward(from.total_reward());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_icon_custom()) {
      set_icon_custom(from.icon_custom());
    }
    if (from.has_viplvl()) {
      set_viplvl(from.viplvl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_inviter_ranklist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_inviter_ranklist::CopyFrom(const msg_inviter_ranklist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_inviter_ranklist::IsInitialized() const {

  return true;
}

void msg_inviter_ranklist::Swap(msg_inviter_ranklist* other) {
  if (other != this) {
    std::swap(photo_frame_, other->photo_frame_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(total_reward_, other->total_reward_);
    std::swap(player_id_, other->player_id_);
    std::swap(reward_, other->reward_);
    std::swap(icon_custom_, other->icon_custom_);
    std::swap(viplvl_, other->viplvl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_inviter_ranklist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_inviter_ranklist_descriptor_;
  metadata.reflection = msg_inviter_ranklist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_inviter_ranklist::kPacketIdFieldNumber;
const int packetc2w_inviter_ranklist::kTypeFieldNumber;
#endif  // !_MSC_VER

packetc2w_inviter_ranklist::packetc2w_inviter_ranklist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_inviter_ranklist::InitAsDefaultInstance() {
}

packetc2w_inviter_ranklist::packetc2w_inviter_ranklist(const packetc2w_inviter_ranklist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_inviter_ranklist::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5090;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_inviter_ranklist::~packetc2w_inviter_ranklist() {
  SharedDtor();
}

void packetc2w_inviter_ranklist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_inviter_ranklist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_inviter_ranklist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_inviter_ranklist_descriptor_;
}

const packetc2w_inviter_ranklist& packetc2w_inviter_ranklist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5frank_2eproto();
  return *default_instance_;
}

packetc2w_inviter_ranklist* packetc2w_inviter_ranklist::default_instance_ = NULL;

packetc2w_inviter_ranklist* packetc2w_inviter_ranklist::New() const {
  return new packetc2w_inviter_ranklist;
}

void packetc2w_inviter_ranklist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5090;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_inviter_ranklist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_inviter_ranklist];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_inviter_ranklist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_inviter_ranklist];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_inviter_ranklist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_inviter_ranklist];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_inviter_ranklist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_inviter_ranklist];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_inviter_ranklist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_inviter_ranklist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_inviter_ranklist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_inviter_ranklist::MergeFrom(const packetc2w_inviter_ranklist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_inviter_ranklist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_inviter_ranklist::CopyFrom(const packetc2w_inviter_ranklist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_inviter_ranklist::IsInitialized() const {

  return true;
}

void packetc2w_inviter_ranklist::Swap(packetc2w_inviter_ranklist* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_inviter_ranklist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_inviter_ranklist_descriptor_;
  metadata.reflection = packetc2w_inviter_ranklist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_inviter_ranklist_result::kPacketIdFieldNumber;
const int packetw2c_inviter_ranklist_result::kRankingListFieldNumber;
const int packetw2c_inviter_ranklist_result::kSelfInfoFieldNumber;
const int packetw2c_inviter_ranklist_result::kTypeFieldNumber;
#endif  // !_MSC_VER

packetw2c_inviter_ranklist_result::packetw2c_inviter_ranklist_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_inviter_ranklist_result::InitAsDefaultInstance() {
  self_info_ = const_cast< ::client2world_protocols::msg_inviter_ranklist*>(&::client2world_protocols::msg_inviter_ranklist::default_instance());
}

packetw2c_inviter_ranklist_result::packetw2c_inviter_ranklist_result(const packetw2c_inviter_ranklist_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_inviter_ranklist_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7598;
  self_info_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_inviter_ranklist_result::~packetw2c_inviter_ranklist_result() {
  SharedDtor();
}

void packetw2c_inviter_ranklist_result::SharedDtor() {
  if (this != default_instance_) {
    delete self_info_;
  }
}

void packetw2c_inviter_ranklist_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_inviter_ranklist_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_inviter_ranklist_result_descriptor_;
}

const packetw2c_inviter_ranklist_result& packetw2c_inviter_ranklist_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5frank_2eproto();
  return *default_instance_;
}

packetw2c_inviter_ranklist_result* packetw2c_inviter_ranklist_result::default_instance_ = NULL;

packetw2c_inviter_ranklist_result* packetw2c_inviter_ranklist_result::New() const {
  return new packetw2c_inviter_ranklist_result;
}

void packetw2c_inviter_ranklist_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7598;
    if (has_self_info()) {
      if (self_info_ != NULL) self_info_->::client2world_protocols::msg_inviter_ranklist::Clear();
    }
    type_ = 0;
  }
  ranking_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_inviter_ranklist_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_inviter_ranklist_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ranking_list;
        break;
      }

      // repeated .client2world_protocols.msg_inviter_ranklist ranking_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranking_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranking_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ranking_list;
        if (input->ExpectTag(26)) goto parse_self_info;
        break;
      }

      // optional .client2world_protocols.msg_inviter_ranklist self_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_inviter_ranklist_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_inviter_ranklist_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_inviter_ranklist ranking_list = 2;
  for (int i = 0; i < this->ranking_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ranking_list(i), output);
  }

  // optional .client2world_protocols.msg_inviter_ranklist self_info = 3;
  if (has_self_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->self_info(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_inviter_ranklist_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_inviter_ranklist_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_inviter_ranklist ranking_list = 2;
  for (int i = 0; i < this->ranking_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ranking_list(i), target);
  }

  // optional .client2world_protocols.msg_inviter_ranklist self_info = 3;
  if (has_self_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->self_info(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_inviter_ranklist_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_inviter_ranklist_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .client2world_protocols.msg_inviter_ranklist self_info = 3;
    if (has_self_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self_info());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .client2world_protocols.msg_inviter_ranklist ranking_list = 2;
  total_size += 1 * this->ranking_list_size();
  for (int i = 0; i < this->ranking_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranking_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_inviter_ranklist_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_inviter_ranklist_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_inviter_ranklist_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_inviter_ranklist_result::MergeFrom(const packetw2c_inviter_ranklist_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranking_list_.MergeFrom(from.ranking_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_self_info()) {
      mutable_self_info()->::client2world_protocols::msg_inviter_ranklist::MergeFrom(from.self_info());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_inviter_ranklist_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_inviter_ranklist_result::CopyFrom(const packetw2c_inviter_ranklist_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_inviter_ranklist_result::IsInitialized() const {

  return true;
}

void packetw2c_inviter_ranklist_result::Swap(packetw2c_inviter_ranklist_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    ranking_list_.Swap(&other->ranking_list_);
    std::swap(self_info_, other->self_info_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_inviter_ranklist_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_inviter_ranklist_result_descriptor_;
  metadata.reflection = packetw2c_inviter_ranklist_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_ranklist_receive::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_ranklist_receive::packetc2w_ranklist_receive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_ranklist_receive::InitAsDefaultInstance() {
}

packetc2w_ranklist_receive::packetc2w_ranklist_receive(const packetc2w_ranklist_receive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_ranklist_receive::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5101;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_ranklist_receive::~packetc2w_ranklist_receive() {
  SharedDtor();
}

void packetc2w_ranklist_receive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_ranklist_receive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_ranklist_receive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_ranklist_receive_descriptor_;
}

const packetc2w_ranklist_receive& packetc2w_ranklist_receive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5frank_2eproto();
  return *default_instance_;
}

packetc2w_ranklist_receive* packetc2w_ranklist_receive::default_instance_ = NULL;

packetc2w_ranklist_receive* packetc2w_ranklist_receive::New() const {
  return new packetc2w_ranklist_receive;
}

void packetc2w_ranklist_receive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5101;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_ranklist_receive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ranklist_receive];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_ranklist_receive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ranklist_receive];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_ranklist_receive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ranklist_receive];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_ranklist_receive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ranklist_receive];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_ranklist_receive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_ranklist_receive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_ranklist_receive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_ranklist_receive::MergeFrom(const packetc2w_ranklist_receive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_ranklist_receive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_ranklist_receive::CopyFrom(const packetc2w_ranklist_receive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_ranklist_receive::IsInitialized() const {

  return true;
}

void packetc2w_ranklist_receive::Swap(packetc2w_ranklist_receive* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_ranklist_receive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_ranklist_receive_descriptor_;
  metadata.reflection = packetc2w_ranklist_receive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_ranklist_receive_result::kPacketIdFieldNumber;
const int packetw2c_ranklist_receive_result::kRewardDayFieldNumber;
const int packetw2c_ranklist_receive_result::kRewardWeekFieldNumber;
#endif  // !_MSC_VER

packetw2c_ranklist_receive_result::packetw2c_ranklist_receive_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_ranklist_receive_result::InitAsDefaultInstance() {
}

packetw2c_ranklist_receive_result::packetw2c_ranklist_receive_result(const packetw2c_ranklist_receive_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_ranklist_receive_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7610;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_ranklist_receive_result::~packetw2c_ranklist_receive_result() {
  SharedDtor();
}

void packetw2c_ranklist_receive_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_ranklist_receive_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_ranklist_receive_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_ranklist_receive_result_descriptor_;
}

const packetw2c_ranklist_receive_result& packetw2c_ranklist_receive_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5frank_2eproto();
  return *default_instance_;
}

packetw2c_ranklist_receive_result* packetw2c_ranklist_receive_result::default_instance_ = NULL;

packetw2c_ranklist_receive_result* packetw2c_ranklist_receive_result::New() const {
  return new packetw2c_ranklist_receive_result;
}

void packetw2c_ranklist_receive_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7610;
  }
  reward_day_.Clear();
  reward_week_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_ranklist_receive_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ranklist_receive_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_day;
        break;
      }

      // repeated int64 reward_day = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_reward_day())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_reward_day())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_day;
        if (input->ExpectTag(24)) goto parse_reward_week;
        break;
      }

      // repeated int64 reward_week = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_reward_week())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_reward_week())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward_week;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_ranklist_receive_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ranklist_receive_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated int64 reward_day = 2;
  for (int i = 0; i < this->reward_day_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->reward_day(i), output);
  }

  // repeated int64 reward_week = 3;
  for (int i = 0; i < this->reward_week_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->reward_week(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_ranklist_receive_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ranklist_receive_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated int64 reward_day = 2;
  for (int i = 0; i < this->reward_day_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->reward_day(i), target);
  }

  // repeated int64 reward_week = 3;
  for (int i = 0; i < this->reward_week_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->reward_week(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_ranklist_receive_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ranklist_receive_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated int64 reward_day = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->reward_day_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->reward_day(i));
    }
    total_size += 1 * this->reward_day_size() + data_size;
  }

  // repeated int64 reward_week = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->reward_week_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->reward_week(i));
    }
    total_size += 1 * this->reward_week_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_ranklist_receive_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_ranklist_receive_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_ranklist_receive_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_ranklist_receive_result::MergeFrom(const packetw2c_ranklist_receive_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_day_.MergeFrom(from.reward_day_);
  reward_week_.MergeFrom(from.reward_week_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_ranklist_receive_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_ranklist_receive_result::CopyFrom(const packetw2c_ranklist_receive_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_ranklist_receive_result::IsInitialized() const {

  return true;
}

void packetw2c_ranklist_receive_result::Swap(packetw2c_ranklist_receive_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    reward_day_.Swap(&other->reward_day_);
    reward_week_.Swap(&other->reward_week_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_ranklist_receive_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_ranklist_receive_result_descriptor_;
  metadata.reflection = packetw2c_ranklist_receive_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

// @@protoc_insertion_point(global_scope)
