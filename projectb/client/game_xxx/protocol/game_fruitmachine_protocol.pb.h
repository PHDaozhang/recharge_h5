// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_fruitmachine_protocol.proto

#ifndef PROTOBUF_game_5ffruitmachine_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_game_5ffruitmachine_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "game_fruitmachine_def.pb.h"
#include "msg_type_def.pb.h"
// @@protoc_insertion_point(includes)

namespace game_fruitmachine_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

class msg_room_info;
class packetc2l_get_room_info;
class packetl2c_get_room_info_result;
class packetc2l_enter_room;
class packetl2c_enter_room_result;
class packetc2l_check_state;
class packetl2c_check_state_result;
class packetc2l_get_room_scene_info;
class packetl2c_get_room_scene_info_result;
class packetc2l_leave_room;
class packetl2c_leave_room_result;
class packetc2l_add_bet;
class packetl2c_add_bet_result;
class packetc2l_repeat_bet;
class packetl2c_repeat_bet_result;
class packetc2l_start_game;
class packetl2c_start_game_result;
class packetc2l_start_bigsmall;
class packetl2c_start_bigsmall_result;
class packetc2l_break_bigsmall;
class packetl2c_break_bigsmall_result;
class packetc2l_cancel_bet;
class packetl2c_cancel_bet_result;
class player_info;
class packetl2c_player_list;
class packetc2l_debug;
class packetl2c_debug_result;

// ===================================================================

class msg_room_info : public ::google::protobuf::Message {
 public:
  msg_room_info();
  virtual ~msg_room_info();

  msg_room_info(const msg_room_info& from);

  inline msg_room_info& operator=(const msg_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_room_info& default_instance();

  void Swap(msg_room_info* other);

  // implements Message ----------------------------------------------

  msg_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_room_info& from);
  void MergeFrom(const msg_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.msg_room_info)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_room_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_room_info();
  virtual ~packetc2l_get_room_info();

  packetc2l_get_room_info(const packetc2l_get_room_info& from);

  inline packetc2l_get_room_info& operator=(const packetc2l_get_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_room_info& default_instance();

  void Swap(packetc2l_get_room_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_room_info& from);
  void MergeFrom(const packetc2l_get_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetc2l_get_room_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_get_room_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_get_room_info_result();
  virtual ~packetl2c_get_room_info_result();

  packetl2c_get_room_info_result(const packetl2c_get_room_info_result& from);

  inline packetl2c_get_room_info_result& operator=(const packetl2c_get_room_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_get_room_info_result& default_instance();

  void Swap(packetl2c_get_room_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_get_room_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_get_room_info_result& from);
  void MergeFrom(const packetl2c_get_room_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // repeated .game_fruitmachine_protocols.msg_room_info room_list = 2;
  inline int room_list_size() const;
  inline void clear_room_list();
  static const int kRoomListFieldNumber = 2;
  inline const ::game_fruitmachine_protocols::msg_room_info& room_list(int index) const;
  inline ::game_fruitmachine_protocols::msg_room_info* mutable_room_list(int index);
  inline ::game_fruitmachine_protocols::msg_room_info* add_room_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::msg_room_info >&
      room_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::msg_room_info >*
      mutable_room_list();

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetl2c_get_room_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::msg_room_info > room_list_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_get_room_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_enter_room : public ::google::protobuf::Message {
 public:
  packetc2l_enter_room();
  virtual ~packetc2l_enter_room();

  packetc2l_enter_room(const packetc2l_enter_room& from);

  inline packetc2l_enter_room& operator=(const packetc2l_enter_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_enter_room& default_instance();

  void Swap(packetc2l_enter_room* other);

  // implements Message ----------------------------------------------

  packetc2l_enter_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_enter_room& from);
  void MergeFrom(const packetc2l_enter_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // optional int32 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetc2l_enter_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_enter_room* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_enter_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_enter_room_result();
  virtual ~packetl2c_enter_room_result();

  packetl2c_enter_room_result(const packetl2c_enter_room_result& from);

  inline packetl2c_enter_room_result& operator=(const packetl2c_enter_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_enter_room_result& default_instance();

  void Swap(packetl2c_enter_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_enter_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_enter_room_result& from);
  void MergeFrom(const packetl2c_enter_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetl2c_enter_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_enter_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_check_state : public ::google::protobuf::Message {
 public:
  packetc2l_check_state();
  virtual ~packetc2l_check_state();

  packetc2l_check_state(const packetc2l_check_state& from);

  inline packetc2l_check_state& operator=(const packetc2l_check_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_check_state& default_instance();

  void Swap(packetc2l_check_state* other);

  // implements Message ----------------------------------------------

  packetc2l_check_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_check_state& from);
  void MergeFrom(const packetc2l_check_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetc2l_check_state)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_check_state* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_check_state_result : public ::google::protobuf::Message {
 public:
  packetl2c_check_state_result();
  virtual ~packetl2c_check_state_result();

  packetl2c_check_state_result(const packetl2c_check_state_result& from);

  inline packetl2c_check_state_result& operator=(const packetl2c_check_state_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_check_state_result& default_instance();

  void Swap(packetl2c_check_state_result* other);

  // implements Message ----------------------------------------------

  packetl2c_check_state_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_check_state_result& from);
  void MergeFrom(const packetl2c_check_state_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // optional bool is_intable = 2 [default = false];
  inline bool has_is_intable() const;
  inline void clear_is_intable();
  static const int kIsIntableFieldNumber = 2;
  inline bool is_intable() const;
  inline void set_is_intable(bool value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetl2c_check_state_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_is_intable();
  inline void clear_has_is_intable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  bool is_intable_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_check_state_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_room_scene_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_room_scene_info();
  virtual ~packetc2l_get_room_scene_info();

  packetc2l_get_room_scene_info(const packetc2l_get_room_scene_info& from);

  inline packetc2l_get_room_scene_info& operator=(const packetc2l_get_room_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_room_scene_info& default_instance();

  void Swap(packetc2l_get_room_scene_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_room_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_room_scene_info& from);
  void MergeFrom(const packetc2l_get_room_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetc2l_get_room_scene_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_room_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_get_room_scene_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_get_room_scene_info_result();
  virtual ~packetl2c_get_room_scene_info_result();

  packetl2c_get_room_scene_info_result(const packetl2c_get_room_scene_info_result& from);

  inline packetl2c_get_room_scene_info_result& operator=(const packetl2c_get_room_scene_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_get_room_scene_info_result& default_instance();

  void Swap(packetl2c_get_room_scene_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_get_room_scene_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_get_room_scene_info_result& from);
  void MergeFrom(const packetl2c_get_room_scene_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // repeated int32 history_list = 3;
  inline int history_list_size() const;
  inline void clear_history_list();
  static const int kHistoryListFieldNumber = 3;
  inline ::google::protobuf::int32 history_list(int index) const;
  inline void set_history_list(int index, ::google::protobuf::int32 value);
  inline void add_history_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      history_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_history_list();

  // optional .game_fruitmachine_protocols.e_game_state game_state = 4;
  inline bool has_game_state() const;
  inline void clear_game_state();
  static const int kGameStateFieldNumber = 4;
  inline ::game_fruitmachine_protocols::e_game_state game_state() const;
  inline void set_game_state(::game_fruitmachine_protocols::e_game_state value);

  // repeated .game_fruitmachine_protocols.msg_bet_info bet_info = 5;
  inline int bet_info_size() const;
  inline void clear_bet_info();
  static const int kBetInfoFieldNumber = 5;
  inline const ::game_fruitmachine_protocols::msg_bet_info& bet_info(int index) const;
  inline ::game_fruitmachine_protocols::msg_bet_info* mutable_bet_info(int index);
  inline ::game_fruitmachine_protocols::msg_bet_info* add_bet_info();
  inline const ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::msg_bet_info >&
      bet_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::msg_bet_info >*
      mutable_bet_info();

  // optional int32 reward_gold = 6;
  inline bool has_reward_gold() const;
  inline void clear_reward_gold();
  static const int kRewardGoldFieldNumber = 6;
  inline ::google::protobuf::int32 reward_gold() const;
  inline void set_reward_gold(::google::protobuf::int32 value);

  // optional int32 result_index = 7;
  inline bool has_result_index() const;
  inline void clear_result_index();
  static const int kResultIndexFieldNumber = 7;
  inline ::google::protobuf::int32 result_index() const;
  inline void set_result_index(::google::protobuf::int32 value);

  // repeated int32 index_array = 8;
  inline int index_array_size() const;
  inline void clear_index_array();
  static const int kIndexArrayFieldNumber = 8;
  inline ::google::protobuf::int32 index_array(int index) const;
  inline void set_index_array(int index, ::google::protobuf::int32 value);
  inline void add_index_array(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      index_array() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_index_array();

  // optional int64 gold = 9;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 9;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int64 bigsmall_gold = 10;
  inline bool has_bigsmall_gold() const;
  inline void clear_bigsmall_gold();
  static const int kBigsmallGoldFieldNumber = 10;
  inline ::google::protobuf::int64 bigsmall_gold() const;
  inline void set_bigsmall_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetl2c_get_room_scene_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_game_state();
  inline void clear_has_game_state();
  inline void set_has_reward_gold();
  inline void clear_has_reward_gold();
  inline void set_has_result_index();
  inline void clear_has_result_index();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_bigsmall_gold();
  inline void clear_has_bigsmall_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > history_list_;
  ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::msg_bet_info > bet_info_;
  int game_state_;
  ::google::protobuf::int32 reward_gold_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > index_array_;
  ::google::protobuf::int64 gold_;
  ::google::protobuf::int64 bigsmall_gold_;
  ::google::protobuf::int32 result_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_get_room_scene_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_leave_room : public ::google::protobuf::Message {
 public:
  packetc2l_leave_room();
  virtual ~packetc2l_leave_room();

  packetc2l_leave_room(const packetc2l_leave_room& from);

  inline packetc2l_leave_room& operator=(const packetc2l_leave_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_leave_room& default_instance();

  void Swap(packetc2l_leave_room* other);

  // implements Message ----------------------------------------------

  packetc2l_leave_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_leave_room& from);
  void MergeFrom(const packetc2l_leave_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetc2l_leave_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_leave_room* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_leave_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_leave_room_result();
  virtual ~packetl2c_leave_room_result();

  packetl2c_leave_room_result(const packetl2c_leave_room_result& from);

  inline packetl2c_leave_room_result& operator=(const packetl2c_leave_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_leave_room_result& default_instance();

  void Swap(packetl2c_leave_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_leave_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_leave_room_result& from);
  void MergeFrom(const packetl2c_leave_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetl2c_leave_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_leave_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_add_bet : public ::google::protobuf::Message {
 public:
  packetc2l_add_bet();
  virtual ~packetc2l_add_bet();

  packetc2l_add_bet(const packetc2l_add_bet& from);

  inline packetc2l_add_bet& operator=(const packetc2l_add_bet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_add_bet& default_instance();

  void Swap(packetc2l_add_bet* other);

  // implements Message ----------------------------------------------

  packetc2l_add_bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_add_bet& from);
  void MergeFrom(const packetc2l_add_bet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_add_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // optional .game_fruitmachine_protocols.msg_bet_info bet_info = 2;
  inline bool has_bet_info() const;
  inline void clear_bet_info();
  static const int kBetInfoFieldNumber = 2;
  inline const ::game_fruitmachine_protocols::msg_bet_info& bet_info() const;
  inline ::game_fruitmachine_protocols::msg_bet_info* mutable_bet_info();
  inline ::game_fruitmachine_protocols::msg_bet_info* release_bet_info();
  inline void set_allocated_bet_info(::game_fruitmachine_protocols::msg_bet_info* bet_info);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetc2l_add_bet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_bet_info();
  inline void clear_has_bet_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game_fruitmachine_protocols::msg_bet_info* bet_info_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_add_bet* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_add_bet_result : public ::google::protobuf::Message {
 public:
  packetl2c_add_bet_result();
  virtual ~packetl2c_add_bet_result();

  packetl2c_add_bet_result(const packetl2c_add_bet_result& from);

  inline packetl2c_add_bet_result& operator=(const packetl2c_add_bet_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_add_bet_result& default_instance();

  void Swap(packetl2c_add_bet_result* other);

  // implements Message ----------------------------------------------

  packetl2c_add_bet_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_add_bet_result& from);
  void MergeFrom(const packetl2c_add_bet_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_add_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional .game_fruitmachine_protocols.msg_bet_info bet_info = 3;
  inline bool has_bet_info() const;
  inline void clear_bet_info();
  static const int kBetInfoFieldNumber = 3;
  inline const ::game_fruitmachine_protocols::msg_bet_info& bet_info() const;
  inline ::game_fruitmachine_protocols::msg_bet_info* mutable_bet_info();
  inline ::game_fruitmachine_protocols::msg_bet_info* release_bet_info();
  inline void set_allocated_bet_info(::game_fruitmachine_protocols::msg_bet_info* bet_info);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetl2c_add_bet_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_bet_info();
  inline void clear_has_bet_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::game_fruitmachine_protocols::msg_bet_info* bet_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_add_bet_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_repeat_bet : public ::google::protobuf::Message {
 public:
  packetc2l_repeat_bet();
  virtual ~packetc2l_repeat_bet();

  packetc2l_repeat_bet(const packetc2l_repeat_bet& from);

  inline packetc2l_repeat_bet& operator=(const packetc2l_repeat_bet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_repeat_bet& default_instance();

  void Swap(packetc2l_repeat_bet* other);

  // implements Message ----------------------------------------------

  packetc2l_repeat_bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_repeat_bet& from);
  void MergeFrom(const packetc2l_repeat_bet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_repeat_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetc2l_repeat_bet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_repeat_bet* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_repeat_bet_result : public ::google::protobuf::Message {
 public:
  packetl2c_repeat_bet_result();
  virtual ~packetl2c_repeat_bet_result();

  packetl2c_repeat_bet_result(const packetl2c_repeat_bet_result& from);

  inline packetl2c_repeat_bet_result& operator=(const packetl2c_repeat_bet_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_repeat_bet_result& default_instance();

  void Swap(packetl2c_repeat_bet_result* other);

  // implements Message ----------------------------------------------

  packetl2c_repeat_bet_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_repeat_bet_result& from);
  void MergeFrom(const packetl2c_repeat_bet_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_repeat_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // repeated .game_fruitmachine_protocols.msg_bet_info bet_info = 3;
  inline int bet_info_size() const;
  inline void clear_bet_info();
  static const int kBetInfoFieldNumber = 3;
  inline const ::game_fruitmachine_protocols::msg_bet_info& bet_info(int index) const;
  inline ::game_fruitmachine_protocols::msg_bet_info* mutable_bet_info(int index);
  inline ::game_fruitmachine_protocols::msg_bet_info* add_bet_info();
  inline const ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::msg_bet_info >&
      bet_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::msg_bet_info >*
      mutable_bet_info();

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetl2c_repeat_bet_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::msg_bet_info > bet_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_repeat_bet_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_start_game : public ::google::protobuf::Message {
 public:
  packetc2l_start_game();
  virtual ~packetc2l_start_game();

  packetc2l_start_game(const packetc2l_start_game& from);

  inline packetc2l_start_game& operator=(const packetc2l_start_game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_start_game& default_instance();

  void Swap(packetc2l_start_game* other);

  // implements Message ----------------------------------------------

  packetc2l_start_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_start_game& from);
  void MergeFrom(const packetc2l_start_game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_start_game];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetc2l_start_game)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_start_game* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_start_game_result : public ::google::protobuf::Message {
 public:
  packetl2c_start_game_result();
  virtual ~packetl2c_start_game_result();

  packetl2c_start_game_result(const packetl2c_start_game_result& from);

  inline packetl2c_start_game_result& operator=(const packetl2c_start_game_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_start_game_result& default_instance();

  void Swap(packetl2c_start_game_result* other);

  // implements Message ----------------------------------------------

  packetl2c_start_game_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_start_game_result& from);
  void MergeFrom(const packetl2c_start_game_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_start_game];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // repeated .game_fruitmachine_protocols.msg_result_index indexAarry = 4;
  inline int indexaarry_size() const;
  inline void clear_indexaarry();
  static const int kIndexAarryFieldNumber = 4;
  inline const ::game_fruitmachine_protocols::msg_result_index& indexaarry(int index) const;
  inline ::game_fruitmachine_protocols::msg_result_index* mutable_indexaarry(int index);
  inline ::game_fruitmachine_protocols::msg_result_index* add_indexaarry();
  inline const ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::msg_result_index >&
      indexaarry() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::msg_result_index >*
      mutable_indexaarry();

  // optional int32 reward = 5;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 5;
  inline ::google::protobuf::int32 reward() const;
  inline void set_reward(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetl2c_start_game_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::msg_result_index > indexaarry_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_start_game_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_start_bigsmall : public ::google::protobuf::Message {
 public:
  packetc2l_start_bigsmall();
  virtual ~packetc2l_start_bigsmall();

  packetc2l_start_bigsmall(const packetc2l_start_bigsmall& from);

  inline packetc2l_start_bigsmall& operator=(const packetc2l_start_bigsmall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_start_bigsmall& default_instance();

  void Swap(packetc2l_start_bigsmall* other);

  // implements Message ----------------------------------------------

  packetc2l_start_bigsmall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_start_bigsmall& from);
  void MergeFrom(const packetc2l_start_bigsmall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_start_bigsmall];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // optional bool betisbig = 2;
  inline bool has_betisbig() const;
  inline void clear_betisbig();
  static const int kBetisbigFieldNumber = 2;
  inline bool betisbig() const;
  inline void set_betisbig(bool value);

  // optional int32 bet_count = 3;
  inline bool has_bet_count() const;
  inline void clear_bet_count();
  static const int kBetCountFieldNumber = 3;
  inline ::google::protobuf::int32 bet_count() const;
  inline void set_bet_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetc2l_start_bigsmall)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_betisbig();
  inline void clear_has_betisbig();
  inline void set_has_bet_count();
  inline void clear_has_bet_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  bool betisbig_;
  ::google::protobuf::int32 bet_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_start_bigsmall* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_start_bigsmall_result : public ::google::protobuf::Message {
 public:
  packetl2c_start_bigsmall_result();
  virtual ~packetl2c_start_bigsmall_result();

  packetl2c_start_bigsmall_result(const packetl2c_start_bigsmall_result& from);

  inline packetl2c_start_bigsmall_result& operator=(const packetl2c_start_bigsmall_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_start_bigsmall_result& default_instance();

  void Swap(packetl2c_start_bigsmall_result* other);

  // implements Message ----------------------------------------------

  packetl2c_start_bigsmall_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_start_bigsmall_result& from);
  void MergeFrom(const packetl2c_start_bigsmall_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_start_bigsmall];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional bool betisbig = 3;
  inline bool has_betisbig() const;
  inline void clear_betisbig();
  static const int kBetisbigFieldNumber = 3;
  inline bool betisbig() const;
  inline void set_betisbig(bool value);

  // optional bool resultisbig = 4;
  inline bool has_resultisbig() const;
  inline void clear_resultisbig();
  static const int kResultisbigFieldNumber = 4;
  inline bool resultisbig() const;
  inline void set_resultisbig(bool value);

  // optional int32 reward = 5;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 5;
  inline ::google::protobuf::int32 reward() const;
  inline void set_reward(::google::protobuf::int32 value);

  // optional int32 left_count = 6;
  inline bool has_left_count() const;
  inline void clear_left_count();
  static const int kLeftCountFieldNumber = 6;
  inline ::google::protobuf::int32 left_count() const;
  inline void set_left_count(::google::protobuf::int32 value);

  // optional int32 water = 7;
  inline bool has_water() const;
  inline void clear_water();
  static const int kWaterFieldNumber = 7;
  inline ::google::protobuf::int32 water() const;
  inline void set_water(::google::protobuf::int32 value);

  // optional int32 point = 8;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 8;
  inline ::google::protobuf::int32 point() const;
  inline void set_point(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetl2c_start_bigsmall_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_betisbig();
  inline void clear_has_betisbig();
  inline void set_has_resultisbig();
  inline void clear_has_resultisbig();
  inline void set_has_reward();
  inline void clear_has_reward();
  inline void set_has_left_count();
  inline void clear_has_left_count();
  inline void set_has_water();
  inline void clear_has_water();
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  bool betisbig_;
  bool resultisbig_;
  ::google::protobuf::int32 reward_;
  ::google::protobuf::int32 left_count_;
  ::google::protobuf::int32 water_;
  ::google::protobuf::int32 point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_start_bigsmall_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_break_bigsmall : public ::google::protobuf::Message {
 public:
  packetc2l_break_bigsmall();
  virtual ~packetc2l_break_bigsmall();

  packetc2l_break_bigsmall(const packetc2l_break_bigsmall& from);

  inline packetc2l_break_bigsmall& operator=(const packetc2l_break_bigsmall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_break_bigsmall& default_instance();

  void Swap(packetc2l_break_bigsmall* other);

  // implements Message ----------------------------------------------

  packetc2l_break_bigsmall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_break_bigsmall& from);
  void MergeFrom(const packetc2l_break_bigsmall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_break_bigsmall];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetc2l_break_bigsmall)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_break_bigsmall* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_break_bigsmall_result : public ::google::protobuf::Message {
 public:
  packetl2c_break_bigsmall_result();
  virtual ~packetl2c_break_bigsmall_result();

  packetl2c_break_bigsmall_result(const packetl2c_break_bigsmall_result& from);

  inline packetl2c_break_bigsmall_result& operator=(const packetl2c_break_bigsmall_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_break_bigsmall_result& default_instance();

  void Swap(packetl2c_break_bigsmall_result* other);

  // implements Message ----------------------------------------------

  packetl2c_break_bigsmall_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_break_bigsmall_result& from);
  void MergeFrom(const packetl2c_break_bigsmall_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_break_bigsmall_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 water = 3;
  inline bool has_water() const;
  inline void clear_water();
  static const int kWaterFieldNumber = 3;
  inline ::google::protobuf::int32 water() const;
  inline void set_water(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetl2c_break_bigsmall_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_water();
  inline void clear_has_water();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int32 water_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_break_bigsmall_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_cancel_bet : public ::google::protobuf::Message {
 public:
  packetc2l_cancel_bet();
  virtual ~packetc2l_cancel_bet();

  packetc2l_cancel_bet(const packetc2l_cancel_bet& from);

  inline packetc2l_cancel_bet& operator=(const packetc2l_cancel_bet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_cancel_bet& default_instance();

  void Swap(packetc2l_cancel_bet* other);

  // implements Message ----------------------------------------------

  packetc2l_cancel_bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_cancel_bet& from);
  void MergeFrom(const packetc2l_cancel_bet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_cancel_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetc2l_cancel_bet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_cancel_bet* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_cancel_bet_result : public ::google::protobuf::Message {
 public:
  packetl2c_cancel_bet_result();
  virtual ~packetl2c_cancel_bet_result();

  packetl2c_cancel_bet_result(const packetl2c_cancel_bet_result& from);

  inline packetl2c_cancel_bet_result& operator=(const packetl2c_cancel_bet_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_cancel_bet_result& default_instance();

  void Swap(packetl2c_cancel_bet_result* other);

  // implements Message ----------------------------------------------

  packetl2c_cancel_bet_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_cancel_bet_result& from);
  void MergeFrom(const packetl2c_cancel_bet_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_cancel_bet_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetl2c_cancel_bet_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_cancel_bet_result* default_instance_;
};
// -------------------------------------------------------------------

class player_info : public ::google::protobuf::Message {
 public:
  player_info();
  virtual ~player_info();

  player_info(const player_info& from);

  inline player_info& operator=(const player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_info& default_instance();

  void Swap(player_info* other);

  // implements Message ----------------------------------------------

  player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_info& from);
  void MergeFrom(const player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int64 gold = 3;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 3;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int64 profit = 4;
  inline bool has_profit() const;
  inline void clear_profit();
  static const int kProfitFieldNumber = 4;
  inline ::google::protobuf::int64 profit() const;
  inline void set_profit(::google::protobuf::int64 value);

  // optional int32 control = 5;
  inline bool has_control() const;
  inline void clear_control();
  static const int kControlFieldNumber = 5;
  inline ::google::protobuf::int32 control() const;
  inline void set_control(::google::protobuf::int32 value);

  // optional int32 cur_ctrl = 6;
  inline bool has_cur_ctrl() const;
  inline void clear_cur_ctrl();
  static const int kCurCtrlFieldNumber = 6;
  inline ::google::protobuf::int32 cur_ctrl() const;
  inline void set_cur_ctrl(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.player_info)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_profit();
  inline void clear_has_profit();
  inline void set_has_control();
  inline void clear_has_control();
  inline void set_has_cur_ctrl();
  inline void clear_has_cur_ctrl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  ::google::protobuf::int64 gold_;
  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 control_;
  ::google::protobuf::int64 profit_;
  ::google::protobuf::int32 cur_ctrl_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static player_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_player_list : public ::google::protobuf::Message {
 public:
  packetl2c_player_list();
  virtual ~packetl2c_player_list();

  packetl2c_player_list(const packetl2c_player_list& from);

  inline packetl2c_player_list& operator=(const packetl2c_player_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_player_list& default_instance();

  void Swap(packetl2c_player_list* other);

  // implements Message ----------------------------------------------

  packetl2c_player_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_player_list& from);
  void MergeFrom(const packetl2c_player_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // repeated .game_fruitmachine_protocols.player_info list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::game_fruitmachine_protocols::player_info& list(int index) const;
  inline ::game_fruitmachine_protocols::player_info* mutable_list(int index);
  inline ::game_fruitmachine_protocols::player_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::player_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::player_info >*
      mutable_list();

  // optional int64 stock = 3;
  inline bool has_stock() const;
  inline void clear_stock();
  static const int kStockFieldNumber = 3;
  inline ::google::protobuf::int64 stock() const;
  inline void set_stock(::google::protobuf::int64 value);

  // optional int64 profit = 4;
  inline bool has_profit() const;
  inline void clear_profit();
  static const int kProfitFieldNumber = 4;
  inline ::google::protobuf::int64 profit() const;
  inline void set_profit(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetl2c_player_list)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_stock();
  inline void clear_has_stock();
  inline void set_has_profit();
  inline void clear_has_profit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::player_info > list_;
  ::google::protobuf::int64 stock_;
  ::google::protobuf::int64 profit_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_player_list* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_debug : public ::google::protobuf::Message {
 public:
  packetc2l_debug();
  virtual ~packetc2l_debug();

  packetc2l_debug(const packetc2l_debug& from);

  inline packetc2l_debug& operator=(const packetc2l_debug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_debug& default_instance();

  void Swap(packetc2l_debug* other);

  // implements Message ----------------------------------------------

  packetc2l_debug* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_debug& from);
  void MergeFrom(const packetc2l_debug& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_debug];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // optional int32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetc2l_debug)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_debug* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_debug_result : public ::google::protobuf::Message {
 public:
  packetl2c_debug_result();
  virtual ~packetl2c_debug_result();

  packetl2c_debug_result(const packetl2c_debug_result& from);

  inline packetl2c_debug_result& operator=(const packetl2c_debug_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_debug_result& default_instance();

  void Swap(packetl2c_debug_result* other);

  // implements Message ----------------------------------------------

  packetl2c_debug_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_debug_result& from);
  void MergeFrom(const packetl2c_debug_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_debug_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruitmachine_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_fruitmachine_protocols.packetl2c_debug_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruitmachine_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruitmachine_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_debug_result* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_room_info

// optional int32 roomid = 1;
inline bool msg_room_info::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_room_info::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_room_info::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_room_info::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 msg_room_info::roomid() const {
  return roomid_;
}
inline void msg_room_info::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// packetc2l_get_room_info

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
inline bool packetc2l_get_room_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_room_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_room_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_room_info::clear_packet_id() {
  packet_id_ = 10001;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetc2l_get_room_info::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_room_info::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_get_room_info_result

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
inline bool packetl2c_get_room_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_get_room_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_get_room_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_get_room_info_result::clear_packet_id() {
  packet_id_ = 15001;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetl2c_get_room_info_result::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_get_room_info_result::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_fruitmachine_protocols.msg_room_info room_list = 2;
inline int packetl2c_get_room_info_result::room_list_size() const {
  return room_list_.size();
}
inline void packetl2c_get_room_info_result::clear_room_list() {
  room_list_.Clear();
}
inline const ::game_fruitmachine_protocols::msg_room_info& packetl2c_get_room_info_result::room_list(int index) const {
  return room_list_.Get(index);
}
inline ::game_fruitmachine_protocols::msg_room_info* packetl2c_get_room_info_result::mutable_room_list(int index) {
  return room_list_.Mutable(index);
}
inline ::game_fruitmachine_protocols::msg_room_info* packetl2c_get_room_info_result::add_room_list() {
  return room_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::msg_room_info >&
packetl2c_get_room_info_result::room_list() const {
  return room_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::msg_room_info >*
packetl2c_get_room_info_result::mutable_room_list() {
  return &room_list_;
}

// -------------------------------------------------------------------

// packetc2l_enter_room

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
inline bool packetc2l_enter_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_enter_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_enter_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_enter_room::clear_packet_id() {
  packet_id_ = 10002;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetc2l_enter_room::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_enter_room::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 roomid = 2;
inline bool packetc2l_enter_room::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_enter_room::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_enter_room::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_enter_room::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 packetc2l_enter_room::roomid() const {
  return roomid_;
}
inline void packetc2l_enter_room::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// packetl2c_enter_room_result

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
inline bool packetl2c_enter_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_enter_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_enter_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_enter_room_result::clear_packet_id() {
  packet_id_ = 15002;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetl2c_enter_room_result::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_enter_room_result::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_enter_room_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_enter_room_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_enter_room_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_enter_room_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_enter_room_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_enter_room_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_check_state

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
inline bool packetc2l_check_state::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_check_state::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_check_state::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_check_state::clear_packet_id() {
  packet_id_ = 10008;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetc2l_check_state::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_check_state::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_check_state_result

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
inline bool packetl2c_check_state_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_check_state_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_check_state_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_check_state_result::clear_packet_id() {
  packet_id_ = 15013;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetl2c_check_state_result::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_check_state_result::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional bool is_intable = 2 [default = false];
inline bool packetl2c_check_state_result::has_is_intable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_check_state_result::set_has_is_intable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_check_state_result::clear_has_is_intable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_check_state_result::clear_is_intable() {
  is_intable_ = false;
  clear_has_is_intable();
}
inline bool packetl2c_check_state_result::is_intable() const {
  return is_intable_;
}
inline void packetl2c_check_state_result::set_is_intable(bool value) {
  set_has_is_intable();
  is_intable_ = value;
}

// -------------------------------------------------------------------

// packetc2l_get_room_scene_info

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
inline bool packetc2l_get_room_scene_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_room_scene_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_room_scene_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_room_scene_info::clear_packet_id() {
  packet_id_ = 10007;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetc2l_get_room_scene_info::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_room_scene_info::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_get_room_scene_info_result

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
inline bool packetl2c_get_room_scene_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_get_room_scene_info_result::clear_packet_id() {
  packet_id_ = 15010;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetl2c_get_room_scene_info_result::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_get_room_scene_info_result::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 room_id = 2;
inline bool packetl2c_get_room_scene_info_result::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_get_room_scene_info_result::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::room_id() const {
  return room_id_;
}
inline void packetl2c_get_room_scene_info_result::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// repeated int32 history_list = 3;
inline int packetl2c_get_room_scene_info_result::history_list_size() const {
  return history_list_.size();
}
inline void packetl2c_get_room_scene_info_result::clear_history_list() {
  history_list_.Clear();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::history_list(int index) const {
  return history_list_.Get(index);
}
inline void packetl2c_get_room_scene_info_result::set_history_list(int index, ::google::protobuf::int32 value) {
  history_list_.Set(index, value);
}
inline void packetl2c_get_room_scene_info_result::add_history_list(::google::protobuf::int32 value) {
  history_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_get_room_scene_info_result::history_list() const {
  return history_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_get_room_scene_info_result::mutable_history_list() {
  return &history_list_;
}

// optional .game_fruitmachine_protocols.e_game_state game_state = 4;
inline bool packetl2c_get_room_scene_info_result::has_game_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_game_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_game_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_get_room_scene_info_result::clear_game_state() {
  game_state_ = 0;
  clear_has_game_state();
}
inline ::game_fruitmachine_protocols::e_game_state packetl2c_get_room_scene_info_result::game_state() const {
  return static_cast< ::game_fruitmachine_protocols::e_game_state >(game_state_);
}
inline void packetl2c_get_room_scene_info_result::set_game_state(::game_fruitmachine_protocols::e_game_state value) {
  assert(::game_fruitmachine_protocols::e_game_state_IsValid(value));
  set_has_game_state();
  game_state_ = value;
}

// repeated .game_fruitmachine_protocols.msg_bet_info bet_info = 5;
inline int packetl2c_get_room_scene_info_result::bet_info_size() const {
  return bet_info_.size();
}
inline void packetl2c_get_room_scene_info_result::clear_bet_info() {
  bet_info_.Clear();
}
inline const ::game_fruitmachine_protocols::msg_bet_info& packetl2c_get_room_scene_info_result::bet_info(int index) const {
  return bet_info_.Get(index);
}
inline ::game_fruitmachine_protocols::msg_bet_info* packetl2c_get_room_scene_info_result::mutable_bet_info(int index) {
  return bet_info_.Mutable(index);
}
inline ::game_fruitmachine_protocols::msg_bet_info* packetl2c_get_room_scene_info_result::add_bet_info() {
  return bet_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::msg_bet_info >&
packetl2c_get_room_scene_info_result::bet_info() const {
  return bet_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::msg_bet_info >*
packetl2c_get_room_scene_info_result::mutable_bet_info() {
  return &bet_info_;
}

// optional int32 reward_gold = 6;
inline bool packetl2c_get_room_scene_info_result::has_reward_gold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_reward_gold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_reward_gold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_get_room_scene_info_result::clear_reward_gold() {
  reward_gold_ = 0;
  clear_has_reward_gold();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::reward_gold() const {
  return reward_gold_;
}
inline void packetl2c_get_room_scene_info_result::set_reward_gold(::google::protobuf::int32 value) {
  set_has_reward_gold();
  reward_gold_ = value;
}

// optional int32 result_index = 7;
inline bool packetl2c_get_room_scene_info_result::has_result_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_result_index() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_result_index() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetl2c_get_room_scene_info_result::clear_result_index() {
  result_index_ = 0;
  clear_has_result_index();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::result_index() const {
  return result_index_;
}
inline void packetl2c_get_room_scene_info_result::set_result_index(::google::protobuf::int32 value) {
  set_has_result_index();
  result_index_ = value;
}

// repeated int32 index_array = 8;
inline int packetl2c_get_room_scene_info_result::index_array_size() const {
  return index_array_.size();
}
inline void packetl2c_get_room_scene_info_result::clear_index_array() {
  index_array_.Clear();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::index_array(int index) const {
  return index_array_.Get(index);
}
inline void packetl2c_get_room_scene_info_result::set_index_array(int index, ::google::protobuf::int32 value) {
  index_array_.Set(index, value);
}
inline void packetl2c_get_room_scene_info_result::add_index_array(::google::protobuf::int32 value) {
  index_array_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_get_room_scene_info_result::index_array() const {
  return index_array_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_get_room_scene_info_result::mutable_index_array() {
  return &index_array_;
}

// optional int64 gold = 9;
inline bool packetl2c_get_room_scene_info_result::has_gold() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_gold() {
  _has_bits_[0] |= 0x00000100u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_gold() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void packetl2c_get_room_scene_info_result::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 packetl2c_get_room_scene_info_result::gold() const {
  return gold_;
}
inline void packetl2c_get_room_scene_info_result::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional int64 bigsmall_gold = 10;
inline bool packetl2c_get_room_scene_info_result::has_bigsmall_gold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_bigsmall_gold() {
  _has_bits_[0] |= 0x00000200u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_bigsmall_gold() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void packetl2c_get_room_scene_info_result::clear_bigsmall_gold() {
  bigsmall_gold_ = GOOGLE_LONGLONG(0);
  clear_has_bigsmall_gold();
}
inline ::google::protobuf::int64 packetl2c_get_room_scene_info_result::bigsmall_gold() const {
  return bigsmall_gold_;
}
inline void packetl2c_get_room_scene_info_result::set_bigsmall_gold(::google::protobuf::int64 value) {
  set_has_bigsmall_gold();
  bigsmall_gold_ = value;
}

// -------------------------------------------------------------------

// packetc2l_leave_room

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
inline bool packetc2l_leave_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_leave_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_leave_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_leave_room::clear_packet_id() {
  packet_id_ = 10003;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetc2l_leave_room::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_leave_room::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_leave_room_result

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
inline bool packetl2c_leave_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_leave_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_leave_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_leave_room_result::clear_packet_id() {
  packet_id_ = 15003;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetl2c_leave_room_result::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_leave_room_result::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
inline bool packetl2c_leave_room_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_leave_room_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_leave_room_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_leave_room_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_leave_room_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_leave_room_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_add_bet

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_add_bet];
inline bool packetc2l_add_bet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_add_bet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_add_bet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_add_bet::clear_packet_id() {
  packet_id_ = 10004;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetc2l_add_bet::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_add_bet::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_fruitmachine_protocols.msg_bet_info bet_info = 2;
inline bool packetc2l_add_bet::has_bet_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_add_bet::set_has_bet_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_add_bet::clear_has_bet_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_add_bet::clear_bet_info() {
  if (bet_info_ != NULL) bet_info_->::game_fruitmachine_protocols::msg_bet_info::Clear();
  clear_has_bet_info();
}
inline const ::game_fruitmachine_protocols::msg_bet_info& packetc2l_add_bet::bet_info() const {
  return bet_info_ != NULL ? *bet_info_ : *default_instance_->bet_info_;
}
inline ::game_fruitmachine_protocols::msg_bet_info* packetc2l_add_bet::mutable_bet_info() {
  set_has_bet_info();
  if (bet_info_ == NULL) bet_info_ = new ::game_fruitmachine_protocols::msg_bet_info;
  return bet_info_;
}
inline ::game_fruitmachine_protocols::msg_bet_info* packetc2l_add_bet::release_bet_info() {
  clear_has_bet_info();
  ::game_fruitmachine_protocols::msg_bet_info* temp = bet_info_;
  bet_info_ = NULL;
  return temp;
}
inline void packetc2l_add_bet::set_allocated_bet_info(::game_fruitmachine_protocols::msg_bet_info* bet_info) {
  delete bet_info_;
  bet_info_ = bet_info;
  if (bet_info) {
    set_has_bet_info();
  } else {
    clear_has_bet_info();
  }
}

// -------------------------------------------------------------------

// packetl2c_add_bet_result

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_add_bet];
inline bool packetl2c_add_bet_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_add_bet_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_add_bet_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_add_bet_result::clear_packet_id() {
  packet_id_ = 15004;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetl2c_add_bet_result::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_add_bet_result::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_add_bet_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_add_bet_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_add_bet_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_add_bet_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_add_bet_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_add_bet_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional .game_fruitmachine_protocols.msg_bet_info bet_info = 3;
inline bool packetl2c_add_bet_result::has_bet_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_add_bet_result::set_has_bet_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_add_bet_result::clear_has_bet_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_add_bet_result::clear_bet_info() {
  if (bet_info_ != NULL) bet_info_->::game_fruitmachine_protocols::msg_bet_info::Clear();
  clear_has_bet_info();
}
inline const ::game_fruitmachine_protocols::msg_bet_info& packetl2c_add_bet_result::bet_info() const {
  return bet_info_ != NULL ? *bet_info_ : *default_instance_->bet_info_;
}
inline ::game_fruitmachine_protocols::msg_bet_info* packetl2c_add_bet_result::mutable_bet_info() {
  set_has_bet_info();
  if (bet_info_ == NULL) bet_info_ = new ::game_fruitmachine_protocols::msg_bet_info;
  return bet_info_;
}
inline ::game_fruitmachine_protocols::msg_bet_info* packetl2c_add_bet_result::release_bet_info() {
  clear_has_bet_info();
  ::game_fruitmachine_protocols::msg_bet_info* temp = bet_info_;
  bet_info_ = NULL;
  return temp;
}
inline void packetl2c_add_bet_result::set_allocated_bet_info(::game_fruitmachine_protocols::msg_bet_info* bet_info) {
  delete bet_info_;
  bet_info_ = bet_info;
  if (bet_info) {
    set_has_bet_info();
  } else {
    clear_has_bet_info();
  }
}

// -------------------------------------------------------------------

// packetc2l_repeat_bet

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_repeat_bet];
inline bool packetc2l_repeat_bet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_repeat_bet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_repeat_bet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_repeat_bet::clear_packet_id() {
  packet_id_ = 10005;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetc2l_repeat_bet::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_repeat_bet::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_repeat_bet_result

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_repeat_bet];
inline bool packetl2c_repeat_bet_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_repeat_bet_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_repeat_bet_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_repeat_bet_result::clear_packet_id() {
  packet_id_ = 15005;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetl2c_repeat_bet_result::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_repeat_bet_result::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_repeat_bet_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_repeat_bet_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_repeat_bet_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_repeat_bet_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_repeat_bet_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_repeat_bet_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// repeated .game_fruitmachine_protocols.msg_bet_info bet_info = 3;
inline int packetl2c_repeat_bet_result::bet_info_size() const {
  return bet_info_.size();
}
inline void packetl2c_repeat_bet_result::clear_bet_info() {
  bet_info_.Clear();
}
inline const ::game_fruitmachine_protocols::msg_bet_info& packetl2c_repeat_bet_result::bet_info(int index) const {
  return bet_info_.Get(index);
}
inline ::game_fruitmachine_protocols::msg_bet_info* packetl2c_repeat_bet_result::mutable_bet_info(int index) {
  return bet_info_.Mutable(index);
}
inline ::game_fruitmachine_protocols::msg_bet_info* packetl2c_repeat_bet_result::add_bet_info() {
  return bet_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::msg_bet_info >&
packetl2c_repeat_bet_result::bet_info() const {
  return bet_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::msg_bet_info >*
packetl2c_repeat_bet_result::mutable_bet_info() {
  return &bet_info_;
}

// -------------------------------------------------------------------

// packetc2l_start_game

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_start_game];
inline bool packetc2l_start_game::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_start_game::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_start_game::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_start_game::clear_packet_id() {
  packet_id_ = 10010;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetc2l_start_game::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_start_game::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_start_game_result

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_start_game];
inline bool packetl2c_start_game_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_start_game_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_start_game_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_start_game_result::clear_packet_id() {
  packet_id_ = 15014;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetl2c_start_game_result::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_start_game_result::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_start_game_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_start_game_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_start_game_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_start_game_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_start_game_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_start_game_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 index = 3;
inline bool packetl2c_start_game_result::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_start_game_result::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_start_game_result::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_start_game_result::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 packetl2c_start_game_result::index() const {
  return index_;
}
inline void packetl2c_start_game_result::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// repeated .game_fruitmachine_protocols.msg_result_index indexAarry = 4;
inline int packetl2c_start_game_result::indexaarry_size() const {
  return indexaarry_.size();
}
inline void packetl2c_start_game_result::clear_indexaarry() {
  indexaarry_.Clear();
}
inline const ::game_fruitmachine_protocols::msg_result_index& packetl2c_start_game_result::indexaarry(int index) const {
  return indexaarry_.Get(index);
}
inline ::game_fruitmachine_protocols::msg_result_index* packetl2c_start_game_result::mutable_indexaarry(int index) {
  return indexaarry_.Mutable(index);
}
inline ::game_fruitmachine_protocols::msg_result_index* packetl2c_start_game_result::add_indexaarry() {
  return indexaarry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::msg_result_index >&
packetl2c_start_game_result::indexaarry() const {
  return indexaarry_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::msg_result_index >*
packetl2c_start_game_result::mutable_indexaarry() {
  return &indexaarry_;
}

// optional int32 reward = 5;
inline bool packetl2c_start_game_result::has_reward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_start_game_result::set_has_reward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_start_game_result::clear_has_reward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_start_game_result::clear_reward() {
  reward_ = 0;
  clear_has_reward();
}
inline ::google::protobuf::int32 packetl2c_start_game_result::reward() const {
  return reward_;
}
inline void packetl2c_start_game_result::set_reward(::google::protobuf::int32 value) {
  set_has_reward();
  reward_ = value;
}

// -------------------------------------------------------------------

// packetc2l_start_bigsmall

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_start_bigsmall];
inline bool packetc2l_start_bigsmall::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_start_bigsmall::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_start_bigsmall::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_start_bigsmall::clear_packet_id() {
  packet_id_ = 10011;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetc2l_start_bigsmall::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_start_bigsmall::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional bool betisbig = 2;
inline bool packetc2l_start_bigsmall::has_betisbig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_start_bigsmall::set_has_betisbig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_start_bigsmall::clear_has_betisbig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_start_bigsmall::clear_betisbig() {
  betisbig_ = false;
  clear_has_betisbig();
}
inline bool packetc2l_start_bigsmall::betisbig() const {
  return betisbig_;
}
inline void packetc2l_start_bigsmall::set_betisbig(bool value) {
  set_has_betisbig();
  betisbig_ = value;
}

// optional int32 bet_count = 3;
inline bool packetc2l_start_bigsmall::has_bet_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_start_bigsmall::set_has_bet_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_start_bigsmall::clear_has_bet_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_start_bigsmall::clear_bet_count() {
  bet_count_ = 0;
  clear_has_bet_count();
}
inline ::google::protobuf::int32 packetc2l_start_bigsmall::bet_count() const {
  return bet_count_;
}
inline void packetc2l_start_bigsmall::set_bet_count(::google::protobuf::int32 value) {
  set_has_bet_count();
  bet_count_ = value;
}

// -------------------------------------------------------------------

// packetl2c_start_bigsmall_result

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_start_bigsmall];
inline bool packetl2c_start_bigsmall_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_start_bigsmall_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_start_bigsmall_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_start_bigsmall_result::clear_packet_id() {
  packet_id_ = 15015;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetl2c_start_bigsmall_result::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_start_bigsmall_result::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_start_bigsmall_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_start_bigsmall_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_start_bigsmall_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_start_bigsmall_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_start_bigsmall_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_start_bigsmall_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional bool betisbig = 3;
inline bool packetl2c_start_bigsmall_result::has_betisbig() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_start_bigsmall_result::set_has_betisbig() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_start_bigsmall_result::clear_has_betisbig() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_start_bigsmall_result::clear_betisbig() {
  betisbig_ = false;
  clear_has_betisbig();
}
inline bool packetl2c_start_bigsmall_result::betisbig() const {
  return betisbig_;
}
inline void packetl2c_start_bigsmall_result::set_betisbig(bool value) {
  set_has_betisbig();
  betisbig_ = value;
}

// optional bool resultisbig = 4;
inline bool packetl2c_start_bigsmall_result::has_resultisbig() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_start_bigsmall_result::set_has_resultisbig() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_start_bigsmall_result::clear_has_resultisbig() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_start_bigsmall_result::clear_resultisbig() {
  resultisbig_ = false;
  clear_has_resultisbig();
}
inline bool packetl2c_start_bigsmall_result::resultisbig() const {
  return resultisbig_;
}
inline void packetl2c_start_bigsmall_result::set_resultisbig(bool value) {
  set_has_resultisbig();
  resultisbig_ = value;
}

// optional int32 reward = 5;
inline bool packetl2c_start_bigsmall_result::has_reward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_start_bigsmall_result::set_has_reward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_start_bigsmall_result::clear_has_reward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_start_bigsmall_result::clear_reward() {
  reward_ = 0;
  clear_has_reward();
}
inline ::google::protobuf::int32 packetl2c_start_bigsmall_result::reward() const {
  return reward_;
}
inline void packetl2c_start_bigsmall_result::set_reward(::google::protobuf::int32 value) {
  set_has_reward();
  reward_ = value;
}

// optional int32 left_count = 6;
inline bool packetl2c_start_bigsmall_result::has_left_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_start_bigsmall_result::set_has_left_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_start_bigsmall_result::clear_has_left_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_start_bigsmall_result::clear_left_count() {
  left_count_ = 0;
  clear_has_left_count();
}
inline ::google::protobuf::int32 packetl2c_start_bigsmall_result::left_count() const {
  return left_count_;
}
inline void packetl2c_start_bigsmall_result::set_left_count(::google::protobuf::int32 value) {
  set_has_left_count();
  left_count_ = value;
}

// optional int32 water = 7;
inline bool packetl2c_start_bigsmall_result::has_water() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetl2c_start_bigsmall_result::set_has_water() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetl2c_start_bigsmall_result::clear_has_water() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetl2c_start_bigsmall_result::clear_water() {
  water_ = 0;
  clear_has_water();
}
inline ::google::protobuf::int32 packetl2c_start_bigsmall_result::water() const {
  return water_;
}
inline void packetl2c_start_bigsmall_result::set_water(::google::protobuf::int32 value) {
  set_has_water();
  water_ = value;
}

// optional int32 point = 8;
inline bool packetl2c_start_bigsmall_result::has_point() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void packetl2c_start_bigsmall_result::set_has_point() {
  _has_bits_[0] |= 0x00000080u;
}
inline void packetl2c_start_bigsmall_result::clear_has_point() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void packetl2c_start_bigsmall_result::clear_point() {
  point_ = 0;
  clear_has_point();
}
inline ::google::protobuf::int32 packetl2c_start_bigsmall_result::point() const {
  return point_;
}
inline void packetl2c_start_bigsmall_result::set_point(::google::protobuf::int32 value) {
  set_has_point();
  point_ = value;
}

// -------------------------------------------------------------------

// packetc2l_break_bigsmall

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_break_bigsmall];
inline bool packetc2l_break_bigsmall::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_break_bigsmall::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_break_bigsmall::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_break_bigsmall::clear_packet_id() {
  packet_id_ = 10012;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetc2l_break_bigsmall::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_break_bigsmall::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_break_bigsmall_result

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_break_bigsmall_result];
inline bool packetl2c_break_bigsmall_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_break_bigsmall_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_break_bigsmall_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_break_bigsmall_result::clear_packet_id() {
  packet_id_ = 15016;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetl2c_break_bigsmall_result::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_break_bigsmall_result::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_break_bigsmall_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_break_bigsmall_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_break_bigsmall_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_break_bigsmall_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_break_bigsmall_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_break_bigsmall_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 water = 3;
inline bool packetl2c_break_bigsmall_result::has_water() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_break_bigsmall_result::set_has_water() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_break_bigsmall_result::clear_has_water() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_break_bigsmall_result::clear_water() {
  water_ = 0;
  clear_has_water();
}
inline ::google::protobuf::int32 packetl2c_break_bigsmall_result::water() const {
  return water_;
}
inline void packetl2c_break_bigsmall_result::set_water(::google::protobuf::int32 value) {
  set_has_water();
  water_ = value;
}

// -------------------------------------------------------------------

// packetc2l_cancel_bet

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_cancel_bet];
inline bool packetc2l_cancel_bet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_cancel_bet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_cancel_bet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_cancel_bet::clear_packet_id() {
  packet_id_ = 10013;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetc2l_cancel_bet::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_cancel_bet::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_cancel_bet_result

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_cancel_bet_result];
inline bool packetl2c_cancel_bet_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_cancel_bet_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_cancel_bet_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_cancel_bet_result::clear_packet_id() {
  packet_id_ = 15017;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetl2c_cancel_bet_result::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_cancel_bet_result::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_cancel_bet_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_cancel_bet_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_cancel_bet_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_cancel_bet_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_cancel_bet_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_cancel_bet_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// player_info

// optional int32 playerid = 1;
inline bool player_info::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_info::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_info::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_info::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 player_info::playerid() const {
  return playerid_;
}
inline void player_info::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional string nickname = 2;
inline bool player_info::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void player_info::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void player_info::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void player_info::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& player_info::nickname() const {
  return *nickname_;
}
inline void player_info::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void player_info::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void player_info::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* player_info::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* player_info::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void player_info::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 gold = 3;
inline bool player_info::has_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void player_info::set_has_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void player_info::clear_has_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void player_info::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 player_info::gold() const {
  return gold_;
}
inline void player_info::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional int64 profit = 4;
inline bool player_info::has_profit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void player_info::set_has_profit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void player_info::clear_has_profit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void player_info::clear_profit() {
  profit_ = GOOGLE_LONGLONG(0);
  clear_has_profit();
}
inline ::google::protobuf::int64 player_info::profit() const {
  return profit_;
}
inline void player_info::set_profit(::google::protobuf::int64 value) {
  set_has_profit();
  profit_ = value;
}

// optional int32 control = 5;
inline bool player_info::has_control() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void player_info::set_has_control() {
  _has_bits_[0] |= 0x00000010u;
}
inline void player_info::clear_has_control() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void player_info::clear_control() {
  control_ = 0;
  clear_has_control();
}
inline ::google::protobuf::int32 player_info::control() const {
  return control_;
}
inline void player_info::set_control(::google::protobuf::int32 value) {
  set_has_control();
  control_ = value;
}

// optional int32 cur_ctrl = 6;
inline bool player_info::has_cur_ctrl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void player_info::set_has_cur_ctrl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void player_info::clear_has_cur_ctrl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void player_info::clear_cur_ctrl() {
  cur_ctrl_ = 0;
  clear_has_cur_ctrl();
}
inline ::google::protobuf::int32 player_info::cur_ctrl() const {
  return cur_ctrl_;
}
inline void player_info::set_cur_ctrl(::google::protobuf::int32 value) {
  set_has_cur_ctrl();
  cur_ctrl_ = value;
}

// -------------------------------------------------------------------

// packetl2c_player_list

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_list];
inline bool packetl2c_player_list::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_player_list::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_player_list::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_player_list::clear_packet_id() {
  packet_id_ = 15019;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetl2c_player_list::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_player_list::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_fruitmachine_protocols.player_info list = 2;
inline int packetl2c_player_list::list_size() const {
  return list_.size();
}
inline void packetl2c_player_list::clear_list() {
  list_.Clear();
}
inline const ::game_fruitmachine_protocols::player_info& packetl2c_player_list::list(int index) const {
  return list_.Get(index);
}
inline ::game_fruitmachine_protocols::player_info* packetl2c_player_list::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::game_fruitmachine_protocols::player_info* packetl2c_player_list::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::player_info >&
packetl2c_player_list::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_fruitmachine_protocols::player_info >*
packetl2c_player_list::mutable_list() {
  return &list_;
}

// optional int64 stock = 3;
inline bool packetl2c_player_list::has_stock() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_player_list::set_has_stock() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_player_list::clear_has_stock() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_player_list::clear_stock() {
  stock_ = GOOGLE_LONGLONG(0);
  clear_has_stock();
}
inline ::google::protobuf::int64 packetl2c_player_list::stock() const {
  return stock_;
}
inline void packetl2c_player_list::set_stock(::google::protobuf::int64 value) {
  set_has_stock();
  stock_ = value;
}

// optional int64 profit = 4;
inline bool packetl2c_player_list::has_profit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_player_list::set_has_profit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_player_list::clear_has_profit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_player_list::clear_profit() {
  profit_ = GOOGLE_LONGLONG(0);
  clear_has_profit();
}
inline ::google::protobuf::int64 packetl2c_player_list::profit() const {
  return profit_;
}
inline void packetl2c_player_list::set_profit(::google::protobuf::int64 value) {
  set_has_profit();
  profit_ = value;
}

// -------------------------------------------------------------------

// packetc2l_debug

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_debug];
inline bool packetc2l_debug::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_debug::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_debug::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_debug::clear_packet_id() {
  packet_id_ = 10014;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetc2l_debug::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_debug::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 playerid = 2;
inline bool packetc2l_debug::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_debug::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_debug::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_debug::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 packetc2l_debug::playerid() const {
  return playerid_;
}
inline void packetc2l_debug::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional int32 count = 3;
inline bool packetc2l_debug::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_debug::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_debug::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_debug::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 packetc2l_debug::count() const {
  return count_;
}
inline void packetc2l_debug::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// packetl2c_debug_result

// optional .game_fruitmachine_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_debug_result];
inline bool packetl2c_debug_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_debug_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_debug_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_debug_result::clear_packet_id() {
  packet_id_ = 15020;
  clear_has_packet_id();
}
inline ::game_fruitmachine_protocols::e_server_msg_type packetl2c_debug_result::packet_id() const {
  return static_cast< ::game_fruitmachine_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_debug_result::set_packet_id(::game_fruitmachine_protocols::e_server_msg_type value) {
  assert(::game_fruitmachine_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_debug_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_debug_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_debug_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_debug_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_debug_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_debug_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_fruitmachine_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5ffruitmachine_5fprotocol_2eproto__INCLUDED
