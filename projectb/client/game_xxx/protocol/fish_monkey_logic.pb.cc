// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fish_monkey_logic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fish_monkey_logic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fish_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2l_get_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fish_init_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fish_init_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_generator_init_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_generator_init_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_buff_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_buff_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_seat_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_seat_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_scene_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_scene_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_change_seat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_change_seat_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_change_rate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_change_rate_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_change_seat_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_change_seat_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_change_rate_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_change_rate_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_try_turret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_try_turret_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_try_turret_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_try_turret_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_try_turret_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_try_turret_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_try_turret_state_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_try_turret_state_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_use_turret_power_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_use_turret_power_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_use_turret_power_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_use_turret_power_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_turret_rotate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_turret_rotate_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_sync_gold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_sync_gold_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_enter_seat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_enter_seat_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_leave_seat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_leave_seat_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_robot_enter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_robot_enter_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_robot_leave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_robot_leave_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_change_rate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_change_rate_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_change_attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_change_attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fish_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fish_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_create_fish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_create_fish_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_create_generator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_create_generator_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_manual_fire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_manual_fire_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_manual_fire_fail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_manual_fire_fail_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_manual_fire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_manual_fire_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_missile_fire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_missile_fire_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_missile_fire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_missile_fire_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_hit_fish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_hit_fish_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_hit_fishs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_hit_fishs_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_fish_die_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_fish_die_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_specialfish_die_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_specialfish_die_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_fishs_die_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_fishs_die_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_change_scene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_change_scene_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_addbuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_addbuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_removebuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_removebuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_changeturret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_changeturret_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_lock_fish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_lock_fish_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_lock_fish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_lock_fish_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_freeze_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_freeze_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_change_scene_bg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_change_scene_bg_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_scene_time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_scene_time_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_hit_fishs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_hit_fishs_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_turret_rotate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_turret_rotate_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_change_max_power_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_change_max_power_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_debuginfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_debuginfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto() {
  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fish_monkey_logic.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2l_get_scene_info_descriptor_ = file->message_type(0);
  static const int packetc2l_get_scene_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_scene_info, packet_id_),
  };
  packetc2l_get_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_scene_info_descriptor_,
      packetc2l_get_scene_info::default_instance_,
      packetc2l_get_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_scene_info));
  msg_fish_init_descriptor_ = file->message_type(1);
  static const int msg_fish_init_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fish_init, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fish_init, fish_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fish_init, life_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fish_init, route_param_),
  };
  msg_fish_init_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fish_init_descriptor_,
      msg_fish_init::default_instance_,
      msg_fish_init_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fish_init, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fish_init, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fish_init));
  msg_generator_init_descriptor_ = file->message_type(2);
  static const int msg_generator_init_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_generator_init, generator_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_generator_init, life_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_generator_init, start_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_generator_init, route_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_generator_init, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_generator_init, pos_y_),
  };
  msg_generator_init_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_generator_init_descriptor_,
      msg_generator_init::default_instance_,
      msg_generator_init_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_generator_init, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_generator_init, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_generator_init));
  msg_scene_info_descriptor_ = file->message_type(3);
  static const int msg_scene_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, seat_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, fish_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, generator_infos_),
  };
  msg_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_scene_info_descriptor_,
      msg_scene_info::default_instance_,
      msg_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_scene_info));
  msg_buff_info_descriptor_ = file->message_type(4);
  static const int msg_buff_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_buff_info, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_buff_info, outtime_),
  };
  msg_buff_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_buff_info_descriptor_,
      msg_buff_info::default_instance_,
      msg_buff_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_buff_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_buff_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_buff_info));
  msg_seat_info_descriptor_ = file->message_type(5);
  static const int msg_seat_info_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, seat_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, player_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, turret_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, turret_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, bufflist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, turret_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, max_turret_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, photo_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, icon_custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, player_ticket_),
  };
  msg_seat_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_seat_info_descriptor_,
      msg_seat_info::default_instance_,
      msg_seat_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_seat_info));
  packetl2c_get_scene_info_result_descriptor_ = file->message_type(6);
  static const int packetl2c_get_scene_info_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_scene_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_scene_info_result, scene_info_),
  };
  packetl2c_get_scene_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_scene_info_result_descriptor_,
      packetl2c_get_scene_info_result::default_instance_,
      packetl2c_get_scene_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_scene_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_scene_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_scene_info_result));
  packetc2l_change_seat_descriptor_ = file->message_type(7);
  static const int packetc2l_change_seat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_change_seat, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_change_seat, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_change_seat, seat_index_),
  };
  packetc2l_change_seat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_change_seat_descriptor_,
      packetc2l_change_seat::default_instance_,
      packetc2l_change_seat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_change_seat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_change_seat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_change_seat));
  packetc2l_change_rate_descriptor_ = file->message_type(8);
  static const int packetc2l_change_rate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_change_rate, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_change_rate, turret_rate_),
  };
  packetc2l_change_rate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_change_rate_descriptor_,
      packetc2l_change_rate::default_instance_,
      packetc2l_change_rate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_change_rate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_change_rate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_change_rate));
  packetl2c_change_seat_result_descriptor_ = file->message_type(9);
  static const int packetl2c_change_seat_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_change_seat_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_change_seat_result, result_),
  };
  packetl2c_change_seat_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_change_seat_result_descriptor_,
      packetl2c_change_seat_result::default_instance_,
      packetl2c_change_seat_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_change_seat_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_change_seat_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_change_seat_result));
  packetl2c_change_rate_result_descriptor_ = file->message_type(10);
  static const int packetl2c_change_rate_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_change_rate_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_change_rate_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_change_rate_result, old_rate_),
  };
  packetl2c_change_rate_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_change_rate_result_descriptor_,
      packetl2c_change_rate_result::default_instance_,
      packetl2c_change_rate_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_change_rate_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_change_rate_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_change_rate_result));
  packetc2l_try_turret_descriptor_ = file->message_type(11);
  static const int packetc2l_try_turret_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_try_turret, packet_id_),
  };
  packetc2l_try_turret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_try_turret_descriptor_,
      packetc2l_try_turret::default_instance_,
      packetc2l_try_turret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_try_turret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_try_turret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_try_turret));
  packetl2c_try_turret_result_descriptor_ = file->message_type(12);
  static const int packetl2c_try_turret_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_try_turret_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_try_turret_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_try_turret_result, try_turret_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_try_turret_result, try_endtime_),
  };
  packetl2c_try_turret_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_try_turret_result_descriptor_,
      packetl2c_try_turret_result::default_instance_,
      packetl2c_try_turret_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_try_turret_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_try_turret_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_try_turret_result));
  packetc2l_try_turret_state_descriptor_ = file->message_type(13);
  static const int packetc2l_try_turret_state_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_try_turret_state, packet_id_),
  };
  packetc2l_try_turret_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_try_turret_state_descriptor_,
      packetc2l_try_turret_state::default_instance_,
      packetc2l_try_turret_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_try_turret_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_try_turret_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_try_turret_state));
  packetl2c_try_turret_state_result_descriptor_ = file->message_type(14);
  static const int packetl2c_try_turret_state_result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_try_turret_state_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_try_turret_state_result, try_turret_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_try_turret_state_result, fire_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_try_turret_state_result, try_cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_try_turret_state_result, try_endtime_),
  };
  packetl2c_try_turret_state_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_try_turret_state_result_descriptor_,
      packetl2c_try_turret_state_result::default_instance_,
      packetl2c_try_turret_state_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_try_turret_state_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_try_turret_state_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_try_turret_state_result));
  packetc2l_use_turret_power_descriptor_ = file->message_type(15);
  static const int packetc2l_use_turret_power_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_use_turret_power, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_use_turret_power, is_buy_),
  };
  packetc2l_use_turret_power_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_use_turret_power_descriptor_,
      packetc2l_use_turret_power::default_instance_,
      packetc2l_use_turret_power_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_use_turret_power, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_use_turret_power, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_use_turret_power));
  packetl2c_use_turret_power_result_descriptor_ = file->message_type(16);
  static const int packetl2c_use_turret_power_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_use_turret_power_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_use_turret_power_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_use_turret_power_result, power_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_use_turret_power_result, is_buy_),
  };
  packetl2c_use_turret_power_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_use_turret_power_result_descriptor_,
      packetl2c_use_turret_power_result::default_instance_,
      packetl2c_use_turret_power_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_use_turret_power_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_use_turret_power_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_use_turret_power_result));
  packetc2l_turret_rotate_descriptor_ = file->message_type(17);
  static const int packetc2l_turret_rotate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_turret_rotate, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_turret_rotate, rotate_angle_),
  };
  packetc2l_turret_rotate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_turret_rotate_descriptor_,
      packetc2l_turret_rotate::default_instance_,
      packetc2l_turret_rotate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_turret_rotate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_turret_rotate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_turret_rotate));
  packetc2l_sync_gold_descriptor_ = file->message_type(18);
  static const int packetc2l_sync_gold_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_sync_gold, packet_id_),
  };
  packetc2l_sync_gold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_sync_gold_descriptor_,
      packetc2l_sync_gold::default_instance_,
      packetc2l_sync_gold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_sync_gold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_sync_gold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_sync_gold));
  packetl2c_bc_enter_seat_descriptor_ = file->message_type(19);
  static const int packetl2c_bc_enter_seat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_enter_seat, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_enter_seat, seat_info_),
  };
  packetl2c_bc_enter_seat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_enter_seat_descriptor_,
      packetl2c_bc_enter_seat::default_instance_,
      packetl2c_bc_enter_seat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_enter_seat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_enter_seat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_enter_seat));
  packetl2c_bc_leave_seat_descriptor_ = file->message_type(20);
  static const int packetl2c_bc_leave_seat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_leave_seat, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_leave_seat, player_id_),
  };
  packetl2c_bc_leave_seat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_leave_seat_descriptor_,
      packetl2c_bc_leave_seat::default_instance_,
      packetl2c_bc_leave_seat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_leave_seat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_leave_seat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_leave_seat));
  packetl2c_robot_enter_descriptor_ = file->message_type(21);
  static const int packetl2c_robot_enter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_robot_enter, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_robot_enter, seat_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_robot_enter, scene_id_),
  };
  packetl2c_robot_enter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_robot_enter_descriptor_,
      packetl2c_robot_enter::default_instance_,
      packetl2c_robot_enter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_robot_enter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_robot_enter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_robot_enter));
  packetl2c_robot_leave_descriptor_ = file->message_type(22);
  static const int packetl2c_robot_leave_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_robot_leave, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_robot_leave, player_id_),
  };
  packetl2c_robot_leave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_robot_leave_descriptor_,
      packetl2c_robot_leave::default_instance_,
      packetl2c_robot_leave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_robot_leave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_robot_leave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_robot_leave));
  packetl2c_bc_change_rate_descriptor_ = file->message_type(23);
  static const int packetl2c_bc_change_rate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_rate, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_rate, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_rate, turret_rate_),
  };
  packetl2c_bc_change_rate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_change_rate_descriptor_,
      packetl2c_bc_change_rate::default_instance_,
      packetl2c_bc_change_rate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_rate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_rate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_change_rate));
  packetl2c_bc_change_attr_descriptor_ = file->message_type(24);
  static const int packetl2c_bc_change_attr_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, change_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, change_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, change_ticket_),
  };
  packetl2c_bc_change_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_change_attr_descriptor_,
      packetl2c_bc_change_attr::default_instance_,
      packetl2c_bc_change_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_change_attr));
  msg_fish_info_descriptor_ = file->message_type(25);
  static const int msg_fish_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fish_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fish_info, fish_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fish_info, route_id_),
  };
  msg_fish_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fish_info_descriptor_,
      msg_fish_info::default_instance_,
      msg_fish_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fish_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fish_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fish_info));
  packetl2c_bc_create_fish_descriptor_ = file->message_type(26);
  static const int packetl2c_bc_create_fish_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_fish, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_fish, fish_info_),
  };
  packetl2c_bc_create_fish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_create_fish_descriptor_,
      packetl2c_bc_create_fish::default_instance_,
      packetl2c_bc_create_fish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_fish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_fish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_create_fish));
  packetl2c_bc_create_generator_descriptor_ = file->message_type(27);
  static const int packetl2c_bc_create_generator_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_generator, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_generator, generator_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_generator, start_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_generator, route_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_generator, is_red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_generator, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_generator, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_generator, is_flash_),
  };
  packetl2c_bc_create_generator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_create_generator_descriptor_,
      packetl2c_bc_create_generator::default_instance_,
      packetl2c_bc_create_generator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_generator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_create_generator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_create_generator));
  packetc2l_manual_fire_descriptor_ = file->message_type(28);
  static const int packetc2l_manual_fire_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_manual_fire, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_manual_fire, bullet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_manual_fire, bullet_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_manual_fire, is_multi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_manual_fire, is_fast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_manual_fire, bullet_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_manual_fire, bullet_rate_),
  };
  packetc2l_manual_fire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_manual_fire_descriptor_,
      packetc2l_manual_fire::default_instance_,
      packetc2l_manual_fire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_manual_fire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_manual_fire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_manual_fire));
  packetl2c_manual_fire_fail_descriptor_ = file->message_type(29);
  static const int packetl2c_manual_fire_fail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_manual_fire_fail, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_manual_fire_fail, bullet_cost_),
  };
  packetl2c_manual_fire_fail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_manual_fire_fail_descriptor_,
      packetl2c_manual_fire_fail::default_instance_,
      packetl2c_manual_fire_fail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_manual_fire_fail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_manual_fire_fail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_manual_fire_fail));
  packetl2c_bc_manual_fire_descriptor_ = file->message_type(30);
  static const int packetl2c_bc_manual_fire_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_manual_fire, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_manual_fire, bullet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_manual_fire, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_manual_fire, bullet_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_manual_fire, is_multi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_manual_fire, bullet_type_),
  };
  packetl2c_bc_manual_fire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_manual_fire_descriptor_,
      packetl2c_bc_manual_fire::default_instance_,
      packetl2c_bc_manual_fire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_manual_fire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_manual_fire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_manual_fire));
  packetc2l_missile_fire_descriptor_ = file->message_type(31);
  static const int packetc2l_missile_fire_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_missile_fire, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_missile_fire, bullet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_missile_fire, fire_pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_missile_fire, fire_pos_y_),
  };
  packetc2l_missile_fire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_missile_fire_descriptor_,
      packetc2l_missile_fire::default_instance_,
      packetc2l_missile_fire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_missile_fire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_missile_fire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_missile_fire));
  packetl2c_bc_missile_fire_descriptor_ = file->message_type(32);
  static const int packetl2c_bc_missile_fire_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_missile_fire, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_missile_fire, bullet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_missile_fire, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_missile_fire, fire_pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_missile_fire, fire_pos_y_),
  };
  packetl2c_bc_missile_fire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_missile_fire_descriptor_,
      packetl2c_bc_missile_fire::default_instance_,
      packetl2c_bc_missile_fire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_missile_fire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_missile_fire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_missile_fire));
  packetc2l_hit_fish_descriptor_ = file->message_type(33);
  static const int packetc2l_hit_fish_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fish, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fish, bullet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fish, fish_id_),
  };
  packetc2l_hit_fish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_hit_fish_descriptor_,
      packetc2l_hit_fish::default_instance_,
      packetc2l_hit_fish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_hit_fish));
  packetc2l_hit_fishs_descriptor_ = file->message_type(34);
  static const int packetc2l_hit_fishs_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fishs, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fishs, hit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fishs, bullet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fishs, fish_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fishs, hit_param_),
  };
  packetc2l_hit_fishs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_hit_fishs_descriptor_,
      packetc2l_hit_fishs::default_instance_,
      packetc2l_hit_fishs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fishs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_hit_fishs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_hit_fishs));
  packetl2c_bc_fish_die_descriptor_ = file->message_type(35);
  static const int packetl2c_bc_fish_die_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fish_die, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fish_die, fish_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fish_die, kill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fish_die, base_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fish_die, add_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fish_die, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fish_die, getstar_),
  };
  packetl2c_bc_fish_die_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_fish_die_descriptor_,
      packetl2c_bc_fish_die::default_instance_,
      packetl2c_bc_fish_die_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fish_die, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fish_die, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_fish_die));
  packetl2c_bc_specialfish_die_descriptor_ = file->message_type(36);
  static const int packetl2c_bc_specialfish_die_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_specialfish_die, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_specialfish_die, fish_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_specialfish_die, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_specialfish_die, bullet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_specialfish_die, base_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_specialfish_die, add_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_specialfish_die, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_specialfish_die, getstar_),
  };
  packetl2c_bc_specialfish_die_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_specialfish_die_descriptor_,
      packetl2c_bc_specialfish_die::default_instance_,
      packetl2c_bc_specialfish_die_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_specialfish_die, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_specialfish_die, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_specialfish_die));
  packetl2c_bc_fishs_die_descriptor_ = file->message_type(37);
  static const int packetl2c_bc_fishs_die_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fishs_die, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fishs_die, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fishs_die, die_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fishs_die, die_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fishs_die, total_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fishs_die, base_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fishs_die, add_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fishs_die, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fishs_die, getstar_),
  };
  packetl2c_bc_fishs_die_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_fishs_die_descriptor_,
      packetl2c_bc_fishs_die::default_instance_,
      packetl2c_bc_fishs_die_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fishs_die, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_fishs_die, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_fishs_die));
  packetl2c_bc_change_scene_descriptor_ = file->message_type(38);
  static const int packetl2c_bc_change_scene_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_scene, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_scene, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_scene, large_fish_id_),
  };
  packetl2c_bc_change_scene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_change_scene_descriptor_,
      packetl2c_bc_change_scene::default_instance_,
      packetl2c_bc_change_scene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_scene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_scene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_change_scene));
  packetl2c_bc_addbuff_descriptor_ = file->message_type(39);
  static const int packetl2c_bc_addbuff_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_addbuff, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_addbuff, buff_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_addbuff, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_addbuff, buff_time_),
  };
  packetl2c_bc_addbuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_addbuff_descriptor_,
      packetl2c_bc_addbuff::default_instance_,
      packetl2c_bc_addbuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_addbuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_addbuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_addbuff));
  packetl2c_bc_removebuff_descriptor_ = file->message_type(40);
  static const int packetl2c_bc_removebuff_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_removebuff, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_removebuff, buff_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_removebuff, player_id_),
  };
  packetl2c_bc_removebuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_removebuff_descriptor_,
      packetl2c_bc_removebuff::default_instance_,
      packetl2c_bc_removebuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_removebuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_removebuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_removebuff));
  packetl2c_bc_changeturret_descriptor_ = file->message_type(41);
  static const int packetl2c_bc_changeturret_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_changeturret, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_changeturret, turret_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_changeturret, player_id_),
  };
  packetl2c_bc_changeturret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_changeturret_descriptor_,
      packetl2c_bc_changeturret::default_instance_,
      packetl2c_bc_changeturret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_changeturret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_changeturret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_changeturret));
  packetc2l_lock_fish_descriptor_ = file->message_type(42);
  static const int packetc2l_lock_fish_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_lock_fish, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_lock_fish, fish_id_),
  };
  packetc2l_lock_fish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_lock_fish_descriptor_,
      packetc2l_lock_fish::default_instance_,
      packetc2l_lock_fish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_lock_fish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_lock_fish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_lock_fish));
  packetl2c_bc_lock_fish_descriptor_ = file->message_type(43);
  static const int packetl2c_bc_lock_fish_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_lock_fish, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_lock_fish, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_lock_fish, fish_id_),
  };
  packetl2c_bc_lock_fish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_lock_fish_descriptor_,
      packetl2c_bc_lock_fish::default_instance_,
      packetl2c_bc_lock_fish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_lock_fish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_lock_fish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_lock_fish));
  packetl2c_bc_freeze_descriptor_ = file->message_type(44);
  static const int packetl2c_bc_freeze_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_freeze, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_freeze, freeze_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_freeze, is_show_),
  };
  packetl2c_bc_freeze_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_freeze_descriptor_,
      packetl2c_bc_freeze::default_instance_,
      packetl2c_bc_freeze_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_freeze, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_freeze, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_freeze));
  packetl2c_bc_change_scene_bg_descriptor_ = file->message_type(45);
  static const int packetl2c_bc_change_scene_bg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_scene_bg, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_scene_bg, scene_id_),
  };
  packetl2c_bc_change_scene_bg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_change_scene_bg_descriptor_,
      packetl2c_bc_change_scene_bg::default_instance_,
      packetl2c_bc_change_scene_bg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_scene_bg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_scene_bg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_change_scene_bg));
  packetl2c_bc_scene_time_descriptor_ = file->message_type(46);
  static const int packetl2c_bc_scene_time_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_time, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_time, scene_time_),
  };
  packetl2c_bc_scene_time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_scene_time_descriptor_,
      packetl2c_bc_scene_time::default_instance_,
      packetl2c_bc_scene_time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_time, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_scene_time));
  packetl2c_bc_hit_fishs_descriptor_ = file->message_type(47);
  static const int packetl2c_bc_hit_fishs_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_hit_fishs, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_hit_fishs, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_hit_fishs, hit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_hit_fishs, fish_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_hit_fishs, params_),
  };
  packetl2c_bc_hit_fishs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_hit_fishs_descriptor_,
      packetl2c_bc_hit_fishs::default_instance_,
      packetl2c_bc_hit_fishs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_hit_fishs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_hit_fishs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_hit_fishs));
  packetl2c_bc_turret_rotate_descriptor_ = file->message_type(48);
  static const int packetl2c_bc_turret_rotate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_turret_rotate, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_turret_rotate, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_turret_rotate, rotate_angle_),
  };
  packetl2c_bc_turret_rotate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_turret_rotate_descriptor_,
      packetl2c_bc_turret_rotate::default_instance_,
      packetl2c_bc_turret_rotate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_turret_rotate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_turret_rotate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_turret_rotate));
  packetl2c_bc_change_max_power_descriptor_ = file->message_type(49);
  static const int packetl2c_bc_change_max_power_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_max_power, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_max_power, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_max_power, max_power_),
  };
  packetl2c_bc_change_max_power_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_change_max_power_descriptor_,
      packetl2c_bc_change_max_power::default_instance_,
      packetl2c_bc_change_max_power_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_max_power, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_max_power, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_change_max_power));
  packetl2c_bc_debuginfo_descriptor_ = file->message_type(50);
  static const int packetl2c_bc_debuginfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, total_profit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, total_stock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, debug_infos_),
  };
  packetl2c_bc_debuginfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_debuginfo_descriptor_,
      packetl2c_bc_debuginfo::default_instance_,
      packetl2c_bc_debuginfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_debuginfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_scene_info_descriptor_, &packetc2l_get_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fish_init_descriptor_, &msg_fish_init::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_generator_init_descriptor_, &msg_generator_init::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_scene_info_descriptor_, &msg_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_buff_info_descriptor_, &msg_buff_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_seat_info_descriptor_, &msg_seat_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_scene_info_result_descriptor_, &packetl2c_get_scene_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_change_seat_descriptor_, &packetc2l_change_seat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_change_rate_descriptor_, &packetc2l_change_rate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_change_seat_result_descriptor_, &packetl2c_change_seat_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_change_rate_result_descriptor_, &packetl2c_change_rate_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_try_turret_descriptor_, &packetc2l_try_turret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_try_turret_result_descriptor_, &packetl2c_try_turret_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_try_turret_state_descriptor_, &packetc2l_try_turret_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_try_turret_state_result_descriptor_, &packetl2c_try_turret_state_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_use_turret_power_descriptor_, &packetc2l_use_turret_power::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_use_turret_power_result_descriptor_, &packetl2c_use_turret_power_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_turret_rotate_descriptor_, &packetc2l_turret_rotate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_sync_gold_descriptor_, &packetc2l_sync_gold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_enter_seat_descriptor_, &packetl2c_bc_enter_seat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_leave_seat_descriptor_, &packetl2c_bc_leave_seat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_robot_enter_descriptor_, &packetl2c_robot_enter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_robot_leave_descriptor_, &packetl2c_robot_leave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_change_rate_descriptor_, &packetl2c_bc_change_rate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_change_attr_descriptor_, &packetl2c_bc_change_attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fish_info_descriptor_, &msg_fish_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_create_fish_descriptor_, &packetl2c_bc_create_fish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_create_generator_descriptor_, &packetl2c_bc_create_generator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_manual_fire_descriptor_, &packetc2l_manual_fire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_manual_fire_fail_descriptor_, &packetl2c_manual_fire_fail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_manual_fire_descriptor_, &packetl2c_bc_manual_fire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_missile_fire_descriptor_, &packetc2l_missile_fire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_missile_fire_descriptor_, &packetl2c_bc_missile_fire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_hit_fish_descriptor_, &packetc2l_hit_fish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_hit_fishs_descriptor_, &packetc2l_hit_fishs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_fish_die_descriptor_, &packetl2c_bc_fish_die::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_specialfish_die_descriptor_, &packetl2c_bc_specialfish_die::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_fishs_die_descriptor_, &packetl2c_bc_fishs_die::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_change_scene_descriptor_, &packetl2c_bc_change_scene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_addbuff_descriptor_, &packetl2c_bc_addbuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_removebuff_descriptor_, &packetl2c_bc_removebuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_changeturret_descriptor_, &packetl2c_bc_changeturret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_lock_fish_descriptor_, &packetc2l_lock_fish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_lock_fish_descriptor_, &packetl2c_bc_lock_fish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_freeze_descriptor_, &packetl2c_bc_freeze::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_change_scene_bg_descriptor_, &packetl2c_bc_change_scene_bg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_scene_time_descriptor_, &packetl2c_bc_scene_time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_hit_fishs_descriptor_, &packetl2c_bc_hit_fishs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_turret_rotate_descriptor_, &packetl2c_bc_turret_rotate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_change_max_power_descriptor_, &packetl2c_bc_change_max_power::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_debuginfo_descriptor_, &packetl2c_bc_debuginfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto() {
  delete packetc2l_get_scene_info::default_instance_;
  delete packetc2l_get_scene_info_reflection_;
  delete msg_fish_init::default_instance_;
  delete msg_fish_init_reflection_;
  delete msg_generator_init::default_instance_;
  delete msg_generator_init_reflection_;
  delete msg_scene_info::default_instance_;
  delete msg_scene_info_reflection_;
  delete msg_buff_info::default_instance_;
  delete msg_buff_info_reflection_;
  delete msg_seat_info::default_instance_;
  delete msg_seat_info_reflection_;
  delete packetl2c_get_scene_info_result::default_instance_;
  delete packetl2c_get_scene_info_result_reflection_;
  delete packetc2l_change_seat::default_instance_;
  delete packetc2l_change_seat_reflection_;
  delete packetc2l_change_rate::default_instance_;
  delete packetc2l_change_rate_reflection_;
  delete packetl2c_change_seat_result::default_instance_;
  delete packetl2c_change_seat_result_reflection_;
  delete packetl2c_change_rate_result::default_instance_;
  delete packetl2c_change_rate_result_reflection_;
  delete packetc2l_try_turret::default_instance_;
  delete packetc2l_try_turret_reflection_;
  delete packetl2c_try_turret_result::default_instance_;
  delete packetl2c_try_turret_result_reflection_;
  delete packetc2l_try_turret_state::default_instance_;
  delete packetc2l_try_turret_state_reflection_;
  delete packetl2c_try_turret_state_result::default_instance_;
  delete packetl2c_try_turret_state_result_reflection_;
  delete packetc2l_use_turret_power::default_instance_;
  delete packetc2l_use_turret_power_reflection_;
  delete packetl2c_use_turret_power_result::default_instance_;
  delete packetl2c_use_turret_power_result_reflection_;
  delete packetc2l_turret_rotate::default_instance_;
  delete packetc2l_turret_rotate_reflection_;
  delete packetc2l_sync_gold::default_instance_;
  delete packetc2l_sync_gold_reflection_;
  delete packetl2c_bc_enter_seat::default_instance_;
  delete packetl2c_bc_enter_seat_reflection_;
  delete packetl2c_bc_leave_seat::default_instance_;
  delete packetl2c_bc_leave_seat_reflection_;
  delete packetl2c_robot_enter::default_instance_;
  delete packetl2c_robot_enter_reflection_;
  delete packetl2c_robot_leave::default_instance_;
  delete packetl2c_robot_leave_reflection_;
  delete packetl2c_bc_change_rate::default_instance_;
  delete packetl2c_bc_change_rate_reflection_;
  delete packetl2c_bc_change_attr::default_instance_;
  delete packetl2c_bc_change_attr_reflection_;
  delete msg_fish_info::default_instance_;
  delete msg_fish_info_reflection_;
  delete packetl2c_bc_create_fish::default_instance_;
  delete packetl2c_bc_create_fish_reflection_;
  delete packetl2c_bc_create_generator::default_instance_;
  delete packetl2c_bc_create_generator_reflection_;
  delete packetc2l_manual_fire::default_instance_;
  delete packetc2l_manual_fire_reflection_;
  delete packetl2c_manual_fire_fail::default_instance_;
  delete packetl2c_manual_fire_fail_reflection_;
  delete packetl2c_bc_manual_fire::default_instance_;
  delete packetl2c_bc_manual_fire_reflection_;
  delete packetc2l_missile_fire::default_instance_;
  delete packetc2l_missile_fire_reflection_;
  delete packetl2c_bc_missile_fire::default_instance_;
  delete packetl2c_bc_missile_fire_reflection_;
  delete packetc2l_hit_fish::default_instance_;
  delete packetc2l_hit_fish_reflection_;
  delete packetc2l_hit_fishs::default_instance_;
  delete packetc2l_hit_fishs_reflection_;
  delete packetl2c_bc_fish_die::default_instance_;
  delete packetl2c_bc_fish_die_reflection_;
  delete packetl2c_bc_specialfish_die::default_instance_;
  delete packetl2c_bc_specialfish_die_reflection_;
  delete packetl2c_bc_fishs_die::default_instance_;
  delete packetl2c_bc_fishs_die_reflection_;
  delete packetl2c_bc_change_scene::default_instance_;
  delete packetl2c_bc_change_scene_reflection_;
  delete packetl2c_bc_addbuff::default_instance_;
  delete packetl2c_bc_addbuff_reflection_;
  delete packetl2c_bc_removebuff::default_instance_;
  delete packetl2c_bc_removebuff_reflection_;
  delete packetl2c_bc_changeturret::default_instance_;
  delete packetl2c_bc_changeturret_reflection_;
  delete packetc2l_lock_fish::default_instance_;
  delete packetc2l_lock_fish_reflection_;
  delete packetl2c_bc_lock_fish::default_instance_;
  delete packetl2c_bc_lock_fish_reflection_;
  delete packetl2c_bc_freeze::default_instance_;
  delete packetl2c_bc_freeze_reflection_;
  delete packetl2c_bc_change_scene_bg::default_instance_;
  delete packetl2c_bc_change_scene_bg_reflection_;
  delete packetl2c_bc_scene_time::default_instance_;
  delete packetl2c_bc_scene_time_reflection_;
  delete packetl2c_bc_hit_fishs::default_instance_;
  delete packetl2c_bc_hit_fishs_reflection_;
  delete packetl2c_bc_turret_rotate::default_instance_;
  delete packetl2c_bc_turret_rotate_reflection_;
  delete packetl2c_bc_change_max_power::default_instance_;
  delete packetl2c_bc_change_max_power_reflection_;
  delete packetl2c_bc_debuginfo::default_instance_;
  delete packetl2c_bc_debuginfo_reflection_;
}

void protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::fish_protocols::protobuf_AddDesc_fish_5fmonkey_5fdef_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027fish_monkey_logic.proto\022\016fish_protocol"
    "s\032\025fish_monkey_def.proto\032\022msg_type_def.p"
    "roto\"j\n\030packetc2l_get_scene_info\022N\n\tpack"
    "et_id\030\001 \001(\0162!.fish_protocols.e_server_ms"
    "g_type:\030e_mst_c2l_get_scene_info\"T\n\rmsg_"
    "fish_init\022\n\n\002id\030\001 \001(\005\022\017\n\007fish_id\030\002 \001(\005\022\021"
    "\n\tlife_time\030\003 \001(\005\022\023\n\013route_param\030\004 \003(\005\"\210"
    "\001\n\022msg_generator_init\022\024\n\014generator_id\030\001 "
    "\001(\005\022\021\n\tlife_time\030\002 \001(\005\022\020\n\010start_id\030\003 \001(\005"
    "\022\023\n\010route_id\030\004 \001(\005:\0010\022\020\n\005pos_x\030\005 \001(\005:\0010\022"
    "\020\n\005pos_y\030\006 \001(\005:\0010\"\323\001\n\016msg_scene_info\022\017\n\007"
    "sceneid\030\001 \001(\005\022\016\n\006roomid\030\002 \001(\005\0220\n\tseat_in"
    "fo\030\003 \003(\0132\035.fish_protocols.msg_seat_info\022"
    "1\n\nfish_infos\030\004 \003(\0132\035.fish_protocols.msg"
    "_fish_init\022;\n\017generator_infos\030\005 \003(\0132\".fi"
    "sh_protocols.msg_generator_init\"4\n\rmsg_b"
    "uff_info\022\016\n\006buffid\030\001 \001(\005\022\023\n\007outtime\030\002 \001("
    "\005:\002-1\"\301\002\n\rmsg_seat_info\022\022\n\nseat_index\030\001 "
    "\001(\005\022\021\n\tplayer_id\030\002 \001(\005\022\020\n\010nickname\030\003 \001(\t"
    "\022\023\n\013player_gold\030\004 \001(\003\022\023\n\013turret_rate\030\005 \001"
    "(\005\022\021\n\tturret_id\030\006 \001(\005\022/\n\010bufflist\030\007 \003(\0132"
    "\035.fish_protocols.msg_buff_info\022\024\n\014turret"
    "_power\030\010 \001(\005\022\030\n\020max_turret_power\030\t \001(\005\022\023"
    "\n\013photo_frame\030\n \001(\005\022\023\n\013icon_custom\030\013 \001(\t"
    "\022\013\n\003sex\030\014 \001(\005\022\013\n\003vip\030\r \001(\005\022\025\n\rplayer_tic"
    "ket\030\016 \001(\005\"\254\001\n\037packetl2c_get_scene_info_r"
    "esult\022U\n\tpacket_id\030\001 \001(\0162!.fish_protocol"
    "s.e_server_msg_type:\037e_mst_l2c_get_scene"
    "_info_result\0222\n\nscene_info\030\002 \001(\0132\036.fish_"
    "protocols.msg_scene_info\"\213\001\n\025packetc2l_c"
    "hange_seat\022K\n\tpacket_id\030\001 \001(\0162!.fish_pro"
    "tocols.e_server_msg_type:\025e_mst_c2l_chan"
    "ge_seat\022\021\n\tplayer_id\030\002 \001(\005\022\022\n\nseat_index"
    "\030\003 \001(\005\"y\n\025packetc2l_change_rate\022K\n\tpacke"
    "t_id\030\001 \001(\0162!.fish_protocols.e_server_msg"
    "_type:\025e_mst_c2l_change_rate\022\023\n\013turret_r"
    "ate\030\002 \001(\005\"\256\001\n\034packetl2c_change_seat_resu"
    "lt\022R\n\tpacket_id\030\001 \001(\0162!.fish_protocols.e"
    "_server_msg_type:\034e_mst_l2c_change_seat_"
    "result\022:\n\006result\030\002 \001(\0162\036.msg_type_def.e_"
    "msg_result_def:\ne_rmt_fail\"\300\001\n\034packetl2c"
    "_change_rate_result\022R\n\tpacket_id\030\001 \001(\0162!"
    ".fish_protocols.e_server_msg_type:\034e_mst"
    "_l2c_change_rate_result\022:\n\006result\030\002 \001(\0162"
    "\036.msg_type_def.e_msg_result_def:\ne_rmt_f"
    "ail\022\020\n\010old_rate\030\003 \001(\005\"b\n\024packetc2l_try_t"
    "urret\022J\n\tpacket_id\030\001 \001(\0162!.fish_protocol"
    "s.e_server_msg_type:\024e_mst_c2l_try_turre"
    "t\"\334\001\n\033packetl2c_try_turret_result\022Q\n\tpac"
    "ket_id\030\001 \001(\0162!.fish_protocols.e_server_m"
    "sg_type:\033e_mst_l2c_try_turret_result\022:\n\006"
    "result\030\002 \001(\0162\036.msg_type_def.e_msg_result"
    "_def:\ne_rmt_fail\022\031\n\rtry_turret_id\030\003 \001(\005:"
    "\002-1\022\023\n\013try_endtime\030\004 \001(\005\"n\n\032packetc2l_tr"
    "y_turret_state\022P\n\tpacket_id\030\001 \001(\0162!.fish"
    "_protocols.e_server_msg_type:\032e_mst_c2l_"
    "try_turret_state\"\320\001\n!packetl2c_try_turre"
    "t_state_result\022W\n\tpacket_id\030\001 \001(\0162!.fish"
    "_protocols.e_server_msg_type:!e_mst_l2c_"
    "try_turret_state_result\022\031\n\rtry_turret_id"
    "\030\002 \001(\005:\002-1\022\022\n\nfire_count\030\003 \001(\005\022\016\n\006try_cd"
    "\030\004 \001(\005\022\023\n\013try_endtime\030\005 \001(\005\"\205\001\n\032packetc2"
    "l_use_turret_power\022P\n\tpacket_id\030\001 \001(\0162!."
    "fish_protocols.e_server_msg_type:\032e_mst_"
    "c2l_use_turret_power\022\025\n\006is_buy\030\002 \001(\010:\005fa"
    "lse\"\343\001\n!packetl2c_use_turret_power_resul"
    "t\022W\n\tpacket_id\030\001 \001(\0162!.fish_protocols.e_"
    "server_msg_type:!e_mst_l2c_use_turret_po"
    "wer_result\022:\n\006result\030\002 \001(\0162\036.msg_type_de"
    "f.e_msg_result_def:\ne_rmt_fail\022\022\n\npower_"
    "type\030\003 \001(\005\022\025\n\006is_buy\030\004 \001(\010:\005false\"~\n\027pac"
    "ketc2l_turret_rotate\022M\n\tpacket_id\030\001 \001(\0162"
    "!.fish_protocols.e_server_msg_type:\027e_ms"
    "t_c2l_turret_rotate\022\024\n\014rotate_angle\030\002 \001("
    "\005\"`\n\023packetc2l_sync_gold\022I\n\tpacket_id\030\001 "
    "\001(\0162!.fish_protocols.e_server_msg_type:\023"
    "e_mst_c2l_sync_gold\"\232\001\n\027packetl2c_bc_ent"
    "er_seat\022M\n\tpacket_id\030\001 \001(\0162!.fish_protoc"
    "ols.e_server_msg_type:\027e_mst_l2c_bc_ente"
    "r_seat\0220\n\tseat_info\030\002 \001(\0132\035.fish_protoco"
    "ls.msg_seat_info\"{\n\027packetl2c_bc_leave_s"
    "eat\022M\n\tpacket_id\030\001 \001(\0162!.fish_protocols."
    "e_server_msg_type:\027e_mst_l2c_bc_leave_se"
    "at\022\021\n\tplayer_id\030\002 \001(\005\"\250\001\n\025packetl2c_robo"
    "t_enter\022K\n\tpacket_id\030\001 \001(\0162!.fish_protoc"
    "ols.e_server_msg_type:\025e_mst_c2l_robot_e"
    "nter\0220\n\tseat_info\030\002 \001(\0132\035.fish_protocols"
    ".msg_seat_info\022\020\n\010scene_id\030\003 \001(\005\"w\n\025pack"
    "etl2c_robot_leave\022K\n\tpacket_id\030\001 \001(\0162!.f"
    "ish_protocols.e_server_msg_type:\025e_mst_l"
    "2c_robot_leave\022\021\n\tplayer_id\030\002 \001(\005\"\222\001\n\030pa"
    "cketl2c_bc_change_rate\022N\n\tpacket_id\030\001 \001("
    "\0162!.fish_protocols.e_server_msg_type:\030e_"
    "mst_l2c_bc_change_rate\022\021\n\tplayer_id\030\002 \001("
    "\005\022\023\n\013turret_rate\030\003 \001(\005\"\275\001\n\030packetl2c_bc_"
    "change_attr\022N\n\tpacket_id\030\001 \001(\0162!.fish_pr"
    "otocols.e_server_msg_type:\030e_mst_l2c_bc_"
    "change_attr\022\021\n\tplayer_id\030\002 \001(\005\022\023\n\013change"
    "_gold\030\003 \001(\003\022\022\n\nchange_vip\030\004 \001(\005\022\025\n\rchang"
    "e_ticket\030\005 \001(\005\">\n\rmsg_fish_info\022\n\n\002id\030\001 "
    "\001(\005\022\017\n\007fish_id\030\002 \001(\005\022\020\n\010route_id\030\003 \001(\005\"\234"
    "\001\n\030packetl2c_bc_create_fish\022N\n\tpacket_id"
    "\030\001 \001(\0162!.fish_protocols.e_server_msg_typ"
    "e:\030e_mst_l2c_bc_create_fish\0220\n\tfish_info"
    "\030\002 \001(\0132\035.fish_protocols.msg_fish_info\"\377\001"
    "\n\035packetl2c_bc_create_generator\022S\n\tpacke"
    "t_id\030\001 \001(\0162!.fish_protocols.e_server_msg"
    "_type:\035e_mst_l2c_bc_create_generator\022\024\n\014"
    "generator_id\030\002 \001(\005\022\020\n\010start_id\030\003 \001(\005\022\023\n\010"
    "route_id\030\004 \001(\005:\0010\022\025\n\006is_red\030\005 \001(\010:\005false"
    "\022\r\n\005pos_x\030\006 \001(\005\022\r\n\005pos_y\030\007 \001(\005\022\027\n\010is_fla"
    "sh\030\010 \001(\010:\005false\"\353\001\n\025packetc2l_manual_fir"
    "e\022K\n\tpacket_id\030\001 \001(\0162!.fish_protocols.e_"
    "server_msg_type:\025e_mst_c2l_manual_fire\022\021"
    "\n\tbullet_id\030\002 \001(\005\022\024\n\014bullet_angle\030\003 \001(\005\022"
    "\027\n\010is_multi\030\004 \001(\010:\005false\022\026\n\007is_fast\030\005 \001("
    "\010:\005false\022\026\n\013bullet_type\030\006 \001(\005:\0011\022\023\n\013bull"
    "et_rate\030\007 \001(\005\"\203\001\n\032packetl2c_manual_fire_"
    "fail\022P\n\tpacket_id\030\001 \001(\0162!.fish_protocols"
    ".e_server_msg_type:\032e_mst_l2c_manual_fir"
    "e_fail\022\023\n\013bullet_cost\030\002 \001(\005\"\327\001\n\030packetl2"
    "c_bc_manual_fire\022N\n\tpacket_id\030\001 \001(\0162!.fi"
    "sh_protocols.e_server_msg_type:\030e_mst_l2"
    "c_bc_manual_fire\022\021\n\tbullet_id\030\002 \001(\005\022\021\n\tp"
    "layer_id\030\003 \001(\005\022\024\n\014bullet_angle\030\004 \001(\005\022\027\n\010"
    "is_multi\030\005 \001(\010:\005false\022\026\n\013bullet_type\030\006 \001"
    "(\005:\0011\"\241\001\n\026packetc2l_missile_fire\022L\n\tpack"
    "et_id\030\001 \001(\0162!.fish_protocols.e_server_ms"
    "g_type:\026e_mst_c2l_missile_fire\022\021\n\tbullet"
    "_id\030\002 \001(\005\022\022\n\nfire_pos_x\030\003 \001(\005\022\022\n\nfire_po"
    "s_y\030\004 \001(\005\"\272\001\n\031packetl2c_bc_missile_fire\022"
    "O\n\tpacket_id\030\001 \001(\0162!.fish_protocols.e_se"
    "rver_msg_type:\031e_mst_l2c_bc_missile_fire"
    "\022\021\n\tbullet_id\030\002 \001(\005\022\021\n\tplayer_id\030\003 \001(\005\022\022"
    "\n\nfire_pos_x\030\004 \001(\005\022\022\n\nfire_pos_y\030\005 \001(\005\"\202"
    "\001\n\022packetc2l_hit_fish\022H\n\tpacket_id\030\001 \001(\016"
    "2!.fish_protocols.e_server_msg_type:\022e_m"
    "st_c2l_hit_fish\022\021\n\tbullet_id\030\003 \001(\005\022\017\n\007fi"
    "sh_id\030\004 \001(\005\"\255\001\n\023packetc2l_hit_fishs\022I\n\tp"
    "acket_id\030\001 \001(\0162!.fish_protocols.e_server"
    "_msg_type:\023e_mst_c2l_hit_fishs\022\020\n\010hit_ty"
    "pe\030\002 \001(\005\022\021\n\tbullet_id\030\003 \001(\005\022\020\n\010fish_ids\030"
    "\004 \003(\005\022\024\n\thit_param\030\005 \001(\005:\0010\"\333\001\n\025packetl2"
    "c_bc_fish_die\022K\n\tpacket_id\030\001 \001(\0162!.fish_"
    "protocols.e_server_msg_type:\025e_mst_l2c_b"
    "c_fish_die\022\017\n\007fish_id\030\002 \001(\005\022\017\n\007kill_id\030\003"
    " \001(\005\022\022\n\nbase_score\030\004 \001(\005\022\024\n\tadd_score\030\005 "
    "\001(\005:\0010\022\021\n\006ticket\030\006 \001(\005:\0010\022\026\n\007getstar\030\007 \001"
    "(\010:\005false\"\376\001\n\034packetl2c_bc_specialfish_d"
    "ie\022R\n\tpacket_id\030\001 \001(\0162!.fish_protocols.e"
    "_server_msg_type:\034e_mst_l2c_bc_specialfi"
    "sh_die\022\017\n\007fish_id\030\002 \001(\005\022\021\n\tplayer_id\030\003 \001"
    "(\005\022\021\n\tbullet_id\030\004 \001(\005\022\022\n\nbase_score\030\005 \001("
    "\005\022\024\n\tadd_score\030\006 \001(\005:\0010\022\021\n\006ticket\030\007 \001(\005:"
    "\0010\022\026\n\007getstar\030\010 \001(\010:\005false\"\207\002\n\026packetl2c"
    "_bc_fishs_die\022L\n\tpacket_id\030\001 \001(\0162!.fish_"
    "protocols.e_server_msg_type:\026e_mst_l2c_b"
    "c_fishs_die\022\021\n\tplayer_id\030\002 \001(\005\022\020\n\010die_ty"
    "pe\030\003 \001(\005\022\022\n\ndie_params\030\004 \003(\005\022\023\n\013total_sc"
    "ore\030\005 \001(\005\022\021\n\tbase_rate\030\006 \001(\005\022\023\n\010add_rate"
    "\030\007 \001(\005:\0010\022\021\n\006ticket\030\010 \001(\005:\0010\022\026\n\007getstar\030"
    "\t \001(\010:\005false\"\225\001\n\031packetl2c_bc_change_sce"
    "ne\022O\n\tpacket_id\030\001 \001(\0162!.fish_protocols.e"
    "_server_msg_type:\031e_mst_l2c_bc_change_sc"
    "ene\022\020\n\010scene_id\030\002 \001(\005\022\025\n\rlarge_fish_id\030\003"
    " \001(\005\"\235\001\n\024packetl2c_bc_addbuff\022J\n\tpacket_"
    "id\030\001 \001(\0162!.fish_protocols.e_server_msg_t"
    "ype:\024e_mst_l2c_bc_addbuff\022\017\n\007buff_id\030\002 \001"
    "(\005\022\021\n\tplayer_id\030\003 \001(\005\022\025\n\tbuff_time\030\004 \001(\005"
    ":\002-1\"\214\001\n\027packetl2c_bc_removebuff\022M\n\tpack"
    "et_id\030\001 \001(\0162!.fish_protocols.e_server_ms"
    "g_type:\027e_mst_l2c_bc_removebuff\022\017\n\007buff_"
    "id\030\002 \001(\005\022\021\n\tplayer_id\030\003 \001(\005\"\222\001\n\031packetl2"
    "c_bc_changeturret\022O\n\tpacket_id\030\001 \001(\0162!.f"
    "ish_protocols.e_server_msg_type:\031e_mst_l"
    "2c_bc_changeturret\022\021\n\tturret_id\030\002 \001(\005\022\021\n"
    "\tplayer_id\030\003 \001(\005\"q\n\023packetc2l_lock_fish\022"
    "I\n\tpacket_id\030\001 \001(\0162!.fish_protocols.e_se"
    "rver_msg_type:\023e_mst_c2l_lock_fish\022\017\n\007fi"
    "sh_id\030\004 \001(\005\"\212\001\n\026packetl2c_bc_lock_fish\022L"
    "\n\tpacket_id\030\001 \001(\0162!.fish_protocols.e_ser"
    "ver_msg_type:\026e_mst_l2c_bc_lock_fish\022\021\n\t"
    "player_id\030\002 \001(\005\022\017\n\007fish_id\030\003 \001(\005\"\206\001\n\023pac"
    "ketl2c_bc_freeze\022I\n\tpacket_id\030\001 \001(\0162!.fi"
    "sh_protocols.e_server_msg_type:\023e_mst_l2"
    "c_bc_freeze\022\023\n\013freeze_Time\030\002 \001(\005\022\017\n\007is_s"
    "how\030\003 \001(\010\"\204\001\n\034packetl2c_bc_change_scene_"
    "bg\022R\n\tpacket_id\030\001 \001(\0162!.fish_protocols.e"
    "_server_msg_type:\034e_mst_l2c_bc_change_sc"
    "ene_bg\022\020\n\010scene_id\030\002 \001(\005\"|\n\027packetl2c_bc"
    "_scene_time\022M\n\tpacket_id\030\001 \001(\0162!.fish_pr"
    "otocols.e_server_msg_type:\027e_mst_l2c_bc_"
    "scene_time\022\022\n\nscene_time\030\002 \001(\005\"\255\001\n\026packe"
    "tl2c_bc_hit_fishs\022L\n\tpacket_id\030\001 \001(\0162!.f"
    "ish_protocols.e_server_msg_type:\026e_mst_l"
    "2c_bc_hit_fishs\022\021\n\tplayer_id\030\002 \001(\005\022\020\n\010hi"
    "t_type\030\003 \001(\005\022\020\n\010fish_ids\030\004 \003(\005\022\016\n\006params"
    "\030\005 \003(\005\"\227\001\n\032packetl2c_bc_turret_rotate\022P\n"
    "\tpacket_id\030\001 \001(\0162!.fish_protocols.e_serv"
    "er_msg_type:\032e_mst_l2c_bc_turret_rotate\022"
    "\021\n\tplayer_id\030\002 \001(\005\022\024\n\014rotate_angle\030\003 \001(\005"
    "\"\232\001\n\035packetl2c_bc_change_max_power\022S\n\tpa"
    "cket_id\030\001 \001(\0162!.fish_protocols.e_server_"
    "msg_type:\035e_mst_l2c_bc_change_max_power\022"
    "\021\n\tplayer_id\030\002 \001(\005\022\021\n\tmax_power\030\003 \001(\005\"\277\001"
    "\n\026packetl2c_bc_debuginfo\022L\n\tpacket_id\030\001 "
    "\001(\0162!.fish_protocols.e_server_msg_type:\026"
    "e_mst_l2c_bc_debuginfo\022\021\n\tplayer_id\030\002 \001("
    "\005\022\027\n\014total_profit\030\003 \001(\003:\0010\022\026\n\013total_stoc"
    "k\030\004 \001(\003:\0010\022\023\n\013debug_infos\030\005 \001(\t", 8391);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fish_monkey_logic.proto", &protobuf_RegisterTypes);
  packetc2l_get_scene_info::default_instance_ = new packetc2l_get_scene_info();
  msg_fish_init::default_instance_ = new msg_fish_init();
  msg_generator_init::default_instance_ = new msg_generator_init();
  msg_scene_info::default_instance_ = new msg_scene_info();
  msg_buff_info::default_instance_ = new msg_buff_info();
  msg_seat_info::default_instance_ = new msg_seat_info();
  packetl2c_get_scene_info_result::default_instance_ = new packetl2c_get_scene_info_result();
  packetc2l_change_seat::default_instance_ = new packetc2l_change_seat();
  packetc2l_change_rate::default_instance_ = new packetc2l_change_rate();
  packetl2c_change_seat_result::default_instance_ = new packetl2c_change_seat_result();
  packetl2c_change_rate_result::default_instance_ = new packetl2c_change_rate_result();
  packetc2l_try_turret::default_instance_ = new packetc2l_try_turret();
  packetl2c_try_turret_result::default_instance_ = new packetl2c_try_turret_result();
  packetc2l_try_turret_state::default_instance_ = new packetc2l_try_turret_state();
  packetl2c_try_turret_state_result::default_instance_ = new packetl2c_try_turret_state_result();
  packetc2l_use_turret_power::default_instance_ = new packetc2l_use_turret_power();
  packetl2c_use_turret_power_result::default_instance_ = new packetl2c_use_turret_power_result();
  packetc2l_turret_rotate::default_instance_ = new packetc2l_turret_rotate();
  packetc2l_sync_gold::default_instance_ = new packetc2l_sync_gold();
  packetl2c_bc_enter_seat::default_instance_ = new packetl2c_bc_enter_seat();
  packetl2c_bc_leave_seat::default_instance_ = new packetl2c_bc_leave_seat();
  packetl2c_robot_enter::default_instance_ = new packetl2c_robot_enter();
  packetl2c_robot_leave::default_instance_ = new packetl2c_robot_leave();
  packetl2c_bc_change_rate::default_instance_ = new packetl2c_bc_change_rate();
  packetl2c_bc_change_attr::default_instance_ = new packetl2c_bc_change_attr();
  msg_fish_info::default_instance_ = new msg_fish_info();
  packetl2c_bc_create_fish::default_instance_ = new packetl2c_bc_create_fish();
  packetl2c_bc_create_generator::default_instance_ = new packetl2c_bc_create_generator();
  packetc2l_manual_fire::default_instance_ = new packetc2l_manual_fire();
  packetl2c_manual_fire_fail::default_instance_ = new packetl2c_manual_fire_fail();
  packetl2c_bc_manual_fire::default_instance_ = new packetl2c_bc_manual_fire();
  packetc2l_missile_fire::default_instance_ = new packetc2l_missile_fire();
  packetl2c_bc_missile_fire::default_instance_ = new packetl2c_bc_missile_fire();
  packetc2l_hit_fish::default_instance_ = new packetc2l_hit_fish();
  packetc2l_hit_fishs::default_instance_ = new packetc2l_hit_fishs();
  packetl2c_bc_fish_die::default_instance_ = new packetl2c_bc_fish_die();
  packetl2c_bc_specialfish_die::default_instance_ = new packetl2c_bc_specialfish_die();
  packetl2c_bc_fishs_die::default_instance_ = new packetl2c_bc_fishs_die();
  packetl2c_bc_change_scene::default_instance_ = new packetl2c_bc_change_scene();
  packetl2c_bc_addbuff::default_instance_ = new packetl2c_bc_addbuff();
  packetl2c_bc_removebuff::default_instance_ = new packetl2c_bc_removebuff();
  packetl2c_bc_changeturret::default_instance_ = new packetl2c_bc_changeturret();
  packetc2l_lock_fish::default_instance_ = new packetc2l_lock_fish();
  packetl2c_bc_lock_fish::default_instance_ = new packetl2c_bc_lock_fish();
  packetl2c_bc_freeze::default_instance_ = new packetl2c_bc_freeze();
  packetl2c_bc_change_scene_bg::default_instance_ = new packetl2c_bc_change_scene_bg();
  packetl2c_bc_scene_time::default_instance_ = new packetl2c_bc_scene_time();
  packetl2c_bc_hit_fishs::default_instance_ = new packetl2c_bc_hit_fishs();
  packetl2c_bc_turret_rotate::default_instance_ = new packetl2c_bc_turret_rotate();
  packetl2c_bc_change_max_power::default_instance_ = new packetl2c_bc_change_max_power();
  packetl2c_bc_debuginfo::default_instance_ = new packetl2c_bc_debuginfo();
  packetc2l_get_scene_info::default_instance_->InitAsDefaultInstance();
  msg_fish_init::default_instance_->InitAsDefaultInstance();
  msg_generator_init::default_instance_->InitAsDefaultInstance();
  msg_scene_info::default_instance_->InitAsDefaultInstance();
  msg_buff_info::default_instance_->InitAsDefaultInstance();
  msg_seat_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_scene_info_result::default_instance_->InitAsDefaultInstance();
  packetc2l_change_seat::default_instance_->InitAsDefaultInstance();
  packetc2l_change_rate::default_instance_->InitAsDefaultInstance();
  packetl2c_change_seat_result::default_instance_->InitAsDefaultInstance();
  packetl2c_change_rate_result::default_instance_->InitAsDefaultInstance();
  packetc2l_try_turret::default_instance_->InitAsDefaultInstance();
  packetl2c_try_turret_result::default_instance_->InitAsDefaultInstance();
  packetc2l_try_turret_state::default_instance_->InitAsDefaultInstance();
  packetl2c_try_turret_state_result::default_instance_->InitAsDefaultInstance();
  packetc2l_use_turret_power::default_instance_->InitAsDefaultInstance();
  packetl2c_use_turret_power_result::default_instance_->InitAsDefaultInstance();
  packetc2l_turret_rotate::default_instance_->InitAsDefaultInstance();
  packetc2l_sync_gold::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_enter_seat::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_leave_seat::default_instance_->InitAsDefaultInstance();
  packetl2c_robot_enter::default_instance_->InitAsDefaultInstance();
  packetl2c_robot_leave::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_change_rate::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_change_attr::default_instance_->InitAsDefaultInstance();
  msg_fish_info::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_create_fish::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_create_generator::default_instance_->InitAsDefaultInstance();
  packetc2l_manual_fire::default_instance_->InitAsDefaultInstance();
  packetl2c_manual_fire_fail::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_manual_fire::default_instance_->InitAsDefaultInstance();
  packetc2l_missile_fire::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_missile_fire::default_instance_->InitAsDefaultInstance();
  packetc2l_hit_fish::default_instance_->InitAsDefaultInstance();
  packetc2l_hit_fishs::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_fish_die::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_specialfish_die::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_fishs_die::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_change_scene::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_addbuff::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_removebuff::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_changeturret::default_instance_->InitAsDefaultInstance();
  packetc2l_lock_fish::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_lock_fish::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_freeze::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_change_scene_bg::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_scene_time::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_hit_fishs::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_turret_rotate::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_change_max_power::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_debuginfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fish_5fmonkey_5flogic_2eproto {
  StaticDescriptorInitializer_fish_5fmonkey_5flogic_2eproto() {
    protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  }
} static_descriptor_initializer_fish_5fmonkey_5flogic_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_scene_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_scene_info::packetc2l_get_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_scene_info::InitAsDefaultInstance() {
}

packetc2l_get_scene_info::packetc2l_get_scene_info(const packetc2l_get_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_scene_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10100;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_scene_info::~packetc2l_get_scene_info() {
  SharedDtor();
}

void packetc2l_get_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_scene_info_descriptor_;
}

const packetc2l_get_scene_info& packetc2l_get_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_get_scene_info* packetc2l_get_scene_info::default_instance_ = NULL;

packetc2l_get_scene_info* packetc2l_get_scene_info::New() const {
  return new packetc2l_get_scene_info;
}

void packetc2l_get_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10100;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_scene_info::MergeFrom(const packetc2l_get_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_scene_info::CopyFrom(const packetc2l_get_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_scene_info::IsInitialized() const {

  return true;
}

void packetc2l_get_scene_info::Swap(packetc2l_get_scene_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_scene_info_descriptor_;
  metadata.reflection = packetc2l_get_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fish_init::kIdFieldNumber;
const int msg_fish_init::kFishIdFieldNumber;
const int msg_fish_init::kLifeTimeFieldNumber;
const int msg_fish_init::kRouteParamFieldNumber;
#endif  // !_MSC_VER

msg_fish_init::msg_fish_init()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fish_init::InitAsDefaultInstance() {
}

msg_fish_init::msg_fish_init(const msg_fish_init& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fish_init::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  fish_id_ = 0;
  life_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fish_init::~msg_fish_init() {
  SharedDtor();
}

void msg_fish_init::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fish_init::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fish_init::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fish_init_descriptor_;
}

const msg_fish_init& msg_fish_init::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

msg_fish_init* msg_fish_init::default_instance_ = NULL;

msg_fish_init* msg_fish_init::New() const {
  return new msg_fish_init;
}

void msg_fish_init::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    fish_id_ = 0;
    life_time_ = 0;
  }
  route_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fish_init::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fish_id;
        break;
      }

      // optional int32 fish_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fish_id_)));
          set_has_fish_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_life_time;
        break;
      }

      // optional int32 life_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_life_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &life_time_)));
          set_has_life_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_route_param;
        break;
      }

      // repeated int32 route_param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_route_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_route_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_route_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_route_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fish_init::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 fish_id = 2;
  if (has_fish_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fish_id(), output);
  }

  // optional int32 life_time = 3;
  if (has_life_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->life_time(), output);
  }

  // repeated int32 route_param = 4;
  for (int i = 0; i < this->route_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->route_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fish_init::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 fish_id = 2;
  if (has_fish_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fish_id(), target);
  }

  // optional int32 life_time = 3;
  if (has_life_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->life_time(), target);
  }

  // repeated int32 route_param = 4;
  for (int i = 0; i < this->route_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->route_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fish_init::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 fish_id = 2;
    if (has_fish_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fish_id());
    }

    // optional int32 life_time = 3;
    if (has_life_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->life_time());
    }

  }
  // repeated int32 route_param = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->route_param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->route_param(i));
    }
    total_size += 1 * this->route_param_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fish_init::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fish_init* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fish_init*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fish_init::MergeFrom(const msg_fish_init& from) {
  GOOGLE_CHECK_NE(&from, this);
  route_param_.MergeFrom(from.route_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_fish_id()) {
      set_fish_id(from.fish_id());
    }
    if (from.has_life_time()) {
      set_life_time(from.life_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fish_init::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fish_init::CopyFrom(const msg_fish_init& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fish_init::IsInitialized() const {

  return true;
}

void msg_fish_init::Swap(msg_fish_init* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(fish_id_, other->fish_id_);
    std::swap(life_time_, other->life_time_);
    route_param_.Swap(&other->route_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fish_init::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fish_init_descriptor_;
  metadata.reflection = msg_fish_init_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_generator_init::kGeneratorIdFieldNumber;
const int msg_generator_init::kLifeTimeFieldNumber;
const int msg_generator_init::kStartIdFieldNumber;
const int msg_generator_init::kRouteIdFieldNumber;
const int msg_generator_init::kPosXFieldNumber;
const int msg_generator_init::kPosYFieldNumber;
#endif  // !_MSC_VER

msg_generator_init::msg_generator_init()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_generator_init::InitAsDefaultInstance() {
}

msg_generator_init::msg_generator_init(const msg_generator_init& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_generator_init::SharedCtor() {
  _cached_size_ = 0;
  generator_id_ = 0;
  life_time_ = 0;
  start_id_ = 0;
  route_id_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_generator_init::~msg_generator_init() {
  SharedDtor();
}

void msg_generator_init::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_generator_init::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_generator_init::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_generator_init_descriptor_;
}

const msg_generator_init& msg_generator_init::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

msg_generator_init* msg_generator_init::default_instance_ = NULL;

msg_generator_init* msg_generator_init::New() const {
  return new msg_generator_init;
}

void msg_generator_init::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    generator_id_ = 0;
    life_time_ = 0;
    start_id_ = 0;
    route_id_ = 0;
    pos_x_ = 0;
    pos_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_generator_init::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 generator_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &generator_id_)));
          set_has_generator_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_life_time;
        break;
      }

      // optional int32 life_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_life_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &life_time_)));
          set_has_life_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_id;
        break;
      }

      // optional int32 start_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_id_)));
          set_has_start_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_route_id;
        break;
      }

      // optional int32 route_id = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_route_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &route_id_)));
          set_has_route_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pos_x;
        break;
      }

      // optional int32 pos_x = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_generator_init::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 generator_id = 1;
  if (has_generator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->generator_id(), output);
  }

  // optional int32 life_time = 2;
  if (has_life_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->life_time(), output);
  }

  // optional int32 start_id = 3;
  if (has_start_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_id(), output);
  }

  // optional int32 route_id = 4 [default = 0];
  if (has_route_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->route_id(), output);
  }

  // optional int32 pos_x = 5 [default = 0];
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pos_x(), output);
  }

  // optional int32 pos_y = 6 [default = 0];
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pos_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_generator_init::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 generator_id = 1;
  if (has_generator_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->generator_id(), target);
  }

  // optional int32 life_time = 2;
  if (has_life_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->life_time(), target);
  }

  // optional int32 start_id = 3;
  if (has_start_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start_id(), target);
  }

  // optional int32 route_id = 4 [default = 0];
  if (has_route_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->route_id(), target);
  }

  // optional int32 pos_x = 5 [default = 0];
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pos_x(), target);
  }

  // optional int32 pos_y = 6 [default = 0];
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pos_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_generator_init::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 generator_id = 1;
    if (has_generator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->generator_id());
    }

    // optional int32 life_time = 2;
    if (has_life_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->life_time());
    }

    // optional int32 start_id = 3;
    if (has_start_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_id());
    }

    // optional int32 route_id = 4 [default = 0];
    if (has_route_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->route_id());
    }

    // optional int32 pos_x = 5 [default = 0];
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 6 [default = 0];
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_generator_init::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_generator_init* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_generator_init*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_generator_init::MergeFrom(const msg_generator_init& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_generator_id()) {
      set_generator_id(from.generator_id());
    }
    if (from.has_life_time()) {
      set_life_time(from.life_time());
    }
    if (from.has_start_id()) {
      set_start_id(from.start_id());
    }
    if (from.has_route_id()) {
      set_route_id(from.route_id());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_generator_init::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_generator_init::CopyFrom(const msg_generator_init& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_generator_init::IsInitialized() const {

  return true;
}

void msg_generator_init::Swap(msg_generator_init* other) {
  if (other != this) {
    std::swap(generator_id_, other->generator_id_);
    std::swap(life_time_, other->life_time_);
    std::swap(start_id_, other->start_id_);
    std::swap(route_id_, other->route_id_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_generator_init::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_generator_init_descriptor_;
  metadata.reflection = msg_generator_init_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_scene_info::kSceneidFieldNumber;
const int msg_scene_info::kRoomidFieldNumber;
const int msg_scene_info::kSeatInfoFieldNumber;
const int msg_scene_info::kFishInfosFieldNumber;
const int msg_scene_info::kGeneratorInfosFieldNumber;
#endif  // !_MSC_VER

msg_scene_info::msg_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_scene_info::InitAsDefaultInstance() {
}

msg_scene_info::msg_scene_info(const msg_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_scene_info::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_scene_info::~msg_scene_info() {
  SharedDtor();
}

void msg_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_scene_info_descriptor_;
}

const msg_scene_info& msg_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

msg_scene_info* msg_scene_info::default_instance_ = NULL;

msg_scene_info* msg_scene_info::New() const {
  return new msg_scene_info;
}

void msg_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0;
    roomid_ = 0;
  }
  seat_info_.Clear();
  fish_infos_.Clear();
  generator_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sceneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional int32 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_seat_info;
        break;
      }

      // repeated .fish_protocols.msg_seat_info seat_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seat_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seat_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_seat_info;
        if (input->ExpectTag(34)) goto parse_fish_infos;
        break;
      }

      // repeated .fish_protocols.msg_fish_init fish_infos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fish_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fish_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fish_infos;
        if (input->ExpectTag(42)) goto parse_generator_infos;
        break;
      }

      // repeated .fish_protocols.msg_generator_init generator_infos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generator_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_generator_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_generator_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sceneid = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneid(), output);
  }

  // optional int32 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // repeated .fish_protocols.msg_seat_info seat_info = 3;
  for (int i = 0; i < this->seat_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->seat_info(i), output);
  }

  // repeated .fish_protocols.msg_fish_init fish_infos = 4;
  for (int i = 0; i < this->fish_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fish_infos(i), output);
  }

  // repeated .fish_protocols.msg_generator_init generator_infos = 5;
  for (int i = 0; i < this->generator_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->generator_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sceneid = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneid(), target);
  }

  // optional int32 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // repeated .fish_protocols.msg_seat_info seat_info = 3;
  for (int i = 0; i < this->seat_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->seat_info(i), target);
  }

  // repeated .fish_protocols.msg_fish_init fish_infos = 4;
  for (int i = 0; i < this->fish_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fish_infos(i), target);
  }

  // repeated .fish_protocols.msg_generator_init generator_infos = 5;
  for (int i = 0; i < this->generator_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->generator_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sceneid = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

    // optional int32 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  // repeated .fish_protocols.msg_seat_info seat_info = 3;
  total_size += 1 * this->seat_info_size();
  for (int i = 0; i < this->seat_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seat_info(i));
  }

  // repeated .fish_protocols.msg_fish_init fish_infos = 4;
  total_size += 1 * this->fish_infos_size();
  for (int i = 0; i < this->fish_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fish_infos(i));
  }

  // repeated .fish_protocols.msg_generator_init generator_infos = 5;
  total_size += 1 * this->generator_infos_size();
  for (int i = 0; i < this->generator_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->generator_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_scene_info::MergeFrom(const msg_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  seat_info_.MergeFrom(from.seat_info_);
  fish_infos_.MergeFrom(from.fish_infos_);
  generator_infos_.MergeFrom(from.generator_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_scene_info::CopyFrom(const msg_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_scene_info::IsInitialized() const {

  return true;
}

void msg_scene_info::Swap(msg_scene_info* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(roomid_, other->roomid_);
    seat_info_.Swap(&other->seat_info_);
    fish_infos_.Swap(&other->fish_infos_);
    generator_infos_.Swap(&other->generator_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_scene_info_descriptor_;
  metadata.reflection = msg_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_buff_info::kBuffidFieldNumber;
const int msg_buff_info::kOuttimeFieldNumber;
#endif  // !_MSC_VER

msg_buff_info::msg_buff_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_buff_info::InitAsDefaultInstance() {
}

msg_buff_info::msg_buff_info(const msg_buff_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_buff_info::SharedCtor() {
  _cached_size_ = 0;
  buffid_ = 0;
  outtime_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_buff_info::~msg_buff_info() {
  SharedDtor();
}

void msg_buff_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_buff_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_buff_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_buff_info_descriptor_;
}

const msg_buff_info& msg_buff_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

msg_buff_info* msg_buff_info::default_instance_ = NULL;

msg_buff_info* msg_buff_info::New() const {
  return new msg_buff_info;
}

void msg_buff_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buffid_ = 0;
    outtime_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_buff_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buffid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outtime;
        break;
      }

      // optional int32 outtime = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outtime_)));
          set_has_outtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_buff_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 buffid = 1;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buffid(), output);
  }

  // optional int32 outtime = 2 [default = -1];
  if (has_outtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->outtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_buff_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 buffid = 1;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buffid(), target);
  }

  // optional int32 outtime = 2 [default = -1];
  if (has_outtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->outtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_buff_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 buffid = 1;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffid());
    }

    // optional int32 outtime = 2 [default = -1];
    if (has_outtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_buff_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_buff_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_buff_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_buff_info::MergeFrom(const msg_buff_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_outtime()) {
      set_outtime(from.outtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_buff_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_buff_info::CopyFrom(const msg_buff_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_buff_info::IsInitialized() const {

  return true;
}

void msg_buff_info::Swap(msg_buff_info* other) {
  if (other != this) {
    std::swap(buffid_, other->buffid_);
    std::swap(outtime_, other->outtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_buff_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_buff_info_descriptor_;
  metadata.reflection = msg_buff_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_seat_info::kSeatIndexFieldNumber;
const int msg_seat_info::kPlayerIdFieldNumber;
const int msg_seat_info::kNicknameFieldNumber;
const int msg_seat_info::kPlayerGoldFieldNumber;
const int msg_seat_info::kTurretRateFieldNumber;
const int msg_seat_info::kTurretIdFieldNumber;
const int msg_seat_info::kBufflistFieldNumber;
const int msg_seat_info::kTurretPowerFieldNumber;
const int msg_seat_info::kMaxTurretPowerFieldNumber;
const int msg_seat_info::kPhotoFrameFieldNumber;
const int msg_seat_info::kIconCustomFieldNumber;
const int msg_seat_info::kSexFieldNumber;
const int msg_seat_info::kVipFieldNumber;
const int msg_seat_info::kPlayerTicketFieldNumber;
#endif  // !_MSC_VER

msg_seat_info::msg_seat_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_seat_info::InitAsDefaultInstance() {
}

msg_seat_info::msg_seat_info(const msg_seat_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_seat_info::SharedCtor() {
  _cached_size_ = 0;
  seat_index_ = 0;
  player_id_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_gold_ = GOOGLE_LONGLONG(0);
  turret_rate_ = 0;
  turret_id_ = 0;
  turret_power_ = 0;
  max_turret_power_ = 0;
  photo_frame_ = 0;
  icon_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  vip_ = 0;
  player_ticket_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_seat_info::~msg_seat_info() {
  SharedDtor();
}

void msg_seat_info::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (icon_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_custom_;
  }
  if (this != default_instance_) {
  }
}

void msg_seat_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_seat_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_seat_info_descriptor_;
}

const msg_seat_info& msg_seat_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

msg_seat_info* msg_seat_info::default_instance_ = NULL;

msg_seat_info* msg_seat_info::New() const {
  return new msg_seat_info;
}

void msg_seat_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_index_ = 0;
    player_id_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    player_gold_ = GOOGLE_LONGLONG(0);
    turret_rate_ = 0;
    turret_id_ = 0;
    turret_power_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    max_turret_power_ = 0;
    photo_frame_ = 0;
    if (has_icon_custom()) {
      if (icon_custom_ != &::google::protobuf::internal::kEmptyString) {
        icon_custom_->clear();
      }
    }
    sex_ = 0;
    vip_ = 0;
    player_ticket_ = 0;
  }
  bufflist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_seat_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_index_)));
          set_has_seat_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_turret_rate;
        break;
      }

      // optional int32 turret_rate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turret_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turret_rate_)));
          set_has_turret_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_turret_id;
        break;
      }

      // optional int32 turret_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turret_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turret_id_)));
          set_has_turret_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_bufflist;
        break;
      }

      // repeated .fish_protocols.msg_buff_info bufflist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bufflist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bufflist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_bufflist;
        if (input->ExpectTag(64)) goto parse_turret_power;
        break;
      }

      // optional int32 turret_power = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turret_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turret_power_)));
          set_has_turret_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_max_turret_power;
        break;
      }

      // optional int32 max_turret_power = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_turret_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_turret_power_)));
          set_has_max_turret_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_photo_frame;
        break;
      }

      // optional int32 photo_frame = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photo_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photo_frame_)));
          set_has_photo_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_icon_custom;
        break;
      }

      // optional string icon_custom = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon_custom().data(), this->icon_custom().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_sex;
        break;
      }

      // optional int32 sex = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_vip;
        break;
      }

      // optional int32 vip = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_player_ticket;
        break;
      }

      // optional int32 player_ticket = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_ticket_)));
          set_has_player_ticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_seat_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_index = 1;
  if (has_seat_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_index(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }

  // optional int64 player_gold = 4;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->player_gold(), output);
  }

  // optional int32 turret_rate = 5;
  if (has_turret_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->turret_rate(), output);
  }

  // optional int32 turret_id = 6;
  if (has_turret_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->turret_id(), output);
  }

  // repeated .fish_protocols.msg_buff_info bufflist = 7;
  for (int i = 0; i < this->bufflist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->bufflist(i), output);
  }

  // optional int32 turret_power = 8;
  if (has_turret_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->turret_power(), output);
  }

  // optional int32 max_turret_power = 9;
  if (has_max_turret_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_turret_power(), output);
  }

  // optional int32 photo_frame = 10;
  if (has_photo_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->photo_frame(), output);
  }

  // optional string icon_custom = 11;
  if (has_icon_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon_custom().data(), this->icon_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->icon_custom(), output);
  }

  // optional int32 sex = 12;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->sex(), output);
  }

  // optional int32 vip = 13;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->vip(), output);
  }

  // optional int32 player_ticket = 14;
  if (has_player_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->player_ticket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_seat_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_index = 1;
  if (has_seat_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_index(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional int64 player_gold = 4;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->player_gold(), target);
  }

  // optional int32 turret_rate = 5;
  if (has_turret_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->turret_rate(), target);
  }

  // optional int32 turret_id = 6;
  if (has_turret_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->turret_id(), target);
  }

  // repeated .fish_protocols.msg_buff_info bufflist = 7;
  for (int i = 0; i < this->bufflist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->bufflist(i), target);
  }

  // optional int32 turret_power = 8;
  if (has_turret_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->turret_power(), target);
  }

  // optional int32 max_turret_power = 9;
  if (has_max_turret_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_turret_power(), target);
  }

  // optional int32 photo_frame = 10;
  if (has_photo_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->photo_frame(), target);
  }

  // optional string icon_custom = 11;
  if (has_icon_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon_custom().data(), this->icon_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->icon_custom(), target);
  }

  // optional int32 sex = 12;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->sex(), target);
  }

  // optional int32 vip = 13;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->vip(), target);
  }

  // optional int32 player_ticket = 14;
  if (has_player_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->player_ticket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_seat_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_index = 1;
    if (has_seat_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_index());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int64 player_gold = 4;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

    // optional int32 turret_rate = 5;
    if (has_turret_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turret_rate());
    }

    // optional int32 turret_id = 6;
    if (has_turret_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turret_id());
    }

    // optional int32 turret_power = 8;
    if (has_turret_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turret_power());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 max_turret_power = 9;
    if (has_max_turret_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_turret_power());
    }

    // optional int32 photo_frame = 10;
    if (has_photo_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->photo_frame());
    }

    // optional string icon_custom = 11;
    if (has_icon_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_custom());
    }

    // optional int32 sex = 12;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 vip = 13;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

    // optional int32 player_ticket = 14;
    if (has_player_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_ticket());
    }

  }
  // repeated .fish_protocols.msg_buff_info bufflist = 7;
  total_size += 1 * this->bufflist_size();
  for (int i = 0; i < this->bufflist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bufflist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_seat_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_seat_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_seat_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_seat_info::MergeFrom(const msg_seat_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  bufflist_.MergeFrom(from.bufflist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_index()) {
      set_seat_index(from.seat_index());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
    if (from.has_turret_rate()) {
      set_turret_rate(from.turret_rate());
    }
    if (from.has_turret_id()) {
      set_turret_id(from.turret_id());
    }
    if (from.has_turret_power()) {
      set_turret_power(from.turret_power());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_turret_power()) {
      set_max_turret_power(from.max_turret_power());
    }
    if (from.has_photo_frame()) {
      set_photo_frame(from.photo_frame());
    }
    if (from.has_icon_custom()) {
      set_icon_custom(from.icon_custom());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_player_ticket()) {
      set_player_ticket(from.player_ticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_seat_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_seat_info::CopyFrom(const msg_seat_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_seat_info::IsInitialized() const {

  return true;
}

void msg_seat_info::Swap(msg_seat_info* other) {
  if (other != this) {
    std::swap(seat_index_, other->seat_index_);
    std::swap(player_id_, other->player_id_);
    std::swap(nickname_, other->nickname_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(turret_rate_, other->turret_rate_);
    std::swap(turret_id_, other->turret_id_);
    bufflist_.Swap(&other->bufflist_);
    std::swap(turret_power_, other->turret_power_);
    std::swap(max_turret_power_, other->max_turret_power_);
    std::swap(photo_frame_, other->photo_frame_);
    std::swap(icon_custom_, other->icon_custom_);
    std::swap(sex_, other->sex_);
    std::swap(vip_, other->vip_);
    std::swap(player_ticket_, other->player_ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_seat_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_seat_info_descriptor_;
  metadata.reflection = msg_seat_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_scene_info_result::kPacketIdFieldNumber;
const int packetl2c_get_scene_info_result::kSceneInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_scene_info_result::packetl2c_get_scene_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_get_scene_info_result::InitAsDefaultInstance() {
  scene_info_ = const_cast< ::fish_protocols::msg_scene_info*>(&::fish_protocols::msg_scene_info::default_instance());
}

packetl2c_get_scene_info_result::packetl2c_get_scene_info_result(const packetl2c_get_scene_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_get_scene_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15100;
  scene_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_scene_info_result::~packetl2c_get_scene_info_result() {
  SharedDtor();
}

void packetl2c_get_scene_info_result::SharedDtor() {
  if (this != default_instance_) {
    delete scene_info_;
  }
}

void packetl2c_get_scene_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_scene_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_scene_info_result_descriptor_;
}

const packetl2c_get_scene_info_result& packetl2c_get_scene_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_get_scene_info_result* packetl2c_get_scene_info_result::default_instance_ = NULL;

packetl2c_get_scene_info_result* packetl2c_get_scene_info_result::New() const {
  return new packetl2c_get_scene_info_result;
}

void packetl2c_get_scene_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15100;
    if (has_scene_info()) {
      if (scene_info_ != NULL) scene_info_->::fish_protocols::msg_scene_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_scene_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scene_info;
        break;
      }

      // optional .fish_protocols.msg_scene_info scene_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_get_scene_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .fish_protocols.msg_scene_info scene_info = 2;
  if (has_scene_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scene_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_get_scene_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .fish_protocols.msg_scene_info scene_info = 2;
  if (has_scene_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scene_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_get_scene_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .fish_protocols.msg_scene_info scene_info = 2;
    if (has_scene_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scene_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_scene_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_scene_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_scene_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_scene_info_result::MergeFrom(const packetl2c_get_scene_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_scene_info()) {
      mutable_scene_info()->::fish_protocols::msg_scene_info::MergeFrom(from.scene_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_scene_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_scene_info_result::CopyFrom(const packetl2c_get_scene_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_scene_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_scene_info_result::Swap(packetl2c_get_scene_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(scene_info_, other->scene_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_scene_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_scene_info_result_descriptor_;
  metadata.reflection = packetl2c_get_scene_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_change_seat::kPacketIdFieldNumber;
const int packetc2l_change_seat::kPlayerIdFieldNumber;
const int packetc2l_change_seat::kSeatIndexFieldNumber;
#endif  // !_MSC_VER

packetc2l_change_seat::packetc2l_change_seat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_change_seat::InitAsDefaultInstance() {
}

packetc2l_change_seat::packetc2l_change_seat(const packetc2l_change_seat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_change_seat::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10101;
  player_id_ = 0;
  seat_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_change_seat::~packetc2l_change_seat() {
  SharedDtor();
}

void packetc2l_change_seat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_change_seat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_change_seat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_change_seat_descriptor_;
}

const packetc2l_change_seat& packetc2l_change_seat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_change_seat* packetc2l_change_seat::default_instance_ = NULL;

packetc2l_change_seat* packetc2l_change_seat::New() const {
  return new packetc2l_change_seat;
}

void packetc2l_change_seat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10101;
    player_id_ = 0;
    seat_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_change_seat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_seat];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat_index;
        break;
      }

      // optional int32 seat_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_index_)));
          set_has_seat_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_change_seat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_seat];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 seat_index = 3;
  if (has_seat_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_change_seat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_seat];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 seat_index = 3;
  if (has_seat_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_change_seat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_seat];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 seat_index = 3;
    if (has_seat_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_change_seat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_change_seat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_change_seat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_change_seat::MergeFrom(const packetc2l_change_seat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_seat_index()) {
      set_seat_index(from.seat_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_change_seat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_change_seat::CopyFrom(const packetc2l_change_seat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_change_seat::IsInitialized() const {

  return true;
}

void packetc2l_change_seat::Swap(packetc2l_change_seat* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(seat_index_, other->seat_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_change_seat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_change_seat_descriptor_;
  metadata.reflection = packetc2l_change_seat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_change_rate::kPacketIdFieldNumber;
const int packetc2l_change_rate::kTurretRateFieldNumber;
#endif  // !_MSC_VER

packetc2l_change_rate::packetc2l_change_rate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_change_rate::InitAsDefaultInstance() {
}

packetc2l_change_rate::packetc2l_change_rate(const packetc2l_change_rate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_change_rate::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10102;
  turret_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_change_rate::~packetc2l_change_rate() {
  SharedDtor();
}

void packetc2l_change_rate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_change_rate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_change_rate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_change_rate_descriptor_;
}

const packetc2l_change_rate& packetc2l_change_rate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_change_rate* packetc2l_change_rate::default_instance_ = NULL;

packetc2l_change_rate* packetc2l_change_rate::New() const {
  return new packetc2l_change_rate;
}

void packetc2l_change_rate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10102;
    turret_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_change_rate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_rate];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_turret_rate;
        break;
      }

      // optional int32 turret_rate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turret_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turret_rate_)));
          set_has_turret_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_change_rate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_rate];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 turret_rate = 2;
  if (has_turret_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->turret_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_change_rate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_rate];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 turret_rate = 2;
  if (has_turret_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->turret_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_change_rate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_rate];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 turret_rate = 2;
    if (has_turret_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turret_rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_change_rate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_change_rate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_change_rate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_change_rate::MergeFrom(const packetc2l_change_rate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_turret_rate()) {
      set_turret_rate(from.turret_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_change_rate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_change_rate::CopyFrom(const packetc2l_change_rate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_change_rate::IsInitialized() const {

  return true;
}

void packetc2l_change_rate::Swap(packetc2l_change_rate* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(turret_rate_, other->turret_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_change_rate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_change_rate_descriptor_;
  metadata.reflection = packetc2l_change_rate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_change_seat_result::kPacketIdFieldNumber;
const int packetl2c_change_seat_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_change_seat_result::packetl2c_change_seat_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_change_seat_result::InitAsDefaultInstance() {
}

packetl2c_change_seat_result::packetl2c_change_seat_result(const packetl2c_change_seat_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_change_seat_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15101;
  result_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_change_seat_result::~packetl2c_change_seat_result() {
  SharedDtor();
}

void packetl2c_change_seat_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_change_seat_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_change_seat_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_change_seat_result_descriptor_;
}

const packetl2c_change_seat_result& packetl2c_change_seat_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_change_seat_result* packetl2c_change_seat_result::default_instance_ = NULL;

packetl2c_change_seat_result* packetl2c_change_seat_result::New() const {
  return new packetl2c_change_seat_result;
}

void packetl2c_change_seat_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15101;
    result_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_change_seat_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_seat_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_change_seat_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_seat_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_change_seat_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_seat_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_change_seat_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_seat_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_change_seat_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_change_seat_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_change_seat_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_change_seat_result::MergeFrom(const packetl2c_change_seat_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_change_seat_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_change_seat_result::CopyFrom(const packetl2c_change_seat_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_change_seat_result::IsInitialized() const {

  return true;
}

void packetl2c_change_seat_result::Swap(packetl2c_change_seat_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_change_seat_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_change_seat_result_descriptor_;
  metadata.reflection = packetl2c_change_seat_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_change_rate_result::kPacketIdFieldNumber;
const int packetl2c_change_rate_result::kResultFieldNumber;
const int packetl2c_change_rate_result::kOldRateFieldNumber;
#endif  // !_MSC_VER

packetl2c_change_rate_result::packetl2c_change_rate_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_change_rate_result::InitAsDefaultInstance() {
}

packetl2c_change_rate_result::packetl2c_change_rate_result(const packetl2c_change_rate_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_change_rate_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15110;
  result_ = 2;
  old_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_change_rate_result::~packetl2c_change_rate_result() {
  SharedDtor();
}

void packetl2c_change_rate_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_change_rate_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_change_rate_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_change_rate_result_descriptor_;
}

const packetl2c_change_rate_result& packetl2c_change_rate_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_change_rate_result* packetl2c_change_rate_result::default_instance_ = NULL;

packetl2c_change_rate_result* packetl2c_change_rate_result::New() const {
  return new packetl2c_change_rate_result;
}

void packetl2c_change_rate_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15110;
    result_ = 2;
    old_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_change_rate_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_rate_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_old_rate;
        break;
      }

      // optional int32 old_rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &old_rate_)));
          set_has_old_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_change_rate_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_rate_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 old_rate = 3;
  if (has_old_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->old_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_change_rate_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_rate_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 old_rate = 3;
  if (has_old_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->old_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_change_rate_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_rate_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 old_rate = 3;
    if (has_old_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->old_rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_change_rate_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_change_rate_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_change_rate_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_change_rate_result::MergeFrom(const packetl2c_change_rate_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_old_rate()) {
      set_old_rate(from.old_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_change_rate_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_change_rate_result::CopyFrom(const packetl2c_change_rate_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_change_rate_result::IsInitialized() const {

  return true;
}

void packetl2c_change_rate_result::Swap(packetl2c_change_rate_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(old_rate_, other->old_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_change_rate_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_change_rate_result_descriptor_;
  metadata.reflection = packetl2c_change_rate_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_try_turret::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_try_turret::packetc2l_try_turret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_try_turret::InitAsDefaultInstance() {
}

packetc2l_try_turret::packetc2l_try_turret(const packetc2l_try_turret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_try_turret::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10113;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_try_turret::~packetc2l_try_turret() {
  SharedDtor();
}

void packetc2l_try_turret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_try_turret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_try_turret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_try_turret_descriptor_;
}

const packetc2l_try_turret& packetc2l_try_turret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_try_turret* packetc2l_try_turret::default_instance_ = NULL;

packetc2l_try_turret* packetc2l_try_turret::New() const {
  return new packetc2l_try_turret;
}

void packetc2l_try_turret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10113;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_try_turret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_try_turret];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_try_turret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_try_turret];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_try_turret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_try_turret];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_try_turret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_try_turret];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_try_turret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_try_turret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_try_turret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_try_turret::MergeFrom(const packetc2l_try_turret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_try_turret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_try_turret::CopyFrom(const packetc2l_try_turret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_try_turret::IsInitialized() const {

  return true;
}

void packetc2l_try_turret::Swap(packetc2l_try_turret* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_try_turret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_try_turret_descriptor_;
  metadata.reflection = packetc2l_try_turret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_try_turret_result::kPacketIdFieldNumber;
const int packetl2c_try_turret_result::kResultFieldNumber;
const int packetl2c_try_turret_result::kTryTurretIdFieldNumber;
const int packetl2c_try_turret_result::kTryEndtimeFieldNumber;
#endif  // !_MSC_VER

packetl2c_try_turret_result::packetl2c_try_turret_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_try_turret_result::InitAsDefaultInstance() {
}

packetl2c_try_turret_result::packetl2c_try_turret_result(const packetl2c_try_turret_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_try_turret_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15105;
  result_ = 2;
  try_turret_id_ = -1;
  try_endtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_try_turret_result::~packetl2c_try_turret_result() {
  SharedDtor();
}

void packetl2c_try_turret_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_try_turret_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_try_turret_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_try_turret_result_descriptor_;
}

const packetl2c_try_turret_result& packetl2c_try_turret_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_try_turret_result* packetl2c_try_turret_result::default_instance_ = NULL;

packetl2c_try_turret_result* packetl2c_try_turret_result::New() const {
  return new packetl2c_try_turret_result;
}

void packetl2c_try_turret_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15105;
    result_ = 2;
    try_turret_id_ = -1;
    try_endtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_try_turret_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_try_turret_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_try_turret_id;
        break;
      }

      // optional int32 try_turret_id = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_try_turret_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &try_turret_id_)));
          set_has_try_turret_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_try_endtime;
        break;
      }

      // optional int32 try_endtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_try_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &try_endtime_)));
          set_has_try_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_try_turret_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_try_turret_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 try_turret_id = 3 [default = -1];
  if (has_try_turret_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->try_turret_id(), output);
  }

  // optional int32 try_endtime = 4;
  if (has_try_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->try_endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_try_turret_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_try_turret_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 try_turret_id = 3 [default = -1];
  if (has_try_turret_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->try_turret_id(), target);
  }

  // optional int32 try_endtime = 4;
  if (has_try_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->try_endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_try_turret_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_try_turret_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 try_turret_id = 3 [default = -1];
    if (has_try_turret_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->try_turret_id());
    }

    // optional int32 try_endtime = 4;
    if (has_try_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->try_endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_try_turret_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_try_turret_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_try_turret_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_try_turret_result::MergeFrom(const packetl2c_try_turret_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_try_turret_id()) {
      set_try_turret_id(from.try_turret_id());
    }
    if (from.has_try_endtime()) {
      set_try_endtime(from.try_endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_try_turret_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_try_turret_result::CopyFrom(const packetl2c_try_turret_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_try_turret_result::IsInitialized() const {

  return true;
}

void packetl2c_try_turret_result::Swap(packetl2c_try_turret_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(try_turret_id_, other->try_turret_id_);
    std::swap(try_endtime_, other->try_endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_try_turret_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_try_turret_result_descriptor_;
  metadata.reflection = packetl2c_try_turret_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_try_turret_state::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_try_turret_state::packetc2l_try_turret_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_try_turret_state::InitAsDefaultInstance() {
}

packetc2l_try_turret_state::packetc2l_try_turret_state(const packetc2l_try_turret_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_try_turret_state::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10114;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_try_turret_state::~packetc2l_try_turret_state() {
  SharedDtor();
}

void packetc2l_try_turret_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_try_turret_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_try_turret_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_try_turret_state_descriptor_;
}

const packetc2l_try_turret_state& packetc2l_try_turret_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_try_turret_state* packetc2l_try_turret_state::default_instance_ = NULL;

packetc2l_try_turret_state* packetc2l_try_turret_state::New() const {
  return new packetc2l_try_turret_state;
}

void packetc2l_try_turret_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10114;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_try_turret_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_try_turret_state];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_try_turret_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_try_turret_state];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_try_turret_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_try_turret_state];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_try_turret_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_try_turret_state];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_try_turret_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_try_turret_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_try_turret_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_try_turret_state::MergeFrom(const packetc2l_try_turret_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_try_turret_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_try_turret_state::CopyFrom(const packetc2l_try_turret_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_try_turret_state::IsInitialized() const {

  return true;
}

void packetc2l_try_turret_state::Swap(packetc2l_try_turret_state* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_try_turret_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_try_turret_state_descriptor_;
  metadata.reflection = packetc2l_try_turret_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_try_turret_state_result::kPacketIdFieldNumber;
const int packetl2c_try_turret_state_result::kTryTurretIdFieldNumber;
const int packetl2c_try_turret_state_result::kFireCountFieldNumber;
const int packetl2c_try_turret_state_result::kTryCdFieldNumber;
const int packetl2c_try_turret_state_result::kTryEndtimeFieldNumber;
#endif  // !_MSC_VER

packetl2c_try_turret_state_result::packetl2c_try_turret_state_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_try_turret_state_result::InitAsDefaultInstance() {
}

packetl2c_try_turret_state_result::packetl2c_try_turret_state_result(const packetl2c_try_turret_state_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_try_turret_state_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15106;
  try_turret_id_ = -1;
  fire_count_ = 0;
  try_cd_ = 0;
  try_endtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_try_turret_state_result::~packetl2c_try_turret_state_result() {
  SharedDtor();
}

void packetl2c_try_turret_state_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_try_turret_state_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_try_turret_state_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_try_turret_state_result_descriptor_;
}

const packetl2c_try_turret_state_result& packetl2c_try_turret_state_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_try_turret_state_result* packetl2c_try_turret_state_result::default_instance_ = NULL;

packetl2c_try_turret_state_result* packetl2c_try_turret_state_result::New() const {
  return new packetl2c_try_turret_state_result;
}

void packetl2c_try_turret_state_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15106;
    try_turret_id_ = -1;
    fire_count_ = 0;
    try_cd_ = 0;
    try_endtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_try_turret_state_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_try_turret_state_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_try_turret_id;
        break;
      }

      // optional int32 try_turret_id = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_try_turret_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &try_turret_id_)));
          set_has_try_turret_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fire_count;
        break;
      }

      // optional int32 fire_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fire_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fire_count_)));
          set_has_fire_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_try_cd;
        break;
      }

      // optional int32 try_cd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_try_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &try_cd_)));
          set_has_try_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_try_endtime;
        break;
      }

      // optional int32 try_endtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_try_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &try_endtime_)));
          set_has_try_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_try_turret_state_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_try_turret_state_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 try_turret_id = 2 [default = -1];
  if (has_try_turret_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->try_turret_id(), output);
  }

  // optional int32 fire_count = 3;
  if (has_fire_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fire_count(), output);
  }

  // optional int32 try_cd = 4;
  if (has_try_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->try_cd(), output);
  }

  // optional int32 try_endtime = 5;
  if (has_try_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->try_endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_try_turret_state_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_try_turret_state_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 try_turret_id = 2 [default = -1];
  if (has_try_turret_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->try_turret_id(), target);
  }

  // optional int32 fire_count = 3;
  if (has_fire_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fire_count(), target);
  }

  // optional int32 try_cd = 4;
  if (has_try_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->try_cd(), target);
  }

  // optional int32 try_endtime = 5;
  if (has_try_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->try_endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_try_turret_state_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_try_turret_state_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 try_turret_id = 2 [default = -1];
    if (has_try_turret_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->try_turret_id());
    }

    // optional int32 fire_count = 3;
    if (has_fire_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fire_count());
    }

    // optional int32 try_cd = 4;
    if (has_try_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->try_cd());
    }

    // optional int32 try_endtime = 5;
    if (has_try_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->try_endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_try_turret_state_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_try_turret_state_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_try_turret_state_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_try_turret_state_result::MergeFrom(const packetl2c_try_turret_state_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_try_turret_id()) {
      set_try_turret_id(from.try_turret_id());
    }
    if (from.has_fire_count()) {
      set_fire_count(from.fire_count());
    }
    if (from.has_try_cd()) {
      set_try_cd(from.try_cd());
    }
    if (from.has_try_endtime()) {
      set_try_endtime(from.try_endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_try_turret_state_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_try_turret_state_result::CopyFrom(const packetl2c_try_turret_state_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_try_turret_state_result::IsInitialized() const {

  return true;
}

void packetl2c_try_turret_state_result::Swap(packetl2c_try_turret_state_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(try_turret_id_, other->try_turret_id_);
    std::swap(fire_count_, other->fire_count_);
    std::swap(try_cd_, other->try_cd_);
    std::swap(try_endtime_, other->try_endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_try_turret_state_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_try_turret_state_result_descriptor_;
  metadata.reflection = packetl2c_try_turret_state_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_use_turret_power::kPacketIdFieldNumber;
const int packetc2l_use_turret_power::kIsBuyFieldNumber;
#endif  // !_MSC_VER

packetc2l_use_turret_power::packetc2l_use_turret_power()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_use_turret_power::InitAsDefaultInstance() {
}

packetc2l_use_turret_power::packetc2l_use_turret_power(const packetc2l_use_turret_power& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_use_turret_power::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10115;
  is_buy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_use_turret_power::~packetc2l_use_turret_power() {
  SharedDtor();
}

void packetc2l_use_turret_power::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_use_turret_power::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_use_turret_power::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_use_turret_power_descriptor_;
}

const packetc2l_use_turret_power& packetc2l_use_turret_power::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_use_turret_power* packetc2l_use_turret_power::default_instance_ = NULL;

packetc2l_use_turret_power* packetc2l_use_turret_power::New() const {
  return new packetc2l_use_turret_power;
}

void packetc2l_use_turret_power::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10115;
    is_buy_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_use_turret_power::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_use_turret_power];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_buy;
        break;
      }

      // optional bool is_buy = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_buy_)));
          set_has_is_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_use_turret_power::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_use_turret_power];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional bool is_buy = 2 [default = false];
  if (has_is_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_buy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_use_turret_power::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_use_turret_power];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional bool is_buy = 2 [default = false];
  if (has_is_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_buy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_use_turret_power::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_use_turret_power];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool is_buy = 2 [default = false];
    if (has_is_buy()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_use_turret_power::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_use_turret_power* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_use_turret_power*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_use_turret_power::MergeFrom(const packetc2l_use_turret_power& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_is_buy()) {
      set_is_buy(from.is_buy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_use_turret_power::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_use_turret_power::CopyFrom(const packetc2l_use_turret_power& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_use_turret_power::IsInitialized() const {

  return true;
}

void packetc2l_use_turret_power::Swap(packetc2l_use_turret_power* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(is_buy_, other->is_buy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_use_turret_power::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_use_turret_power_descriptor_;
  metadata.reflection = packetc2l_use_turret_power_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_use_turret_power_result::kPacketIdFieldNumber;
const int packetl2c_use_turret_power_result::kResultFieldNumber;
const int packetl2c_use_turret_power_result::kPowerTypeFieldNumber;
const int packetl2c_use_turret_power_result::kIsBuyFieldNumber;
#endif  // !_MSC_VER

packetl2c_use_turret_power_result::packetl2c_use_turret_power_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_use_turret_power_result::InitAsDefaultInstance() {
}

packetl2c_use_turret_power_result::packetl2c_use_turret_power_result(const packetl2c_use_turret_power_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_use_turret_power_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15107;
  result_ = 2;
  power_type_ = 0;
  is_buy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_use_turret_power_result::~packetl2c_use_turret_power_result() {
  SharedDtor();
}

void packetl2c_use_turret_power_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_use_turret_power_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_use_turret_power_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_use_turret_power_result_descriptor_;
}

const packetl2c_use_turret_power_result& packetl2c_use_turret_power_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_use_turret_power_result* packetl2c_use_turret_power_result::default_instance_ = NULL;

packetl2c_use_turret_power_result* packetl2c_use_turret_power_result::New() const {
  return new packetl2c_use_turret_power_result;
}

void packetl2c_use_turret_power_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15107;
    result_ = 2;
    power_type_ = 0;
    is_buy_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_use_turret_power_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_use_turret_power_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_power_type;
        break;
      }

      // optional int32 power_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_type_)));
          set_has_power_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_buy;
        break;
      }

      // optional bool is_buy = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_buy_)));
          set_has_is_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_use_turret_power_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_use_turret_power_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 power_type = 3;
  if (has_power_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->power_type(), output);
  }

  // optional bool is_buy = 4 [default = false];
  if (has_is_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_buy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_use_turret_power_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_use_turret_power_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 power_type = 3;
  if (has_power_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->power_type(), target);
  }

  // optional bool is_buy = 4 [default = false];
  if (has_is_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_buy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_use_turret_power_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_use_turret_power_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 power_type = 3;
    if (has_power_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power_type());
    }

    // optional bool is_buy = 4 [default = false];
    if (has_is_buy()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_use_turret_power_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_use_turret_power_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_use_turret_power_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_use_turret_power_result::MergeFrom(const packetl2c_use_turret_power_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_power_type()) {
      set_power_type(from.power_type());
    }
    if (from.has_is_buy()) {
      set_is_buy(from.is_buy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_use_turret_power_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_use_turret_power_result::CopyFrom(const packetl2c_use_turret_power_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_use_turret_power_result::IsInitialized() const {

  return true;
}

void packetl2c_use_turret_power_result::Swap(packetl2c_use_turret_power_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(power_type_, other->power_type_);
    std::swap(is_buy_, other->is_buy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_use_turret_power_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_use_turret_power_result_descriptor_;
  metadata.reflection = packetl2c_use_turret_power_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_turret_rotate::kPacketIdFieldNumber;
const int packetc2l_turret_rotate::kRotateAngleFieldNumber;
#endif  // !_MSC_VER

packetc2l_turret_rotate::packetc2l_turret_rotate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_turret_rotate::InitAsDefaultInstance() {
}

packetc2l_turret_rotate::packetc2l_turret_rotate(const packetc2l_turret_rotate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_turret_rotate::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10116;
  rotate_angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_turret_rotate::~packetc2l_turret_rotate() {
  SharedDtor();
}

void packetc2l_turret_rotate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_turret_rotate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_turret_rotate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_turret_rotate_descriptor_;
}

const packetc2l_turret_rotate& packetc2l_turret_rotate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_turret_rotate* packetc2l_turret_rotate::default_instance_ = NULL;

packetc2l_turret_rotate* packetc2l_turret_rotate::New() const {
  return new packetc2l_turret_rotate;
}

void packetc2l_turret_rotate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10116;
    rotate_angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_turret_rotate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_turret_rotate];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rotate_angle;
        break;
      }

      // optional int32 rotate_angle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rotate_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rotate_angle_)));
          set_has_rotate_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_turret_rotate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_turret_rotate];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 rotate_angle = 2;
  if (has_rotate_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rotate_angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_turret_rotate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_turret_rotate];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 rotate_angle = 2;
  if (has_rotate_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rotate_angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_turret_rotate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_turret_rotate];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 rotate_angle = 2;
    if (has_rotate_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rotate_angle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_turret_rotate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_turret_rotate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_turret_rotate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_turret_rotate::MergeFrom(const packetc2l_turret_rotate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_rotate_angle()) {
      set_rotate_angle(from.rotate_angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_turret_rotate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_turret_rotate::CopyFrom(const packetc2l_turret_rotate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_turret_rotate::IsInitialized() const {

  return true;
}

void packetc2l_turret_rotate::Swap(packetc2l_turret_rotate* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(rotate_angle_, other->rotate_angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_turret_rotate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_turret_rotate_descriptor_;
  metadata.reflection = packetc2l_turret_rotate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_sync_gold::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_sync_gold::packetc2l_sync_gold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_sync_gold::InitAsDefaultInstance() {
}

packetc2l_sync_gold::packetc2l_sync_gold(const packetc2l_sync_gold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_sync_gold::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10118;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_sync_gold::~packetc2l_sync_gold() {
  SharedDtor();
}

void packetc2l_sync_gold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_sync_gold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_sync_gold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_sync_gold_descriptor_;
}

const packetc2l_sync_gold& packetc2l_sync_gold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_sync_gold* packetc2l_sync_gold::default_instance_ = NULL;

packetc2l_sync_gold* packetc2l_sync_gold::New() const {
  return new packetc2l_sync_gold;
}

void packetc2l_sync_gold::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10118;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_sync_gold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_sync_gold];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_sync_gold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_sync_gold];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_sync_gold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_sync_gold];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_sync_gold::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_sync_gold];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_sync_gold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_sync_gold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_sync_gold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_sync_gold::MergeFrom(const packetc2l_sync_gold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_sync_gold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_sync_gold::CopyFrom(const packetc2l_sync_gold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_sync_gold::IsInitialized() const {

  return true;
}

void packetc2l_sync_gold::Swap(packetc2l_sync_gold* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_sync_gold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_sync_gold_descriptor_;
  metadata.reflection = packetc2l_sync_gold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_enter_seat::kPacketIdFieldNumber;
const int packetl2c_bc_enter_seat::kSeatInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_enter_seat::packetl2c_bc_enter_seat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_enter_seat::InitAsDefaultInstance() {
  seat_info_ = const_cast< ::fish_protocols::msg_seat_info*>(&::fish_protocols::msg_seat_info::default_instance());
}

packetl2c_bc_enter_seat::packetl2c_bc_enter_seat(const packetl2c_bc_enter_seat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_enter_seat::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15201;
  seat_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_enter_seat::~packetl2c_bc_enter_seat() {
  SharedDtor();
}

void packetl2c_bc_enter_seat::SharedDtor() {
  if (this != default_instance_) {
    delete seat_info_;
  }
}

void packetl2c_bc_enter_seat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_enter_seat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_enter_seat_descriptor_;
}

const packetl2c_bc_enter_seat& packetl2c_bc_enter_seat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_enter_seat* packetl2c_bc_enter_seat::default_instance_ = NULL;

packetl2c_bc_enter_seat* packetl2c_bc_enter_seat::New() const {
  return new packetl2c_bc_enter_seat;
}

void packetl2c_bc_enter_seat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15201;
    if (has_seat_info()) {
      if (seat_info_ != NULL) seat_info_->::fish_protocols::msg_seat_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_enter_seat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_enter_seat];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_seat_info;
        break;
      }

      // optional .fish_protocols.msg_seat_info seat_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seat_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seat_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_enter_seat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_enter_seat];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .fish_protocols.msg_seat_info seat_info = 2;
  if (has_seat_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->seat_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_enter_seat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_enter_seat];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .fish_protocols.msg_seat_info seat_info = 2;
  if (has_seat_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->seat_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_enter_seat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_enter_seat];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .fish_protocols.msg_seat_info seat_info = 2;
    if (has_seat_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seat_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_enter_seat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_enter_seat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_enter_seat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_enter_seat::MergeFrom(const packetl2c_bc_enter_seat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_seat_info()) {
      mutable_seat_info()->::fish_protocols::msg_seat_info::MergeFrom(from.seat_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_enter_seat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_enter_seat::CopyFrom(const packetl2c_bc_enter_seat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_enter_seat::IsInitialized() const {

  return true;
}

void packetl2c_bc_enter_seat::Swap(packetl2c_bc_enter_seat* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(seat_info_, other->seat_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_enter_seat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_enter_seat_descriptor_;
  metadata.reflection = packetl2c_bc_enter_seat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_leave_seat::kPacketIdFieldNumber;
const int packetl2c_bc_leave_seat::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_leave_seat::packetl2c_bc_leave_seat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_leave_seat::InitAsDefaultInstance() {
}

packetl2c_bc_leave_seat::packetl2c_bc_leave_seat(const packetl2c_bc_leave_seat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_leave_seat::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15202;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_leave_seat::~packetl2c_bc_leave_seat() {
  SharedDtor();
}

void packetl2c_bc_leave_seat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_leave_seat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_leave_seat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_leave_seat_descriptor_;
}

const packetl2c_bc_leave_seat& packetl2c_bc_leave_seat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_leave_seat* packetl2c_bc_leave_seat::default_instance_ = NULL;

packetl2c_bc_leave_seat* packetl2c_bc_leave_seat::New() const {
  return new packetl2c_bc_leave_seat;
}

void packetl2c_bc_leave_seat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15202;
    player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_leave_seat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_leave_seat];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_leave_seat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_leave_seat];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_leave_seat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_leave_seat];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_leave_seat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_leave_seat];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_leave_seat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_leave_seat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_leave_seat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_leave_seat::MergeFrom(const packetl2c_bc_leave_seat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_leave_seat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_leave_seat::CopyFrom(const packetl2c_bc_leave_seat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_leave_seat::IsInitialized() const {

  return true;
}

void packetl2c_bc_leave_seat::Swap(packetl2c_bc_leave_seat* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_leave_seat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_leave_seat_descriptor_;
  metadata.reflection = packetl2c_bc_leave_seat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_robot_enter::kPacketIdFieldNumber;
const int packetl2c_robot_enter::kSeatInfoFieldNumber;
const int packetl2c_robot_enter::kSceneIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_robot_enter::packetl2c_robot_enter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_robot_enter::InitAsDefaultInstance() {
  seat_info_ = const_cast< ::fish_protocols::msg_seat_info*>(&::fish_protocols::msg_seat_info::default_instance());
}

packetl2c_robot_enter::packetl2c_robot_enter(const packetl2c_robot_enter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_robot_enter::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 16000;
  seat_info_ = NULL;
  scene_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_robot_enter::~packetl2c_robot_enter() {
  SharedDtor();
}

void packetl2c_robot_enter::SharedDtor() {
  if (this != default_instance_) {
    delete seat_info_;
  }
}

void packetl2c_robot_enter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_robot_enter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_robot_enter_descriptor_;
}

const packetl2c_robot_enter& packetl2c_robot_enter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_robot_enter* packetl2c_robot_enter::default_instance_ = NULL;

packetl2c_robot_enter* packetl2c_robot_enter::New() const {
  return new packetl2c_robot_enter;
}

void packetl2c_robot_enter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 16000;
    if (has_seat_info()) {
      if (seat_info_ != NULL) seat_info_->::fish_protocols::msg_seat_info::Clear();
    }
    scene_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_robot_enter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_robot_enter];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_seat_info;
        break;
      }

      // optional .fish_protocols.msg_seat_info seat_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seat_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seat_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_id;
        break;
      }

      // optional int32 scene_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_robot_enter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_robot_enter];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .fish_protocols.msg_seat_info seat_info = 2;
  if (has_seat_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->seat_info(), output);
  }

  // optional int32 scene_id = 3;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_robot_enter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_robot_enter];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .fish_protocols.msg_seat_info seat_info = 2;
  if (has_seat_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->seat_info(), target);
  }

  // optional int32 scene_id = 3;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_robot_enter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_robot_enter];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .fish_protocols.msg_seat_info seat_info = 2;
    if (has_seat_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seat_info());
    }

    // optional int32 scene_id = 3;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_robot_enter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_robot_enter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_robot_enter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_robot_enter::MergeFrom(const packetl2c_robot_enter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_seat_info()) {
      mutable_seat_info()->::fish_protocols::msg_seat_info::MergeFrom(from.seat_info());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_robot_enter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_robot_enter::CopyFrom(const packetl2c_robot_enter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_robot_enter::IsInitialized() const {

  return true;
}

void packetl2c_robot_enter::Swap(packetl2c_robot_enter* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(seat_info_, other->seat_info_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_robot_enter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_robot_enter_descriptor_;
  metadata.reflection = packetl2c_robot_enter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_robot_leave::kPacketIdFieldNumber;
const int packetl2c_robot_leave::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_robot_leave::packetl2c_robot_leave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_robot_leave::InitAsDefaultInstance() {
}

packetl2c_robot_leave::packetl2c_robot_leave(const packetl2c_robot_leave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_robot_leave::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 16100;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_robot_leave::~packetl2c_robot_leave() {
  SharedDtor();
}

void packetl2c_robot_leave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_robot_leave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_robot_leave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_robot_leave_descriptor_;
}

const packetl2c_robot_leave& packetl2c_robot_leave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_robot_leave* packetl2c_robot_leave::default_instance_ = NULL;

packetl2c_robot_leave* packetl2c_robot_leave::New() const {
  return new packetl2c_robot_leave;
}

void packetl2c_robot_leave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 16100;
    player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_robot_leave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_robot_leave];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_robot_leave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_robot_leave];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_robot_leave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_robot_leave];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_robot_leave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_robot_leave];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_robot_leave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_robot_leave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_robot_leave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_robot_leave::MergeFrom(const packetl2c_robot_leave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_robot_leave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_robot_leave::CopyFrom(const packetl2c_robot_leave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_robot_leave::IsInitialized() const {

  return true;
}

void packetl2c_robot_leave::Swap(packetl2c_robot_leave* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_robot_leave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_robot_leave_descriptor_;
  metadata.reflection = packetl2c_robot_leave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_change_rate::kPacketIdFieldNumber;
const int packetl2c_bc_change_rate::kPlayerIdFieldNumber;
const int packetl2c_bc_change_rate::kTurretRateFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_change_rate::packetl2c_bc_change_rate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_change_rate::InitAsDefaultInstance() {
}

packetl2c_bc_change_rate::packetl2c_bc_change_rate(const packetl2c_bc_change_rate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_change_rate::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15203;
  player_id_ = 0;
  turret_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_change_rate::~packetl2c_bc_change_rate() {
  SharedDtor();
}

void packetl2c_bc_change_rate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_change_rate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_change_rate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_change_rate_descriptor_;
}

const packetl2c_bc_change_rate& packetl2c_bc_change_rate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_change_rate* packetl2c_bc_change_rate::default_instance_ = NULL;

packetl2c_bc_change_rate* packetl2c_bc_change_rate::New() const {
  return new packetl2c_bc_change_rate;
}

void packetl2c_bc_change_rate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15203;
    player_id_ = 0;
    turret_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_change_rate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_rate];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_turret_rate;
        break;
      }

      // optional int32 turret_rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turret_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turret_rate_)));
          set_has_turret_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_change_rate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_rate];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 turret_rate = 3;
  if (has_turret_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->turret_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_change_rate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_rate];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 turret_rate = 3;
  if (has_turret_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->turret_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_change_rate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_rate];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 turret_rate = 3;
    if (has_turret_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turret_rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_change_rate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_change_rate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_change_rate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_change_rate::MergeFrom(const packetl2c_bc_change_rate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_turret_rate()) {
      set_turret_rate(from.turret_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_change_rate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_change_rate::CopyFrom(const packetl2c_bc_change_rate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_change_rate::IsInitialized() const {

  return true;
}

void packetl2c_bc_change_rate::Swap(packetl2c_bc_change_rate* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(turret_rate_, other->turret_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_change_rate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_change_rate_descriptor_;
  metadata.reflection = packetl2c_bc_change_rate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_change_attr::kPacketIdFieldNumber;
const int packetl2c_bc_change_attr::kPlayerIdFieldNumber;
const int packetl2c_bc_change_attr::kChangeGoldFieldNumber;
const int packetl2c_bc_change_attr::kChangeVipFieldNumber;
const int packetl2c_bc_change_attr::kChangeTicketFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_change_attr::packetl2c_bc_change_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_change_attr::InitAsDefaultInstance() {
}

packetl2c_bc_change_attr::packetl2c_bc_change_attr(const packetl2c_bc_change_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_change_attr::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15207;
  player_id_ = 0;
  change_gold_ = GOOGLE_LONGLONG(0);
  change_vip_ = 0;
  change_ticket_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_change_attr::~packetl2c_bc_change_attr() {
  SharedDtor();
}

void packetl2c_bc_change_attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_change_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_change_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_change_attr_descriptor_;
}

const packetl2c_bc_change_attr& packetl2c_bc_change_attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_change_attr* packetl2c_bc_change_attr::default_instance_ = NULL;

packetl2c_bc_change_attr* packetl2c_bc_change_attr::New() const {
  return new packetl2c_bc_change_attr;
}

void packetl2c_bc_change_attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15207;
    player_id_ = 0;
    change_gold_ = GOOGLE_LONGLONG(0);
    change_vip_ = 0;
    change_ticket_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_change_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_change_gold;
        break;
      }

      // optional int64 change_gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &change_gold_)));
          set_has_change_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_change_vip;
        break;
      }

      // optional int32 change_vip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_vip_)));
          set_has_change_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_change_ticket;
        break;
      }

      // optional int32 change_ticket = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_ticket_)));
          set_has_change_ticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_change_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int64 change_gold = 3;
  if (has_change_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->change_gold(), output);
  }

  // optional int32 change_vip = 4;
  if (has_change_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->change_vip(), output);
  }

  // optional int32 change_ticket = 5;
  if (has_change_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->change_ticket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_change_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int64 change_gold = 3;
  if (has_change_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->change_gold(), target);
  }

  // optional int32 change_vip = 4;
  if (has_change_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->change_vip(), target);
  }

  // optional int32 change_ticket = 5;
  if (has_change_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->change_ticket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_change_attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int64 change_gold = 3;
    if (has_change_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->change_gold());
    }

    // optional int32 change_vip = 4;
    if (has_change_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_vip());
    }

    // optional int32 change_ticket = 5;
    if (has_change_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_ticket());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_change_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_change_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_change_attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_change_attr::MergeFrom(const packetl2c_bc_change_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_change_gold()) {
      set_change_gold(from.change_gold());
    }
    if (from.has_change_vip()) {
      set_change_vip(from.change_vip());
    }
    if (from.has_change_ticket()) {
      set_change_ticket(from.change_ticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_change_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_change_attr::CopyFrom(const packetl2c_bc_change_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_change_attr::IsInitialized() const {

  return true;
}

void packetl2c_bc_change_attr::Swap(packetl2c_bc_change_attr* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(change_gold_, other->change_gold_);
    std::swap(change_vip_, other->change_vip_);
    std::swap(change_ticket_, other->change_ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_change_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_change_attr_descriptor_;
  metadata.reflection = packetl2c_bc_change_attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fish_info::kIdFieldNumber;
const int msg_fish_info::kFishIdFieldNumber;
const int msg_fish_info::kRouteIdFieldNumber;
#endif  // !_MSC_VER

msg_fish_info::msg_fish_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fish_info::InitAsDefaultInstance() {
}

msg_fish_info::msg_fish_info(const msg_fish_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fish_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  fish_id_ = 0;
  route_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fish_info::~msg_fish_info() {
  SharedDtor();
}

void msg_fish_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fish_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fish_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fish_info_descriptor_;
}

const msg_fish_info& msg_fish_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

msg_fish_info* msg_fish_info::default_instance_ = NULL;

msg_fish_info* msg_fish_info::New() const {
  return new msg_fish_info;
}

void msg_fish_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    fish_id_ = 0;
    route_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fish_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fish_id;
        break;
      }

      // optional int32 fish_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fish_id_)));
          set_has_fish_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_route_id;
        break;
      }

      // optional int32 route_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_route_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &route_id_)));
          set_has_route_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fish_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 fish_id = 2;
  if (has_fish_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fish_id(), output);
  }

  // optional int32 route_id = 3;
  if (has_route_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->route_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fish_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 fish_id = 2;
  if (has_fish_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fish_id(), target);
  }

  // optional int32 route_id = 3;
  if (has_route_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->route_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fish_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 fish_id = 2;
    if (has_fish_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fish_id());
    }

    // optional int32 route_id = 3;
    if (has_route_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->route_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fish_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fish_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fish_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fish_info::MergeFrom(const msg_fish_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_fish_id()) {
      set_fish_id(from.fish_id());
    }
    if (from.has_route_id()) {
      set_route_id(from.route_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fish_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fish_info::CopyFrom(const msg_fish_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fish_info::IsInitialized() const {

  return true;
}

void msg_fish_info::Swap(msg_fish_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(fish_id_, other->fish_id_);
    std::swap(route_id_, other->route_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fish_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fish_info_descriptor_;
  metadata.reflection = msg_fish_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_create_fish::kPacketIdFieldNumber;
const int packetl2c_bc_create_fish::kFishInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_create_fish::packetl2c_bc_create_fish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_create_fish::InitAsDefaultInstance() {
  fish_info_ = const_cast< ::fish_protocols::msg_fish_info*>(&::fish_protocols::msg_fish_info::default_instance());
}

packetl2c_bc_create_fish::packetl2c_bc_create_fish(const packetl2c_bc_create_fish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_create_fish::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15204;
  fish_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_create_fish::~packetl2c_bc_create_fish() {
  SharedDtor();
}

void packetl2c_bc_create_fish::SharedDtor() {
  if (this != default_instance_) {
    delete fish_info_;
  }
}

void packetl2c_bc_create_fish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_create_fish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_create_fish_descriptor_;
}

const packetl2c_bc_create_fish& packetl2c_bc_create_fish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_create_fish* packetl2c_bc_create_fish::default_instance_ = NULL;

packetl2c_bc_create_fish* packetl2c_bc_create_fish::New() const {
  return new packetl2c_bc_create_fish;
}

void packetl2c_bc_create_fish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15204;
    if (has_fish_info()) {
      if (fish_info_ != NULL) fish_info_->::fish_protocols::msg_fish_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_create_fish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_create_fish];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fish_info;
        break;
      }

      // optional .fish_protocols.msg_fish_info fish_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fish_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fish_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_create_fish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_create_fish];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .fish_protocols.msg_fish_info fish_info = 2;
  if (has_fish_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fish_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_create_fish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_create_fish];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .fish_protocols.msg_fish_info fish_info = 2;
  if (has_fish_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fish_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_create_fish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_create_fish];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .fish_protocols.msg_fish_info fish_info = 2;
    if (has_fish_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fish_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_create_fish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_create_fish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_create_fish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_create_fish::MergeFrom(const packetl2c_bc_create_fish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_fish_info()) {
      mutable_fish_info()->::fish_protocols::msg_fish_info::MergeFrom(from.fish_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_create_fish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_create_fish::CopyFrom(const packetl2c_bc_create_fish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_create_fish::IsInitialized() const {

  return true;
}

void packetl2c_bc_create_fish::Swap(packetl2c_bc_create_fish* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(fish_info_, other->fish_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_create_fish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_create_fish_descriptor_;
  metadata.reflection = packetl2c_bc_create_fish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_create_generator::kPacketIdFieldNumber;
const int packetl2c_bc_create_generator::kGeneratorIdFieldNumber;
const int packetl2c_bc_create_generator::kStartIdFieldNumber;
const int packetl2c_bc_create_generator::kRouteIdFieldNumber;
const int packetl2c_bc_create_generator::kIsRedFieldNumber;
const int packetl2c_bc_create_generator::kPosXFieldNumber;
const int packetl2c_bc_create_generator::kPosYFieldNumber;
const int packetl2c_bc_create_generator::kIsFlashFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_create_generator::packetl2c_bc_create_generator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_create_generator::InitAsDefaultInstance() {
}

packetl2c_bc_create_generator::packetl2c_bc_create_generator(const packetl2c_bc_create_generator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_create_generator::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15208;
  generator_id_ = 0;
  start_id_ = 0;
  route_id_ = 0;
  is_red_ = false;
  pos_x_ = 0;
  pos_y_ = 0;
  is_flash_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_create_generator::~packetl2c_bc_create_generator() {
  SharedDtor();
}

void packetl2c_bc_create_generator::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_create_generator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_create_generator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_create_generator_descriptor_;
}

const packetl2c_bc_create_generator& packetl2c_bc_create_generator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_create_generator* packetl2c_bc_create_generator::default_instance_ = NULL;

packetl2c_bc_create_generator* packetl2c_bc_create_generator::New() const {
  return new packetl2c_bc_create_generator;
}

void packetl2c_bc_create_generator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15208;
    generator_id_ = 0;
    start_id_ = 0;
    route_id_ = 0;
    is_red_ = false;
    pos_x_ = 0;
    pos_y_ = 0;
    is_flash_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_create_generator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_create_generator];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_generator_id;
        break;
      }

      // optional int32 generator_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_generator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &generator_id_)));
          set_has_generator_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_id;
        break;
      }

      // optional int32 start_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_id_)));
          set_has_start_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_route_id;
        break;
      }

      // optional int32 route_id = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_route_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &route_id_)));
          set_has_route_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_red;
        break;
      }

      // optional bool is_red = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_red:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_red_)));
          set_has_is_red();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pos_x;
        break;
      }

      // optional int32 pos_x = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_flash;
        break;
      }

      // optional bool is_flash = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_flash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_flash_)));
          set_has_is_flash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_create_generator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_create_generator];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 generator_id = 2;
  if (has_generator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->generator_id(), output);
  }

  // optional int32 start_id = 3;
  if (has_start_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_id(), output);
  }

  // optional int32 route_id = 4 [default = 0];
  if (has_route_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->route_id(), output);
  }

  // optional bool is_red = 5 [default = false];
  if (has_is_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_red(), output);
  }

  // optional int32 pos_x = 6;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pos_x(), output);
  }

  // optional int32 pos_y = 7;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pos_y(), output);
  }

  // optional bool is_flash = 8 [default = false];
  if (has_is_flash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_flash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_create_generator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_create_generator];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 generator_id = 2;
  if (has_generator_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->generator_id(), target);
  }

  // optional int32 start_id = 3;
  if (has_start_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start_id(), target);
  }

  // optional int32 route_id = 4 [default = 0];
  if (has_route_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->route_id(), target);
  }

  // optional bool is_red = 5 [default = false];
  if (has_is_red()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_red(), target);
  }

  // optional int32 pos_x = 6;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pos_x(), target);
  }

  // optional int32 pos_y = 7;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pos_y(), target);
  }

  // optional bool is_flash = 8 [default = false];
  if (has_is_flash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_flash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_create_generator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_create_generator];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 generator_id = 2;
    if (has_generator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->generator_id());
    }

    // optional int32 start_id = 3;
    if (has_start_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_id());
    }

    // optional int32 route_id = 4 [default = 0];
    if (has_route_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->route_id());
    }

    // optional bool is_red = 5 [default = false];
    if (has_is_red()) {
      total_size += 1 + 1;
    }

    // optional int32 pos_x = 6;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 7;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // optional bool is_flash = 8 [default = false];
    if (has_is_flash()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_create_generator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_create_generator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_create_generator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_create_generator::MergeFrom(const packetl2c_bc_create_generator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_generator_id()) {
      set_generator_id(from.generator_id());
    }
    if (from.has_start_id()) {
      set_start_id(from.start_id());
    }
    if (from.has_route_id()) {
      set_route_id(from.route_id());
    }
    if (from.has_is_red()) {
      set_is_red(from.is_red());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_is_flash()) {
      set_is_flash(from.is_flash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_create_generator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_create_generator::CopyFrom(const packetl2c_bc_create_generator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_create_generator::IsInitialized() const {

  return true;
}

void packetl2c_bc_create_generator::Swap(packetl2c_bc_create_generator* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(generator_id_, other->generator_id_);
    std::swap(start_id_, other->start_id_);
    std::swap(route_id_, other->route_id_);
    std::swap(is_red_, other->is_red_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(is_flash_, other->is_flash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_create_generator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_create_generator_descriptor_;
  metadata.reflection = packetl2c_bc_create_generator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_manual_fire::kPacketIdFieldNumber;
const int packetc2l_manual_fire::kBulletIdFieldNumber;
const int packetc2l_manual_fire::kBulletAngleFieldNumber;
const int packetc2l_manual_fire::kIsMultiFieldNumber;
const int packetc2l_manual_fire::kIsFastFieldNumber;
const int packetc2l_manual_fire::kBulletTypeFieldNumber;
const int packetc2l_manual_fire::kBulletRateFieldNumber;
#endif  // !_MSC_VER

packetc2l_manual_fire::packetc2l_manual_fire()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_manual_fire::InitAsDefaultInstance() {
}

packetc2l_manual_fire::packetc2l_manual_fire(const packetc2l_manual_fire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_manual_fire::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10103;
  bullet_id_ = 0;
  bullet_angle_ = 0;
  is_multi_ = false;
  is_fast_ = false;
  bullet_type_ = 1;
  bullet_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_manual_fire::~packetc2l_manual_fire() {
  SharedDtor();
}

void packetc2l_manual_fire::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_manual_fire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_manual_fire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_manual_fire_descriptor_;
}

const packetc2l_manual_fire& packetc2l_manual_fire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_manual_fire* packetc2l_manual_fire::default_instance_ = NULL;

packetc2l_manual_fire* packetc2l_manual_fire::New() const {
  return new packetc2l_manual_fire;
}

void packetc2l_manual_fire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10103;
    bullet_id_ = 0;
    bullet_angle_ = 0;
    is_multi_ = false;
    is_fast_ = false;
    bullet_type_ = 1;
    bullet_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_manual_fire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_manual_fire];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bullet_id;
        break;
      }

      // optional int32 bullet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_id_)));
          set_has_bullet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bullet_angle;
        break;
      }

      // optional int32 bullet_angle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_angle_)));
          set_has_bullet_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_multi;
        break;
      }

      // optional bool is_multi = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_multi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_multi_)));
          set_has_is_multi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_fast;
        break;
      }

      // optional bool is_fast = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_fast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fast_)));
          set_has_is_fast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bullet_type;
        break;
      }

      // optional int32 bullet_type = 6 [default = 1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_type_)));
          set_has_bullet_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bullet_rate;
        break;
      }

      // optional int32 bullet_rate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_rate_)));
          set_has_bullet_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_manual_fire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_manual_fire];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 bullet_id = 2;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bullet_id(), output);
  }

  // optional int32 bullet_angle = 3;
  if (has_bullet_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bullet_angle(), output);
  }

  // optional bool is_multi = 4 [default = false];
  if (has_is_multi()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_multi(), output);
  }

  // optional bool is_fast = 5 [default = false];
  if (has_is_fast()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_fast(), output);
  }

  // optional int32 bullet_type = 6 [default = 1];
  if (has_bullet_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bullet_type(), output);
  }

  // optional int32 bullet_rate = 7;
  if (has_bullet_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bullet_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_manual_fire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_manual_fire];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 bullet_id = 2;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bullet_id(), target);
  }

  // optional int32 bullet_angle = 3;
  if (has_bullet_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bullet_angle(), target);
  }

  // optional bool is_multi = 4 [default = false];
  if (has_is_multi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_multi(), target);
  }

  // optional bool is_fast = 5 [default = false];
  if (has_is_fast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_fast(), target);
  }

  // optional int32 bullet_type = 6 [default = 1];
  if (has_bullet_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bullet_type(), target);
  }

  // optional int32 bullet_rate = 7;
  if (has_bullet_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bullet_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_manual_fire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_manual_fire];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 bullet_id = 2;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_id());
    }

    // optional int32 bullet_angle = 3;
    if (has_bullet_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_angle());
    }

    // optional bool is_multi = 4 [default = false];
    if (has_is_multi()) {
      total_size += 1 + 1;
    }

    // optional bool is_fast = 5 [default = false];
    if (has_is_fast()) {
      total_size += 1 + 1;
    }

    // optional int32 bullet_type = 6 [default = 1];
    if (has_bullet_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_type());
    }

    // optional int32 bullet_rate = 7;
    if (has_bullet_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_manual_fire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_manual_fire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_manual_fire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_manual_fire::MergeFrom(const packetc2l_manual_fire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
    if (from.has_bullet_angle()) {
      set_bullet_angle(from.bullet_angle());
    }
    if (from.has_is_multi()) {
      set_is_multi(from.is_multi());
    }
    if (from.has_is_fast()) {
      set_is_fast(from.is_fast());
    }
    if (from.has_bullet_type()) {
      set_bullet_type(from.bullet_type());
    }
    if (from.has_bullet_rate()) {
      set_bullet_rate(from.bullet_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_manual_fire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_manual_fire::CopyFrom(const packetc2l_manual_fire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_manual_fire::IsInitialized() const {

  return true;
}

void packetc2l_manual_fire::Swap(packetc2l_manual_fire* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(bullet_id_, other->bullet_id_);
    std::swap(bullet_angle_, other->bullet_angle_);
    std::swap(is_multi_, other->is_multi_);
    std::swap(is_fast_, other->is_fast_);
    std::swap(bullet_type_, other->bullet_type_);
    std::swap(bullet_rate_, other->bullet_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_manual_fire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_manual_fire_descriptor_;
  metadata.reflection = packetc2l_manual_fire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_manual_fire_fail::kPacketIdFieldNumber;
const int packetl2c_manual_fire_fail::kBulletCostFieldNumber;
#endif  // !_MSC_VER

packetl2c_manual_fire_fail::packetl2c_manual_fire_fail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_manual_fire_fail::InitAsDefaultInstance() {
}

packetl2c_manual_fire_fail::packetl2c_manual_fire_fail(const packetl2c_manual_fire_fail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_manual_fire_fail::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15111;
  bullet_cost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_manual_fire_fail::~packetl2c_manual_fire_fail() {
  SharedDtor();
}

void packetl2c_manual_fire_fail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_manual_fire_fail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_manual_fire_fail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_manual_fire_fail_descriptor_;
}

const packetl2c_manual_fire_fail& packetl2c_manual_fire_fail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_manual_fire_fail* packetl2c_manual_fire_fail::default_instance_ = NULL;

packetl2c_manual_fire_fail* packetl2c_manual_fire_fail::New() const {
  return new packetl2c_manual_fire_fail;
}

void packetl2c_manual_fire_fail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15111;
    bullet_cost_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_manual_fire_fail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_manual_fire_fail];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bullet_cost;
        break;
      }

      // optional int32 bullet_cost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_cost_)));
          set_has_bullet_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_manual_fire_fail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_manual_fire_fail];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 bullet_cost = 2;
  if (has_bullet_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bullet_cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_manual_fire_fail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_manual_fire_fail];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 bullet_cost = 2;
  if (has_bullet_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bullet_cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_manual_fire_fail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_manual_fire_fail];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 bullet_cost = 2;
    if (has_bullet_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_manual_fire_fail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_manual_fire_fail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_manual_fire_fail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_manual_fire_fail::MergeFrom(const packetl2c_manual_fire_fail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_bullet_cost()) {
      set_bullet_cost(from.bullet_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_manual_fire_fail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_manual_fire_fail::CopyFrom(const packetl2c_manual_fire_fail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_manual_fire_fail::IsInitialized() const {

  return true;
}

void packetl2c_manual_fire_fail::Swap(packetl2c_manual_fire_fail* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(bullet_cost_, other->bullet_cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_manual_fire_fail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_manual_fire_fail_descriptor_;
  metadata.reflection = packetl2c_manual_fire_fail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_manual_fire::kPacketIdFieldNumber;
const int packetl2c_bc_manual_fire::kBulletIdFieldNumber;
const int packetl2c_bc_manual_fire::kPlayerIdFieldNumber;
const int packetl2c_bc_manual_fire::kBulletAngleFieldNumber;
const int packetl2c_bc_manual_fire::kIsMultiFieldNumber;
const int packetl2c_bc_manual_fire::kBulletTypeFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_manual_fire::packetl2c_bc_manual_fire()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_manual_fire::InitAsDefaultInstance() {
}

packetl2c_bc_manual_fire::packetl2c_bc_manual_fire(const packetl2c_bc_manual_fire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_manual_fire::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15205;
  bullet_id_ = 0;
  player_id_ = 0;
  bullet_angle_ = 0;
  is_multi_ = false;
  bullet_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_manual_fire::~packetl2c_bc_manual_fire() {
  SharedDtor();
}

void packetl2c_bc_manual_fire::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_manual_fire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_manual_fire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_manual_fire_descriptor_;
}

const packetl2c_bc_manual_fire& packetl2c_bc_manual_fire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_manual_fire* packetl2c_bc_manual_fire::default_instance_ = NULL;

packetl2c_bc_manual_fire* packetl2c_bc_manual_fire::New() const {
  return new packetl2c_bc_manual_fire;
}

void packetl2c_bc_manual_fire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15205;
    bullet_id_ = 0;
    player_id_ = 0;
    bullet_angle_ = 0;
    is_multi_ = false;
    bullet_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_manual_fire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_manual_fire];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bullet_id;
        break;
      }

      // optional int32 bullet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_id_)));
          set_has_bullet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bullet_angle;
        break;
      }

      // optional int32 bullet_angle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_angle_)));
          set_has_bullet_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_multi;
        break;
      }

      // optional bool is_multi = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_multi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_multi_)));
          set_has_is_multi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bullet_type;
        break;
      }

      // optional int32 bullet_type = 6 [default = 1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_type_)));
          set_has_bullet_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_manual_fire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_manual_fire];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 bullet_id = 2;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bullet_id(), output);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_id(), output);
  }

  // optional int32 bullet_angle = 4;
  if (has_bullet_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bullet_angle(), output);
  }

  // optional bool is_multi = 5 [default = false];
  if (has_is_multi()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_multi(), output);
  }

  // optional int32 bullet_type = 6 [default = 1];
  if (has_bullet_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bullet_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_manual_fire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_manual_fire];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 bullet_id = 2;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bullet_id(), target);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_id(), target);
  }

  // optional int32 bullet_angle = 4;
  if (has_bullet_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bullet_angle(), target);
  }

  // optional bool is_multi = 5 [default = false];
  if (has_is_multi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_multi(), target);
  }

  // optional int32 bullet_type = 6 [default = 1];
  if (has_bullet_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bullet_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_manual_fire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_manual_fire];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 bullet_id = 2;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_id());
    }

    // optional int32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 bullet_angle = 4;
    if (has_bullet_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_angle());
    }

    // optional bool is_multi = 5 [default = false];
    if (has_is_multi()) {
      total_size += 1 + 1;
    }

    // optional int32 bullet_type = 6 [default = 1];
    if (has_bullet_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_manual_fire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_manual_fire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_manual_fire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_manual_fire::MergeFrom(const packetl2c_bc_manual_fire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_bullet_angle()) {
      set_bullet_angle(from.bullet_angle());
    }
    if (from.has_is_multi()) {
      set_is_multi(from.is_multi());
    }
    if (from.has_bullet_type()) {
      set_bullet_type(from.bullet_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_manual_fire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_manual_fire::CopyFrom(const packetl2c_bc_manual_fire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_manual_fire::IsInitialized() const {

  return true;
}

void packetl2c_bc_manual_fire::Swap(packetl2c_bc_manual_fire* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(bullet_id_, other->bullet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(bullet_angle_, other->bullet_angle_);
    std::swap(is_multi_, other->is_multi_);
    std::swap(bullet_type_, other->bullet_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_manual_fire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_manual_fire_descriptor_;
  metadata.reflection = packetl2c_bc_manual_fire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_missile_fire::kPacketIdFieldNumber;
const int packetc2l_missile_fire::kBulletIdFieldNumber;
const int packetc2l_missile_fire::kFirePosXFieldNumber;
const int packetc2l_missile_fire::kFirePosYFieldNumber;
#endif  // !_MSC_VER

packetc2l_missile_fire::packetc2l_missile_fire()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_missile_fire::InitAsDefaultInstance() {
}

packetc2l_missile_fire::packetc2l_missile_fire(const packetc2l_missile_fire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_missile_fire::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10117;
  bullet_id_ = 0;
  fire_pos_x_ = 0;
  fire_pos_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_missile_fire::~packetc2l_missile_fire() {
  SharedDtor();
}

void packetc2l_missile_fire::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_missile_fire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_missile_fire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_missile_fire_descriptor_;
}

const packetc2l_missile_fire& packetc2l_missile_fire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_missile_fire* packetc2l_missile_fire::default_instance_ = NULL;

packetc2l_missile_fire* packetc2l_missile_fire::New() const {
  return new packetc2l_missile_fire;
}

void packetc2l_missile_fire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10117;
    bullet_id_ = 0;
    fire_pos_x_ = 0;
    fire_pos_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_missile_fire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_missile_fire];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bullet_id;
        break;
      }

      // optional int32 bullet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_id_)));
          set_has_bullet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fire_pos_x;
        break;
      }

      // optional int32 fire_pos_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fire_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fire_pos_x_)));
          set_has_fire_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fire_pos_y;
        break;
      }

      // optional int32 fire_pos_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fire_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fire_pos_y_)));
          set_has_fire_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_missile_fire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_missile_fire];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 bullet_id = 2;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bullet_id(), output);
  }

  // optional int32 fire_pos_x = 3;
  if (has_fire_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fire_pos_x(), output);
  }

  // optional int32 fire_pos_y = 4;
  if (has_fire_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fire_pos_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_missile_fire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_missile_fire];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 bullet_id = 2;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bullet_id(), target);
  }

  // optional int32 fire_pos_x = 3;
  if (has_fire_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fire_pos_x(), target);
  }

  // optional int32 fire_pos_y = 4;
  if (has_fire_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fire_pos_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_missile_fire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_missile_fire];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 bullet_id = 2;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_id());
    }

    // optional int32 fire_pos_x = 3;
    if (has_fire_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fire_pos_x());
    }

    // optional int32 fire_pos_y = 4;
    if (has_fire_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fire_pos_y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_missile_fire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_missile_fire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_missile_fire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_missile_fire::MergeFrom(const packetc2l_missile_fire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
    if (from.has_fire_pos_x()) {
      set_fire_pos_x(from.fire_pos_x());
    }
    if (from.has_fire_pos_y()) {
      set_fire_pos_y(from.fire_pos_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_missile_fire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_missile_fire::CopyFrom(const packetc2l_missile_fire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_missile_fire::IsInitialized() const {

  return true;
}

void packetc2l_missile_fire::Swap(packetc2l_missile_fire* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(bullet_id_, other->bullet_id_);
    std::swap(fire_pos_x_, other->fire_pos_x_);
    std::swap(fire_pos_y_, other->fire_pos_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_missile_fire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_missile_fire_descriptor_;
  metadata.reflection = packetc2l_missile_fire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_missile_fire::kPacketIdFieldNumber;
const int packetl2c_bc_missile_fire::kBulletIdFieldNumber;
const int packetl2c_bc_missile_fire::kPlayerIdFieldNumber;
const int packetl2c_bc_missile_fire::kFirePosXFieldNumber;
const int packetl2c_bc_missile_fire::kFirePosYFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_missile_fire::packetl2c_bc_missile_fire()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_missile_fire::InitAsDefaultInstance() {
}

packetl2c_bc_missile_fire::packetl2c_bc_missile_fire(const packetl2c_bc_missile_fire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_missile_fire::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15226;
  bullet_id_ = 0;
  player_id_ = 0;
  fire_pos_x_ = 0;
  fire_pos_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_missile_fire::~packetl2c_bc_missile_fire() {
  SharedDtor();
}

void packetl2c_bc_missile_fire::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_missile_fire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_missile_fire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_missile_fire_descriptor_;
}

const packetl2c_bc_missile_fire& packetl2c_bc_missile_fire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_missile_fire* packetl2c_bc_missile_fire::default_instance_ = NULL;

packetl2c_bc_missile_fire* packetl2c_bc_missile_fire::New() const {
  return new packetl2c_bc_missile_fire;
}

void packetl2c_bc_missile_fire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15226;
    bullet_id_ = 0;
    player_id_ = 0;
    fire_pos_x_ = 0;
    fire_pos_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_missile_fire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_missile_fire];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bullet_id;
        break;
      }

      // optional int32 bullet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_id_)));
          set_has_bullet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fire_pos_x;
        break;
      }

      // optional int32 fire_pos_x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fire_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fire_pos_x_)));
          set_has_fire_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fire_pos_y;
        break;
      }

      // optional int32 fire_pos_y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fire_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fire_pos_y_)));
          set_has_fire_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_missile_fire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_missile_fire];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 bullet_id = 2;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bullet_id(), output);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_id(), output);
  }

  // optional int32 fire_pos_x = 4;
  if (has_fire_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fire_pos_x(), output);
  }

  // optional int32 fire_pos_y = 5;
  if (has_fire_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fire_pos_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_missile_fire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_missile_fire];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 bullet_id = 2;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bullet_id(), target);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_id(), target);
  }

  // optional int32 fire_pos_x = 4;
  if (has_fire_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fire_pos_x(), target);
  }

  // optional int32 fire_pos_y = 5;
  if (has_fire_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fire_pos_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_missile_fire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_missile_fire];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 bullet_id = 2;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_id());
    }

    // optional int32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 fire_pos_x = 4;
    if (has_fire_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fire_pos_x());
    }

    // optional int32 fire_pos_y = 5;
    if (has_fire_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fire_pos_y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_missile_fire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_missile_fire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_missile_fire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_missile_fire::MergeFrom(const packetl2c_bc_missile_fire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_fire_pos_x()) {
      set_fire_pos_x(from.fire_pos_x());
    }
    if (from.has_fire_pos_y()) {
      set_fire_pos_y(from.fire_pos_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_missile_fire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_missile_fire::CopyFrom(const packetl2c_bc_missile_fire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_missile_fire::IsInitialized() const {

  return true;
}

void packetl2c_bc_missile_fire::Swap(packetl2c_bc_missile_fire* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(bullet_id_, other->bullet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(fire_pos_x_, other->fire_pos_x_);
    std::swap(fire_pos_y_, other->fire_pos_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_missile_fire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_missile_fire_descriptor_;
  metadata.reflection = packetl2c_bc_missile_fire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_hit_fish::kPacketIdFieldNumber;
const int packetc2l_hit_fish::kBulletIdFieldNumber;
const int packetc2l_hit_fish::kFishIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_hit_fish::packetc2l_hit_fish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_hit_fish::InitAsDefaultInstance() {
}

packetc2l_hit_fish::packetc2l_hit_fish(const packetc2l_hit_fish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_hit_fish::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10104;
  bullet_id_ = 0;
  fish_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_hit_fish::~packetc2l_hit_fish() {
  SharedDtor();
}

void packetc2l_hit_fish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_hit_fish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_hit_fish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_hit_fish_descriptor_;
}

const packetc2l_hit_fish& packetc2l_hit_fish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_hit_fish* packetc2l_hit_fish::default_instance_ = NULL;

packetc2l_hit_fish* packetc2l_hit_fish::New() const {
  return new packetc2l_hit_fish;
}

void packetc2l_hit_fish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10104;
    bullet_id_ = 0;
    fish_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_hit_fish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_hit_fish];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bullet_id;
        break;
      }

      // optional int32 bullet_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_id_)));
          set_has_bullet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fish_id;
        break;
      }

      // optional int32 fish_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fish_id_)));
          set_has_fish_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_hit_fish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_hit_fish];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 bullet_id = 3;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bullet_id(), output);
  }

  // optional int32 fish_id = 4;
  if (has_fish_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fish_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_hit_fish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_hit_fish];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 bullet_id = 3;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bullet_id(), target);
  }

  // optional int32 fish_id = 4;
  if (has_fish_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fish_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_hit_fish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_hit_fish];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 bullet_id = 3;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_id());
    }

    // optional int32 fish_id = 4;
    if (has_fish_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fish_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_hit_fish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_hit_fish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_hit_fish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_hit_fish::MergeFrom(const packetc2l_hit_fish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
    if (from.has_fish_id()) {
      set_fish_id(from.fish_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_hit_fish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_hit_fish::CopyFrom(const packetc2l_hit_fish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_hit_fish::IsInitialized() const {

  return true;
}

void packetc2l_hit_fish::Swap(packetc2l_hit_fish* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(bullet_id_, other->bullet_id_);
    std::swap(fish_id_, other->fish_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_hit_fish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_hit_fish_descriptor_;
  metadata.reflection = packetc2l_hit_fish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_hit_fishs::kPacketIdFieldNumber;
const int packetc2l_hit_fishs::kHitTypeFieldNumber;
const int packetc2l_hit_fishs::kBulletIdFieldNumber;
const int packetc2l_hit_fishs::kFishIdsFieldNumber;
const int packetc2l_hit_fishs::kHitParamFieldNumber;
#endif  // !_MSC_VER

packetc2l_hit_fishs::packetc2l_hit_fishs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_hit_fishs::InitAsDefaultInstance() {
}

packetc2l_hit_fishs::packetc2l_hit_fishs(const packetc2l_hit_fishs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_hit_fishs::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10108;
  hit_type_ = 0;
  bullet_id_ = 0;
  hit_param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_hit_fishs::~packetc2l_hit_fishs() {
  SharedDtor();
}

void packetc2l_hit_fishs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_hit_fishs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_hit_fishs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_hit_fishs_descriptor_;
}

const packetc2l_hit_fishs& packetc2l_hit_fishs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_hit_fishs* packetc2l_hit_fishs::default_instance_ = NULL;

packetc2l_hit_fishs* packetc2l_hit_fishs::New() const {
  return new packetc2l_hit_fishs;
}

void packetc2l_hit_fishs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10108;
    hit_type_ = 0;
    bullet_id_ = 0;
    hit_param_ = 0;
  }
  fish_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_hit_fishs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_hit_fishs];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hit_type;
        break;
      }

      // optional int32 hit_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_type_)));
          set_has_hit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bullet_id;
        break;
      }

      // optional int32 bullet_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_id_)));
          set_has_bullet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fish_ids;
        break;
      }

      // repeated int32 fish_ids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_fish_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fish_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fish_ids;
        if (input->ExpectTag(40)) goto parse_hit_param;
        break;
      }

      // optional int32 hit_param = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_param_)));
          set_has_hit_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_hit_fishs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_hit_fishs];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 hit_type = 2;
  if (has_hit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hit_type(), output);
  }

  // optional int32 bullet_id = 3;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bullet_id(), output);
  }

  // repeated int32 fish_ids = 4;
  for (int i = 0; i < this->fish_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->fish_ids(i), output);
  }

  // optional int32 hit_param = 5 [default = 0];
  if (has_hit_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hit_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_hit_fishs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_hit_fishs];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 hit_type = 2;
  if (has_hit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hit_type(), target);
  }

  // optional int32 bullet_id = 3;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bullet_id(), target);
  }

  // repeated int32 fish_ids = 4;
  for (int i = 0; i < this->fish_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->fish_ids(i), target);
  }

  // optional int32 hit_param = 5 [default = 0];
  if (has_hit_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hit_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_hit_fishs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_hit_fishs];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 hit_type = 2;
    if (has_hit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit_type());
    }

    // optional int32 bullet_id = 3;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_id());
    }

    // optional int32 hit_param = 5 [default = 0];
    if (has_hit_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit_param());
    }

  }
  // repeated int32 fish_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->fish_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fish_ids(i));
    }
    total_size += 1 * this->fish_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_hit_fishs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_hit_fishs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_hit_fishs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_hit_fishs::MergeFrom(const packetc2l_hit_fishs& from) {
  GOOGLE_CHECK_NE(&from, this);
  fish_ids_.MergeFrom(from.fish_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_hit_type()) {
      set_hit_type(from.hit_type());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
    if (from.has_hit_param()) {
      set_hit_param(from.hit_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_hit_fishs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_hit_fishs::CopyFrom(const packetc2l_hit_fishs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_hit_fishs::IsInitialized() const {

  return true;
}

void packetc2l_hit_fishs::Swap(packetc2l_hit_fishs* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(hit_type_, other->hit_type_);
    std::swap(bullet_id_, other->bullet_id_);
    fish_ids_.Swap(&other->fish_ids_);
    std::swap(hit_param_, other->hit_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_hit_fishs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_hit_fishs_descriptor_;
  metadata.reflection = packetc2l_hit_fishs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_fish_die::kPacketIdFieldNumber;
const int packetl2c_bc_fish_die::kFishIdFieldNumber;
const int packetl2c_bc_fish_die::kKillIdFieldNumber;
const int packetl2c_bc_fish_die::kBaseScoreFieldNumber;
const int packetl2c_bc_fish_die::kAddScoreFieldNumber;
const int packetl2c_bc_fish_die::kTicketFieldNumber;
const int packetl2c_bc_fish_die::kGetstarFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_fish_die::packetl2c_bc_fish_die()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_fish_die::InitAsDefaultInstance() {
}

packetl2c_bc_fish_die::packetl2c_bc_fish_die(const packetl2c_bc_fish_die& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_fish_die::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15206;
  fish_id_ = 0;
  kill_id_ = 0;
  base_score_ = 0;
  add_score_ = 0;
  ticket_ = 0;
  getstar_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_fish_die::~packetl2c_bc_fish_die() {
  SharedDtor();
}

void packetl2c_bc_fish_die::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_fish_die::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_fish_die::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_fish_die_descriptor_;
}

const packetl2c_bc_fish_die& packetl2c_bc_fish_die::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_fish_die* packetl2c_bc_fish_die::default_instance_ = NULL;

packetl2c_bc_fish_die* packetl2c_bc_fish_die::New() const {
  return new packetl2c_bc_fish_die;
}

void packetl2c_bc_fish_die::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15206;
    fish_id_ = 0;
    kill_id_ = 0;
    base_score_ = 0;
    add_score_ = 0;
    ticket_ = 0;
    getstar_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_fish_die::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_fish_die];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fish_id;
        break;
      }

      // optional int32 fish_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fish_id_)));
          set_has_fish_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kill_id;
        break;
      }

      // optional int32 kill_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_id_)));
          set_has_kill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_base_score;
        break;
      }

      // optional int32 base_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_score_)));
          set_has_base_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_add_score;
        break;
      }

      // optional int32 add_score = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_score_)));
          set_has_add_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ticket;
        break;
      }

      // optional int32 ticket = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_)));
          set_has_ticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_getstar;
        break;
      }

      // optional bool getstar = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getstar_)));
          set_has_getstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_fish_die::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_fish_die];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 fish_id = 2;
  if (has_fish_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fish_id(), output);
  }

  // optional int32 kill_id = 3;
  if (has_kill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kill_id(), output);
  }

  // optional int32 base_score = 4;
  if (has_base_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->base_score(), output);
  }

  // optional int32 add_score = 5 [default = 0];
  if (has_add_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->add_score(), output);
  }

  // optional int32 ticket = 6 [default = 0];
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ticket(), output);
  }

  // optional bool getstar = 7 [default = false];
  if (has_getstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->getstar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_fish_die::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_fish_die];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 fish_id = 2;
  if (has_fish_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fish_id(), target);
  }

  // optional int32 kill_id = 3;
  if (has_kill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kill_id(), target);
  }

  // optional int32 base_score = 4;
  if (has_base_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->base_score(), target);
  }

  // optional int32 add_score = 5 [default = 0];
  if (has_add_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->add_score(), target);
  }

  // optional int32 ticket = 6 [default = 0];
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ticket(), target);
  }

  // optional bool getstar = 7 [default = false];
  if (has_getstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->getstar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_fish_die::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_fish_die];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 fish_id = 2;
    if (has_fish_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fish_id());
    }

    // optional int32 kill_id = 3;
    if (has_kill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_id());
    }

    // optional int32 base_score = 4;
    if (has_base_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_score());
    }

    // optional int32 add_score = 5 [default = 0];
    if (has_add_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_score());
    }

    // optional int32 ticket = 6 [default = 0];
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ticket());
    }

    // optional bool getstar = 7 [default = false];
    if (has_getstar()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_fish_die::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_fish_die* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_fish_die*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_fish_die::MergeFrom(const packetl2c_bc_fish_die& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_fish_id()) {
      set_fish_id(from.fish_id());
    }
    if (from.has_kill_id()) {
      set_kill_id(from.kill_id());
    }
    if (from.has_base_score()) {
      set_base_score(from.base_score());
    }
    if (from.has_add_score()) {
      set_add_score(from.add_score());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
    if (from.has_getstar()) {
      set_getstar(from.getstar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_fish_die::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_fish_die::CopyFrom(const packetl2c_bc_fish_die& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_fish_die::IsInitialized() const {

  return true;
}

void packetl2c_bc_fish_die::Swap(packetl2c_bc_fish_die* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(fish_id_, other->fish_id_);
    std::swap(kill_id_, other->kill_id_);
    std::swap(base_score_, other->base_score_);
    std::swap(add_score_, other->add_score_);
    std::swap(ticket_, other->ticket_);
    std::swap(getstar_, other->getstar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_fish_die::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_fish_die_descriptor_;
  metadata.reflection = packetl2c_bc_fish_die_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_specialfish_die::kPacketIdFieldNumber;
const int packetl2c_bc_specialfish_die::kFishIdFieldNumber;
const int packetl2c_bc_specialfish_die::kPlayerIdFieldNumber;
const int packetl2c_bc_specialfish_die::kBulletIdFieldNumber;
const int packetl2c_bc_specialfish_die::kBaseScoreFieldNumber;
const int packetl2c_bc_specialfish_die::kAddScoreFieldNumber;
const int packetl2c_bc_specialfish_die::kTicketFieldNumber;
const int packetl2c_bc_specialfish_die::kGetstarFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_specialfish_die::packetl2c_bc_specialfish_die()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_specialfish_die::InitAsDefaultInstance() {
}

packetl2c_bc_specialfish_die::packetl2c_bc_specialfish_die(const packetl2c_bc_specialfish_die& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_specialfish_die::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15219;
  fish_id_ = 0;
  player_id_ = 0;
  bullet_id_ = 0;
  base_score_ = 0;
  add_score_ = 0;
  ticket_ = 0;
  getstar_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_specialfish_die::~packetl2c_bc_specialfish_die() {
  SharedDtor();
}

void packetl2c_bc_specialfish_die::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_specialfish_die::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_specialfish_die::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_specialfish_die_descriptor_;
}

const packetl2c_bc_specialfish_die& packetl2c_bc_specialfish_die::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_specialfish_die* packetl2c_bc_specialfish_die::default_instance_ = NULL;

packetl2c_bc_specialfish_die* packetl2c_bc_specialfish_die::New() const {
  return new packetl2c_bc_specialfish_die;
}

void packetl2c_bc_specialfish_die::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15219;
    fish_id_ = 0;
    player_id_ = 0;
    bullet_id_ = 0;
    base_score_ = 0;
    add_score_ = 0;
    ticket_ = 0;
    getstar_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_specialfish_die::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_specialfish_die];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fish_id;
        break;
      }

      // optional int32 fish_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fish_id_)));
          set_has_fish_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bullet_id;
        break;
      }

      // optional int32 bullet_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_id_)));
          set_has_bullet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_base_score;
        break;
      }

      // optional int32 base_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_score_)));
          set_has_base_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_add_score;
        break;
      }

      // optional int32 add_score = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_score_)));
          set_has_add_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ticket;
        break;
      }

      // optional int32 ticket = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_)));
          set_has_ticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_getstar;
        break;
      }

      // optional bool getstar = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getstar_)));
          set_has_getstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_specialfish_die::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_specialfish_die];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 fish_id = 2;
  if (has_fish_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fish_id(), output);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_id(), output);
  }

  // optional int32 bullet_id = 4;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bullet_id(), output);
  }

  // optional int32 base_score = 5;
  if (has_base_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->base_score(), output);
  }

  // optional int32 add_score = 6 [default = 0];
  if (has_add_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->add_score(), output);
  }

  // optional int32 ticket = 7 [default = 0];
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ticket(), output);
  }

  // optional bool getstar = 8 [default = false];
  if (has_getstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->getstar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_specialfish_die::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_specialfish_die];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 fish_id = 2;
  if (has_fish_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fish_id(), target);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_id(), target);
  }

  // optional int32 bullet_id = 4;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bullet_id(), target);
  }

  // optional int32 base_score = 5;
  if (has_base_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->base_score(), target);
  }

  // optional int32 add_score = 6 [default = 0];
  if (has_add_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->add_score(), target);
  }

  // optional int32 ticket = 7 [default = 0];
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ticket(), target);
  }

  // optional bool getstar = 8 [default = false];
  if (has_getstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->getstar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_specialfish_die::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_specialfish_die];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 fish_id = 2;
    if (has_fish_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fish_id());
    }

    // optional int32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 bullet_id = 4;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_id());
    }

    // optional int32 base_score = 5;
    if (has_base_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_score());
    }

    // optional int32 add_score = 6 [default = 0];
    if (has_add_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_score());
    }

    // optional int32 ticket = 7 [default = 0];
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ticket());
    }

    // optional bool getstar = 8 [default = false];
    if (has_getstar()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_specialfish_die::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_specialfish_die* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_specialfish_die*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_specialfish_die::MergeFrom(const packetl2c_bc_specialfish_die& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_fish_id()) {
      set_fish_id(from.fish_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
    if (from.has_base_score()) {
      set_base_score(from.base_score());
    }
    if (from.has_add_score()) {
      set_add_score(from.add_score());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
    if (from.has_getstar()) {
      set_getstar(from.getstar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_specialfish_die::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_specialfish_die::CopyFrom(const packetl2c_bc_specialfish_die& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_specialfish_die::IsInitialized() const {

  return true;
}

void packetl2c_bc_specialfish_die::Swap(packetl2c_bc_specialfish_die* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(fish_id_, other->fish_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(bullet_id_, other->bullet_id_);
    std::swap(base_score_, other->base_score_);
    std::swap(add_score_, other->add_score_);
    std::swap(ticket_, other->ticket_);
    std::swap(getstar_, other->getstar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_specialfish_die::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_specialfish_die_descriptor_;
  metadata.reflection = packetl2c_bc_specialfish_die_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_fishs_die::kPacketIdFieldNumber;
const int packetl2c_bc_fishs_die::kPlayerIdFieldNumber;
const int packetl2c_bc_fishs_die::kDieTypeFieldNumber;
const int packetl2c_bc_fishs_die::kDieParamsFieldNumber;
const int packetl2c_bc_fishs_die::kTotalScoreFieldNumber;
const int packetl2c_bc_fishs_die::kBaseRateFieldNumber;
const int packetl2c_bc_fishs_die::kAddRateFieldNumber;
const int packetl2c_bc_fishs_die::kTicketFieldNumber;
const int packetl2c_bc_fishs_die::kGetstarFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_fishs_die::packetl2c_bc_fishs_die()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_fishs_die::InitAsDefaultInstance() {
}

packetl2c_bc_fishs_die::packetl2c_bc_fishs_die(const packetl2c_bc_fishs_die& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_fishs_die::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15218;
  player_id_ = 0;
  die_type_ = 0;
  total_score_ = 0;
  base_rate_ = 0;
  add_rate_ = 0;
  ticket_ = 0;
  getstar_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_fishs_die::~packetl2c_bc_fishs_die() {
  SharedDtor();
}

void packetl2c_bc_fishs_die::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_fishs_die::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_fishs_die::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_fishs_die_descriptor_;
}

const packetl2c_bc_fishs_die& packetl2c_bc_fishs_die::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_fishs_die* packetl2c_bc_fishs_die::default_instance_ = NULL;

packetl2c_bc_fishs_die* packetl2c_bc_fishs_die::New() const {
  return new packetl2c_bc_fishs_die;
}

void packetl2c_bc_fishs_die::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15218;
    player_id_ = 0;
    die_type_ = 0;
    total_score_ = 0;
    base_rate_ = 0;
    add_rate_ = 0;
    ticket_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    getstar_ = false;
  }
  die_params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_fishs_die::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_fishs_die];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_die_type;
        break;
      }

      // optional int32 die_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_die_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &die_type_)));
          set_has_die_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_die_params;
        break;
      }

      // repeated int32 die_params = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_die_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_die_params())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_die_params())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_die_params;
        if (input->ExpectTag(40)) goto parse_total_score;
        break;
      }

      // optional int32 total_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_score_)));
          set_has_total_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_base_rate;
        break;
      }

      // optional int32 base_rate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_rate_)));
          set_has_base_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_add_rate;
        break;
      }

      // optional int32 add_rate = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_rate_)));
          set_has_add_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ticket;
        break;
      }

      // optional int32 ticket = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_)));
          set_has_ticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_getstar;
        break;
      }

      // optional bool getstar = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getstar_)));
          set_has_getstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_fishs_die::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_fishs_die];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 die_type = 3;
  if (has_die_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->die_type(), output);
  }

  // repeated int32 die_params = 4;
  for (int i = 0; i < this->die_params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->die_params(i), output);
  }

  // optional int32 total_score = 5;
  if (has_total_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total_score(), output);
  }

  // optional int32 base_rate = 6;
  if (has_base_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->base_rate(), output);
  }

  // optional int32 add_rate = 7 [default = 0];
  if (has_add_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->add_rate(), output);
  }

  // optional int32 ticket = 8 [default = 0];
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ticket(), output);
  }

  // optional bool getstar = 9 [default = false];
  if (has_getstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->getstar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_fishs_die::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_fishs_die];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 die_type = 3;
  if (has_die_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->die_type(), target);
  }

  // repeated int32 die_params = 4;
  for (int i = 0; i < this->die_params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->die_params(i), target);
  }

  // optional int32 total_score = 5;
  if (has_total_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total_score(), target);
  }

  // optional int32 base_rate = 6;
  if (has_base_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->base_rate(), target);
  }

  // optional int32 add_rate = 7 [default = 0];
  if (has_add_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->add_rate(), target);
  }

  // optional int32 ticket = 8 [default = 0];
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ticket(), target);
  }

  // optional bool getstar = 9 [default = false];
  if (has_getstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->getstar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_fishs_die::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_fishs_die];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 die_type = 3;
    if (has_die_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->die_type());
    }

    // optional int32 total_score = 5;
    if (has_total_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_score());
    }

    // optional int32 base_rate = 6;
    if (has_base_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_rate());
    }

    // optional int32 add_rate = 7 [default = 0];
    if (has_add_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_rate());
    }

    // optional int32 ticket = 8 [default = 0];
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ticket());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool getstar = 9 [default = false];
    if (has_getstar()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 die_params = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->die_params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->die_params(i));
    }
    total_size += 1 * this->die_params_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_fishs_die::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_fishs_die* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_fishs_die*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_fishs_die::MergeFrom(const packetl2c_bc_fishs_die& from) {
  GOOGLE_CHECK_NE(&from, this);
  die_params_.MergeFrom(from.die_params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_die_type()) {
      set_die_type(from.die_type());
    }
    if (from.has_total_score()) {
      set_total_score(from.total_score());
    }
    if (from.has_base_rate()) {
      set_base_rate(from.base_rate());
    }
    if (from.has_add_rate()) {
      set_add_rate(from.add_rate());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_getstar()) {
      set_getstar(from.getstar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_fishs_die::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_fishs_die::CopyFrom(const packetl2c_bc_fishs_die& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_fishs_die::IsInitialized() const {

  return true;
}

void packetl2c_bc_fishs_die::Swap(packetl2c_bc_fishs_die* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(die_type_, other->die_type_);
    die_params_.Swap(&other->die_params_);
    std::swap(total_score_, other->total_score_);
    std::swap(base_rate_, other->base_rate_);
    std::swap(add_rate_, other->add_rate_);
    std::swap(ticket_, other->ticket_);
    std::swap(getstar_, other->getstar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_fishs_die::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_fishs_die_descriptor_;
  metadata.reflection = packetl2c_bc_fishs_die_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_change_scene::kPacketIdFieldNumber;
const int packetl2c_bc_change_scene::kSceneIdFieldNumber;
const int packetl2c_bc_change_scene::kLargeFishIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_change_scene::packetl2c_bc_change_scene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_change_scene::InitAsDefaultInstance() {
}

packetl2c_bc_change_scene::packetl2c_bc_change_scene(const packetl2c_bc_change_scene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_change_scene::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15209;
  scene_id_ = 0;
  large_fish_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_change_scene::~packetl2c_bc_change_scene() {
  SharedDtor();
}

void packetl2c_bc_change_scene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_change_scene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_change_scene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_change_scene_descriptor_;
}

const packetl2c_bc_change_scene& packetl2c_bc_change_scene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_change_scene* packetl2c_bc_change_scene::default_instance_ = NULL;

packetl2c_bc_change_scene* packetl2c_bc_change_scene::New() const {
  return new packetl2c_bc_change_scene;
}

void packetl2c_bc_change_scene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15209;
    scene_id_ = 0;
    large_fish_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_change_scene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_scene];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // optional int32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_large_fish_id;
        break;
      }

      // optional int32 large_fish_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_large_fish_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &large_fish_id_)));
          set_has_large_fish_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_change_scene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_scene];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene_id(), output);
  }

  // optional int32 large_fish_id = 3;
  if (has_large_fish_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->large_fish_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_change_scene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_scene];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene_id(), target);
  }

  // optional int32 large_fish_id = 3;
  if (has_large_fish_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->large_fish_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_change_scene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_scene];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

    // optional int32 large_fish_id = 3;
    if (has_large_fish_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->large_fish_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_change_scene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_change_scene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_change_scene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_change_scene::MergeFrom(const packetl2c_bc_change_scene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_large_fish_id()) {
      set_large_fish_id(from.large_fish_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_change_scene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_change_scene::CopyFrom(const packetl2c_bc_change_scene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_change_scene::IsInitialized() const {

  return true;
}

void packetl2c_bc_change_scene::Swap(packetl2c_bc_change_scene* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(large_fish_id_, other->large_fish_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_change_scene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_change_scene_descriptor_;
  metadata.reflection = packetl2c_bc_change_scene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_addbuff::kPacketIdFieldNumber;
const int packetl2c_bc_addbuff::kBuffIdFieldNumber;
const int packetl2c_bc_addbuff::kPlayerIdFieldNumber;
const int packetl2c_bc_addbuff::kBuffTimeFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_addbuff::packetl2c_bc_addbuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_addbuff::InitAsDefaultInstance() {
}

packetl2c_bc_addbuff::packetl2c_bc_addbuff(const packetl2c_bc_addbuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_addbuff::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15213;
  buff_id_ = 0;
  player_id_ = 0;
  buff_time_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_addbuff::~packetl2c_bc_addbuff() {
  SharedDtor();
}

void packetl2c_bc_addbuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_addbuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_addbuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_addbuff_descriptor_;
}

const packetl2c_bc_addbuff& packetl2c_bc_addbuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_addbuff* packetl2c_bc_addbuff::default_instance_ = NULL;

packetl2c_bc_addbuff* packetl2c_bc_addbuff::New() const {
  return new packetl2c_bc_addbuff;
}

void packetl2c_bc_addbuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15213;
    buff_id_ = 0;
    player_id_ = 0;
    buff_time_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_addbuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_addbuff];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buff_id;
        break;
      }

      // optional int32 buff_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_id_)));
          set_has_buff_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buff_time;
        break;
      }

      // optional int32 buff_time = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_time_)));
          set_has_buff_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_addbuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_addbuff];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 buff_id = 2;
  if (has_buff_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buff_id(), output);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_id(), output);
  }

  // optional int32 buff_time = 4 [default = -1];
  if (has_buff_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buff_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_addbuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_addbuff];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 buff_id = 2;
  if (has_buff_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buff_id(), target);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_id(), target);
  }

  // optional int32 buff_time = 4 [default = -1];
  if (has_buff_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buff_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_addbuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_addbuff];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 buff_id = 2;
    if (has_buff_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_id());
    }

    // optional int32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 buff_time = 4 [default = -1];
    if (has_buff_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_addbuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_addbuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_addbuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_addbuff::MergeFrom(const packetl2c_bc_addbuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_buff_id()) {
      set_buff_id(from.buff_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_buff_time()) {
      set_buff_time(from.buff_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_addbuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_addbuff::CopyFrom(const packetl2c_bc_addbuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_addbuff::IsInitialized() const {

  return true;
}

void packetl2c_bc_addbuff::Swap(packetl2c_bc_addbuff* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(buff_id_, other->buff_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(buff_time_, other->buff_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_addbuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_addbuff_descriptor_;
  metadata.reflection = packetl2c_bc_addbuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_removebuff::kPacketIdFieldNumber;
const int packetl2c_bc_removebuff::kBuffIdFieldNumber;
const int packetl2c_bc_removebuff::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_removebuff::packetl2c_bc_removebuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_removebuff::InitAsDefaultInstance() {
}

packetl2c_bc_removebuff::packetl2c_bc_removebuff(const packetl2c_bc_removebuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_removebuff::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15214;
  buff_id_ = 0;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_removebuff::~packetl2c_bc_removebuff() {
  SharedDtor();
}

void packetl2c_bc_removebuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_removebuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_removebuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_removebuff_descriptor_;
}

const packetl2c_bc_removebuff& packetl2c_bc_removebuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_removebuff* packetl2c_bc_removebuff::default_instance_ = NULL;

packetl2c_bc_removebuff* packetl2c_bc_removebuff::New() const {
  return new packetl2c_bc_removebuff;
}

void packetl2c_bc_removebuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15214;
    buff_id_ = 0;
    player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_removebuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_removebuff];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buff_id;
        break;
      }

      // optional int32 buff_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_id_)));
          set_has_buff_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_removebuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_removebuff];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 buff_id = 2;
  if (has_buff_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buff_id(), output);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_removebuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_removebuff];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 buff_id = 2;
  if (has_buff_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buff_id(), target);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_removebuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_removebuff];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 buff_id = 2;
    if (has_buff_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_id());
    }

    // optional int32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_removebuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_removebuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_removebuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_removebuff::MergeFrom(const packetl2c_bc_removebuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_buff_id()) {
      set_buff_id(from.buff_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_removebuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_removebuff::CopyFrom(const packetl2c_bc_removebuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_removebuff::IsInitialized() const {

  return true;
}

void packetl2c_bc_removebuff::Swap(packetl2c_bc_removebuff* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(buff_id_, other->buff_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_removebuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_removebuff_descriptor_;
  metadata.reflection = packetl2c_bc_removebuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_changeturret::kPacketIdFieldNumber;
const int packetl2c_bc_changeturret::kTurretIdFieldNumber;
const int packetl2c_bc_changeturret::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_changeturret::packetl2c_bc_changeturret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_changeturret::InitAsDefaultInstance() {
}

packetl2c_bc_changeturret::packetl2c_bc_changeturret(const packetl2c_bc_changeturret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_changeturret::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15215;
  turret_id_ = 0;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_changeturret::~packetl2c_bc_changeturret() {
  SharedDtor();
}

void packetl2c_bc_changeturret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_changeturret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_changeturret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_changeturret_descriptor_;
}

const packetl2c_bc_changeturret& packetl2c_bc_changeturret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_changeturret* packetl2c_bc_changeturret::default_instance_ = NULL;

packetl2c_bc_changeturret* packetl2c_bc_changeturret::New() const {
  return new packetl2c_bc_changeturret;
}

void packetl2c_bc_changeturret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15215;
    turret_id_ = 0;
    player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_changeturret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_changeturret];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_turret_id;
        break;
      }

      // optional int32 turret_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turret_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turret_id_)));
          set_has_turret_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_changeturret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_changeturret];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 turret_id = 2;
  if (has_turret_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->turret_id(), output);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_changeturret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_changeturret];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 turret_id = 2;
  if (has_turret_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->turret_id(), target);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_changeturret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_changeturret];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 turret_id = 2;
    if (has_turret_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turret_id());
    }

    // optional int32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_changeturret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_changeturret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_changeturret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_changeturret::MergeFrom(const packetl2c_bc_changeturret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_turret_id()) {
      set_turret_id(from.turret_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_changeturret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_changeturret::CopyFrom(const packetl2c_bc_changeturret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_changeturret::IsInitialized() const {

  return true;
}

void packetl2c_bc_changeturret::Swap(packetl2c_bc_changeturret* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(turret_id_, other->turret_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_changeturret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_changeturret_descriptor_;
  metadata.reflection = packetl2c_bc_changeturret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_lock_fish::kPacketIdFieldNumber;
const int packetc2l_lock_fish::kFishIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_lock_fish::packetc2l_lock_fish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_lock_fish::InitAsDefaultInstance() {
}

packetc2l_lock_fish::packetc2l_lock_fish(const packetc2l_lock_fish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_lock_fish::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10109;
  fish_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_lock_fish::~packetc2l_lock_fish() {
  SharedDtor();
}

void packetc2l_lock_fish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_lock_fish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_lock_fish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_lock_fish_descriptor_;
}

const packetc2l_lock_fish& packetc2l_lock_fish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_lock_fish* packetc2l_lock_fish::default_instance_ = NULL;

packetc2l_lock_fish* packetc2l_lock_fish::New() const {
  return new packetc2l_lock_fish;
}

void packetc2l_lock_fish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10109;
    fish_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_lock_fish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_lock_fish];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fish_id;
        break;
      }

      // optional int32 fish_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fish_id_)));
          set_has_fish_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_lock_fish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_lock_fish];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 fish_id = 4;
  if (has_fish_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fish_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_lock_fish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_lock_fish];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 fish_id = 4;
  if (has_fish_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fish_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_lock_fish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_lock_fish];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 fish_id = 4;
    if (has_fish_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fish_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_lock_fish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_lock_fish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_lock_fish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_lock_fish::MergeFrom(const packetc2l_lock_fish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_fish_id()) {
      set_fish_id(from.fish_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_lock_fish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_lock_fish::CopyFrom(const packetc2l_lock_fish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_lock_fish::IsInitialized() const {

  return true;
}

void packetc2l_lock_fish::Swap(packetc2l_lock_fish* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(fish_id_, other->fish_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_lock_fish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_lock_fish_descriptor_;
  metadata.reflection = packetc2l_lock_fish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_lock_fish::kPacketIdFieldNumber;
const int packetl2c_bc_lock_fish::kPlayerIdFieldNumber;
const int packetl2c_bc_lock_fish::kFishIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_lock_fish::packetl2c_bc_lock_fish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_lock_fish::InitAsDefaultInstance() {
}

packetl2c_bc_lock_fish::packetl2c_bc_lock_fish(const packetl2c_bc_lock_fish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_lock_fish::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15216;
  player_id_ = 0;
  fish_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_lock_fish::~packetl2c_bc_lock_fish() {
  SharedDtor();
}

void packetl2c_bc_lock_fish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_lock_fish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_lock_fish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_lock_fish_descriptor_;
}

const packetl2c_bc_lock_fish& packetl2c_bc_lock_fish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_lock_fish* packetl2c_bc_lock_fish::default_instance_ = NULL;

packetl2c_bc_lock_fish* packetl2c_bc_lock_fish::New() const {
  return new packetl2c_bc_lock_fish;
}

void packetl2c_bc_lock_fish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15216;
    player_id_ = 0;
    fish_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_lock_fish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_lock_fish];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fish_id;
        break;
      }

      // optional int32 fish_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fish_id_)));
          set_has_fish_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_lock_fish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_lock_fish];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 fish_id = 3;
  if (has_fish_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fish_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_lock_fish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_lock_fish];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 fish_id = 3;
  if (has_fish_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fish_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_lock_fish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_lock_fish];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 fish_id = 3;
    if (has_fish_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fish_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_lock_fish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_lock_fish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_lock_fish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_lock_fish::MergeFrom(const packetl2c_bc_lock_fish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_fish_id()) {
      set_fish_id(from.fish_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_lock_fish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_lock_fish::CopyFrom(const packetl2c_bc_lock_fish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_lock_fish::IsInitialized() const {

  return true;
}

void packetl2c_bc_lock_fish::Swap(packetl2c_bc_lock_fish* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(fish_id_, other->fish_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_lock_fish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_lock_fish_descriptor_;
  metadata.reflection = packetl2c_bc_lock_fish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_freeze::kPacketIdFieldNumber;
const int packetl2c_bc_freeze::kFreezeTimeFieldNumber;
const int packetl2c_bc_freeze::kIsShowFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_freeze::packetl2c_bc_freeze()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_freeze::InitAsDefaultInstance() {
}

packetl2c_bc_freeze::packetl2c_bc_freeze(const packetl2c_bc_freeze& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_freeze::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15217;
  freeze_time_ = 0;
  is_show_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_freeze::~packetl2c_bc_freeze() {
  SharedDtor();
}

void packetl2c_bc_freeze::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_freeze::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_freeze::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_freeze_descriptor_;
}

const packetl2c_bc_freeze& packetl2c_bc_freeze::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_freeze* packetl2c_bc_freeze::default_instance_ = NULL;

packetl2c_bc_freeze* packetl2c_bc_freeze::New() const {
  return new packetl2c_bc_freeze;
}

void packetl2c_bc_freeze::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15217;
    freeze_time_ = 0;
    is_show_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_freeze::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_freeze];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_freeze_Time;
        break;
      }

      // optional int32 freeze_Time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeze_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freeze_time_)));
          set_has_freeze_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_show;
        break;
      }

      // optional bool is_show = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_show_)));
          set_has_is_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_freeze::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_freeze];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 freeze_Time = 2;
  if (has_freeze_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->freeze_time(), output);
  }

  // optional bool is_show = 3;
  if (has_is_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_show(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_freeze::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_freeze];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 freeze_Time = 2;
  if (has_freeze_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->freeze_time(), target);
  }

  // optional bool is_show = 3;
  if (has_is_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_show(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_freeze::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_freeze];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 freeze_Time = 2;
    if (has_freeze_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freeze_time());
    }

    // optional bool is_show = 3;
    if (has_is_show()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_freeze::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_freeze* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_freeze*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_freeze::MergeFrom(const packetl2c_bc_freeze& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_freeze_time()) {
      set_freeze_time(from.freeze_time());
    }
    if (from.has_is_show()) {
      set_is_show(from.is_show());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_freeze::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_freeze::CopyFrom(const packetl2c_bc_freeze& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_freeze::IsInitialized() const {

  return true;
}

void packetl2c_bc_freeze::Swap(packetl2c_bc_freeze* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(freeze_time_, other->freeze_time_);
    std::swap(is_show_, other->is_show_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_freeze::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_freeze_descriptor_;
  metadata.reflection = packetl2c_bc_freeze_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_change_scene_bg::kPacketIdFieldNumber;
const int packetl2c_bc_change_scene_bg::kSceneIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_change_scene_bg::packetl2c_bc_change_scene_bg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_change_scene_bg::InitAsDefaultInstance() {
}

packetl2c_bc_change_scene_bg::packetl2c_bc_change_scene_bg(const packetl2c_bc_change_scene_bg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_change_scene_bg::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15220;
  scene_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_change_scene_bg::~packetl2c_bc_change_scene_bg() {
  SharedDtor();
}

void packetl2c_bc_change_scene_bg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_change_scene_bg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_change_scene_bg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_change_scene_bg_descriptor_;
}

const packetl2c_bc_change_scene_bg& packetl2c_bc_change_scene_bg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_change_scene_bg* packetl2c_bc_change_scene_bg::default_instance_ = NULL;

packetl2c_bc_change_scene_bg* packetl2c_bc_change_scene_bg::New() const {
  return new packetl2c_bc_change_scene_bg;
}

void packetl2c_bc_change_scene_bg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15220;
    scene_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_change_scene_bg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_scene_bg];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // optional int32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_change_scene_bg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_scene_bg];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_change_scene_bg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_scene_bg];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_change_scene_bg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_scene_bg];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_change_scene_bg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_change_scene_bg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_change_scene_bg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_change_scene_bg::MergeFrom(const packetl2c_bc_change_scene_bg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_change_scene_bg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_change_scene_bg::CopyFrom(const packetl2c_bc_change_scene_bg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_change_scene_bg::IsInitialized() const {

  return true;
}

void packetl2c_bc_change_scene_bg::Swap(packetl2c_bc_change_scene_bg* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_change_scene_bg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_change_scene_bg_descriptor_;
  metadata.reflection = packetl2c_bc_change_scene_bg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_scene_time::kPacketIdFieldNumber;
const int packetl2c_bc_scene_time::kSceneTimeFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_scene_time::packetl2c_bc_scene_time()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_scene_time::InitAsDefaultInstance() {
}

packetl2c_bc_scene_time::packetl2c_bc_scene_time(const packetl2c_bc_scene_time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_scene_time::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15221;
  scene_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_scene_time::~packetl2c_bc_scene_time() {
  SharedDtor();
}

void packetl2c_bc_scene_time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_scene_time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_scene_time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_scene_time_descriptor_;
}

const packetl2c_bc_scene_time& packetl2c_bc_scene_time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_scene_time* packetl2c_bc_scene_time::default_instance_ = NULL;

packetl2c_bc_scene_time* packetl2c_bc_scene_time::New() const {
  return new packetl2c_bc_scene_time;
}

void packetl2c_bc_scene_time::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15221;
    scene_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_scene_time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_time];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_time;
        break;
      }

      // optional int32 scene_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_time_)));
          set_has_scene_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_scene_time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_time];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 scene_time = 2;
  if (has_scene_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_scene_time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_time];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 scene_time = 2;
  if (has_scene_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_scene_time::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_time];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 scene_time = 2;
    if (has_scene_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_scene_time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_scene_time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_scene_time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_scene_time::MergeFrom(const packetl2c_bc_scene_time& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_scene_time()) {
      set_scene_time(from.scene_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_scene_time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_scene_time::CopyFrom(const packetl2c_bc_scene_time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_scene_time::IsInitialized() const {

  return true;
}

void packetl2c_bc_scene_time::Swap(packetl2c_bc_scene_time* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(scene_time_, other->scene_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_scene_time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_scene_time_descriptor_;
  metadata.reflection = packetl2c_bc_scene_time_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_hit_fishs::kPacketIdFieldNumber;
const int packetl2c_bc_hit_fishs::kPlayerIdFieldNumber;
const int packetl2c_bc_hit_fishs::kHitTypeFieldNumber;
const int packetl2c_bc_hit_fishs::kFishIdsFieldNumber;
const int packetl2c_bc_hit_fishs::kParamsFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_hit_fishs::packetl2c_bc_hit_fishs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_hit_fishs::InitAsDefaultInstance() {
}

packetl2c_bc_hit_fishs::packetl2c_bc_hit_fishs(const packetl2c_bc_hit_fishs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_hit_fishs::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15223;
  player_id_ = 0;
  hit_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_hit_fishs::~packetl2c_bc_hit_fishs() {
  SharedDtor();
}

void packetl2c_bc_hit_fishs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_hit_fishs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_hit_fishs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_hit_fishs_descriptor_;
}

const packetl2c_bc_hit_fishs& packetl2c_bc_hit_fishs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_hit_fishs* packetl2c_bc_hit_fishs::default_instance_ = NULL;

packetl2c_bc_hit_fishs* packetl2c_bc_hit_fishs::New() const {
  return new packetl2c_bc_hit_fishs;
}

void packetl2c_bc_hit_fishs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15223;
    player_id_ = 0;
    hit_type_ = 0;
  }
  fish_ids_.Clear();
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_hit_fishs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_hit_fishs];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hit_type;
        break;
      }

      // optional int32 hit_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_type_)));
          set_has_hit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fish_ids;
        break;
      }

      // repeated int32 fish_ids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_fish_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fish_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fish_ids;
        if (input->ExpectTag(40)) goto parse_params;
        break;
      }

      // repeated int32 params = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_params())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_params())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_hit_fishs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_hit_fishs];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 hit_type = 3;
  if (has_hit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hit_type(), output);
  }

  // repeated int32 fish_ids = 4;
  for (int i = 0; i < this->fish_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->fish_ids(i), output);
  }

  // repeated int32 params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_hit_fishs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_hit_fishs];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 hit_type = 3;
  if (has_hit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hit_type(), target);
  }

  // repeated int32 fish_ids = 4;
  for (int i = 0; i < this->fish_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->fish_ids(i), target);
  }

  // repeated int32 params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_hit_fishs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_hit_fishs];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 hit_type = 3;
    if (has_hit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit_type());
    }

  }
  // repeated int32 fish_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->fish_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fish_ids(i));
    }
    total_size += 1 * this->fish_ids_size() + data_size;
  }

  // repeated int32 params = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->params(i));
    }
    total_size += 1 * this->params_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_hit_fishs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_hit_fishs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_hit_fishs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_hit_fishs::MergeFrom(const packetl2c_bc_hit_fishs& from) {
  GOOGLE_CHECK_NE(&from, this);
  fish_ids_.MergeFrom(from.fish_ids_);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_hit_type()) {
      set_hit_type(from.hit_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_hit_fishs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_hit_fishs::CopyFrom(const packetl2c_bc_hit_fishs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_hit_fishs::IsInitialized() const {

  return true;
}

void packetl2c_bc_hit_fishs::Swap(packetl2c_bc_hit_fishs* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(hit_type_, other->hit_type_);
    fish_ids_.Swap(&other->fish_ids_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_hit_fishs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_hit_fishs_descriptor_;
  metadata.reflection = packetl2c_bc_hit_fishs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_turret_rotate::kPacketIdFieldNumber;
const int packetl2c_bc_turret_rotate::kPlayerIdFieldNumber;
const int packetl2c_bc_turret_rotate::kRotateAngleFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_turret_rotate::packetl2c_bc_turret_rotate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_turret_rotate::InitAsDefaultInstance() {
}

packetl2c_bc_turret_rotate::packetl2c_bc_turret_rotate(const packetl2c_bc_turret_rotate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_turret_rotate::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15224;
  player_id_ = 0;
  rotate_angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_turret_rotate::~packetl2c_bc_turret_rotate() {
  SharedDtor();
}

void packetl2c_bc_turret_rotate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_turret_rotate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_turret_rotate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_turret_rotate_descriptor_;
}

const packetl2c_bc_turret_rotate& packetl2c_bc_turret_rotate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_turret_rotate* packetl2c_bc_turret_rotate::default_instance_ = NULL;

packetl2c_bc_turret_rotate* packetl2c_bc_turret_rotate::New() const {
  return new packetl2c_bc_turret_rotate;
}

void packetl2c_bc_turret_rotate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15224;
    player_id_ = 0;
    rotate_angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_turret_rotate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_turret_rotate];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rotate_angle;
        break;
      }

      // optional int32 rotate_angle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rotate_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rotate_angle_)));
          set_has_rotate_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_turret_rotate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_turret_rotate];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 rotate_angle = 3;
  if (has_rotate_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rotate_angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_turret_rotate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_turret_rotate];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 rotate_angle = 3;
  if (has_rotate_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rotate_angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_turret_rotate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_turret_rotate];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 rotate_angle = 3;
    if (has_rotate_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rotate_angle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_turret_rotate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_turret_rotate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_turret_rotate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_turret_rotate::MergeFrom(const packetl2c_bc_turret_rotate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_rotate_angle()) {
      set_rotate_angle(from.rotate_angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_turret_rotate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_turret_rotate::CopyFrom(const packetl2c_bc_turret_rotate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_turret_rotate::IsInitialized() const {

  return true;
}

void packetl2c_bc_turret_rotate::Swap(packetl2c_bc_turret_rotate* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(rotate_angle_, other->rotate_angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_turret_rotate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_turret_rotate_descriptor_;
  metadata.reflection = packetl2c_bc_turret_rotate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_change_max_power::kPacketIdFieldNumber;
const int packetl2c_bc_change_max_power::kPlayerIdFieldNumber;
const int packetl2c_bc_change_max_power::kMaxPowerFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_change_max_power::packetl2c_bc_change_max_power()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_change_max_power::InitAsDefaultInstance() {
}

packetl2c_bc_change_max_power::packetl2c_bc_change_max_power(const packetl2c_bc_change_max_power& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_change_max_power::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15225;
  player_id_ = 0;
  max_power_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_change_max_power::~packetl2c_bc_change_max_power() {
  SharedDtor();
}

void packetl2c_bc_change_max_power::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_change_max_power::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_change_max_power::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_change_max_power_descriptor_;
}

const packetl2c_bc_change_max_power& packetl2c_bc_change_max_power::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_change_max_power* packetl2c_bc_change_max_power::default_instance_ = NULL;

packetl2c_bc_change_max_power* packetl2c_bc_change_max_power::New() const {
  return new packetl2c_bc_change_max_power;
}

void packetl2c_bc_change_max_power::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15225;
    player_id_ = 0;
    max_power_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_change_max_power::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_max_power];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_power;
        break;
      }

      // optional int32 max_power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_power_)));
          set_has_max_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_change_max_power::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_max_power];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 max_power = 3;
  if (has_max_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_change_max_power::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_max_power];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 max_power = 3;
  if (has_max_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_change_max_power::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_max_power];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 max_power = 3;
    if (has_max_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_change_max_power::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_change_max_power* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_change_max_power*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_change_max_power::MergeFrom(const packetl2c_bc_change_max_power& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_max_power()) {
      set_max_power(from.max_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_change_max_power::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_change_max_power::CopyFrom(const packetl2c_bc_change_max_power& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_change_max_power::IsInitialized() const {

  return true;
}

void packetl2c_bc_change_max_power::Swap(packetl2c_bc_change_max_power* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(max_power_, other->max_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_change_max_power::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_change_max_power_descriptor_;
  metadata.reflection = packetl2c_bc_change_max_power_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_debuginfo::kPacketIdFieldNumber;
const int packetl2c_bc_debuginfo::kPlayerIdFieldNumber;
const int packetl2c_bc_debuginfo::kTotalProfitFieldNumber;
const int packetl2c_bc_debuginfo::kTotalStockFieldNumber;
const int packetl2c_bc_debuginfo::kDebugInfosFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_debuginfo::packetl2c_bc_debuginfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_debuginfo::InitAsDefaultInstance() {
}

packetl2c_bc_debuginfo::packetl2c_bc_debuginfo(const packetl2c_bc_debuginfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_debuginfo::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15227;
  player_id_ = 0;
  total_profit_ = GOOGLE_LONGLONG(0);
  total_stock_ = GOOGLE_LONGLONG(0);
  debug_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_debuginfo::~packetl2c_bc_debuginfo() {
  SharedDtor();
}

void packetl2c_bc_debuginfo::SharedDtor() {
  if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_infos_;
  }
  if (this != default_instance_) {
  }
}

void packetl2c_bc_debuginfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_debuginfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_debuginfo_descriptor_;
}

const packetl2c_bc_debuginfo& packetl2c_bc_debuginfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_debuginfo* packetl2c_bc_debuginfo::default_instance_ = NULL;

packetl2c_bc_debuginfo* packetl2c_bc_debuginfo::New() const {
  return new packetl2c_bc_debuginfo;
}

void packetl2c_bc_debuginfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15227;
    player_id_ = 0;
    total_profit_ = GOOGLE_LONGLONG(0);
    total_stock_ = GOOGLE_LONGLONG(0);
    if (has_debug_infos()) {
      if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
        debug_infos_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_debuginfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fish_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::fish_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_profit;
        break;
      }

      // optional int64 total_profit = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_profit_)));
          set_has_total_profit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_stock;
        break;
      }

      // optional int64 total_stock = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_stock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_stock_)));
          set_has_total_stock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_debug_infos;
        break;
      }

      // optional string debug_infos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_infos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_infos().data(), this->debug_infos().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_debuginfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int64 total_profit = 3 [default = 0];
  if (has_total_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->total_profit(), output);
  }

  // optional int64 total_stock = 4 [default = 0];
  if (has_total_stock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_stock(), output);
  }

  // optional string debug_infos = 5;
  if (has_debug_infos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_infos().data(), this->debug_infos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->debug_infos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_debuginfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int64 total_profit = 3 [default = 0];
  if (has_total_profit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->total_profit(), target);
  }

  // optional int64 total_stock = 4 [default = 0];
  if (has_total_stock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->total_stock(), target);
  }

  // optional string debug_infos = 5;
  if (has_debug_infos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_infos().data(), this->debug_infos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->debug_infos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_debuginfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int64 total_profit = 3 [default = 0];
    if (has_total_profit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_profit());
    }

    // optional int64 total_stock = 4 [default = 0];
    if (has_total_stock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_stock());
    }

    // optional string debug_infos = 5;
    if (has_debug_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_infos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_debuginfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_debuginfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_debuginfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_debuginfo::MergeFrom(const packetl2c_bc_debuginfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_total_profit()) {
      set_total_profit(from.total_profit());
    }
    if (from.has_total_stock()) {
      set_total_stock(from.total_stock());
    }
    if (from.has_debug_infos()) {
      set_debug_infos(from.debug_infos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_debuginfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_debuginfo::CopyFrom(const packetl2c_bc_debuginfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_debuginfo::IsInitialized() const {

  return true;
}

void packetl2c_bc_debuginfo::Swap(packetl2c_bc_debuginfo* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(total_profit_, other->total_profit_);
    std::swap(total_stock_, other->total_stock_);
    std::swap(debug_infos_, other->debug_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_debuginfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_debuginfo_descriptor_;
  metadata.reflection = packetl2c_bc_debuginfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fish_protocols

// @@protoc_insertion_point(global_scope)
