// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_texaspoker_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_texaspoker_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game_texaspoker_protocols {

namespace {

const ::google::protobuf::Descriptor* msg_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_get_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_room_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_room_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_join_table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_join_table_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_join_table_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_join_table_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_leave_table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_leave_table_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_leave_table_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_leave_table_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerBetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerBetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_game_event_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_game_event_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_get_table_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_table_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* PokerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PokerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_table_scene_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_table_scene_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_req_declare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_req_declare_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_req_declare_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_req_declare_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_game_start_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_game_start_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_game_wait_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_game_wait_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* BalancePlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BalancePlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_game_end_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_game_end_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_req_sitdown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_req_sitdown_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_req_sitdown_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_req_sitdown_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_req_supply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_req_supply_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_req_supply_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_req_supply_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_req_chip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_req_chip_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_req_chip_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_req_chip_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_buy_chip_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_buy_chip_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_show_poker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_show_poker_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_show_poker_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_show_poker_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_req_standup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_req_standup_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_req_standup_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_req_standup_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_check_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_check_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_check_state_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_check_state_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto() {
  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_texaspoker_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  msg_room_info_descriptor_ = file->message_type(0);
  static const int msg_room_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_info, roomid_),
  };
  msg_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_room_info_descriptor_,
      msg_room_info::default_instance_,
      msg_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_room_info));
  packetc2l_get_room_info_descriptor_ = file->message_type(1);
  static const int packetc2l_get_room_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, packet_id_),
  };
  packetc2l_get_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_room_info_descriptor_,
      packetc2l_get_room_info::default_instance_,
      packetc2l_get_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_room_info));
  packetl2c_get_room_info_result_descriptor_ = file->message_type(2);
  static const int packetl2c_get_room_info_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, room_list_),
  };
  packetl2c_get_room_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_room_info_result_descriptor_,
      packetl2c_get_room_info_result::default_instance_,
      packetl2c_get_room_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_room_info_result));
  packetc2l_join_table_descriptor_ = file->message_type(3);
  static const int packetc2l_join_table_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_join_table, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_join_table, roomid_),
  };
  packetc2l_join_table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_join_table_descriptor_,
      packetc2l_join_table::default_instance_,
      packetc2l_join_table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_join_table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_join_table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_join_table));
  packetl2c_join_table_result_descriptor_ = file->message_type(4);
  static const int packetl2c_join_table_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_join_table_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_join_table_result, result_),
  };
  packetl2c_join_table_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_join_table_result_descriptor_,
      packetl2c_join_table_result::default_instance_,
      packetl2c_join_table_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_join_table_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_join_table_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_join_table_result));
  packetc2l_leave_table_descriptor_ = file->message_type(5);
  static const int packetc2l_leave_table_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_table, packet_id_),
  };
  packetc2l_leave_table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_leave_table_descriptor_,
      packetc2l_leave_table::default_instance_,
      packetc2l_leave_table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_leave_table));
  packetl2c_leave_table_result_descriptor_ = file->message_type(6);
  static const int packetl2c_leave_table_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_table_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_table_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_table_result, playergold_),
  };
  packetl2c_leave_table_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_leave_table_result_descriptor_,
      packetl2c_leave_table_result::default_instance_,
      packetl2c_leave_table_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_table_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_table_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_leave_table_result));
  PlayerInfo_descriptor_ = file->message_type(7);
  static const int PlayerInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, curchip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, hasbet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, hasbetcur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, declareresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, headframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, headcustom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, supply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, supply_done_),
  };
  PlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::default_instance_,
      PlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfo));
  PlayerBetInfo_descriptor_ = file->message_type(8);
  static const int PlayerBetInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBetInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBetInfo, hasbet_),
  };
  PlayerBetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerBetInfo_descriptor_,
      PlayerBetInfo::default_instance_,
      PlayerBetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerBetInfo));
  packetl2c_game_event_notify_descriptor_ = file->message_type(9);
  static const int packetl2c_game_event_notify_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_event_notify, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_event_notify, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_event_notify, playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_event_notify, commonpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_event_notify, currewardpool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_event_notify, addbetbasevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_event_notify, curbet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_event_notify, playerbetinfo_),
  };
  packetl2c_game_event_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_game_event_notify_descriptor_,
      packetl2c_game_event_notify::default_instance_,
      packetl2c_game_event_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_event_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_event_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_game_event_notify));
  packetc2l_get_table_scene_info_descriptor_ = file->message_type(10);
  static const int packetc2l_get_table_scene_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_table_scene_info, packet_id_),
  };
  packetc2l_get_table_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_table_scene_info_descriptor_,
      packetc2l_get_table_scene_info::default_instance_,
      packetc2l_get_table_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_table_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_table_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_table_scene_info));
  PokerInfo_descriptor_ = file->message_type(11);
  static const int PokerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerInfo, flower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerInfo, value_),
  };
  PokerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PokerInfo_descriptor_,
      PokerInfo::default_instance_,
      PokerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PokerInfo));
  packetl2c_get_table_scene_info_result_descriptor_ = file->message_type(12);
  static const int packetl2c_get_table_scene_info_result_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, gamestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, playerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, commonpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, backpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, smallblindbet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, fullblindbet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, waitdeclaretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, currewardpool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, addbetbasevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, curbet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, playerbetinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, gameinfo_),
  };
  packetl2c_get_table_scene_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_table_scene_info_result_descriptor_,
      packetl2c_get_table_scene_info_result::default_instance_,
      packetl2c_get_table_scene_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_table_scene_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_table_scene_info_result));
  packetc2l_req_declare_descriptor_ = file->message_type(13);
  static const int packetc2l_req_declare_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_declare, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_declare, declaresel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_declare, param_),
  };
  packetc2l_req_declare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_req_declare_descriptor_,
      packetc2l_req_declare::default_instance_,
      packetc2l_req_declare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_declare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_declare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_req_declare));
  packetl2c_req_declare_result_descriptor_ = file->message_type(14);
  static const int packetl2c_req_declare_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_declare_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_declare_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_declare_result, curchip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_declare_result, hasbet_),
  };
  packetl2c_req_declare_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_req_declare_result_descriptor_,
      packetl2c_req_declare_result::default_instance_,
      packetl2c_req_declare_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_declare_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_declare_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_req_declare_result));
  GameInfo_descriptor_ = file->message_type(15);
  static const int GameInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, bankerseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, smallblindseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, bigblindseat_),
  };
  GameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameInfo_descriptor_,
      GameInfo::default_instance_,
      GameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameInfo));
  packetl2c_game_start_notify_descriptor_ = file->message_type(16);
  static const int packetl2c_game_start_notify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start_notify, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start_notify, gameinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start_notify, playerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start_notify, backpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start_notify, currewardpool_),
  };
  packetl2c_game_start_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_game_start_notify_descriptor_,
      packetl2c_game_start_notify::default_instance_,
      packetl2c_game_start_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_game_start_notify));
  packetl2c_game_wait_notify_descriptor_ = file->message_type(17);
  static const int packetl2c_game_wait_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_wait_notify, packet_id_),
  };
  packetl2c_game_wait_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_game_wait_notify_descriptor_,
      packetl2c_game_wait_notify::default_instance_,
      packetl2c_game_wait_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_wait_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_wait_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_game_wait_notify));
  BalancePlayerInfo_descriptor_ = file->message_type(18);
  static const int BalancePlayerInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalancePlayerInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalancePlayerInfo, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalancePlayerInfo, backpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalancePlayerInfo, selpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalancePlayerInfo, pokertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalancePlayerInfo, winreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalancePlayerInfo, isabandon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalancePlayerInfo, iswinner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalancePlayerInfo, isshowpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalancePlayerInfo, rank_),
  };
  BalancePlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BalancePlayerInfo_descriptor_,
      BalancePlayerInfo::default_instance_,
      BalancePlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalancePlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalancePlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BalancePlayerInfo));
  packetl2c_game_end_notify_descriptor_ = file->message_type(19);
  static const int packetl2c_game_end_notify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end_notify, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end_notify, currewardpool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end_notify, playerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end_notify, isallabandon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end_notify, commonpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end_notify, playerbetinfo_),
  };
  packetl2c_game_end_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_game_end_notify_descriptor_,
      packetl2c_game_end_notify::default_instance_,
      packetl2c_game_end_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_game_end_notify));
  packetc2l_req_sitdown_descriptor_ = file->message_type(20);
  static const int packetc2l_req_sitdown_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_sitdown, packet_id_),
  };
  packetc2l_req_sitdown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_req_sitdown_descriptor_,
      packetc2l_req_sitdown::default_instance_,
      packetc2l_req_sitdown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_sitdown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_sitdown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_req_sitdown));
  packetl2c_req_sitdown_result_descriptor_ = file->message_type(21);
  static const int packetl2c_req_sitdown_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_sitdown_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_sitdown_result, result_),
  };
  packetl2c_req_sitdown_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_req_sitdown_result_descriptor_,
      packetl2c_req_sitdown_result::default_instance_,
      packetl2c_req_sitdown_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_sitdown_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_sitdown_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_req_sitdown_result));
  packetc2l_req_supply_descriptor_ = file->message_type(22);
  static const int packetc2l_req_supply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_supply, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_supply, auto__),
  };
  packetc2l_req_supply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_req_supply_descriptor_,
      packetc2l_req_supply::default_instance_,
      packetc2l_req_supply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_supply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_supply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_req_supply));
  packetl2c_req_supply_result_descriptor_ = file->message_type(23);
  static const int packetl2c_req_supply_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_supply_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_supply_result, auto__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_supply_result, result_),
  };
  packetl2c_req_supply_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_req_supply_result_descriptor_,
      packetl2c_req_supply_result::default_instance_,
      packetl2c_req_supply_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_supply_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_supply_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_req_supply_result));
  packetc2l_req_chip_descriptor_ = file->message_type(24);
  static const int packetc2l_req_chip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_chip, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_chip, chip_),
  };
  packetc2l_req_chip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_req_chip_descriptor_,
      packetc2l_req_chip::default_instance_,
      packetc2l_req_chip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_chip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_chip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_req_chip));
  packetl2c_req_chip_result_descriptor_ = file->message_type(25);
  static const int packetl2c_req_chip_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_chip_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_chip_result, result_),
  };
  packetl2c_req_chip_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_req_chip_result_descriptor_,
      packetl2c_req_chip_result::default_instance_,
      packetl2c_req_chip_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_chip_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_chip_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_req_chip_result));
  packetl2c_buy_chip_notify_descriptor_ = file->message_type(26);
  static const int packetl2c_buy_chip_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_buy_chip_notify, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_buy_chip_notify, playerlist_),
  };
  packetl2c_buy_chip_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_buy_chip_notify_descriptor_,
      packetl2c_buy_chip_notify::default_instance_,
      packetl2c_buy_chip_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_buy_chip_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_buy_chip_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_buy_chip_notify));
  packetc2l_show_poker_descriptor_ = file->message_type(27);
  static const int packetc2l_show_poker_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_show_poker, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_show_poker, isshow_),
  };
  packetc2l_show_poker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_show_poker_descriptor_,
      packetc2l_show_poker::default_instance_,
      packetc2l_show_poker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_show_poker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_show_poker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_show_poker));
  packetl2c_show_poker_result_descriptor_ = file->message_type(28);
  static const int packetl2c_show_poker_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_show_poker_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_show_poker_result, result_),
  };
  packetl2c_show_poker_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_show_poker_result_descriptor_,
      packetl2c_show_poker_result::default_instance_,
      packetl2c_show_poker_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_show_poker_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_show_poker_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_show_poker_result));
  packetc2l_req_standup_descriptor_ = file->message_type(29);
  static const int packetc2l_req_standup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_standup, packet_id_),
  };
  packetc2l_req_standup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_req_standup_descriptor_,
      packetc2l_req_standup::default_instance_,
      packetc2l_req_standup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_standup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_standup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_req_standup));
  packetl2c_req_standup_result_descriptor_ = file->message_type(30);
  static const int packetl2c_req_standup_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_standup_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_standup_result, result_),
  };
  packetl2c_req_standup_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_req_standup_result_descriptor_,
      packetl2c_req_standup_result::default_instance_,
      packetl2c_req_standup_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_standup_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_standup_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_req_standup_result));
  packetc2l_check_state_descriptor_ = file->message_type(31);
  static const int packetc2l_check_state_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, packet_id_),
  };
  packetc2l_check_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_check_state_descriptor_,
      packetc2l_check_state::default_instance_,
      packetc2l_check_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_check_state));
  packetl2c_check_state_result_descriptor_ = file->message_type(32);
  static const int packetl2c_check_state_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, is_intable_),
  };
  packetl2c_check_state_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_check_state_result_descriptor_,
      packetl2c_check_state_result::default_instance_,
      packetl2c_check_state_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_check_state_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_room_info_descriptor_, &msg_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_room_info_descriptor_, &packetc2l_get_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_room_info_result_descriptor_, &packetl2c_get_room_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_join_table_descriptor_, &packetc2l_join_table::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_join_table_result_descriptor_, &packetl2c_join_table_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_leave_table_descriptor_, &packetc2l_leave_table::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_leave_table_result_descriptor_, &packetl2c_leave_table_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfo_descriptor_, &PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerBetInfo_descriptor_, &PlayerBetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_game_event_notify_descriptor_, &packetl2c_game_event_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_table_scene_info_descriptor_, &packetc2l_get_table_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PokerInfo_descriptor_, &PokerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_table_scene_info_result_descriptor_, &packetl2c_get_table_scene_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_req_declare_descriptor_, &packetc2l_req_declare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_req_declare_result_descriptor_, &packetl2c_req_declare_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameInfo_descriptor_, &GameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_game_start_notify_descriptor_, &packetl2c_game_start_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_game_wait_notify_descriptor_, &packetl2c_game_wait_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BalancePlayerInfo_descriptor_, &BalancePlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_game_end_notify_descriptor_, &packetl2c_game_end_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_req_sitdown_descriptor_, &packetc2l_req_sitdown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_req_sitdown_result_descriptor_, &packetl2c_req_sitdown_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_req_supply_descriptor_, &packetc2l_req_supply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_req_supply_result_descriptor_, &packetl2c_req_supply_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_req_chip_descriptor_, &packetc2l_req_chip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_req_chip_result_descriptor_, &packetl2c_req_chip_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_buy_chip_notify_descriptor_, &packetl2c_buy_chip_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_show_poker_descriptor_, &packetc2l_show_poker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_show_poker_result_descriptor_, &packetl2c_show_poker_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_req_standup_descriptor_, &packetc2l_req_standup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_req_standup_result_descriptor_, &packetl2c_req_standup_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_check_state_descriptor_, &packetc2l_check_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_check_state_result_descriptor_, &packetl2c_check_state_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto() {
  delete msg_room_info::default_instance_;
  delete msg_room_info_reflection_;
  delete packetc2l_get_room_info::default_instance_;
  delete packetc2l_get_room_info_reflection_;
  delete packetl2c_get_room_info_result::default_instance_;
  delete packetl2c_get_room_info_result_reflection_;
  delete packetc2l_join_table::default_instance_;
  delete packetc2l_join_table_reflection_;
  delete packetl2c_join_table_result::default_instance_;
  delete packetl2c_join_table_result_reflection_;
  delete packetc2l_leave_table::default_instance_;
  delete packetc2l_leave_table_reflection_;
  delete packetl2c_leave_table_result::default_instance_;
  delete packetl2c_leave_table_result_reflection_;
  delete PlayerInfo::default_instance_;
  delete PlayerInfo_reflection_;
  delete PlayerBetInfo::default_instance_;
  delete PlayerBetInfo_reflection_;
  delete packetl2c_game_event_notify::default_instance_;
  delete packetl2c_game_event_notify_reflection_;
  delete packetc2l_get_table_scene_info::default_instance_;
  delete packetc2l_get_table_scene_info_reflection_;
  delete PokerInfo::default_instance_;
  delete PokerInfo_reflection_;
  delete packetl2c_get_table_scene_info_result::default_instance_;
  delete packetl2c_get_table_scene_info_result_reflection_;
  delete packetc2l_req_declare::default_instance_;
  delete packetc2l_req_declare_reflection_;
  delete packetl2c_req_declare_result::default_instance_;
  delete packetl2c_req_declare_result_reflection_;
  delete GameInfo::default_instance_;
  delete GameInfo_reflection_;
  delete packetl2c_game_start_notify::default_instance_;
  delete packetl2c_game_start_notify_reflection_;
  delete packetl2c_game_wait_notify::default_instance_;
  delete packetl2c_game_wait_notify_reflection_;
  delete BalancePlayerInfo::default_instance_;
  delete BalancePlayerInfo_reflection_;
  delete packetl2c_game_end_notify::default_instance_;
  delete packetl2c_game_end_notify_reflection_;
  delete packetc2l_req_sitdown::default_instance_;
  delete packetc2l_req_sitdown_reflection_;
  delete packetl2c_req_sitdown_result::default_instance_;
  delete packetl2c_req_sitdown_result_reflection_;
  delete packetc2l_req_supply::default_instance_;
  delete packetc2l_req_supply_reflection_;
  delete packetl2c_req_supply_result::default_instance_;
  delete packetl2c_req_supply_result_reflection_;
  delete packetc2l_req_chip::default_instance_;
  delete packetc2l_req_chip_reflection_;
  delete packetl2c_req_chip_result::default_instance_;
  delete packetl2c_req_chip_result_reflection_;
  delete packetl2c_buy_chip_notify::default_instance_;
  delete packetl2c_buy_chip_notify_reflection_;
  delete packetc2l_show_poker::default_instance_;
  delete packetc2l_show_poker_reflection_;
  delete packetl2c_show_poker_result::default_instance_;
  delete packetl2c_show_poker_result_reflection_;
  delete packetc2l_req_standup::default_instance_;
  delete packetc2l_req_standup_reflection_;
  delete packetl2c_req_standup_result::default_instance_;
  delete packetl2c_req_standup_result_reflection_;
  delete packetc2l_check_state::default_instance_;
  delete packetc2l_check_state_reflection_;
  delete packetl2c_check_state_result::default_instance_;
  delete packetl2c_check_state_result_reflection_;
}

void protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::game_texaspoker_protocols::protobuf_AddDesc_game_5ftexaspoker_5fdef_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036game_texaspoker_protocol.proto\022\031game_t"
    "exaspoker_protocols\032\031game_texaspoker_def"
    ".proto\032\022msg_type_def.proto\"\037\n\rmsg_room_i"
    "nfo\022\016\n\006roomid\030\001 \001(\005\"s\n\027packetc2l_get_roo"
    "m_info\022X\n\tpacket_id\030\001 \001(\0162,.game_texaspo"
    "ker_protocols.e_server_msg_type:\027e_mst_c"
    "2l_get_room_info\"\276\001\n\036packetl2c_get_room_"
    "info_result\022_\n\tpacket_id\030\001 \001(\0162,.game_te"
    "xaspoker_protocols.e_server_msg_type:\036e_"
    "mst_l2c_get_room_info_result\022;\n\troom_lis"
    "t\030\002 \003(\0132(.game_texaspoker_protocols.msg_"
    "room_info\"}\n\024packetc2l_join_table\022U\n\tpac"
    "ket_id\030\001 \001(\0162,.game_texaspoker_protocols"
    ".e_server_msg_type:\024e_mst_c2l_join_table"
    "\022\016\n\006roomId\030\002 \001(\005\"\213\001\n\033packetl2c_join_tabl"
    "e_result\022\\\n\tpacket_id\030\001 \001(\0162,.game_texas"
    "poker_protocols.e_server_msg_type:\033e_mst"
    "_l2c_join_table_result\022\016\n\006result\030\002 \001(\005\"o"
    "\n\025packetc2l_leave_table\022V\n\tpacket_id\030\001 \001"
    "(\0162,.game_texaspoker_protocols.e_server_"
    "msg_type:\025e_mst_c2l_leave_table\"\241\001\n\034pack"
    "etl2c_leave_table_result\022]\n\tpacket_id\030\001 "
    "\001(\0162,.game_texaspoker_protocols.e_server"
    "_msg_type:\034e_mst_l2c_leave_table_result\022"
    "\016\n\006result\030\002 \001(\005\022\022\n\nplayerGold\030\003 \001(\005\"\203\002\n\n"
    "PlayerInfo\022\020\n\010playerId\030\001 \001(\005\022\020\n\010nickName"
    "\030\002 \001(\t\022\017\n\007curChip\030\003 \001(\003\022\016\n\006hasBet\030\004 \001(\003\022"
    "\021\n\thasBetCur\030\005 \001(\003\022\r\n\005state\030\006 \001(\005\022\014\n\004sea"
    "t\030\007 \001(\005\022\025\n\rdeclareResult\030\010 \001(\005\022\021\n\theadFr"
    "ame\030\t \001(\005\022\022\n\nheadCustom\030\n \001(\t\022\013\n\003sex\030\013 \001"
    "(\005\022\020\n\010vipLevel\030\014 \001(\005\022\016\n\006supply\030\r \001(\010\022\023\n\013"
    "supply_done\030\016 \001(\010\"1\n\rPlayerBetInfo\022\020\n\010pl"
    "ayerId\030\001 \001(\005\022\016\n\006hasBet\030\002 \001(\003\"\201\003\n\033packetl"
    "2c_game_event_notify\022\\\n\tpacket_id\030\001 \001(\0162"
    ",.game_texaspoker_protocols.e_server_msg"
    "_type:\033e_mst_l2c_game_event_notify\022\r\n\005ev"
    "ent\030\002 \001(\005\0229\n\nplayerInfo\030\003 \001(\0132%.game_tex"
    "aspoker_protocols.PlayerInfo\0229\n\013commonPo"
    "ker\030\004 \003(\0132$.game_texaspoker_protocols.Po"
    "kerInfo\022\025\n\rcurRewardPool\030\005 \001(\003\022\027\n\017addBet"
    "BaseValue\030\006 \001(\003\022\016\n\006curBet\030\007 \001(\003\022\?\n\rplaye"
    "rBetInfo\030\010 \003(\0132(.game_texaspoker_protoco"
    "ls.PlayerBetInfo\"\201\001\n\036packetc2l_get_table"
    "_scene_info\022_\n\tpacket_id\030\001 \001(\0162,.game_te"
    "xaspoker_protocols.e_server_msg_type:\036e_"
    "mst_c2l_get_table_scene_info\"*\n\tPokerInf"
    "o\022\016\n\006flower\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\"\354\004\n%pac"
    "ketl2c_get_table_scene_info_result\022b\n\tpa"
    "cket_id\030\001 \001(\0162,.game_texaspoker_protocol"
    "s.e_server_msg_type:!e_mst_get_table_sce"
    "ne_info_result\022\016\n\006roomId\030\002 \001(\005\022\017\n\007tableI"
    "d\030\003 \001(\005\022\021\n\tgameState\030\004 \001(\005\0229\n\nplayerList"
    "\030\005 \003(\0132%.game_texaspoker_protocols.Playe"
    "rInfo\0229\n\013commonPoker\030\006 \003(\0132$.game_texasp"
    "oker_protocols.PokerInfo\0227\n\tbackPoker\030\007 "
    "\003(\0132$.game_texaspoker_protocols.PokerInf"
    "o\022\025\n\rsmallBlindBet\030\010 \001(\003\022\024\n\014fullBlindBet"
    "\030\t \001(\003\022\027\n\017waitDeclareTime\030\n \001(\005\022\025\n\rcurRe"
    "wardPool\030\013 \001(\003\022\027\n\017addBetBaseValue\030\014 \001(\003\022"
    "\016\n\006curBet\030\r \001(\003\022\?\n\rplayerBetInfo\030\016 \003(\0132("
    ".game_texaspoker_protocols.PlayerBetInfo"
    "\0225\n\010gameInfo\030\017 \001(\0132#.game_texaspoker_pro"
    "tocols.GameInfo\"\222\001\n\025packetc2l_req_declar"
    "e\022V\n\tpacket_id\030\001 \001(\0162,.game_texaspoker_p"
    "rotocols.e_server_msg_type:\025e_mst_c2l_re"
    "q_declare\022\022\n\ndeclareSel\030\002 \001(\005\022\r\n\005param\030\003"
    " \001(\005\"\256\001\n\034packetl2c_req_declare_result\022]\n"
    "\tpacket_id\030\001 \001(\0162,.game_texaspoker_proto"
    "cols.e_server_msg_type:\034e_mst_l2c_req_de"
    "clare_result\022\016\n\006result\030\002 \001(\005\022\017\n\007curChip\030"
    "\003 \001(\005\022\016\n\006hasBet\030\004 \001(\005\"L\n\010GameInfo\022\022\n\nban"
    "kerSeat\030\001 \001(\005\022\026\n\016smallBlindSeat\030\002 \001(\005\022\024\n"
    "\014bigBlindSeat\030\003 \001(\005\"\275\002\n\033packetl2c_game_s"
    "tart_notify\022\\\n\tpacket_id\030\001 \001(\0162,.game_te"
    "xaspoker_protocols.e_server_msg_type:\033e_"
    "mst_l2c_game_start_notify\0225\n\010gameInfo\030\002 "
    "\001(\0132#.game_texaspoker_protocols.GameInfo"
    "\0229\n\nplayerList\030\003 \003(\0132%.game_texaspoker_p"
    "rotocols.PlayerInfo\0227\n\tbackPoker\030\004 \003(\0132$"
    ".game_texaspoker_protocols.PokerInfo\022\025\n\r"
    "curRewardPool\030\005 \001(\003\"y\n\032packetl2c_game_wa"
    "it_notify\022[\n\tpacket_id\030\001 \001(\0162,.game_texa"
    "spoker_protocols.e_server_msg_type:\032e_ms"
    "t_l2c_game_wait_notify\"\222\002\n\021BalancePlayer"
    "Info\022\020\n\010playerId\030\001 \001(\005\022\014\n\004seat\030\002 \001(\005\0227\n\t"
    "backPoker\030\003 \003(\0132$.game_texaspoker_protoc"
    "ols.PokerInfo\0226\n\010selPoker\030\004 \003(\0132$.game_t"
    "exaspoker_protocols.PokerInfo\022\021\n\tpokerTy"
    "pe\030\005 \001(\005\022\021\n\twinReward\030\006 \001(\005\022\021\n\tisAbandon"
    "\030\007 \001(\010\022\020\n\010isWinner\030\010 \001(\010\022\023\n\013isShowPoker\030"
    "\t \001(\010\022\014\n\004rank\030\n \001(\005\"\342\002\n\031packetl2c_game_e"
    "nd_notify\022Z\n\tpacket_id\030\001 \001(\0162,.game_texa"
    "spoker_protocols.e_server_msg_type:\031e_ms"
    "t_l2c_game_end_notify\022\025\n\rcurRewardPool\030\002"
    " \001(\003\022@\n\nplayerList\030\003 \003(\0132,.game_texaspok"
    "er_protocols.BalancePlayerInfo\022\024\n\014isAllA"
    "bandon\030\004 \001(\010\0229\n\013commonPoker\030\005 \003(\0132$.game"
    "_texaspoker_protocols.PokerInfo\022\?\n\rplaye"
    "rBetInfo\030\006 \003(\0132(.game_texaspoker_protoco"
    "ls.PlayerBetInfo\"o\n\025packetc2l_req_sitdow"
    "n\022V\n\tpacket_id\030\001 \001(\0162,.game_texaspoker_p"
    "rotocols.e_server_msg_type:\025e_mst_c2l_re"
    "q_sitdown\"\215\001\n\034packetl2c_req_sitdown_resu"
    "lt\022]\n\tpacket_id\030\001 \001(\0162,.game_texaspoker_"
    "protocols.e_server_msg_type:\034e_mst_l2c_r"
    "eq_sitdown_result\022\016\n\006result\030\002 \001(\005\"{\n\024pac"
    "ketc2l_req_supply\022U\n\tpacket_id\030\001 \001(\0162,.g"
    "ame_texaspoker_protocols.e_server_msg_ty"
    "pe:\024e_mst_c2l_req_supply\022\014\n\004auto\030\002 \001(\010\"\231"
    "\001\n\033packetl2c_req_supply_result\022\\\n\tpacket"
    "_id\030\001 \001(\0162,.game_texaspoker_protocols.e_"
    "server_msg_type:\033e_mst_l2c_req_supply_re"
    "sult\022\014\n\004auto\030\002 \001(\010\022\016\n\006result\030\003 \001(\005\"w\n\022pa"
    "cketc2l_req_chip\022S\n\tpacket_id\030\001 \001(\0162,.ga"
    "me_texaspoker_protocols.e_server_msg_typ"
    "e:\022e_mst_c2l_req_chip\022\014\n\004chip\030\002 \001(\005\"\207\001\n\031"
    "packetl2c_req_chip_result\022Z\n\tpacket_id\030\001"
    " \001(\0162,.game_texaspoker_protocols.e_serve"
    "r_msg_type:\031e_mst_l2c_req_chip_result\022\016\n"
    "\006result\030\002 \001(\005\"\262\001\n\031packetl2c_buy_chip_not"
    "ify\022Z\n\tpacket_id\030\001 \001(\0162,.game_texaspoker"
    "_protocols.e_server_msg_type:\031e_mst_l2c_"
    "buy_chip_notify\0229\n\nplayerList\030\002 \003(\0132%.ga"
    "me_texaspoker_protocols.PlayerInfo\"}\n\024pa"
    "cketc2l_show_poker\022U\n\tpacket_id\030\001 \001(\0162,."
    "game_texaspoker_protocols.e_server_msg_t"
    "ype:\024e_mst_c2l_show_poker\022\016\n\006isShow\030\002 \001("
    "\010\"\213\001\n\033packetl2c_show_poker_result\022\\\n\tpac"
    "ket_id\030\001 \001(\0162,.game_texaspoker_protocols"
    ".e_server_msg_type:\033e_mst_l2c_show_poker"
    "_result\022\016\n\006result\030\002 \001(\005\"o\n\025packetc2l_req"
    "_standup\022V\n\tpacket_id\030\001 \001(\0162,.game_texas"
    "poker_protocols.e_server_msg_type:\025e_mst"
    "_c2l_req_standup\"\215\001\n\034packetl2c_req_stand"
    "up_result\022]\n\tpacket_id\030\001 \001(\0162,.game_texa"
    "spoker_protocols.e_server_msg_type:\034e_ms"
    "t_l2c_req_standup_result\022\016\n\006result\030\002 \001(\005"
    "\"o\n\025packetc2l_check_state\022V\n\tpacket_id\030\001"
    " \001(\0162,.game_texaspoker_protocols.e_serve"
    "r_msg_type:\025e_mst_c2l_check_state\"\230\001\n\034pa"
    "cketl2c_check_state_result\022]\n\tpacket_id\030"
    "\001 \001(\0162,.game_texaspoker_protocols.e_serv"
    "er_msg_type:\034e_mst_l2c_check_state_resul"
    "t\022\031\n\nis_intable\030\002 \001(\010:\005false", 5748);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_texaspoker_protocol.proto", &protobuf_RegisterTypes);
  msg_room_info::default_instance_ = new msg_room_info();
  packetc2l_get_room_info::default_instance_ = new packetc2l_get_room_info();
  packetl2c_get_room_info_result::default_instance_ = new packetl2c_get_room_info_result();
  packetc2l_join_table::default_instance_ = new packetc2l_join_table();
  packetl2c_join_table_result::default_instance_ = new packetl2c_join_table_result();
  packetc2l_leave_table::default_instance_ = new packetc2l_leave_table();
  packetl2c_leave_table_result::default_instance_ = new packetl2c_leave_table_result();
  PlayerInfo::default_instance_ = new PlayerInfo();
  PlayerBetInfo::default_instance_ = new PlayerBetInfo();
  packetl2c_game_event_notify::default_instance_ = new packetl2c_game_event_notify();
  packetc2l_get_table_scene_info::default_instance_ = new packetc2l_get_table_scene_info();
  PokerInfo::default_instance_ = new PokerInfo();
  packetl2c_get_table_scene_info_result::default_instance_ = new packetl2c_get_table_scene_info_result();
  packetc2l_req_declare::default_instance_ = new packetc2l_req_declare();
  packetl2c_req_declare_result::default_instance_ = new packetl2c_req_declare_result();
  GameInfo::default_instance_ = new GameInfo();
  packetl2c_game_start_notify::default_instance_ = new packetl2c_game_start_notify();
  packetl2c_game_wait_notify::default_instance_ = new packetl2c_game_wait_notify();
  BalancePlayerInfo::default_instance_ = new BalancePlayerInfo();
  packetl2c_game_end_notify::default_instance_ = new packetl2c_game_end_notify();
  packetc2l_req_sitdown::default_instance_ = new packetc2l_req_sitdown();
  packetl2c_req_sitdown_result::default_instance_ = new packetl2c_req_sitdown_result();
  packetc2l_req_supply::default_instance_ = new packetc2l_req_supply();
  packetl2c_req_supply_result::default_instance_ = new packetl2c_req_supply_result();
  packetc2l_req_chip::default_instance_ = new packetc2l_req_chip();
  packetl2c_req_chip_result::default_instance_ = new packetl2c_req_chip_result();
  packetl2c_buy_chip_notify::default_instance_ = new packetl2c_buy_chip_notify();
  packetc2l_show_poker::default_instance_ = new packetc2l_show_poker();
  packetl2c_show_poker_result::default_instance_ = new packetl2c_show_poker_result();
  packetc2l_req_standup::default_instance_ = new packetc2l_req_standup();
  packetl2c_req_standup_result::default_instance_ = new packetl2c_req_standup_result();
  packetc2l_check_state::default_instance_ = new packetc2l_check_state();
  packetl2c_check_state_result::default_instance_ = new packetl2c_check_state_result();
  msg_room_info::default_instance_->InitAsDefaultInstance();
  packetc2l_get_room_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_room_info_result::default_instance_->InitAsDefaultInstance();
  packetc2l_join_table::default_instance_->InitAsDefaultInstance();
  packetl2c_join_table_result::default_instance_->InitAsDefaultInstance();
  packetc2l_leave_table::default_instance_->InitAsDefaultInstance();
  packetl2c_leave_table_result::default_instance_->InitAsDefaultInstance();
  PlayerInfo::default_instance_->InitAsDefaultInstance();
  PlayerBetInfo::default_instance_->InitAsDefaultInstance();
  packetl2c_game_event_notify::default_instance_->InitAsDefaultInstance();
  packetc2l_get_table_scene_info::default_instance_->InitAsDefaultInstance();
  PokerInfo::default_instance_->InitAsDefaultInstance();
  packetl2c_get_table_scene_info_result::default_instance_->InitAsDefaultInstance();
  packetc2l_req_declare::default_instance_->InitAsDefaultInstance();
  packetl2c_req_declare_result::default_instance_->InitAsDefaultInstance();
  GameInfo::default_instance_->InitAsDefaultInstance();
  packetl2c_game_start_notify::default_instance_->InitAsDefaultInstance();
  packetl2c_game_wait_notify::default_instance_->InitAsDefaultInstance();
  BalancePlayerInfo::default_instance_->InitAsDefaultInstance();
  packetl2c_game_end_notify::default_instance_->InitAsDefaultInstance();
  packetc2l_req_sitdown::default_instance_->InitAsDefaultInstance();
  packetl2c_req_sitdown_result::default_instance_->InitAsDefaultInstance();
  packetc2l_req_supply::default_instance_->InitAsDefaultInstance();
  packetl2c_req_supply_result::default_instance_->InitAsDefaultInstance();
  packetc2l_req_chip::default_instance_->InitAsDefaultInstance();
  packetl2c_req_chip_result::default_instance_->InitAsDefaultInstance();
  packetl2c_buy_chip_notify::default_instance_->InitAsDefaultInstance();
  packetc2l_show_poker::default_instance_->InitAsDefaultInstance();
  packetl2c_show_poker_result::default_instance_->InitAsDefaultInstance();
  packetc2l_req_standup::default_instance_->InitAsDefaultInstance();
  packetl2c_req_standup_result::default_instance_->InitAsDefaultInstance();
  packetc2l_check_state::default_instance_->InitAsDefaultInstance();
  packetl2c_check_state_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5ftexaspoker_5fprotocol_2eproto {
  StaticDescriptorInitializer_game_5ftexaspoker_5fprotocol_2eproto() {
    protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  }
} static_descriptor_initializer_game_5ftexaspoker_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_room_info::kRoomidFieldNumber;
#endif  // !_MSC_VER

msg_room_info::msg_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_room_info::InitAsDefaultInstance() {
}

msg_room_info::msg_room_info(const msg_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_room_info::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_room_info::~msg_room_info() {
  SharedDtor();
}

void msg_room_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_room_info_descriptor_;
}

const msg_room_info& msg_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

msg_room_info* msg_room_info::default_instance_ = NULL;

msg_room_info* msg_room_info::New() const {
  return new msg_room_info;
}

void msg_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_room_info::MergeFrom(const msg_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_room_info::CopyFrom(const msg_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_room_info::IsInitialized() const {

  return true;
}

void msg_room_info::Swap(msg_room_info* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_room_info_descriptor_;
  metadata.reflection = msg_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_room_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_room_info::packetc2l_get_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_room_info::InitAsDefaultInstance() {
}

packetc2l_get_room_info::packetc2l_get_room_info(const packetc2l_get_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_room_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10001;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_room_info::~packetc2l_get_room_info() {
  SharedDtor();
}

void packetc2l_get_room_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_room_info_descriptor_;
}

const packetc2l_get_room_info& packetc2l_get_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_room_info* packetc2l_get_room_info::default_instance_ = NULL;

packetc2l_get_room_info* packetc2l_get_room_info::New() const {
  return new packetc2l_get_room_info;
}

void packetc2l_get_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10001;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_room_info::MergeFrom(const packetc2l_get_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_room_info::CopyFrom(const packetc2l_get_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_room_info::IsInitialized() const {

  return true;
}

void packetc2l_get_room_info::Swap(packetc2l_get_room_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_room_info_descriptor_;
  metadata.reflection = packetc2l_get_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_room_info_result::kPacketIdFieldNumber;
const int packetl2c_get_room_info_result::kRoomListFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_room_info_result::packetl2c_get_room_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_get_room_info_result::InitAsDefaultInstance() {
}

packetl2c_get_room_info_result::packetl2c_get_room_info_result(const packetl2c_get_room_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_get_room_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15001;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_room_info_result::~packetl2c_get_room_info_result() {
  SharedDtor();
}

void packetl2c_get_room_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_get_room_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_room_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_room_info_result_descriptor_;
}

const packetl2c_get_room_info_result& packetl2c_get_room_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_get_room_info_result* packetl2c_get_room_info_result::default_instance_ = NULL;

packetl2c_get_room_info_result* packetl2c_get_room_info_result::New() const {
  return new packetl2c_get_room_info_result;
}

void packetl2c_get_room_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15001;
  }
  room_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_room_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_list;
        break;
      }

      // repeated .game_texaspoker_protocols.msg_room_info room_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_get_room_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_texaspoker_protocols.msg_room_info room_list = 2;
  for (int i = 0; i < this->room_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_get_room_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_texaspoker_protocols.msg_room_info room_list = 2;
  for (int i = 0; i < this->room_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_get_room_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_texaspoker_protocols.msg_room_info room_list = 2;
  total_size += 1 * this->room_list_size();
  for (int i = 0; i < this->room_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_room_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_room_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_room_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_room_info_result::MergeFrom(const packetl2c_get_room_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_list_.MergeFrom(from.room_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_room_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_room_info_result::CopyFrom(const packetl2c_get_room_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_room_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_room_info_result::Swap(packetl2c_get_room_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    room_list_.Swap(&other->room_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_room_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_room_info_result_descriptor_;
  metadata.reflection = packetl2c_get_room_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_join_table::kPacketIdFieldNumber;
const int packetc2l_join_table::kRoomIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_join_table::packetc2l_join_table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_join_table::InitAsDefaultInstance() {
}

packetc2l_join_table::packetc2l_join_table(const packetc2l_join_table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_join_table::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10002;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_join_table::~packetc2l_join_table() {
  SharedDtor();
}

void packetc2l_join_table::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_join_table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_join_table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_join_table_descriptor_;
}

const packetc2l_join_table& packetc2l_join_table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_join_table* packetc2l_join_table::default_instance_ = NULL;

packetc2l_join_table* packetc2l_join_table::New() const {
  return new packetc2l_join_table;
}

void packetc2l_join_table::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10002;
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_join_table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_join_table];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomId;
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_join_table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_join_table];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 roomId = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_join_table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_join_table];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 roomId = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_join_table::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_join_table];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 roomId = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_join_table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_join_table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_join_table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_join_table::MergeFrom(const packetc2l_join_table& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_join_table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_join_table::CopyFrom(const packetc2l_join_table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_join_table::IsInitialized() const {

  return true;
}

void packetc2l_join_table::Swap(packetc2l_join_table* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_join_table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_join_table_descriptor_;
  metadata.reflection = packetc2l_join_table_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_join_table_result::kPacketIdFieldNumber;
const int packetl2c_join_table_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_join_table_result::packetl2c_join_table_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_join_table_result::InitAsDefaultInstance() {
}

packetl2c_join_table_result::packetl2c_join_table_result(const packetl2c_join_table_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_join_table_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15002;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_join_table_result::~packetl2c_join_table_result() {
  SharedDtor();
}

void packetl2c_join_table_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_join_table_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_join_table_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_join_table_result_descriptor_;
}

const packetl2c_join_table_result& packetl2c_join_table_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_join_table_result* packetl2c_join_table_result::default_instance_ = NULL;

packetl2c_join_table_result* packetl2c_join_table_result::New() const {
  return new packetl2c_join_table_result;
}

void packetl2c_join_table_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15002;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_join_table_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_join_table_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_join_table_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_join_table_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_join_table_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_join_table_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_join_table_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_join_table_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_join_table_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_join_table_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_join_table_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_join_table_result::MergeFrom(const packetl2c_join_table_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_join_table_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_join_table_result::CopyFrom(const packetl2c_join_table_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_join_table_result::IsInitialized() const {

  return true;
}

void packetl2c_join_table_result::Swap(packetl2c_join_table_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_join_table_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_join_table_result_descriptor_;
  metadata.reflection = packetl2c_join_table_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_leave_table::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_leave_table::packetc2l_leave_table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_leave_table::InitAsDefaultInstance() {
}

packetc2l_leave_table::packetc2l_leave_table(const packetc2l_leave_table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_leave_table::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10003;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_leave_table::~packetc2l_leave_table() {
  SharedDtor();
}

void packetc2l_leave_table::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_leave_table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_leave_table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_leave_table_descriptor_;
}

const packetc2l_leave_table& packetc2l_leave_table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_leave_table* packetc2l_leave_table::default_instance_ = NULL;

packetc2l_leave_table* packetc2l_leave_table::New() const {
  return new packetc2l_leave_table;
}

void packetc2l_leave_table::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10003;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_leave_table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_table];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_leave_table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_table];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_leave_table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_table];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_leave_table::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_table];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_leave_table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_leave_table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_leave_table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_leave_table::MergeFrom(const packetc2l_leave_table& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_leave_table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_leave_table::CopyFrom(const packetc2l_leave_table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_leave_table::IsInitialized() const {

  return true;
}

void packetc2l_leave_table::Swap(packetc2l_leave_table* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_leave_table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_leave_table_descriptor_;
  metadata.reflection = packetc2l_leave_table_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_leave_table_result::kPacketIdFieldNumber;
const int packetl2c_leave_table_result::kResultFieldNumber;
const int packetl2c_leave_table_result::kPlayerGoldFieldNumber;
#endif  // !_MSC_VER

packetl2c_leave_table_result::packetl2c_leave_table_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_leave_table_result::InitAsDefaultInstance() {
}

packetl2c_leave_table_result::packetl2c_leave_table_result(const packetl2c_leave_table_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_leave_table_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15003;
  result_ = 0;
  playergold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_leave_table_result::~packetl2c_leave_table_result() {
  SharedDtor();
}

void packetl2c_leave_table_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_leave_table_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_leave_table_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_leave_table_result_descriptor_;
}

const packetl2c_leave_table_result& packetl2c_leave_table_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_leave_table_result* packetl2c_leave_table_result::default_instance_ = NULL;

packetl2c_leave_table_result* packetl2c_leave_table_result::New() const {
  return new packetl2c_leave_table_result;
}

void packetl2c_leave_table_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15003;
    result_ = 0;
    playergold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_leave_table_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_table_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerGold;
        break;
      }

      // optional int32 playerGold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playergold_)));
          set_has_playergold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_leave_table_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_table_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 playerGold = 3;
  if (has_playergold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playergold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_leave_table_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_table_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 playerGold = 3;
  if (has_playergold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playergold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_leave_table_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_table_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 playerGold = 3;
    if (has_playergold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playergold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_leave_table_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_leave_table_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_leave_table_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_leave_table_result::MergeFrom(const packetl2c_leave_table_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_playergold()) {
      set_playergold(from.playergold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_leave_table_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_leave_table_result::CopyFrom(const packetl2c_leave_table_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_leave_table_result::IsInitialized() const {

  return true;
}

void packetl2c_leave_table_result::Swap(packetl2c_leave_table_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(playergold_, other->playergold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_leave_table_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_leave_table_result_descriptor_;
  metadata.reflection = packetl2c_leave_table_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerInfo::kPlayerIdFieldNumber;
const int PlayerInfo::kNickNameFieldNumber;
const int PlayerInfo::kCurChipFieldNumber;
const int PlayerInfo::kHasBetFieldNumber;
const int PlayerInfo::kHasBetCurFieldNumber;
const int PlayerInfo::kStateFieldNumber;
const int PlayerInfo::kSeatFieldNumber;
const int PlayerInfo::kDeclareResultFieldNumber;
const int PlayerInfo::kHeadFrameFieldNumber;
const int PlayerInfo::kHeadCustomFieldNumber;
const int PlayerInfo::kSexFieldNumber;
const int PlayerInfo::kVipLevelFieldNumber;
const int PlayerInfo::kSupplyFieldNumber;
const int PlayerInfo::kSupplyDoneFieldNumber;
#endif  // !_MSC_VER

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfo::InitAsDefaultInstance() {
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  curchip_ = GOOGLE_LONGLONG(0);
  hasbet_ = GOOGLE_LONGLONG(0);
  hasbetcur_ = GOOGLE_LONGLONG(0);
  state_ = 0;
  seat_ = 0;
  declareresult_ = 0;
  headframe_ = 0;
  headcustom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  viplevel_ = 0;
  supply_ = false;
  supply_done_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfo::~PlayerInfo() {
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (headcustom_ != &::google::protobuf::internal::kEmptyString) {
    delete headcustom_;
  }
  if (this != default_instance_) {
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

PlayerInfo* PlayerInfo::default_instance_ = NULL;

PlayerInfo* PlayerInfo::New() const {
  return new PlayerInfo;
}

void PlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    curchip_ = GOOGLE_LONGLONG(0);
    hasbet_ = GOOGLE_LONGLONG(0);
    hasbetcur_ = GOOGLE_LONGLONG(0);
    state_ = 0;
    seat_ = 0;
    declareresult_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    headframe_ = 0;
    if (has_headcustom()) {
      if (headcustom_ != &::google::protobuf::internal::kEmptyString) {
        headcustom_->clear();
      }
    }
    sex_ = 0;
    viplevel_ = 0;
    supply_ = false;
    supply_done_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickName;
        break;
      }

      // optional string nickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curChip;
        break;
      }

      // optional int64 curChip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curChip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curchip_)));
          set_has_curchip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hasBet;
        break;
      }

      // optional int64 hasBet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hasbet_)));
          set_has_hasbet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hasBetCur;
        break;
      }

      // optional int64 hasBetCur = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasBetCur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hasbetcur_)));
          set_has_hasbetcur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional int32 state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_seat;
        break;
      }

      // optional int32 seat = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_declareResult;
        break;
      }

      // optional int32 declareResult = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_declareResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &declareresult_)));
          set_has_declareresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_headFrame;
        break;
      }

      // optional int32 headFrame = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headframe_)));
          set_has_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_headCustom;
        break;
      }

      // optional string headCustom = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headCustom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headcustom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headcustom().data(), this->headcustom().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_sex;
        break;
      }

      // optional int32 sex = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_vipLevel;
        break;
      }

      // optional int32 vipLevel = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_supply;
        break;
      }

      // optional bool supply = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_supply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supply_)));
          set_has_supply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_supply_done;
        break;
      }

      // optional bool supply_done = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_supply_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supply_done_)));
          set_has_supply_done();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional int64 curChip = 3;
  if (has_curchip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->curchip(), output);
  }

  // optional int64 hasBet = 4;
  if (has_hasbet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->hasbet(), output);
  }

  // optional int64 hasBetCur = 5;
  if (has_hasbetcur()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->hasbetcur(), output);
  }

  // optional int32 state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->state(), output);
  }

  // optional int32 seat = 7;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->seat(), output);
  }

  // optional int32 declareResult = 8;
  if (has_declareresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->declareresult(), output);
  }

  // optional int32 headFrame = 9;
  if (has_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->headframe(), output);
  }

  // optional string headCustom = 10;
  if (has_headcustom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headcustom().data(), this->headcustom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->headcustom(), output);
  }

  // optional int32 sex = 11;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->sex(), output);
  }

  // optional int32 vipLevel = 12;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->viplevel(), output);
  }

  // optional bool supply = 13;
  if (has_supply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->supply(), output);
  }

  // optional bool supply_done = 14;
  if (has_supply_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->supply_done(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int64 curChip = 3;
  if (has_curchip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->curchip(), target);
  }

  // optional int64 hasBet = 4;
  if (has_hasbet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->hasbet(), target);
  }

  // optional int64 hasBetCur = 5;
  if (has_hasbetcur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->hasbetcur(), target);
  }

  // optional int32 state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->state(), target);
  }

  // optional int32 seat = 7;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->seat(), target);
  }

  // optional int32 declareResult = 8;
  if (has_declareresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->declareresult(), target);
  }

  // optional int32 headFrame = 9;
  if (has_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->headframe(), target);
  }

  // optional string headCustom = 10;
  if (has_headcustom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headcustom().data(), this->headcustom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->headcustom(), target);
  }

  // optional int32 sex = 11;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->sex(), target);
  }

  // optional int32 vipLevel = 12;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->viplevel(), target);
  }

  // optional bool supply = 13;
  if (has_supply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->supply(), target);
  }

  // optional bool supply_done = 14;
  if (has_supply_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->supply_done(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional string nickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int64 curChip = 3;
    if (has_curchip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curchip());
    }

    // optional int64 hasBet = 4;
    if (has_hasbet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hasbet());
    }

    // optional int64 hasBetCur = 5;
    if (has_hasbetcur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hasbetcur());
    }

    // optional int32 state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 seat = 7;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 declareResult = 8;
    if (has_declareresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->declareresult());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 headFrame = 9;
    if (has_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headframe());
    }

    // optional string headCustom = 10;
    if (has_headcustom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headcustom());
    }

    // optional int32 sex = 11;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 vipLevel = 12;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional bool supply = 13;
    if (has_supply()) {
      total_size += 1 + 1;
    }

    // optional bool supply_done = 14;
    if (has_supply_done()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_curchip()) {
      set_curchip(from.curchip());
    }
    if (from.has_hasbet()) {
      set_hasbet(from.hasbet());
    }
    if (from.has_hasbetcur()) {
      set_hasbetcur(from.hasbetcur());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_declareresult()) {
      set_declareresult(from.declareresult());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_headframe()) {
      set_headframe(from.headframe());
    }
    if (from.has_headcustom()) {
      set_headcustom(from.headcustom());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_supply()) {
      set_supply(from.supply());
    }
    if (from.has_supply_done()) {
      set_supply_done(from.supply_done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {

  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(nickname_, other->nickname_);
    std::swap(curchip_, other->curchip_);
    std::swap(hasbet_, other->hasbet_);
    std::swap(hasbetcur_, other->hasbetcur_);
    std::swap(state_, other->state_);
    std::swap(seat_, other->seat_);
    std::swap(declareresult_, other->declareresult_);
    std::swap(headframe_, other->headframe_);
    std::swap(headcustom_, other->headcustom_);
    std::swap(sex_, other->sex_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(supply_, other->supply_);
    std::swap(supply_done_, other->supply_done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfo_descriptor_;
  metadata.reflection = PlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerBetInfo::kPlayerIdFieldNumber;
const int PlayerBetInfo::kHasBetFieldNumber;
#endif  // !_MSC_VER

PlayerBetInfo::PlayerBetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerBetInfo::InitAsDefaultInstance() {
}

PlayerBetInfo::PlayerBetInfo(const PlayerBetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerBetInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  hasbet_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerBetInfo::~PlayerBetInfo() {
  SharedDtor();
}

void PlayerBetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerBetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerBetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerBetInfo_descriptor_;
}

const PlayerBetInfo& PlayerBetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

PlayerBetInfo* PlayerBetInfo::default_instance_ = NULL;

PlayerBetInfo* PlayerBetInfo::New() const {
  return new PlayerBetInfo;
}

void PlayerBetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
    hasbet_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerBetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hasBet;
        break;
      }

      // optional int64 hasBet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hasbet_)));
          set_has_hasbet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerBetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // optional int64 hasBet = 2;
  if (has_hasbet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->hasbet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerBetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // optional int64 hasBet = 2;
  if (has_hasbet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->hasbet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerBetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional int64 hasBet = 2;
    if (has_hasbet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hasbet());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerBetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerBetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerBetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerBetInfo::MergeFrom(const PlayerBetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_hasbet()) {
      set_hasbet(from.hasbet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerBetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerBetInfo::CopyFrom(const PlayerBetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBetInfo::IsInitialized() const {

  return true;
}

void PlayerBetInfo::Swap(PlayerBetInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(hasbet_, other->hasbet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerBetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerBetInfo_descriptor_;
  metadata.reflection = PlayerBetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_game_event_notify::kPacketIdFieldNumber;
const int packetl2c_game_event_notify::kEventFieldNumber;
const int packetl2c_game_event_notify::kPlayerInfoFieldNumber;
const int packetl2c_game_event_notify::kCommonPokerFieldNumber;
const int packetl2c_game_event_notify::kCurRewardPoolFieldNumber;
const int packetl2c_game_event_notify::kAddBetBaseValueFieldNumber;
const int packetl2c_game_event_notify::kCurBetFieldNumber;
const int packetl2c_game_event_notify::kPlayerBetInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_game_event_notify::packetl2c_game_event_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_game_event_notify::InitAsDefaultInstance() {
  playerinfo_ = const_cast< ::game_texaspoker_protocols::PlayerInfo*>(&::game_texaspoker_protocols::PlayerInfo::default_instance());
}

packetl2c_game_event_notify::packetl2c_game_event_notify(const packetl2c_game_event_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_game_event_notify::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15005;
  event_ = 0;
  playerinfo_ = NULL;
  currewardpool_ = GOOGLE_LONGLONG(0);
  addbetbasevalue_ = GOOGLE_LONGLONG(0);
  curbet_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_game_event_notify::~packetl2c_game_event_notify() {
  SharedDtor();
}

void packetl2c_game_event_notify::SharedDtor() {
  if (this != default_instance_) {
    delete playerinfo_;
  }
}

void packetl2c_game_event_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_game_event_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_game_event_notify_descriptor_;
}

const packetl2c_game_event_notify& packetl2c_game_event_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_game_event_notify* packetl2c_game_event_notify::default_instance_ = NULL;

packetl2c_game_event_notify* packetl2c_game_event_notify::New() const {
  return new packetl2c_game_event_notify;
}

void packetl2c_game_event_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15005;
    event_ = 0;
    if (has_playerinfo()) {
      if (playerinfo_ != NULL) playerinfo_->::game_texaspoker_protocols::PlayerInfo::Clear();
    }
    currewardpool_ = GOOGLE_LONGLONG(0);
    addbetbasevalue_ = GOOGLE_LONGLONG(0);
    curbet_ = GOOGLE_LONGLONG(0);
  }
  commonpoker_.Clear();
  playerbetinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_game_event_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_event_notify];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event;
        break;
      }

      // optional int32 event = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_)));
          set_has_event();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playerInfo;
        break;
      }

      // optional .game_texaspoker_protocols.PlayerInfo playerInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_commonPoker;
        break;
      }

      // repeated .game_texaspoker_protocols.PokerInfo commonPoker = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commonPoker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commonpoker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_commonPoker;
        if (input->ExpectTag(40)) goto parse_curRewardPool;
        break;
      }

      // optional int64 curRewardPool = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curRewardPool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currewardpool_)));
          set_has_currewardpool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_addBetBaseValue;
        break;
      }

      // optional int64 addBetBaseValue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addBetBaseValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &addbetbasevalue_)));
          set_has_addbetbasevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_curBet;
        break;
      }

      // optional int64 curBet = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curbet_)));
          set_has_curbet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_playerBetInfo;
        break;
      }

      // repeated .game_texaspoker_protocols.PlayerBetInfo playerBetInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerBetInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerbetinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_playerBetInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_game_event_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_event_notify];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 event = 2;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->event(), output);
  }

  // optional .game_texaspoker_protocols.PlayerInfo playerInfo = 3;
  if (has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->playerinfo(), output);
  }

  // repeated .game_texaspoker_protocols.PokerInfo commonPoker = 4;
  for (int i = 0; i < this->commonpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->commonpoker(i), output);
  }

  // optional int64 curRewardPool = 5;
  if (has_currewardpool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->currewardpool(), output);
  }

  // optional int64 addBetBaseValue = 6;
  if (has_addbetbasevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->addbetbasevalue(), output);
  }

  // optional int64 curBet = 7;
  if (has_curbet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->curbet(), output);
  }

  // repeated .game_texaspoker_protocols.PlayerBetInfo playerBetInfo = 8;
  for (int i = 0; i < this->playerbetinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->playerbetinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_game_event_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_event_notify];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 event = 2;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->event(), target);
  }

  // optional .game_texaspoker_protocols.PlayerInfo playerInfo = 3;
  if (has_playerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->playerinfo(), target);
  }

  // repeated .game_texaspoker_protocols.PokerInfo commonPoker = 4;
  for (int i = 0; i < this->commonpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->commonpoker(i), target);
  }

  // optional int64 curRewardPool = 5;
  if (has_currewardpool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->currewardpool(), target);
  }

  // optional int64 addBetBaseValue = 6;
  if (has_addbetbasevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->addbetbasevalue(), target);
  }

  // optional int64 curBet = 7;
  if (has_curbet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->curbet(), target);
  }

  // repeated .game_texaspoker_protocols.PlayerBetInfo playerBetInfo = 8;
  for (int i = 0; i < this->playerbetinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->playerbetinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_game_event_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_event_notify];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 event = 2;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event());
    }

    // optional .game_texaspoker_protocols.PlayerInfo playerInfo = 3;
    if (has_playerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinfo());
    }

    // optional int64 curRewardPool = 5;
    if (has_currewardpool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currewardpool());
    }

    // optional int64 addBetBaseValue = 6;
    if (has_addbetbasevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->addbetbasevalue());
    }

    // optional int64 curBet = 7;
    if (has_curbet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curbet());
    }

  }
  // repeated .game_texaspoker_protocols.PokerInfo commonPoker = 4;
  total_size += 1 * this->commonpoker_size();
  for (int i = 0; i < this->commonpoker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commonpoker(i));
  }

  // repeated .game_texaspoker_protocols.PlayerBetInfo playerBetInfo = 8;
  total_size += 1 * this->playerbetinfo_size();
  for (int i = 0; i < this->playerbetinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerbetinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_game_event_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_game_event_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_game_event_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_game_event_notify::MergeFrom(const packetl2c_game_event_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  commonpoker_.MergeFrom(from.commonpoker_);
  playerbetinfo_.MergeFrom(from.playerbetinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_playerinfo()) {
      mutable_playerinfo()->::game_texaspoker_protocols::PlayerInfo::MergeFrom(from.playerinfo());
    }
    if (from.has_currewardpool()) {
      set_currewardpool(from.currewardpool());
    }
    if (from.has_addbetbasevalue()) {
      set_addbetbasevalue(from.addbetbasevalue());
    }
    if (from.has_curbet()) {
      set_curbet(from.curbet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_game_event_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_game_event_notify::CopyFrom(const packetl2c_game_event_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_game_event_notify::IsInitialized() const {

  return true;
}

void packetl2c_game_event_notify::Swap(packetl2c_game_event_notify* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(event_, other->event_);
    std::swap(playerinfo_, other->playerinfo_);
    commonpoker_.Swap(&other->commonpoker_);
    std::swap(currewardpool_, other->currewardpool_);
    std::swap(addbetbasevalue_, other->addbetbasevalue_);
    std::swap(curbet_, other->curbet_);
    playerbetinfo_.Swap(&other->playerbetinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_game_event_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_game_event_notify_descriptor_;
  metadata.reflection = packetl2c_game_event_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_table_scene_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_table_scene_info::packetc2l_get_table_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_table_scene_info::InitAsDefaultInstance() {
}

packetc2l_get_table_scene_info::packetc2l_get_table_scene_info(const packetc2l_get_table_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_table_scene_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10004;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_table_scene_info::~packetc2l_get_table_scene_info() {
  SharedDtor();
}

void packetc2l_get_table_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_table_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_table_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_table_scene_info_descriptor_;
}

const packetc2l_get_table_scene_info& packetc2l_get_table_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_table_scene_info* packetc2l_get_table_scene_info::default_instance_ = NULL;

packetc2l_get_table_scene_info* packetc2l_get_table_scene_info::New() const {
  return new packetc2l_get_table_scene_info;
}

void packetc2l_get_table_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10004;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_table_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_scene_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_table_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_table_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_table_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_table_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_table_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_table_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_table_scene_info::MergeFrom(const packetc2l_get_table_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_table_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_table_scene_info::CopyFrom(const packetc2l_get_table_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_table_scene_info::IsInitialized() const {

  return true;
}

void packetc2l_get_table_scene_info::Swap(packetc2l_get_table_scene_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_table_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_table_scene_info_descriptor_;
  metadata.reflection = packetc2l_get_table_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PokerInfo::kFlowerFieldNumber;
const int PokerInfo::kValueFieldNumber;
#endif  // !_MSC_VER

PokerInfo::PokerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PokerInfo::InitAsDefaultInstance() {
}

PokerInfo::PokerInfo(const PokerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PokerInfo::SharedCtor() {
  _cached_size_ = 0;
  flower_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PokerInfo::~PokerInfo() {
  SharedDtor();
}

void PokerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PokerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PokerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PokerInfo_descriptor_;
}

const PokerInfo& PokerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

PokerInfo* PokerInfo::default_instance_ = NULL;

PokerInfo* PokerInfo::New() const {
  return new PokerInfo;
}

void PokerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flower_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PokerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flower = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flower_)));
          set_has_flower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PokerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 flower = 1;
  if (has_flower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flower(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PokerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 flower = 1;
  if (has_flower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flower(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PokerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flower = 1;
    if (has_flower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flower());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PokerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PokerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PokerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PokerInfo::MergeFrom(const PokerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flower()) {
      set_flower(from.flower());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PokerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PokerInfo::CopyFrom(const PokerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PokerInfo::IsInitialized() const {

  return true;
}

void PokerInfo::Swap(PokerInfo* other) {
  if (other != this) {
    std::swap(flower_, other->flower_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PokerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PokerInfo_descriptor_;
  metadata.reflection = PokerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_table_scene_info_result::kPacketIdFieldNumber;
const int packetl2c_get_table_scene_info_result::kRoomIdFieldNumber;
const int packetl2c_get_table_scene_info_result::kTableIdFieldNumber;
const int packetl2c_get_table_scene_info_result::kGameStateFieldNumber;
const int packetl2c_get_table_scene_info_result::kPlayerListFieldNumber;
const int packetl2c_get_table_scene_info_result::kCommonPokerFieldNumber;
const int packetl2c_get_table_scene_info_result::kBackPokerFieldNumber;
const int packetl2c_get_table_scene_info_result::kSmallBlindBetFieldNumber;
const int packetl2c_get_table_scene_info_result::kFullBlindBetFieldNumber;
const int packetl2c_get_table_scene_info_result::kWaitDeclareTimeFieldNumber;
const int packetl2c_get_table_scene_info_result::kCurRewardPoolFieldNumber;
const int packetl2c_get_table_scene_info_result::kAddBetBaseValueFieldNumber;
const int packetl2c_get_table_scene_info_result::kCurBetFieldNumber;
const int packetl2c_get_table_scene_info_result::kPlayerBetInfoFieldNumber;
const int packetl2c_get_table_scene_info_result::kGameInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_table_scene_info_result::packetl2c_get_table_scene_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_get_table_scene_info_result::InitAsDefaultInstance() {
  gameinfo_ = const_cast< ::game_texaspoker_protocols::GameInfo*>(&::game_texaspoker_protocols::GameInfo::default_instance());
}

packetl2c_get_table_scene_info_result::packetl2c_get_table_scene_info_result(const packetl2c_get_table_scene_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_get_table_scene_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15004;
  roomid_ = 0;
  tableid_ = 0;
  gamestate_ = 0;
  smallblindbet_ = GOOGLE_LONGLONG(0);
  fullblindbet_ = GOOGLE_LONGLONG(0);
  waitdeclaretime_ = 0;
  currewardpool_ = GOOGLE_LONGLONG(0);
  addbetbasevalue_ = GOOGLE_LONGLONG(0);
  curbet_ = GOOGLE_LONGLONG(0);
  gameinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_table_scene_info_result::~packetl2c_get_table_scene_info_result() {
  SharedDtor();
}

void packetl2c_get_table_scene_info_result::SharedDtor() {
  if (this != default_instance_) {
    delete gameinfo_;
  }
}

void packetl2c_get_table_scene_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_table_scene_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_table_scene_info_result_descriptor_;
}

const packetl2c_get_table_scene_info_result& packetl2c_get_table_scene_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_get_table_scene_info_result* packetl2c_get_table_scene_info_result::default_instance_ = NULL;

packetl2c_get_table_scene_info_result* packetl2c_get_table_scene_info_result::New() const {
  return new packetl2c_get_table_scene_info_result;
}

void packetl2c_get_table_scene_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15004;
    roomid_ = 0;
    tableid_ = 0;
    gamestate_ = 0;
    smallblindbet_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fullblindbet_ = GOOGLE_LONGLONG(0);
    waitdeclaretime_ = 0;
    currewardpool_ = GOOGLE_LONGLONG(0);
    addbetbasevalue_ = GOOGLE_LONGLONG(0);
    curbet_ = GOOGLE_LONGLONG(0);
    if (has_gameinfo()) {
      if (gameinfo_ != NULL) gameinfo_->::game_texaspoker_protocols::GameInfo::Clear();
    }
  }
  playerlist_.Clear();
  commonpoker_.Clear();
  backpoker_.Clear();
  playerbetinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_table_scene_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_get_table_scene_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomId;
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tableId;
        break;
      }

      // optional int32 tableId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gameState;
        break;
      }

      // optional int32 gameState = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamestate_)));
          set_has_gamestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_playerList;
        break;
      }

      // repeated .game_texaspoker_protocols.PlayerInfo playerList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_playerList;
        if (input->ExpectTag(50)) goto parse_commonPoker;
        break;
      }

      // repeated .game_texaspoker_protocols.PokerInfo commonPoker = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commonPoker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commonpoker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_commonPoker;
        if (input->ExpectTag(58)) goto parse_backPoker;
        break;
      }

      // repeated .game_texaspoker_protocols.PokerInfo backPoker = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backPoker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_backpoker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_backPoker;
        if (input->ExpectTag(64)) goto parse_smallBlindBet;
        break;
      }

      // optional int64 smallBlindBet = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smallBlindBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &smallblindbet_)));
          set_has_smallblindbet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fullBlindBet;
        break;
      }

      // optional int64 fullBlindBet = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fullBlindBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fullblindbet_)));
          set_has_fullblindbet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_waitDeclareTime;
        break;
      }

      // optional int32 waitDeclareTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_waitDeclareTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waitdeclaretime_)));
          set_has_waitdeclaretime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_curRewardPool;
        break;
      }

      // optional int64 curRewardPool = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curRewardPool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currewardpool_)));
          set_has_currewardpool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_addBetBaseValue;
        break;
      }

      // optional int64 addBetBaseValue = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addBetBaseValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &addbetbasevalue_)));
          set_has_addbetbasevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_curBet;
        break;
      }

      // optional int64 curBet = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curbet_)));
          set_has_curbet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_playerBetInfo;
        break;
      }

      // repeated .game_texaspoker_protocols.PlayerBetInfo playerBetInfo = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerBetInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerbetinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_playerBetInfo;
        if (input->ExpectTag(122)) goto parse_gameInfo;
        break;
      }

      // optional .game_texaspoker_protocols.GameInfo gameInfo = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_get_table_scene_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_get_table_scene_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 roomId = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional int32 tableId = 3;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tableid(), output);
  }

  // optional int32 gameState = 4;
  if (has_gamestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gamestate(), output);
  }

  // repeated .game_texaspoker_protocols.PlayerInfo playerList = 5;
  for (int i = 0; i < this->playerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->playerlist(i), output);
  }

  // repeated .game_texaspoker_protocols.PokerInfo commonPoker = 6;
  for (int i = 0; i < this->commonpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->commonpoker(i), output);
  }

  // repeated .game_texaspoker_protocols.PokerInfo backPoker = 7;
  for (int i = 0; i < this->backpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->backpoker(i), output);
  }

  // optional int64 smallBlindBet = 8;
  if (has_smallblindbet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->smallblindbet(), output);
  }

  // optional int64 fullBlindBet = 9;
  if (has_fullblindbet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->fullblindbet(), output);
  }

  // optional int32 waitDeclareTime = 10;
  if (has_waitdeclaretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->waitdeclaretime(), output);
  }

  // optional int64 curRewardPool = 11;
  if (has_currewardpool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->currewardpool(), output);
  }

  // optional int64 addBetBaseValue = 12;
  if (has_addbetbasevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->addbetbasevalue(), output);
  }

  // optional int64 curBet = 13;
  if (has_curbet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->curbet(), output);
  }

  // repeated .game_texaspoker_protocols.PlayerBetInfo playerBetInfo = 14;
  for (int i = 0; i < this->playerbetinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->playerbetinfo(i), output);
  }

  // optional .game_texaspoker_protocols.GameInfo gameInfo = 15;
  if (has_gameinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->gameinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_get_table_scene_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_get_table_scene_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 roomId = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional int32 tableId = 3;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tableid(), target);
  }

  // optional int32 gameState = 4;
  if (has_gamestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gamestate(), target);
  }

  // repeated .game_texaspoker_protocols.PlayerInfo playerList = 5;
  for (int i = 0; i < this->playerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->playerlist(i), target);
  }

  // repeated .game_texaspoker_protocols.PokerInfo commonPoker = 6;
  for (int i = 0; i < this->commonpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->commonpoker(i), target);
  }

  // repeated .game_texaspoker_protocols.PokerInfo backPoker = 7;
  for (int i = 0; i < this->backpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->backpoker(i), target);
  }

  // optional int64 smallBlindBet = 8;
  if (has_smallblindbet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->smallblindbet(), target);
  }

  // optional int64 fullBlindBet = 9;
  if (has_fullblindbet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->fullblindbet(), target);
  }

  // optional int32 waitDeclareTime = 10;
  if (has_waitdeclaretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->waitdeclaretime(), target);
  }

  // optional int64 curRewardPool = 11;
  if (has_currewardpool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->currewardpool(), target);
  }

  // optional int64 addBetBaseValue = 12;
  if (has_addbetbasevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->addbetbasevalue(), target);
  }

  // optional int64 curBet = 13;
  if (has_curbet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->curbet(), target);
  }

  // repeated .game_texaspoker_protocols.PlayerBetInfo playerBetInfo = 14;
  for (int i = 0; i < this->playerbetinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->playerbetinfo(i), target);
  }

  // optional .game_texaspoker_protocols.GameInfo gameInfo = 15;
  if (has_gameinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->gameinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_get_table_scene_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_get_table_scene_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 roomId = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 tableId = 3;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 gameState = 4;
    if (has_gamestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamestate());
    }

    // optional int64 smallBlindBet = 8;
    if (has_smallblindbet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->smallblindbet());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 fullBlindBet = 9;
    if (has_fullblindbet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fullblindbet());
    }

    // optional int32 waitDeclareTime = 10;
    if (has_waitdeclaretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->waitdeclaretime());
    }

    // optional int64 curRewardPool = 11;
    if (has_currewardpool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currewardpool());
    }

    // optional int64 addBetBaseValue = 12;
    if (has_addbetbasevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->addbetbasevalue());
    }

    // optional int64 curBet = 13;
    if (has_curbet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curbet());
    }

    // optional .game_texaspoker_protocols.GameInfo gameInfo = 15;
    if (has_gameinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameinfo());
    }

  }
  // repeated .game_texaspoker_protocols.PlayerInfo playerList = 5;
  total_size += 1 * this->playerlist_size();
  for (int i = 0; i < this->playerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerlist(i));
  }

  // repeated .game_texaspoker_protocols.PokerInfo commonPoker = 6;
  total_size += 1 * this->commonpoker_size();
  for (int i = 0; i < this->commonpoker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commonpoker(i));
  }

  // repeated .game_texaspoker_protocols.PokerInfo backPoker = 7;
  total_size += 1 * this->backpoker_size();
  for (int i = 0; i < this->backpoker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->backpoker(i));
  }

  // repeated .game_texaspoker_protocols.PlayerBetInfo playerBetInfo = 14;
  total_size += 1 * this->playerbetinfo_size();
  for (int i = 0; i < this->playerbetinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerbetinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_table_scene_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_table_scene_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_table_scene_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_table_scene_info_result::MergeFrom(const packetl2c_get_table_scene_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerlist_.MergeFrom(from.playerlist_);
  commonpoker_.MergeFrom(from.commonpoker_);
  backpoker_.MergeFrom(from.backpoker_);
  playerbetinfo_.MergeFrom(from.playerbetinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_gamestate()) {
      set_gamestate(from.gamestate());
    }
    if (from.has_smallblindbet()) {
      set_smallblindbet(from.smallblindbet());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fullblindbet()) {
      set_fullblindbet(from.fullblindbet());
    }
    if (from.has_waitdeclaretime()) {
      set_waitdeclaretime(from.waitdeclaretime());
    }
    if (from.has_currewardpool()) {
      set_currewardpool(from.currewardpool());
    }
    if (from.has_addbetbasevalue()) {
      set_addbetbasevalue(from.addbetbasevalue());
    }
    if (from.has_curbet()) {
      set_curbet(from.curbet());
    }
    if (from.has_gameinfo()) {
      mutable_gameinfo()->::game_texaspoker_protocols::GameInfo::MergeFrom(from.gameinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_table_scene_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_table_scene_info_result::CopyFrom(const packetl2c_get_table_scene_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_table_scene_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_table_scene_info_result::Swap(packetl2c_get_table_scene_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(roomid_, other->roomid_);
    std::swap(tableid_, other->tableid_);
    std::swap(gamestate_, other->gamestate_);
    playerlist_.Swap(&other->playerlist_);
    commonpoker_.Swap(&other->commonpoker_);
    backpoker_.Swap(&other->backpoker_);
    std::swap(smallblindbet_, other->smallblindbet_);
    std::swap(fullblindbet_, other->fullblindbet_);
    std::swap(waitdeclaretime_, other->waitdeclaretime_);
    std::swap(currewardpool_, other->currewardpool_);
    std::swap(addbetbasevalue_, other->addbetbasevalue_);
    std::swap(curbet_, other->curbet_);
    playerbetinfo_.Swap(&other->playerbetinfo_);
    std::swap(gameinfo_, other->gameinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_table_scene_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_table_scene_info_result_descriptor_;
  metadata.reflection = packetl2c_get_table_scene_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_req_declare::kPacketIdFieldNumber;
const int packetc2l_req_declare::kDeclareSelFieldNumber;
const int packetc2l_req_declare::kParamFieldNumber;
#endif  // !_MSC_VER

packetc2l_req_declare::packetc2l_req_declare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_req_declare::InitAsDefaultInstance() {
}

packetc2l_req_declare::packetc2l_req_declare(const packetc2l_req_declare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_req_declare::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10005;
  declaresel_ = 0;
  param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_req_declare::~packetc2l_req_declare() {
  SharedDtor();
}

void packetc2l_req_declare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_req_declare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_req_declare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_req_declare_descriptor_;
}

const packetc2l_req_declare& packetc2l_req_declare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_req_declare* packetc2l_req_declare::default_instance_ = NULL;

packetc2l_req_declare* packetc2l_req_declare::New() const {
  return new packetc2l_req_declare;
}

void packetc2l_req_declare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10005;
    declaresel_ = 0;
    param_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_req_declare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_declare];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_declareSel;
        break;
      }

      // optional int32 declareSel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_declareSel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &declaresel_)));
          set_has_declaresel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param;
        break;
      }

      // optional int32 param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_req_declare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_declare];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 declareSel = 2;
  if (has_declaresel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->declaresel(), output);
  }

  // optional int32 param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_req_declare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_declare];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 declareSel = 2;
  if (has_declaresel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->declaresel(), target);
  }

  // optional int32 param = 3;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_req_declare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_declare];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 declareSel = 2;
    if (has_declaresel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->declaresel());
    }

    // optional int32 param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_req_declare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_req_declare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_req_declare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_req_declare::MergeFrom(const packetc2l_req_declare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_declaresel()) {
      set_declaresel(from.declaresel());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_req_declare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_req_declare::CopyFrom(const packetc2l_req_declare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_req_declare::IsInitialized() const {

  return true;
}

void packetc2l_req_declare::Swap(packetc2l_req_declare* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(declaresel_, other->declaresel_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_req_declare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_req_declare_descriptor_;
  metadata.reflection = packetc2l_req_declare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_req_declare_result::kPacketIdFieldNumber;
const int packetl2c_req_declare_result::kResultFieldNumber;
const int packetl2c_req_declare_result::kCurChipFieldNumber;
const int packetl2c_req_declare_result::kHasBetFieldNumber;
#endif  // !_MSC_VER

packetl2c_req_declare_result::packetl2c_req_declare_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_req_declare_result::InitAsDefaultInstance() {
}

packetl2c_req_declare_result::packetl2c_req_declare_result(const packetl2c_req_declare_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_req_declare_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15006;
  result_ = 0;
  curchip_ = 0;
  hasbet_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_req_declare_result::~packetl2c_req_declare_result() {
  SharedDtor();
}

void packetl2c_req_declare_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_req_declare_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_req_declare_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_req_declare_result_descriptor_;
}

const packetl2c_req_declare_result& packetl2c_req_declare_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_req_declare_result* packetl2c_req_declare_result::default_instance_ = NULL;

packetl2c_req_declare_result* packetl2c_req_declare_result::New() const {
  return new packetl2c_req_declare_result;
}

void packetl2c_req_declare_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15006;
    result_ = 0;
    curchip_ = 0;
    hasbet_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_req_declare_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_declare_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curChip;
        break;
      }

      // optional int32 curChip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curChip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curchip_)));
          set_has_curchip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hasBet;
        break;
      }

      // optional int32 hasBet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasbet_)));
          set_has_hasbet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_req_declare_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_declare_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 curChip = 3;
  if (has_curchip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curchip(), output);
  }

  // optional int32 hasBet = 4;
  if (has_hasbet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hasbet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_req_declare_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_declare_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 curChip = 3;
  if (has_curchip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curchip(), target);
  }

  // optional int32 hasBet = 4;
  if (has_hasbet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hasbet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_req_declare_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_declare_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 curChip = 3;
    if (has_curchip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curchip());
    }

    // optional int32 hasBet = 4;
    if (has_hasbet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasbet());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_req_declare_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_req_declare_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_req_declare_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_req_declare_result::MergeFrom(const packetl2c_req_declare_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_curchip()) {
      set_curchip(from.curchip());
    }
    if (from.has_hasbet()) {
      set_hasbet(from.hasbet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_req_declare_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_req_declare_result::CopyFrom(const packetl2c_req_declare_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_req_declare_result::IsInitialized() const {

  return true;
}

void packetl2c_req_declare_result::Swap(packetl2c_req_declare_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(curchip_, other->curchip_);
    std::swap(hasbet_, other->hasbet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_req_declare_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_req_declare_result_descriptor_;
  metadata.reflection = packetl2c_req_declare_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameInfo::kBankerSeatFieldNumber;
const int GameInfo::kSmallBlindSeatFieldNumber;
const int GameInfo::kBigBlindSeatFieldNumber;
#endif  // !_MSC_VER

GameInfo::GameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameInfo::InitAsDefaultInstance() {
}

GameInfo::GameInfo(const GameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameInfo::SharedCtor() {
  _cached_size_ = 0;
  bankerseat_ = 0;
  smallblindseat_ = 0;
  bigblindseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameInfo::~GameInfo() {
  SharedDtor();
}

void GameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameInfo_descriptor_;
}

const GameInfo& GameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

GameInfo* GameInfo::default_instance_ = NULL;

GameInfo* GameInfo::New() const {
  return new GameInfo;
}

void GameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bankerseat_ = 0;
    smallblindseat_ = 0;
    bigblindseat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bankerSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerseat_)));
          set_has_bankerseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_smallBlindSeat;
        break;
      }

      // optional int32 smallBlindSeat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smallBlindSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smallblindseat_)));
          set_has_smallblindseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bigBlindSeat;
        break;
      }

      // optional int32 bigBlindSeat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bigBlindSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bigblindseat_)));
          set_has_bigblindseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bankerSeat = 1;
  if (has_bankerseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bankerseat(), output);
  }

  // optional int32 smallBlindSeat = 2;
  if (has_smallblindseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->smallblindseat(), output);
  }

  // optional int32 bigBlindSeat = 3;
  if (has_bigblindseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bigblindseat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bankerSeat = 1;
  if (has_bankerseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bankerseat(), target);
  }

  // optional int32 smallBlindSeat = 2;
  if (has_smallblindseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->smallblindseat(), target);
  }

  // optional int32 bigBlindSeat = 3;
  if (has_bigblindseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bigblindseat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bankerSeat = 1;
    if (has_bankerseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerseat());
    }

    // optional int32 smallBlindSeat = 2;
    if (has_smallblindseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smallblindseat());
    }

    // optional int32 bigBlindSeat = 3;
    if (has_bigblindseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bigblindseat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameInfo::MergeFrom(const GameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bankerseat()) {
      set_bankerseat(from.bankerseat());
    }
    if (from.has_smallblindseat()) {
      set_smallblindseat(from.smallblindseat());
    }
    if (from.has_bigblindseat()) {
      set_bigblindseat(from.bigblindseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfo::CopyFrom(const GameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {

  return true;
}

void GameInfo::Swap(GameInfo* other) {
  if (other != this) {
    std::swap(bankerseat_, other->bankerseat_);
    std::swap(smallblindseat_, other->smallblindseat_);
    std::swap(bigblindseat_, other->bigblindseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameInfo_descriptor_;
  metadata.reflection = GameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_game_start_notify::kPacketIdFieldNumber;
const int packetl2c_game_start_notify::kGameInfoFieldNumber;
const int packetl2c_game_start_notify::kPlayerListFieldNumber;
const int packetl2c_game_start_notify::kBackPokerFieldNumber;
const int packetl2c_game_start_notify::kCurRewardPoolFieldNumber;
#endif  // !_MSC_VER

packetl2c_game_start_notify::packetl2c_game_start_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_game_start_notify::InitAsDefaultInstance() {
  gameinfo_ = const_cast< ::game_texaspoker_protocols::GameInfo*>(&::game_texaspoker_protocols::GameInfo::default_instance());
}

packetl2c_game_start_notify::packetl2c_game_start_notify(const packetl2c_game_start_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_game_start_notify::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15007;
  gameinfo_ = NULL;
  currewardpool_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_game_start_notify::~packetl2c_game_start_notify() {
  SharedDtor();
}

void packetl2c_game_start_notify::SharedDtor() {
  if (this != default_instance_) {
    delete gameinfo_;
  }
}

void packetl2c_game_start_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_game_start_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_game_start_notify_descriptor_;
}

const packetl2c_game_start_notify& packetl2c_game_start_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_game_start_notify* packetl2c_game_start_notify::default_instance_ = NULL;

packetl2c_game_start_notify* packetl2c_game_start_notify::New() const {
  return new packetl2c_game_start_notify;
}

void packetl2c_game_start_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15007;
    if (has_gameinfo()) {
      if (gameinfo_ != NULL) gameinfo_->::game_texaspoker_protocols::GameInfo::Clear();
    }
    currewardpool_ = GOOGLE_LONGLONG(0);
  }
  playerlist_.Clear();
  backpoker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_game_start_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start_notify];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gameInfo;
        break;
      }

      // optional .game_texaspoker_protocols.GameInfo gameInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playerList;
        break;
      }

      // repeated .game_texaspoker_protocols.PlayerInfo playerList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playerList;
        if (input->ExpectTag(34)) goto parse_backPoker;
        break;
      }

      // repeated .game_texaspoker_protocols.PokerInfo backPoker = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backPoker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_backpoker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_backPoker;
        if (input->ExpectTag(40)) goto parse_curRewardPool;
        break;
      }

      // optional int64 curRewardPool = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curRewardPool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currewardpool_)));
          set_has_currewardpool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_game_start_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start_notify];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_texaspoker_protocols.GameInfo gameInfo = 2;
  if (has_gameinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gameinfo(), output);
  }

  // repeated .game_texaspoker_protocols.PlayerInfo playerList = 3;
  for (int i = 0; i < this->playerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->playerlist(i), output);
  }

  // repeated .game_texaspoker_protocols.PokerInfo backPoker = 4;
  for (int i = 0; i < this->backpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->backpoker(i), output);
  }

  // optional int64 curRewardPool = 5;
  if (has_currewardpool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->currewardpool(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_game_start_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start_notify];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_texaspoker_protocols.GameInfo gameInfo = 2;
  if (has_gameinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gameinfo(), target);
  }

  // repeated .game_texaspoker_protocols.PlayerInfo playerList = 3;
  for (int i = 0; i < this->playerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->playerlist(i), target);
  }

  // repeated .game_texaspoker_protocols.PokerInfo backPoker = 4;
  for (int i = 0; i < this->backpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->backpoker(i), target);
  }

  // optional int64 curRewardPool = 5;
  if (has_currewardpool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->currewardpool(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_game_start_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start_notify];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_texaspoker_protocols.GameInfo gameInfo = 2;
    if (has_gameinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameinfo());
    }

    // optional int64 curRewardPool = 5;
    if (has_currewardpool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currewardpool());
    }

  }
  // repeated .game_texaspoker_protocols.PlayerInfo playerList = 3;
  total_size += 1 * this->playerlist_size();
  for (int i = 0; i < this->playerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerlist(i));
  }

  // repeated .game_texaspoker_protocols.PokerInfo backPoker = 4;
  total_size += 1 * this->backpoker_size();
  for (int i = 0; i < this->backpoker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->backpoker(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_game_start_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_game_start_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_game_start_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_game_start_notify::MergeFrom(const packetl2c_game_start_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerlist_.MergeFrom(from.playerlist_);
  backpoker_.MergeFrom(from.backpoker_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_gameinfo()) {
      mutable_gameinfo()->::game_texaspoker_protocols::GameInfo::MergeFrom(from.gameinfo());
    }
    if (from.has_currewardpool()) {
      set_currewardpool(from.currewardpool());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_game_start_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_game_start_notify::CopyFrom(const packetl2c_game_start_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_game_start_notify::IsInitialized() const {

  return true;
}

void packetl2c_game_start_notify::Swap(packetl2c_game_start_notify* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(gameinfo_, other->gameinfo_);
    playerlist_.Swap(&other->playerlist_);
    backpoker_.Swap(&other->backpoker_);
    std::swap(currewardpool_, other->currewardpool_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_game_start_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_game_start_notify_descriptor_;
  metadata.reflection = packetl2c_game_start_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_game_wait_notify::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_game_wait_notify::packetl2c_game_wait_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_game_wait_notify::InitAsDefaultInstance() {
}

packetl2c_game_wait_notify::packetl2c_game_wait_notify(const packetl2c_game_wait_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_game_wait_notify::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15011;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_game_wait_notify::~packetl2c_game_wait_notify() {
  SharedDtor();
}

void packetl2c_game_wait_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_game_wait_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_game_wait_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_game_wait_notify_descriptor_;
}

const packetl2c_game_wait_notify& packetl2c_game_wait_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_game_wait_notify* packetl2c_game_wait_notify::default_instance_ = NULL;

packetl2c_game_wait_notify* packetl2c_game_wait_notify::New() const {
  return new packetl2c_game_wait_notify;
}

void packetl2c_game_wait_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15011;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_game_wait_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_wait_notify];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_game_wait_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_wait_notify];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_game_wait_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_wait_notify];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_game_wait_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_wait_notify];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_game_wait_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_game_wait_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_game_wait_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_game_wait_notify::MergeFrom(const packetl2c_game_wait_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_game_wait_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_game_wait_notify::CopyFrom(const packetl2c_game_wait_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_game_wait_notify::IsInitialized() const {

  return true;
}

void packetl2c_game_wait_notify::Swap(packetl2c_game_wait_notify* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_game_wait_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_game_wait_notify_descriptor_;
  metadata.reflection = packetl2c_game_wait_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BalancePlayerInfo::kPlayerIdFieldNumber;
const int BalancePlayerInfo::kSeatFieldNumber;
const int BalancePlayerInfo::kBackPokerFieldNumber;
const int BalancePlayerInfo::kSelPokerFieldNumber;
const int BalancePlayerInfo::kPokerTypeFieldNumber;
const int BalancePlayerInfo::kWinRewardFieldNumber;
const int BalancePlayerInfo::kIsAbandonFieldNumber;
const int BalancePlayerInfo::kIsWinnerFieldNumber;
const int BalancePlayerInfo::kIsShowPokerFieldNumber;
const int BalancePlayerInfo::kRankFieldNumber;
#endif  // !_MSC_VER

BalancePlayerInfo::BalancePlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BalancePlayerInfo::InitAsDefaultInstance() {
}

BalancePlayerInfo::BalancePlayerInfo(const BalancePlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BalancePlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  seat_ = 0;
  pokertype_ = 0;
  winreward_ = 0;
  isabandon_ = false;
  iswinner_ = false;
  isshowpoker_ = false;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BalancePlayerInfo::~BalancePlayerInfo() {
  SharedDtor();
}

void BalancePlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BalancePlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BalancePlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BalancePlayerInfo_descriptor_;
}

const BalancePlayerInfo& BalancePlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

BalancePlayerInfo* BalancePlayerInfo::default_instance_ = NULL;

BalancePlayerInfo* BalancePlayerInfo::New() const {
  return new BalancePlayerInfo;
}

void BalancePlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
    seat_ = 0;
    pokertype_ = 0;
    winreward_ = 0;
    isabandon_ = false;
    iswinner_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isshowpoker_ = false;
    rank_ = 0;
  }
  backpoker_.Clear();
  selpoker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BalancePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seat;
        break;
      }

      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_backPoker;
        break;
      }

      // repeated .game_texaspoker_protocols.PokerInfo backPoker = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backPoker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_backpoker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_backPoker;
        if (input->ExpectTag(34)) goto parse_selPoker;
        break;
      }

      // repeated .game_texaspoker_protocols.PokerInfo selPoker = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selPoker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selpoker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_selPoker;
        if (input->ExpectTag(40)) goto parse_pokerType;
        break;
      }

      // optional int32 pokerType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pokerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pokertype_)));
          set_has_pokertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_winReward;
        break;
      }

      // optional int32 winReward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winreward_)));
          set_has_winreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isAbandon;
        break;
      }

      // optional bool isAbandon = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAbandon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isabandon_)));
          set_has_isabandon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isWinner;
        break;
      }

      // optional bool isWinner = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isWinner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswinner_)));
          set_has_iswinner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isShowPoker;
        break;
      }

      // optional bool isShowPoker = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isShowPoker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshowpoker_)));
          set_has_isshowpoker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_rank;
        break;
      }

      // optional int32 rank = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BalancePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated .game_texaspoker_protocols.PokerInfo backPoker = 3;
  for (int i = 0; i < this->backpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->backpoker(i), output);
  }

  // repeated .game_texaspoker_protocols.PokerInfo selPoker = 4;
  for (int i = 0; i < this->selpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->selpoker(i), output);
  }

  // optional int32 pokerType = 5;
  if (has_pokertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pokertype(), output);
  }

  // optional int32 winReward = 6;
  if (has_winreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->winreward(), output);
  }

  // optional bool isAbandon = 7;
  if (has_isabandon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isabandon(), output);
  }

  // optional bool isWinner = 8;
  if (has_iswinner()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->iswinner(), output);
  }

  // optional bool isShowPoker = 9;
  if (has_isshowpoker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isshowpoker(), output);
  }

  // optional int32 rank = 10;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BalancePlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated .game_texaspoker_protocols.PokerInfo backPoker = 3;
  for (int i = 0; i < this->backpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->backpoker(i), target);
  }

  // repeated .game_texaspoker_protocols.PokerInfo selPoker = 4;
  for (int i = 0; i < this->selpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->selpoker(i), target);
  }

  // optional int32 pokerType = 5;
  if (has_pokertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pokertype(), target);
  }

  // optional int32 winReward = 6;
  if (has_winreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->winreward(), target);
  }

  // optional bool isAbandon = 7;
  if (has_isabandon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isabandon(), target);
  }

  // optional bool isWinner = 8;
  if (has_iswinner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->iswinner(), target);
  }

  // optional bool isShowPoker = 9;
  if (has_isshowpoker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isshowpoker(), target);
  }

  // optional int32 rank = 10;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BalancePlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 pokerType = 5;
    if (has_pokertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pokertype());
    }

    // optional int32 winReward = 6;
    if (has_winreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winreward());
    }

    // optional bool isAbandon = 7;
    if (has_isabandon()) {
      total_size += 1 + 1;
    }

    // optional bool isWinner = 8;
    if (has_iswinner()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isShowPoker = 9;
    if (has_isshowpoker()) {
      total_size += 1 + 1;
    }

    // optional int32 rank = 10;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  // repeated .game_texaspoker_protocols.PokerInfo backPoker = 3;
  total_size += 1 * this->backpoker_size();
  for (int i = 0; i < this->backpoker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->backpoker(i));
  }

  // repeated .game_texaspoker_protocols.PokerInfo selPoker = 4;
  total_size += 1 * this->selpoker_size();
  for (int i = 0; i < this->selpoker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selpoker(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BalancePlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BalancePlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BalancePlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BalancePlayerInfo::MergeFrom(const BalancePlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  backpoker_.MergeFrom(from.backpoker_);
  selpoker_.MergeFrom(from.selpoker_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_pokertype()) {
      set_pokertype(from.pokertype());
    }
    if (from.has_winreward()) {
      set_winreward(from.winreward());
    }
    if (from.has_isabandon()) {
      set_isabandon(from.isabandon());
    }
    if (from.has_iswinner()) {
      set_iswinner(from.iswinner());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isshowpoker()) {
      set_isshowpoker(from.isshowpoker());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BalancePlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BalancePlayerInfo::CopyFrom(const BalancePlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BalancePlayerInfo::IsInitialized() const {

  return true;
}

void BalancePlayerInfo::Swap(BalancePlayerInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(seat_, other->seat_);
    backpoker_.Swap(&other->backpoker_);
    selpoker_.Swap(&other->selpoker_);
    std::swap(pokertype_, other->pokertype_);
    std::swap(winreward_, other->winreward_);
    std::swap(isabandon_, other->isabandon_);
    std::swap(iswinner_, other->iswinner_);
    std::swap(isshowpoker_, other->isshowpoker_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BalancePlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BalancePlayerInfo_descriptor_;
  metadata.reflection = BalancePlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_game_end_notify::kPacketIdFieldNumber;
const int packetl2c_game_end_notify::kCurRewardPoolFieldNumber;
const int packetl2c_game_end_notify::kPlayerListFieldNumber;
const int packetl2c_game_end_notify::kIsAllAbandonFieldNumber;
const int packetl2c_game_end_notify::kCommonPokerFieldNumber;
const int packetl2c_game_end_notify::kPlayerBetInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_game_end_notify::packetl2c_game_end_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_game_end_notify::InitAsDefaultInstance() {
}

packetl2c_game_end_notify::packetl2c_game_end_notify(const packetl2c_game_end_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_game_end_notify::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15009;
  currewardpool_ = GOOGLE_LONGLONG(0);
  isallabandon_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_game_end_notify::~packetl2c_game_end_notify() {
  SharedDtor();
}

void packetl2c_game_end_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_game_end_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_game_end_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_game_end_notify_descriptor_;
}

const packetl2c_game_end_notify& packetl2c_game_end_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_game_end_notify* packetl2c_game_end_notify::default_instance_ = NULL;

packetl2c_game_end_notify* packetl2c_game_end_notify::New() const {
  return new packetl2c_game_end_notify;
}

void packetl2c_game_end_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15009;
    currewardpool_ = GOOGLE_LONGLONG(0);
    isallabandon_ = false;
  }
  playerlist_.Clear();
  commonpoker_.Clear();
  playerbetinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_game_end_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end_notify];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curRewardPool;
        break;
      }

      // optional int64 curRewardPool = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curRewardPool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currewardpool_)));
          set_has_currewardpool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playerList;
        break;
      }

      // repeated .game_texaspoker_protocols.BalancePlayerInfo playerList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playerList;
        if (input->ExpectTag(32)) goto parse_isAllAbandon;
        break;
      }

      // optional bool isAllAbandon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAllAbandon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isallabandon_)));
          set_has_isallabandon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_commonPoker;
        break;
      }

      // repeated .game_texaspoker_protocols.PokerInfo commonPoker = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commonPoker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commonpoker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_commonPoker;
        if (input->ExpectTag(50)) goto parse_playerBetInfo;
        break;
      }

      // repeated .game_texaspoker_protocols.PlayerBetInfo playerBetInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerBetInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerbetinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_playerBetInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_game_end_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end_notify];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int64 curRewardPool = 2;
  if (has_currewardpool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->currewardpool(), output);
  }

  // repeated .game_texaspoker_protocols.BalancePlayerInfo playerList = 3;
  for (int i = 0; i < this->playerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->playerlist(i), output);
  }

  // optional bool isAllAbandon = 4;
  if (has_isallabandon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isallabandon(), output);
  }

  // repeated .game_texaspoker_protocols.PokerInfo commonPoker = 5;
  for (int i = 0; i < this->commonpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->commonpoker(i), output);
  }

  // repeated .game_texaspoker_protocols.PlayerBetInfo playerBetInfo = 6;
  for (int i = 0; i < this->playerbetinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->playerbetinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_game_end_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end_notify];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int64 curRewardPool = 2;
  if (has_currewardpool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->currewardpool(), target);
  }

  // repeated .game_texaspoker_protocols.BalancePlayerInfo playerList = 3;
  for (int i = 0; i < this->playerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->playerlist(i), target);
  }

  // optional bool isAllAbandon = 4;
  if (has_isallabandon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isallabandon(), target);
  }

  // repeated .game_texaspoker_protocols.PokerInfo commonPoker = 5;
  for (int i = 0; i < this->commonpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->commonpoker(i), target);
  }

  // repeated .game_texaspoker_protocols.PlayerBetInfo playerBetInfo = 6;
  for (int i = 0; i < this->playerbetinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->playerbetinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_game_end_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end_notify];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int64 curRewardPool = 2;
    if (has_currewardpool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currewardpool());
    }

    // optional bool isAllAbandon = 4;
    if (has_isallabandon()) {
      total_size += 1 + 1;
    }

  }
  // repeated .game_texaspoker_protocols.BalancePlayerInfo playerList = 3;
  total_size += 1 * this->playerlist_size();
  for (int i = 0; i < this->playerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerlist(i));
  }

  // repeated .game_texaspoker_protocols.PokerInfo commonPoker = 5;
  total_size += 1 * this->commonpoker_size();
  for (int i = 0; i < this->commonpoker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commonpoker(i));
  }

  // repeated .game_texaspoker_protocols.PlayerBetInfo playerBetInfo = 6;
  total_size += 1 * this->playerbetinfo_size();
  for (int i = 0; i < this->playerbetinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerbetinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_game_end_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_game_end_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_game_end_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_game_end_notify::MergeFrom(const packetl2c_game_end_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerlist_.MergeFrom(from.playerlist_);
  commonpoker_.MergeFrom(from.commonpoker_);
  playerbetinfo_.MergeFrom(from.playerbetinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_currewardpool()) {
      set_currewardpool(from.currewardpool());
    }
    if (from.has_isallabandon()) {
      set_isallabandon(from.isallabandon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_game_end_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_game_end_notify::CopyFrom(const packetl2c_game_end_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_game_end_notify::IsInitialized() const {

  return true;
}

void packetl2c_game_end_notify::Swap(packetl2c_game_end_notify* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(currewardpool_, other->currewardpool_);
    playerlist_.Swap(&other->playerlist_);
    std::swap(isallabandon_, other->isallabandon_);
    commonpoker_.Swap(&other->commonpoker_);
    playerbetinfo_.Swap(&other->playerbetinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_game_end_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_game_end_notify_descriptor_;
  metadata.reflection = packetl2c_game_end_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_req_sitdown::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_req_sitdown::packetc2l_req_sitdown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_req_sitdown::InitAsDefaultInstance() {
}

packetc2l_req_sitdown::packetc2l_req_sitdown(const packetc2l_req_sitdown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_req_sitdown::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10006;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_req_sitdown::~packetc2l_req_sitdown() {
  SharedDtor();
}

void packetc2l_req_sitdown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_req_sitdown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_req_sitdown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_req_sitdown_descriptor_;
}

const packetc2l_req_sitdown& packetc2l_req_sitdown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_req_sitdown* packetc2l_req_sitdown::default_instance_ = NULL;

packetc2l_req_sitdown* packetc2l_req_sitdown::New() const {
  return new packetc2l_req_sitdown;
}

void packetc2l_req_sitdown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10006;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_req_sitdown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_sitdown];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_req_sitdown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_sitdown];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_req_sitdown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_sitdown];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_req_sitdown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_sitdown];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_req_sitdown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_req_sitdown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_req_sitdown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_req_sitdown::MergeFrom(const packetc2l_req_sitdown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_req_sitdown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_req_sitdown::CopyFrom(const packetc2l_req_sitdown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_req_sitdown::IsInitialized() const {

  return true;
}

void packetc2l_req_sitdown::Swap(packetc2l_req_sitdown* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_req_sitdown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_req_sitdown_descriptor_;
  metadata.reflection = packetc2l_req_sitdown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_req_sitdown_result::kPacketIdFieldNumber;
const int packetl2c_req_sitdown_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_req_sitdown_result::packetl2c_req_sitdown_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_req_sitdown_result::InitAsDefaultInstance() {
}

packetl2c_req_sitdown_result::packetl2c_req_sitdown_result(const packetl2c_req_sitdown_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_req_sitdown_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15008;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_req_sitdown_result::~packetl2c_req_sitdown_result() {
  SharedDtor();
}

void packetl2c_req_sitdown_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_req_sitdown_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_req_sitdown_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_req_sitdown_result_descriptor_;
}

const packetl2c_req_sitdown_result& packetl2c_req_sitdown_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_req_sitdown_result* packetl2c_req_sitdown_result::default_instance_ = NULL;

packetl2c_req_sitdown_result* packetl2c_req_sitdown_result::New() const {
  return new packetl2c_req_sitdown_result;
}

void packetl2c_req_sitdown_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15008;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_req_sitdown_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_sitdown_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_req_sitdown_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_sitdown_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_req_sitdown_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_sitdown_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_req_sitdown_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_sitdown_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_req_sitdown_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_req_sitdown_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_req_sitdown_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_req_sitdown_result::MergeFrom(const packetl2c_req_sitdown_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_req_sitdown_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_req_sitdown_result::CopyFrom(const packetl2c_req_sitdown_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_req_sitdown_result::IsInitialized() const {

  return true;
}

void packetl2c_req_sitdown_result::Swap(packetl2c_req_sitdown_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_req_sitdown_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_req_sitdown_result_descriptor_;
  metadata.reflection = packetl2c_req_sitdown_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_req_supply::kPacketIdFieldNumber;
const int packetc2l_req_supply::kAutoFieldNumber;
#endif  // !_MSC_VER

packetc2l_req_supply::packetc2l_req_supply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_req_supply::InitAsDefaultInstance() {
}

packetc2l_req_supply::packetc2l_req_supply(const packetc2l_req_supply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_req_supply::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10010;
  auto__ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_req_supply::~packetc2l_req_supply() {
  SharedDtor();
}

void packetc2l_req_supply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_req_supply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_req_supply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_req_supply_descriptor_;
}

const packetc2l_req_supply& packetc2l_req_supply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_req_supply* packetc2l_req_supply::default_instance_ = NULL;

packetc2l_req_supply* packetc2l_req_supply::New() const {
  return new packetc2l_req_supply;
}

void packetc2l_req_supply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10010;
    auto__ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_req_supply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_supply];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_auto;
        break;
      }

      // optional bool auto = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto__)));
          set_has_auto_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_req_supply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_supply];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional bool auto = 2;
  if (has_auto_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->auto_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_req_supply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_supply];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional bool auto = 2;
  if (has_auto_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->auto_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_req_supply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_supply];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool auto = 2;
    if (has_auto_()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_req_supply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_req_supply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_req_supply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_req_supply::MergeFrom(const packetc2l_req_supply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_auto_()) {
      set_auto_(from.auto_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_req_supply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_req_supply::CopyFrom(const packetc2l_req_supply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_req_supply::IsInitialized() const {

  return true;
}

void packetc2l_req_supply::Swap(packetc2l_req_supply* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(auto__, other->auto__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_req_supply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_req_supply_descriptor_;
  metadata.reflection = packetc2l_req_supply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_req_supply_result::kPacketIdFieldNumber;
const int packetl2c_req_supply_result::kAutoFieldNumber;
const int packetl2c_req_supply_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_req_supply_result::packetl2c_req_supply_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_req_supply_result::InitAsDefaultInstance() {
}

packetl2c_req_supply_result::packetl2c_req_supply_result(const packetl2c_req_supply_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_req_supply_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15015;
  auto__ = false;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_req_supply_result::~packetl2c_req_supply_result() {
  SharedDtor();
}

void packetl2c_req_supply_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_req_supply_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_req_supply_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_req_supply_result_descriptor_;
}

const packetl2c_req_supply_result& packetl2c_req_supply_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_req_supply_result* packetl2c_req_supply_result::default_instance_ = NULL;

packetl2c_req_supply_result* packetl2c_req_supply_result::New() const {
  return new packetl2c_req_supply_result;
}

void packetl2c_req_supply_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15015;
    auto__ = false;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_req_supply_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_supply_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_auto;
        break;
      }

      // optional bool auto = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto__)));
          set_has_auto_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_req_supply_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_supply_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional bool auto = 2;
  if (has_auto_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->auto_(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_req_supply_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_supply_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional bool auto = 2;
  if (has_auto_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->auto_(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_req_supply_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_supply_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool auto = 2;
    if (has_auto_()) {
      total_size += 1 + 1;
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_req_supply_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_req_supply_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_req_supply_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_req_supply_result::MergeFrom(const packetl2c_req_supply_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_auto_()) {
      set_auto_(from.auto_());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_req_supply_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_req_supply_result::CopyFrom(const packetl2c_req_supply_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_req_supply_result::IsInitialized() const {

  return true;
}

void packetl2c_req_supply_result::Swap(packetl2c_req_supply_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(auto__, other->auto__);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_req_supply_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_req_supply_result_descriptor_;
  metadata.reflection = packetl2c_req_supply_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_req_chip::kPacketIdFieldNumber;
const int packetc2l_req_chip::kChipFieldNumber;
#endif  // !_MSC_VER

packetc2l_req_chip::packetc2l_req_chip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_req_chip::InitAsDefaultInstance() {
}

packetc2l_req_chip::packetc2l_req_chip(const packetc2l_req_chip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_req_chip::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10011;
  chip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_req_chip::~packetc2l_req_chip() {
  SharedDtor();
}

void packetc2l_req_chip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_req_chip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_req_chip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_req_chip_descriptor_;
}

const packetc2l_req_chip& packetc2l_req_chip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_req_chip* packetc2l_req_chip::default_instance_ = NULL;

packetc2l_req_chip* packetc2l_req_chip::New() const {
  return new packetc2l_req_chip;
}

void packetc2l_req_chip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10011;
    chip_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_req_chip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_chip];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chip;
        break;
      }

      // optional int32 chip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chip_)));
          set_has_chip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_req_chip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_chip];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 chip = 2;
  if (has_chip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_req_chip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_chip];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 chip = 2;
  if (has_chip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_req_chip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_chip];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 chip = 2;
    if (has_chip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_req_chip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_req_chip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_req_chip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_req_chip::MergeFrom(const packetc2l_req_chip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_chip()) {
      set_chip(from.chip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_req_chip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_req_chip::CopyFrom(const packetc2l_req_chip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_req_chip::IsInitialized() const {

  return true;
}

void packetc2l_req_chip::Swap(packetc2l_req_chip* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(chip_, other->chip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_req_chip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_req_chip_descriptor_;
  metadata.reflection = packetc2l_req_chip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_req_chip_result::kPacketIdFieldNumber;
const int packetl2c_req_chip_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_req_chip_result::packetl2c_req_chip_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_req_chip_result::InitAsDefaultInstance() {
}

packetl2c_req_chip_result::packetl2c_req_chip_result(const packetl2c_req_chip_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_req_chip_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15016;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_req_chip_result::~packetl2c_req_chip_result() {
  SharedDtor();
}

void packetl2c_req_chip_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_req_chip_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_req_chip_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_req_chip_result_descriptor_;
}

const packetl2c_req_chip_result& packetl2c_req_chip_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_req_chip_result* packetl2c_req_chip_result::default_instance_ = NULL;

packetl2c_req_chip_result* packetl2c_req_chip_result::New() const {
  return new packetl2c_req_chip_result;
}

void packetl2c_req_chip_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15016;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_req_chip_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_chip_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_req_chip_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_chip_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_req_chip_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_chip_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_req_chip_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_chip_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_req_chip_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_req_chip_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_req_chip_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_req_chip_result::MergeFrom(const packetl2c_req_chip_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_req_chip_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_req_chip_result::CopyFrom(const packetl2c_req_chip_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_req_chip_result::IsInitialized() const {

  return true;
}

void packetl2c_req_chip_result::Swap(packetl2c_req_chip_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_req_chip_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_req_chip_result_descriptor_;
  metadata.reflection = packetl2c_req_chip_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_buy_chip_notify::kPacketIdFieldNumber;
const int packetl2c_buy_chip_notify::kPlayerListFieldNumber;
#endif  // !_MSC_VER

packetl2c_buy_chip_notify::packetl2c_buy_chip_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_buy_chip_notify::InitAsDefaultInstance() {
}

packetl2c_buy_chip_notify::packetl2c_buy_chip_notify(const packetl2c_buy_chip_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_buy_chip_notify::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15010;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_buy_chip_notify::~packetl2c_buy_chip_notify() {
  SharedDtor();
}

void packetl2c_buy_chip_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_buy_chip_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_buy_chip_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_buy_chip_notify_descriptor_;
}

const packetl2c_buy_chip_notify& packetl2c_buy_chip_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_buy_chip_notify* packetl2c_buy_chip_notify::default_instance_ = NULL;

packetl2c_buy_chip_notify* packetl2c_buy_chip_notify::New() const {
  return new packetl2c_buy_chip_notify;
}

void packetl2c_buy_chip_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15010;
  }
  playerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_buy_chip_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_buy_chip_notify];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerList;
        break;
      }

      // repeated .game_texaspoker_protocols.PlayerInfo playerList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_buy_chip_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_buy_chip_notify];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_texaspoker_protocols.PlayerInfo playerList = 2;
  for (int i = 0; i < this->playerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_buy_chip_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_buy_chip_notify];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_texaspoker_protocols.PlayerInfo playerList = 2;
  for (int i = 0; i < this->playerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_buy_chip_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_buy_chip_notify];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_texaspoker_protocols.PlayerInfo playerList = 2;
  total_size += 1 * this->playerlist_size();
  for (int i = 0; i < this->playerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_buy_chip_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_buy_chip_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_buy_chip_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_buy_chip_notify::MergeFrom(const packetl2c_buy_chip_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerlist_.MergeFrom(from.playerlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_buy_chip_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_buy_chip_notify::CopyFrom(const packetl2c_buy_chip_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_buy_chip_notify::IsInitialized() const {

  return true;
}

void packetl2c_buy_chip_notify::Swap(packetl2c_buy_chip_notify* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    playerlist_.Swap(&other->playerlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_buy_chip_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_buy_chip_notify_descriptor_;
  metadata.reflection = packetl2c_buy_chip_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_show_poker::kPacketIdFieldNumber;
const int packetc2l_show_poker::kIsShowFieldNumber;
#endif  // !_MSC_VER

packetc2l_show_poker::packetc2l_show_poker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_show_poker::InitAsDefaultInstance() {
}

packetc2l_show_poker::packetc2l_show_poker(const packetc2l_show_poker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_show_poker::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10007;
  isshow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_show_poker::~packetc2l_show_poker() {
  SharedDtor();
}

void packetc2l_show_poker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_show_poker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_show_poker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_show_poker_descriptor_;
}

const packetc2l_show_poker& packetc2l_show_poker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_show_poker* packetc2l_show_poker::default_instance_ = NULL;

packetc2l_show_poker* packetc2l_show_poker::New() const {
  return new packetc2l_show_poker;
}

void packetc2l_show_poker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10007;
    isshow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_show_poker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_show_poker];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isShow;
        break;
      }

      // optional bool isShow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isShow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshow_)));
          set_has_isshow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_show_poker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_show_poker];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional bool isShow = 2;
  if (has_isshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isshow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_show_poker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_show_poker];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional bool isShow = 2;
  if (has_isshow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isshow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_show_poker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_show_poker];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool isShow = 2;
    if (has_isshow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_show_poker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_show_poker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_show_poker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_show_poker::MergeFrom(const packetc2l_show_poker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_isshow()) {
      set_isshow(from.isshow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_show_poker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_show_poker::CopyFrom(const packetc2l_show_poker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_show_poker::IsInitialized() const {

  return true;
}

void packetc2l_show_poker::Swap(packetc2l_show_poker* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(isshow_, other->isshow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_show_poker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_show_poker_descriptor_;
  metadata.reflection = packetc2l_show_poker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_show_poker_result::kPacketIdFieldNumber;
const int packetl2c_show_poker_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_show_poker_result::packetl2c_show_poker_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_show_poker_result::InitAsDefaultInstance() {
}

packetl2c_show_poker_result::packetl2c_show_poker_result(const packetl2c_show_poker_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_show_poker_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15012;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_show_poker_result::~packetl2c_show_poker_result() {
  SharedDtor();
}

void packetl2c_show_poker_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_show_poker_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_show_poker_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_show_poker_result_descriptor_;
}

const packetl2c_show_poker_result& packetl2c_show_poker_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_show_poker_result* packetl2c_show_poker_result::default_instance_ = NULL;

packetl2c_show_poker_result* packetl2c_show_poker_result::New() const {
  return new packetl2c_show_poker_result;
}

void packetl2c_show_poker_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15012;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_show_poker_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_show_poker_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_show_poker_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_show_poker_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_show_poker_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_show_poker_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_show_poker_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_show_poker_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_show_poker_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_show_poker_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_show_poker_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_show_poker_result::MergeFrom(const packetl2c_show_poker_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_show_poker_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_show_poker_result::CopyFrom(const packetl2c_show_poker_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_show_poker_result::IsInitialized() const {

  return true;
}

void packetl2c_show_poker_result::Swap(packetl2c_show_poker_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_show_poker_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_show_poker_result_descriptor_;
  metadata.reflection = packetl2c_show_poker_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_req_standup::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_req_standup::packetc2l_req_standup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_req_standup::InitAsDefaultInstance() {
}

packetc2l_req_standup::packetc2l_req_standup(const packetc2l_req_standup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_req_standup::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10008;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_req_standup::~packetc2l_req_standup() {
  SharedDtor();
}

void packetc2l_req_standup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_req_standup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_req_standup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_req_standup_descriptor_;
}

const packetc2l_req_standup& packetc2l_req_standup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_req_standup* packetc2l_req_standup::default_instance_ = NULL;

packetc2l_req_standup* packetc2l_req_standup::New() const {
  return new packetc2l_req_standup;
}

void packetc2l_req_standup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10008;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_req_standup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_standup];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_req_standup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_standup];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_req_standup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_standup];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_req_standup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_standup];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_req_standup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_req_standup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_req_standup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_req_standup::MergeFrom(const packetc2l_req_standup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_req_standup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_req_standup::CopyFrom(const packetc2l_req_standup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_req_standup::IsInitialized() const {

  return true;
}

void packetc2l_req_standup::Swap(packetc2l_req_standup* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_req_standup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_req_standup_descriptor_;
  metadata.reflection = packetc2l_req_standup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_req_standup_result::kPacketIdFieldNumber;
const int packetl2c_req_standup_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_req_standup_result::packetl2c_req_standup_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_req_standup_result::InitAsDefaultInstance() {
}

packetl2c_req_standup_result::packetl2c_req_standup_result(const packetl2c_req_standup_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_req_standup_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15013;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_req_standup_result::~packetl2c_req_standup_result() {
  SharedDtor();
}

void packetl2c_req_standup_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_req_standup_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_req_standup_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_req_standup_result_descriptor_;
}

const packetl2c_req_standup_result& packetl2c_req_standup_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_req_standup_result* packetl2c_req_standup_result::default_instance_ = NULL;

packetl2c_req_standup_result* packetl2c_req_standup_result::New() const {
  return new packetl2c_req_standup_result;
}

void packetl2c_req_standup_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15013;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_req_standup_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_standup_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_req_standup_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_standup_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_req_standup_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_standup_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_req_standup_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_standup_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_req_standup_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_req_standup_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_req_standup_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_req_standup_result::MergeFrom(const packetl2c_req_standup_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_req_standup_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_req_standup_result::CopyFrom(const packetl2c_req_standup_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_req_standup_result::IsInitialized() const {

  return true;
}

void packetl2c_req_standup_result::Swap(packetl2c_req_standup_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_req_standup_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_req_standup_result_descriptor_;
  metadata.reflection = packetl2c_req_standup_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_check_state::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_check_state::packetc2l_check_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_check_state::InitAsDefaultInstance() {
}

packetc2l_check_state::packetc2l_check_state(const packetc2l_check_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_check_state::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10009;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_check_state::~packetc2l_check_state() {
  SharedDtor();
}

void packetc2l_check_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_check_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_check_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_check_state_descriptor_;
}

const packetc2l_check_state& packetc2l_check_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_check_state* packetc2l_check_state::default_instance_ = NULL;

packetc2l_check_state* packetc2l_check_state::New() const {
  return new packetc2l_check_state;
}

void packetc2l_check_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10009;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_check_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_check_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_check_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_check_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_check_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_check_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_check_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_check_state::MergeFrom(const packetc2l_check_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_check_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_check_state::CopyFrom(const packetc2l_check_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_check_state::IsInitialized() const {

  return true;
}

void packetc2l_check_state::Swap(packetc2l_check_state* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_check_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_check_state_descriptor_;
  metadata.reflection = packetc2l_check_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_check_state_result::kPacketIdFieldNumber;
const int packetl2c_check_state_result::kIsIntableFieldNumber;
#endif  // !_MSC_VER

packetl2c_check_state_result::packetl2c_check_state_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_check_state_result::InitAsDefaultInstance() {
}

packetl2c_check_state_result::packetl2c_check_state_result(const packetl2c_check_state_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_check_state_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15014;
  is_intable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_check_state_result::~packetl2c_check_state_result() {
  SharedDtor();
}

void packetl2c_check_state_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_check_state_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_check_state_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_check_state_result_descriptor_;
}

const packetl2c_check_state_result& packetl2c_check_state_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_check_state_result* packetl2c_check_state_result::default_instance_ = NULL;

packetl2c_check_state_result* packetl2c_check_state_result::New() const {
  return new packetl2c_check_state_result;
}

void packetl2c_check_state_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15014;
    is_intable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_check_state_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_texaspoker_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_texaspoker_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_intable;
        break;
      }

      // optional bool is_intable = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_intable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_intable_)));
          set_has_is_intable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_check_state_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional bool is_intable = 2 [default = false];
  if (has_is_intable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_intable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_check_state_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional bool is_intable = 2 [default = false];
  if (has_is_intable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_intable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_check_state_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool is_intable = 2 [default = false];
    if (has_is_intable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_check_state_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_check_state_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_check_state_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_check_state_result::MergeFrom(const packetl2c_check_state_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_is_intable()) {
      set_is_intable(from.is_intable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_check_state_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_check_state_result::CopyFrom(const packetl2c_check_state_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_check_state_result::IsInitialized() const {

  return true;
}

void packetl2c_check_state_result::Swap(packetl2c_check_state_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(is_intable_, other->is_intable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_check_state_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_check_state_result_descriptor_;
  metadata.reflection = packetl2c_check_state_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_texaspoker_protocols

// @@protoc_insertion_point(global_scope)
