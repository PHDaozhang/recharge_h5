// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_fruitmachine_def.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_fruitmachine_def.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game_fruitmachine_protocols {

namespace {

const ::google::protobuf::Descriptor* msg_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_result_index_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_result_index_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* e_server_msg_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_game_state_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5ffruitmachine_5fdef_2eproto() {
  protobuf_AddDesc_game_5ffruitmachine_5fdef_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_fruitmachine_def.proto");
  GOOGLE_CHECK(file != NULL);
  msg_bet_info_descriptor_ = file->message_type(0);
  static const int msg_bet_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, bet_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, bet_count_),
  };
  msg_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_bet_info_descriptor_,
      msg_bet_info::default_instance_,
      msg_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_bet_info));
  msg_result_index_descriptor_ = file->message_type(1);
  static const int msg_result_index_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_index, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_index, count_),
  };
  msg_result_index_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_result_index_descriptor_,
      msg_result_index::default_instance_,
      msg_result_index_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_index, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_index, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_result_index));
  e_server_msg_type_descriptor_ = file->enum_type(0);
  e_game_state_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5ffruitmachine_5fdef_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_bet_info_descriptor_, &msg_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_result_index_descriptor_, &msg_result_index::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5ffruitmachine_5fdef_2eproto() {
  delete msg_bet_info::default_instance_;
  delete msg_bet_info_reflection_;
  delete msg_result_index::default_instance_;
  delete msg_result_index_reflection_;
}

void protobuf_AddDesc_game_5ffruitmachine_5fdef_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033game_fruitmachine_def.proto\022\033game_frui"
    "tmachine_protocols\"4\n\014msg_bet_info\022\021\n\tbe"
    "t_index\030\001 \001(\005\022\021\n\tbet_count\030\002 \001(\005\"-\n\020msg_"
    "result_index\022\n\n\002id\030\001 \001(\005\022\r\n\005count\030\002 \001(\005*"
    "\367\006\n\021e_server_msg_type\022\024\n\017e_mst_start_c2l"
    "\020\220N\022\034\n\027e_mst_c2l_get_room_info\020\221N\022\031\n\024e_m"
    "st_c2l_enter_room\020\222N\022\031\n\024e_mst_c2l_leave_"
    "room\020\223N\022\026\n\021e_mst_c2l_add_bet\020\224N\022\031\n\024e_mst"
    "_c2l_repeat_bet\020\225N\022\"\n\035e_mst_c2l_get_room"
    "_scene_info\020\227N\022\032\n\025e_mst_c2l_check_state\020"
    "\230N\022\021\n\014e_mst_c2l_gm\020\231N\022\031\n\024e_mst_c2l_start"
    "_game\020\232N\022\035\n\030e_mst_c2l_start_bigsmall\020\233N\022"
    "\035\n\030e_mst_c2l_break_bigsmall\020\234N\022\031\n\024e_mst_"
    "c2l_cancel_bet\020\235N\022\024\n\017e_mst_c2l_debug\020\236N\022"
    "\024\n\017e_mst_start_l2c\020\230u\022#\n\036e_mst_l2c_get_r"
    "oom_info_result\020\231u\022 \n\033e_mst_l2c_enter_ro"
    "om_result\020\232u\022 \n\033e_mst_l2c_leave_room_res"
    "ult\020\233u\022\026\n\021e_mst_l2c_add_bet\020\234u\022\031\n\024e_mst_"
    "l2c_repeat_bet\020\235u\022\"\n\035e_mst_l2c_get_room_"
    "scene_info\020\242u\022!\n\034e_mst_l2c_check_state_r"
    "esult\020\245u\022\031\n\024e_mst_l2c_start_game\020\246u\022\035\n\030e"
    "_mst_l2c_start_bigsmall\020\247u\022$\n\037e_mst_l2c_"
    "break_bigsmall_result\020\250u\022 \n\033e_mst_l2c_ca"
    "ncel_bet_result\020\251u\022\033\n\026e_mst_l2c_notify_w"
    "ater\020\252u\022\032\n\025e_mst_l2c_player_list\020\253u\022\033\n\026e"
    "_mst_l2c_debug_result\020\254u\022\027\n\021e_mst_clend_"
    "index\020\240\234\001*@\n\014e_game_state\022\025\n\021e_state_gam"
    "e_wait\020\000\022\031\n\025e_state_game_bigsmall\020\001", 1115);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_fruitmachine_def.proto", &protobuf_RegisterTypes);
  msg_bet_info::default_instance_ = new msg_bet_info();
  msg_result_index::default_instance_ = new msg_result_index();
  msg_bet_info::default_instance_->InitAsDefaultInstance();
  msg_result_index::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5ffruitmachine_5fdef_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5ffruitmachine_5fdef_2eproto {
  StaticDescriptorInitializer_game_5ffruitmachine_5fdef_2eproto() {
    protobuf_AddDesc_game_5ffruitmachine_5fdef_2eproto();
  }
} static_descriptor_initializer_game_5ffruitmachine_5fdef_2eproto_;
const ::google::protobuf::EnumDescriptor* e_server_msg_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_server_msg_type_descriptor_;
}
bool e_server_msg_type_IsValid(int value) {
  switch(value) {
    case 10000:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10007:
    case 10008:
    case 10009:
    case 10010:
    case 10011:
    case 10012:
    case 10013:
    case 10014:
    case 15000:
    case 15001:
    case 15002:
    case 15003:
    case 15004:
    case 15005:
    case 15010:
    case 15013:
    case 15014:
    case 15015:
    case 15016:
    case 15017:
    case 15018:
    case 15019:
    case 15020:
    case 20000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_game_state_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_game_state_descriptor_;
}
bool e_game_state_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int msg_bet_info::kBetIndexFieldNumber;
const int msg_bet_info::kBetCountFieldNumber;
#endif  // !_MSC_VER

msg_bet_info::msg_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_bet_info::InitAsDefaultInstance() {
}

msg_bet_info::msg_bet_info(const msg_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_bet_info::SharedCtor() {
  _cached_size_ = 0;
  bet_index_ = 0;
  bet_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_bet_info::~msg_bet_info() {
  SharedDtor();
}

void msg_bet_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_bet_info_descriptor_;
}

const msg_bet_info& msg_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffruitmachine_5fdef_2eproto();
  return *default_instance_;
}

msg_bet_info* msg_bet_info::default_instance_ = NULL;

msg_bet_info* msg_bet_info::New() const {
  return new msg_bet_info;
}

void msg_bet_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bet_index_ = 0;
    bet_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bet_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_index_)));
          set_has_bet_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bet_count;
        break;
      }

      // optional int32 bet_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_count_)));
          set_has_bet_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bet_index = 1;
  if (has_bet_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bet_index(), output);
  }

  // optional int32 bet_count = 2;
  if (has_bet_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bet_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bet_index = 1;
  if (has_bet_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bet_index(), target);
  }

  // optional int32 bet_count = 2;
  if (has_bet_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bet_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_bet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bet_index = 1;
    if (has_bet_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_index());
    }

    // optional int32 bet_count = 2;
    if (has_bet_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_bet_info::MergeFrom(const msg_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bet_index()) {
      set_bet_index(from.bet_index());
    }
    if (from.has_bet_count()) {
      set_bet_count(from.bet_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_bet_info::CopyFrom(const msg_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_bet_info::IsInitialized() const {

  return true;
}

void msg_bet_info::Swap(msg_bet_info* other) {
  if (other != this) {
    std::swap(bet_index_, other->bet_index_);
    std::swap(bet_count_, other->bet_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_bet_info_descriptor_;
  metadata.reflection = msg_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_result_index::kIdFieldNumber;
const int msg_result_index::kCountFieldNumber;
#endif  // !_MSC_VER

msg_result_index::msg_result_index()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_result_index::InitAsDefaultInstance() {
}

msg_result_index::msg_result_index(const msg_result_index& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_result_index::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_result_index::~msg_result_index() {
  SharedDtor();
}

void msg_result_index::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_result_index::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_result_index::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_result_index_descriptor_;
}

const msg_result_index& msg_result_index::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffruitmachine_5fdef_2eproto();
  return *default_instance_;
}

msg_result_index* msg_result_index::default_instance_ = NULL;

msg_result_index* msg_result_index::New() const {
  return new msg_result_index;
}

void msg_result_index::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_result_index::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_result_index::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_result_index::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_result_index::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_result_index::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_result_index* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_result_index*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_result_index::MergeFrom(const msg_result_index& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_result_index::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_result_index::CopyFrom(const msg_result_index& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_result_index::IsInitialized() const {

  return true;
}

void msg_result_index::Swap(msg_result_index* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_result_index::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_result_index_descriptor_;
  metadata.reflection = msg_result_index_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_fruitmachine_protocols

// @@protoc_insertion_point(global_scope)
