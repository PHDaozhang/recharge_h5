// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_dice_def.proto

#ifndef PROTOBUF_game_5fdice_5fdef_2eproto__INCLUDED
#define PROTOBUF_game_5fdice_5fdef_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace dice_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5fdice_5fdef_2eproto();
void protobuf_AssignDesc_game_5fdice_5fdef_2eproto();
void protobuf_ShutdownFile_game_5fdice_5fdef_2eproto();


enum e_dice_type {
  e_dice_type_unknow = 0,
  e_dice_type_big = 1,
  e_dice_type_Leopard1 = 2,
  e_dice_type_Leopard2 = 3,
  e_dice_type_Leopard3 = 4,
  e_dice_type_Leopard4 = 5,
  e_dice_type_Leopard5 = 6,
  e_dice_type_Leopard6 = 7,
  e_dice_type_LeopardAny = 8,
  e_dice_type_small = 9,
  e_dice_type_p4 = 10,
  e_dice_type_p5 = 11,
  e_dice_type_p6 = 12,
  e_dice_type_p7 = 13,
  e_dice_type_p8 = 14,
  e_dice_type_p9 = 15,
  e_dice_type_p10 = 16,
  e_dice_type_p11 = 17,
  e_dice_type_p12 = 18,
  e_dice_type_p13 = 19,
  e_dice_type_p14 = 20,
  e_dice_type_p15 = 21,
  e_dice_type_p16 = 22,
  e_dice_type_p17 = 23,
  e_dice_type_d1 = 24,
  e_dice_type_d2 = 25,
  e_dice_type_d3 = 26,
  e_dice_type_d4 = 27,
  e_dice_type_d5 = 28,
  e_dice_type_d6 = 29
};
bool e_dice_type_IsValid(int value);
const e_dice_type e_dice_type_MIN = e_dice_type_unknow;
const e_dice_type e_dice_type_MAX = e_dice_type_d6;
const int e_dice_type_ARRAYSIZE = e_dice_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_dice_type_descriptor();
inline const ::std::string& e_dice_type_Name(e_dice_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_dice_type_descriptor(), value);
}
inline bool e_dice_type_Parse(
    const ::std::string& name, e_dice_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_dice_type>(
    e_dice_type_descriptor(), name, value);
}
enum e_server_msg_type {
  e_mst_start_c2l = 10000,
  e_mst_c2l_check_state = 10001,
  e_mst_c2l_get_room_info = 10002,
  e_mst_c2l_get_table_info = 10003,
  e_mst_c2l_enter_table = 10004,
  e_mst_c2l_leave_table = 10005,
  e_mst_c2l_bet = 10006,
  e_mst_c2l_unbet = 10007,
  e_mst_c2l_bet_again = 10008,
  e_mst_gm_command = 10009,
  e_mst_chang_table = 10010,
  e_mst_player_list_info = 10011,
  e_mst_c2l_game_control = 10012,
  e_mst_start_l2c = 15000,
  e_mst_l2c_check_state_result = 15001,
  e_mst_l2c_get_room_info_result = 15002,
  e_mst_l2c_get_table_info_result = 15003,
  e_mst_l2c_enter_table_result = 15004,
  e_mst_l2c_leave_table_result = 15005,
  e_mst_bc_shake = 15006,
  e_mst_bc_beginbet = 15007,
  e_mst_bc_endbet = 15008,
  e_mst_bc_dice = 15009,
  e_mst_l2c_bet_result = 15010,
  e_mst_l2c_unbet_result = 15011,
  e_mst_bc_bet = 15012,
  e_mst_bc_unbet = 15013,
  e_mst_bc_table_info = 15014,
  e_mst_bc_gold_change = 15015,
  e_mst_chang_table_result = 15016,
  e_mst_balance_result = 15017,
  e_mst_player_list_info_result = 15018,
  e_mst_bc_other_bet = 15019,
  e_mst_l2c_debuginfo = 15020,
  e_mst_l2c_notice_gm_all_bet_info = 15021,
  e_mst_l2c_game_control_result = 15022,
  e_mst_l2c_bc_debuginfo = 15023,
  e_mst_clend_index = 20000
};
bool e_server_msg_type_IsValid(int value);
const e_server_msg_type e_server_msg_type_MIN = e_mst_start_c2l;
const e_server_msg_type e_server_msg_type_MAX = e_mst_clend_index;
const int e_server_msg_type_ARRAYSIZE = e_server_msg_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_server_msg_type_descriptor();
inline const ::std::string& e_server_msg_type_Name(e_server_msg_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_server_msg_type_descriptor(), value);
}
inline bool e_server_msg_type_Parse(
    const ::std::string& name, e_server_msg_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_server_msg_type>(
    e_server_msg_type_descriptor(), name, value);
}
enum e_msg_gamestate_type {
  e_state_shake = 0,
  e_state_beginbet = 1,
  e_state_endbet = 2,
  e_state_dice = 3,
  e_state_result = 4
};
bool e_msg_gamestate_type_IsValid(int value);
const e_msg_gamestate_type e_msg_gamestate_type_MIN = e_state_shake;
const e_msg_gamestate_type e_msg_gamestate_type_MAX = e_state_result;
const int e_msg_gamestate_type_ARRAYSIZE = e_msg_gamestate_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_msg_gamestate_type_descriptor();
inline const ::std::string& e_msg_gamestate_type_Name(e_msg_gamestate_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_msg_gamestate_type_descriptor(), value);
}
inline bool e_msg_gamestate_type_Parse(
    const ::std::string& name, e_msg_gamestate_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_msg_gamestate_type>(
    e_msg_gamestate_type_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace dice_protocols

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dice_protocols::e_dice_type>() {
  return ::dice_protocols::e_dice_type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dice_protocols::e_server_msg_type>() {
  return ::dice_protocols::e_server_msg_type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dice_protocols::e_msg_gamestate_type>() {
  return ::dice_protocols::e_msg_gamestate_type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fdice_5fdef_2eproto__INCLUDED
