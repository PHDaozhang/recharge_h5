// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_fruits_protocol.proto

#ifndef PROTOBUF_game_5ffruits_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_game_5ffruits_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "game_fruits_def.pb.h"
#include "msg_type_def.pb.h"
// @@protoc_insertion_point(includes)

namespace game_fruits_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5ffruits_5fprotocol_2eproto();
void protobuf_AssignDesc_game_5ffruits_5fprotocol_2eproto();
void protobuf_ShutdownFile_game_5ffruits_5fprotocol_2eproto();

class packetc2l_check_state;
class packetl2c_check_state_result;
class packetc2l_get_room_scene_info;
class packetl2c_get_room_scene_info_result;
class packetc2l_leave_room;
class packetl2c_leave_room_result;
class packetc2l_add_bet;
class packetl2c_add_bet_result;
class packetc2l_repeat_bet;
class packetl2c_repeat_bet_result;
class player_info;
class packetl2c_bc_begin_bet;
class packetl2c_bc_begin_award;
class packetl2c_bc_sync_bets;
class packetc2l_game_control;
class packetl2c_game_control;
class packetl2c_bc_debuginfo;
class msg_bet_info;
class gm_msg_bet_info;
class packetl2c_notice_all_bet_info;
class packetl2c_attention_needLeave;

// ===================================================================

class packetc2l_check_state : public ::google::protobuf::Message {
 public:
  packetc2l_check_state();
  virtual ~packetc2l_check_state();

  packetc2l_check_state(const packetc2l_check_state& from);

  inline packetc2l_check_state& operator=(const packetc2l_check_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_check_state& default_instance();

  void Swap(packetc2l_check_state* other);

  // implements Message ----------------------------------------------

  packetc2l_check_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_check_state& from);
  void MergeFrom(const packetc2l_check_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruits_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruits_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_fruits_protocols.packetc2l_check_state)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruits_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_check_state* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_check_state_result : public ::google::protobuf::Message {
 public:
  packetl2c_check_state_result();
  virtual ~packetl2c_check_state_result();

  packetl2c_check_state_result(const packetl2c_check_state_result& from);

  inline packetl2c_check_state_result& operator=(const packetl2c_check_state_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_check_state_result& default_instance();

  void Swap(packetl2c_check_state_result* other);

  // implements Message ----------------------------------------------

  packetl2c_check_state_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_check_state_result& from);
  void MergeFrom(const packetl2c_check_state_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruits_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruits_protocols::e_server_msg_type value);

  // optional bool is_intable = 2 [default = false];
  inline bool has_is_intable() const;
  inline void clear_is_intable();
  static const int kIsIntableFieldNumber = 2;
  inline bool is_intable() const;
  inline void set_is_intable(bool value);

  // @@protoc_insertion_point(class_scope:game_fruits_protocols.packetl2c_check_state_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_is_intable();
  inline void clear_has_is_intable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  bool is_intable_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruits_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_check_state_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_room_scene_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_room_scene_info();
  virtual ~packetc2l_get_room_scene_info();

  packetc2l_get_room_scene_info(const packetc2l_get_room_scene_info& from);

  inline packetc2l_get_room_scene_info& operator=(const packetc2l_get_room_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_room_scene_info& default_instance();

  void Swap(packetc2l_get_room_scene_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_room_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_room_scene_info& from);
  void MergeFrom(const packetc2l_get_room_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruits_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruits_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_fruits_protocols.packetc2l_get_room_scene_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruits_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_room_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_get_room_scene_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_get_room_scene_info_result();
  virtual ~packetl2c_get_room_scene_info_result();

  packetl2c_get_room_scene_info_result(const packetl2c_get_room_scene_info_result& from);

  inline packetl2c_get_room_scene_info_result& operator=(const packetl2c_get_room_scene_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_get_room_scene_info_result& default_instance();

  void Swap(packetl2c_get_room_scene_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_get_room_scene_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_get_room_scene_info_result& from);
  void MergeFrom(const packetl2c_get_room_scene_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruits_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruits_protocols::e_server_msg_type value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional int32 cd_time = 3;
  inline bool has_cd_time() const;
  inline void clear_cd_time();
  static const int kCdTimeFieldNumber = 3;
  inline ::google::protobuf::int32 cd_time() const;
  inline void set_cd_time(::google::protobuf::int32 value);

  // optional .game_fruits_protocols.e_game_state room_state = 4;
  inline bool has_room_state() const;
  inline void clear_room_state();
  static const int kRoomStateFieldNumber = 4;
  inline ::game_fruits_protocols::e_game_state room_state() const;
  inline void set_room_state(::game_fruits_protocols::e_game_state value);

  // repeated int32 self_bet_list = 5;
  inline int self_bet_list_size() const;
  inline void clear_self_bet_list();
  static const int kSelfBetListFieldNumber = 5;
  inline ::google::protobuf::int32 self_bet_list(int index) const;
  inline void set_self_bet_list(int index, ::google::protobuf::int32 value);
  inline void add_self_bet_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      self_bet_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_self_bet_list();

  // repeated int32 bet_info_list = 6;
  inline int bet_info_list_size() const;
  inline void clear_bet_info_list();
  static const int kBetInfoListFieldNumber = 6;
  inline ::google::protobuf::int32 bet_info_list(int index) const;
  inline void set_bet_info_list(int index, ::google::protobuf::int32 value);
  inline void add_bet_info_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bet_info_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bet_info_list();

  // repeated int32 history_list = 7;
  inline int history_list_size() const;
  inline void clear_history_list();
  static const int kHistoryListFieldNumber = 7;
  inline ::google::protobuf::int32 history_list(int index) const;
  inline void set_history_list(int index, ::google::protobuf::int32 value);
  inline void add_history_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      history_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_history_list();

  // @@protoc_insertion_point(class_scope:game_fruits_protocols.packetl2c_get_room_scene_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_cd_time();
  inline void clear_has_cd_time();
  inline void set_has_room_state();
  inline void clear_has_room_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 cd_time_;
  int room_state_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > self_bet_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bet_info_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > history_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruits_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_get_room_scene_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_leave_room : public ::google::protobuf::Message {
 public:
  packetc2l_leave_room();
  virtual ~packetc2l_leave_room();

  packetc2l_leave_room(const packetc2l_leave_room& from);

  inline packetc2l_leave_room& operator=(const packetc2l_leave_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_leave_room& default_instance();

  void Swap(packetc2l_leave_room* other);

  // implements Message ----------------------------------------------

  packetc2l_leave_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_leave_room& from);
  void MergeFrom(const packetc2l_leave_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruits_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruits_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_fruits_protocols.packetc2l_leave_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruits_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_leave_room* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_leave_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_leave_room_result();
  virtual ~packetl2c_leave_room_result();

  packetl2c_leave_room_result(const packetl2c_leave_room_result& from);

  inline packetl2c_leave_room_result& operator=(const packetl2c_leave_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_leave_room_result& default_instance();

  void Swap(packetl2c_leave_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_leave_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_leave_room_result& from);
  void MergeFrom(const packetl2c_leave_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruits_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruits_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int64 player_gold = 3;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 3;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_fruits_protocols.packetl2c_leave_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int64 player_gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruits_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_leave_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_add_bet : public ::google::protobuf::Message {
 public:
  packetc2l_add_bet();
  virtual ~packetc2l_add_bet();

  packetc2l_add_bet(const packetc2l_add_bet& from);

  inline packetc2l_add_bet& operator=(const packetc2l_add_bet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_add_bet& default_instance();

  void Swap(packetc2l_add_bet* other);

  // implements Message ----------------------------------------------

  packetc2l_add_bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_add_bet& from);
  void MergeFrom(const packetc2l_add_bet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_add_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruits_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruits_protocols::e_server_msg_type value);

  // optional int32 bet_index = 2;
  inline bool has_bet_index() const;
  inline void clear_bet_index();
  static const int kBetIndexFieldNumber = 2;
  inline ::google::protobuf::int32 bet_index() const;
  inline void set_bet_index(::google::protobuf::int32 value);

  // optional int32 bet_count = 3;
  inline bool has_bet_count() const;
  inline void clear_bet_count();
  static const int kBetCountFieldNumber = 3;
  inline ::google::protobuf::int32 bet_count() const;
  inline void set_bet_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_fruits_protocols.packetc2l_add_bet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_bet_index();
  inline void clear_has_bet_index();
  inline void set_has_bet_count();
  inline void clear_has_bet_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 bet_index_;
  ::google::protobuf::int32 bet_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruits_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_add_bet* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_add_bet_result : public ::google::protobuf::Message {
 public:
  packetl2c_add_bet_result();
  virtual ~packetl2c_add_bet_result();

  packetl2c_add_bet_result(const packetl2c_add_bet_result& from);

  inline packetl2c_add_bet_result& operator=(const packetl2c_add_bet_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_add_bet_result& default_instance();

  void Swap(packetl2c_add_bet_result* other);

  // implements Message ----------------------------------------------

  packetl2c_add_bet_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_add_bet_result& from);
  void MergeFrom(const packetl2c_add_bet_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_add_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruits_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruits_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 bet_index = 3;
  inline bool has_bet_index() const;
  inline void clear_bet_index();
  static const int kBetIndexFieldNumber = 3;
  inline ::google::protobuf::int32 bet_index() const;
  inline void set_bet_index(::google::protobuf::int32 value);

  // optional int32 bet_count = 4;
  inline bool has_bet_count() const;
  inline void clear_bet_count();
  static const int kBetCountFieldNumber = 4;
  inline ::google::protobuf::int32 bet_count() const;
  inline void set_bet_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_fruits_protocols.packetl2c_add_bet_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_bet_index();
  inline void clear_has_bet_index();
  inline void set_has_bet_count();
  inline void clear_has_bet_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int32 bet_index_;
  ::google::protobuf::int32 bet_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruits_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_add_bet_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_repeat_bet : public ::google::protobuf::Message {
 public:
  packetc2l_repeat_bet();
  virtual ~packetc2l_repeat_bet();

  packetc2l_repeat_bet(const packetc2l_repeat_bet& from);

  inline packetc2l_repeat_bet& operator=(const packetc2l_repeat_bet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_repeat_bet& default_instance();

  void Swap(packetc2l_repeat_bet* other);

  // implements Message ----------------------------------------------

  packetc2l_repeat_bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_repeat_bet& from);
  void MergeFrom(const packetc2l_repeat_bet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_repeat_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruits_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruits_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_fruits_protocols.packetc2l_repeat_bet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruits_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_repeat_bet* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_repeat_bet_result : public ::google::protobuf::Message {
 public:
  packetl2c_repeat_bet_result();
  virtual ~packetl2c_repeat_bet_result();

  packetl2c_repeat_bet_result(const packetl2c_repeat_bet_result& from);

  inline packetl2c_repeat_bet_result& operator=(const packetl2c_repeat_bet_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_repeat_bet_result& default_instance();

  void Swap(packetl2c_repeat_bet_result* other);

  // implements Message ----------------------------------------------

  packetl2c_repeat_bet_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_repeat_bet_result& from);
  void MergeFrom(const packetl2c_repeat_bet_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_repeat_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruits_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruits_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // repeated int64 self_bet_list = 3;
  inline int self_bet_list_size() const;
  inline void clear_self_bet_list();
  static const int kSelfBetListFieldNumber = 3;
  inline ::google::protobuf::int64 self_bet_list(int index) const;
  inline void set_self_bet_list(int index, ::google::protobuf::int64 value);
  inline void add_self_bet_list(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      self_bet_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_self_bet_list();

  // @@protoc_insertion_point(class_scope:game_fruits_protocols.packetl2c_repeat_bet_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > self_bet_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruits_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_repeat_bet_result* default_instance_;
};
// -------------------------------------------------------------------

class player_info : public ::google::protobuf::Message {
 public:
  player_info();
  virtual ~player_info();

  player_info(const player_info& from);

  inline player_info& operator=(const player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_info& default_instance();

  void Swap(player_info* other);

  // implements Message ----------------------------------------------

  player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_info& from);
  void MergeFrom(const player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional string player_nickname = 2;
  inline bool has_player_nickname() const;
  inline void clear_player_nickname();
  static const int kPlayerNicknameFieldNumber = 2;
  inline const ::std::string& player_nickname() const;
  inline void set_player_nickname(const ::std::string& value);
  inline void set_player_nickname(const char* value);
  inline void set_player_nickname(const char* value, size_t size);
  inline ::std::string* mutable_player_nickname();
  inline ::std::string* release_player_nickname();
  inline void set_allocated_player_nickname(::std::string* player_nickname);

  // optional int32 player_head_frame = 3;
  inline bool has_player_head_frame() const;
  inline void clear_player_head_frame();
  static const int kPlayerHeadFrameFieldNumber = 3;
  inline ::google::protobuf::int32 player_head_frame() const;
  inline void set_player_head_frame(::google::protobuf::int32 value);

  // optional string player_head_custom = 4;
  inline bool has_player_head_custom() const;
  inline void clear_player_head_custom();
  static const int kPlayerHeadCustomFieldNumber = 4;
  inline const ::std::string& player_head_custom() const;
  inline void set_player_head_custom(const ::std::string& value);
  inline void set_player_head_custom(const char* value);
  inline void set_player_head_custom(const char* value, size_t size);
  inline ::std::string* mutable_player_head_custom();
  inline ::std::string* release_player_head_custom();
  inline void set_allocated_player_head_custom(::std::string* player_head_custom);

  // optional int64 player_gold = 5;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 5;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // optional int32 player_sex = 6;
  inline bool has_player_sex() const;
  inline void clear_player_sex();
  static const int kPlayerSexFieldNumber = 6;
  inline ::google::protobuf::int32 player_sex() const;
  inline void set_player_sex(::google::protobuf::int32 value);

  // optional int32 player_vip_lv = 7;
  inline bool has_player_vip_lv() const;
  inline void clear_player_vip_lv();
  static const int kPlayerVipLvFieldNumber = 7;
  inline ::google::protobuf::int32 player_vip_lv() const;
  inline void set_player_vip_lv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_fruits_protocols.player_info)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_nickname();
  inline void clear_has_player_nickname();
  inline void set_has_player_head_frame();
  inline void clear_has_player_head_frame();
  inline void set_has_player_head_custom();
  inline void clear_has_player_head_custom();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();
  inline void set_has_player_sex();
  inline void clear_has_player_sex();
  inline void set_has_player_vip_lv();
  inline void clear_has_player_vip_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_nickname_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 player_head_frame_;
  ::std::string* player_head_custom_;
  ::google::protobuf::int64 player_gold_;
  ::google::protobuf::int32 player_sex_;
  ::google::protobuf::int32 player_vip_lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruits_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static player_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_begin_bet : public ::google::protobuf::Message {
 public:
  packetl2c_bc_begin_bet();
  virtual ~packetl2c_bc_begin_bet();

  packetl2c_bc_begin_bet(const packetl2c_bc_begin_bet& from);

  inline packetl2c_bc_begin_bet& operator=(const packetl2c_bc_begin_bet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_begin_bet& default_instance();

  void Swap(packetl2c_bc_begin_bet* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_begin_bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_begin_bet& from);
  void MergeFrom(const packetl2c_bc_begin_bet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruits_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruits_protocols::e_server_msg_type value);

  // optional int32 cd_time = 2;
  inline bool has_cd_time() const;
  inline void clear_cd_time();
  static const int kCdTimeFieldNumber = 2;
  inline ::google::protobuf::int32 cd_time() const;
  inline void set_cd_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_fruits_protocols.packetl2c_bc_begin_bet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_cd_time();
  inline void clear_has_cd_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 cd_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruits_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_begin_bet* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_begin_award : public ::google::protobuf::Message {
 public:
  packetl2c_bc_begin_award();
  virtual ~packetl2c_bc_begin_award();

  packetl2c_bc_begin_award(const packetl2c_bc_begin_award& from);

  inline packetl2c_bc_begin_award& operator=(const packetl2c_bc_begin_award& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_begin_award& default_instance();

  void Swap(packetl2c_bc_begin_award* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_begin_award* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_begin_award& from);
  void MergeFrom(const packetl2c_bc_begin_award& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_award];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruits_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruits_protocols::e_server_msg_type value);

  // optional int32 m_award_type = 2;
  inline bool has_m_award_type() const;
  inline void clear_m_award_type();
  static const int kMAwardTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_award_type() const;
  inline void set_m_award_type(::google::protobuf::int32 value);

  // repeated int32 m_award_param_list = 3;
  inline int m_award_param_list_size() const;
  inline void clear_m_award_param_list();
  static const int kMAwardParamListFieldNumber = 3;
  inline ::google::protobuf::int32 m_award_param_list(int index) const;
  inline void set_m_award_param_list(int index, ::google::protobuf::int32 value);
  inline void add_m_award_param_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_award_param_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_award_param_list();

  // repeated int64 win_gold = 4;
  inline int win_gold_size() const;
  inline void clear_win_gold();
  static const int kWinGoldFieldNumber = 4;
  inline ::google::protobuf::int64 win_gold(int index) const;
  inline void set_win_gold(int index, ::google::protobuf::int64 value);
  inline void add_win_gold(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      win_gold() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_win_gold();

  // repeated .game_fruits_protocols.player_info player_reward_list = 5;
  inline int player_reward_list_size() const;
  inline void clear_player_reward_list();
  static const int kPlayerRewardListFieldNumber = 5;
  inline const ::game_fruits_protocols::player_info& player_reward_list(int index) const;
  inline ::game_fruits_protocols::player_info* mutable_player_reward_list(int index);
  inline ::game_fruits_protocols::player_info* add_player_reward_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_fruits_protocols::player_info >&
      player_reward_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_fruits_protocols::player_info >*
      mutable_player_reward_list();

  // optional int32 cd_time = 6;
  inline bool has_cd_time() const;
  inline void clear_cd_time();
  static const int kCdTimeFieldNumber = 6;
  inline ::google::protobuf::int32 cd_time() const;
  inline void set_cd_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_fruits_protocols.packetl2c_bc_begin_award)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_m_award_type();
  inline void clear_has_m_award_type();
  inline void set_has_cd_time();
  inline void clear_has_cd_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 m_award_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_award_param_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > win_gold_;
  ::google::protobuf::RepeatedPtrField< ::game_fruits_protocols::player_info > player_reward_list_;
  ::google::protobuf::int32 cd_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruits_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_begin_award* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_sync_bets : public ::google::protobuf::Message {
 public:
  packetl2c_bc_sync_bets();
  virtual ~packetl2c_bc_sync_bets();

  packetl2c_bc_sync_bets(const packetl2c_bc_sync_bets& from);

  inline packetl2c_bc_sync_bets& operator=(const packetl2c_bc_sync_bets& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_sync_bets& default_instance();

  void Swap(packetl2c_bc_sync_bets* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_sync_bets* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_sync_bets& from);
  void MergeFrom(const packetl2c_bc_sync_bets& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_bets];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruits_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruits_protocols::e_server_msg_type value);

  // repeated int64 bet_info_list = 2;
  inline int bet_info_list_size() const;
  inline void clear_bet_info_list();
  static const int kBetInfoListFieldNumber = 2;
  inline ::google::protobuf::int64 bet_info_list(int index) const;
  inline void set_bet_info_list(int index, ::google::protobuf::int64 value);
  inline void add_bet_info_list(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      bet_info_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_bet_info_list();

  // @@protoc_insertion_point(class_scope:game_fruits_protocols.packetl2c_bc_sync_bets)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > bet_info_list_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruits_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_sync_bets* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_game_control : public ::google::protobuf::Message {
 public:
  packetc2l_game_control();
  virtual ~packetc2l_game_control();

  packetc2l_game_control(const packetc2l_game_control& from);

  inline packetc2l_game_control& operator=(const packetc2l_game_control& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_game_control& default_instance();

  void Swap(packetc2l_game_control* other);

  // implements Message ----------------------------------------------

  packetc2l_game_control* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_game_control& from);
  void MergeFrom(const packetc2l_game_control& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_game_control];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruits_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruits_protocols::e_server_msg_type value);

  // optional int32 control = 2 [default = 0];
  inline bool has_control() const;
  inline void clear_control();
  static const int kControlFieldNumber = 2;
  inline ::google::protobuf::int32 control() const;
  inline void set_control(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_fruits_protocols.packetc2l_game_control)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_control();
  inline void clear_has_control();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 control_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruits_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_game_control* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_game_control : public ::google::protobuf::Message {
 public:
  packetl2c_game_control();
  virtual ~packetl2c_game_control();

  packetl2c_game_control(const packetl2c_game_control& from);

  inline packetl2c_game_control& operator=(const packetl2c_game_control& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_game_control& default_instance();

  void Swap(packetl2c_game_control* other);

  // implements Message ----------------------------------------------

  packetl2c_game_control* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_game_control& from);
  void MergeFrom(const packetl2c_game_control& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_control];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruits_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruits_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_fruits_protocols.packetl2c_game_control)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruits_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_game_control* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_debuginfo : public ::google::protobuf::Message {
 public:
  packetl2c_bc_debuginfo();
  virtual ~packetl2c_bc_debuginfo();

  packetl2c_bc_debuginfo(const packetl2c_bc_debuginfo& from);

  inline packetl2c_bc_debuginfo& operator=(const packetl2c_bc_debuginfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_debuginfo& default_instance();

  void Swap(packetl2c_bc_debuginfo* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_debuginfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_debuginfo& from);
  void MergeFrom(const packetl2c_bc_debuginfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruits_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruits_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int64 total_profit = 3 [default = 0];
  inline bool has_total_profit() const;
  inline void clear_total_profit();
  static const int kTotalProfitFieldNumber = 3;
  inline ::google::protobuf::int64 total_profit() const;
  inline void set_total_profit(::google::protobuf::int64 value);

  // optional int64 total_stock = 4 [default = 0];
  inline bool has_total_stock() const;
  inline void clear_total_stock();
  static const int kTotalStockFieldNumber = 4;
  inline ::google::protobuf::int64 total_stock() const;
  inline void set_total_stock(::google::protobuf::int64 value);

  // optional int64 total_Rate = 6 [default = 0];
  inline bool has_total_rate() const;
  inline void clear_total_rate();
  static const int kTotalRateFieldNumber = 6;
  inline ::google::protobuf::int64 total_rate() const;
  inline void set_total_rate(::google::protobuf::int64 value);

  // optional string debug_infos = 5;
  inline bool has_debug_infos() const;
  inline void clear_debug_infos();
  static const int kDebugInfosFieldNumber = 5;
  inline const ::std::string& debug_infos() const;
  inline void set_debug_infos(const ::std::string& value);
  inline void set_debug_infos(const char* value);
  inline void set_debug_infos(const char* value, size_t size);
  inline ::std::string* mutable_debug_infos();
  inline ::std::string* release_debug_infos();
  inline void set_allocated_debug_infos(::std::string* debug_infos);

  // @@protoc_insertion_point(class_scope:game_fruits_protocols.packetl2c_bc_debuginfo)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_total_profit();
  inline void clear_has_total_profit();
  inline void set_has_total_stock();
  inline void clear_has_total_stock();
  inline void set_has_total_rate();
  inline void clear_has_total_rate();
  inline void set_has_debug_infos();
  inline void clear_has_debug_infos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int64 total_profit_;
  ::google::protobuf::int64 total_stock_;
  ::google::protobuf::int64 total_rate_;
  ::std::string* debug_infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruits_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_debuginfo* default_instance_;
};
// -------------------------------------------------------------------

class msg_bet_info : public ::google::protobuf::Message {
 public:
  msg_bet_info();
  virtual ~msg_bet_info();

  msg_bet_info(const msg_bet_info& from);

  inline msg_bet_info& operator=(const msg_bet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_bet_info& default_instance();

  void Swap(msg_bet_info* other);

  // implements Message ----------------------------------------------

  msg_bet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_bet_info& from);
  void MergeFrom(const msg_bet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bet_index = 1;
  inline bool has_bet_index() const;
  inline void clear_bet_index();
  static const int kBetIndexFieldNumber = 1;
  inline ::google::protobuf::int32 bet_index() const;
  inline void set_bet_index(::google::protobuf::int32 value);

  // optional int64 bet_count = 2;
  inline bool has_bet_count() const;
  inline void clear_bet_count();
  static const int kBetCountFieldNumber = 2;
  inline ::google::protobuf::int64 bet_count() const;
  inline void set_bet_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_fruits_protocols.msg_bet_info)
 private:
  inline void set_has_bet_index();
  inline void clear_has_bet_index();
  inline void set_has_bet_count();
  inline void clear_has_bet_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 bet_count_;
  ::google::protobuf::int32 bet_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruits_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_bet_info* default_instance_;
};
// -------------------------------------------------------------------

class gm_msg_bet_info : public ::google::protobuf::Message {
 public:
  gm_msg_bet_info();
  virtual ~gm_msg_bet_info();

  gm_msg_bet_info(const gm_msg_bet_info& from);

  inline gm_msg_bet_info& operator=(const gm_msg_bet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gm_msg_bet_info& default_instance();

  void Swap(gm_msg_bet_info* other);

  // implements Message ----------------------------------------------

  gm_msg_bet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gm_msg_bet_info& from);
  void MergeFrom(const gm_msg_bet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruits_protocols.player_info player_info = 1;
  inline bool has_player_info() const;
  inline void clear_player_info();
  static const int kPlayerInfoFieldNumber = 1;
  inline const ::game_fruits_protocols::player_info& player_info() const;
  inline ::game_fruits_protocols::player_info* mutable_player_info();
  inline ::game_fruits_protocols::player_info* release_player_info();
  inline void set_allocated_player_info(::game_fruits_protocols::player_info* player_info);

  // repeated .game_fruits_protocols.msg_bet_info bet_info = 2;
  inline int bet_info_size() const;
  inline void clear_bet_info();
  static const int kBetInfoFieldNumber = 2;
  inline const ::game_fruits_protocols::msg_bet_info& bet_info(int index) const;
  inline ::game_fruits_protocols::msg_bet_info* mutable_bet_info(int index);
  inline ::game_fruits_protocols::msg_bet_info* add_bet_info();
  inline const ::google::protobuf::RepeatedPtrField< ::game_fruits_protocols::msg_bet_info >&
      bet_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_fruits_protocols::msg_bet_info >*
      mutable_bet_info();

  // @@protoc_insertion_point(class_scope:game_fruits_protocols.gm_msg_bet_info)
 private:
  inline void set_has_player_info();
  inline void clear_has_player_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game_fruits_protocols::player_info* player_info_;
  ::google::protobuf::RepeatedPtrField< ::game_fruits_protocols::msg_bet_info > bet_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruits_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gm_msg_bet_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_all_bet_info : public ::google::protobuf::Message {
 public:
  packetl2c_notice_all_bet_info();
  virtual ~packetl2c_notice_all_bet_info();

  packetl2c_notice_all_bet_info(const packetl2c_notice_all_bet_info& from);

  inline packetl2c_notice_all_bet_info& operator=(const packetl2c_notice_all_bet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_all_bet_info& default_instance();

  void Swap(packetl2c_notice_all_bet_info* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_all_bet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_all_bet_info& from);
  void MergeFrom(const packetl2c_notice_all_bet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruits_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruits_protocols::e_server_msg_type value);

  // repeated .game_fruits_protocols.gm_msg_bet_info bet_info_list = 2;
  inline int bet_info_list_size() const;
  inline void clear_bet_info_list();
  static const int kBetInfoListFieldNumber = 2;
  inline const ::game_fruits_protocols::gm_msg_bet_info& bet_info_list(int index) const;
  inline ::game_fruits_protocols::gm_msg_bet_info* mutable_bet_info_list(int index);
  inline ::game_fruits_protocols::gm_msg_bet_info* add_bet_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_fruits_protocols::gm_msg_bet_info >&
      bet_info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_fruits_protocols::gm_msg_bet_info >*
      mutable_bet_info_list();

  // @@protoc_insertion_point(class_scope:game_fruits_protocols.packetl2c_notice_all_bet_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_fruits_protocols::gm_msg_bet_info > bet_info_list_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruits_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_all_bet_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_attention_needLeave : public ::google::protobuf::Message {
 public:
  packetl2c_attention_needLeave();
  virtual ~packetl2c_attention_needLeave();

  packetl2c_attention_needLeave(const packetl2c_attention_needLeave& from);

  inline packetl2c_attention_needLeave& operator=(const packetl2c_attention_needLeave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_attention_needLeave& default_instance();

  void Swap(packetl2c_attention_needLeave* other);

  // implements Message ----------------------------------------------

  packetl2c_attention_needLeave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_attention_needLeave& from);
  void MergeFrom(const packetl2c_attention_needLeave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_attention_needLeave];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_fruits_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_fruits_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_fruits_protocols.packetl2c_attention_needLeave)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ffruits_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ffruits_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_attention_needLeave* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2l_check_state

// optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
inline bool packetc2l_check_state::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_check_state::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_check_state::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_check_state::clear_packet_id() {
  packet_id_ = 10004;
  clear_has_packet_id();
}
inline ::game_fruits_protocols::e_server_msg_type packetc2l_check_state::packet_id() const {
  return static_cast< ::game_fruits_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_check_state::set_packet_id(::game_fruits_protocols::e_server_msg_type value) {
  assert(::game_fruits_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_check_state_result

// optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
inline bool packetl2c_check_state_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_check_state_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_check_state_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_check_state_result::clear_packet_id() {
  packet_id_ = 15004;
  clear_has_packet_id();
}
inline ::game_fruits_protocols::e_server_msg_type packetl2c_check_state_result::packet_id() const {
  return static_cast< ::game_fruits_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_check_state_result::set_packet_id(::game_fruits_protocols::e_server_msg_type value) {
  assert(::game_fruits_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional bool is_intable = 2 [default = false];
inline bool packetl2c_check_state_result::has_is_intable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_check_state_result::set_has_is_intable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_check_state_result::clear_has_is_intable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_check_state_result::clear_is_intable() {
  is_intable_ = false;
  clear_has_is_intable();
}
inline bool packetl2c_check_state_result::is_intable() const {
  return is_intable_;
}
inline void packetl2c_check_state_result::set_is_intable(bool value) {
  set_has_is_intable();
  is_intable_ = value;
}

// -------------------------------------------------------------------

// packetc2l_get_room_scene_info

// optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
inline bool packetc2l_get_room_scene_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_room_scene_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_room_scene_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_room_scene_info::clear_packet_id() {
  packet_id_ = 10003;
  clear_has_packet_id();
}
inline ::game_fruits_protocols::e_server_msg_type packetc2l_get_room_scene_info::packet_id() const {
  return static_cast< ::game_fruits_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_room_scene_info::set_packet_id(::game_fruits_protocols::e_server_msg_type value) {
  assert(::game_fruits_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_get_room_scene_info_result

// optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
inline bool packetl2c_get_room_scene_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_get_room_scene_info_result::clear_packet_id() {
  packet_id_ = 15003;
  clear_has_packet_id();
}
inline ::game_fruits_protocols::e_server_msg_type packetl2c_get_room_scene_info_result::packet_id() const {
  return static_cast< ::game_fruits_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_get_room_scene_info_result::set_packet_id(::game_fruits_protocols::e_server_msg_type value) {
  assert(::game_fruits_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 room_id = 2;
inline bool packetl2c_get_room_scene_info_result::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_get_room_scene_info_result::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::room_id() const {
  return room_id_;
}
inline void packetl2c_get_room_scene_info_result::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional int32 cd_time = 3;
inline bool packetl2c_get_room_scene_info_result::has_cd_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_cd_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_cd_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_get_room_scene_info_result::clear_cd_time() {
  cd_time_ = 0;
  clear_has_cd_time();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::cd_time() const {
  return cd_time_;
}
inline void packetl2c_get_room_scene_info_result::set_cd_time(::google::protobuf::int32 value) {
  set_has_cd_time();
  cd_time_ = value;
}

// optional .game_fruits_protocols.e_game_state room_state = 4;
inline bool packetl2c_get_room_scene_info_result::has_room_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_room_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_room_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_get_room_scene_info_result::clear_room_state() {
  room_state_ = 0;
  clear_has_room_state();
}
inline ::game_fruits_protocols::e_game_state packetl2c_get_room_scene_info_result::room_state() const {
  return static_cast< ::game_fruits_protocols::e_game_state >(room_state_);
}
inline void packetl2c_get_room_scene_info_result::set_room_state(::game_fruits_protocols::e_game_state value) {
  assert(::game_fruits_protocols::e_game_state_IsValid(value));
  set_has_room_state();
  room_state_ = value;
}

// repeated int32 self_bet_list = 5;
inline int packetl2c_get_room_scene_info_result::self_bet_list_size() const {
  return self_bet_list_.size();
}
inline void packetl2c_get_room_scene_info_result::clear_self_bet_list() {
  self_bet_list_.Clear();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::self_bet_list(int index) const {
  return self_bet_list_.Get(index);
}
inline void packetl2c_get_room_scene_info_result::set_self_bet_list(int index, ::google::protobuf::int32 value) {
  self_bet_list_.Set(index, value);
}
inline void packetl2c_get_room_scene_info_result::add_self_bet_list(::google::protobuf::int32 value) {
  self_bet_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_get_room_scene_info_result::self_bet_list() const {
  return self_bet_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_get_room_scene_info_result::mutable_self_bet_list() {
  return &self_bet_list_;
}

// repeated int32 bet_info_list = 6;
inline int packetl2c_get_room_scene_info_result::bet_info_list_size() const {
  return bet_info_list_.size();
}
inline void packetl2c_get_room_scene_info_result::clear_bet_info_list() {
  bet_info_list_.Clear();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::bet_info_list(int index) const {
  return bet_info_list_.Get(index);
}
inline void packetl2c_get_room_scene_info_result::set_bet_info_list(int index, ::google::protobuf::int32 value) {
  bet_info_list_.Set(index, value);
}
inline void packetl2c_get_room_scene_info_result::add_bet_info_list(::google::protobuf::int32 value) {
  bet_info_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_get_room_scene_info_result::bet_info_list() const {
  return bet_info_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_get_room_scene_info_result::mutable_bet_info_list() {
  return &bet_info_list_;
}

// repeated int32 history_list = 7;
inline int packetl2c_get_room_scene_info_result::history_list_size() const {
  return history_list_.size();
}
inline void packetl2c_get_room_scene_info_result::clear_history_list() {
  history_list_.Clear();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::history_list(int index) const {
  return history_list_.Get(index);
}
inline void packetl2c_get_room_scene_info_result::set_history_list(int index, ::google::protobuf::int32 value) {
  history_list_.Set(index, value);
}
inline void packetl2c_get_room_scene_info_result::add_history_list(::google::protobuf::int32 value) {
  history_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_get_room_scene_info_result::history_list() const {
  return history_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_get_room_scene_info_result::mutable_history_list() {
  return &history_list_;
}

// -------------------------------------------------------------------

// packetc2l_leave_room

// optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
inline bool packetc2l_leave_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_leave_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_leave_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_leave_room::clear_packet_id() {
  packet_id_ = 10002;
  clear_has_packet_id();
}
inline ::game_fruits_protocols::e_server_msg_type packetc2l_leave_room::packet_id() const {
  return static_cast< ::game_fruits_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_leave_room::set_packet_id(::game_fruits_protocols::e_server_msg_type value) {
  assert(::game_fruits_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_leave_room_result

// optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
inline bool packetl2c_leave_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_leave_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_leave_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_leave_room_result::clear_packet_id() {
  packet_id_ = 15002;
  clear_has_packet_id();
}
inline ::game_fruits_protocols::e_server_msg_type packetl2c_leave_room_result::packet_id() const {
  return static_cast< ::game_fruits_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_leave_room_result::set_packet_id(::game_fruits_protocols::e_server_msg_type value) {
  assert(::game_fruits_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
inline bool packetl2c_leave_room_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_leave_room_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_leave_room_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_leave_room_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_leave_room_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_leave_room_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int64 player_gold = 3;
inline bool packetl2c_leave_room_result::has_player_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_leave_room_result::set_has_player_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_leave_room_result::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_leave_room_result::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 packetl2c_leave_room_result::player_gold() const {
  return player_gold_;
}
inline void packetl2c_leave_room_result::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// -------------------------------------------------------------------

// packetc2l_add_bet

// optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_add_bet];
inline bool packetc2l_add_bet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_add_bet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_add_bet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_add_bet::clear_packet_id() {
  packet_id_ = 10005;
  clear_has_packet_id();
}
inline ::game_fruits_protocols::e_server_msg_type packetc2l_add_bet::packet_id() const {
  return static_cast< ::game_fruits_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_add_bet::set_packet_id(::game_fruits_protocols::e_server_msg_type value) {
  assert(::game_fruits_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 bet_index = 2;
inline bool packetc2l_add_bet::has_bet_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_add_bet::set_has_bet_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_add_bet::clear_has_bet_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_add_bet::clear_bet_index() {
  bet_index_ = 0;
  clear_has_bet_index();
}
inline ::google::protobuf::int32 packetc2l_add_bet::bet_index() const {
  return bet_index_;
}
inline void packetc2l_add_bet::set_bet_index(::google::protobuf::int32 value) {
  set_has_bet_index();
  bet_index_ = value;
}

// optional int32 bet_count = 3;
inline bool packetc2l_add_bet::has_bet_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_add_bet::set_has_bet_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_add_bet::clear_has_bet_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_add_bet::clear_bet_count() {
  bet_count_ = 0;
  clear_has_bet_count();
}
inline ::google::protobuf::int32 packetc2l_add_bet::bet_count() const {
  return bet_count_;
}
inline void packetc2l_add_bet::set_bet_count(::google::protobuf::int32 value) {
  set_has_bet_count();
  bet_count_ = value;
}

// -------------------------------------------------------------------

// packetl2c_add_bet_result

// optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_add_bet];
inline bool packetl2c_add_bet_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_add_bet_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_add_bet_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_add_bet_result::clear_packet_id() {
  packet_id_ = 15005;
  clear_has_packet_id();
}
inline ::game_fruits_protocols::e_server_msg_type packetl2c_add_bet_result::packet_id() const {
  return static_cast< ::game_fruits_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_add_bet_result::set_packet_id(::game_fruits_protocols::e_server_msg_type value) {
  assert(::game_fruits_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_add_bet_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_add_bet_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_add_bet_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_add_bet_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_add_bet_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_add_bet_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 bet_index = 3;
inline bool packetl2c_add_bet_result::has_bet_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_add_bet_result::set_has_bet_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_add_bet_result::clear_has_bet_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_add_bet_result::clear_bet_index() {
  bet_index_ = 0;
  clear_has_bet_index();
}
inline ::google::protobuf::int32 packetl2c_add_bet_result::bet_index() const {
  return bet_index_;
}
inline void packetl2c_add_bet_result::set_bet_index(::google::protobuf::int32 value) {
  set_has_bet_index();
  bet_index_ = value;
}

// optional int32 bet_count = 4;
inline bool packetl2c_add_bet_result::has_bet_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_add_bet_result::set_has_bet_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_add_bet_result::clear_has_bet_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_add_bet_result::clear_bet_count() {
  bet_count_ = 0;
  clear_has_bet_count();
}
inline ::google::protobuf::int32 packetl2c_add_bet_result::bet_count() const {
  return bet_count_;
}
inline void packetl2c_add_bet_result::set_bet_count(::google::protobuf::int32 value) {
  set_has_bet_count();
  bet_count_ = value;
}

// -------------------------------------------------------------------

// packetc2l_repeat_bet

// optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_repeat_bet];
inline bool packetc2l_repeat_bet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_repeat_bet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_repeat_bet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_repeat_bet::clear_packet_id() {
  packet_id_ = 10006;
  clear_has_packet_id();
}
inline ::game_fruits_protocols::e_server_msg_type packetc2l_repeat_bet::packet_id() const {
  return static_cast< ::game_fruits_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_repeat_bet::set_packet_id(::game_fruits_protocols::e_server_msg_type value) {
  assert(::game_fruits_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_repeat_bet_result

// optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_repeat_bet];
inline bool packetl2c_repeat_bet_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_repeat_bet_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_repeat_bet_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_repeat_bet_result::clear_packet_id() {
  packet_id_ = 15006;
  clear_has_packet_id();
}
inline ::game_fruits_protocols::e_server_msg_type packetl2c_repeat_bet_result::packet_id() const {
  return static_cast< ::game_fruits_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_repeat_bet_result::set_packet_id(::game_fruits_protocols::e_server_msg_type value) {
  assert(::game_fruits_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_repeat_bet_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_repeat_bet_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_repeat_bet_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_repeat_bet_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_repeat_bet_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_repeat_bet_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// repeated int64 self_bet_list = 3;
inline int packetl2c_repeat_bet_result::self_bet_list_size() const {
  return self_bet_list_.size();
}
inline void packetl2c_repeat_bet_result::clear_self_bet_list() {
  self_bet_list_.Clear();
}
inline ::google::protobuf::int64 packetl2c_repeat_bet_result::self_bet_list(int index) const {
  return self_bet_list_.Get(index);
}
inline void packetl2c_repeat_bet_result::set_self_bet_list(int index, ::google::protobuf::int64 value) {
  self_bet_list_.Set(index, value);
}
inline void packetl2c_repeat_bet_result::add_self_bet_list(::google::protobuf::int64 value) {
  self_bet_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
packetl2c_repeat_bet_result::self_bet_list() const {
  return self_bet_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
packetl2c_repeat_bet_result::mutable_self_bet_list() {
  return &self_bet_list_;
}

// -------------------------------------------------------------------

// player_info

// optional int32 player_id = 1;
inline bool player_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 player_info::player_id() const {
  return player_id_;
}
inline void player_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string player_nickname = 2;
inline bool player_info::has_player_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void player_info::set_has_player_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void player_info::clear_has_player_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void player_info::clear_player_nickname() {
  if (player_nickname_ != &::google::protobuf::internal::kEmptyString) {
    player_nickname_->clear();
  }
  clear_has_player_nickname();
}
inline const ::std::string& player_info::player_nickname() const {
  return *player_nickname_;
}
inline void player_info::set_player_nickname(const ::std::string& value) {
  set_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::kEmptyString) {
    player_nickname_ = new ::std::string;
  }
  player_nickname_->assign(value);
}
inline void player_info::set_player_nickname(const char* value) {
  set_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::kEmptyString) {
    player_nickname_ = new ::std::string;
  }
  player_nickname_->assign(value);
}
inline void player_info::set_player_nickname(const char* value, size_t size) {
  set_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::kEmptyString) {
    player_nickname_ = new ::std::string;
  }
  player_nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* player_info::mutable_player_nickname() {
  set_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::kEmptyString) {
    player_nickname_ = new ::std::string;
  }
  return player_nickname_;
}
inline ::std::string* player_info::release_player_nickname() {
  clear_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_nickname_;
    player_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void player_info::set_allocated_player_nickname(::std::string* player_nickname) {
  if (player_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete player_nickname_;
  }
  if (player_nickname) {
    set_has_player_nickname();
    player_nickname_ = player_nickname;
  } else {
    clear_has_player_nickname();
    player_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 player_head_frame = 3;
inline bool player_info::has_player_head_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void player_info::set_has_player_head_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void player_info::clear_has_player_head_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void player_info::clear_player_head_frame() {
  player_head_frame_ = 0;
  clear_has_player_head_frame();
}
inline ::google::protobuf::int32 player_info::player_head_frame() const {
  return player_head_frame_;
}
inline void player_info::set_player_head_frame(::google::protobuf::int32 value) {
  set_has_player_head_frame();
  player_head_frame_ = value;
}

// optional string player_head_custom = 4;
inline bool player_info::has_player_head_custom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void player_info::set_has_player_head_custom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void player_info::clear_has_player_head_custom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void player_info::clear_player_head_custom() {
  if (player_head_custom_ != &::google::protobuf::internal::kEmptyString) {
    player_head_custom_->clear();
  }
  clear_has_player_head_custom();
}
inline const ::std::string& player_info::player_head_custom() const {
  return *player_head_custom_;
}
inline void player_info::set_player_head_custom(const ::std::string& value) {
  set_has_player_head_custom();
  if (player_head_custom_ == &::google::protobuf::internal::kEmptyString) {
    player_head_custom_ = new ::std::string;
  }
  player_head_custom_->assign(value);
}
inline void player_info::set_player_head_custom(const char* value) {
  set_has_player_head_custom();
  if (player_head_custom_ == &::google::protobuf::internal::kEmptyString) {
    player_head_custom_ = new ::std::string;
  }
  player_head_custom_->assign(value);
}
inline void player_info::set_player_head_custom(const char* value, size_t size) {
  set_has_player_head_custom();
  if (player_head_custom_ == &::google::protobuf::internal::kEmptyString) {
    player_head_custom_ = new ::std::string;
  }
  player_head_custom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* player_info::mutable_player_head_custom() {
  set_has_player_head_custom();
  if (player_head_custom_ == &::google::protobuf::internal::kEmptyString) {
    player_head_custom_ = new ::std::string;
  }
  return player_head_custom_;
}
inline ::std::string* player_info::release_player_head_custom() {
  clear_has_player_head_custom();
  if (player_head_custom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_head_custom_;
    player_head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void player_info::set_allocated_player_head_custom(::std::string* player_head_custom) {
  if (player_head_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete player_head_custom_;
  }
  if (player_head_custom) {
    set_has_player_head_custom();
    player_head_custom_ = player_head_custom;
  } else {
    clear_has_player_head_custom();
    player_head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 player_gold = 5;
inline bool player_info::has_player_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void player_info::set_has_player_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void player_info::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void player_info::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 player_info::player_gold() const {
  return player_gold_;
}
inline void player_info::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// optional int32 player_sex = 6;
inline bool player_info::has_player_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void player_info::set_has_player_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void player_info::clear_has_player_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void player_info::clear_player_sex() {
  player_sex_ = 0;
  clear_has_player_sex();
}
inline ::google::protobuf::int32 player_info::player_sex() const {
  return player_sex_;
}
inline void player_info::set_player_sex(::google::protobuf::int32 value) {
  set_has_player_sex();
  player_sex_ = value;
}

// optional int32 player_vip_lv = 7;
inline bool player_info::has_player_vip_lv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void player_info::set_has_player_vip_lv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void player_info::clear_has_player_vip_lv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void player_info::clear_player_vip_lv() {
  player_vip_lv_ = 0;
  clear_has_player_vip_lv();
}
inline ::google::protobuf::int32 player_info::player_vip_lv() const {
  return player_vip_lv_;
}
inline void player_info::set_player_vip_lv(::google::protobuf::int32 value) {
  set_has_player_vip_lv();
  player_vip_lv_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_begin_bet

// optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_bet];
inline bool packetl2c_bc_begin_bet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_begin_bet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_begin_bet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_begin_bet::clear_packet_id() {
  packet_id_ = 15011;
  clear_has_packet_id();
}
inline ::game_fruits_protocols::e_server_msg_type packetl2c_bc_begin_bet::packet_id() const {
  return static_cast< ::game_fruits_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_begin_bet::set_packet_id(::game_fruits_protocols::e_server_msg_type value) {
  assert(::game_fruits_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 cd_time = 2;
inline bool packetl2c_bc_begin_bet::has_cd_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_begin_bet::set_has_cd_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_begin_bet::clear_has_cd_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_begin_bet::clear_cd_time() {
  cd_time_ = 0;
  clear_has_cd_time();
}
inline ::google::protobuf::int32 packetl2c_bc_begin_bet::cd_time() const {
  return cd_time_;
}
inline void packetl2c_bc_begin_bet::set_cd_time(::google::protobuf::int32 value) {
  set_has_cd_time();
  cd_time_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_begin_award

// optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_award];
inline bool packetl2c_bc_begin_award::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_begin_award::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_begin_award::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_begin_award::clear_packet_id() {
  packet_id_ = 15013;
  clear_has_packet_id();
}
inline ::game_fruits_protocols::e_server_msg_type packetl2c_bc_begin_award::packet_id() const {
  return static_cast< ::game_fruits_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_begin_award::set_packet_id(::game_fruits_protocols::e_server_msg_type value) {
  assert(::game_fruits_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 m_award_type = 2;
inline bool packetl2c_bc_begin_award::has_m_award_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_begin_award::set_has_m_award_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_begin_award::clear_has_m_award_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_begin_award::clear_m_award_type() {
  m_award_type_ = 0;
  clear_has_m_award_type();
}
inline ::google::protobuf::int32 packetl2c_bc_begin_award::m_award_type() const {
  return m_award_type_;
}
inline void packetl2c_bc_begin_award::set_m_award_type(::google::protobuf::int32 value) {
  set_has_m_award_type();
  m_award_type_ = value;
}

// repeated int32 m_award_param_list = 3;
inline int packetl2c_bc_begin_award::m_award_param_list_size() const {
  return m_award_param_list_.size();
}
inline void packetl2c_bc_begin_award::clear_m_award_param_list() {
  m_award_param_list_.Clear();
}
inline ::google::protobuf::int32 packetl2c_bc_begin_award::m_award_param_list(int index) const {
  return m_award_param_list_.Get(index);
}
inline void packetl2c_bc_begin_award::set_m_award_param_list(int index, ::google::protobuf::int32 value) {
  m_award_param_list_.Set(index, value);
}
inline void packetl2c_bc_begin_award::add_m_award_param_list(::google::protobuf::int32 value) {
  m_award_param_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_bc_begin_award::m_award_param_list() const {
  return m_award_param_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_bc_begin_award::mutable_m_award_param_list() {
  return &m_award_param_list_;
}

// repeated int64 win_gold = 4;
inline int packetl2c_bc_begin_award::win_gold_size() const {
  return win_gold_.size();
}
inline void packetl2c_bc_begin_award::clear_win_gold() {
  win_gold_.Clear();
}
inline ::google::protobuf::int64 packetl2c_bc_begin_award::win_gold(int index) const {
  return win_gold_.Get(index);
}
inline void packetl2c_bc_begin_award::set_win_gold(int index, ::google::protobuf::int64 value) {
  win_gold_.Set(index, value);
}
inline void packetl2c_bc_begin_award::add_win_gold(::google::protobuf::int64 value) {
  win_gold_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
packetl2c_bc_begin_award::win_gold() const {
  return win_gold_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
packetl2c_bc_begin_award::mutable_win_gold() {
  return &win_gold_;
}

// repeated .game_fruits_protocols.player_info player_reward_list = 5;
inline int packetl2c_bc_begin_award::player_reward_list_size() const {
  return player_reward_list_.size();
}
inline void packetl2c_bc_begin_award::clear_player_reward_list() {
  player_reward_list_.Clear();
}
inline const ::game_fruits_protocols::player_info& packetl2c_bc_begin_award::player_reward_list(int index) const {
  return player_reward_list_.Get(index);
}
inline ::game_fruits_protocols::player_info* packetl2c_bc_begin_award::mutable_player_reward_list(int index) {
  return player_reward_list_.Mutable(index);
}
inline ::game_fruits_protocols::player_info* packetl2c_bc_begin_award::add_player_reward_list() {
  return player_reward_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_fruits_protocols::player_info >&
packetl2c_bc_begin_award::player_reward_list() const {
  return player_reward_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_fruits_protocols::player_info >*
packetl2c_bc_begin_award::mutable_player_reward_list() {
  return &player_reward_list_;
}

// optional int32 cd_time = 6;
inline bool packetl2c_bc_begin_award::has_cd_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_bc_begin_award::set_has_cd_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_bc_begin_award::clear_has_cd_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_bc_begin_award::clear_cd_time() {
  cd_time_ = 0;
  clear_has_cd_time();
}
inline ::google::protobuf::int32 packetl2c_bc_begin_award::cd_time() const {
  return cd_time_;
}
inline void packetl2c_bc_begin_award::set_cd_time(::google::protobuf::int32 value) {
  set_has_cd_time();
  cd_time_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_sync_bets

// optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_bets];
inline bool packetl2c_bc_sync_bets::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_sync_bets::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_sync_bets::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_sync_bets::clear_packet_id() {
  packet_id_ = 15012;
  clear_has_packet_id();
}
inline ::game_fruits_protocols::e_server_msg_type packetl2c_bc_sync_bets::packet_id() const {
  return static_cast< ::game_fruits_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_sync_bets::set_packet_id(::game_fruits_protocols::e_server_msg_type value) {
  assert(::game_fruits_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated int64 bet_info_list = 2;
inline int packetl2c_bc_sync_bets::bet_info_list_size() const {
  return bet_info_list_.size();
}
inline void packetl2c_bc_sync_bets::clear_bet_info_list() {
  bet_info_list_.Clear();
}
inline ::google::protobuf::int64 packetl2c_bc_sync_bets::bet_info_list(int index) const {
  return bet_info_list_.Get(index);
}
inline void packetl2c_bc_sync_bets::set_bet_info_list(int index, ::google::protobuf::int64 value) {
  bet_info_list_.Set(index, value);
}
inline void packetl2c_bc_sync_bets::add_bet_info_list(::google::protobuf::int64 value) {
  bet_info_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
packetl2c_bc_sync_bets::bet_info_list() const {
  return bet_info_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
packetl2c_bc_sync_bets::mutable_bet_info_list() {
  return &bet_info_list_;
}

// -------------------------------------------------------------------

// packetc2l_game_control

// optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_game_control];
inline bool packetc2l_game_control::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_game_control::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_game_control::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_game_control::clear_packet_id() {
  packet_id_ = 10022;
  clear_has_packet_id();
}
inline ::game_fruits_protocols::e_server_msg_type packetc2l_game_control::packet_id() const {
  return static_cast< ::game_fruits_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_game_control::set_packet_id(::game_fruits_protocols::e_server_msg_type value) {
  assert(::game_fruits_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 control = 2 [default = 0];
inline bool packetc2l_game_control::has_control() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_game_control::set_has_control() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_game_control::clear_has_control() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_game_control::clear_control() {
  control_ = 0;
  clear_has_control();
}
inline ::google::protobuf::int32 packetc2l_game_control::control() const {
  return control_;
}
inline void packetc2l_game_control::set_control(::google::protobuf::int32 value) {
  set_has_control();
  control_ = value;
}

// -------------------------------------------------------------------

// packetl2c_game_control

// optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_control];
inline bool packetl2c_game_control::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_game_control::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_game_control::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_game_control::clear_packet_id() {
  packet_id_ = 15022;
  clear_has_packet_id();
}
inline ::game_fruits_protocols::e_server_msg_type packetl2c_game_control::packet_id() const {
  return static_cast< ::game_fruits_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_game_control::set_packet_id(::game_fruits_protocols::e_server_msg_type value) {
  assert(::game_fruits_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
inline bool packetl2c_game_control::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_game_control::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_game_control::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_game_control::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_game_control::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_game_control::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_debuginfo

// optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
inline bool packetl2c_bc_debuginfo::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_debuginfo::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_debuginfo::clear_packet_id() {
  packet_id_ = 15023;
  clear_has_packet_id();
}
inline ::game_fruits_protocols::e_server_msg_type packetl2c_bc_debuginfo::packet_id() const {
  return static_cast< ::game_fruits_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_debuginfo::set_packet_id(::game_fruits_protocols::e_server_msg_type value) {
  assert(::game_fruits_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_bc_debuginfo::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_debuginfo::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_debuginfo::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_debuginfo::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_debuginfo::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int64 total_profit = 3 [default = 0];
inline bool packetl2c_bc_debuginfo::has_total_profit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_total_profit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_debuginfo::clear_has_total_profit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_debuginfo::clear_total_profit() {
  total_profit_ = GOOGLE_LONGLONG(0);
  clear_has_total_profit();
}
inline ::google::protobuf::int64 packetl2c_bc_debuginfo::total_profit() const {
  return total_profit_;
}
inline void packetl2c_bc_debuginfo::set_total_profit(::google::protobuf::int64 value) {
  set_has_total_profit();
  total_profit_ = value;
}

// optional int64 total_stock = 4 [default = 0];
inline bool packetl2c_bc_debuginfo::has_total_stock() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_total_stock() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_bc_debuginfo::clear_has_total_stock() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_bc_debuginfo::clear_total_stock() {
  total_stock_ = GOOGLE_LONGLONG(0);
  clear_has_total_stock();
}
inline ::google::protobuf::int64 packetl2c_bc_debuginfo::total_stock() const {
  return total_stock_;
}
inline void packetl2c_bc_debuginfo::set_total_stock(::google::protobuf::int64 value) {
  set_has_total_stock();
  total_stock_ = value;
}

// optional int64 total_Rate = 6 [default = 0];
inline bool packetl2c_bc_debuginfo::has_total_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_total_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_bc_debuginfo::clear_has_total_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_bc_debuginfo::clear_total_rate() {
  total_rate_ = GOOGLE_LONGLONG(0);
  clear_has_total_rate();
}
inline ::google::protobuf::int64 packetl2c_bc_debuginfo::total_rate() const {
  return total_rate_;
}
inline void packetl2c_bc_debuginfo::set_total_rate(::google::protobuf::int64 value) {
  set_has_total_rate();
  total_rate_ = value;
}

// optional string debug_infos = 5;
inline bool packetl2c_bc_debuginfo::has_debug_infos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_debug_infos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_bc_debuginfo::clear_has_debug_infos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_bc_debuginfo::clear_debug_infos() {
  if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
    debug_infos_->clear();
  }
  clear_has_debug_infos();
}
inline const ::std::string& packetl2c_bc_debuginfo::debug_infos() const {
  return *debug_infos_;
}
inline void packetl2c_bc_debuginfo::set_debug_infos(const ::std::string& value) {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  debug_infos_->assign(value);
}
inline void packetl2c_bc_debuginfo::set_debug_infos(const char* value) {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  debug_infos_->assign(value);
}
inline void packetl2c_bc_debuginfo::set_debug_infos(const char* value, size_t size) {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  debug_infos_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetl2c_bc_debuginfo::mutable_debug_infos() {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  return debug_infos_;
}
inline ::std::string* packetl2c_bc_debuginfo::release_debug_infos() {
  clear_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = debug_infos_;
    debug_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetl2c_bc_debuginfo::set_allocated_debug_infos(::std::string* debug_infos) {
  if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_infos_;
  }
  if (debug_infos) {
    set_has_debug_infos();
    debug_infos_ = debug_infos;
  } else {
    clear_has_debug_infos();
    debug_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_bet_info

// optional int32 bet_index = 1;
inline bool msg_bet_info::has_bet_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_bet_info::set_has_bet_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_bet_info::clear_has_bet_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_bet_info::clear_bet_index() {
  bet_index_ = 0;
  clear_has_bet_index();
}
inline ::google::protobuf::int32 msg_bet_info::bet_index() const {
  return bet_index_;
}
inline void msg_bet_info::set_bet_index(::google::protobuf::int32 value) {
  set_has_bet_index();
  bet_index_ = value;
}

// optional int64 bet_count = 2;
inline bool msg_bet_info::has_bet_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_bet_info::set_has_bet_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_bet_info::clear_has_bet_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_bet_info::clear_bet_count() {
  bet_count_ = GOOGLE_LONGLONG(0);
  clear_has_bet_count();
}
inline ::google::protobuf::int64 msg_bet_info::bet_count() const {
  return bet_count_;
}
inline void msg_bet_info::set_bet_count(::google::protobuf::int64 value) {
  set_has_bet_count();
  bet_count_ = value;
}

// -------------------------------------------------------------------

// gm_msg_bet_info

// optional .game_fruits_protocols.player_info player_info = 1;
inline bool gm_msg_bet_info::has_player_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gm_msg_bet_info::set_has_player_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gm_msg_bet_info::clear_has_player_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gm_msg_bet_info::clear_player_info() {
  if (player_info_ != NULL) player_info_->::game_fruits_protocols::player_info::Clear();
  clear_has_player_info();
}
inline const ::game_fruits_protocols::player_info& gm_msg_bet_info::player_info() const {
  return player_info_ != NULL ? *player_info_ : *default_instance_->player_info_;
}
inline ::game_fruits_protocols::player_info* gm_msg_bet_info::mutable_player_info() {
  set_has_player_info();
  if (player_info_ == NULL) player_info_ = new ::game_fruits_protocols::player_info;
  return player_info_;
}
inline ::game_fruits_protocols::player_info* gm_msg_bet_info::release_player_info() {
  clear_has_player_info();
  ::game_fruits_protocols::player_info* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
inline void gm_msg_bet_info::set_allocated_player_info(::game_fruits_protocols::player_info* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    set_has_player_info();
  } else {
    clear_has_player_info();
  }
}

// repeated .game_fruits_protocols.msg_bet_info bet_info = 2;
inline int gm_msg_bet_info::bet_info_size() const {
  return bet_info_.size();
}
inline void gm_msg_bet_info::clear_bet_info() {
  bet_info_.Clear();
}
inline const ::game_fruits_protocols::msg_bet_info& gm_msg_bet_info::bet_info(int index) const {
  return bet_info_.Get(index);
}
inline ::game_fruits_protocols::msg_bet_info* gm_msg_bet_info::mutable_bet_info(int index) {
  return bet_info_.Mutable(index);
}
inline ::game_fruits_protocols::msg_bet_info* gm_msg_bet_info::add_bet_info() {
  return bet_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_fruits_protocols::msg_bet_info >&
gm_msg_bet_info::bet_info() const {
  return bet_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_fruits_protocols::msg_bet_info >*
gm_msg_bet_info::mutable_bet_info() {
  return &bet_info_;
}

// -------------------------------------------------------------------

// packetl2c_notice_all_bet_info

// optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
inline bool packetl2c_notice_all_bet_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_all_bet_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_all_bet_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_all_bet_info::clear_packet_id() {
  packet_id_ = 15021;
  clear_has_packet_id();
}
inline ::game_fruits_protocols::e_server_msg_type packetl2c_notice_all_bet_info::packet_id() const {
  return static_cast< ::game_fruits_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_all_bet_info::set_packet_id(::game_fruits_protocols::e_server_msg_type value) {
  assert(::game_fruits_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_fruits_protocols.gm_msg_bet_info bet_info_list = 2;
inline int packetl2c_notice_all_bet_info::bet_info_list_size() const {
  return bet_info_list_.size();
}
inline void packetl2c_notice_all_bet_info::clear_bet_info_list() {
  bet_info_list_.Clear();
}
inline const ::game_fruits_protocols::gm_msg_bet_info& packetl2c_notice_all_bet_info::bet_info_list(int index) const {
  return bet_info_list_.Get(index);
}
inline ::game_fruits_protocols::gm_msg_bet_info* packetl2c_notice_all_bet_info::mutable_bet_info_list(int index) {
  return bet_info_list_.Mutable(index);
}
inline ::game_fruits_protocols::gm_msg_bet_info* packetl2c_notice_all_bet_info::add_bet_info_list() {
  return bet_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_fruits_protocols::gm_msg_bet_info >&
packetl2c_notice_all_bet_info::bet_info_list() const {
  return bet_info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_fruits_protocols::gm_msg_bet_info >*
packetl2c_notice_all_bet_info::mutable_bet_info_list() {
  return &bet_info_list_;
}

// -------------------------------------------------------------------

// packetl2c_attention_needLeave

// optional .game_fruits_protocols.e_server_msg_type packet_id = 1 [default = e_mst_attention_needLeave];
inline bool packetl2c_attention_needLeave::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_attention_needLeave::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_attention_needLeave::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_attention_needLeave::clear_packet_id() {
  packet_id_ = 15029;
  clear_has_packet_id();
}
inline ::game_fruits_protocols::e_server_msg_type packetl2c_attention_needLeave::packet_id() const {
  return static_cast< ::game_fruits_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_attention_needLeave::set_packet_id(::game_fruits_protocols::e_server_msg_type value) {
  assert(::game_fruits_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_fruits_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5ffruits_5fprotocol_2eproto__INCLUDED
