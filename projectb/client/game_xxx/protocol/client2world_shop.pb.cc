// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_shop.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client2world_shop.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

namespace {

const ::google::protobuf::Descriptor* packetw2c_check_apple_order_form_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_check_apple_order_form_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_ask_recharge_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_ask_recharge_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_recharge_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_recharge_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_recharge_new_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_recharge_new_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client2world_5fshop_2eproto() {
  protobuf_AddDesc_client2world_5fshop_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client2world_shop.proto");
  GOOGLE_CHECK(file != NULL);
  packetw2c_check_apple_order_form_descriptor_ = file->message_type(0);
  static const int packetw2c_check_apple_order_form_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_check_apple_order_form, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_check_apple_order_form, apple_),
  };
  packetw2c_check_apple_order_form_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_check_apple_order_form_descriptor_,
      packetw2c_check_apple_order_form::default_instance_,
      packetw2c_check_apple_order_form_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_check_apple_order_form, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_check_apple_order_form, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_check_apple_order_form));
  packetc2w_ask_recharge_history_descriptor_ = file->message_type(1);
  static const int packetc2w_ask_recharge_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_recharge_history, packet_id_),
  };
  packetc2w_ask_recharge_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_ask_recharge_history_descriptor_,
      packetc2w_ask_recharge_history::default_instance_,
      packetc2w_ask_recharge_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_recharge_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_recharge_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_ask_recharge_history));
  packetw2c_recharge_history_result_descriptor_ = file->message_type(2);
  static const int packetw2c_recharge_history_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_recharge_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_recharge_history_result, history_infos_),
  };
  packetw2c_recharge_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_recharge_history_result_descriptor_,
      packetw2c_recharge_history_result::default_instance_,
      packetw2c_recharge_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_recharge_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_recharge_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_recharge_history_result));
  packetw2c_recharge_new_result_descriptor_ = file->message_type(3);
  static const int packetw2c_recharge_new_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_recharge_new_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_recharge_new_result, new_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_recharge_new_result, playerid_),
  };
  packetw2c_recharge_new_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_recharge_new_result_descriptor_,
      packetw2c_recharge_new_result::default_instance_,
      packetw2c_recharge_new_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_recharge_new_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_recharge_new_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_recharge_new_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client2world_5fshop_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_check_apple_order_form_descriptor_, &packetw2c_check_apple_order_form::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_ask_recharge_history_descriptor_, &packetc2w_ask_recharge_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_recharge_history_result_descriptor_, &packetw2c_recharge_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_recharge_new_result_descriptor_, &packetw2c_recharge_new_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client2world_5fshop_2eproto() {
  delete packetw2c_check_apple_order_form::default_instance_;
  delete packetw2c_check_apple_order_form_reflection_;
  delete packetc2w_ask_recharge_history::default_instance_;
  delete packetc2w_ask_recharge_history_reflection_;
  delete packetw2c_recharge_history_result::default_instance_;
  delete packetw2c_recharge_history_result_reflection_;
  delete packetw2c_recharge_new_result::default_instance_;
  delete packetw2c_recharge_new_result_reflection_;
}

void protobuf_AddDesc_client2world_5fshop_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client2world_protocols::protobuf_AddDesc_client2world_5fmsg_5ftype_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027client2world_shop.proto\022\026client2world_"
    "protocols\032\033client2world_msg_type.proto\032\022"
    "msg_type_def.proto\032\022msg_info_def.proto\"\221"
    "\001\n packetw2c_check_apple_order_form\022^\n\tp"
    "acket_id\030\001 \001(\0162).client2world_protocols."
    "e_server_msg_type: e_mst_c2w_check_apple"
    "_order_form\022\r\n\005apple\030\002 \001(\t\"~\n\036packetc2w_"
    "ask_recharge_history\022\\\n\tpacket_id\030\001 \001(\0162"
    ").client2world_protocols.e_server_msg_ty"
    "pe:\036e_mst_c2w_ask_recharge_history\"\233\001\n!p"
    "acketw2c_recharge_history_result\022_\n\tpack"
    "et_id\030\001 \001(\0162).client2world_protocols.e_s"
    "erver_msg_type:!e_mst_w2c_recharge_histo"
    "ry_result\022\025\n\rhistory_infos\030\002 \003(\t\"\241\001\n\035pac"
    "ketw2c_recharge_new_result\022[\n\tpacket_id\030"
    "\001 \001(\0162).client2world_protocols.e_server_"
    "msg_type:\035e_mst_w2c_recharge_new_result\022"
    "\021\n\tnew_infos\030\002 \001(\t\022\020\n\010playerid\030\003 \001(\005", 716);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client2world_shop.proto", &protobuf_RegisterTypes);
  packetw2c_check_apple_order_form::default_instance_ = new packetw2c_check_apple_order_form();
  packetc2w_ask_recharge_history::default_instance_ = new packetc2w_ask_recharge_history();
  packetw2c_recharge_history_result::default_instance_ = new packetw2c_recharge_history_result();
  packetw2c_recharge_new_result::default_instance_ = new packetw2c_recharge_new_result();
  packetw2c_check_apple_order_form::default_instance_->InitAsDefaultInstance();
  packetc2w_ask_recharge_history::default_instance_->InitAsDefaultInstance();
  packetw2c_recharge_history_result::default_instance_->InitAsDefaultInstance();
  packetw2c_recharge_new_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client2world_5fshop_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client2world_5fshop_2eproto {
  StaticDescriptorInitializer_client2world_5fshop_2eproto() {
    protobuf_AddDesc_client2world_5fshop_2eproto();
  }
} static_descriptor_initializer_client2world_5fshop_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetw2c_check_apple_order_form::kPacketIdFieldNumber;
const int packetw2c_check_apple_order_form::kAppleFieldNumber;
#endif  // !_MSC_VER

packetw2c_check_apple_order_form::packetw2c_check_apple_order_form()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_check_apple_order_form::InitAsDefaultInstance() {
}

packetw2c_check_apple_order_form::packetw2c_check_apple_order_form(const packetw2c_check_apple_order_form& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_check_apple_order_form::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5050;
  apple_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_check_apple_order_form::~packetw2c_check_apple_order_form() {
  SharedDtor();
}

void packetw2c_check_apple_order_form::SharedDtor() {
  if (apple_ != &::google::protobuf::internal::kEmptyString) {
    delete apple_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_check_apple_order_form::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_check_apple_order_form::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_check_apple_order_form_descriptor_;
}

const packetw2c_check_apple_order_form& packetw2c_check_apple_order_form::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fshop_2eproto();
  return *default_instance_;
}

packetw2c_check_apple_order_form* packetw2c_check_apple_order_form::default_instance_ = NULL;

packetw2c_check_apple_order_form* packetw2c_check_apple_order_form::New() const {
  return new packetw2c_check_apple_order_form;
}

void packetw2c_check_apple_order_form::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5050;
    if (has_apple()) {
      if (apple_ != &::google::protobuf::internal::kEmptyString) {
        apple_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_check_apple_order_form::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_check_apple_order_form];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apple;
        break;
      }

      // optional string apple = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apple:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apple()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->apple().data(), this->apple().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_check_apple_order_form::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_check_apple_order_form];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string apple = 2;
  if (has_apple()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apple().data(), this->apple().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->apple(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_check_apple_order_form::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_check_apple_order_form];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string apple = 2;
  if (has_apple()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apple().data(), this->apple().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->apple(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_check_apple_order_form::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_check_apple_order_form];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string apple = 2;
    if (has_apple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apple());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_check_apple_order_form::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_check_apple_order_form* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_check_apple_order_form*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_check_apple_order_form::MergeFrom(const packetw2c_check_apple_order_form& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_apple()) {
      set_apple(from.apple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_check_apple_order_form::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_check_apple_order_form::CopyFrom(const packetw2c_check_apple_order_form& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_check_apple_order_form::IsInitialized() const {

  return true;
}

void packetw2c_check_apple_order_form::Swap(packetw2c_check_apple_order_form* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(apple_, other->apple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_check_apple_order_form::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_check_apple_order_form_descriptor_;
  metadata.reflection = packetw2c_check_apple_order_form_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_ask_recharge_history::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_ask_recharge_history::packetc2w_ask_recharge_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_ask_recharge_history::InitAsDefaultInstance() {
}

packetc2w_ask_recharge_history::packetc2w_ask_recharge_history(const packetc2w_ask_recharge_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_ask_recharge_history::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5065;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_ask_recharge_history::~packetc2w_ask_recharge_history() {
  SharedDtor();
}

void packetc2w_ask_recharge_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_ask_recharge_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_ask_recharge_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_ask_recharge_history_descriptor_;
}

const packetc2w_ask_recharge_history& packetc2w_ask_recharge_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fshop_2eproto();
  return *default_instance_;
}

packetc2w_ask_recharge_history* packetc2w_ask_recharge_history::default_instance_ = NULL;

packetc2w_ask_recharge_history* packetc2w_ask_recharge_history::New() const {
  return new packetc2w_ask_recharge_history;
}

void packetc2w_ask_recharge_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5065;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_ask_recharge_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_recharge_history];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_ask_recharge_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_recharge_history];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_ask_recharge_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_recharge_history];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_ask_recharge_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_recharge_history];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_ask_recharge_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_ask_recharge_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_ask_recharge_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_ask_recharge_history::MergeFrom(const packetc2w_ask_recharge_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_ask_recharge_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_ask_recharge_history::CopyFrom(const packetc2w_ask_recharge_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_ask_recharge_history::IsInitialized() const {

  return true;
}

void packetc2w_ask_recharge_history::Swap(packetc2w_ask_recharge_history* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_ask_recharge_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_ask_recharge_history_descriptor_;
  metadata.reflection = packetc2w_ask_recharge_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_recharge_history_result::kPacketIdFieldNumber;
const int packetw2c_recharge_history_result::kHistoryInfosFieldNumber;
#endif  // !_MSC_VER

packetw2c_recharge_history_result::packetw2c_recharge_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_recharge_history_result::InitAsDefaultInstance() {
}

packetw2c_recharge_history_result::packetw2c_recharge_history_result(const packetw2c_recharge_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_recharge_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7571;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_recharge_history_result::~packetw2c_recharge_history_result() {
  SharedDtor();
}

void packetw2c_recharge_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_recharge_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_recharge_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_recharge_history_result_descriptor_;
}

const packetw2c_recharge_history_result& packetw2c_recharge_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fshop_2eproto();
  return *default_instance_;
}

packetw2c_recharge_history_result* packetw2c_recharge_history_result::default_instance_ = NULL;

packetw2c_recharge_history_result* packetw2c_recharge_history_result::New() const {
  return new packetw2c_recharge_history_result;
}

void packetw2c_recharge_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7571;
  }
  history_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_recharge_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_recharge_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_history_infos;
        break;
      }

      // repeated string history_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_history_infos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->history_infos(this->history_infos_size() - 1).data(),
            this->history_infos(this->history_infos_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_history_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_recharge_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_recharge_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated string history_infos = 2;
  for (int i = 0; i < this->history_infos_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->history_infos(i).data(), this->history_infos(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->history_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_recharge_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_recharge_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated string history_infos = 2;
  for (int i = 0; i < this->history_infos_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->history_infos(i).data(), this->history_infos(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->history_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_recharge_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_recharge_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated string history_infos = 2;
  total_size += 1 * this->history_infos_size();
  for (int i = 0; i < this->history_infos_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->history_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_recharge_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_recharge_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_recharge_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_recharge_history_result::MergeFrom(const packetw2c_recharge_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_infos_.MergeFrom(from.history_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_recharge_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_recharge_history_result::CopyFrom(const packetw2c_recharge_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_recharge_history_result::IsInitialized() const {

  return true;
}

void packetw2c_recharge_history_result::Swap(packetw2c_recharge_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    history_infos_.Swap(&other->history_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_recharge_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_recharge_history_result_descriptor_;
  metadata.reflection = packetw2c_recharge_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_recharge_new_result::kPacketIdFieldNumber;
const int packetw2c_recharge_new_result::kNewInfosFieldNumber;
const int packetw2c_recharge_new_result::kPlayeridFieldNumber;
#endif  // !_MSC_VER

packetw2c_recharge_new_result::packetw2c_recharge_new_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_recharge_new_result::InitAsDefaultInstance() {
}

packetw2c_recharge_new_result::packetw2c_recharge_new_result(const packetw2c_recharge_new_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_recharge_new_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7591;
  new_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_recharge_new_result::~packetw2c_recharge_new_result() {
  SharedDtor();
}

void packetw2c_recharge_new_result::SharedDtor() {
  if (new_infos_ != &::google::protobuf::internal::kEmptyString) {
    delete new_infos_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_recharge_new_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_recharge_new_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_recharge_new_result_descriptor_;
}

const packetw2c_recharge_new_result& packetw2c_recharge_new_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fshop_2eproto();
  return *default_instance_;
}

packetw2c_recharge_new_result* packetw2c_recharge_new_result::default_instance_ = NULL;

packetw2c_recharge_new_result* packetw2c_recharge_new_result::New() const {
  return new packetw2c_recharge_new_result;
}

void packetw2c_recharge_new_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7591;
    if (has_new_infos()) {
      if (new_infos_ != &::google::protobuf::internal::kEmptyString) {
        new_infos_->clear();
      }
    }
    playerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_recharge_new_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_recharge_new_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_infos;
        break;
      }

      // optional string new_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_infos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_infos().data(), this->new_infos().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }

      // optional int32 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_recharge_new_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_recharge_new_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string new_infos = 2;
  if (has_new_infos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_infos().data(), this->new_infos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->new_infos(), output);
  }

  // optional int32 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_recharge_new_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_recharge_new_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string new_infos = 2;
  if (has_new_infos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_infos().data(), this->new_infos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->new_infos(), target);
  }

  // optional int32 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_recharge_new_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_recharge_new_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string new_infos = 2;
    if (has_new_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_infos());
    }

    // optional int32 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_recharge_new_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_recharge_new_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_recharge_new_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_recharge_new_result::MergeFrom(const packetw2c_recharge_new_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_new_infos()) {
      set_new_infos(from.new_infos());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_recharge_new_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_recharge_new_result::CopyFrom(const packetw2c_recharge_new_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_recharge_new_result::IsInitialized() const {

  return true;
}

void packetw2c_recharge_new_result::Swap(packetw2c_recharge_new_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(new_infos_, other->new_infos_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_recharge_new_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_recharge_new_result_descriptor_;
  metadata.reflection = packetw2c_recharge_new_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

// @@protoc_insertion_point(global_scope)
