// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client_protocols {

namespace {

const ::google::protobuf::Descriptor* msg_c2s_heartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_c2s_heartbeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_s2c_heartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_s2c_heartbeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_s2c_send_msglist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_s2c_send_msglist_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_s2c_net_param_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_s2c_net_param_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_c2s_net_param_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_c2s_net_param_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_s2c_shutdown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_s2c_shutdown_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_t2t_start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_t2t_start_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_c2s_connect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_c2s_connect_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_s2c_connect_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_s2c_connect_result_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* client_msg_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_5fmsg_2eproto() {
  protobuf_AddDesc_client_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client_msg.proto");
  GOOGLE_CHECK(file != NULL);
  msg_c2s_heartbeat_descriptor_ = file->message_type(0);
  static const int msg_c2s_heartbeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_c2s_heartbeat, packet_id_),
  };
  msg_c2s_heartbeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_c2s_heartbeat_descriptor_,
      msg_c2s_heartbeat::default_instance_,
      msg_c2s_heartbeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_c2s_heartbeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_c2s_heartbeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_c2s_heartbeat));
  msg_s2c_heartbeat_descriptor_ = file->message_type(1);
  static const int msg_s2c_heartbeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_heartbeat, packet_id_),
  };
  msg_s2c_heartbeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_s2c_heartbeat_descriptor_,
      msg_s2c_heartbeat::default_instance_,
      msg_s2c_heartbeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_heartbeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_heartbeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_s2c_heartbeat));
  msg_list_descriptor_ = file->message_type(2);
  static const int msg_list_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_list, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_list, msginfo_),
  };
  msg_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_list_descriptor_,
      msg_list::default_instance_,
      msg_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_list));
  msg_s2c_send_msglist_descriptor_ = file->message_type(3);
  static const int msg_s2c_send_msglist_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_send_msglist, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_send_msglist, msgpaks_),
  };
  msg_s2c_send_msglist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_s2c_send_msglist_descriptor_,
      msg_s2c_send_msglist::default_instance_,
      msg_s2c_send_msglist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_send_msglist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_send_msglist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_s2c_send_msglist));
  msg_s2c_net_param_descriptor_ = file->message_type(4);
  static const int msg_s2c_net_param_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_net_param, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_net_param, param_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_net_param, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_net_param, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_net_param, shutdown_),
  };
  msg_s2c_net_param_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_s2c_net_param_descriptor_,
      msg_s2c_net_param::default_instance_,
      msg_s2c_net_param_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_net_param, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_net_param, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_s2c_net_param));
  msg_c2s_net_param_descriptor_ = file->message_type(5);
  static const int msg_c2s_net_param_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_c2s_net_param, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_c2s_net_param, param_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_c2s_net_param, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_c2s_net_param, param2_),
  };
  msg_c2s_net_param_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_c2s_net_param_descriptor_,
      msg_c2s_net_param::default_instance_,
      msg_c2s_net_param_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_c2s_net_param, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_c2s_net_param, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_c2s_net_param));
  msg_s2c_shutdown_descriptor_ = file->message_type(6);
  static const int msg_s2c_shutdown_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_shutdown, packet_id_),
  };
  msg_s2c_shutdown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_s2c_shutdown_descriptor_,
      msg_s2c_shutdown::default_instance_,
      msg_s2c_shutdown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_shutdown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_shutdown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_s2c_shutdown));
  msg_t2t_start_descriptor_ = file->message_type(7);
  static const int msg_t2t_start_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_t2t_start, packet_id_),
  };
  msg_t2t_start_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_t2t_start_descriptor_,
      msg_t2t_start::default_instance_,
      msg_t2t_start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_t2t_start, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_t2t_start, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_t2t_start));
  msg_c2s_connect_descriptor_ = file->message_type(8);
  static const int msg_c2s_connect_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_c2s_connect, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_c2s_connect, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_c2s_connect, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_c2s_connect, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_c2s_connect, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_c2s_connect, login_platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_c2s_connect, machine_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_c2s_connect, machine_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_c2s_connect, channelid_),
  };
  msg_c2s_connect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_c2s_connect_descriptor_,
      msg_c2s_connect::default_instance_,
      msg_c2s_connect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_c2s_connect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_c2s_connect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_c2s_connect));
  msg_s2c_connect_result_descriptor_ = file->message_type(9);
  static const int msg_s2c_connect_result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_connect_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_connect_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_connect_result, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_connect_result, gaming_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_connect_result, ver_),
  };
  msg_s2c_connect_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_s2c_connect_result_descriptor_,
      msg_s2c_connect_result::default_instance_,
      msg_s2c_connect_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_connect_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_s2c_connect_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_s2c_connect_result));
  client_msg_type_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_c2s_heartbeat_descriptor_, &msg_c2s_heartbeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_s2c_heartbeat_descriptor_, &msg_s2c_heartbeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_list_descriptor_, &msg_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_s2c_send_msglist_descriptor_, &msg_s2c_send_msglist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_s2c_net_param_descriptor_, &msg_s2c_net_param::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_c2s_net_param_descriptor_, &msg_c2s_net_param::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_s2c_shutdown_descriptor_, &msg_s2c_shutdown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_t2t_start_descriptor_, &msg_t2t_start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_c2s_connect_descriptor_, &msg_c2s_connect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_s2c_connect_result_descriptor_, &msg_s2c_connect_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_5fmsg_2eproto() {
  delete msg_c2s_heartbeat::default_instance_;
  delete msg_c2s_heartbeat_reflection_;
  delete msg_s2c_heartbeat::default_instance_;
  delete msg_s2c_heartbeat_reflection_;
  delete msg_list::default_instance_;
  delete msg_list_reflection_;
  delete msg_s2c_send_msglist::default_instance_;
  delete msg_s2c_send_msglist_reflection_;
  delete msg_s2c_net_param::default_instance_;
  delete msg_s2c_net_param_reflection_;
  delete msg_c2s_net_param::default_instance_;
  delete msg_c2s_net_param_reflection_;
  delete msg_s2c_shutdown::default_instance_;
  delete msg_s2c_shutdown_reflection_;
  delete msg_t2t_start::default_instance_;
  delete msg_t2t_start_reflection_;
  delete msg_c2s_connect::default_instance_;
  delete msg_c2s_connect_reflection_;
  delete msg_s2c_connect_result::default_instance_;
  delete msg_s2c_connect_result_reflection_;
}

void protobuf_AddDesc_client_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020client_msg.proto\022\020client_protocols\"X\n\021"
    "msg_c2s_heartbeat\022C\n\tpacket_id\030\001 \001(\0162!.c"
    "lient_protocols.client_msg_type:\rc2s_hea"
    "rtbeat\"X\n\021msg_s2c_heartbeat\022C\n\tpacket_id"
    "\030\001 \001(\0162!.client_protocols.client_msg_typ"
    "e:\rs2c_heartbeat\"*\n\010msg_list\022\r\n\005msgid\030\001 "
    "\001(\005\022\017\n\007msginfo\030\002 \001(\014\"\213\001\n\024msg_s2c_send_ms"
    "glist\022F\n\tpacket_id\030\001 \001(\0162!.client_protoc"
    "ols.client_msg_type:\020s2c_send_msglist\022+\n"
    "\007msgpaks\030\003 \003(\0132\032.client_protocols.msg_li"
    "st\"\236\001\n\021msg_s2c_net_param\022C\n\tpacket_id\030\001 "
    "\001(\0162!.client_protocols.client_msg_type:\r"
    "s2c_net_param\022\022\n\nparam_type\030\002 \001(\005\022\016\n\006par"
    "am1\030\003 \001(\014\022\016\n\006param2\030\004 \001(\014\022\020\n\010shutdown\030\005 "
    "\001(\010\"\214\001\n\021msg_c2s_net_param\022C\n\tpacket_id\030\001"
    " \001(\0162!.client_protocols.client_msg_type:"
    "\rc2s_net_param\022\022\n\nparam_type\030\002 \001(\005\022\016\n\006pa"
    "ram1\030\003 \001(\014\022\016\n\006param2\030\004 \001(\014\"V\n\020msg_s2c_sh"
    "utdown\022B\n\tpacket_id\030\001 \001(\0162!.client_proto"
    "cols.client_msg_type:\014s2c_shutdown\"P\n\rms"
    "g_t2t_start\022\?\n\tpacket_id\030\001 \001(\0162!.client_"
    "protocols.client_msg_type:\tt2t_start\"\353\001\n"
    "\017msg_c2s_connect\022A\n\tpacket_id\030\001 \001(\0162!.cl"
    "ient_protocols.client_msg_type:\013c2s_conn"
    "ect\022\017\n\007account\030\002 \001(\t\022\r\n\005token\030\003 \001(\t\022\014\n\004s"
    "ign\030\004 \001(\t\022\020\n\010platform\030\005 \001(\t\022\026\n\016login_pla"
    "tform\030\006 \001(\t\022\024\n\014machine_code\030\007 \001(\t\022\024\n\014mac"
    "hine_type\030\010 \001(\t\022\021\n\tchannelid\030\t \001(\005\"\251\001\n\026m"
    "sg_s2c_connect_result\022H\n\tpacket_id\030\001 \001(\016"
    "2!.client_protocols.client_msg_type:\022s2c"
    "_connect_result\022\021\n\006result\030\002 \001(\005:\0012\022\022\n\nse"
    "rvertime\030\003 \001(\005\022\021\n\006gaming\030\004 \001(\005:\0010\022\013\n\003ver"
    "\030\005 \001(\t*\306\001\n\017client_msg_type\022\022\n\rc2s_heartb"
    "eat\020\255\002\022\022\n\rc2s_net_param\020\256\002\022\025\n\020s2c_send_m"
    "sglist\020\221\003\022\022\n\rs2c_net_param\020\222\003\022\021\n\014s2c_shu"
    "tdown\020\223\003\022\022\n\rs2c_heartbeat\020\224\003\022\016\n\tt2t_star"
    "t\020\274\003\022\020\n\013c2s_connect\020\211\'\022\027\n\022s2c_connect_re"
    "sult\020\315:", 1487);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client_msg.proto", &protobuf_RegisterTypes);
  msg_c2s_heartbeat::default_instance_ = new msg_c2s_heartbeat();
  msg_s2c_heartbeat::default_instance_ = new msg_s2c_heartbeat();
  msg_list::default_instance_ = new msg_list();
  msg_s2c_send_msglist::default_instance_ = new msg_s2c_send_msglist();
  msg_s2c_net_param::default_instance_ = new msg_s2c_net_param();
  msg_c2s_net_param::default_instance_ = new msg_c2s_net_param();
  msg_s2c_shutdown::default_instance_ = new msg_s2c_shutdown();
  msg_t2t_start::default_instance_ = new msg_t2t_start();
  msg_c2s_connect::default_instance_ = new msg_c2s_connect();
  msg_s2c_connect_result::default_instance_ = new msg_s2c_connect_result();
  msg_c2s_heartbeat::default_instance_->InitAsDefaultInstance();
  msg_s2c_heartbeat::default_instance_->InitAsDefaultInstance();
  msg_list::default_instance_->InitAsDefaultInstance();
  msg_s2c_send_msglist::default_instance_->InitAsDefaultInstance();
  msg_s2c_net_param::default_instance_->InitAsDefaultInstance();
  msg_c2s_net_param::default_instance_->InitAsDefaultInstance();
  msg_s2c_shutdown::default_instance_->InitAsDefaultInstance();
  msg_t2t_start::default_instance_->InitAsDefaultInstance();
  msg_c2s_connect::default_instance_->InitAsDefaultInstance();
  msg_s2c_connect_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_5fmsg_2eproto {
  StaticDescriptorInitializer_client_5fmsg_2eproto() {
    protobuf_AddDesc_client_5fmsg_2eproto();
  }
} static_descriptor_initializer_client_5fmsg_2eproto_;
const ::google::protobuf::EnumDescriptor* client_msg_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_msg_type_descriptor_;
}
bool client_msg_type_IsValid(int value) {
  switch(value) {
    case 301:
    case 302:
    case 401:
    case 402:
    case 403:
    case 404:
    case 444:
    case 5001:
    case 7501:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int msg_c2s_heartbeat::kPacketIdFieldNumber;
#endif  // !_MSC_VER

msg_c2s_heartbeat::msg_c2s_heartbeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_c2s_heartbeat::InitAsDefaultInstance() {
}

msg_c2s_heartbeat::msg_c2s_heartbeat(const msg_c2s_heartbeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_c2s_heartbeat::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 301;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_c2s_heartbeat::~msg_c2s_heartbeat() {
  SharedDtor();
}

void msg_c2s_heartbeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_c2s_heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_c2s_heartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_c2s_heartbeat_descriptor_;
}

const msg_c2s_heartbeat& msg_c2s_heartbeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fmsg_2eproto();
  return *default_instance_;
}

msg_c2s_heartbeat* msg_c2s_heartbeat::default_instance_ = NULL;

msg_c2s_heartbeat* msg_c2s_heartbeat::New() const {
  return new msg_c2s_heartbeat;
}

void msg_c2s_heartbeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 301;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_c2s_heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_protocols.client_msg_type packet_id = 1 [default = c2s_heartbeat];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_protocols::client_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client_protocols::client_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_c2s_heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client_protocols.client_msg_type packet_id = 1 [default = c2s_heartbeat];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_c2s_heartbeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client_protocols.client_msg_type packet_id = 1 [default = c2s_heartbeat];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_c2s_heartbeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_protocols.client_msg_type packet_id = 1 [default = c2s_heartbeat];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_c2s_heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_c2s_heartbeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_c2s_heartbeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_c2s_heartbeat::MergeFrom(const msg_c2s_heartbeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_c2s_heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_c2s_heartbeat::CopyFrom(const msg_c2s_heartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_c2s_heartbeat::IsInitialized() const {

  return true;
}

void msg_c2s_heartbeat::Swap(msg_c2s_heartbeat* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_c2s_heartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_c2s_heartbeat_descriptor_;
  metadata.reflection = msg_c2s_heartbeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_s2c_heartbeat::kPacketIdFieldNumber;
#endif  // !_MSC_VER

msg_s2c_heartbeat::msg_s2c_heartbeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_s2c_heartbeat::InitAsDefaultInstance() {
}

msg_s2c_heartbeat::msg_s2c_heartbeat(const msg_s2c_heartbeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_s2c_heartbeat::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 404;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_s2c_heartbeat::~msg_s2c_heartbeat() {
  SharedDtor();
}

void msg_s2c_heartbeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_s2c_heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_s2c_heartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_s2c_heartbeat_descriptor_;
}

const msg_s2c_heartbeat& msg_s2c_heartbeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fmsg_2eproto();
  return *default_instance_;
}

msg_s2c_heartbeat* msg_s2c_heartbeat::default_instance_ = NULL;

msg_s2c_heartbeat* msg_s2c_heartbeat::New() const {
  return new msg_s2c_heartbeat;
}

void msg_s2c_heartbeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 404;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_s2c_heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_heartbeat];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_protocols::client_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client_protocols::client_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_s2c_heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_heartbeat];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_s2c_heartbeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_heartbeat];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_s2c_heartbeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_heartbeat];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_s2c_heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_s2c_heartbeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_s2c_heartbeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_s2c_heartbeat::MergeFrom(const msg_s2c_heartbeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_s2c_heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_s2c_heartbeat::CopyFrom(const msg_s2c_heartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_s2c_heartbeat::IsInitialized() const {

  return true;
}

void msg_s2c_heartbeat::Swap(msg_s2c_heartbeat* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_s2c_heartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_s2c_heartbeat_descriptor_;
  metadata.reflection = msg_s2c_heartbeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_list::kMsgidFieldNumber;
const int msg_list::kMsginfoFieldNumber;
#endif  // !_MSC_VER

msg_list::msg_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_list::InitAsDefaultInstance() {
}

msg_list::msg_list(const msg_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_list::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  msginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_list::~msg_list() {
  SharedDtor();
}

void msg_list::SharedDtor() {
  if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
    delete msginfo_;
  }
  if (this != default_instance_) {
  }
}

void msg_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_list_descriptor_;
}

const msg_list& msg_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fmsg_2eproto();
  return *default_instance_;
}

msg_list* msg_list::default_instance_ = NULL;

msg_list* msg_list::New() const {
  return new msg_list;
}

void msg_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
    if (has_msginfo()) {
      if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
        msginfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msgid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msginfo;
        break;
      }

      // optional bytes msginfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msginfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }

  // optional bytes msginfo = 2;
  if (has_msginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->msginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 msgid = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }

  // optional bytes msginfo = 2;
  if (has_msginfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }

    // optional bytes msginfo = 2;
    if (has_msginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msginfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_list::MergeFrom(const msg_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_msginfo()) {
      set_msginfo(from.msginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_list::CopyFrom(const msg_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_list::IsInitialized() const {

  return true;
}

void msg_list::Swap(msg_list* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(msginfo_, other->msginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_list_descriptor_;
  metadata.reflection = msg_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_s2c_send_msglist::kPacketIdFieldNumber;
const int msg_s2c_send_msglist::kMsgpaksFieldNumber;
#endif  // !_MSC_VER

msg_s2c_send_msglist::msg_s2c_send_msglist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_s2c_send_msglist::InitAsDefaultInstance() {
}

msg_s2c_send_msglist::msg_s2c_send_msglist(const msg_s2c_send_msglist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_s2c_send_msglist::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 401;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_s2c_send_msglist::~msg_s2c_send_msglist() {
  SharedDtor();
}

void msg_s2c_send_msglist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_s2c_send_msglist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_s2c_send_msglist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_s2c_send_msglist_descriptor_;
}

const msg_s2c_send_msglist& msg_s2c_send_msglist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fmsg_2eproto();
  return *default_instance_;
}

msg_s2c_send_msglist* msg_s2c_send_msglist::default_instance_ = NULL;

msg_s2c_send_msglist* msg_s2c_send_msglist::New() const {
  return new msg_s2c_send_msglist;
}

void msg_s2c_send_msglist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 401;
  }
  msgpaks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_s2c_send_msglist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_send_msglist];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_protocols::client_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client_protocols::client_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msgpaks;
        break;
      }

      // repeated .client_protocols.msg_list msgpaks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgpaks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msgpaks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msgpaks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_s2c_send_msglist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_send_msglist];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client_protocols.msg_list msgpaks = 3;
  for (int i = 0; i < this->msgpaks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msgpaks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_s2c_send_msglist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_send_msglist];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client_protocols.msg_list msgpaks = 3;
  for (int i = 0; i < this->msgpaks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->msgpaks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_s2c_send_msglist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_send_msglist];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client_protocols.msg_list msgpaks = 3;
  total_size += 1 * this->msgpaks_size();
  for (int i = 0; i < this->msgpaks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msgpaks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_s2c_send_msglist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_s2c_send_msglist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_s2c_send_msglist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_s2c_send_msglist::MergeFrom(const msg_s2c_send_msglist& from) {
  GOOGLE_CHECK_NE(&from, this);
  msgpaks_.MergeFrom(from.msgpaks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_s2c_send_msglist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_s2c_send_msglist::CopyFrom(const msg_s2c_send_msglist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_s2c_send_msglist::IsInitialized() const {

  return true;
}

void msg_s2c_send_msglist::Swap(msg_s2c_send_msglist* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    msgpaks_.Swap(&other->msgpaks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_s2c_send_msglist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_s2c_send_msglist_descriptor_;
  metadata.reflection = msg_s2c_send_msglist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_s2c_net_param::kPacketIdFieldNumber;
const int msg_s2c_net_param::kParamTypeFieldNumber;
const int msg_s2c_net_param::kParam1FieldNumber;
const int msg_s2c_net_param::kParam2FieldNumber;
const int msg_s2c_net_param::kShutdownFieldNumber;
#endif  // !_MSC_VER

msg_s2c_net_param::msg_s2c_net_param()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_s2c_net_param::InitAsDefaultInstance() {
}

msg_s2c_net_param::msg_s2c_net_param(const msg_s2c_net_param& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_s2c_net_param::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 402;
  param_type_ = 0;
  param1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shutdown_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_s2c_net_param::~msg_s2c_net_param() {
  SharedDtor();
}

void msg_s2c_net_param::SharedDtor() {
  if (param1_ != &::google::protobuf::internal::kEmptyString) {
    delete param1_;
  }
  if (param2_ != &::google::protobuf::internal::kEmptyString) {
    delete param2_;
  }
  if (this != default_instance_) {
  }
}

void msg_s2c_net_param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_s2c_net_param::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_s2c_net_param_descriptor_;
}

const msg_s2c_net_param& msg_s2c_net_param::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fmsg_2eproto();
  return *default_instance_;
}

msg_s2c_net_param* msg_s2c_net_param::default_instance_ = NULL;

msg_s2c_net_param* msg_s2c_net_param::New() const {
  return new msg_s2c_net_param;
}

void msg_s2c_net_param::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 402;
    param_type_ = 0;
    if (has_param1()) {
      if (param1_ != &::google::protobuf::internal::kEmptyString) {
        param1_->clear();
      }
    }
    if (has_param2()) {
      if (param2_ != &::google::protobuf::internal::kEmptyString) {
        param2_->clear();
      }
    }
    shutdown_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_s2c_net_param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_net_param];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_protocols::client_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client_protocols::client_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_param_type;
        break;
      }

      // optional int32 param_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_type_)));
          set_has_param_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_param1;
        break;
      }

      // optional bytes param1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_param1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_param2;
        break;
      }

      // optional bytes param2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_param2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_shutdown;
        break;
      }

      // optional bool shutdown = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shutdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shutdown_)));
          set_has_shutdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_s2c_net_param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_net_param];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 param_type = 2;
  if (has_param_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->param_type(), output);
  }

  // optional bytes param1 = 3;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->param1(), output);
  }

  // optional bytes param2 = 4;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->param2(), output);
  }

  // optional bool shutdown = 5;
  if (has_shutdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->shutdown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_s2c_net_param::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_net_param];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 param_type = 2;
  if (has_param_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->param_type(), target);
  }

  // optional bytes param1 = 3;
  if (has_param1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->param1(), target);
  }

  // optional bytes param2 = 4;
  if (has_param2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->param2(), target);
  }

  // optional bool shutdown = 5;
  if (has_shutdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->shutdown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_s2c_net_param::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_net_param];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 param_type = 2;
    if (has_param_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param_type());
    }

    // optional bytes param1 = 3;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->param1());
    }

    // optional bytes param2 = 4;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->param2());
    }

    // optional bool shutdown = 5;
    if (has_shutdown()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_s2c_net_param::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_s2c_net_param* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_s2c_net_param*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_s2c_net_param::MergeFrom(const msg_s2c_net_param& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_param_type()) {
      set_param_type(from.param_type());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_shutdown()) {
      set_shutdown(from.shutdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_s2c_net_param::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_s2c_net_param::CopyFrom(const msg_s2c_net_param& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_s2c_net_param::IsInitialized() const {

  return true;
}

void msg_s2c_net_param::Swap(msg_s2c_net_param* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(param_type_, other->param_type_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(shutdown_, other->shutdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_s2c_net_param::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_s2c_net_param_descriptor_;
  metadata.reflection = msg_s2c_net_param_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_c2s_net_param::kPacketIdFieldNumber;
const int msg_c2s_net_param::kParamTypeFieldNumber;
const int msg_c2s_net_param::kParam1FieldNumber;
const int msg_c2s_net_param::kParam2FieldNumber;
#endif  // !_MSC_VER

msg_c2s_net_param::msg_c2s_net_param()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_c2s_net_param::InitAsDefaultInstance() {
}

msg_c2s_net_param::msg_c2s_net_param(const msg_c2s_net_param& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_c2s_net_param::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 302;
  param_type_ = 0;
  param1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_c2s_net_param::~msg_c2s_net_param() {
  SharedDtor();
}

void msg_c2s_net_param::SharedDtor() {
  if (param1_ != &::google::protobuf::internal::kEmptyString) {
    delete param1_;
  }
  if (param2_ != &::google::protobuf::internal::kEmptyString) {
    delete param2_;
  }
  if (this != default_instance_) {
  }
}

void msg_c2s_net_param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_c2s_net_param::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_c2s_net_param_descriptor_;
}

const msg_c2s_net_param& msg_c2s_net_param::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fmsg_2eproto();
  return *default_instance_;
}

msg_c2s_net_param* msg_c2s_net_param::default_instance_ = NULL;

msg_c2s_net_param* msg_c2s_net_param::New() const {
  return new msg_c2s_net_param;
}

void msg_c2s_net_param::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 302;
    param_type_ = 0;
    if (has_param1()) {
      if (param1_ != &::google::protobuf::internal::kEmptyString) {
        param1_->clear();
      }
    }
    if (has_param2()) {
      if (param2_ != &::google::protobuf::internal::kEmptyString) {
        param2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_c2s_net_param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_protocols.client_msg_type packet_id = 1 [default = c2s_net_param];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_protocols::client_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client_protocols::client_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_param_type;
        break;
      }

      // optional int32 param_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_type_)));
          set_has_param_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_param1;
        break;
      }

      // optional bytes param1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_param1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_param2;
        break;
      }

      // optional bytes param2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_param2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_c2s_net_param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client_protocols.client_msg_type packet_id = 1 [default = c2s_net_param];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 param_type = 2;
  if (has_param_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->param_type(), output);
  }

  // optional bytes param1 = 3;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->param1(), output);
  }

  // optional bytes param2 = 4;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->param2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_c2s_net_param::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client_protocols.client_msg_type packet_id = 1 [default = c2s_net_param];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 param_type = 2;
  if (has_param_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->param_type(), target);
  }

  // optional bytes param1 = 3;
  if (has_param1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->param1(), target);
  }

  // optional bytes param2 = 4;
  if (has_param2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->param2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_c2s_net_param::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_protocols.client_msg_type packet_id = 1 [default = c2s_net_param];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 param_type = 2;
    if (has_param_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param_type());
    }

    // optional bytes param1 = 3;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->param1());
    }

    // optional bytes param2 = 4;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->param2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_c2s_net_param::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_c2s_net_param* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_c2s_net_param*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_c2s_net_param::MergeFrom(const msg_c2s_net_param& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_param_type()) {
      set_param_type(from.param_type());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_c2s_net_param::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_c2s_net_param::CopyFrom(const msg_c2s_net_param& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_c2s_net_param::IsInitialized() const {

  return true;
}

void msg_c2s_net_param::Swap(msg_c2s_net_param* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(param_type_, other->param_type_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_c2s_net_param::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_c2s_net_param_descriptor_;
  metadata.reflection = msg_c2s_net_param_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_s2c_shutdown::kPacketIdFieldNumber;
#endif  // !_MSC_VER

msg_s2c_shutdown::msg_s2c_shutdown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_s2c_shutdown::InitAsDefaultInstance() {
}

msg_s2c_shutdown::msg_s2c_shutdown(const msg_s2c_shutdown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_s2c_shutdown::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 403;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_s2c_shutdown::~msg_s2c_shutdown() {
  SharedDtor();
}

void msg_s2c_shutdown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_s2c_shutdown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_s2c_shutdown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_s2c_shutdown_descriptor_;
}

const msg_s2c_shutdown& msg_s2c_shutdown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fmsg_2eproto();
  return *default_instance_;
}

msg_s2c_shutdown* msg_s2c_shutdown::default_instance_ = NULL;

msg_s2c_shutdown* msg_s2c_shutdown::New() const {
  return new msg_s2c_shutdown;
}

void msg_s2c_shutdown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 403;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_s2c_shutdown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_shutdown];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_protocols::client_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client_protocols::client_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_s2c_shutdown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_shutdown];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_s2c_shutdown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_shutdown];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_s2c_shutdown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_shutdown];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_s2c_shutdown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_s2c_shutdown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_s2c_shutdown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_s2c_shutdown::MergeFrom(const msg_s2c_shutdown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_s2c_shutdown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_s2c_shutdown::CopyFrom(const msg_s2c_shutdown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_s2c_shutdown::IsInitialized() const {

  return true;
}

void msg_s2c_shutdown::Swap(msg_s2c_shutdown* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_s2c_shutdown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_s2c_shutdown_descriptor_;
  metadata.reflection = msg_s2c_shutdown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_t2t_start::kPacketIdFieldNumber;
#endif  // !_MSC_VER

msg_t2t_start::msg_t2t_start()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_t2t_start::InitAsDefaultInstance() {
}

msg_t2t_start::msg_t2t_start(const msg_t2t_start& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_t2t_start::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 444;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_t2t_start::~msg_t2t_start() {
  SharedDtor();
}

void msg_t2t_start::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_t2t_start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_t2t_start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_t2t_start_descriptor_;
}

const msg_t2t_start& msg_t2t_start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fmsg_2eproto();
  return *default_instance_;
}

msg_t2t_start* msg_t2t_start::default_instance_ = NULL;

msg_t2t_start* msg_t2t_start::New() const {
  return new msg_t2t_start;
}

void msg_t2t_start::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 444;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_t2t_start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_protocols.client_msg_type packet_id = 1 [default = t2t_start];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_protocols::client_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client_protocols::client_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_t2t_start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client_protocols.client_msg_type packet_id = 1 [default = t2t_start];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_t2t_start::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client_protocols.client_msg_type packet_id = 1 [default = t2t_start];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_t2t_start::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_protocols.client_msg_type packet_id = 1 [default = t2t_start];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_t2t_start::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_t2t_start* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_t2t_start*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_t2t_start::MergeFrom(const msg_t2t_start& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_t2t_start::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_t2t_start::CopyFrom(const msg_t2t_start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_t2t_start::IsInitialized() const {

  return true;
}

void msg_t2t_start::Swap(msg_t2t_start* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_t2t_start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_t2t_start_descriptor_;
  metadata.reflection = msg_t2t_start_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_c2s_connect::kPacketIdFieldNumber;
const int msg_c2s_connect::kAccountFieldNumber;
const int msg_c2s_connect::kTokenFieldNumber;
const int msg_c2s_connect::kSignFieldNumber;
const int msg_c2s_connect::kPlatformFieldNumber;
const int msg_c2s_connect::kLoginPlatformFieldNumber;
const int msg_c2s_connect::kMachineCodeFieldNumber;
const int msg_c2s_connect::kMachineTypeFieldNumber;
const int msg_c2s_connect::kChannelidFieldNumber;
#endif  // !_MSC_VER

msg_c2s_connect::msg_c2s_connect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_c2s_connect::InitAsDefaultInstance() {
}

msg_c2s_connect::msg_c2s_connect(const msg_c2s_connect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_c2s_connect::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5001;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machine_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machine_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channelid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_c2s_connect::~msg_c2s_connect() {
  SharedDtor();
}

void msg_c2s_connect::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (login_platform_ != &::google::protobuf::internal::kEmptyString) {
    delete login_platform_;
  }
  if (machine_code_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_code_;
  }
  if (machine_type_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_type_;
  }
  if (this != default_instance_) {
  }
}

void msg_c2s_connect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_c2s_connect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_c2s_connect_descriptor_;
}

const msg_c2s_connect& msg_c2s_connect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fmsg_2eproto();
  return *default_instance_;
}

msg_c2s_connect* msg_c2s_connect::default_instance_ = NULL;

msg_c2s_connect* msg_c2s_connect::New() const {
  return new msg_c2s_connect;
}

void msg_c2s_connect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5001;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_login_platform()) {
      if (login_platform_ != &::google::protobuf::internal::kEmptyString) {
        login_platform_->clear();
      }
    }
    if (has_machine_code()) {
      if (machine_code_ != &::google::protobuf::internal::kEmptyString) {
        machine_code_->clear();
      }
    }
    if (has_machine_type()) {
      if (machine_type_ != &::google::protobuf::internal::kEmptyString) {
        machine_type_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    channelid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_c2s_connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_protocols.client_msg_type packet_id = 1 [default = c2s_connect];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_protocols::client_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client_protocols::client_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sign;
        break;
      }

      // optional string sign = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_platform;
        break;
      }

      // optional string platform = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_login_platform;
        break;
      }

      // optional string login_platform = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login_platform().data(), this->login_platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_machine_code;
        break;
      }

      // optional string machine_code = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_code().data(), this->machine_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_machine_type;
        break;
      }

      // optional string machine_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_type().data(), this->machine_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_channelid;
        break;
      }

      // optional int32 channelid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_c2s_connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client_protocols.client_msg_type packet_id = 1 [default = c2s_connect];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(), output);
  }

  // optional string sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sign(), output);
  }

  // optional string platform = 5;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->platform(), output);
  }

  // optional string login_platform = 6;
  if (has_login_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_platform().data(), this->login_platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->login_platform(), output);
  }

  // optional string machine_code = 7;
  if (has_machine_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_code().data(), this->machine_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->machine_code(), output);
  }

  // optional string machine_type = 8;
  if (has_machine_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_type().data(), this->machine_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->machine_type(), output);
  }

  // optional int32 channelid = 9;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->channelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_c2s_connect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client_protocols.client_msg_type packet_id = 1 [default = c2s_connect];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // optional string sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sign(), target);
  }

  // optional string platform = 5;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->platform(), target);
  }

  // optional string login_platform = 6;
  if (has_login_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_platform().data(), this->login_platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->login_platform(), target);
  }

  // optional string machine_code = 7;
  if (has_machine_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_code().data(), this->machine_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->machine_code(), target);
  }

  // optional string machine_type = 8;
  if (has_machine_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_type().data(), this->machine_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->machine_type(), target);
  }

  // optional int32 channelid = 9;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->channelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_c2s_connect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_protocols.client_msg_type packet_id = 1 [default = c2s_connect];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string sign = 4;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional string platform = 5;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string login_platform = 6;
    if (has_login_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_platform());
    }

    // optional string machine_code = 7;
    if (has_machine_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_code());
    }

    // optional string machine_type = 8;
    if (has_machine_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 channelid = 9;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_c2s_connect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_c2s_connect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_c2s_connect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_c2s_connect::MergeFrom(const msg_c2s_connect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_login_platform()) {
      set_login_platform(from.login_platform());
    }
    if (from.has_machine_code()) {
      set_machine_code(from.machine_code());
    }
    if (from.has_machine_type()) {
      set_machine_type(from.machine_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_c2s_connect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_c2s_connect::CopyFrom(const msg_c2s_connect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_c2s_connect::IsInitialized() const {

  return true;
}

void msg_c2s_connect::Swap(msg_c2s_connect* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(account_, other->account_);
    std::swap(token_, other->token_);
    std::swap(sign_, other->sign_);
    std::swap(platform_, other->platform_);
    std::swap(login_platform_, other->login_platform_);
    std::swap(machine_code_, other->machine_code_);
    std::swap(machine_type_, other->machine_type_);
    std::swap(channelid_, other->channelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_c2s_connect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_c2s_connect_descriptor_;
  metadata.reflection = msg_c2s_connect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_s2c_connect_result::kPacketIdFieldNumber;
const int msg_s2c_connect_result::kResultFieldNumber;
const int msg_s2c_connect_result::kServertimeFieldNumber;
const int msg_s2c_connect_result::kGamingFieldNumber;
const int msg_s2c_connect_result::kVerFieldNumber;
#endif  // !_MSC_VER

msg_s2c_connect_result::msg_s2c_connect_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_s2c_connect_result::InitAsDefaultInstance() {
}

msg_s2c_connect_result::msg_s2c_connect_result(const msg_s2c_connect_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_s2c_connect_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7501;
  result_ = 2;
  servertime_ = 0;
  gaming_ = 0;
  ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_s2c_connect_result::~msg_s2c_connect_result() {
  SharedDtor();
}

void msg_s2c_connect_result::SharedDtor() {
  if (ver_ != &::google::protobuf::internal::kEmptyString) {
    delete ver_;
  }
  if (this != default_instance_) {
  }
}

void msg_s2c_connect_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_s2c_connect_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_s2c_connect_result_descriptor_;
}

const msg_s2c_connect_result& msg_s2c_connect_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fmsg_2eproto();
  return *default_instance_;
}

msg_s2c_connect_result* msg_s2c_connect_result::default_instance_ = NULL;

msg_s2c_connect_result* msg_s2c_connect_result::New() const {
  return new msg_s2c_connect_result;
}

void msg_s2c_connect_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7501;
    result_ = 2;
    servertime_ = 0;
    gaming_ = 0;
    if (has_ver()) {
      if (ver_ != &::google::protobuf::internal::kEmptyString) {
        ver_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_s2c_connect_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_connect_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_protocols::client_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client_protocols::client_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = 2];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_servertime;
        break;
      }

      // optional int32 servertime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gaming;
        break;
      }

      // optional int32 gaming = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gaming:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gaming_)));
          set_has_gaming();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ver;
        break;
      }

      // optional string ver = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ver().data(), this->ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_s2c_connect_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_connect_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2 [default = 2];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 servertime = 3;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->servertime(), output);
  }

  // optional int32 gaming = 4 [default = 0];
  if (has_gaming()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gaming(), output);
  }

  // optional string ver = 5;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_s2c_connect_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_connect_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2 [default = 2];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 servertime = 3;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->servertime(), target);
  }

  // optional int32 gaming = 4 [default = 0];
  if (has_gaming()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gaming(), target);
  }

  // optional string ver = 5;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_s2c_connect_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_connect_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2 [default = 2];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 servertime = 3;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertime());
    }

    // optional int32 gaming = 4 [default = 0];
    if (has_gaming()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gaming());
    }

    // optional string ver = 5;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_s2c_connect_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_s2c_connect_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_s2c_connect_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_s2c_connect_result::MergeFrom(const msg_s2c_connect_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
    if (from.has_gaming()) {
      set_gaming(from.gaming());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_s2c_connect_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_s2c_connect_result::CopyFrom(const msg_s2c_connect_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_s2c_connect_result::IsInitialized() const {

  return true;
}

void msg_s2c_connect_result::Swap(msg_s2c_connect_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(servertime_, other->servertime_);
    std::swap(gaming_, other->gaming_);
    std::swap(ver_, other->ver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_s2c_connect_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_s2c_connect_result_descriptor_;
  metadata.reflection = msg_s2c_connect_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client_protocols

// @@protoc_insertion_point(global_scope)
