// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_srnn_protocol.proto

#ifndef PROTOBUF_game_5fsrnn_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_game_5fsrnn_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "game_srnn_def.pb.h"
#include "msg_type_def.pb.h"
// @@protoc_insertion_point(includes)

namespace game_srnn_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

class msg_player_info;
class msg_player_data;
class packetc2l_check_state;
class packetl2c_check_state_result;
class packetc2l_get_scene_info;
class packetl2c_scene_info_result;
class packetc2l_enter_room;
class packetl2c_enter_room_result;
class packetc2l_leave_room;
class packetl2c_leave_room_result;
class packetc2l_user_trustee;
class packetl2c_table_status_notify;
class packetl2c_user_trustee_notify;
class packetc2l_ready;
class packetl2c_game_start;
class packetl2c_table_enter_player_info;
class cards_data;
class packetc2l_open_card;
class packetl2c_open_card_notify;
class packetc2l_bet_req;
class packetl2c_bet_notify;
class packetl2c_send_card;
class packetc2l_banker_req;
class packetl2c_banker_notify;
class msg_card_info;
class packetl2c_game_end;
class packetl2c_game_notify;
class gm_player_info;
class packetc2l_gm_list;
class gm_room_info;
class packetl2c_gm_list;
class packetc2l_gm_kill;

// ===================================================================

class msg_player_info : public ::google::protobuf::Message {
 public:
  msg_player_info();
  virtual ~msg_player_info();

  msg_player_info(const msg_player_info& from);

  inline msg_player_info& operator=(const msg_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_player_info& default_instance();

  void Swap(msg_player_info* other);

  // implements Message ----------------------------------------------

  msg_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_player_info& from);
  void MergeFrom(const msg_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional int32 head_frame = 3;
  inline bool has_head_frame() const;
  inline void clear_head_frame();
  static const int kHeadFrameFieldNumber = 3;
  inline ::google::protobuf::int32 head_frame() const;
  inline void set_head_frame(::google::protobuf::int32 value);

  // optional string head_custom = 4;
  inline bool has_head_custom() const;
  inline void clear_head_custom();
  static const int kHeadCustomFieldNumber = 4;
  inline const ::std::string& head_custom() const;
  inline void set_head_custom(const ::std::string& value);
  inline void set_head_custom(const char* value);
  inline void set_head_custom(const char* value, size_t size);
  inline ::std::string* mutable_head_custom();
  inline ::std::string* release_head_custom();
  inline void set_allocated_head_custom(::std::string* head_custom);

  // optional int64 player_gold = 5;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 5;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // optional int32 player_sex = 6;
  inline bool has_player_sex() const;
  inline void clear_player_sex();
  static const int kPlayerSexFieldNumber = 6;
  inline ::google::protobuf::int32 player_sex() const;
  inline void set_player_sex(::google::protobuf::int32 value);

  // optional int32 vip_level = 7;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 7;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.msg_player_info)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_head_frame();
  inline void clear_has_head_frame();
  inline void set_has_head_custom();
  inline void clear_has_head_custom();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();
  inline void set_has_player_sex();
  inline void clear_has_player_sex();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_name_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 head_frame_;
  ::std::string* head_custom_;
  ::google::protobuf::int64 player_gold_;
  ::google::protobuf::int32 player_sex_;
  ::google::protobuf::int32 vip_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_player_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_player_data : public ::google::protobuf::Message {
 public:
  msg_player_data();
  virtual ~msg_player_data();

  msg_player_data(const msg_player_data& from);

  inline msg_player_data& operator=(const msg_player_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_player_data& default_instance();

  void Swap(msg_player_data* other);

  // implements Message ----------------------------------------------

  msg_player_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_player_data& from);
  void MergeFrom(const msg_player_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 chair_id = 1;
  inline bool has_chair_id() const;
  inline void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  inline ::google::protobuf::int32 chair_id() const;
  inline void set_chair_id(::google::protobuf::int32 value);

  // optional .game_srnn_protocols.msg_player_info player = 2;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 2;
  inline const ::game_srnn_protocols::msg_player_info& player() const;
  inline ::game_srnn_protocols::msg_player_info* mutable_player();
  inline ::game_srnn_protocols::msg_player_info* release_player();
  inline void set_allocated_player(::game_srnn_protocols::msg_player_info* player);

  // optional .game_srnn_protocols.e_table_status status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::game_srnn_protocols::e_table_status status() const;
  inline void set_status(::game_srnn_protocols::e_table_status value);

  // optional int32 other_bets = 4;
  inline bool has_other_bets() const;
  inline void clear_other_bets();
  static const int kOtherBetsFieldNumber = 4;
  inline ::google::protobuf::int32 other_bets() const;
  inline void set_other_bets(::google::protobuf::int32 value);

  // optional .game_srnn_protocols.cards_data cards = 5;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 5;
  inline const ::game_srnn_protocols::cards_data& cards() const;
  inline ::game_srnn_protocols::cards_data* mutable_cards();
  inline ::game_srnn_protocols::cards_data* release_cards();
  inline void set_allocated_cards(::game_srnn_protocols::cards_data* cards);

  // optional bool open_card = 6;
  inline bool has_open_card() const;
  inline void clear_open_card();
  static const int kOpenCardFieldNumber = 6;
  inline bool open_card() const;
  inline void set_open_card(bool value);

  // optional int32 trustee = 7;
  inline bool has_trustee() const;
  inline void clear_trustee();
  static const int kTrusteeFieldNumber = 7;
  inline ::google::protobuf::int32 trustee() const;
  inline void set_trustee(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.msg_player_data)
 private:
  inline void set_has_chair_id();
  inline void clear_has_chair_id();
  inline void set_has_player();
  inline void clear_has_player();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_other_bets();
  inline void clear_has_other_bets();
  inline void set_has_cards();
  inline void clear_has_cards();
  inline void set_has_open_card();
  inline void clear_has_open_card();
  inline void set_has_trustee();
  inline void clear_has_trustee();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game_srnn_protocols::msg_player_info* player_;
  ::google::protobuf::int32 chair_id_;
  int status_;
  ::game_srnn_protocols::cards_data* cards_;
  ::google::protobuf::int32 other_bets_;
  bool open_card_;
  ::google::protobuf::int32 trustee_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_player_data* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_check_state : public ::google::protobuf::Message {
 public:
  packetc2l_check_state();
  virtual ~packetc2l_check_state();

  packetc2l_check_state(const packetc2l_check_state& from);

  inline packetc2l_check_state& operator=(const packetc2l_check_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_check_state& default_instance();

  void Swap(packetc2l_check_state* other);

  // implements Message ----------------------------------------------

  packetc2l_check_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_check_state& from);
  void MergeFrom(const packetc2l_check_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetc2l_check_state)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_check_state* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_check_state_result : public ::google::protobuf::Message {
 public:
  packetl2c_check_state_result();
  virtual ~packetl2c_check_state_result();

  packetl2c_check_state_result(const packetl2c_check_state_result& from);

  inline packetl2c_check_state_result& operator=(const packetl2c_check_state_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_check_state_result& default_instance();

  void Swap(packetl2c_check_state_result* other);

  // implements Message ----------------------------------------------

  packetl2c_check_state_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_check_state_result& from);
  void MergeFrom(const packetl2c_check_state_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // optional int32 result = 2 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetl2c_check_state_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_check_state_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_scene_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_scene_info();
  virtual ~packetc2l_get_scene_info();

  packetc2l_get_scene_info(const packetc2l_get_scene_info& from);

  inline packetc2l_get_scene_info& operator=(const packetc2l_get_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_scene_info& default_instance();

  void Swap(packetc2l_get_scene_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_scene_info& from);
  void MergeFrom(const packetc2l_get_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetc2l_get_scene_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_scene_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_scene_info_result();
  virtual ~packetl2c_scene_info_result();

  packetl2c_scene_info_result(const packetl2c_scene_info_result& from);

  inline packetl2c_scene_info_result& operator=(const packetl2c_scene_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_scene_info_result& default_instance();

  void Swap(packetl2c_scene_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_scene_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_scene_info_result& from);
  void MergeFrom(const packetl2c_scene_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // optional int32 room_type = 2;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 2;
  inline ::google::protobuf::int32 room_type() const;
  inline void set_room_type(::google::protobuf::int32 value);

  // optional .game_srnn_protocols.e_table_status status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::game_srnn_protocols::e_table_status status() const;
  inline void set_status(::game_srnn_protocols::e_table_status value);

  // optional int32 banker_idx = 4;
  inline bool has_banker_idx() const;
  inline void clear_banker_idx();
  static const int kBankerIdxFieldNumber = 4;
  inline ::google::protobuf::int32 banker_idx() const;
  inline void set_banker_idx(::google::protobuf::int32 value);

  // repeated .game_srnn_protocols.msg_player_data players = 5;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 5;
  inline const ::game_srnn_protocols::msg_player_data& players(int index) const;
  inline ::game_srnn_protocols::msg_player_data* mutable_players(int index);
  inline ::game_srnn_protocols::msg_player_data* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::msg_player_data >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::msg_player_data >*
      mutable_players();

  // optional .game_srnn_protocols.packetl2c_game_end game_end = 6;
  inline bool has_game_end() const;
  inline void clear_game_end();
  static const int kGameEndFieldNumber = 6;
  inline const ::game_srnn_protocols::packetl2c_game_end& game_end() const;
  inline ::game_srnn_protocols::packetl2c_game_end* mutable_game_end();
  inline ::game_srnn_protocols::packetl2c_game_end* release_game_end();
  inline void set_allocated_game_end(::game_srnn_protocols::packetl2c_game_end* game_end);

  // optional int32 status_remain_sec = 7;
  inline bool has_status_remain_sec() const;
  inline void clear_status_remain_sec();
  static const int kStatusRemainSecFieldNumber = 7;
  inline ::google::protobuf::int32 status_remain_sec() const;
  inline void set_status_remain_sec(::google::protobuf::int32 value);

  // optional int32 status_turn_sec = 8;
  inline bool has_status_turn_sec() const;
  inline void clear_status_turn_sec();
  static const int kStatusTurnSecFieldNumber = 8;
  inline ::google::protobuf::int32 status_turn_sec() const;
  inline void set_status_turn_sec(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetl2c_scene_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_type();
  inline void clear_has_room_type();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_banker_idx();
  inline void clear_has_banker_idx();
  inline void set_has_game_end();
  inline void clear_has_game_end();
  inline void set_has_status_remain_sec();
  inline void clear_has_status_remain_sec();
  inline void set_has_status_turn_sec();
  inline void clear_has_status_turn_sec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 room_type_;
  int status_;
  ::google::protobuf::int32 banker_idx_;
  ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::msg_player_data > players_;
  ::game_srnn_protocols::packetl2c_game_end* game_end_;
  ::google::protobuf::int32 status_remain_sec_;
  ::google::protobuf::int32 status_turn_sec_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_scene_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_enter_room : public ::google::protobuf::Message {
 public:
  packetc2l_enter_room();
  virtual ~packetc2l_enter_room();

  packetc2l_enter_room(const packetc2l_enter_room& from);

  inline packetc2l_enter_room& operator=(const packetc2l_enter_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_enter_room& default_instance();

  void Swap(packetc2l_enter_room* other);

  // implements Message ----------------------------------------------

  packetc2l_enter_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_enter_room& from);
  void MergeFrom(const packetc2l_enter_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // optional int32 room_type = 2;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 2;
  inline ::google::protobuf::int32 room_type() const;
  inline void set_room_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetc2l_enter_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_type();
  inline void clear_has_room_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 room_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_enter_room* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_enter_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_enter_room_result();
  virtual ~packetl2c_enter_room_result();

  packetl2c_enter_room_result(const packetl2c_enter_room_result& from);

  inline packetl2c_enter_room_result& operator=(const packetl2c_enter_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_enter_room_result& default_instance();

  void Swap(packetl2c_enter_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_enter_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_enter_room_result& from);
  void MergeFrom(const packetl2c_enter_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetl2c_enter_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_enter_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_leave_room : public ::google::protobuf::Message {
 public:
  packetc2l_leave_room();
  virtual ~packetc2l_leave_room();

  packetc2l_leave_room(const packetc2l_leave_room& from);

  inline packetc2l_leave_room& operator=(const packetc2l_leave_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_leave_room& default_instance();

  void Swap(packetc2l_leave_room* other);

  // implements Message ----------------------------------------------

  packetc2l_leave_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_leave_room& from);
  void MergeFrom(const packetc2l_leave_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetc2l_leave_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_leave_room* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_leave_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_leave_room_result();
  virtual ~packetl2c_leave_room_result();

  packetl2c_leave_room_result(const packetl2c_leave_room_result& from);

  inline packetl2c_leave_room_result& operator=(const packetl2c_leave_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_leave_room_result& default_instance();

  void Swap(packetl2c_leave_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_leave_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_leave_room_result& from);
  void MergeFrom(const packetl2c_leave_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // optional int64 player_gold = 2;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 2;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetl2c_leave_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 player_gold_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_leave_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_user_trustee : public ::google::protobuf::Message {
 public:
  packetc2l_user_trustee();
  virtual ~packetc2l_user_trustee();

  packetc2l_user_trustee(const packetc2l_user_trustee& from);

  inline packetc2l_user_trustee& operator=(const packetc2l_user_trustee& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_user_trustee& default_instance();

  void Swap(packetc2l_user_trustee* other);

  // implements Message ----------------------------------------------

  packetc2l_user_trustee* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_user_trustee& from);
  void MergeFrom(const packetc2l_user_trustee& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_user_trustee];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // optional int32 bets = 2;
  inline bool has_bets() const;
  inline void clear_bets();
  static const int kBetsFieldNumber = 2;
  inline ::google::protobuf::int32 bets() const;
  inline void set_bets(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetc2l_user_trustee)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_bets();
  inline void clear_has_bets();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 bets_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_user_trustee* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_table_status_notify : public ::google::protobuf::Message {
 public:
  packetl2c_table_status_notify();
  virtual ~packetl2c_table_status_notify();

  packetl2c_table_status_notify(const packetl2c_table_status_notify& from);

  inline packetl2c_table_status_notify& operator=(const packetl2c_table_status_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_table_status_notify& default_instance();

  void Swap(packetl2c_table_status_notify* other);

  // implements Message ----------------------------------------------

  packetl2c_table_status_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_table_status_notify& from);
  void MergeFrom(const packetl2c_table_status_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_table_status_notify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // optional .game_srnn_protocols.e_table_status status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::game_srnn_protocols::e_table_status status() const;
  inline void set_status(::game_srnn_protocols::e_table_status value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetl2c_table_status_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_table_status_notify* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_user_trustee_notify : public ::google::protobuf::Message {
 public:
  packetl2c_user_trustee_notify();
  virtual ~packetl2c_user_trustee_notify();

  packetl2c_user_trustee_notify(const packetl2c_user_trustee_notify& from);

  inline packetl2c_user_trustee_notify& operator=(const packetl2c_user_trustee_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_user_trustee_notify& default_instance();

  void Swap(packetl2c_user_trustee_notify* other);

  // implements Message ----------------------------------------------

  packetl2c_user_trustee_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_user_trustee_notify& from);
  void MergeFrom(const packetl2c_user_trustee_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_user_trustee];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // optional int32 chair_id = 2;
  inline bool has_chair_id() const;
  inline void clear_chair_id();
  static const int kChairIdFieldNumber = 2;
  inline ::google::protobuf::int32 chair_id() const;
  inline void set_chair_id(::google::protobuf::int32 value);

  // optional bool trustee = 3;
  inline bool has_trustee() const;
  inline void clear_trustee();
  static const int kTrusteeFieldNumber = 3;
  inline bool trustee() const;
  inline void set_trustee(bool value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetl2c_user_trustee_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_chair_id();
  inline void clear_has_chair_id();
  inline void set_has_trustee();
  inline void clear_has_trustee();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 chair_id_;
  bool trustee_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_user_trustee_notify* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_ready : public ::google::protobuf::Message {
 public:
  packetc2l_ready();
  virtual ~packetc2l_ready();

  packetc2l_ready(const packetc2l_ready& from);

  inline packetc2l_ready& operator=(const packetc2l_ready& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_ready& default_instance();

  void Swap(packetc2l_ready* other);

  // implements Message ----------------------------------------------

  packetc2l_ready* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_ready& from);
  void MergeFrom(const packetc2l_ready& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ready];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // optional bool change_table = 2;
  inline bool has_change_table() const;
  inline void clear_change_table();
  static const int kChangeTableFieldNumber = 2;
  inline bool change_table() const;
  inline void set_change_table(bool value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetc2l_ready)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_change_table();
  inline void clear_has_change_table();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  bool change_table_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_ready* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_game_start : public ::google::protobuf::Message {
 public:
  packetl2c_game_start();
  virtual ~packetl2c_game_start();

  packetl2c_game_start(const packetl2c_game_start& from);

  inline packetl2c_game_start& operator=(const packetl2c_game_start& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_game_start& default_instance();

  void Swap(packetl2c_game_start* other);

  // implements Message ----------------------------------------------

  packetl2c_game_start* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_game_start& from);
  void MergeFrom(const packetl2c_game_start& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // optional int32 banker_user = 3;
  inline bool has_banker_user() const;
  inline void clear_banker_user();
  static const int kBankerUserFieldNumber = 3;
  inline ::google::protobuf::int32 banker_user() const;
  inline void set_banker_user(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetl2c_game_start)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_banker_user();
  inline void clear_has_banker_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 banker_user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_game_start* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_table_enter_player_info : public ::google::protobuf::Message {
 public:
  packetl2c_table_enter_player_info();
  virtual ~packetl2c_table_enter_player_info();

  packetl2c_table_enter_player_info(const packetl2c_table_enter_player_info& from);

  inline packetl2c_table_enter_player_info& operator=(const packetl2c_table_enter_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_table_enter_player_info& default_instance();

  void Swap(packetl2c_table_enter_player_info* other);

  // implements Message ----------------------------------------------

  packetl2c_table_enter_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_table_enter_player_info& from);
  void MergeFrom(const packetl2c_table_enter_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_table_enter_player_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // optional .game_srnn_protocols.msg_player_info player = 2;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 2;
  inline const ::game_srnn_protocols::msg_player_info& player() const;
  inline ::game_srnn_protocols::msg_player_info* mutable_player();
  inline ::game_srnn_protocols::msg_player_info* release_player();
  inline void set_allocated_player(::game_srnn_protocols::msg_player_info* player);

  // optional int32 chair_id = 3;
  inline bool has_chair_id() const;
  inline void clear_chair_id();
  static const int kChairIdFieldNumber = 3;
  inline ::google::protobuf::int32 chair_id() const;
  inline void set_chair_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetl2c_table_enter_player_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player();
  inline void clear_has_player();
  inline void set_has_chair_id();
  inline void clear_has_chair_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game_srnn_protocols::msg_player_info* player_;
  int packet_id_;
  ::google::protobuf::int32 chair_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_table_enter_player_info* default_instance_;
};
// -------------------------------------------------------------------

class cards_data : public ::google::protobuf::Message {
 public:
  cards_data();
  virtual ~cards_data();

  cards_data(const cards_data& from);

  inline cards_data& operator=(const cards_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cards_data& default_instance();

  void Swap(cards_data* other);

  // implements Message ----------------------------------------------

  cards_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cards_data& from);
  void MergeFrom(const cards_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 card = 1;
  inline int card_size() const;
  inline void clear_card();
  static const int kCardFieldNumber = 1;
  inline ::google::protobuf::int32 card(int index) const;
  inline void set_card(int index, ::google::protobuf::int32 value);
  inline void add_card(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_card();

  // optional int32 card_type = 2;
  inline bool has_card_type() const;
  inline void clear_card_type();
  static const int kCardTypeFieldNumber = 2;
  inline ::google::protobuf::int32 card_type() const;
  inline void set_card_type(::google::protobuf::int32 value);

  // optional int32 chair_id = 3;
  inline bool has_chair_id() const;
  inline void clear_chair_id();
  static const int kChairIdFieldNumber = 3;
  inline ::google::protobuf::int32 chair_id() const;
  inline void set_chair_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.cards_data)
 private:
  inline void set_has_card_type();
  inline void clear_has_card_type();
  inline void set_has_chair_id();
  inline void clear_has_chair_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card_;
  ::google::protobuf::int32 card_type_;
  ::google::protobuf::int32 chair_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cards_data* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_open_card : public ::google::protobuf::Message {
 public:
  packetc2l_open_card();
  virtual ~packetc2l_open_card();

  packetc2l_open_card(const packetc2l_open_card& from);

  inline packetc2l_open_card& operator=(const packetc2l_open_card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_open_card& default_instance();

  void Swap(packetc2l_open_card* other);

  // implements Message ----------------------------------------------

  packetc2l_open_card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_open_card& from);
  void MergeFrom(const packetc2l_open_card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_open_card];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetc2l_open_card)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_open_card* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_open_card_notify : public ::google::protobuf::Message {
 public:
  packetl2c_open_card_notify();
  virtual ~packetl2c_open_card_notify();

  packetl2c_open_card_notify(const packetl2c_open_card_notify& from);

  inline packetl2c_open_card_notify& operator=(const packetl2c_open_card_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_open_card_notify& default_instance();

  void Swap(packetl2c_open_card_notify* other);

  // implements Message ----------------------------------------------

  packetl2c_open_card_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_open_card_notify& from);
  void MergeFrom(const packetl2c_open_card_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_open_card_notify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // optional int32 current_user = 2;
  inline bool has_current_user() const;
  inline void clear_current_user();
  static const int kCurrentUserFieldNumber = 2;
  inline ::google::protobuf::int32 current_user() const;
  inline void set_current_user(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetl2c_open_card_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_current_user();
  inline void clear_has_current_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 current_user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_open_card_notify* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_bet_req : public ::google::protobuf::Message {
 public:
  packetc2l_bet_req();
  virtual ~packetc2l_bet_req();

  packetc2l_bet_req(const packetc2l_bet_req& from);

  inline packetc2l_bet_req& operator=(const packetc2l_bet_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_bet_req& default_instance();

  void Swap(packetc2l_bet_req* other);

  // implements Message ----------------------------------------------

  packetc2l_bet_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_bet_req& from);
  void MergeFrom(const packetc2l_bet_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bet_req];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // optional int32 bets = 2;
  inline bool has_bets() const;
  inline void clear_bets();
  static const int kBetsFieldNumber = 2;
  inline ::google::protobuf::int32 bets() const;
  inline void set_bets(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetc2l_bet_req)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_bets();
  inline void clear_has_bets();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 bets_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_bet_req* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bet_notify : public ::google::protobuf::Message {
 public:
  packetl2c_bet_notify();
  virtual ~packetl2c_bet_notify();

  packetl2c_bet_notify(const packetl2c_bet_notify& from);

  inline packetl2c_bet_notify& operator=(const packetl2c_bet_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bet_notify& default_instance();

  void Swap(packetl2c_bet_notify* other);

  // implements Message ----------------------------------------------

  packetl2c_bet_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bet_notify& from);
  void MergeFrom(const packetl2c_bet_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_notify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // optional int32 current_user = 2;
  inline bool has_current_user() const;
  inline void clear_current_user();
  static const int kCurrentUserFieldNumber = 2;
  inline ::google::protobuf::int32 current_user() const;
  inline void set_current_user(::google::protobuf::int32 value);

  // optional int32 bets = 3;
  inline bool has_bets() const;
  inline void clear_bets();
  static const int kBetsFieldNumber = 3;
  inline ::google::protobuf::int32 bets() const;
  inline void set_bets(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetl2c_bet_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_current_user();
  inline void clear_has_current_user();
  inline void set_has_bets();
  inline void clear_has_bets();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 current_user_;
  ::google::protobuf::int32 bets_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bet_notify* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_send_card : public ::google::protobuf::Message {
 public:
  packetl2c_send_card();
  virtual ~packetl2c_send_card();

  packetl2c_send_card(const packetl2c_send_card& from);

  inline packetl2c_send_card& operator=(const packetl2c_send_card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_send_card& default_instance();

  void Swap(packetl2c_send_card* other);

  // implements Message ----------------------------------------------

  packetl2c_send_card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_send_card& from);
  void MergeFrom(const packetl2c_send_card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_card];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // repeated .game_srnn_protocols.cards_data cards = 2;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline const ::game_srnn_protocols::cards_data& cards(int index) const;
  inline ::game_srnn_protocols::cards_data* mutable_cards(int index);
  inline ::game_srnn_protocols::cards_data* add_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::cards_data >&
      cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::cards_data >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetl2c_send_card)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::cards_data > cards_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_send_card* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_banker_req : public ::google::protobuf::Message {
 public:
  packetc2l_banker_req();
  virtual ~packetc2l_banker_req();

  packetc2l_banker_req(const packetc2l_banker_req& from);

  inline packetc2l_banker_req& operator=(const packetc2l_banker_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_banker_req& default_instance();

  void Swap(packetc2l_banker_req* other);

  // implements Message ----------------------------------------------

  packetc2l_banker_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_banker_req& from);
  void MergeFrom(const packetc2l_banker_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_banker_req];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // optional bool grab_banker = 2;
  inline bool has_grab_banker() const;
  inline void clear_grab_banker();
  static const int kGrabBankerFieldNumber = 2;
  inline bool grab_banker() const;
  inline void set_grab_banker(bool value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetc2l_banker_req)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_grab_banker();
  inline void clear_has_grab_banker();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  bool grab_banker_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_banker_req* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_banker_notify : public ::google::protobuf::Message {
 public:
  packetl2c_banker_notify();
  virtual ~packetl2c_banker_notify();

  packetl2c_banker_notify(const packetl2c_banker_notify& from);

  inline packetl2c_banker_notify& operator=(const packetl2c_banker_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_banker_notify& default_instance();

  void Swap(packetl2c_banker_notify* other);

  // implements Message ----------------------------------------------

  packetl2c_banker_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_banker_notify& from);
  void MergeFrom(const packetl2c_banker_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_banker_notify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // optional int32 grab_user = 2;
  inline bool has_grab_user() const;
  inline void clear_grab_user();
  static const int kGrabUserFieldNumber = 2;
  inline ::google::protobuf::int32 grab_user() const;
  inline void set_grab_user(::google::protobuf::int32 value);

  // optional bool grab_banker = 3;
  inline bool has_grab_banker() const;
  inline void clear_grab_banker();
  static const int kGrabBankerFieldNumber = 3;
  inline bool grab_banker() const;
  inline void set_grab_banker(bool value);

  // optional int32 next_user = 4;
  inline bool has_next_user() const;
  inline void clear_next_user();
  static const int kNextUserFieldNumber = 4;
  inline ::google::protobuf::int32 next_user() const;
  inline void set_next_user(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetl2c_banker_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_grab_user();
  inline void clear_has_grab_user();
  inline void set_has_grab_banker();
  inline void clear_has_grab_banker();
  inline void set_has_next_user();
  inline void clear_has_next_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 grab_user_;
  bool grab_banker_;
  ::google::protobuf::int32 next_user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_banker_notify* default_instance_;
};
// -------------------------------------------------------------------

class msg_card_info : public ::google::protobuf::Message {
 public:
  msg_card_info();
  virtual ~msg_card_info();

  msg_card_info(const msg_card_info& from);

  inline msg_card_info& operator=(const msg_card_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_card_info& default_instance();

  void Swap(msg_card_info* other);

  // implements Message ----------------------------------------------

  msg_card_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_card_info& from);
  void MergeFrom(const msg_card_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 chair_id = 1;
  inline bool has_chair_id() const;
  inline void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  inline ::google::protobuf::int32 chair_id() const;
  inline void set_chair_id(::google::protobuf::int32 value);

  // optional int32 game_score = 4;
  inline bool has_game_score() const;
  inline void clear_game_score();
  static const int kGameScoreFieldNumber = 4;
  inline ::google::protobuf::int32 game_score() const;
  inline void set_game_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.msg_card_info)
 private:
  inline void set_has_chair_id();
  inline void clear_has_chair_id();
  inline void set_has_game_score();
  inline void clear_has_game_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chair_id_;
  ::google::protobuf::int32 game_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_card_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_game_end : public ::google::protobuf::Message {
 public:
  packetl2c_game_end();
  virtual ~packetl2c_game_end();

  packetl2c_game_end(const packetl2c_game_end& from);

  inline packetl2c_game_end& operator=(const packetl2c_game_end& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_game_end& default_instance();

  void Swap(packetl2c_game_end* other);

  // implements Message ----------------------------------------------

  packetl2c_game_end* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_game_end& from);
  void MergeFrom(const packetl2c_game_end& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // repeated .game_srnn_protocols.msg_card_info cards = 2;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline const ::game_srnn_protocols::msg_card_info& cards(int index) const;
  inline ::game_srnn_protocols::msg_card_info* mutable_cards(int index);
  inline ::game_srnn_protocols::msg_card_info* add_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::msg_card_info >&
      cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::msg_card_info >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetl2c_game_end)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::msg_card_info > cards_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_game_end* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_game_notify : public ::google::protobuf::Message {
 public:
  packetl2c_game_notify();
  virtual ~packetl2c_game_notify();

  packetl2c_game_notify(const packetl2c_game_notify& from);

  inline packetl2c_game_notify& operator=(const packetl2c_game_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_game_notify& default_instance();

  void Swap(packetl2c_game_notify* other);

  // implements Message ----------------------------------------------

  packetl2c_game_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_game_notify& from);
  void MergeFrom(const packetl2c_game_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_notify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // optional .game_srnn_protocols.e_notify_type notify_type = 2;
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 2;
  inline ::game_srnn_protocols::e_notify_type notify_type() const;
  inline void set_notify_type(::game_srnn_protocols::e_notify_type value);

  // optional int32 notify_param = 3;
  inline bool has_notify_param() const;
  inline void clear_notify_param();
  static const int kNotifyParamFieldNumber = 3;
  inline ::google::protobuf::int32 notify_param() const;
  inline void set_notify_param(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetl2c_game_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_notify_type();
  inline void clear_has_notify_type();
  inline void set_has_notify_param();
  inline void clear_has_notify_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int notify_type_;
  ::google::protobuf::int32 notify_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_game_notify* default_instance_;
};
// -------------------------------------------------------------------

class gm_player_info : public ::google::protobuf::Message {
 public:
  gm_player_info();
  virtual ~gm_player_info();

  gm_player_info(const gm_player_info& from);

  inline gm_player_info& operator=(const gm_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gm_player_info& default_instance();

  void Swap(gm_player_info* other);

  // implements Message ----------------------------------------------

  gm_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gm_player_info& from);
  void MergeFrom(const gm_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional int64 player_gold = 3;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 3;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // optional int32 player_room = 4;
  inline bool has_player_room() const;
  inline void clear_player_room();
  static const int kPlayerRoomFieldNumber = 4;
  inline ::google::protobuf::int32 player_room() const;
  inline void set_player_room(::google::protobuf::int32 value);

  // optional int64 player_profit = 5;
  inline bool has_player_profit() const;
  inline void clear_player_profit();
  static const int kPlayerProfitFieldNumber = 5;
  inline ::google::protobuf::int64 player_profit() const;
  inline void set_player_profit(::google::protobuf::int64 value);

  // optional int64 player_kill_type = 6;
  inline bool has_player_kill_type() const;
  inline void clear_player_kill_type();
  static const int kPlayerKillTypeFieldNumber = 6;
  inline ::google::protobuf::int64 player_kill_type() const;
  inline void set_player_kill_type(::google::protobuf::int64 value);

  // optional int64 player_kill_cnt = 7;
  inline bool has_player_kill_cnt() const;
  inline void clear_player_kill_cnt();
  static const int kPlayerKillCntFieldNumber = 7;
  inline ::google::protobuf::int64 player_kill_cnt() const;
  inline void set_player_kill_cnt(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.gm_player_info)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();
  inline void set_has_player_room();
  inline void clear_has_player_room();
  inline void set_has_player_profit();
  inline void clear_has_player_profit();
  inline void set_has_player_kill_type();
  inline void clear_has_player_kill_type();
  inline void set_has_player_kill_cnt();
  inline void clear_has_player_kill_cnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_name_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 player_room_;
  ::google::protobuf::int64 player_gold_;
  ::google::protobuf::int64 player_profit_;
  ::google::protobuf::int64 player_kill_type_;
  ::google::protobuf::int64 player_kill_cnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gm_player_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_gm_list : public ::google::protobuf::Message {
 public:
  packetc2l_gm_list();
  virtual ~packetc2l_gm_list();

  packetc2l_gm_list(const packetc2l_gm_list& from);

  inline packetc2l_gm_list& operator=(const packetc2l_gm_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_gm_list& default_instance();

  void Swap(packetc2l_gm_list* other);

  // implements Message ----------------------------------------------

  packetc2l_gm_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_gm_list& from);
  void MergeFrom(const packetc2l_gm_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // optional int32 hours = 2;
  inline bool has_hours() const;
  inline void clear_hours();
  static const int kHoursFieldNumber = 2;
  inline ::google::protobuf::int32 hours() const;
  inline void set_hours(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetc2l_gm_list)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_hours();
  inline void clear_has_hours();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 hours_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_gm_list* default_instance_;
};
// -------------------------------------------------------------------

class gm_room_info : public ::google::protobuf::Message {
 public:
  gm_room_info();
  virtual ~gm_room_info();

  gm_room_info(const gm_room_info& from);

  inline gm_room_info& operator=(const gm_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gm_room_info& default_instance();

  void Swap(gm_room_info* other);

  // implements Message ----------------------------------------------

  gm_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gm_room_info& from);
  void MergeFrom(const gm_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 player_fee = 2;
  inline bool has_player_fee() const;
  inline void clear_player_fee();
  static const int kPlayerFeeFieldNumber = 2;
  inline ::google::protobuf::int32 player_fee() const;
  inline void set_player_fee(::google::protobuf::int32 value);

  // optional int64 player_win = 3;
  inline bool has_player_win() const;
  inline void clear_player_win();
  static const int kPlayerWinFieldNumber = 3;
  inline ::google::protobuf::int64 player_win() const;
  inline void set_player_win(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.gm_room_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_player_fee();
  inline void clear_has_player_fee();
  inline void set_has_player_win();
  inline void clear_has_player_win();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 player_fee_;
  ::google::protobuf::int64 player_win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gm_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_gm_list : public ::google::protobuf::Message {
 public:
  packetl2c_gm_list();
  virtual ~packetl2c_gm_list();

  packetl2c_gm_list(const packetl2c_gm_list& from);

  inline packetl2c_gm_list& operator=(const packetl2c_gm_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_gm_list& default_instance();

  void Swap(packetl2c_gm_list* other);

  // implements Message ----------------------------------------------

  packetl2c_gm_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_gm_list& from);
  void MergeFrom(const packetl2c_gm_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // repeated .game_srnn_protocols.gm_player_info players = 2;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 2;
  inline const ::game_srnn_protocols::gm_player_info& players(int index) const;
  inline ::game_srnn_protocols::gm_player_info* mutable_players(int index);
  inline ::game_srnn_protocols::gm_player_info* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::gm_player_info >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::gm_player_info >*
      mutable_players();

  // repeated .game_srnn_protocols.gm_room_info rooms = 3;
  inline int rooms_size() const;
  inline void clear_rooms();
  static const int kRoomsFieldNumber = 3;
  inline const ::game_srnn_protocols::gm_room_info& rooms(int index) const;
  inline ::game_srnn_protocols::gm_room_info* mutable_rooms(int index);
  inline ::game_srnn_protocols::gm_room_info* add_rooms();
  inline const ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::gm_room_info >&
      rooms() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::gm_room_info >*
      mutable_rooms();

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetl2c_gm_list)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::gm_player_info > players_;
  ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::gm_room_info > rooms_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_gm_list* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_gm_kill : public ::google::protobuf::Message {
 public:
  packetc2l_gm_kill();
  virtual ~packetc2l_gm_kill();

  packetc2l_gm_kill(const packetc2l_gm_kill& from);

  inline packetc2l_gm_kill& operator=(const packetc2l_gm_kill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_gm_kill& default_instance();

  void Swap(packetc2l_gm_kill* other);

  // implements Message ----------------------------------------------

  packetc2l_gm_kill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_gm_kill& from);
  void MergeFrom(const packetc2l_gm_kill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_kill];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_srnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_srnn_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int32 kill_type = 3;
  inline bool has_kill_type() const;
  inline void clear_kill_type();
  static const int kKillTypeFieldNumber = 3;
  inline ::google::protobuf::int32 kill_type() const;
  inline void set_kill_type(::google::protobuf::int32 value);

  // optional int32 kill_cnt = 4;
  inline bool has_kill_cnt() const;
  inline void clear_kill_cnt();
  static const int kKillCntFieldNumber = 4;
  inline ::google::protobuf::int32 kill_cnt() const;
  inline void set_kill_cnt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_srnn_protocols.packetc2l_gm_kill)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_kill_type();
  inline void clear_has_kill_type();
  inline void set_has_kill_cnt();
  inline void clear_has_kill_cnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 kill_type_;
  ::google::protobuf::int32 kill_cnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fsrnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fsrnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_gm_kill* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_player_info

// optional int32 player_id = 1;
inline bool msg_player_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_player_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_player_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_player_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_player_info::player_id() const {
  return player_id_;
}
inline void msg_player_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string player_name = 2;
inline bool msg_player_info::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_player_info::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_player_info::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_player_info::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& msg_player_info::player_name() const {
  return *player_name_;
}
inline void msg_player_info::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void msg_player_info::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void msg_player_info::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_player_info::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* msg_player_info::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_player_info::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 head_frame = 3;
inline bool msg_player_info::has_head_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_player_info::set_has_head_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_player_info::clear_has_head_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_player_info::clear_head_frame() {
  head_frame_ = 0;
  clear_has_head_frame();
}
inline ::google::protobuf::int32 msg_player_info::head_frame() const {
  return head_frame_;
}
inline void msg_player_info::set_head_frame(::google::protobuf::int32 value) {
  set_has_head_frame();
  head_frame_ = value;
}

// optional string head_custom = 4;
inline bool msg_player_info::has_head_custom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_player_info::set_has_head_custom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_player_info::clear_has_head_custom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_player_info::clear_head_custom() {
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    head_custom_->clear();
  }
  clear_has_head_custom();
}
inline const ::std::string& msg_player_info::head_custom() const {
  return *head_custom_;
}
inline void msg_player_info::set_head_custom(const ::std::string& value) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(value);
}
inline void msg_player_info::set_head_custom(const char* value) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(value);
}
inline void msg_player_info::set_head_custom(const char* value, size_t size) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_player_info::mutable_head_custom() {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  return head_custom_;
}
inline ::std::string* msg_player_info::release_head_custom() {
  clear_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_custom_;
    head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_player_info::set_allocated_head_custom(::std::string* head_custom) {
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete head_custom_;
  }
  if (head_custom) {
    set_has_head_custom();
    head_custom_ = head_custom;
  } else {
    clear_has_head_custom();
    head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 player_gold = 5;
inline bool msg_player_info::has_player_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_player_info::set_has_player_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_player_info::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_player_info::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 msg_player_info::player_gold() const {
  return player_gold_;
}
inline void msg_player_info::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// optional int32 player_sex = 6;
inline bool msg_player_info::has_player_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_player_info::set_has_player_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_player_info::clear_has_player_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_player_info::clear_player_sex() {
  player_sex_ = 0;
  clear_has_player_sex();
}
inline ::google::protobuf::int32 msg_player_info::player_sex() const {
  return player_sex_;
}
inline void msg_player_info::set_player_sex(::google::protobuf::int32 value) {
  set_has_player_sex();
  player_sex_ = value;
}

// optional int32 vip_level = 7;
inline bool msg_player_info::has_vip_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_player_info::set_has_vip_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_player_info::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_player_info::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 msg_player_info::vip_level() const {
  return vip_level_;
}
inline void msg_player_info::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// -------------------------------------------------------------------

// msg_player_data

// optional int32 chair_id = 1;
inline bool msg_player_data::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_player_data::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_player_data::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_player_data::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 msg_player_data::chair_id() const {
  return chair_id_;
}
inline void msg_player_data::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
}

// optional .game_srnn_protocols.msg_player_info player = 2;
inline bool msg_player_data::has_player() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_player_data::set_has_player() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_player_data::clear_has_player() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_player_data::clear_player() {
  if (player_ != NULL) player_->::game_srnn_protocols::msg_player_info::Clear();
  clear_has_player();
}
inline const ::game_srnn_protocols::msg_player_info& msg_player_data::player() const {
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
inline ::game_srnn_protocols::msg_player_info* msg_player_data::mutable_player() {
  set_has_player();
  if (player_ == NULL) player_ = new ::game_srnn_protocols::msg_player_info;
  return player_;
}
inline ::game_srnn_protocols::msg_player_info* msg_player_data::release_player() {
  clear_has_player();
  ::game_srnn_protocols::msg_player_info* temp = player_;
  player_ = NULL;
  return temp;
}
inline void msg_player_data::set_allocated_player(::game_srnn_protocols::msg_player_info* player) {
  delete player_;
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
}

// optional .game_srnn_protocols.e_table_status status = 3;
inline bool msg_player_data::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_player_data::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_player_data::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_player_data::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::game_srnn_protocols::e_table_status msg_player_data::status() const {
  return static_cast< ::game_srnn_protocols::e_table_status >(status_);
}
inline void msg_player_data::set_status(::game_srnn_protocols::e_table_status value) {
  assert(::game_srnn_protocols::e_table_status_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional int32 other_bets = 4;
inline bool msg_player_data::has_other_bets() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_player_data::set_has_other_bets() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_player_data::clear_has_other_bets() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_player_data::clear_other_bets() {
  other_bets_ = 0;
  clear_has_other_bets();
}
inline ::google::protobuf::int32 msg_player_data::other_bets() const {
  return other_bets_;
}
inline void msg_player_data::set_other_bets(::google::protobuf::int32 value) {
  set_has_other_bets();
  other_bets_ = value;
}

// optional .game_srnn_protocols.cards_data cards = 5;
inline bool msg_player_data::has_cards() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_player_data::set_has_cards() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_player_data::clear_has_cards() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_player_data::clear_cards() {
  if (cards_ != NULL) cards_->::game_srnn_protocols::cards_data::Clear();
  clear_has_cards();
}
inline const ::game_srnn_protocols::cards_data& msg_player_data::cards() const {
  return cards_ != NULL ? *cards_ : *default_instance_->cards_;
}
inline ::game_srnn_protocols::cards_data* msg_player_data::mutable_cards() {
  set_has_cards();
  if (cards_ == NULL) cards_ = new ::game_srnn_protocols::cards_data;
  return cards_;
}
inline ::game_srnn_protocols::cards_data* msg_player_data::release_cards() {
  clear_has_cards();
  ::game_srnn_protocols::cards_data* temp = cards_;
  cards_ = NULL;
  return temp;
}
inline void msg_player_data::set_allocated_cards(::game_srnn_protocols::cards_data* cards) {
  delete cards_;
  cards_ = cards;
  if (cards) {
    set_has_cards();
  } else {
    clear_has_cards();
  }
}

// optional bool open_card = 6;
inline bool msg_player_data::has_open_card() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_player_data::set_has_open_card() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_player_data::clear_has_open_card() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_player_data::clear_open_card() {
  open_card_ = false;
  clear_has_open_card();
}
inline bool msg_player_data::open_card() const {
  return open_card_;
}
inline void msg_player_data::set_open_card(bool value) {
  set_has_open_card();
  open_card_ = value;
}

// optional int32 trustee = 7;
inline bool msg_player_data::has_trustee() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_player_data::set_has_trustee() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_player_data::clear_has_trustee() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_player_data::clear_trustee() {
  trustee_ = 0;
  clear_has_trustee();
}
inline ::google::protobuf::int32 msg_player_data::trustee() const {
  return trustee_;
}
inline void msg_player_data::set_trustee(::google::protobuf::int32 value) {
  set_has_trustee();
  trustee_ = value;
}

// -------------------------------------------------------------------

// packetc2l_check_state

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
inline bool packetc2l_check_state::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_check_state::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_check_state::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_check_state::clear_packet_id() {
  packet_id_ = 10001;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetc2l_check_state::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_check_state::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_check_state_result

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
inline bool packetl2c_check_state_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_check_state_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_check_state_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_check_state_result::clear_packet_id() {
  packet_id_ = 15001;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetl2c_check_state_result::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_check_state_result::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 result = 2 [default = 0];
inline bool packetl2c_check_state_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_check_state_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_check_state_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_check_state_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetl2c_check_state_result::result() const {
  return result_;
}
inline void packetl2c_check_state_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_get_scene_info

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
inline bool packetc2l_get_scene_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_scene_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_scene_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_scene_info::clear_packet_id() {
  packet_id_ = 10002;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetc2l_get_scene_info::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_scene_info::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_scene_info_result

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_info_result];
inline bool packetl2c_scene_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_scene_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_scene_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_scene_info_result::clear_packet_id() {
  packet_id_ = 15002;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetl2c_scene_info_result::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_scene_info_result::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 room_type = 2;
inline bool packetl2c_scene_info_result::has_room_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_scene_info_result::set_has_room_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_scene_info_result::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_scene_info_result::clear_room_type() {
  room_type_ = 0;
  clear_has_room_type();
}
inline ::google::protobuf::int32 packetl2c_scene_info_result::room_type() const {
  return room_type_;
}
inline void packetl2c_scene_info_result::set_room_type(::google::protobuf::int32 value) {
  set_has_room_type();
  room_type_ = value;
}

// optional .game_srnn_protocols.e_table_status status = 3;
inline bool packetl2c_scene_info_result::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_scene_info_result::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_scene_info_result::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_scene_info_result::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::game_srnn_protocols::e_table_status packetl2c_scene_info_result::status() const {
  return static_cast< ::game_srnn_protocols::e_table_status >(status_);
}
inline void packetl2c_scene_info_result::set_status(::game_srnn_protocols::e_table_status value) {
  assert(::game_srnn_protocols::e_table_status_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional int32 banker_idx = 4;
inline bool packetl2c_scene_info_result::has_banker_idx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_scene_info_result::set_has_banker_idx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_scene_info_result::clear_has_banker_idx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_scene_info_result::clear_banker_idx() {
  banker_idx_ = 0;
  clear_has_banker_idx();
}
inline ::google::protobuf::int32 packetl2c_scene_info_result::banker_idx() const {
  return banker_idx_;
}
inline void packetl2c_scene_info_result::set_banker_idx(::google::protobuf::int32 value) {
  set_has_banker_idx();
  banker_idx_ = value;
}

// repeated .game_srnn_protocols.msg_player_data players = 5;
inline int packetl2c_scene_info_result::players_size() const {
  return players_.size();
}
inline void packetl2c_scene_info_result::clear_players() {
  players_.Clear();
}
inline const ::game_srnn_protocols::msg_player_data& packetl2c_scene_info_result::players(int index) const {
  return players_.Get(index);
}
inline ::game_srnn_protocols::msg_player_data* packetl2c_scene_info_result::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::game_srnn_protocols::msg_player_data* packetl2c_scene_info_result::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::msg_player_data >&
packetl2c_scene_info_result::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::msg_player_data >*
packetl2c_scene_info_result::mutable_players() {
  return &players_;
}

// optional .game_srnn_protocols.packetl2c_game_end game_end = 6;
inline bool packetl2c_scene_info_result::has_game_end() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_scene_info_result::set_has_game_end() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_scene_info_result::clear_has_game_end() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_scene_info_result::clear_game_end() {
  if (game_end_ != NULL) game_end_->::game_srnn_protocols::packetl2c_game_end::Clear();
  clear_has_game_end();
}
inline const ::game_srnn_protocols::packetl2c_game_end& packetl2c_scene_info_result::game_end() const {
  return game_end_ != NULL ? *game_end_ : *default_instance_->game_end_;
}
inline ::game_srnn_protocols::packetl2c_game_end* packetl2c_scene_info_result::mutable_game_end() {
  set_has_game_end();
  if (game_end_ == NULL) game_end_ = new ::game_srnn_protocols::packetl2c_game_end;
  return game_end_;
}
inline ::game_srnn_protocols::packetl2c_game_end* packetl2c_scene_info_result::release_game_end() {
  clear_has_game_end();
  ::game_srnn_protocols::packetl2c_game_end* temp = game_end_;
  game_end_ = NULL;
  return temp;
}
inline void packetl2c_scene_info_result::set_allocated_game_end(::game_srnn_protocols::packetl2c_game_end* game_end) {
  delete game_end_;
  game_end_ = game_end;
  if (game_end) {
    set_has_game_end();
  } else {
    clear_has_game_end();
  }
}

// optional int32 status_remain_sec = 7;
inline bool packetl2c_scene_info_result::has_status_remain_sec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetl2c_scene_info_result::set_has_status_remain_sec() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetl2c_scene_info_result::clear_has_status_remain_sec() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetl2c_scene_info_result::clear_status_remain_sec() {
  status_remain_sec_ = 0;
  clear_has_status_remain_sec();
}
inline ::google::protobuf::int32 packetl2c_scene_info_result::status_remain_sec() const {
  return status_remain_sec_;
}
inline void packetl2c_scene_info_result::set_status_remain_sec(::google::protobuf::int32 value) {
  set_has_status_remain_sec();
  status_remain_sec_ = value;
}

// optional int32 status_turn_sec = 8;
inline bool packetl2c_scene_info_result::has_status_turn_sec() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void packetl2c_scene_info_result::set_has_status_turn_sec() {
  _has_bits_[0] |= 0x00000080u;
}
inline void packetl2c_scene_info_result::clear_has_status_turn_sec() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void packetl2c_scene_info_result::clear_status_turn_sec() {
  status_turn_sec_ = 0;
  clear_has_status_turn_sec();
}
inline ::google::protobuf::int32 packetl2c_scene_info_result::status_turn_sec() const {
  return status_turn_sec_;
}
inline void packetl2c_scene_info_result::set_status_turn_sec(::google::protobuf::int32 value) {
  set_has_status_turn_sec();
  status_turn_sec_ = value;
}

// -------------------------------------------------------------------

// packetc2l_enter_room

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
inline bool packetc2l_enter_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_enter_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_enter_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_enter_room::clear_packet_id() {
  packet_id_ = 10009;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetc2l_enter_room::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_enter_room::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 room_type = 2;
inline bool packetc2l_enter_room::has_room_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_enter_room::set_has_room_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_enter_room::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_enter_room::clear_room_type() {
  room_type_ = 0;
  clear_has_room_type();
}
inline ::google::protobuf::int32 packetc2l_enter_room::room_type() const {
  return room_type_;
}
inline void packetc2l_enter_room::set_room_type(::google::protobuf::int32 value) {
  set_has_room_type();
  room_type_ = value;
}

// -------------------------------------------------------------------

// packetl2c_enter_room_result

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
inline bool packetl2c_enter_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_enter_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_enter_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_enter_room_result::clear_packet_id() {
  packet_id_ = 15009;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetl2c_enter_room_result::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_enter_room_result::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_enter_room_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_enter_room_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_enter_room_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_enter_room_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_enter_room_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_enter_room_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_leave_room

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
inline bool packetc2l_leave_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_leave_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_leave_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_leave_room::clear_packet_id() {
  packet_id_ = 10010;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetc2l_leave_room::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_leave_room::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_leave_room_result

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
inline bool packetl2c_leave_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_leave_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_leave_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_leave_room_result::clear_packet_id() {
  packet_id_ = 15010;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetl2c_leave_room_result::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_leave_room_result::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int64 player_gold = 2;
inline bool packetl2c_leave_room_result::has_player_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_leave_room_result::set_has_player_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_leave_room_result::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_leave_room_result::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 packetl2c_leave_room_result::player_gold() const {
  return player_gold_;
}
inline void packetl2c_leave_room_result::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// -------------------------------------------------------------------

// packetc2l_user_trustee

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_user_trustee];
inline bool packetc2l_user_trustee::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_user_trustee::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_user_trustee::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_user_trustee::clear_packet_id() {
  packet_id_ = 10007;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetc2l_user_trustee::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_user_trustee::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 bets = 2;
inline bool packetc2l_user_trustee::has_bets() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_user_trustee::set_has_bets() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_user_trustee::clear_has_bets() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_user_trustee::clear_bets() {
  bets_ = 0;
  clear_has_bets();
}
inline ::google::protobuf::int32 packetc2l_user_trustee::bets() const {
  return bets_;
}
inline void packetc2l_user_trustee::set_bets(::google::protobuf::int32 value) {
  set_has_bets();
  bets_ = value;
}

// -------------------------------------------------------------------

// packetl2c_table_status_notify

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_table_status_notify];
inline bool packetl2c_table_status_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_table_status_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_table_status_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_table_status_notify::clear_packet_id() {
  packet_id_ = 15029;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetl2c_table_status_notify::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_table_status_notify::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_srnn_protocols.e_table_status status = 2;
inline bool packetl2c_table_status_notify::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_table_status_notify::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_table_status_notify::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_table_status_notify::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::game_srnn_protocols::e_table_status packetl2c_table_status_notify::status() const {
  return static_cast< ::game_srnn_protocols::e_table_status >(status_);
}
inline void packetl2c_table_status_notify::set_status(::game_srnn_protocols::e_table_status value) {
  assert(::game_srnn_protocols::e_table_status_IsValid(value));
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// packetl2c_user_trustee_notify

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_user_trustee];
inline bool packetl2c_user_trustee_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_user_trustee_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_user_trustee_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_user_trustee_notify::clear_packet_id() {
  packet_id_ = 15008;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetl2c_user_trustee_notify::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_user_trustee_notify::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 chair_id = 2;
inline bool packetl2c_user_trustee_notify::has_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_user_trustee_notify::set_has_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_user_trustee_notify::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_user_trustee_notify::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 packetl2c_user_trustee_notify::chair_id() const {
  return chair_id_;
}
inline void packetl2c_user_trustee_notify::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
}

// optional bool trustee = 3;
inline bool packetl2c_user_trustee_notify::has_trustee() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_user_trustee_notify::set_has_trustee() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_user_trustee_notify::clear_has_trustee() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_user_trustee_notify::clear_trustee() {
  trustee_ = false;
  clear_has_trustee();
}
inline bool packetl2c_user_trustee_notify::trustee() const {
  return trustee_;
}
inline void packetl2c_user_trustee_notify::set_trustee(bool value) {
  set_has_trustee();
  trustee_ = value;
}

// -------------------------------------------------------------------

// packetc2l_ready

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ready];
inline bool packetc2l_ready::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_ready::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_ready::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_ready::clear_packet_id() {
  packet_id_ = 10011;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetc2l_ready::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_ready::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional bool change_table = 2;
inline bool packetc2l_ready::has_change_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_ready::set_has_change_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_ready::clear_has_change_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_ready::clear_change_table() {
  change_table_ = false;
  clear_has_change_table();
}
inline bool packetc2l_ready::change_table() const {
  return change_table_;
}
inline void packetc2l_ready::set_change_table(bool value) {
  set_has_change_table();
  change_table_ = value;
}

// -------------------------------------------------------------------

// packetl2c_game_start

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
inline bool packetl2c_game_start::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_game_start::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_game_start::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_game_start::clear_packet_id() {
  packet_id_ = 15017;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetl2c_game_start::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_game_start::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 banker_user = 3;
inline bool packetl2c_game_start::has_banker_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_game_start::set_has_banker_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_game_start::clear_has_banker_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_game_start::clear_banker_user() {
  banker_user_ = 0;
  clear_has_banker_user();
}
inline ::google::protobuf::int32 packetl2c_game_start::banker_user() const {
  return banker_user_;
}
inline void packetl2c_game_start::set_banker_user(::google::protobuf::int32 value) {
  set_has_banker_user();
  banker_user_ = value;
}

// -------------------------------------------------------------------

// packetl2c_table_enter_player_info

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_table_enter_player_info];
inline bool packetl2c_table_enter_player_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_table_enter_player_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_table_enter_player_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_table_enter_player_info::clear_packet_id() {
  packet_id_ = 15022;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetl2c_table_enter_player_info::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_table_enter_player_info::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_srnn_protocols.msg_player_info player = 2;
inline bool packetl2c_table_enter_player_info::has_player() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_table_enter_player_info::set_has_player() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_table_enter_player_info::clear_has_player() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_table_enter_player_info::clear_player() {
  if (player_ != NULL) player_->::game_srnn_protocols::msg_player_info::Clear();
  clear_has_player();
}
inline const ::game_srnn_protocols::msg_player_info& packetl2c_table_enter_player_info::player() const {
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
inline ::game_srnn_protocols::msg_player_info* packetl2c_table_enter_player_info::mutable_player() {
  set_has_player();
  if (player_ == NULL) player_ = new ::game_srnn_protocols::msg_player_info;
  return player_;
}
inline ::game_srnn_protocols::msg_player_info* packetl2c_table_enter_player_info::release_player() {
  clear_has_player();
  ::game_srnn_protocols::msg_player_info* temp = player_;
  player_ = NULL;
  return temp;
}
inline void packetl2c_table_enter_player_info::set_allocated_player(::game_srnn_protocols::msg_player_info* player) {
  delete player_;
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
}

// optional int32 chair_id = 3;
inline bool packetl2c_table_enter_player_info::has_chair_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_table_enter_player_info::set_has_chair_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_table_enter_player_info::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_table_enter_player_info::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 packetl2c_table_enter_player_info::chair_id() const {
  return chair_id_;
}
inline void packetl2c_table_enter_player_info::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
}

// -------------------------------------------------------------------

// cards_data

// repeated int32 card = 1;
inline int cards_data::card_size() const {
  return card_.size();
}
inline void cards_data::clear_card() {
  card_.Clear();
}
inline ::google::protobuf::int32 cards_data::card(int index) const {
  return card_.Get(index);
}
inline void cards_data::set_card(int index, ::google::protobuf::int32 value) {
  card_.Set(index, value);
}
inline void cards_data::add_card(::google::protobuf::int32 value) {
  card_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
cards_data::card() const {
  return card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
cards_data::mutable_card() {
  return &card_;
}

// optional int32 card_type = 2;
inline bool cards_data::has_card_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cards_data::set_has_card_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cards_data::clear_has_card_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cards_data::clear_card_type() {
  card_type_ = 0;
  clear_has_card_type();
}
inline ::google::protobuf::int32 cards_data::card_type() const {
  return card_type_;
}
inline void cards_data::set_card_type(::google::protobuf::int32 value) {
  set_has_card_type();
  card_type_ = value;
}

// optional int32 chair_id = 3;
inline bool cards_data::has_chair_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cards_data::set_has_chair_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cards_data::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cards_data::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 cards_data::chair_id() const {
  return chair_id_;
}
inline void cards_data::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_open_card

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_open_card];
inline bool packetc2l_open_card::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_open_card::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_open_card::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_open_card::clear_packet_id() {
  packet_id_ = 10014;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetc2l_open_card::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_open_card::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_open_card_notify

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_open_card_notify];
inline bool packetl2c_open_card_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_open_card_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_open_card_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_open_card_notify::clear_packet_id() {
  packet_id_ = 15019;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetl2c_open_card_notify::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_open_card_notify::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 current_user = 2;
inline bool packetl2c_open_card_notify::has_current_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_open_card_notify::set_has_current_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_open_card_notify::clear_has_current_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_open_card_notify::clear_current_user() {
  current_user_ = 0;
  clear_has_current_user();
}
inline ::google::protobuf::int32 packetl2c_open_card_notify::current_user() const {
  return current_user_;
}
inline void packetl2c_open_card_notify::set_current_user(::google::protobuf::int32 value) {
  set_has_current_user();
  current_user_ = value;
}

// -------------------------------------------------------------------

// packetc2l_bet_req

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bet_req];
inline bool packetc2l_bet_req::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_bet_req::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_bet_req::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_bet_req::clear_packet_id() {
  packet_id_ = 10013;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetc2l_bet_req::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_bet_req::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 bets = 2;
inline bool packetc2l_bet_req::has_bets() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_bet_req::set_has_bets() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_bet_req::clear_has_bets() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_bet_req::clear_bets() {
  bets_ = 0;
  clear_has_bets();
}
inline ::google::protobuf::int32 packetc2l_bet_req::bets() const {
  return bets_;
}
inline void packetc2l_bet_req::set_bets(::google::protobuf::int32 value) {
  set_has_bets();
  bets_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bet_notify

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_notify];
inline bool packetl2c_bet_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bet_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bet_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bet_notify::clear_packet_id() {
  packet_id_ = 15014;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetl2c_bet_notify::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bet_notify::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 current_user = 2;
inline bool packetl2c_bet_notify::has_current_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bet_notify::set_has_current_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bet_notify::clear_has_current_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bet_notify::clear_current_user() {
  current_user_ = 0;
  clear_has_current_user();
}
inline ::google::protobuf::int32 packetl2c_bet_notify::current_user() const {
  return current_user_;
}
inline void packetl2c_bet_notify::set_current_user(::google::protobuf::int32 value) {
  set_has_current_user();
  current_user_ = value;
}

// optional int32 bets = 3;
inline bool packetl2c_bet_notify::has_bets() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bet_notify::set_has_bets() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bet_notify::clear_has_bets() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bet_notify::clear_bets() {
  bets_ = 0;
  clear_has_bets();
}
inline ::google::protobuf::int32 packetl2c_bet_notify::bets() const {
  return bets_;
}
inline void packetl2c_bet_notify::set_bets(::google::protobuf::int32 value) {
  set_has_bets();
  bets_ = value;
}

// -------------------------------------------------------------------

// packetl2c_send_card

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_card];
inline bool packetl2c_send_card::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_send_card::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_send_card::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_send_card::clear_packet_id() {
  packet_id_ = 15020;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetl2c_send_card::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_send_card::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_srnn_protocols.cards_data cards = 2;
inline int packetl2c_send_card::cards_size() const {
  return cards_.size();
}
inline void packetl2c_send_card::clear_cards() {
  cards_.Clear();
}
inline const ::game_srnn_protocols::cards_data& packetl2c_send_card::cards(int index) const {
  return cards_.Get(index);
}
inline ::game_srnn_protocols::cards_data* packetl2c_send_card::mutable_cards(int index) {
  return cards_.Mutable(index);
}
inline ::game_srnn_protocols::cards_data* packetl2c_send_card::add_cards() {
  return cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::cards_data >&
packetl2c_send_card::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::cards_data >*
packetl2c_send_card::mutable_cards() {
  return &cards_;
}

// -------------------------------------------------------------------

// packetc2l_banker_req

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_banker_req];
inline bool packetc2l_banker_req::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_banker_req::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_banker_req::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_banker_req::clear_packet_id() {
  packet_id_ = 10012;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetc2l_banker_req::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_banker_req::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional bool grab_banker = 2;
inline bool packetc2l_banker_req::has_grab_banker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_banker_req::set_has_grab_banker() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_banker_req::clear_has_grab_banker() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_banker_req::clear_grab_banker() {
  grab_banker_ = false;
  clear_has_grab_banker();
}
inline bool packetc2l_banker_req::grab_banker() const {
  return grab_banker_;
}
inline void packetc2l_banker_req::set_grab_banker(bool value) {
  set_has_grab_banker();
  grab_banker_ = value;
}

// -------------------------------------------------------------------

// packetl2c_banker_notify

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_banker_notify];
inline bool packetl2c_banker_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_banker_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_banker_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_banker_notify::clear_packet_id() {
  packet_id_ = 15021;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetl2c_banker_notify::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_banker_notify::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 grab_user = 2;
inline bool packetl2c_banker_notify::has_grab_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_banker_notify::set_has_grab_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_banker_notify::clear_has_grab_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_banker_notify::clear_grab_user() {
  grab_user_ = 0;
  clear_has_grab_user();
}
inline ::google::protobuf::int32 packetl2c_banker_notify::grab_user() const {
  return grab_user_;
}
inline void packetl2c_banker_notify::set_grab_user(::google::protobuf::int32 value) {
  set_has_grab_user();
  grab_user_ = value;
}

// optional bool grab_banker = 3;
inline bool packetl2c_banker_notify::has_grab_banker() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_banker_notify::set_has_grab_banker() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_banker_notify::clear_has_grab_banker() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_banker_notify::clear_grab_banker() {
  grab_banker_ = false;
  clear_has_grab_banker();
}
inline bool packetl2c_banker_notify::grab_banker() const {
  return grab_banker_;
}
inline void packetl2c_banker_notify::set_grab_banker(bool value) {
  set_has_grab_banker();
  grab_banker_ = value;
}

// optional int32 next_user = 4;
inline bool packetl2c_banker_notify::has_next_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_banker_notify::set_has_next_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_banker_notify::clear_has_next_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_banker_notify::clear_next_user() {
  next_user_ = 0;
  clear_has_next_user();
}
inline ::google::protobuf::int32 packetl2c_banker_notify::next_user() const {
  return next_user_;
}
inline void packetl2c_banker_notify::set_next_user(::google::protobuf::int32 value) {
  set_has_next_user();
  next_user_ = value;
}

// -------------------------------------------------------------------

// msg_card_info

// optional int32 chair_id = 1;
inline bool msg_card_info::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_card_info::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_card_info::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_card_info::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 msg_card_info::chair_id() const {
  return chair_id_;
}
inline void msg_card_info::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
}

// optional int32 game_score = 4;
inline bool msg_card_info::has_game_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_card_info::set_has_game_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_card_info::clear_has_game_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_card_info::clear_game_score() {
  game_score_ = 0;
  clear_has_game_score();
}
inline ::google::protobuf::int32 msg_card_info::game_score() const {
  return game_score_;
}
inline void msg_card_info::set_game_score(::google::protobuf::int32 value) {
  set_has_game_score();
  game_score_ = value;
}

// -------------------------------------------------------------------

// packetl2c_game_end

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end];
inline bool packetl2c_game_end::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_game_end::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_game_end::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_game_end::clear_packet_id() {
  packet_id_ = 15016;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetl2c_game_end::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_game_end::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_srnn_protocols.msg_card_info cards = 2;
inline int packetl2c_game_end::cards_size() const {
  return cards_.size();
}
inline void packetl2c_game_end::clear_cards() {
  cards_.Clear();
}
inline const ::game_srnn_protocols::msg_card_info& packetl2c_game_end::cards(int index) const {
  return cards_.Get(index);
}
inline ::game_srnn_protocols::msg_card_info* packetl2c_game_end::mutable_cards(int index) {
  return cards_.Mutable(index);
}
inline ::game_srnn_protocols::msg_card_info* packetl2c_game_end::add_cards() {
  return cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::msg_card_info >&
packetl2c_game_end::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::msg_card_info >*
packetl2c_game_end::mutable_cards() {
  return &cards_;
}

// -------------------------------------------------------------------

// packetl2c_game_notify

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_notify];
inline bool packetl2c_game_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_game_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_game_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_game_notify::clear_packet_id() {
  packet_id_ = 15018;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetl2c_game_notify::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_game_notify::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_srnn_protocols.e_notify_type notify_type = 2;
inline bool packetl2c_game_notify::has_notify_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_game_notify::set_has_notify_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_game_notify::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_game_notify::clear_notify_type() {
  notify_type_ = 1;
  clear_has_notify_type();
}
inline ::game_srnn_protocols::e_notify_type packetl2c_game_notify::notify_type() const {
  return static_cast< ::game_srnn_protocols::e_notify_type >(notify_type_);
}
inline void packetl2c_game_notify::set_notify_type(::game_srnn_protocols::e_notify_type value) {
  assert(::game_srnn_protocols::e_notify_type_IsValid(value));
  set_has_notify_type();
  notify_type_ = value;
}

// optional int32 notify_param = 3;
inline bool packetl2c_game_notify::has_notify_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_game_notify::set_has_notify_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_game_notify::clear_has_notify_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_game_notify::clear_notify_param() {
  notify_param_ = 0;
  clear_has_notify_param();
}
inline ::google::protobuf::int32 packetl2c_game_notify::notify_param() const {
  return notify_param_;
}
inline void packetl2c_game_notify::set_notify_param(::google::protobuf::int32 value) {
  set_has_notify_param();
  notify_param_ = value;
}

// -------------------------------------------------------------------

// gm_player_info

// optional int32 player_id = 1;
inline bool gm_player_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gm_player_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gm_player_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gm_player_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 gm_player_info::player_id() const {
  return player_id_;
}
inline void gm_player_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string player_name = 2;
inline bool gm_player_info::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gm_player_info::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gm_player_info::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gm_player_info::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& gm_player_info::player_name() const {
  return *player_name_;
}
inline void gm_player_info::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void gm_player_info::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void gm_player_info::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gm_player_info::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* gm_player_info::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gm_player_info::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 player_gold = 3;
inline bool gm_player_info::has_player_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gm_player_info::set_has_player_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gm_player_info::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gm_player_info::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 gm_player_info::player_gold() const {
  return player_gold_;
}
inline void gm_player_info::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// optional int32 player_room = 4;
inline bool gm_player_info::has_player_room() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gm_player_info::set_has_player_room() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gm_player_info::clear_has_player_room() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gm_player_info::clear_player_room() {
  player_room_ = 0;
  clear_has_player_room();
}
inline ::google::protobuf::int32 gm_player_info::player_room() const {
  return player_room_;
}
inline void gm_player_info::set_player_room(::google::protobuf::int32 value) {
  set_has_player_room();
  player_room_ = value;
}

// optional int64 player_profit = 5;
inline bool gm_player_info::has_player_profit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gm_player_info::set_has_player_profit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gm_player_info::clear_has_player_profit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gm_player_info::clear_player_profit() {
  player_profit_ = GOOGLE_LONGLONG(0);
  clear_has_player_profit();
}
inline ::google::protobuf::int64 gm_player_info::player_profit() const {
  return player_profit_;
}
inline void gm_player_info::set_player_profit(::google::protobuf::int64 value) {
  set_has_player_profit();
  player_profit_ = value;
}

// optional int64 player_kill_type = 6;
inline bool gm_player_info::has_player_kill_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gm_player_info::set_has_player_kill_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gm_player_info::clear_has_player_kill_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gm_player_info::clear_player_kill_type() {
  player_kill_type_ = GOOGLE_LONGLONG(0);
  clear_has_player_kill_type();
}
inline ::google::protobuf::int64 gm_player_info::player_kill_type() const {
  return player_kill_type_;
}
inline void gm_player_info::set_player_kill_type(::google::protobuf::int64 value) {
  set_has_player_kill_type();
  player_kill_type_ = value;
}

// optional int64 player_kill_cnt = 7;
inline bool gm_player_info::has_player_kill_cnt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gm_player_info::set_has_player_kill_cnt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gm_player_info::clear_has_player_kill_cnt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gm_player_info::clear_player_kill_cnt() {
  player_kill_cnt_ = GOOGLE_LONGLONG(0);
  clear_has_player_kill_cnt();
}
inline ::google::protobuf::int64 gm_player_info::player_kill_cnt() const {
  return player_kill_cnt_;
}
inline void gm_player_info::set_player_kill_cnt(::google::protobuf::int64 value) {
  set_has_player_kill_cnt();
  player_kill_cnt_ = value;
}

// -------------------------------------------------------------------

// packetc2l_gm_list

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_list];
inline bool packetc2l_gm_list::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_gm_list::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_gm_list::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_gm_list::clear_packet_id() {
  packet_id_ = 10015;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetc2l_gm_list::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_gm_list::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 hours = 2;
inline bool packetc2l_gm_list::has_hours() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_gm_list::set_has_hours() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_gm_list::clear_has_hours() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_gm_list::clear_hours() {
  hours_ = 0;
  clear_has_hours();
}
inline ::google::protobuf::int32 packetc2l_gm_list::hours() const {
  return hours_;
}
inline void packetc2l_gm_list::set_hours(::google::protobuf::int32 value) {
  set_has_hours();
  hours_ = value;
}

// -------------------------------------------------------------------

// gm_room_info

// optional int32 id = 1;
inline bool gm_room_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gm_room_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gm_room_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gm_room_info::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 gm_room_info::id() const {
  return id_;
}
inline void gm_room_info::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 player_fee = 2;
inline bool gm_room_info::has_player_fee() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gm_room_info::set_has_player_fee() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gm_room_info::clear_has_player_fee() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gm_room_info::clear_player_fee() {
  player_fee_ = 0;
  clear_has_player_fee();
}
inline ::google::protobuf::int32 gm_room_info::player_fee() const {
  return player_fee_;
}
inline void gm_room_info::set_player_fee(::google::protobuf::int32 value) {
  set_has_player_fee();
  player_fee_ = value;
}

// optional int64 player_win = 3;
inline bool gm_room_info::has_player_win() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gm_room_info::set_has_player_win() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gm_room_info::clear_has_player_win() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gm_room_info::clear_player_win() {
  player_win_ = GOOGLE_LONGLONG(0);
  clear_has_player_win();
}
inline ::google::protobuf::int64 gm_room_info::player_win() const {
  return player_win_;
}
inline void gm_room_info::set_player_win(::google::protobuf::int64 value) {
  set_has_player_win();
  player_win_ = value;
}

// -------------------------------------------------------------------

// packetl2c_gm_list

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_list];
inline bool packetl2c_gm_list::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_gm_list::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_gm_list::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_gm_list::clear_packet_id() {
  packet_id_ = 15024;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetl2c_gm_list::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_gm_list::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_srnn_protocols.gm_player_info players = 2;
inline int packetl2c_gm_list::players_size() const {
  return players_.size();
}
inline void packetl2c_gm_list::clear_players() {
  players_.Clear();
}
inline const ::game_srnn_protocols::gm_player_info& packetl2c_gm_list::players(int index) const {
  return players_.Get(index);
}
inline ::game_srnn_protocols::gm_player_info* packetl2c_gm_list::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::game_srnn_protocols::gm_player_info* packetl2c_gm_list::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::gm_player_info >&
packetl2c_gm_list::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::gm_player_info >*
packetl2c_gm_list::mutable_players() {
  return &players_;
}

// repeated .game_srnn_protocols.gm_room_info rooms = 3;
inline int packetl2c_gm_list::rooms_size() const {
  return rooms_.size();
}
inline void packetl2c_gm_list::clear_rooms() {
  rooms_.Clear();
}
inline const ::game_srnn_protocols::gm_room_info& packetl2c_gm_list::rooms(int index) const {
  return rooms_.Get(index);
}
inline ::game_srnn_protocols::gm_room_info* packetl2c_gm_list::mutable_rooms(int index) {
  return rooms_.Mutable(index);
}
inline ::game_srnn_protocols::gm_room_info* packetl2c_gm_list::add_rooms() {
  return rooms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::gm_room_info >&
packetl2c_gm_list::rooms() const {
  return rooms_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_srnn_protocols::gm_room_info >*
packetl2c_gm_list::mutable_rooms() {
  return &rooms_;
}

// -------------------------------------------------------------------

// packetc2l_gm_kill

// optional .game_srnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_kill];
inline bool packetc2l_gm_kill::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_gm_kill::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_gm_kill::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_gm_kill::clear_packet_id() {
  packet_id_ = 10016;
  clear_has_packet_id();
}
inline ::game_srnn_protocols::e_server_msg_type packetc2l_gm_kill::packet_id() const {
  return static_cast< ::game_srnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_gm_kill::set_packet_id(::game_srnn_protocols::e_server_msg_type value) {
  assert(::game_srnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetc2l_gm_kill::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_gm_kill::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_gm_kill::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_gm_kill::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetc2l_gm_kill::player_id() const {
  return player_id_;
}
inline void packetc2l_gm_kill::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 kill_type = 3;
inline bool packetc2l_gm_kill::has_kill_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_gm_kill::set_has_kill_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_gm_kill::clear_has_kill_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_gm_kill::clear_kill_type() {
  kill_type_ = 0;
  clear_has_kill_type();
}
inline ::google::protobuf::int32 packetc2l_gm_kill::kill_type() const {
  return kill_type_;
}
inline void packetc2l_gm_kill::set_kill_type(::google::protobuf::int32 value) {
  set_has_kill_type();
  kill_type_ = value;
}

// optional int32 kill_cnt = 4;
inline bool packetc2l_gm_kill::has_kill_cnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetc2l_gm_kill::set_has_kill_cnt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetc2l_gm_kill::clear_has_kill_cnt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetc2l_gm_kill::clear_kill_cnt() {
  kill_cnt_ = 0;
  clear_has_kill_cnt();
}
inline ::google::protobuf::int32 packetc2l_gm_kill::kill_cnt() const {
  return kill_cnt_;
}
inline void packetc2l_gm_kill::set_kill_cnt(::google::protobuf::int32 value) {
  set_has_kill_cnt();
  kill_cnt_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_srnn_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fsrnn_5fprotocol_2eproto__INCLUDED
