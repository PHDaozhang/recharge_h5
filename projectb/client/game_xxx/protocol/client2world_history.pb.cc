// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_history.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client2world_history.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

namespace {

const ::google::protobuf::Descriptor* msg_baccarat_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_baccarat_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_baccarat_room_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_baccarat_room_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_baccarat_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_baccarat_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_baccarat_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_baccarat_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_cows_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_cows_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_cows_room_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_cows_room_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_cows_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_cows_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_cows_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_cows_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_dice_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_dice_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_dice_room_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_dice_room_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_dice_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_dice_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_dice_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_dice_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_ebg_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_ebg_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_ebg_room_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_ebg_room_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_ebg_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_ebg_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_ebg_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_ebg_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_goldshark_room_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_goldshark_room_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_goldshark_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_goldshark_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_goldshark_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_goldshark_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_multitexas_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_multitexas_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_multitexas_room_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_multitexas_room_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_multitexas_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_multitexas_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_multitexas_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_multitexas_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_shcd_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_shcd_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_shcd_room_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_shcd_room_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_shcd_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_shcd_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_shcd_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_shcd_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_benzbmw_room_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_benzbmw_room_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_benzbmw_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_benzbmw_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_benzbmw_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_benzbmw_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_forestball_room_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_forestball_room_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_forestball_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_forestball_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_forestball_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_forestball_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fruits_room_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fruits_room_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_fruits_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_fruits_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_fruits_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_fruits_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_lhd_room_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_lhd_room_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_lhd_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_lhd_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_lhd_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_lhd_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_multiredblack_room_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_multiredblack_room_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_multiredblack_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_multiredblack_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_multiredblack_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_multiredblack_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* happySupremacy_history_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  happySupremacy_history_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_happySupremacy_room_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_happySupremacy_room_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_happySupremacy_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_happySupremacy_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_happySupremacy_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_happySupremacy_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_carsmagnate_room_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_carsmagnate_room_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_carsmagnate_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_carsmagnate_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_carsmagnate_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_carsmagnate_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fourcolorball_room_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fourcolorball_room_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_fourcolorball_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_fourcolorball_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_fourcolorball_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_fourcolorball_history_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client2world_5fhistory_2eproto() {
  protobuf_AddDesc_client2world_5fhistory_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client2world_history.proto");
  GOOGLE_CHECK(file != NULL);
  msg_baccarat_history_descriptor_ = file->message_type(0);
  static const int msg_baccarat_history_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_history, is_tie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_history, is_player_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_history, is_player_pair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_history, is_banker_pair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_history, is_banker_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_history, win_point_),
  };
  msg_baccarat_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_baccarat_history_descriptor_,
      msg_baccarat_history::default_instance_,
      msg_baccarat_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_baccarat_history));
  msg_baccarat_room_history_descriptor_ = file->message_type(1);
  static const int msg_baccarat_room_history_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_room_history, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_room_history, history_list_),
  };
  msg_baccarat_room_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_baccarat_room_history_descriptor_,
      msg_baccarat_room_history::default_instance_,
      msg_baccarat_room_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_room_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_room_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_baccarat_room_history));
  packetc2w_baccarat_history_descriptor_ = file->message_type(2);
  static const int packetc2w_baccarat_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_baccarat_history, packet_id_),
  };
  packetc2w_baccarat_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_baccarat_history_descriptor_,
      packetc2w_baccarat_history::default_instance_,
      packetc2w_baccarat_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_baccarat_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_baccarat_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_baccarat_history));
  packetw2c_baccarat_history_result_descriptor_ = file->message_type(3);
  static const int packetw2c_baccarat_history_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_baccarat_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_baccarat_history_result, room_history_),
  };
  packetw2c_baccarat_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_baccarat_history_result_descriptor_,
      packetw2c_baccarat_history_result::default_instance_,
      packetw2c_baccarat_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_baccarat_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_baccarat_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_baccarat_history_result));
  msg_cows_history_descriptor_ = file->message_type(4);
  static const int msg_cows_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_cows_history, is_win_),
  };
  msg_cows_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_cows_history_descriptor_,
      msg_cows_history::default_instance_,
      msg_cows_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_cows_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_cows_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_cows_history));
  msg_cows_room_history_descriptor_ = file->message_type(5);
  static const int msg_cows_room_history_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_cows_room_history, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_cows_room_history, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_cows_room_history, win_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_cows_room_history, lose_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_cows_room_history, history_list_),
  };
  msg_cows_room_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_cows_room_history_descriptor_,
      msg_cows_room_history::default_instance_,
      msg_cows_room_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_cows_room_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_cows_room_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_cows_room_history));
  packetc2w_cows_history_descriptor_ = file->message_type(6);
  static const int packetc2w_cows_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_cows_history, packet_id_),
  };
  packetc2w_cows_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_cows_history_descriptor_,
      packetc2w_cows_history::default_instance_,
      packetc2w_cows_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_cows_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_cows_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_cows_history));
  packetw2c_cows_history_result_descriptor_ = file->message_type(7);
  static const int packetw2c_cows_history_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_cows_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_cows_history_result, room_history_),
  };
  packetw2c_cows_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_cows_history_result_descriptor_,
      packetw2c_cows_history_result::default_instance_,
      packetw2c_cows_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_cows_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_cows_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_cows_history_result));
  msg_dice_history_descriptor_ = file->message_type(8);
  static const int msg_dice_history_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_dice_history, dice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_dice_history, dice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_dice_history, dice3_),
  };
  msg_dice_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_dice_history_descriptor_,
      msg_dice_history::default_instance_,
      msg_dice_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_dice_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_dice_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_dice_history));
  msg_dice_room_history_descriptor_ = file->message_type(9);
  static const int msg_dice_room_history_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_dice_room_history, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_dice_room_history, history_list_),
  };
  msg_dice_room_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_dice_room_history_descriptor_,
      msg_dice_room_history::default_instance_,
      msg_dice_room_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_dice_room_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_dice_room_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_dice_room_history));
  packetc2w_dice_history_descriptor_ = file->message_type(10);
  static const int packetc2w_dice_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_dice_history, packet_id_),
  };
  packetc2w_dice_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_dice_history_descriptor_,
      packetc2w_dice_history::default_instance_,
      packetc2w_dice_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_dice_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_dice_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_dice_history));
  packetw2c_dice_history_result_descriptor_ = file->message_type(11);
  static const int packetw2c_dice_history_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_dice_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_dice_history_result, room_history_),
  };
  packetw2c_dice_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_dice_history_result_descriptor_,
      packetw2c_dice_history_result::default_instance_,
      packetw2c_dice_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_dice_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_dice_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_dice_history_result));
  msg_ebg_history_descriptor_ = file->message_type(12);
  static const int msg_ebg_history_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ebg_history, is_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ebg_history, cards_id_),
  };
  msg_ebg_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_ebg_history_descriptor_,
      msg_ebg_history::default_instance_,
      msg_ebg_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ebg_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ebg_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_ebg_history));
  msg_ebg_room_history_descriptor_ = file->message_type(13);
  static const int msg_ebg_room_history_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ebg_room_history, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ebg_room_history, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ebg_room_history, win_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ebg_room_history, lose_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ebg_room_history, history_list_),
  };
  msg_ebg_room_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_ebg_room_history_descriptor_,
      msg_ebg_room_history::default_instance_,
      msg_ebg_room_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ebg_room_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ebg_room_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_ebg_room_history));
  packetc2w_ebg_history_descriptor_ = file->message_type(14);
  static const int packetc2w_ebg_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ebg_history, packet_id_),
  };
  packetc2w_ebg_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_ebg_history_descriptor_,
      packetc2w_ebg_history::default_instance_,
      packetc2w_ebg_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ebg_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ebg_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_ebg_history));
  packetw2c_ebg_history_result_descriptor_ = file->message_type(15);
  static const int packetw2c_ebg_history_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ebg_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ebg_history_result, room_history_),
  };
  packetw2c_ebg_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_ebg_history_result_descriptor_,
      packetw2c_ebg_history_result::default_instance_,
      packetw2c_ebg_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ebg_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ebg_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_ebg_history_result));
  msg_goldshark_room_history_descriptor_ = file->message_type(16);
  static const int msg_goldshark_room_history_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_goldshark_room_history, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_goldshark_room_history, history_list_),
  };
  msg_goldshark_room_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_goldshark_room_history_descriptor_,
      msg_goldshark_room_history::default_instance_,
      msg_goldshark_room_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_goldshark_room_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_goldshark_room_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_goldshark_room_history));
  packetc2w_goldshark_history_descriptor_ = file->message_type(17);
  static const int packetc2w_goldshark_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_goldshark_history, packet_id_),
  };
  packetc2w_goldshark_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_goldshark_history_descriptor_,
      packetc2w_goldshark_history::default_instance_,
      packetc2w_goldshark_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_goldshark_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_goldshark_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_goldshark_history));
  packetw2c_goldshark_history_result_descriptor_ = file->message_type(18);
  static const int packetw2c_goldshark_history_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_goldshark_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_goldshark_history_result, room_history_),
  };
  packetw2c_goldshark_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_goldshark_history_result_descriptor_,
      packetw2c_goldshark_history_result::default_instance_,
      packetw2c_goldshark_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_goldshark_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_goldshark_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_goldshark_history_result));
  msg_multitexas_history_descriptor_ = file->message_type(19);
  static const int msg_multitexas_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_multitexas_history, win_),
  };
  msg_multitexas_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_multitexas_history_descriptor_,
      msg_multitexas_history::default_instance_,
      msg_multitexas_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_multitexas_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_multitexas_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_multitexas_history));
  msg_multitexas_room_history_descriptor_ = file->message_type(20);
  static const int msg_multitexas_room_history_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_multitexas_room_history, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_multitexas_room_history, history_list_),
  };
  msg_multitexas_room_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_multitexas_room_history_descriptor_,
      msg_multitexas_room_history::default_instance_,
      msg_multitexas_room_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_multitexas_room_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_multitexas_room_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_multitexas_room_history));
  packetc2w_multitexas_history_descriptor_ = file->message_type(21);
  static const int packetc2w_multitexas_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_multitexas_history, packet_id_),
  };
  packetc2w_multitexas_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_multitexas_history_descriptor_,
      packetc2w_multitexas_history::default_instance_,
      packetc2w_multitexas_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_multitexas_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_multitexas_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_multitexas_history));
  packetw2c_multitexas_history_result_descriptor_ = file->message_type(22);
  static const int packetw2c_multitexas_history_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_multitexas_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_multitexas_history_result, room_history_),
  };
  packetw2c_multitexas_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_multitexas_history_result_descriptor_,
      packetw2c_multitexas_history_result::default_instance_,
      packetw2c_multitexas_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_multitexas_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_multitexas_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_multitexas_history_result));
  msg_shcd_history_descriptor_ = file->message_type(23);
  static const int msg_shcd_history_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_shcd_history, cards_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_shcd_history, cards_value_),
  };
  msg_shcd_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_shcd_history_descriptor_,
      msg_shcd_history::default_instance_,
      msg_shcd_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_shcd_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_shcd_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_shcd_history));
  msg_shcd_room_history_descriptor_ = file->message_type(24);
  static const int msg_shcd_room_history_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_shcd_room_history, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_shcd_room_history, history_list_),
  };
  msg_shcd_room_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_shcd_room_history_descriptor_,
      msg_shcd_room_history::default_instance_,
      msg_shcd_room_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_shcd_room_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_shcd_room_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_shcd_room_history));
  packetc2w_shcd_history_descriptor_ = file->message_type(25);
  static const int packetc2w_shcd_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_shcd_history, packet_id_),
  };
  packetc2w_shcd_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_shcd_history_descriptor_,
      packetc2w_shcd_history::default_instance_,
      packetc2w_shcd_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_shcd_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_shcd_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_shcd_history));
  packetw2c_shcd_history_result_descriptor_ = file->message_type(26);
  static const int packetw2c_shcd_history_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_shcd_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_shcd_history_result, room_history_),
  };
  packetw2c_shcd_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_shcd_history_result_descriptor_,
      packetw2c_shcd_history_result::default_instance_,
      packetw2c_shcd_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_shcd_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_shcd_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_shcd_history_result));
  msg_benzbmw_room_history_descriptor_ = file->message_type(27);
  static const int msg_benzbmw_room_history_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_benzbmw_room_history, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_benzbmw_room_history, history_list_),
  };
  msg_benzbmw_room_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_benzbmw_room_history_descriptor_,
      msg_benzbmw_room_history::default_instance_,
      msg_benzbmw_room_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_benzbmw_room_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_benzbmw_room_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_benzbmw_room_history));
  packetc2w_benzbmw_history_descriptor_ = file->message_type(28);
  static const int packetc2w_benzbmw_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_benzbmw_history, packet_id_),
  };
  packetc2w_benzbmw_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_benzbmw_history_descriptor_,
      packetc2w_benzbmw_history::default_instance_,
      packetc2w_benzbmw_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_benzbmw_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_benzbmw_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_benzbmw_history));
  packetw2c_benzbmw_history_result_descriptor_ = file->message_type(29);
  static const int packetw2c_benzbmw_history_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_benzbmw_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_benzbmw_history_result, room_history_),
  };
  packetw2c_benzbmw_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_benzbmw_history_result_descriptor_,
      packetw2c_benzbmw_history_result::default_instance_,
      packetw2c_benzbmw_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_benzbmw_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_benzbmw_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_benzbmw_history_result));
  msg_forestball_room_history_descriptor_ = file->message_type(30);
  static const int msg_forestball_room_history_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_forestball_room_history, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_forestball_room_history, history_list_),
  };
  msg_forestball_room_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_forestball_room_history_descriptor_,
      msg_forestball_room_history::default_instance_,
      msg_forestball_room_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_forestball_room_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_forestball_room_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_forestball_room_history));
  packetc2w_forestball_history_descriptor_ = file->message_type(31);
  static const int packetc2w_forestball_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_forestball_history, packet_id_),
  };
  packetc2w_forestball_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_forestball_history_descriptor_,
      packetc2w_forestball_history::default_instance_,
      packetc2w_forestball_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_forestball_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_forestball_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_forestball_history));
  packetw2c_forestball_history_result_descriptor_ = file->message_type(32);
  static const int packetw2c_forestball_history_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_forestball_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_forestball_history_result, room_history_),
  };
  packetw2c_forestball_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_forestball_history_result_descriptor_,
      packetw2c_forestball_history_result::default_instance_,
      packetw2c_forestball_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_forestball_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_forestball_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_forestball_history_result));
  msg_fruits_room_history_descriptor_ = file->message_type(33);
  static const int msg_fruits_room_history_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fruits_room_history, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fruits_room_history, history_list_),
  };
  msg_fruits_room_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fruits_room_history_descriptor_,
      msg_fruits_room_history::default_instance_,
      msg_fruits_room_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fruits_room_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fruits_room_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fruits_room_history));
  packetc2w_fruits_history_descriptor_ = file->message_type(34);
  static const int packetc2w_fruits_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_fruits_history, packet_id_),
  };
  packetc2w_fruits_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_fruits_history_descriptor_,
      packetc2w_fruits_history::default_instance_,
      packetc2w_fruits_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_fruits_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_fruits_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_fruits_history));
  packetw2c_fruits_history_result_descriptor_ = file->message_type(35);
  static const int packetw2c_fruits_history_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_fruits_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_fruits_history_result, room_history_),
  };
  packetw2c_fruits_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_fruits_history_result_descriptor_,
      packetw2c_fruits_history_result::default_instance_,
      packetw2c_fruits_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_fruits_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_fruits_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_fruits_history_result));
  msg_lhd_room_history_descriptor_ = file->message_type(36);
  static const int msg_lhd_room_history_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_lhd_room_history, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_lhd_room_history, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_lhd_room_history, win_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_lhd_room_history, lose_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_lhd_room_history, history_infos_),
  };
  msg_lhd_room_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_lhd_room_history_descriptor_,
      msg_lhd_room_history::default_instance_,
      msg_lhd_room_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_lhd_room_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_lhd_room_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_lhd_room_history));
  packetc2w_lhd_history_descriptor_ = file->message_type(37);
  static const int packetc2w_lhd_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_lhd_history, packet_id_),
  };
  packetc2w_lhd_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_lhd_history_descriptor_,
      packetc2w_lhd_history::default_instance_,
      packetc2w_lhd_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_lhd_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_lhd_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_lhd_history));
  packetw2c_lhd_history_result_descriptor_ = file->message_type(38);
  static const int packetw2c_lhd_history_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_lhd_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_lhd_history_result, room_history_),
  };
  packetw2c_lhd_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_lhd_history_result_descriptor_,
      packetw2c_lhd_history_result::default_instance_,
      packetw2c_lhd_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_lhd_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_lhd_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_lhd_history_result));
  msg_multiredblack_room_history_descriptor_ = file->message_type(39);
  static const int msg_multiredblack_room_history_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_multiredblack_room_history, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_multiredblack_room_history, history_infos_),
  };
  msg_multiredblack_room_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_multiredblack_room_history_descriptor_,
      msg_multiredblack_room_history::default_instance_,
      msg_multiredblack_room_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_multiredblack_room_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_multiredblack_room_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_multiredblack_room_history));
  packetc2w_multiredblack_history_descriptor_ = file->message_type(40);
  static const int packetc2w_multiredblack_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_multiredblack_history, packet_id_),
  };
  packetc2w_multiredblack_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_multiredblack_history_descriptor_,
      packetc2w_multiredblack_history::default_instance_,
      packetc2w_multiredblack_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_multiredblack_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_multiredblack_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_multiredblack_history));
  packetw2c_multiredblack_history_result_descriptor_ = file->message_type(41);
  static const int packetw2c_multiredblack_history_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_multiredblack_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_multiredblack_history_result, room_history_),
  };
  packetw2c_multiredblack_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_multiredblack_history_result_descriptor_,
      packetw2c_multiredblack_history_result::default_instance_,
      packetw2c_multiredblack_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_multiredblack_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_multiredblack_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_multiredblack_history_result));
  happySupremacy_history_info_descriptor_ = file->message_type(42);
  static const int happySupremacy_history_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(happySupremacy_history_info, is_forward_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(happySupremacy_history_info, is_reverse_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(happySupremacy_history_info, is_opposite_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(happySupremacy_history_info, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(happySupremacy_history_info, cards_type_),
  };
  happySupremacy_history_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      happySupremacy_history_info_descriptor_,
      happySupremacy_history_info::default_instance_,
      happySupremacy_history_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(happySupremacy_history_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(happySupremacy_history_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(happySupremacy_history_info));
  msg_happySupremacy_room_history_descriptor_ = file->message_type(43);
  static const int msg_happySupremacy_room_history_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_happySupremacy_room_history, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_happySupremacy_room_history, cards_info_),
  };
  msg_happySupremacy_room_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_happySupremacy_room_history_descriptor_,
      msg_happySupremacy_room_history::default_instance_,
      msg_happySupremacy_room_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_happySupremacy_room_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_happySupremacy_room_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_happySupremacy_room_history));
  packetc2w_happySupremacy_history_descriptor_ = file->message_type(44);
  static const int packetc2w_happySupremacy_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_happySupremacy_history, packet_id_),
  };
  packetc2w_happySupremacy_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_happySupremacy_history_descriptor_,
      packetc2w_happySupremacy_history::default_instance_,
      packetc2w_happySupremacy_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_happySupremacy_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_happySupremacy_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_happySupremacy_history));
  packetw2c_happySupremacy_history_result_descriptor_ = file->message_type(45);
  static const int packetw2c_happySupremacy_history_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_happySupremacy_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_happySupremacy_history_result, room_history_),
  };
  packetw2c_happySupremacy_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_happySupremacy_history_result_descriptor_,
      packetw2c_happySupremacy_history_result::default_instance_,
      packetw2c_happySupremacy_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_happySupremacy_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_happySupremacy_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_happySupremacy_history_result));
  msg_carsmagnate_room_history_descriptor_ = file->message_type(46);
  static const int msg_carsmagnate_room_history_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_carsmagnate_room_history, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_carsmagnate_room_history, history_list_),
  };
  msg_carsmagnate_room_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_carsmagnate_room_history_descriptor_,
      msg_carsmagnate_room_history::default_instance_,
      msg_carsmagnate_room_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_carsmagnate_room_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_carsmagnate_room_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_carsmagnate_room_history));
  packetc2w_carsmagnate_history_descriptor_ = file->message_type(47);
  static const int packetc2w_carsmagnate_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_carsmagnate_history, packet_id_),
  };
  packetc2w_carsmagnate_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_carsmagnate_history_descriptor_,
      packetc2w_carsmagnate_history::default_instance_,
      packetc2w_carsmagnate_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_carsmagnate_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_carsmagnate_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_carsmagnate_history));
  packetw2c_carsmagnate_history_result_descriptor_ = file->message_type(48);
  static const int packetw2c_carsmagnate_history_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_carsmagnate_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_carsmagnate_history_result, room_history_),
  };
  packetw2c_carsmagnate_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_carsmagnate_history_result_descriptor_,
      packetw2c_carsmagnate_history_result::default_instance_,
      packetw2c_carsmagnate_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_carsmagnate_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_carsmagnate_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_carsmagnate_history_result));
  msg_fourcolorball_room_history_descriptor_ = file->message_type(49);
  static const int msg_fourcolorball_room_history_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fourcolorball_room_history, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fourcolorball_room_history, history_list_),
  };
  msg_fourcolorball_room_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fourcolorball_room_history_descriptor_,
      msg_fourcolorball_room_history::default_instance_,
      msg_fourcolorball_room_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fourcolorball_room_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fourcolorball_room_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fourcolorball_room_history));
  packetc2w_fourcolorball_history_descriptor_ = file->message_type(50);
  static const int packetc2w_fourcolorball_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_fourcolorball_history, packet_id_),
  };
  packetc2w_fourcolorball_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_fourcolorball_history_descriptor_,
      packetc2w_fourcolorball_history::default_instance_,
      packetc2w_fourcolorball_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_fourcolorball_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_fourcolorball_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_fourcolorball_history));
  packetw2c_fourcolorball_history_result_descriptor_ = file->message_type(51);
  static const int packetw2c_fourcolorball_history_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_fourcolorball_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_fourcolorball_history_result, room_history_),
  };
  packetw2c_fourcolorball_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_fourcolorball_history_result_descriptor_,
      packetw2c_fourcolorball_history_result::default_instance_,
      packetw2c_fourcolorball_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_fourcolorball_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_fourcolorball_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_fourcolorball_history_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client2world_5fhistory_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_baccarat_history_descriptor_, &msg_baccarat_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_baccarat_room_history_descriptor_, &msg_baccarat_room_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_baccarat_history_descriptor_, &packetc2w_baccarat_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_baccarat_history_result_descriptor_, &packetw2c_baccarat_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_cows_history_descriptor_, &msg_cows_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_cows_room_history_descriptor_, &msg_cows_room_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_cows_history_descriptor_, &packetc2w_cows_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_cows_history_result_descriptor_, &packetw2c_cows_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_dice_history_descriptor_, &msg_dice_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_dice_room_history_descriptor_, &msg_dice_room_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_dice_history_descriptor_, &packetc2w_dice_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_dice_history_result_descriptor_, &packetw2c_dice_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_ebg_history_descriptor_, &msg_ebg_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_ebg_room_history_descriptor_, &msg_ebg_room_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_ebg_history_descriptor_, &packetc2w_ebg_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_ebg_history_result_descriptor_, &packetw2c_ebg_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_goldshark_room_history_descriptor_, &msg_goldshark_room_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_goldshark_history_descriptor_, &packetc2w_goldshark_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_goldshark_history_result_descriptor_, &packetw2c_goldshark_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_multitexas_history_descriptor_, &msg_multitexas_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_multitexas_room_history_descriptor_, &msg_multitexas_room_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_multitexas_history_descriptor_, &packetc2w_multitexas_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_multitexas_history_result_descriptor_, &packetw2c_multitexas_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_shcd_history_descriptor_, &msg_shcd_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_shcd_room_history_descriptor_, &msg_shcd_room_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_shcd_history_descriptor_, &packetc2w_shcd_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_shcd_history_result_descriptor_, &packetw2c_shcd_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_benzbmw_room_history_descriptor_, &msg_benzbmw_room_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_benzbmw_history_descriptor_, &packetc2w_benzbmw_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_benzbmw_history_result_descriptor_, &packetw2c_benzbmw_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_forestball_room_history_descriptor_, &msg_forestball_room_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_forestball_history_descriptor_, &packetc2w_forestball_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_forestball_history_result_descriptor_, &packetw2c_forestball_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fruits_room_history_descriptor_, &msg_fruits_room_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_fruits_history_descriptor_, &packetc2w_fruits_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_fruits_history_result_descriptor_, &packetw2c_fruits_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_lhd_room_history_descriptor_, &msg_lhd_room_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_lhd_history_descriptor_, &packetc2w_lhd_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_lhd_history_result_descriptor_, &packetw2c_lhd_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_multiredblack_room_history_descriptor_, &msg_multiredblack_room_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_multiredblack_history_descriptor_, &packetc2w_multiredblack_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_multiredblack_history_result_descriptor_, &packetw2c_multiredblack_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    happySupremacy_history_info_descriptor_, &happySupremacy_history_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_happySupremacy_room_history_descriptor_, &msg_happySupremacy_room_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_happySupremacy_history_descriptor_, &packetc2w_happySupremacy_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_happySupremacy_history_result_descriptor_, &packetw2c_happySupremacy_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_carsmagnate_room_history_descriptor_, &msg_carsmagnate_room_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_carsmagnate_history_descriptor_, &packetc2w_carsmagnate_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_carsmagnate_history_result_descriptor_, &packetw2c_carsmagnate_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fourcolorball_room_history_descriptor_, &msg_fourcolorball_room_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_fourcolorball_history_descriptor_, &packetc2w_fourcolorball_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_fourcolorball_history_result_descriptor_, &packetw2c_fourcolorball_history_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client2world_5fhistory_2eproto() {
  delete msg_baccarat_history::default_instance_;
  delete msg_baccarat_history_reflection_;
  delete msg_baccarat_room_history::default_instance_;
  delete msg_baccarat_room_history_reflection_;
  delete packetc2w_baccarat_history::default_instance_;
  delete packetc2w_baccarat_history_reflection_;
  delete packetw2c_baccarat_history_result::default_instance_;
  delete packetw2c_baccarat_history_result_reflection_;
  delete msg_cows_history::default_instance_;
  delete msg_cows_history_reflection_;
  delete msg_cows_room_history::default_instance_;
  delete msg_cows_room_history_reflection_;
  delete packetc2w_cows_history::default_instance_;
  delete packetc2w_cows_history_reflection_;
  delete packetw2c_cows_history_result::default_instance_;
  delete packetw2c_cows_history_result_reflection_;
  delete msg_dice_history::default_instance_;
  delete msg_dice_history_reflection_;
  delete msg_dice_room_history::default_instance_;
  delete msg_dice_room_history_reflection_;
  delete packetc2w_dice_history::default_instance_;
  delete packetc2w_dice_history_reflection_;
  delete packetw2c_dice_history_result::default_instance_;
  delete packetw2c_dice_history_result_reflection_;
  delete msg_ebg_history::default_instance_;
  delete msg_ebg_history_reflection_;
  delete msg_ebg_room_history::default_instance_;
  delete msg_ebg_room_history_reflection_;
  delete packetc2w_ebg_history::default_instance_;
  delete packetc2w_ebg_history_reflection_;
  delete packetw2c_ebg_history_result::default_instance_;
  delete packetw2c_ebg_history_result_reflection_;
  delete msg_goldshark_room_history::default_instance_;
  delete msg_goldshark_room_history_reflection_;
  delete packetc2w_goldshark_history::default_instance_;
  delete packetc2w_goldshark_history_reflection_;
  delete packetw2c_goldshark_history_result::default_instance_;
  delete packetw2c_goldshark_history_result_reflection_;
  delete msg_multitexas_history::default_instance_;
  delete msg_multitexas_history_reflection_;
  delete msg_multitexas_room_history::default_instance_;
  delete msg_multitexas_room_history_reflection_;
  delete packetc2w_multitexas_history::default_instance_;
  delete packetc2w_multitexas_history_reflection_;
  delete packetw2c_multitexas_history_result::default_instance_;
  delete packetw2c_multitexas_history_result_reflection_;
  delete msg_shcd_history::default_instance_;
  delete msg_shcd_history_reflection_;
  delete msg_shcd_room_history::default_instance_;
  delete msg_shcd_room_history_reflection_;
  delete packetc2w_shcd_history::default_instance_;
  delete packetc2w_shcd_history_reflection_;
  delete packetw2c_shcd_history_result::default_instance_;
  delete packetw2c_shcd_history_result_reflection_;
  delete msg_benzbmw_room_history::default_instance_;
  delete msg_benzbmw_room_history_reflection_;
  delete packetc2w_benzbmw_history::default_instance_;
  delete packetc2w_benzbmw_history_reflection_;
  delete packetw2c_benzbmw_history_result::default_instance_;
  delete packetw2c_benzbmw_history_result_reflection_;
  delete msg_forestball_room_history::default_instance_;
  delete msg_forestball_room_history_reflection_;
  delete packetc2w_forestball_history::default_instance_;
  delete packetc2w_forestball_history_reflection_;
  delete packetw2c_forestball_history_result::default_instance_;
  delete packetw2c_forestball_history_result_reflection_;
  delete msg_fruits_room_history::default_instance_;
  delete msg_fruits_room_history_reflection_;
  delete packetc2w_fruits_history::default_instance_;
  delete packetc2w_fruits_history_reflection_;
  delete packetw2c_fruits_history_result::default_instance_;
  delete packetw2c_fruits_history_result_reflection_;
  delete msg_lhd_room_history::default_instance_;
  delete msg_lhd_room_history_reflection_;
  delete packetc2w_lhd_history::default_instance_;
  delete packetc2w_lhd_history_reflection_;
  delete packetw2c_lhd_history_result::default_instance_;
  delete packetw2c_lhd_history_result_reflection_;
  delete msg_multiredblack_room_history::default_instance_;
  delete msg_multiredblack_room_history_reflection_;
  delete packetc2w_multiredblack_history::default_instance_;
  delete packetc2w_multiredblack_history_reflection_;
  delete packetw2c_multiredblack_history_result::default_instance_;
  delete packetw2c_multiredblack_history_result_reflection_;
  delete happySupremacy_history_info::default_instance_;
  delete happySupremacy_history_info_reflection_;
  delete msg_happySupremacy_room_history::default_instance_;
  delete msg_happySupremacy_room_history_reflection_;
  delete packetc2w_happySupremacy_history::default_instance_;
  delete packetc2w_happySupremacy_history_reflection_;
  delete packetw2c_happySupremacy_history_result::default_instance_;
  delete packetw2c_happySupremacy_history_result_reflection_;
  delete msg_carsmagnate_room_history::default_instance_;
  delete msg_carsmagnate_room_history_reflection_;
  delete packetc2w_carsmagnate_history::default_instance_;
  delete packetc2w_carsmagnate_history_reflection_;
  delete packetw2c_carsmagnate_history_result::default_instance_;
  delete packetw2c_carsmagnate_history_result_reflection_;
  delete msg_fourcolorball_room_history::default_instance_;
  delete msg_fourcolorball_room_history_reflection_;
  delete packetc2w_fourcolorball_history::default_instance_;
  delete packetc2w_fourcolorball_history_reflection_;
  delete packetw2c_fourcolorball_history_result::default_instance_;
  delete packetw2c_fourcolorball_history_result_reflection_;
}

void protobuf_AddDesc_client2world_5fhistory_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client2world_protocols::protobuf_AddDesc_client2world_5fmsg_5ftype_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032client2world_history.proto\022\026client2wor"
    "ld_protocols\032\033client2world_msg_type.prot"
    "o\032\022msg_type_def.proto\032\022msg_info_def.prot"
    "o\"\227\001\n\024msg_baccarat_history\022\016\n\006is_tie\030\001 \001"
    "(\010\022\025\n\ris_player_win\030\002 \001(\010\022\026\n\016is_player_p"
    "air\030\003 \001(\010\022\026\n\016is_banker_pair\030\004 \001(\010\022\025\n\ris_"
    "banker_win\030\005 \001(\010\022\021\n\twin_point\030\006 \001(\005\"p\n\031m"
    "sg_baccarat_room_history\022\017\n\007room_id\030\001 \001("
    "\005\022B\n\014history_list\030\010 \003(\0132,.client2world_p"
    "rotocols.msg_baccarat_history\"v\n\032packetc"
    "2w_baccarat_history\022X\n\tpacket_id\030\001 \001(\0162)"
    ".client2world_protocols.e_server_msg_typ"
    "e:\032e_mst_c2w_baccarat_history\"\315\001\n!packet"
    "w2c_baccarat_history_result\022_\n\tpacket_id"
    "\030\001 \001(\0162).client2world_protocols.e_server"
    "_msg_type:!e_mst_w2c_baccarat_history_re"
    "sult\022G\n\014room_history\030\002 \003(\01321.client2worl"
    "d_protocols.msg_baccarat_room_history\"\"\n"
    "\020msg_cows_history\022\016\n\006is_win\030\001 \003(\010\"\246\001\n\025ms"
    "g_cows_room_history\022\017\n\007room_id\030\001 \001(\005\022\023\n\013"
    "total_count\030\002 \001(\005\022\022\n\nwin_counts\030\003 \003(\005\022\023\n"
    "\013lose_counts\030\004 \003(\005\022>\n\014history_list\030\005 \003(\013"
    "2(.client2world_protocols.msg_cows_histo"
    "ry\"n\n\026packetc2w_cows_history\022T\n\tpacket_i"
    "d\030\001 \001(\0162).client2world_protocols.e_serve"
    "r_msg_type:\026e_mst_c2w_cows_history\"\301\001\n\035p"
    "acketw2c_cows_history_result\022[\n\tpacket_i"
    "d\030\001 \001(\0162).client2world_protocols.e_serve"
    "r_msg_type:\035e_mst_w2c_cows_history_resul"
    "t\022C\n\014room_history\030\002 \003(\0132-.client2world_p"
    "rotocols.msg_cows_room_history\"\?\n\020msg_di"
    "ce_history\022\r\n\005dice1\030\001 \001(\005\022\r\n\005dice2\030\002 \001(\005"
    "\022\r\n\005dice3\030\003 \001(\005\"h\n\025msg_dice_room_history"
    "\022\017\n\007room_id\030\001 \001(\005\022>\n\014history_list\030\010 \003(\0132"
    "(.client2world_protocols.msg_dice_histor"
    "y\"n\n\026packetc2w_dice_history\022T\n\tpacket_id"
    "\030\001 \001(\0162).client2world_protocols.e_server"
    "_msg_type:\026e_mst_c2w_dice_history\"\301\001\n\035pa"
    "cketw2c_dice_history_result\022[\n\tpacket_id"
    "\030\001 \001(\0162).client2world_protocols.e_server"
    "_msg_type:\035e_mst_w2c_dice_history_result"
    "\022C\n\014room_history\030\005 \003(\0132-.client2world_pr"
    "otocols.msg_dice_room_history\"3\n\017msg_ebg"
    "_history\022\016\n\006is_win\030\001 \003(\010\022\020\n\010cards_id\030\002 \003"
    "(\005\"\244\001\n\024msg_ebg_room_history\022\017\n\007room_id\030\001"
    " \001(\005\022\023\n\013total_count\030\002 \001(\005\022\022\n\nwin_counts\030"
    "\003 \003(\005\022\023\n\013lose_counts\030\004 \003(\005\022=\n\014history_li"
    "st\030\005 \003(\0132\'.client2world_protocols.msg_eb"
    "g_history\"l\n\025packetc2w_ebg_history\022S\n\tpa"
    "cket_id\030\001 \001(\0162).client2world_protocols.e"
    "_server_msg_type:\025e_mst_c2w_ebg_history\""
    "\276\001\n\034packetw2c_ebg_history_result\022Z\n\tpack"
    "et_id\030\001 \001(\0162).client2world_protocols.e_s"
    "erver_msg_type:\034e_mst_w2c_ebg_history_re"
    "sult\022B\n\014room_history\030\002 \003(\0132,.client2worl"
    "d_protocols.msg_ebg_room_history\"C\n\032msg_"
    "goldshark_room_history\022\017\n\007room_id\030\001 \001(\005\022"
    "\024\n\014history_list\030\002 \003(\005\"x\n\033packetc2w_golds"
    "hark_history\022Y\n\tpacket_id\030\001 \001(\0162).client"
    "2world_protocols.e_server_msg_type:\033e_ms"
    "t_c2w_goldshark_history\"\320\001\n\"packetw2c_go"
    "ldshark_history_result\022`\n\tpacket_id\030\001 \001("
    "\0162).client2world_protocols.e_server_msg_"
    "type:\"e_mst_w2c_goldshark_history_result"
    "\022H\n\014room_history\030\002 \003(\01322.client2world_pr"
    "otocols.msg_goldshark_room_history\"%\n\026ms"
    "g_multitexas_history\022\013\n\003win\030\001 \003(\005\"t\n\033msg"
    "_multitexas_room_history\022\017\n\007room_id\030\001 \001("
    "\005\022D\n\014history_list\030\002 \003(\0132..client2world_p"
    "rotocols.msg_multitexas_history\"z\n\034packe"
    "tc2w_multitexas_history\022Z\n\tpacket_id\030\001 \001"
    "(\0162).client2world_protocols.e_server_msg"
    "_type:\034e_mst_c2w_multitexas_history\"\323\001\n#"
    "packetw2c_multitexas_history_result\022a\n\tp"
    "acket_id\030\001 \001(\0162).client2world_protocols."
    "e_server_msg_type:#e_mst_w2c_multitexas_"
    "history_result\022I\n\014room_history\030\002 \003(\01323.c"
    "lient2world_protocols.msg_multitexas_roo"
    "m_history\";\n\020msg_shcd_history\022\022\n\ncards_t"
    "ype\030\001 \001(\005\022\023\n\013cards_value\030\002 \001(\005\"h\n\025msg_sh"
    "cd_room_history\022\017\n\007room_id\030\001 \001(\005\022>\n\014hist"
    "ory_list\030\002 \003(\0132(.client2world_protocols."
    "msg_shcd_history\"n\n\026packetc2w_shcd_histo"
    "ry\022T\n\tpacket_id\030\001 \001(\0162).client2world_pro"
    "tocols.e_server_msg_type:\026e_mst_c2w_shcd"
    "_history\"\301\001\n\035packetw2c_shcd_history_resu"
    "lt\022[\n\tpacket_id\030\001 \001(\0162).client2world_pro"
    "tocols.e_server_msg_type:\035e_mst_w2c_shcd"
    "_history_result\022C\n\014room_history\030\002 \003(\0132-."
    "client2world_protocols.msg_shcd_room_his"
    "tory\"A\n\030msg_benzbmw_room_history\022\017\n\007room"
    "_id\030\001 \001(\005\022\024\n\014history_list\030\002 \003(\005\"t\n\031packe"
    "tc2w_benzbmw_history\022W\n\tpacket_id\030\001 \001(\0162"
    ").client2world_protocols.e_server_msg_ty"
    "pe:\031e_mst_c2w_benzbmw_history\"\312\001\n packet"
    "w2c_benzbmw_history_result\022^\n\tpacket_id\030"
    "\001 \001(\0162).client2world_protocols.e_server_"
    "msg_type: e_mst_w2c_benzbmw_history_resu"
    "lt\022F\n\014room_history\030\002 \003(\01320.client2world_"
    "protocols.msg_benzbmw_room_history\"D\n\033ms"
    "g_forestball_room_history\022\017\n\007room_id\030\001 \001"
    "(\005\022\024\n\014history_list\030\002 \003(\005\"z\n\034packetc2w_fo"
    "restball_history\022Z\n\tpacket_id\030\001 \001(\0162).cl"
    "ient2world_protocols.e_server_msg_type:\034"
    "e_mst_c2w_forestball_history\"\323\001\n#packetw"
    "2c_forestball_history_result\022a\n\tpacket_i"
    "d\030\001 \001(\0162).client2world_protocols.e_serve"
    "r_msg_type:#e_mst_w2c_forestball_history"
    "_result\022I\n\014room_history\030\002 \003(\01323.client2w"
    "orld_protocols.msg_forestball_room_histo"
    "ry\"@\n\027msg_fruits_room_history\022\017\n\007room_id"
    "\030\001 \001(\005\022\024\n\014history_list\030\002 \003(\005\"r\n\030packetc2"
    "w_fruits_history\022V\n\tpacket_id\030\001 \001(\0162).cl"
    "ient2world_protocols.e_server_msg_type:\030"
    "e_mst_c2w_fruits_history\"\307\001\n\037packetw2c_f"
    "ruits_history_result\022]\n\tpacket_id\030\001 \001(\0162"
    ").client2world_protocols.e_server_msg_ty"
    "pe:\037e_mst_w2c_fruits_history_result\022E\n\014r"
    "oom_history\030\002 \003(\0132/.client2world_protoco"
    "ls.msg_fruits_room_history\"|\n\024msg_lhd_ro"
    "om_history\022\017\n\007room_id\030\001 \001(\005\022\023\n\013total_cou"
    "nt\030\002 \001(\005\022\022\n\nwin_counts\030\003 \003(\005\022\023\n\013lose_cou"
    "nts\030\004 \003(\005\022\025\n\rhistory_infos\030\005 \003(\005\"l\n\025pack"
    "etc2w_lhd_history\022S\n\tpacket_id\030\001 \001(\0162).c"
    "lient2world_protocols.e_server_msg_type:"
    "\025e_mst_c2w_lhd_history\"\276\001\n\034packetw2c_lhd"
    "_history_result\022Z\n\tpacket_id\030\001 \001(\0162).cli"
    "ent2world_protocols.e_server_msg_type:\034e"
    "_mst_w2c_lhd_history_result\022B\n\014room_hist"
    "ory\030\002 \003(\0132,.client2world_protocols.msg_l"
    "hd_room_history\"H\n\036msg_multiredblack_roo"
    "m_history\022\017\n\007room_id\030\001 \001(\005\022\025\n\rhistory_in"
    "fos\030\002 \003(\005\"\200\001\n\037packetc2w_multiredblack_hi"
    "story\022]\n\tpacket_id\030\001 \001(\0162).client2world_"
    "protocols.e_server_msg_type:\037e_mst_c2w_m"
    "ultiredblack_history\"\334\001\n&packetw2c_multi"
    "redblack_history_result\022d\n\tpacket_id\030\001 \001"
    "(\0162).client2world_protocols.e_server_msg"
    "_type:&e_mst_w2c_multiredblack_history_r"
    "esult\022L\n\014room_history\030\002 \003(\01326.client2wor"
    "ld_protocols.msg_multiredblack_room_hist"
    "ory\"\211\001\n\033happySupremacy_history_info\022\026\n\016i"
    "s_forward_win\030\001 \001(\010\022\026\n\016is_reverse_win\030\002 "
    "\001(\010\022\027\n\017is_opposite_win\030\003 \001(\010\022\r\n\005cards\030\004 "
    "\003(\005\022\022\n\ncards_type\030\005 \003(\005\"{\n\037msg_happySupr"
    "emacy_room_history\022\017\n\007room_id\030\001 \001(\005\022G\n\nc"
    "ards_info\030\002 \003(\01323.client2world_protocols"
    ".happySupremacy_history_info\"\202\001\n packetc"
    "2w_happySupremacy_history\022^\n\tpacket_id\030\001"
    " \001(\0162).client2world_protocols.e_server_m"
    "sg_type: e_mst_c2w_happySupremacy_histor"
    "y\"\337\001\n\'packetw2c_happySupremacy_history_r"
    "esult\022e\n\tpacket_id\030\001 \001(\0162).client2world_"
    "protocols.e_server_msg_type:\'e_mst_w2c_h"
    "appySupremacy_history_result\022M\n\014room_his"
    "tory\030\002 \003(\01327.client2world_protocols.msg_"
    "happySupremacy_room_history\"E\n\034msg_carsm"
    "agnate_room_history\022\017\n\007room_id\030\001 \001(\005\022\024\n\014"
    "history_list\030\002 \003(\005\"|\n\035packetc2w_carsmagn"
    "ate_history\022[\n\tpacket_id\030\001 \001(\0162).client2"
    "world_protocols.e_server_msg_type:\035e_mst"
    "_c2w_carsmagnate_history\"\326\001\n$packetw2c_c"
    "arsmagnate_history_result\022b\n\tpacket_id\030\001"
    " \001(\0162).client2world_protocols.e_server_m"
    "sg_type:$e_mst_w2c_carsmagnate_history_r"
    "esult\022J\n\014room_history\030\002 \003(\01324.client2wor"
    "ld_protocols.msg_carsmagnate_room_histor"
    "y\"G\n\036msg_fourcolorball_room_history\022\017\n\007r"
    "oom_id\030\001 \001(\005\022\024\n\014history_list\030\002 \003(\005\"\200\001\n\037p"
    "acketc2w_fourcolorball_history\022]\n\tpacket"
    "_id\030\001 \001(\0162).client2world_protocols.e_ser"
    "ver_msg_type:\037e_mst_c2w_fourcolorball_hi"
    "story\"\334\001\n&packetw2c_fourcolorball_histor"
    "y_result\022d\n\tpacket_id\030\001 \001(\0162).client2wor"
    "ld_protocols.e_server_msg_type:&e_mst_w2"
    "c_fourcolorball_history_result\022L\n\014room_h"
    "istory\030\002 \003(\01326.client2world_protocols.ms"
    "g_fourcolorball_room_history", 7108);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client2world_history.proto", &protobuf_RegisterTypes);
  msg_baccarat_history::default_instance_ = new msg_baccarat_history();
  msg_baccarat_room_history::default_instance_ = new msg_baccarat_room_history();
  packetc2w_baccarat_history::default_instance_ = new packetc2w_baccarat_history();
  packetw2c_baccarat_history_result::default_instance_ = new packetw2c_baccarat_history_result();
  msg_cows_history::default_instance_ = new msg_cows_history();
  msg_cows_room_history::default_instance_ = new msg_cows_room_history();
  packetc2w_cows_history::default_instance_ = new packetc2w_cows_history();
  packetw2c_cows_history_result::default_instance_ = new packetw2c_cows_history_result();
  msg_dice_history::default_instance_ = new msg_dice_history();
  msg_dice_room_history::default_instance_ = new msg_dice_room_history();
  packetc2w_dice_history::default_instance_ = new packetc2w_dice_history();
  packetw2c_dice_history_result::default_instance_ = new packetw2c_dice_history_result();
  msg_ebg_history::default_instance_ = new msg_ebg_history();
  msg_ebg_room_history::default_instance_ = new msg_ebg_room_history();
  packetc2w_ebg_history::default_instance_ = new packetc2w_ebg_history();
  packetw2c_ebg_history_result::default_instance_ = new packetw2c_ebg_history_result();
  msg_goldshark_room_history::default_instance_ = new msg_goldshark_room_history();
  packetc2w_goldshark_history::default_instance_ = new packetc2w_goldshark_history();
  packetw2c_goldshark_history_result::default_instance_ = new packetw2c_goldshark_history_result();
  msg_multitexas_history::default_instance_ = new msg_multitexas_history();
  msg_multitexas_room_history::default_instance_ = new msg_multitexas_room_history();
  packetc2w_multitexas_history::default_instance_ = new packetc2w_multitexas_history();
  packetw2c_multitexas_history_result::default_instance_ = new packetw2c_multitexas_history_result();
  msg_shcd_history::default_instance_ = new msg_shcd_history();
  msg_shcd_room_history::default_instance_ = new msg_shcd_room_history();
  packetc2w_shcd_history::default_instance_ = new packetc2w_shcd_history();
  packetw2c_shcd_history_result::default_instance_ = new packetw2c_shcd_history_result();
  msg_benzbmw_room_history::default_instance_ = new msg_benzbmw_room_history();
  packetc2w_benzbmw_history::default_instance_ = new packetc2w_benzbmw_history();
  packetw2c_benzbmw_history_result::default_instance_ = new packetw2c_benzbmw_history_result();
  msg_forestball_room_history::default_instance_ = new msg_forestball_room_history();
  packetc2w_forestball_history::default_instance_ = new packetc2w_forestball_history();
  packetw2c_forestball_history_result::default_instance_ = new packetw2c_forestball_history_result();
  msg_fruits_room_history::default_instance_ = new msg_fruits_room_history();
  packetc2w_fruits_history::default_instance_ = new packetc2w_fruits_history();
  packetw2c_fruits_history_result::default_instance_ = new packetw2c_fruits_history_result();
  msg_lhd_room_history::default_instance_ = new msg_lhd_room_history();
  packetc2w_lhd_history::default_instance_ = new packetc2w_lhd_history();
  packetw2c_lhd_history_result::default_instance_ = new packetw2c_lhd_history_result();
  msg_multiredblack_room_history::default_instance_ = new msg_multiredblack_room_history();
  packetc2w_multiredblack_history::default_instance_ = new packetc2w_multiredblack_history();
  packetw2c_multiredblack_history_result::default_instance_ = new packetw2c_multiredblack_history_result();
  happySupremacy_history_info::default_instance_ = new happySupremacy_history_info();
  msg_happySupremacy_room_history::default_instance_ = new msg_happySupremacy_room_history();
  packetc2w_happySupremacy_history::default_instance_ = new packetc2w_happySupremacy_history();
  packetw2c_happySupremacy_history_result::default_instance_ = new packetw2c_happySupremacy_history_result();
  msg_carsmagnate_room_history::default_instance_ = new msg_carsmagnate_room_history();
  packetc2w_carsmagnate_history::default_instance_ = new packetc2w_carsmagnate_history();
  packetw2c_carsmagnate_history_result::default_instance_ = new packetw2c_carsmagnate_history_result();
  msg_fourcolorball_room_history::default_instance_ = new msg_fourcolorball_room_history();
  packetc2w_fourcolorball_history::default_instance_ = new packetc2w_fourcolorball_history();
  packetw2c_fourcolorball_history_result::default_instance_ = new packetw2c_fourcolorball_history_result();
  msg_baccarat_history::default_instance_->InitAsDefaultInstance();
  msg_baccarat_room_history::default_instance_->InitAsDefaultInstance();
  packetc2w_baccarat_history::default_instance_->InitAsDefaultInstance();
  packetw2c_baccarat_history_result::default_instance_->InitAsDefaultInstance();
  msg_cows_history::default_instance_->InitAsDefaultInstance();
  msg_cows_room_history::default_instance_->InitAsDefaultInstance();
  packetc2w_cows_history::default_instance_->InitAsDefaultInstance();
  packetw2c_cows_history_result::default_instance_->InitAsDefaultInstance();
  msg_dice_history::default_instance_->InitAsDefaultInstance();
  msg_dice_room_history::default_instance_->InitAsDefaultInstance();
  packetc2w_dice_history::default_instance_->InitAsDefaultInstance();
  packetw2c_dice_history_result::default_instance_->InitAsDefaultInstance();
  msg_ebg_history::default_instance_->InitAsDefaultInstance();
  msg_ebg_room_history::default_instance_->InitAsDefaultInstance();
  packetc2w_ebg_history::default_instance_->InitAsDefaultInstance();
  packetw2c_ebg_history_result::default_instance_->InitAsDefaultInstance();
  msg_goldshark_room_history::default_instance_->InitAsDefaultInstance();
  packetc2w_goldshark_history::default_instance_->InitAsDefaultInstance();
  packetw2c_goldshark_history_result::default_instance_->InitAsDefaultInstance();
  msg_multitexas_history::default_instance_->InitAsDefaultInstance();
  msg_multitexas_room_history::default_instance_->InitAsDefaultInstance();
  packetc2w_multitexas_history::default_instance_->InitAsDefaultInstance();
  packetw2c_multitexas_history_result::default_instance_->InitAsDefaultInstance();
  msg_shcd_history::default_instance_->InitAsDefaultInstance();
  msg_shcd_room_history::default_instance_->InitAsDefaultInstance();
  packetc2w_shcd_history::default_instance_->InitAsDefaultInstance();
  packetw2c_shcd_history_result::default_instance_->InitAsDefaultInstance();
  msg_benzbmw_room_history::default_instance_->InitAsDefaultInstance();
  packetc2w_benzbmw_history::default_instance_->InitAsDefaultInstance();
  packetw2c_benzbmw_history_result::default_instance_->InitAsDefaultInstance();
  msg_forestball_room_history::default_instance_->InitAsDefaultInstance();
  packetc2w_forestball_history::default_instance_->InitAsDefaultInstance();
  packetw2c_forestball_history_result::default_instance_->InitAsDefaultInstance();
  msg_fruits_room_history::default_instance_->InitAsDefaultInstance();
  packetc2w_fruits_history::default_instance_->InitAsDefaultInstance();
  packetw2c_fruits_history_result::default_instance_->InitAsDefaultInstance();
  msg_lhd_room_history::default_instance_->InitAsDefaultInstance();
  packetc2w_lhd_history::default_instance_->InitAsDefaultInstance();
  packetw2c_lhd_history_result::default_instance_->InitAsDefaultInstance();
  msg_multiredblack_room_history::default_instance_->InitAsDefaultInstance();
  packetc2w_multiredblack_history::default_instance_->InitAsDefaultInstance();
  packetw2c_multiredblack_history_result::default_instance_->InitAsDefaultInstance();
  happySupremacy_history_info::default_instance_->InitAsDefaultInstance();
  msg_happySupremacy_room_history::default_instance_->InitAsDefaultInstance();
  packetc2w_happySupremacy_history::default_instance_->InitAsDefaultInstance();
  packetw2c_happySupremacy_history_result::default_instance_->InitAsDefaultInstance();
  msg_carsmagnate_room_history::default_instance_->InitAsDefaultInstance();
  packetc2w_carsmagnate_history::default_instance_->InitAsDefaultInstance();
  packetw2c_carsmagnate_history_result::default_instance_->InitAsDefaultInstance();
  msg_fourcolorball_room_history::default_instance_->InitAsDefaultInstance();
  packetc2w_fourcolorball_history::default_instance_->InitAsDefaultInstance();
  packetw2c_fourcolorball_history_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client2world_5fhistory_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client2world_5fhistory_2eproto {
  StaticDescriptorInitializer_client2world_5fhistory_2eproto() {
    protobuf_AddDesc_client2world_5fhistory_2eproto();
  }
} static_descriptor_initializer_client2world_5fhistory_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_baccarat_history::kIsTieFieldNumber;
const int msg_baccarat_history::kIsPlayerWinFieldNumber;
const int msg_baccarat_history::kIsPlayerPairFieldNumber;
const int msg_baccarat_history::kIsBankerPairFieldNumber;
const int msg_baccarat_history::kIsBankerWinFieldNumber;
const int msg_baccarat_history::kWinPointFieldNumber;
#endif  // !_MSC_VER

msg_baccarat_history::msg_baccarat_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_baccarat_history::InitAsDefaultInstance() {
}

msg_baccarat_history::msg_baccarat_history(const msg_baccarat_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_baccarat_history::SharedCtor() {
  _cached_size_ = 0;
  is_tie_ = false;
  is_player_win_ = false;
  is_player_pair_ = false;
  is_banker_pair_ = false;
  is_banker_win_ = false;
  win_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_baccarat_history::~msg_baccarat_history() {
  SharedDtor();
}

void msg_baccarat_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_baccarat_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_baccarat_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_baccarat_history_descriptor_;
}

const msg_baccarat_history& msg_baccarat_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

msg_baccarat_history* msg_baccarat_history::default_instance_ = NULL;

msg_baccarat_history* msg_baccarat_history::New() const {
  return new msg_baccarat_history;
}

void msg_baccarat_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_tie_ = false;
    is_player_win_ = false;
    is_player_pair_ = false;
    is_banker_pair_ = false;
    is_banker_win_ = false;
    win_point_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_baccarat_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_tie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tie_)));
          set_has_is_tie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_player_win;
        break;
      }

      // optional bool is_player_win = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_player_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_player_win_)));
          set_has_is_player_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_player_pair;
        break;
      }

      // optional bool is_player_pair = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_player_pair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_player_pair_)));
          set_has_is_player_pair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_banker_pair;
        break;
      }

      // optional bool is_banker_pair = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_banker_pair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_banker_pair_)));
          set_has_is_banker_pair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_banker_win;
        break;
      }

      // optional bool is_banker_win = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_banker_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_banker_win_)));
          set_has_is_banker_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win_point;
        break;
      }

      // optional int32 win_point = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_point_)));
          set_has_win_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_baccarat_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_tie = 1;
  if (has_is_tie()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_tie(), output);
  }

  // optional bool is_player_win = 2;
  if (has_is_player_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_player_win(), output);
  }

  // optional bool is_player_pair = 3;
  if (has_is_player_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_player_pair(), output);
  }

  // optional bool is_banker_pair = 4;
  if (has_is_banker_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_banker_pair(), output);
  }

  // optional bool is_banker_win = 5;
  if (has_is_banker_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_banker_win(), output);
  }

  // optional int32 win_point = 6;
  if (has_win_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->win_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_baccarat_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_tie = 1;
  if (has_is_tie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_tie(), target);
  }

  // optional bool is_player_win = 2;
  if (has_is_player_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_player_win(), target);
  }

  // optional bool is_player_pair = 3;
  if (has_is_player_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_player_pair(), target);
  }

  // optional bool is_banker_pair = 4;
  if (has_is_banker_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_banker_pair(), target);
  }

  // optional bool is_banker_win = 5;
  if (has_is_banker_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_banker_win(), target);
  }

  // optional int32 win_point = 6;
  if (has_win_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->win_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_baccarat_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_tie = 1;
    if (has_is_tie()) {
      total_size += 1 + 1;
    }

    // optional bool is_player_win = 2;
    if (has_is_player_win()) {
      total_size += 1 + 1;
    }

    // optional bool is_player_pair = 3;
    if (has_is_player_pair()) {
      total_size += 1 + 1;
    }

    // optional bool is_banker_pair = 4;
    if (has_is_banker_pair()) {
      total_size += 1 + 1;
    }

    // optional bool is_banker_win = 5;
    if (has_is_banker_win()) {
      total_size += 1 + 1;
    }

    // optional int32 win_point = 6;
    if (has_win_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_baccarat_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_baccarat_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_baccarat_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_baccarat_history::MergeFrom(const msg_baccarat_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_tie()) {
      set_is_tie(from.is_tie());
    }
    if (from.has_is_player_win()) {
      set_is_player_win(from.is_player_win());
    }
    if (from.has_is_player_pair()) {
      set_is_player_pair(from.is_player_pair());
    }
    if (from.has_is_banker_pair()) {
      set_is_banker_pair(from.is_banker_pair());
    }
    if (from.has_is_banker_win()) {
      set_is_banker_win(from.is_banker_win());
    }
    if (from.has_win_point()) {
      set_win_point(from.win_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_baccarat_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_baccarat_history::CopyFrom(const msg_baccarat_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_baccarat_history::IsInitialized() const {

  return true;
}

void msg_baccarat_history::Swap(msg_baccarat_history* other) {
  if (other != this) {
    std::swap(is_tie_, other->is_tie_);
    std::swap(is_player_win_, other->is_player_win_);
    std::swap(is_player_pair_, other->is_player_pair_);
    std::swap(is_banker_pair_, other->is_banker_pair_);
    std::swap(is_banker_win_, other->is_banker_win_);
    std::swap(win_point_, other->win_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_baccarat_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_baccarat_history_descriptor_;
  metadata.reflection = msg_baccarat_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_baccarat_room_history::kRoomIdFieldNumber;
const int msg_baccarat_room_history::kHistoryListFieldNumber;
#endif  // !_MSC_VER

msg_baccarat_room_history::msg_baccarat_room_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_baccarat_room_history::InitAsDefaultInstance() {
}

msg_baccarat_room_history::msg_baccarat_room_history(const msg_baccarat_room_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_baccarat_room_history::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_baccarat_room_history::~msg_baccarat_room_history() {
  SharedDtor();
}

void msg_baccarat_room_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_baccarat_room_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_baccarat_room_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_baccarat_room_history_descriptor_;
}

const msg_baccarat_room_history& msg_baccarat_room_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

msg_baccarat_room_history* msg_baccarat_room_history::default_instance_ = NULL;

msg_baccarat_room_history* msg_baccarat_room_history::New() const {
  return new msg_baccarat_room_history;
}

void msg_baccarat_room_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
  }
  history_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_baccarat_room_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_history_list;
        break;
      }

      // repeated .client2world_protocols.msg_baccarat_history history_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_history_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_baccarat_room_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // repeated .client2world_protocols.msg_baccarat_history history_list = 8;
  for (int i = 0; i < this->history_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->history_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_baccarat_room_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // repeated .client2world_protocols.msg_baccarat_history history_list = 8;
  for (int i = 0; i < this->history_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->history_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_baccarat_room_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  // repeated .client2world_protocols.msg_baccarat_history history_list = 8;
  total_size += 1 * this->history_list_size();
  for (int i = 0; i < this->history_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_baccarat_room_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_baccarat_room_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_baccarat_room_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_baccarat_room_history::MergeFrom(const msg_baccarat_room_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_list_.MergeFrom(from.history_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_baccarat_room_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_baccarat_room_history::CopyFrom(const msg_baccarat_room_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_baccarat_room_history::IsInitialized() const {

  return true;
}

void msg_baccarat_room_history::Swap(msg_baccarat_room_history* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    history_list_.Swap(&other->history_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_baccarat_room_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_baccarat_room_history_descriptor_;
  metadata.reflection = msg_baccarat_room_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_baccarat_history::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_baccarat_history::packetc2w_baccarat_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_baccarat_history::InitAsDefaultInstance() {
}

packetc2w_baccarat_history::packetc2w_baccarat_history(const packetc2w_baccarat_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_baccarat_history::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5104;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_baccarat_history::~packetc2w_baccarat_history() {
  SharedDtor();
}

void packetc2w_baccarat_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_baccarat_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_baccarat_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_baccarat_history_descriptor_;
}

const packetc2w_baccarat_history& packetc2w_baccarat_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetc2w_baccarat_history* packetc2w_baccarat_history::default_instance_ = NULL;

packetc2w_baccarat_history* packetc2w_baccarat_history::New() const {
  return new packetc2w_baccarat_history;
}

void packetc2w_baccarat_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5104;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_baccarat_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_baccarat_history];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_baccarat_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_baccarat_history];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_baccarat_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_baccarat_history];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_baccarat_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_baccarat_history];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_baccarat_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_baccarat_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_baccarat_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_baccarat_history::MergeFrom(const packetc2w_baccarat_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_baccarat_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_baccarat_history::CopyFrom(const packetc2w_baccarat_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_baccarat_history::IsInitialized() const {

  return true;
}

void packetc2w_baccarat_history::Swap(packetc2w_baccarat_history* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_baccarat_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_baccarat_history_descriptor_;
  metadata.reflection = packetc2w_baccarat_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_baccarat_history_result::kPacketIdFieldNumber;
const int packetw2c_baccarat_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetw2c_baccarat_history_result::packetw2c_baccarat_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_baccarat_history_result::InitAsDefaultInstance() {
}

packetw2c_baccarat_history_result::packetw2c_baccarat_history_result(const packetw2c_baccarat_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_baccarat_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7614;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_baccarat_history_result::~packetw2c_baccarat_history_result() {
  SharedDtor();
}

void packetw2c_baccarat_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_baccarat_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_baccarat_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_baccarat_history_result_descriptor_;
}

const packetw2c_baccarat_history_result& packetw2c_baccarat_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetw2c_baccarat_history_result* packetw2c_baccarat_history_result::default_instance_ = NULL;

packetw2c_baccarat_history_result* packetw2c_baccarat_history_result::New() const {
  return new packetw2c_baccarat_history_result;
}

void packetw2c_baccarat_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7614;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_baccarat_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_baccarat_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        break;
      }

      // repeated .client2world_protocols.msg_baccarat_room_history room_history = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_baccarat_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_baccarat_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_baccarat_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_baccarat_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_baccarat_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_baccarat_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_baccarat_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_baccarat_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client2world_protocols.msg_baccarat_room_history room_history = 2;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_baccarat_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_baccarat_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_baccarat_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_baccarat_history_result::MergeFrom(const packetw2c_baccarat_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_baccarat_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_baccarat_history_result::CopyFrom(const packetw2c_baccarat_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_baccarat_history_result::IsInitialized() const {

  return true;
}

void packetw2c_baccarat_history_result::Swap(packetw2c_baccarat_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_baccarat_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_baccarat_history_result_descriptor_;
  metadata.reflection = packetw2c_baccarat_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_cows_history::kIsWinFieldNumber;
#endif  // !_MSC_VER

msg_cows_history::msg_cows_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_cows_history::InitAsDefaultInstance() {
}

msg_cows_history::msg_cows_history(const msg_cows_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_cows_history::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_cows_history::~msg_cows_history() {
  SharedDtor();
}

void msg_cows_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_cows_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_cows_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_cows_history_descriptor_;
}

const msg_cows_history& msg_cows_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

msg_cows_history* msg_cows_history::default_instance_ = NULL;

msg_cows_history* msg_cows_history::New() const {
  return new msg_cows_history;
}

void msg_cows_history::Clear() {
  is_win_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_cows_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool is_win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 8, input, this->mutable_is_win())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_is_win())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_is_win;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_cows_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bool is_win = 1;
  for (int i = 0; i < this->is_win_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      1, this->is_win(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_cows_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bool is_win = 1;
  for (int i = 0; i < this->is_win_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(1, this->is_win(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_cows_history::ByteSize() const {
  int total_size = 0;

  // repeated bool is_win = 1;
  {
    int data_size = 0;
    data_size = 1 * this->is_win_size();
    total_size += 1 * this->is_win_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_cows_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_cows_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_cows_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_cows_history::MergeFrom(const msg_cows_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  is_win_.MergeFrom(from.is_win_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_cows_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_cows_history::CopyFrom(const msg_cows_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_cows_history::IsInitialized() const {

  return true;
}

void msg_cows_history::Swap(msg_cows_history* other) {
  if (other != this) {
    is_win_.Swap(&other->is_win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_cows_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_cows_history_descriptor_;
  metadata.reflection = msg_cows_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_cows_room_history::kRoomIdFieldNumber;
const int msg_cows_room_history::kTotalCountFieldNumber;
const int msg_cows_room_history::kWinCountsFieldNumber;
const int msg_cows_room_history::kLoseCountsFieldNumber;
const int msg_cows_room_history::kHistoryListFieldNumber;
#endif  // !_MSC_VER

msg_cows_room_history::msg_cows_room_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_cows_room_history::InitAsDefaultInstance() {
}

msg_cows_room_history::msg_cows_room_history(const msg_cows_room_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_cows_room_history::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  total_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_cows_room_history::~msg_cows_room_history() {
  SharedDtor();
}

void msg_cows_room_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_cows_room_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_cows_room_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_cows_room_history_descriptor_;
}

const msg_cows_room_history& msg_cows_room_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

msg_cows_room_history* msg_cows_room_history::default_instance_ = NULL;

msg_cows_room_history* msg_cows_room_history::New() const {
  return new msg_cows_room_history;
}

void msg_cows_room_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
    total_count_ = 0;
  }
  win_counts_.Clear();
  lose_counts_.Clear();
  history_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_cows_room_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_count;
        break;
      }

      // optional int32 total_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_counts;
        break;
      }

      // repeated int32 win_counts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_win_counts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_win_counts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_counts;
        if (input->ExpectTag(32)) goto parse_lose_counts;
        break;
      }

      // repeated int32 lose_counts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_lose_counts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lose_counts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lose_counts;
        if (input->ExpectTag(42)) goto parse_history_list;
        break;
      }

      // repeated .client2world_protocols.msg_cows_history history_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_history_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_cows_room_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // optional int32 total_count = 2;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_count(), output);
  }

  // repeated int32 win_counts = 3;
  for (int i = 0; i < this->win_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->win_counts(i), output);
  }

  // repeated int32 lose_counts = 4;
  for (int i = 0; i < this->lose_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->lose_counts(i), output);
  }

  // repeated .client2world_protocols.msg_cows_history history_list = 5;
  for (int i = 0; i < this->history_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->history_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_cows_room_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // optional int32 total_count = 2;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_count(), target);
  }

  // repeated int32 win_counts = 3;
  for (int i = 0; i < this->win_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->win_counts(i), target);
  }

  // repeated int32 lose_counts = 4;
  for (int i = 0; i < this->lose_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->lose_counts(i), target);
  }

  // repeated .client2world_protocols.msg_cows_history history_list = 5;
  for (int i = 0; i < this->history_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->history_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_cows_room_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int32 total_count = 2;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_count());
    }

  }
  // repeated int32 win_counts = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->win_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->win_counts(i));
    }
    total_size += 1 * this->win_counts_size() + data_size;
  }

  // repeated int32 lose_counts = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->lose_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lose_counts(i));
    }
    total_size += 1 * this->lose_counts_size() + data_size;
  }

  // repeated .client2world_protocols.msg_cows_history history_list = 5;
  total_size += 1 * this->history_list_size();
  for (int i = 0; i < this->history_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_cows_room_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_cows_room_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_cows_room_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_cows_room_history::MergeFrom(const msg_cows_room_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  win_counts_.MergeFrom(from.win_counts_);
  lose_counts_.MergeFrom(from.lose_counts_);
  history_list_.MergeFrom(from.history_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_cows_room_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_cows_room_history::CopyFrom(const msg_cows_room_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_cows_room_history::IsInitialized() const {

  return true;
}

void msg_cows_room_history::Swap(msg_cows_room_history* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(total_count_, other->total_count_);
    win_counts_.Swap(&other->win_counts_);
    lose_counts_.Swap(&other->lose_counts_);
    history_list_.Swap(&other->history_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_cows_room_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_cows_room_history_descriptor_;
  metadata.reflection = msg_cows_room_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_cows_history::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_cows_history::packetc2w_cows_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_cows_history::InitAsDefaultInstance() {
}

packetc2w_cows_history::packetc2w_cows_history(const packetc2w_cows_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_cows_history::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5105;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_cows_history::~packetc2w_cows_history() {
  SharedDtor();
}

void packetc2w_cows_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_cows_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_cows_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_cows_history_descriptor_;
}

const packetc2w_cows_history& packetc2w_cows_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetc2w_cows_history* packetc2w_cows_history::default_instance_ = NULL;

packetc2w_cows_history* packetc2w_cows_history::New() const {
  return new packetc2w_cows_history;
}

void packetc2w_cows_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5105;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_cows_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_cows_history];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_cows_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_cows_history];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_cows_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_cows_history];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_cows_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_cows_history];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_cows_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_cows_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_cows_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_cows_history::MergeFrom(const packetc2w_cows_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_cows_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_cows_history::CopyFrom(const packetc2w_cows_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_cows_history::IsInitialized() const {

  return true;
}

void packetc2w_cows_history::Swap(packetc2w_cows_history* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_cows_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_cows_history_descriptor_;
  metadata.reflection = packetc2w_cows_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_cows_history_result::kPacketIdFieldNumber;
const int packetw2c_cows_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetw2c_cows_history_result::packetw2c_cows_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_cows_history_result::InitAsDefaultInstance() {
}

packetw2c_cows_history_result::packetw2c_cows_history_result(const packetw2c_cows_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_cows_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7615;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_cows_history_result::~packetw2c_cows_history_result() {
  SharedDtor();
}

void packetw2c_cows_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_cows_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_cows_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_cows_history_result_descriptor_;
}

const packetw2c_cows_history_result& packetw2c_cows_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetw2c_cows_history_result* packetw2c_cows_history_result::default_instance_ = NULL;

packetw2c_cows_history_result* packetw2c_cows_history_result::New() const {
  return new packetw2c_cows_history_result;
}

void packetw2c_cows_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7615;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_cows_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_cows_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        break;
      }

      // repeated .client2world_protocols.msg_cows_room_history room_history = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_cows_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_cows_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_cows_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_cows_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_cows_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_cows_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_cows_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_cows_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client2world_protocols.msg_cows_room_history room_history = 2;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_cows_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_cows_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_cows_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_cows_history_result::MergeFrom(const packetw2c_cows_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_cows_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_cows_history_result::CopyFrom(const packetw2c_cows_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_cows_history_result::IsInitialized() const {

  return true;
}

void packetw2c_cows_history_result::Swap(packetw2c_cows_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_cows_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_cows_history_result_descriptor_;
  metadata.reflection = packetw2c_cows_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_dice_history::kDice1FieldNumber;
const int msg_dice_history::kDice2FieldNumber;
const int msg_dice_history::kDice3FieldNumber;
#endif  // !_MSC_VER

msg_dice_history::msg_dice_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_dice_history::InitAsDefaultInstance() {
}

msg_dice_history::msg_dice_history(const msg_dice_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_dice_history::SharedCtor() {
  _cached_size_ = 0;
  dice1_ = 0;
  dice2_ = 0;
  dice3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_dice_history::~msg_dice_history() {
  SharedDtor();
}

void msg_dice_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_dice_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_dice_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_dice_history_descriptor_;
}

const msg_dice_history& msg_dice_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

msg_dice_history* msg_dice_history::default_instance_ = NULL;

msg_dice_history* msg_dice_history::New() const {
  return new msg_dice_history;
}

void msg_dice_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dice1_ = 0;
    dice2_ = 0;
    dice3_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_dice_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dice1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dice1_)));
          set_has_dice1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dice2;
        break;
      }

      // optional int32 dice2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dice2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dice2_)));
          set_has_dice2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dice3;
        break;
      }

      // optional int32 dice3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dice3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dice3_)));
          set_has_dice3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_dice_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dice1 = 1;
  if (has_dice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dice1(), output);
  }

  // optional int32 dice2 = 2;
  if (has_dice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dice2(), output);
  }

  // optional int32 dice3 = 3;
  if (has_dice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dice3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_dice_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dice1 = 1;
  if (has_dice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dice1(), target);
  }

  // optional int32 dice2 = 2;
  if (has_dice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dice2(), target);
  }

  // optional int32 dice3 = 3;
  if (has_dice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dice3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_dice_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dice1 = 1;
    if (has_dice1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dice1());
    }

    // optional int32 dice2 = 2;
    if (has_dice2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dice2());
    }

    // optional int32 dice3 = 3;
    if (has_dice3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dice3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_dice_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_dice_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_dice_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_dice_history::MergeFrom(const msg_dice_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dice1()) {
      set_dice1(from.dice1());
    }
    if (from.has_dice2()) {
      set_dice2(from.dice2());
    }
    if (from.has_dice3()) {
      set_dice3(from.dice3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_dice_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_dice_history::CopyFrom(const msg_dice_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_dice_history::IsInitialized() const {

  return true;
}

void msg_dice_history::Swap(msg_dice_history* other) {
  if (other != this) {
    std::swap(dice1_, other->dice1_);
    std::swap(dice2_, other->dice2_);
    std::swap(dice3_, other->dice3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_dice_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_dice_history_descriptor_;
  metadata.reflection = msg_dice_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_dice_room_history::kRoomIdFieldNumber;
const int msg_dice_room_history::kHistoryListFieldNumber;
#endif  // !_MSC_VER

msg_dice_room_history::msg_dice_room_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_dice_room_history::InitAsDefaultInstance() {
}

msg_dice_room_history::msg_dice_room_history(const msg_dice_room_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_dice_room_history::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_dice_room_history::~msg_dice_room_history() {
  SharedDtor();
}

void msg_dice_room_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_dice_room_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_dice_room_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_dice_room_history_descriptor_;
}

const msg_dice_room_history& msg_dice_room_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

msg_dice_room_history* msg_dice_room_history::default_instance_ = NULL;

msg_dice_room_history* msg_dice_room_history::New() const {
  return new msg_dice_room_history;
}

void msg_dice_room_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
  }
  history_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_dice_room_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_history_list;
        break;
      }

      // repeated .client2world_protocols.msg_dice_history history_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_history_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_dice_room_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // repeated .client2world_protocols.msg_dice_history history_list = 8;
  for (int i = 0; i < this->history_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->history_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_dice_room_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // repeated .client2world_protocols.msg_dice_history history_list = 8;
  for (int i = 0; i < this->history_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->history_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_dice_room_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  // repeated .client2world_protocols.msg_dice_history history_list = 8;
  total_size += 1 * this->history_list_size();
  for (int i = 0; i < this->history_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_dice_room_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_dice_room_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_dice_room_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_dice_room_history::MergeFrom(const msg_dice_room_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_list_.MergeFrom(from.history_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_dice_room_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_dice_room_history::CopyFrom(const msg_dice_room_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_dice_room_history::IsInitialized() const {

  return true;
}

void msg_dice_room_history::Swap(msg_dice_room_history* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    history_list_.Swap(&other->history_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_dice_room_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_dice_room_history_descriptor_;
  metadata.reflection = msg_dice_room_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_dice_history::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_dice_history::packetc2w_dice_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_dice_history::InitAsDefaultInstance() {
}

packetc2w_dice_history::packetc2w_dice_history(const packetc2w_dice_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_dice_history::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5106;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_dice_history::~packetc2w_dice_history() {
  SharedDtor();
}

void packetc2w_dice_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_dice_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_dice_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_dice_history_descriptor_;
}

const packetc2w_dice_history& packetc2w_dice_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetc2w_dice_history* packetc2w_dice_history::default_instance_ = NULL;

packetc2w_dice_history* packetc2w_dice_history::New() const {
  return new packetc2w_dice_history;
}

void packetc2w_dice_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5106;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_dice_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_dice_history];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_dice_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_dice_history];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_dice_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_dice_history];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_dice_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_dice_history];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_dice_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_dice_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_dice_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_dice_history::MergeFrom(const packetc2w_dice_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_dice_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_dice_history::CopyFrom(const packetc2w_dice_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_dice_history::IsInitialized() const {

  return true;
}

void packetc2w_dice_history::Swap(packetc2w_dice_history* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_dice_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_dice_history_descriptor_;
  metadata.reflection = packetc2w_dice_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_dice_history_result::kPacketIdFieldNumber;
const int packetw2c_dice_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetw2c_dice_history_result::packetw2c_dice_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_dice_history_result::InitAsDefaultInstance() {
}

packetw2c_dice_history_result::packetw2c_dice_history_result(const packetw2c_dice_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_dice_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7616;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_dice_history_result::~packetw2c_dice_history_result() {
  SharedDtor();
}

void packetw2c_dice_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_dice_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_dice_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_dice_history_result_descriptor_;
}

const packetw2c_dice_history_result& packetw2c_dice_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetw2c_dice_history_result* packetw2c_dice_history_result::default_instance_ = NULL;

packetw2c_dice_history_result* packetw2c_dice_history_result::New() const {
  return new packetw2c_dice_history_result;
}

void packetw2c_dice_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7616;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_dice_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_dice_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_room_history;
        break;
      }

      // repeated .client2world_protocols.msg_dice_room_history room_history = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_dice_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_dice_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_dice_room_history room_history = 5;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_dice_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_dice_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_dice_room_history room_history = 5;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_dice_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_dice_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client2world_protocols.msg_dice_room_history room_history = 5;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_dice_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_dice_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_dice_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_dice_history_result::MergeFrom(const packetw2c_dice_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_dice_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_dice_history_result::CopyFrom(const packetw2c_dice_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_dice_history_result::IsInitialized() const {

  return true;
}

void packetw2c_dice_history_result::Swap(packetw2c_dice_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_dice_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_dice_history_result_descriptor_;
  metadata.reflection = packetw2c_dice_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_ebg_history::kIsWinFieldNumber;
const int msg_ebg_history::kCardsIdFieldNumber;
#endif  // !_MSC_VER

msg_ebg_history::msg_ebg_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_ebg_history::InitAsDefaultInstance() {
}

msg_ebg_history::msg_ebg_history(const msg_ebg_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_ebg_history::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_ebg_history::~msg_ebg_history() {
  SharedDtor();
}

void msg_ebg_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_ebg_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_ebg_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_ebg_history_descriptor_;
}

const msg_ebg_history& msg_ebg_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

msg_ebg_history* msg_ebg_history::default_instance_ = NULL;

msg_ebg_history* msg_ebg_history::New() const {
  return new msg_ebg_history;
}

void msg_ebg_history::Clear() {
  is_win_.Clear();
  cards_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_ebg_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool is_win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 8, input, this->mutable_is_win())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_is_win())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_is_win;
        if (input->ExpectTag(16)) goto parse_cards_id;
        break;
      }

      // repeated int32 cards_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cards_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_ebg_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bool is_win = 1;
  for (int i = 0; i < this->is_win_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      1, this->is_win(i), output);
  }

  // repeated int32 cards_id = 2;
  for (int i = 0; i < this->cards_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cards_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_ebg_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bool is_win = 1;
  for (int i = 0; i < this->is_win_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(1, this->is_win(i), target);
  }

  // repeated int32 cards_id = 2;
  for (int i = 0; i < this->cards_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cards_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_ebg_history::ByteSize() const {
  int total_size = 0;

  // repeated bool is_win = 1;
  {
    int data_size = 0;
    data_size = 1 * this->is_win_size();
    total_size += 1 * this->is_win_size() + data_size;
  }

  // repeated int32 cards_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards_id(i));
    }
    total_size += 1 * this->cards_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_ebg_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_ebg_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_ebg_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_ebg_history::MergeFrom(const msg_ebg_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  is_win_.MergeFrom(from.is_win_);
  cards_id_.MergeFrom(from.cards_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_ebg_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_ebg_history::CopyFrom(const msg_ebg_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_ebg_history::IsInitialized() const {

  return true;
}

void msg_ebg_history::Swap(msg_ebg_history* other) {
  if (other != this) {
    is_win_.Swap(&other->is_win_);
    cards_id_.Swap(&other->cards_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_ebg_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_ebg_history_descriptor_;
  metadata.reflection = msg_ebg_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_ebg_room_history::kRoomIdFieldNumber;
const int msg_ebg_room_history::kTotalCountFieldNumber;
const int msg_ebg_room_history::kWinCountsFieldNumber;
const int msg_ebg_room_history::kLoseCountsFieldNumber;
const int msg_ebg_room_history::kHistoryListFieldNumber;
#endif  // !_MSC_VER

msg_ebg_room_history::msg_ebg_room_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_ebg_room_history::InitAsDefaultInstance() {
}

msg_ebg_room_history::msg_ebg_room_history(const msg_ebg_room_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_ebg_room_history::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  total_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_ebg_room_history::~msg_ebg_room_history() {
  SharedDtor();
}

void msg_ebg_room_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_ebg_room_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_ebg_room_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_ebg_room_history_descriptor_;
}

const msg_ebg_room_history& msg_ebg_room_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

msg_ebg_room_history* msg_ebg_room_history::default_instance_ = NULL;

msg_ebg_room_history* msg_ebg_room_history::New() const {
  return new msg_ebg_room_history;
}

void msg_ebg_room_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
    total_count_ = 0;
  }
  win_counts_.Clear();
  lose_counts_.Clear();
  history_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_ebg_room_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_count;
        break;
      }

      // optional int32 total_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_counts;
        break;
      }

      // repeated int32 win_counts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_win_counts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_win_counts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_counts;
        if (input->ExpectTag(32)) goto parse_lose_counts;
        break;
      }

      // repeated int32 lose_counts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_lose_counts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lose_counts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lose_counts;
        if (input->ExpectTag(42)) goto parse_history_list;
        break;
      }

      // repeated .client2world_protocols.msg_ebg_history history_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_history_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_ebg_room_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // optional int32 total_count = 2;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_count(), output);
  }

  // repeated int32 win_counts = 3;
  for (int i = 0; i < this->win_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->win_counts(i), output);
  }

  // repeated int32 lose_counts = 4;
  for (int i = 0; i < this->lose_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->lose_counts(i), output);
  }

  // repeated .client2world_protocols.msg_ebg_history history_list = 5;
  for (int i = 0; i < this->history_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->history_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_ebg_room_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // optional int32 total_count = 2;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_count(), target);
  }

  // repeated int32 win_counts = 3;
  for (int i = 0; i < this->win_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->win_counts(i), target);
  }

  // repeated int32 lose_counts = 4;
  for (int i = 0; i < this->lose_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->lose_counts(i), target);
  }

  // repeated .client2world_protocols.msg_ebg_history history_list = 5;
  for (int i = 0; i < this->history_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->history_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_ebg_room_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int32 total_count = 2;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_count());
    }

  }
  // repeated int32 win_counts = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->win_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->win_counts(i));
    }
    total_size += 1 * this->win_counts_size() + data_size;
  }

  // repeated int32 lose_counts = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->lose_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lose_counts(i));
    }
    total_size += 1 * this->lose_counts_size() + data_size;
  }

  // repeated .client2world_protocols.msg_ebg_history history_list = 5;
  total_size += 1 * this->history_list_size();
  for (int i = 0; i < this->history_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_ebg_room_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_ebg_room_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_ebg_room_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_ebg_room_history::MergeFrom(const msg_ebg_room_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  win_counts_.MergeFrom(from.win_counts_);
  lose_counts_.MergeFrom(from.lose_counts_);
  history_list_.MergeFrom(from.history_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_ebg_room_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_ebg_room_history::CopyFrom(const msg_ebg_room_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_ebg_room_history::IsInitialized() const {

  return true;
}

void msg_ebg_room_history::Swap(msg_ebg_room_history* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(total_count_, other->total_count_);
    win_counts_.Swap(&other->win_counts_);
    lose_counts_.Swap(&other->lose_counts_);
    history_list_.Swap(&other->history_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_ebg_room_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_ebg_room_history_descriptor_;
  metadata.reflection = msg_ebg_room_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_ebg_history::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_ebg_history::packetc2w_ebg_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_ebg_history::InitAsDefaultInstance() {
}

packetc2w_ebg_history::packetc2w_ebg_history(const packetc2w_ebg_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_ebg_history::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5107;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_ebg_history::~packetc2w_ebg_history() {
  SharedDtor();
}

void packetc2w_ebg_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_ebg_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_ebg_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_ebg_history_descriptor_;
}

const packetc2w_ebg_history& packetc2w_ebg_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetc2w_ebg_history* packetc2w_ebg_history::default_instance_ = NULL;

packetc2w_ebg_history* packetc2w_ebg_history::New() const {
  return new packetc2w_ebg_history;
}

void packetc2w_ebg_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5107;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_ebg_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ebg_history];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_ebg_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ebg_history];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_ebg_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ebg_history];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_ebg_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ebg_history];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_ebg_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_ebg_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_ebg_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_ebg_history::MergeFrom(const packetc2w_ebg_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_ebg_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_ebg_history::CopyFrom(const packetc2w_ebg_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_ebg_history::IsInitialized() const {

  return true;
}

void packetc2w_ebg_history::Swap(packetc2w_ebg_history* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_ebg_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_ebg_history_descriptor_;
  metadata.reflection = packetc2w_ebg_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_ebg_history_result::kPacketIdFieldNumber;
const int packetw2c_ebg_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetw2c_ebg_history_result::packetw2c_ebg_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_ebg_history_result::InitAsDefaultInstance() {
}

packetw2c_ebg_history_result::packetw2c_ebg_history_result(const packetw2c_ebg_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_ebg_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7617;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_ebg_history_result::~packetw2c_ebg_history_result() {
  SharedDtor();
}

void packetw2c_ebg_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_ebg_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_ebg_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_ebg_history_result_descriptor_;
}

const packetw2c_ebg_history_result& packetw2c_ebg_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetw2c_ebg_history_result* packetw2c_ebg_history_result::default_instance_ = NULL;

packetw2c_ebg_history_result* packetw2c_ebg_history_result::New() const {
  return new packetw2c_ebg_history_result;
}

void packetw2c_ebg_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7617;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_ebg_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ebg_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        break;
      }

      // repeated .client2world_protocols.msg_ebg_room_history room_history = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_ebg_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ebg_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_ebg_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_ebg_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ebg_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_ebg_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_ebg_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ebg_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client2world_protocols.msg_ebg_room_history room_history = 2;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_ebg_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_ebg_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_ebg_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_ebg_history_result::MergeFrom(const packetw2c_ebg_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_ebg_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_ebg_history_result::CopyFrom(const packetw2c_ebg_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_ebg_history_result::IsInitialized() const {

  return true;
}

void packetw2c_ebg_history_result::Swap(packetw2c_ebg_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_ebg_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_ebg_history_result_descriptor_;
  metadata.reflection = packetw2c_ebg_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_goldshark_room_history::kRoomIdFieldNumber;
const int msg_goldshark_room_history::kHistoryListFieldNumber;
#endif  // !_MSC_VER

msg_goldshark_room_history::msg_goldshark_room_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_goldshark_room_history::InitAsDefaultInstance() {
}

msg_goldshark_room_history::msg_goldshark_room_history(const msg_goldshark_room_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_goldshark_room_history::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_goldshark_room_history::~msg_goldshark_room_history() {
  SharedDtor();
}

void msg_goldshark_room_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_goldshark_room_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_goldshark_room_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_goldshark_room_history_descriptor_;
}

const msg_goldshark_room_history& msg_goldshark_room_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

msg_goldshark_room_history* msg_goldshark_room_history::default_instance_ = NULL;

msg_goldshark_room_history* msg_goldshark_room_history::New() const {
  return new msg_goldshark_room_history;
}

void msg_goldshark_room_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
  }
  history_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_goldshark_room_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_history_list;
        break;
      }

      // repeated int32 history_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_history_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_history_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_history_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_goldshark_room_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // repeated int32 history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->history_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_goldshark_room_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // repeated int32 history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->history_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_goldshark_room_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  // repeated int32 history_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->history_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->history_list(i));
    }
    total_size += 1 * this->history_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_goldshark_room_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_goldshark_room_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_goldshark_room_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_goldshark_room_history::MergeFrom(const msg_goldshark_room_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_list_.MergeFrom(from.history_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_goldshark_room_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_goldshark_room_history::CopyFrom(const msg_goldshark_room_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_goldshark_room_history::IsInitialized() const {

  return true;
}

void msg_goldshark_room_history::Swap(msg_goldshark_room_history* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    history_list_.Swap(&other->history_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_goldshark_room_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_goldshark_room_history_descriptor_;
  metadata.reflection = msg_goldshark_room_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_goldshark_history::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_goldshark_history::packetc2w_goldshark_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_goldshark_history::InitAsDefaultInstance() {
}

packetc2w_goldshark_history::packetc2w_goldshark_history(const packetc2w_goldshark_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_goldshark_history::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5108;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_goldshark_history::~packetc2w_goldshark_history() {
  SharedDtor();
}

void packetc2w_goldshark_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_goldshark_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_goldshark_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_goldshark_history_descriptor_;
}

const packetc2w_goldshark_history& packetc2w_goldshark_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetc2w_goldshark_history* packetc2w_goldshark_history::default_instance_ = NULL;

packetc2w_goldshark_history* packetc2w_goldshark_history::New() const {
  return new packetc2w_goldshark_history;
}

void packetc2w_goldshark_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5108;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_goldshark_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_goldshark_history];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_goldshark_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_goldshark_history];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_goldshark_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_goldshark_history];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_goldshark_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_goldshark_history];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_goldshark_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_goldshark_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_goldshark_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_goldshark_history::MergeFrom(const packetc2w_goldshark_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_goldshark_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_goldshark_history::CopyFrom(const packetc2w_goldshark_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_goldshark_history::IsInitialized() const {

  return true;
}

void packetc2w_goldshark_history::Swap(packetc2w_goldshark_history* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_goldshark_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_goldshark_history_descriptor_;
  metadata.reflection = packetc2w_goldshark_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_goldshark_history_result::kPacketIdFieldNumber;
const int packetw2c_goldshark_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetw2c_goldshark_history_result::packetw2c_goldshark_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_goldshark_history_result::InitAsDefaultInstance() {
}

packetw2c_goldshark_history_result::packetw2c_goldshark_history_result(const packetw2c_goldshark_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_goldshark_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7618;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_goldshark_history_result::~packetw2c_goldshark_history_result() {
  SharedDtor();
}

void packetw2c_goldshark_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_goldshark_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_goldshark_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_goldshark_history_result_descriptor_;
}

const packetw2c_goldshark_history_result& packetw2c_goldshark_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetw2c_goldshark_history_result* packetw2c_goldshark_history_result::default_instance_ = NULL;

packetw2c_goldshark_history_result* packetw2c_goldshark_history_result::New() const {
  return new packetw2c_goldshark_history_result;
}

void packetw2c_goldshark_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7618;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_goldshark_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_goldshark_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        break;
      }

      // repeated .client2world_protocols.msg_goldshark_room_history room_history = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_goldshark_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_goldshark_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_goldshark_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_goldshark_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_goldshark_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_goldshark_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_goldshark_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_goldshark_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client2world_protocols.msg_goldshark_room_history room_history = 2;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_goldshark_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_goldshark_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_goldshark_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_goldshark_history_result::MergeFrom(const packetw2c_goldshark_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_goldshark_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_goldshark_history_result::CopyFrom(const packetw2c_goldshark_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_goldshark_history_result::IsInitialized() const {

  return true;
}

void packetw2c_goldshark_history_result::Swap(packetw2c_goldshark_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_goldshark_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_goldshark_history_result_descriptor_;
  metadata.reflection = packetw2c_goldshark_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_multitexas_history::kWinFieldNumber;
#endif  // !_MSC_VER

msg_multitexas_history::msg_multitexas_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_multitexas_history::InitAsDefaultInstance() {
}

msg_multitexas_history::msg_multitexas_history(const msg_multitexas_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_multitexas_history::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_multitexas_history::~msg_multitexas_history() {
  SharedDtor();
}

void msg_multitexas_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_multitexas_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_multitexas_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_multitexas_history_descriptor_;
}

const msg_multitexas_history& msg_multitexas_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

msg_multitexas_history* msg_multitexas_history::default_instance_ = NULL;

msg_multitexas_history* msg_multitexas_history::New() const {
  return new msg_multitexas_history;
}

void msg_multitexas_history::Clear() {
  win_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_multitexas_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_win())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_win())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_win;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_multitexas_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 win = 1;
  for (int i = 0; i < this->win_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->win(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_multitexas_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 win = 1;
  for (int i = 0; i < this->win_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->win(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_multitexas_history::ByteSize() const {
  int total_size = 0;

  // repeated int32 win = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->win_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->win(i));
    }
    total_size += 1 * this->win_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_multitexas_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_multitexas_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_multitexas_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_multitexas_history::MergeFrom(const msg_multitexas_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  win_.MergeFrom(from.win_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_multitexas_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_multitexas_history::CopyFrom(const msg_multitexas_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_multitexas_history::IsInitialized() const {

  return true;
}

void msg_multitexas_history::Swap(msg_multitexas_history* other) {
  if (other != this) {
    win_.Swap(&other->win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_multitexas_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_multitexas_history_descriptor_;
  metadata.reflection = msg_multitexas_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_multitexas_room_history::kRoomIdFieldNumber;
const int msg_multitexas_room_history::kHistoryListFieldNumber;
#endif  // !_MSC_VER

msg_multitexas_room_history::msg_multitexas_room_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_multitexas_room_history::InitAsDefaultInstance() {
}

msg_multitexas_room_history::msg_multitexas_room_history(const msg_multitexas_room_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_multitexas_room_history::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_multitexas_room_history::~msg_multitexas_room_history() {
  SharedDtor();
}

void msg_multitexas_room_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_multitexas_room_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_multitexas_room_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_multitexas_room_history_descriptor_;
}

const msg_multitexas_room_history& msg_multitexas_room_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

msg_multitexas_room_history* msg_multitexas_room_history::default_instance_ = NULL;

msg_multitexas_room_history* msg_multitexas_room_history::New() const {
  return new msg_multitexas_room_history;
}

void msg_multitexas_room_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
  }
  history_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_multitexas_room_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_history_list;
        break;
      }

      // repeated .client2world_protocols.msg_multitexas_history history_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_history_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_multitexas_room_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // repeated .client2world_protocols.msg_multitexas_history history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->history_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_multitexas_room_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // repeated .client2world_protocols.msg_multitexas_history history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->history_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_multitexas_room_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  // repeated .client2world_protocols.msg_multitexas_history history_list = 2;
  total_size += 1 * this->history_list_size();
  for (int i = 0; i < this->history_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_multitexas_room_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_multitexas_room_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_multitexas_room_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_multitexas_room_history::MergeFrom(const msg_multitexas_room_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_list_.MergeFrom(from.history_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_multitexas_room_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_multitexas_room_history::CopyFrom(const msg_multitexas_room_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_multitexas_room_history::IsInitialized() const {

  return true;
}

void msg_multitexas_room_history::Swap(msg_multitexas_room_history* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    history_list_.Swap(&other->history_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_multitexas_room_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_multitexas_room_history_descriptor_;
  metadata.reflection = msg_multitexas_room_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_multitexas_history::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_multitexas_history::packetc2w_multitexas_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_multitexas_history::InitAsDefaultInstance() {
}

packetc2w_multitexas_history::packetc2w_multitexas_history(const packetc2w_multitexas_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_multitexas_history::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5109;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_multitexas_history::~packetc2w_multitexas_history() {
  SharedDtor();
}

void packetc2w_multitexas_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_multitexas_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_multitexas_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_multitexas_history_descriptor_;
}

const packetc2w_multitexas_history& packetc2w_multitexas_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetc2w_multitexas_history* packetc2w_multitexas_history::default_instance_ = NULL;

packetc2w_multitexas_history* packetc2w_multitexas_history::New() const {
  return new packetc2w_multitexas_history;
}

void packetc2w_multitexas_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5109;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_multitexas_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_multitexas_history];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_multitexas_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_multitexas_history];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_multitexas_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_multitexas_history];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_multitexas_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_multitexas_history];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_multitexas_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_multitexas_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_multitexas_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_multitexas_history::MergeFrom(const packetc2w_multitexas_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_multitexas_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_multitexas_history::CopyFrom(const packetc2w_multitexas_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_multitexas_history::IsInitialized() const {

  return true;
}

void packetc2w_multitexas_history::Swap(packetc2w_multitexas_history* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_multitexas_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_multitexas_history_descriptor_;
  metadata.reflection = packetc2w_multitexas_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_multitexas_history_result::kPacketIdFieldNumber;
const int packetw2c_multitexas_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetw2c_multitexas_history_result::packetw2c_multitexas_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_multitexas_history_result::InitAsDefaultInstance() {
}

packetw2c_multitexas_history_result::packetw2c_multitexas_history_result(const packetw2c_multitexas_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_multitexas_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7619;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_multitexas_history_result::~packetw2c_multitexas_history_result() {
  SharedDtor();
}

void packetw2c_multitexas_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_multitexas_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_multitexas_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_multitexas_history_result_descriptor_;
}

const packetw2c_multitexas_history_result& packetw2c_multitexas_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetw2c_multitexas_history_result* packetw2c_multitexas_history_result::default_instance_ = NULL;

packetw2c_multitexas_history_result* packetw2c_multitexas_history_result::New() const {
  return new packetw2c_multitexas_history_result;
}

void packetw2c_multitexas_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7619;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_multitexas_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_multitexas_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        break;
      }

      // repeated .client2world_protocols.msg_multitexas_room_history room_history = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_multitexas_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_multitexas_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_multitexas_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_multitexas_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_multitexas_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_multitexas_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_multitexas_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_multitexas_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client2world_protocols.msg_multitexas_room_history room_history = 2;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_multitexas_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_multitexas_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_multitexas_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_multitexas_history_result::MergeFrom(const packetw2c_multitexas_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_multitexas_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_multitexas_history_result::CopyFrom(const packetw2c_multitexas_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_multitexas_history_result::IsInitialized() const {

  return true;
}

void packetw2c_multitexas_history_result::Swap(packetw2c_multitexas_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_multitexas_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_multitexas_history_result_descriptor_;
  metadata.reflection = packetw2c_multitexas_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_shcd_history::kCardsTypeFieldNumber;
const int msg_shcd_history::kCardsValueFieldNumber;
#endif  // !_MSC_VER

msg_shcd_history::msg_shcd_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_shcd_history::InitAsDefaultInstance() {
}

msg_shcd_history::msg_shcd_history(const msg_shcd_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_shcd_history::SharedCtor() {
  _cached_size_ = 0;
  cards_type_ = 0;
  cards_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_shcd_history::~msg_shcd_history() {
  SharedDtor();
}

void msg_shcd_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_shcd_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_shcd_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_shcd_history_descriptor_;
}

const msg_shcd_history& msg_shcd_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

msg_shcd_history* msg_shcd_history::default_instance_ = NULL;

msg_shcd_history* msg_shcd_history::New() const {
  return new msg_shcd_history;
}

void msg_shcd_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cards_type_ = 0;
    cards_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_shcd_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cards_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cards_type_)));
          set_has_cards_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards_value;
        break;
      }

      // optional int32 cards_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cards_value_)));
          set_has_cards_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_shcd_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cards_type = 1;
  if (has_cards_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cards_type(), output);
  }

  // optional int32 cards_value = 2;
  if (has_cards_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cards_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_shcd_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cards_type = 1;
  if (has_cards_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cards_type(), target);
  }

  // optional int32 cards_value = 2;
  if (has_cards_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cards_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_shcd_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cards_type = 1;
    if (has_cards_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cards_type());
    }

    // optional int32 cards_value = 2;
    if (has_cards_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cards_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_shcd_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_shcd_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_shcd_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_shcd_history::MergeFrom(const msg_shcd_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cards_type()) {
      set_cards_type(from.cards_type());
    }
    if (from.has_cards_value()) {
      set_cards_value(from.cards_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_shcd_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_shcd_history::CopyFrom(const msg_shcd_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_shcd_history::IsInitialized() const {

  return true;
}

void msg_shcd_history::Swap(msg_shcd_history* other) {
  if (other != this) {
    std::swap(cards_type_, other->cards_type_);
    std::swap(cards_value_, other->cards_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_shcd_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_shcd_history_descriptor_;
  metadata.reflection = msg_shcd_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_shcd_room_history::kRoomIdFieldNumber;
const int msg_shcd_room_history::kHistoryListFieldNumber;
#endif  // !_MSC_VER

msg_shcd_room_history::msg_shcd_room_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_shcd_room_history::InitAsDefaultInstance() {
}

msg_shcd_room_history::msg_shcd_room_history(const msg_shcd_room_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_shcd_room_history::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_shcd_room_history::~msg_shcd_room_history() {
  SharedDtor();
}

void msg_shcd_room_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_shcd_room_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_shcd_room_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_shcd_room_history_descriptor_;
}

const msg_shcd_room_history& msg_shcd_room_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

msg_shcd_room_history* msg_shcd_room_history::default_instance_ = NULL;

msg_shcd_room_history* msg_shcd_room_history::New() const {
  return new msg_shcd_room_history;
}

void msg_shcd_room_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
  }
  history_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_shcd_room_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_history_list;
        break;
      }

      // repeated .client2world_protocols.msg_shcd_history history_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_history_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_shcd_room_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // repeated .client2world_protocols.msg_shcd_history history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->history_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_shcd_room_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // repeated .client2world_protocols.msg_shcd_history history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->history_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_shcd_room_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  // repeated .client2world_protocols.msg_shcd_history history_list = 2;
  total_size += 1 * this->history_list_size();
  for (int i = 0; i < this->history_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_shcd_room_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_shcd_room_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_shcd_room_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_shcd_room_history::MergeFrom(const msg_shcd_room_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_list_.MergeFrom(from.history_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_shcd_room_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_shcd_room_history::CopyFrom(const msg_shcd_room_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_shcd_room_history::IsInitialized() const {

  return true;
}

void msg_shcd_room_history::Swap(msg_shcd_room_history* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    history_list_.Swap(&other->history_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_shcd_room_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_shcd_room_history_descriptor_;
  metadata.reflection = msg_shcd_room_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_shcd_history::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_shcd_history::packetc2w_shcd_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_shcd_history::InitAsDefaultInstance() {
}

packetc2w_shcd_history::packetc2w_shcd_history(const packetc2w_shcd_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_shcd_history::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5110;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_shcd_history::~packetc2w_shcd_history() {
  SharedDtor();
}

void packetc2w_shcd_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_shcd_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_shcd_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_shcd_history_descriptor_;
}

const packetc2w_shcd_history& packetc2w_shcd_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetc2w_shcd_history* packetc2w_shcd_history::default_instance_ = NULL;

packetc2w_shcd_history* packetc2w_shcd_history::New() const {
  return new packetc2w_shcd_history;
}

void packetc2w_shcd_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5110;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_shcd_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_shcd_history];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_shcd_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_shcd_history];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_shcd_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_shcd_history];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_shcd_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_shcd_history];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_shcd_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_shcd_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_shcd_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_shcd_history::MergeFrom(const packetc2w_shcd_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_shcd_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_shcd_history::CopyFrom(const packetc2w_shcd_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_shcd_history::IsInitialized() const {

  return true;
}

void packetc2w_shcd_history::Swap(packetc2w_shcd_history* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_shcd_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_shcd_history_descriptor_;
  metadata.reflection = packetc2w_shcd_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_shcd_history_result::kPacketIdFieldNumber;
const int packetw2c_shcd_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetw2c_shcd_history_result::packetw2c_shcd_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_shcd_history_result::InitAsDefaultInstance() {
}

packetw2c_shcd_history_result::packetw2c_shcd_history_result(const packetw2c_shcd_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_shcd_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7620;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_shcd_history_result::~packetw2c_shcd_history_result() {
  SharedDtor();
}

void packetw2c_shcd_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_shcd_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_shcd_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_shcd_history_result_descriptor_;
}

const packetw2c_shcd_history_result& packetw2c_shcd_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetw2c_shcd_history_result* packetw2c_shcd_history_result::default_instance_ = NULL;

packetw2c_shcd_history_result* packetw2c_shcd_history_result::New() const {
  return new packetw2c_shcd_history_result;
}

void packetw2c_shcd_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7620;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_shcd_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_shcd_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        break;
      }

      // repeated .client2world_protocols.msg_shcd_room_history room_history = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_shcd_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_shcd_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_shcd_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_shcd_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_shcd_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_shcd_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_shcd_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_shcd_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client2world_protocols.msg_shcd_room_history room_history = 2;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_shcd_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_shcd_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_shcd_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_shcd_history_result::MergeFrom(const packetw2c_shcd_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_shcd_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_shcd_history_result::CopyFrom(const packetw2c_shcd_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_shcd_history_result::IsInitialized() const {

  return true;
}

void packetw2c_shcd_history_result::Swap(packetw2c_shcd_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_shcd_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_shcd_history_result_descriptor_;
  metadata.reflection = packetw2c_shcd_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_benzbmw_room_history::kRoomIdFieldNumber;
const int msg_benzbmw_room_history::kHistoryListFieldNumber;
#endif  // !_MSC_VER

msg_benzbmw_room_history::msg_benzbmw_room_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_benzbmw_room_history::InitAsDefaultInstance() {
}

msg_benzbmw_room_history::msg_benzbmw_room_history(const msg_benzbmw_room_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_benzbmw_room_history::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_benzbmw_room_history::~msg_benzbmw_room_history() {
  SharedDtor();
}

void msg_benzbmw_room_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_benzbmw_room_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_benzbmw_room_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_benzbmw_room_history_descriptor_;
}

const msg_benzbmw_room_history& msg_benzbmw_room_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

msg_benzbmw_room_history* msg_benzbmw_room_history::default_instance_ = NULL;

msg_benzbmw_room_history* msg_benzbmw_room_history::New() const {
  return new msg_benzbmw_room_history;
}

void msg_benzbmw_room_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
  }
  history_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_benzbmw_room_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_history_list;
        break;
      }

      // repeated int32 history_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_history_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_history_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_history_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_benzbmw_room_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // repeated int32 history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->history_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_benzbmw_room_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // repeated int32 history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->history_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_benzbmw_room_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  // repeated int32 history_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->history_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->history_list(i));
    }
    total_size += 1 * this->history_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_benzbmw_room_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_benzbmw_room_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_benzbmw_room_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_benzbmw_room_history::MergeFrom(const msg_benzbmw_room_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_list_.MergeFrom(from.history_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_benzbmw_room_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_benzbmw_room_history::CopyFrom(const msg_benzbmw_room_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_benzbmw_room_history::IsInitialized() const {

  return true;
}

void msg_benzbmw_room_history::Swap(msg_benzbmw_room_history* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    history_list_.Swap(&other->history_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_benzbmw_room_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_benzbmw_room_history_descriptor_;
  metadata.reflection = msg_benzbmw_room_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_benzbmw_history::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_benzbmw_history::packetc2w_benzbmw_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_benzbmw_history::InitAsDefaultInstance() {
}

packetc2w_benzbmw_history::packetc2w_benzbmw_history(const packetc2w_benzbmw_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_benzbmw_history::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5112;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_benzbmw_history::~packetc2w_benzbmw_history() {
  SharedDtor();
}

void packetc2w_benzbmw_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_benzbmw_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_benzbmw_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_benzbmw_history_descriptor_;
}

const packetc2w_benzbmw_history& packetc2w_benzbmw_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetc2w_benzbmw_history* packetc2w_benzbmw_history::default_instance_ = NULL;

packetc2w_benzbmw_history* packetc2w_benzbmw_history::New() const {
  return new packetc2w_benzbmw_history;
}

void packetc2w_benzbmw_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5112;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_benzbmw_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_benzbmw_history];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_benzbmw_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_benzbmw_history];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_benzbmw_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_benzbmw_history];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_benzbmw_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_benzbmw_history];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_benzbmw_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_benzbmw_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_benzbmw_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_benzbmw_history::MergeFrom(const packetc2w_benzbmw_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_benzbmw_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_benzbmw_history::CopyFrom(const packetc2w_benzbmw_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_benzbmw_history::IsInitialized() const {

  return true;
}

void packetc2w_benzbmw_history::Swap(packetc2w_benzbmw_history* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_benzbmw_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_benzbmw_history_descriptor_;
  metadata.reflection = packetc2w_benzbmw_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_benzbmw_history_result::kPacketIdFieldNumber;
const int packetw2c_benzbmw_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetw2c_benzbmw_history_result::packetw2c_benzbmw_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_benzbmw_history_result::InitAsDefaultInstance() {
}

packetw2c_benzbmw_history_result::packetw2c_benzbmw_history_result(const packetw2c_benzbmw_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_benzbmw_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7623;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_benzbmw_history_result::~packetw2c_benzbmw_history_result() {
  SharedDtor();
}

void packetw2c_benzbmw_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_benzbmw_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_benzbmw_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_benzbmw_history_result_descriptor_;
}

const packetw2c_benzbmw_history_result& packetw2c_benzbmw_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetw2c_benzbmw_history_result* packetw2c_benzbmw_history_result::default_instance_ = NULL;

packetw2c_benzbmw_history_result* packetw2c_benzbmw_history_result::New() const {
  return new packetw2c_benzbmw_history_result;
}

void packetw2c_benzbmw_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7623;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_benzbmw_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_benzbmw_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        break;
      }

      // repeated .client2world_protocols.msg_benzbmw_room_history room_history = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_benzbmw_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_benzbmw_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_benzbmw_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_benzbmw_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_benzbmw_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_benzbmw_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_benzbmw_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_benzbmw_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client2world_protocols.msg_benzbmw_room_history room_history = 2;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_benzbmw_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_benzbmw_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_benzbmw_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_benzbmw_history_result::MergeFrom(const packetw2c_benzbmw_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_benzbmw_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_benzbmw_history_result::CopyFrom(const packetw2c_benzbmw_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_benzbmw_history_result::IsInitialized() const {

  return true;
}

void packetw2c_benzbmw_history_result::Swap(packetw2c_benzbmw_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_benzbmw_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_benzbmw_history_result_descriptor_;
  metadata.reflection = packetw2c_benzbmw_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_forestball_room_history::kRoomIdFieldNumber;
const int msg_forestball_room_history::kHistoryListFieldNumber;
#endif  // !_MSC_VER

msg_forestball_room_history::msg_forestball_room_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_forestball_room_history::InitAsDefaultInstance() {
}

msg_forestball_room_history::msg_forestball_room_history(const msg_forestball_room_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_forestball_room_history::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_forestball_room_history::~msg_forestball_room_history() {
  SharedDtor();
}

void msg_forestball_room_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_forestball_room_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_forestball_room_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_forestball_room_history_descriptor_;
}

const msg_forestball_room_history& msg_forestball_room_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

msg_forestball_room_history* msg_forestball_room_history::default_instance_ = NULL;

msg_forestball_room_history* msg_forestball_room_history::New() const {
  return new msg_forestball_room_history;
}

void msg_forestball_room_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
  }
  history_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_forestball_room_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_history_list;
        break;
      }

      // repeated int32 history_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_history_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_history_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_history_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_forestball_room_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // repeated int32 history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->history_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_forestball_room_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // repeated int32 history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->history_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_forestball_room_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  // repeated int32 history_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->history_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->history_list(i));
    }
    total_size += 1 * this->history_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_forestball_room_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_forestball_room_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_forestball_room_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_forestball_room_history::MergeFrom(const msg_forestball_room_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_list_.MergeFrom(from.history_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_forestball_room_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_forestball_room_history::CopyFrom(const msg_forestball_room_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_forestball_room_history::IsInitialized() const {

  return true;
}

void msg_forestball_room_history::Swap(msg_forestball_room_history* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    history_list_.Swap(&other->history_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_forestball_room_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_forestball_room_history_descriptor_;
  metadata.reflection = msg_forestball_room_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_forestball_history::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_forestball_history::packetc2w_forestball_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_forestball_history::InitAsDefaultInstance() {
}

packetc2w_forestball_history::packetc2w_forestball_history(const packetc2w_forestball_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_forestball_history::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5113;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_forestball_history::~packetc2w_forestball_history() {
  SharedDtor();
}

void packetc2w_forestball_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_forestball_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_forestball_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_forestball_history_descriptor_;
}

const packetc2w_forestball_history& packetc2w_forestball_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetc2w_forestball_history* packetc2w_forestball_history::default_instance_ = NULL;

packetc2w_forestball_history* packetc2w_forestball_history::New() const {
  return new packetc2w_forestball_history;
}

void packetc2w_forestball_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5113;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_forestball_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_forestball_history];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_forestball_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_forestball_history];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_forestball_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_forestball_history];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_forestball_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_forestball_history];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_forestball_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_forestball_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_forestball_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_forestball_history::MergeFrom(const packetc2w_forestball_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_forestball_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_forestball_history::CopyFrom(const packetc2w_forestball_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_forestball_history::IsInitialized() const {

  return true;
}

void packetc2w_forestball_history::Swap(packetc2w_forestball_history* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_forestball_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_forestball_history_descriptor_;
  metadata.reflection = packetc2w_forestball_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_forestball_history_result::kPacketIdFieldNumber;
const int packetw2c_forestball_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetw2c_forestball_history_result::packetw2c_forestball_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_forestball_history_result::InitAsDefaultInstance() {
}

packetw2c_forestball_history_result::packetw2c_forestball_history_result(const packetw2c_forestball_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_forestball_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7624;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_forestball_history_result::~packetw2c_forestball_history_result() {
  SharedDtor();
}

void packetw2c_forestball_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_forestball_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_forestball_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_forestball_history_result_descriptor_;
}

const packetw2c_forestball_history_result& packetw2c_forestball_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetw2c_forestball_history_result* packetw2c_forestball_history_result::default_instance_ = NULL;

packetw2c_forestball_history_result* packetw2c_forestball_history_result::New() const {
  return new packetw2c_forestball_history_result;
}

void packetw2c_forestball_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7624;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_forestball_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_forestball_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        break;
      }

      // repeated .client2world_protocols.msg_forestball_room_history room_history = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_forestball_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_forestball_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_forestball_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_forestball_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_forestball_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_forestball_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_forestball_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_forestball_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client2world_protocols.msg_forestball_room_history room_history = 2;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_forestball_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_forestball_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_forestball_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_forestball_history_result::MergeFrom(const packetw2c_forestball_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_forestball_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_forestball_history_result::CopyFrom(const packetw2c_forestball_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_forestball_history_result::IsInitialized() const {

  return true;
}

void packetw2c_forestball_history_result::Swap(packetw2c_forestball_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_forestball_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_forestball_history_result_descriptor_;
  metadata.reflection = packetw2c_forestball_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fruits_room_history::kRoomIdFieldNumber;
const int msg_fruits_room_history::kHistoryListFieldNumber;
#endif  // !_MSC_VER

msg_fruits_room_history::msg_fruits_room_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fruits_room_history::InitAsDefaultInstance() {
}

msg_fruits_room_history::msg_fruits_room_history(const msg_fruits_room_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fruits_room_history::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fruits_room_history::~msg_fruits_room_history() {
  SharedDtor();
}

void msg_fruits_room_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fruits_room_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fruits_room_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fruits_room_history_descriptor_;
}

const msg_fruits_room_history& msg_fruits_room_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

msg_fruits_room_history* msg_fruits_room_history::default_instance_ = NULL;

msg_fruits_room_history* msg_fruits_room_history::New() const {
  return new msg_fruits_room_history;
}

void msg_fruits_room_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
  }
  history_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fruits_room_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_history_list;
        break;
      }

      // repeated int32 history_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_history_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_history_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_history_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fruits_room_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // repeated int32 history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->history_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fruits_room_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // repeated int32 history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->history_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fruits_room_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  // repeated int32 history_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->history_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->history_list(i));
    }
    total_size += 1 * this->history_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fruits_room_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fruits_room_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fruits_room_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fruits_room_history::MergeFrom(const msg_fruits_room_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_list_.MergeFrom(from.history_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fruits_room_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fruits_room_history::CopyFrom(const msg_fruits_room_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fruits_room_history::IsInitialized() const {

  return true;
}

void msg_fruits_room_history::Swap(msg_fruits_room_history* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    history_list_.Swap(&other->history_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fruits_room_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fruits_room_history_descriptor_;
  metadata.reflection = msg_fruits_room_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_fruits_history::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_fruits_history::packetc2w_fruits_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_fruits_history::InitAsDefaultInstance() {
}

packetc2w_fruits_history::packetc2w_fruits_history(const packetc2w_fruits_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_fruits_history::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5114;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_fruits_history::~packetc2w_fruits_history() {
  SharedDtor();
}

void packetc2w_fruits_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_fruits_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_fruits_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_fruits_history_descriptor_;
}

const packetc2w_fruits_history& packetc2w_fruits_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetc2w_fruits_history* packetc2w_fruits_history::default_instance_ = NULL;

packetc2w_fruits_history* packetc2w_fruits_history::New() const {
  return new packetc2w_fruits_history;
}

void packetc2w_fruits_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5114;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_fruits_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_fruits_history];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_fruits_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_fruits_history];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_fruits_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_fruits_history];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_fruits_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_fruits_history];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_fruits_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_fruits_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_fruits_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_fruits_history::MergeFrom(const packetc2w_fruits_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_fruits_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_fruits_history::CopyFrom(const packetc2w_fruits_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_fruits_history::IsInitialized() const {

  return true;
}

void packetc2w_fruits_history::Swap(packetc2w_fruits_history* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_fruits_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_fruits_history_descriptor_;
  metadata.reflection = packetc2w_fruits_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_fruits_history_result::kPacketIdFieldNumber;
const int packetw2c_fruits_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetw2c_fruits_history_result::packetw2c_fruits_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_fruits_history_result::InitAsDefaultInstance() {
}

packetw2c_fruits_history_result::packetw2c_fruits_history_result(const packetw2c_fruits_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_fruits_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7625;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_fruits_history_result::~packetw2c_fruits_history_result() {
  SharedDtor();
}

void packetw2c_fruits_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_fruits_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_fruits_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_fruits_history_result_descriptor_;
}

const packetw2c_fruits_history_result& packetw2c_fruits_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetw2c_fruits_history_result* packetw2c_fruits_history_result::default_instance_ = NULL;

packetw2c_fruits_history_result* packetw2c_fruits_history_result::New() const {
  return new packetw2c_fruits_history_result;
}

void packetw2c_fruits_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7625;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_fruits_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_fruits_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        break;
      }

      // repeated .client2world_protocols.msg_fruits_room_history room_history = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_fruits_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_fruits_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_fruits_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_fruits_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_fruits_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_fruits_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_fruits_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_fruits_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client2world_protocols.msg_fruits_room_history room_history = 2;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_fruits_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_fruits_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_fruits_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_fruits_history_result::MergeFrom(const packetw2c_fruits_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_fruits_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_fruits_history_result::CopyFrom(const packetw2c_fruits_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_fruits_history_result::IsInitialized() const {

  return true;
}

void packetw2c_fruits_history_result::Swap(packetw2c_fruits_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_fruits_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_fruits_history_result_descriptor_;
  metadata.reflection = packetw2c_fruits_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_lhd_room_history::kRoomIdFieldNumber;
const int msg_lhd_room_history::kTotalCountFieldNumber;
const int msg_lhd_room_history::kWinCountsFieldNumber;
const int msg_lhd_room_history::kLoseCountsFieldNumber;
const int msg_lhd_room_history::kHistoryInfosFieldNumber;
#endif  // !_MSC_VER

msg_lhd_room_history::msg_lhd_room_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_lhd_room_history::InitAsDefaultInstance() {
}

msg_lhd_room_history::msg_lhd_room_history(const msg_lhd_room_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_lhd_room_history::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  total_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_lhd_room_history::~msg_lhd_room_history() {
  SharedDtor();
}

void msg_lhd_room_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_lhd_room_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_lhd_room_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_lhd_room_history_descriptor_;
}

const msg_lhd_room_history& msg_lhd_room_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

msg_lhd_room_history* msg_lhd_room_history::default_instance_ = NULL;

msg_lhd_room_history* msg_lhd_room_history::New() const {
  return new msg_lhd_room_history;
}

void msg_lhd_room_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
    total_count_ = 0;
  }
  win_counts_.Clear();
  lose_counts_.Clear();
  history_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_lhd_room_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_count;
        break;
      }

      // optional int32 total_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_counts;
        break;
      }

      // repeated int32 win_counts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_win_counts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_win_counts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_counts;
        if (input->ExpectTag(32)) goto parse_lose_counts;
        break;
      }

      // repeated int32 lose_counts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_lose_counts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lose_counts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lose_counts;
        if (input->ExpectTag(40)) goto parse_history_infos;
        break;
      }

      // repeated int32 history_infos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_infos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_history_infos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_history_infos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_history_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_lhd_room_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // optional int32 total_count = 2;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_count(), output);
  }

  // repeated int32 win_counts = 3;
  for (int i = 0; i < this->win_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->win_counts(i), output);
  }

  // repeated int32 lose_counts = 4;
  for (int i = 0; i < this->lose_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->lose_counts(i), output);
  }

  // repeated int32 history_infos = 5;
  for (int i = 0; i < this->history_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->history_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_lhd_room_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // optional int32 total_count = 2;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_count(), target);
  }

  // repeated int32 win_counts = 3;
  for (int i = 0; i < this->win_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->win_counts(i), target);
  }

  // repeated int32 lose_counts = 4;
  for (int i = 0; i < this->lose_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->lose_counts(i), target);
  }

  // repeated int32 history_infos = 5;
  for (int i = 0; i < this->history_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->history_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_lhd_room_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int32 total_count = 2;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_count());
    }

  }
  // repeated int32 win_counts = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->win_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->win_counts(i));
    }
    total_size += 1 * this->win_counts_size() + data_size;
  }

  // repeated int32 lose_counts = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->lose_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lose_counts(i));
    }
    total_size += 1 * this->lose_counts_size() + data_size;
  }

  // repeated int32 history_infos = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->history_infos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->history_infos(i));
    }
    total_size += 1 * this->history_infos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_lhd_room_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_lhd_room_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_lhd_room_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_lhd_room_history::MergeFrom(const msg_lhd_room_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  win_counts_.MergeFrom(from.win_counts_);
  lose_counts_.MergeFrom(from.lose_counts_);
  history_infos_.MergeFrom(from.history_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_lhd_room_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_lhd_room_history::CopyFrom(const msg_lhd_room_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_lhd_room_history::IsInitialized() const {

  return true;
}

void msg_lhd_room_history::Swap(msg_lhd_room_history* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(total_count_, other->total_count_);
    win_counts_.Swap(&other->win_counts_);
    lose_counts_.Swap(&other->lose_counts_);
    history_infos_.Swap(&other->history_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_lhd_room_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_lhd_room_history_descriptor_;
  metadata.reflection = msg_lhd_room_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_lhd_history::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_lhd_history::packetc2w_lhd_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_lhd_history::InitAsDefaultInstance() {
}

packetc2w_lhd_history::packetc2w_lhd_history(const packetc2w_lhd_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_lhd_history::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5115;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_lhd_history::~packetc2w_lhd_history() {
  SharedDtor();
}

void packetc2w_lhd_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_lhd_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_lhd_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_lhd_history_descriptor_;
}

const packetc2w_lhd_history& packetc2w_lhd_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetc2w_lhd_history* packetc2w_lhd_history::default_instance_ = NULL;

packetc2w_lhd_history* packetc2w_lhd_history::New() const {
  return new packetc2w_lhd_history;
}

void packetc2w_lhd_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5115;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_lhd_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_lhd_history];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_lhd_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_lhd_history];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_lhd_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_lhd_history];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_lhd_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_lhd_history];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_lhd_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_lhd_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_lhd_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_lhd_history::MergeFrom(const packetc2w_lhd_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_lhd_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_lhd_history::CopyFrom(const packetc2w_lhd_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_lhd_history::IsInitialized() const {

  return true;
}

void packetc2w_lhd_history::Swap(packetc2w_lhd_history* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_lhd_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_lhd_history_descriptor_;
  metadata.reflection = packetc2w_lhd_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_lhd_history_result::kPacketIdFieldNumber;
const int packetw2c_lhd_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetw2c_lhd_history_result::packetw2c_lhd_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_lhd_history_result::InitAsDefaultInstance() {
}

packetw2c_lhd_history_result::packetw2c_lhd_history_result(const packetw2c_lhd_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_lhd_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7626;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_lhd_history_result::~packetw2c_lhd_history_result() {
  SharedDtor();
}

void packetw2c_lhd_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_lhd_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_lhd_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_lhd_history_result_descriptor_;
}

const packetw2c_lhd_history_result& packetw2c_lhd_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetw2c_lhd_history_result* packetw2c_lhd_history_result::default_instance_ = NULL;

packetw2c_lhd_history_result* packetw2c_lhd_history_result::New() const {
  return new packetw2c_lhd_history_result;
}

void packetw2c_lhd_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7626;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_lhd_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_lhd_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        break;
      }

      // repeated .client2world_protocols.msg_lhd_room_history room_history = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_lhd_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_lhd_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_lhd_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_lhd_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_lhd_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_lhd_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_lhd_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_lhd_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client2world_protocols.msg_lhd_room_history room_history = 2;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_lhd_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_lhd_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_lhd_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_lhd_history_result::MergeFrom(const packetw2c_lhd_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_lhd_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_lhd_history_result::CopyFrom(const packetw2c_lhd_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_lhd_history_result::IsInitialized() const {

  return true;
}

void packetw2c_lhd_history_result::Swap(packetw2c_lhd_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_lhd_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_lhd_history_result_descriptor_;
  metadata.reflection = packetw2c_lhd_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_multiredblack_room_history::kRoomIdFieldNumber;
const int msg_multiredblack_room_history::kHistoryInfosFieldNumber;
#endif  // !_MSC_VER

msg_multiredblack_room_history::msg_multiredblack_room_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_multiredblack_room_history::InitAsDefaultInstance() {
}

msg_multiredblack_room_history::msg_multiredblack_room_history(const msg_multiredblack_room_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_multiredblack_room_history::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_multiredblack_room_history::~msg_multiredblack_room_history() {
  SharedDtor();
}

void msg_multiredblack_room_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_multiredblack_room_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_multiredblack_room_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_multiredblack_room_history_descriptor_;
}

const msg_multiredblack_room_history& msg_multiredblack_room_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

msg_multiredblack_room_history* msg_multiredblack_room_history::default_instance_ = NULL;

msg_multiredblack_room_history* msg_multiredblack_room_history::New() const {
  return new msg_multiredblack_room_history;
}

void msg_multiredblack_room_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
  }
  history_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_multiredblack_room_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_history_infos;
        break;
      }

      // repeated int32 history_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_infos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_history_infos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_history_infos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_history_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_multiredblack_room_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // repeated int32 history_infos = 2;
  for (int i = 0; i < this->history_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->history_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_multiredblack_room_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // repeated int32 history_infos = 2;
  for (int i = 0; i < this->history_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->history_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_multiredblack_room_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  // repeated int32 history_infos = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->history_infos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->history_infos(i));
    }
    total_size += 1 * this->history_infos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_multiredblack_room_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_multiredblack_room_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_multiredblack_room_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_multiredblack_room_history::MergeFrom(const msg_multiredblack_room_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_infos_.MergeFrom(from.history_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_multiredblack_room_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_multiredblack_room_history::CopyFrom(const msg_multiredblack_room_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_multiredblack_room_history::IsInitialized() const {

  return true;
}

void msg_multiredblack_room_history::Swap(msg_multiredblack_room_history* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    history_infos_.Swap(&other->history_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_multiredblack_room_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_multiredblack_room_history_descriptor_;
  metadata.reflection = msg_multiredblack_room_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_multiredblack_history::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_multiredblack_history::packetc2w_multiredblack_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_multiredblack_history::InitAsDefaultInstance() {
}

packetc2w_multiredblack_history::packetc2w_multiredblack_history(const packetc2w_multiredblack_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_multiredblack_history::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5116;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_multiredblack_history::~packetc2w_multiredblack_history() {
  SharedDtor();
}

void packetc2w_multiredblack_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_multiredblack_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_multiredblack_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_multiredblack_history_descriptor_;
}

const packetc2w_multiredblack_history& packetc2w_multiredblack_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetc2w_multiredblack_history* packetc2w_multiredblack_history::default_instance_ = NULL;

packetc2w_multiredblack_history* packetc2w_multiredblack_history::New() const {
  return new packetc2w_multiredblack_history;
}

void packetc2w_multiredblack_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5116;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_multiredblack_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_multiredblack_history];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_multiredblack_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_multiredblack_history];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_multiredblack_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_multiredblack_history];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_multiredblack_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_multiredblack_history];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_multiredblack_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_multiredblack_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_multiredblack_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_multiredblack_history::MergeFrom(const packetc2w_multiredblack_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_multiredblack_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_multiredblack_history::CopyFrom(const packetc2w_multiredblack_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_multiredblack_history::IsInitialized() const {

  return true;
}

void packetc2w_multiredblack_history::Swap(packetc2w_multiredblack_history* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_multiredblack_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_multiredblack_history_descriptor_;
  metadata.reflection = packetc2w_multiredblack_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_multiredblack_history_result::kPacketIdFieldNumber;
const int packetw2c_multiredblack_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetw2c_multiredblack_history_result::packetw2c_multiredblack_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_multiredblack_history_result::InitAsDefaultInstance() {
}

packetw2c_multiredblack_history_result::packetw2c_multiredblack_history_result(const packetw2c_multiredblack_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_multiredblack_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7627;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_multiredblack_history_result::~packetw2c_multiredblack_history_result() {
  SharedDtor();
}

void packetw2c_multiredblack_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_multiredblack_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_multiredblack_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_multiredblack_history_result_descriptor_;
}

const packetw2c_multiredblack_history_result& packetw2c_multiredblack_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetw2c_multiredblack_history_result* packetw2c_multiredblack_history_result::default_instance_ = NULL;

packetw2c_multiredblack_history_result* packetw2c_multiredblack_history_result::New() const {
  return new packetw2c_multiredblack_history_result;
}

void packetw2c_multiredblack_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7627;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_multiredblack_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_multiredblack_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        break;
      }

      // repeated .client2world_protocols.msg_multiredblack_room_history room_history = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_multiredblack_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_multiredblack_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_multiredblack_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_multiredblack_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_multiredblack_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_multiredblack_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_multiredblack_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_multiredblack_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client2world_protocols.msg_multiredblack_room_history room_history = 2;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_multiredblack_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_multiredblack_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_multiredblack_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_multiredblack_history_result::MergeFrom(const packetw2c_multiredblack_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_multiredblack_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_multiredblack_history_result::CopyFrom(const packetw2c_multiredblack_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_multiredblack_history_result::IsInitialized() const {

  return true;
}

void packetw2c_multiredblack_history_result::Swap(packetw2c_multiredblack_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_multiredblack_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_multiredblack_history_result_descriptor_;
  metadata.reflection = packetw2c_multiredblack_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int happySupremacy_history_info::kIsForwardWinFieldNumber;
const int happySupremacy_history_info::kIsReverseWinFieldNumber;
const int happySupremacy_history_info::kIsOppositeWinFieldNumber;
const int happySupremacy_history_info::kCardsFieldNumber;
const int happySupremacy_history_info::kCardsTypeFieldNumber;
#endif  // !_MSC_VER

happySupremacy_history_info::happySupremacy_history_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void happySupremacy_history_info::InitAsDefaultInstance() {
}

happySupremacy_history_info::happySupremacy_history_info(const happySupremacy_history_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void happySupremacy_history_info::SharedCtor() {
  _cached_size_ = 0;
  is_forward_win_ = false;
  is_reverse_win_ = false;
  is_opposite_win_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

happySupremacy_history_info::~happySupremacy_history_info() {
  SharedDtor();
}

void happySupremacy_history_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void happySupremacy_history_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* happySupremacy_history_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return happySupremacy_history_info_descriptor_;
}

const happySupremacy_history_info& happySupremacy_history_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

happySupremacy_history_info* happySupremacy_history_info::default_instance_ = NULL;

happySupremacy_history_info* happySupremacy_history_info::New() const {
  return new happySupremacy_history_info;
}

void happySupremacy_history_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_forward_win_ = false;
    is_reverse_win_ = false;
    is_opposite_win_ = false;
  }
  cards_.Clear();
  cards_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool happySupremacy_history_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_forward_win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_forward_win_)));
          set_has_is_forward_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_reverse_win;
        break;
      }

      // optional bool is_reverse_win = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_reverse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reverse_win_)));
          set_has_is_reverse_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_opposite_win;
        break;
      }

      // optional bool is_opposite_win = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_opposite_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_opposite_win_)));
          set_has_is_opposite_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cards;
        if (input->ExpectTag(40)) goto parse_cards_type;
        break;
      }

      // repeated int32 cards_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_cards_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cards_type;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void happySupremacy_history_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_forward_win = 1;
  if (has_is_forward_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_forward_win(), output);
  }

  // optional bool is_reverse_win = 2;
  if (has_is_reverse_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_reverse_win(), output);
  }

  // optional bool is_opposite_win = 3;
  if (has_is_opposite_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_opposite_win(), output);
  }

  // repeated int32 cards = 4;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->cards(i), output);
  }

  // repeated int32 cards_type = 5;
  for (int i = 0; i < this->cards_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->cards_type(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* happySupremacy_history_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_forward_win = 1;
  if (has_is_forward_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_forward_win(), target);
  }

  // optional bool is_reverse_win = 2;
  if (has_is_reverse_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_reverse_win(), target);
  }

  // optional bool is_opposite_win = 3;
  if (has_is_opposite_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_opposite_win(), target);
  }

  // repeated int32 cards = 4;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->cards(i), target);
  }

  // repeated int32 cards_type = 5;
  for (int i = 0; i < this->cards_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->cards_type(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int happySupremacy_history_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_forward_win = 1;
    if (has_is_forward_win()) {
      total_size += 1 + 1;
    }

    // optional bool is_reverse_win = 2;
    if (has_is_reverse_win()) {
      total_size += 1 + 1;
    }

    // optional bool is_opposite_win = 3;
    if (has_is_opposite_win()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 cards = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  // repeated int32 cards_type = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards_type(i));
    }
    total_size += 1 * this->cards_type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void happySupremacy_history_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const happySupremacy_history_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const happySupremacy_history_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void happySupremacy_history_info::MergeFrom(const happySupremacy_history_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  cards_type_.MergeFrom(from.cards_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_forward_win()) {
      set_is_forward_win(from.is_forward_win());
    }
    if (from.has_is_reverse_win()) {
      set_is_reverse_win(from.is_reverse_win());
    }
    if (from.has_is_opposite_win()) {
      set_is_opposite_win(from.is_opposite_win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void happySupremacy_history_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void happySupremacy_history_info::CopyFrom(const happySupremacy_history_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool happySupremacy_history_info::IsInitialized() const {

  return true;
}

void happySupremacy_history_info::Swap(happySupremacy_history_info* other) {
  if (other != this) {
    std::swap(is_forward_win_, other->is_forward_win_);
    std::swap(is_reverse_win_, other->is_reverse_win_);
    std::swap(is_opposite_win_, other->is_opposite_win_);
    cards_.Swap(&other->cards_);
    cards_type_.Swap(&other->cards_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata happySupremacy_history_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = happySupremacy_history_info_descriptor_;
  metadata.reflection = happySupremacy_history_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_happySupremacy_room_history::kRoomIdFieldNumber;
const int msg_happySupremacy_room_history::kCardsInfoFieldNumber;
#endif  // !_MSC_VER

msg_happySupremacy_room_history::msg_happySupremacy_room_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_happySupremacy_room_history::InitAsDefaultInstance() {
}

msg_happySupremacy_room_history::msg_happySupremacy_room_history(const msg_happySupremacy_room_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_happySupremacy_room_history::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_happySupremacy_room_history::~msg_happySupremacy_room_history() {
  SharedDtor();
}

void msg_happySupremacy_room_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_happySupremacy_room_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_happySupremacy_room_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_happySupremacy_room_history_descriptor_;
}

const msg_happySupremacy_room_history& msg_happySupremacy_room_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

msg_happySupremacy_room_history* msg_happySupremacy_room_history::default_instance_ = NULL;

msg_happySupremacy_room_history* msg_happySupremacy_room_history::New() const {
  return new msg_happySupremacy_room_history;
}

void msg_happySupremacy_room_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
  }
  cards_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_happySupremacy_room_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cards_info;
        break;
      }

      // repeated .client2world_protocols.happySupremacy_history_info cards_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cards_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cards_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_happySupremacy_room_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // repeated .client2world_protocols.happySupremacy_history_info cards_info = 2;
  for (int i = 0; i < this->cards_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cards_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_happySupremacy_room_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // repeated .client2world_protocols.happySupremacy_history_info cards_info = 2;
  for (int i = 0; i < this->cards_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cards_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_happySupremacy_room_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  // repeated .client2world_protocols.happySupremacy_history_info cards_info = 2;
  total_size += 1 * this->cards_info_size();
  for (int i = 0; i < this->cards_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_happySupremacy_room_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_happySupremacy_room_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_happySupremacy_room_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_happySupremacy_room_history::MergeFrom(const msg_happySupremacy_room_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_info_.MergeFrom(from.cards_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_happySupremacy_room_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_happySupremacy_room_history::CopyFrom(const msg_happySupremacy_room_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_happySupremacy_room_history::IsInitialized() const {

  return true;
}

void msg_happySupremacy_room_history::Swap(msg_happySupremacy_room_history* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    cards_info_.Swap(&other->cards_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_happySupremacy_room_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_happySupremacy_room_history_descriptor_;
  metadata.reflection = msg_happySupremacy_room_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_happySupremacy_history::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_happySupremacy_history::packetc2w_happySupremacy_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_happySupremacy_history::InitAsDefaultInstance() {
}

packetc2w_happySupremacy_history::packetc2w_happySupremacy_history(const packetc2w_happySupremacy_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_happySupremacy_history::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5117;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_happySupremacy_history::~packetc2w_happySupremacy_history() {
  SharedDtor();
}

void packetc2w_happySupremacy_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_happySupremacy_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_happySupremacy_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_happySupremacy_history_descriptor_;
}

const packetc2w_happySupremacy_history& packetc2w_happySupremacy_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetc2w_happySupremacy_history* packetc2w_happySupremacy_history::default_instance_ = NULL;

packetc2w_happySupremacy_history* packetc2w_happySupremacy_history::New() const {
  return new packetc2w_happySupremacy_history;
}

void packetc2w_happySupremacy_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5117;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_happySupremacy_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_happySupremacy_history];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_happySupremacy_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_happySupremacy_history];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_happySupremacy_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_happySupremacy_history];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_happySupremacy_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_happySupremacy_history];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_happySupremacy_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_happySupremacy_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_happySupremacy_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_happySupremacy_history::MergeFrom(const packetc2w_happySupremacy_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_happySupremacy_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_happySupremacy_history::CopyFrom(const packetc2w_happySupremacy_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_happySupremacy_history::IsInitialized() const {

  return true;
}

void packetc2w_happySupremacy_history::Swap(packetc2w_happySupremacy_history* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_happySupremacy_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_happySupremacy_history_descriptor_;
  metadata.reflection = packetc2w_happySupremacy_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_happySupremacy_history_result::kPacketIdFieldNumber;
const int packetw2c_happySupremacy_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetw2c_happySupremacy_history_result::packetw2c_happySupremacy_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_happySupremacy_history_result::InitAsDefaultInstance() {
}

packetw2c_happySupremacy_history_result::packetw2c_happySupremacy_history_result(const packetw2c_happySupremacy_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_happySupremacy_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7628;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_happySupremacy_history_result::~packetw2c_happySupremacy_history_result() {
  SharedDtor();
}

void packetw2c_happySupremacy_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_happySupremacy_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_happySupremacy_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_happySupremacy_history_result_descriptor_;
}

const packetw2c_happySupremacy_history_result& packetw2c_happySupremacy_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetw2c_happySupremacy_history_result* packetw2c_happySupremacy_history_result::default_instance_ = NULL;

packetw2c_happySupremacy_history_result* packetw2c_happySupremacy_history_result::New() const {
  return new packetw2c_happySupremacy_history_result;
}

void packetw2c_happySupremacy_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7628;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_happySupremacy_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_happySupremacy_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        break;
      }

      // repeated .client2world_protocols.msg_happySupremacy_room_history room_history = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_happySupremacy_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_happySupremacy_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_happySupremacy_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_happySupremacy_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_happySupremacy_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_happySupremacy_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_happySupremacy_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_happySupremacy_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client2world_protocols.msg_happySupremacy_room_history room_history = 2;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_happySupremacy_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_happySupremacy_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_happySupremacy_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_happySupremacy_history_result::MergeFrom(const packetw2c_happySupremacy_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_happySupremacy_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_happySupremacy_history_result::CopyFrom(const packetw2c_happySupremacy_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_happySupremacy_history_result::IsInitialized() const {

  return true;
}

void packetw2c_happySupremacy_history_result::Swap(packetw2c_happySupremacy_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_happySupremacy_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_happySupremacy_history_result_descriptor_;
  metadata.reflection = packetw2c_happySupremacy_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_carsmagnate_room_history::kRoomIdFieldNumber;
const int msg_carsmagnate_room_history::kHistoryListFieldNumber;
#endif  // !_MSC_VER

msg_carsmagnate_room_history::msg_carsmagnate_room_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_carsmagnate_room_history::InitAsDefaultInstance() {
}

msg_carsmagnate_room_history::msg_carsmagnate_room_history(const msg_carsmagnate_room_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_carsmagnate_room_history::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_carsmagnate_room_history::~msg_carsmagnate_room_history() {
  SharedDtor();
}

void msg_carsmagnate_room_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_carsmagnate_room_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_carsmagnate_room_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_carsmagnate_room_history_descriptor_;
}

const msg_carsmagnate_room_history& msg_carsmagnate_room_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

msg_carsmagnate_room_history* msg_carsmagnate_room_history::default_instance_ = NULL;

msg_carsmagnate_room_history* msg_carsmagnate_room_history::New() const {
  return new msg_carsmagnate_room_history;
}

void msg_carsmagnate_room_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
  }
  history_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_carsmagnate_room_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_history_list;
        break;
      }

      // repeated int32 history_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_history_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_history_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_history_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_carsmagnate_room_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // repeated int32 history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->history_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_carsmagnate_room_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // repeated int32 history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->history_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_carsmagnate_room_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  // repeated int32 history_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->history_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->history_list(i));
    }
    total_size += 1 * this->history_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_carsmagnate_room_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_carsmagnate_room_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_carsmagnate_room_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_carsmagnate_room_history::MergeFrom(const msg_carsmagnate_room_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_list_.MergeFrom(from.history_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_carsmagnate_room_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_carsmagnate_room_history::CopyFrom(const msg_carsmagnate_room_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_carsmagnate_room_history::IsInitialized() const {

  return true;
}

void msg_carsmagnate_room_history::Swap(msg_carsmagnate_room_history* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    history_list_.Swap(&other->history_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_carsmagnate_room_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_carsmagnate_room_history_descriptor_;
  metadata.reflection = msg_carsmagnate_room_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_carsmagnate_history::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_carsmagnate_history::packetc2w_carsmagnate_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_carsmagnate_history::InitAsDefaultInstance() {
}

packetc2w_carsmagnate_history::packetc2w_carsmagnate_history(const packetc2w_carsmagnate_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_carsmagnate_history::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5118;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_carsmagnate_history::~packetc2w_carsmagnate_history() {
  SharedDtor();
}

void packetc2w_carsmagnate_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_carsmagnate_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_carsmagnate_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_carsmagnate_history_descriptor_;
}

const packetc2w_carsmagnate_history& packetc2w_carsmagnate_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetc2w_carsmagnate_history* packetc2w_carsmagnate_history::default_instance_ = NULL;

packetc2w_carsmagnate_history* packetc2w_carsmagnate_history::New() const {
  return new packetc2w_carsmagnate_history;
}

void packetc2w_carsmagnate_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5118;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_carsmagnate_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_carsmagnate_history];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_carsmagnate_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_carsmagnate_history];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_carsmagnate_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_carsmagnate_history];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_carsmagnate_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_carsmagnate_history];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_carsmagnate_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_carsmagnate_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_carsmagnate_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_carsmagnate_history::MergeFrom(const packetc2w_carsmagnate_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_carsmagnate_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_carsmagnate_history::CopyFrom(const packetc2w_carsmagnate_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_carsmagnate_history::IsInitialized() const {

  return true;
}

void packetc2w_carsmagnate_history::Swap(packetc2w_carsmagnate_history* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_carsmagnate_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_carsmagnate_history_descriptor_;
  metadata.reflection = packetc2w_carsmagnate_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_carsmagnate_history_result::kPacketIdFieldNumber;
const int packetw2c_carsmagnate_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetw2c_carsmagnate_history_result::packetw2c_carsmagnate_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_carsmagnate_history_result::InitAsDefaultInstance() {
}

packetw2c_carsmagnate_history_result::packetw2c_carsmagnate_history_result(const packetw2c_carsmagnate_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_carsmagnate_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7629;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_carsmagnate_history_result::~packetw2c_carsmagnate_history_result() {
  SharedDtor();
}

void packetw2c_carsmagnate_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_carsmagnate_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_carsmagnate_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_carsmagnate_history_result_descriptor_;
}

const packetw2c_carsmagnate_history_result& packetw2c_carsmagnate_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetw2c_carsmagnate_history_result* packetw2c_carsmagnate_history_result::default_instance_ = NULL;

packetw2c_carsmagnate_history_result* packetw2c_carsmagnate_history_result::New() const {
  return new packetw2c_carsmagnate_history_result;
}

void packetw2c_carsmagnate_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7629;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_carsmagnate_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_carsmagnate_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        break;
      }

      // repeated .client2world_protocols.msg_carsmagnate_room_history room_history = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_carsmagnate_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_carsmagnate_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_carsmagnate_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_carsmagnate_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_carsmagnate_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_carsmagnate_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_carsmagnate_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_carsmagnate_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client2world_protocols.msg_carsmagnate_room_history room_history = 2;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_carsmagnate_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_carsmagnate_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_carsmagnate_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_carsmagnate_history_result::MergeFrom(const packetw2c_carsmagnate_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_carsmagnate_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_carsmagnate_history_result::CopyFrom(const packetw2c_carsmagnate_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_carsmagnate_history_result::IsInitialized() const {

  return true;
}

void packetw2c_carsmagnate_history_result::Swap(packetw2c_carsmagnate_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_carsmagnate_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_carsmagnate_history_result_descriptor_;
  metadata.reflection = packetw2c_carsmagnate_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fourcolorball_room_history::kRoomIdFieldNumber;
const int msg_fourcolorball_room_history::kHistoryListFieldNumber;
#endif  // !_MSC_VER

msg_fourcolorball_room_history::msg_fourcolorball_room_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fourcolorball_room_history::InitAsDefaultInstance() {
}

msg_fourcolorball_room_history::msg_fourcolorball_room_history(const msg_fourcolorball_room_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fourcolorball_room_history::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fourcolorball_room_history::~msg_fourcolorball_room_history() {
  SharedDtor();
}

void msg_fourcolorball_room_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fourcolorball_room_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fourcolorball_room_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fourcolorball_room_history_descriptor_;
}

const msg_fourcolorball_room_history& msg_fourcolorball_room_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

msg_fourcolorball_room_history* msg_fourcolorball_room_history::default_instance_ = NULL;

msg_fourcolorball_room_history* msg_fourcolorball_room_history::New() const {
  return new msg_fourcolorball_room_history;
}

void msg_fourcolorball_room_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
  }
  history_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fourcolorball_room_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_history_list;
        break;
      }

      // repeated int32 history_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_history_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_history_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_history_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fourcolorball_room_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // repeated int32 history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->history_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fourcolorball_room_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // repeated int32 history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->history_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fourcolorball_room_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  // repeated int32 history_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->history_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->history_list(i));
    }
    total_size += 1 * this->history_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fourcolorball_room_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fourcolorball_room_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fourcolorball_room_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fourcolorball_room_history::MergeFrom(const msg_fourcolorball_room_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_list_.MergeFrom(from.history_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fourcolorball_room_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fourcolorball_room_history::CopyFrom(const msg_fourcolorball_room_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fourcolorball_room_history::IsInitialized() const {

  return true;
}

void msg_fourcolorball_room_history::Swap(msg_fourcolorball_room_history* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    history_list_.Swap(&other->history_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fourcolorball_room_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fourcolorball_room_history_descriptor_;
  metadata.reflection = msg_fourcolorball_room_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_fourcolorball_history::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_fourcolorball_history::packetc2w_fourcolorball_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_fourcolorball_history::InitAsDefaultInstance() {
}

packetc2w_fourcolorball_history::packetc2w_fourcolorball_history(const packetc2w_fourcolorball_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_fourcolorball_history::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5119;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_fourcolorball_history::~packetc2w_fourcolorball_history() {
  SharedDtor();
}

void packetc2w_fourcolorball_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_fourcolorball_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_fourcolorball_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_fourcolorball_history_descriptor_;
}

const packetc2w_fourcolorball_history& packetc2w_fourcolorball_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetc2w_fourcolorball_history* packetc2w_fourcolorball_history::default_instance_ = NULL;

packetc2w_fourcolorball_history* packetc2w_fourcolorball_history::New() const {
  return new packetc2w_fourcolorball_history;
}

void packetc2w_fourcolorball_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5119;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_fourcolorball_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_fourcolorball_history];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_fourcolorball_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_fourcolorball_history];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_fourcolorball_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_fourcolorball_history];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_fourcolorball_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_fourcolorball_history];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_fourcolorball_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_fourcolorball_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_fourcolorball_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_fourcolorball_history::MergeFrom(const packetc2w_fourcolorball_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_fourcolorball_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_fourcolorball_history::CopyFrom(const packetc2w_fourcolorball_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_fourcolorball_history::IsInitialized() const {

  return true;
}

void packetc2w_fourcolorball_history::Swap(packetc2w_fourcolorball_history* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_fourcolorball_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_fourcolorball_history_descriptor_;
  metadata.reflection = packetc2w_fourcolorball_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_fourcolorball_history_result::kPacketIdFieldNumber;
const int packetw2c_fourcolorball_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetw2c_fourcolorball_history_result::packetw2c_fourcolorball_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_fourcolorball_history_result::InitAsDefaultInstance() {
}

packetw2c_fourcolorball_history_result::packetw2c_fourcolorball_history_result(const packetw2c_fourcolorball_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_fourcolorball_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7630;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_fourcolorball_history_result::~packetw2c_fourcolorball_history_result() {
  SharedDtor();
}

void packetw2c_fourcolorball_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_fourcolorball_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_fourcolorball_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_fourcolorball_history_result_descriptor_;
}

const packetw2c_fourcolorball_history_result& packetw2c_fourcolorball_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fhistory_2eproto();
  return *default_instance_;
}

packetw2c_fourcolorball_history_result* packetw2c_fourcolorball_history_result::default_instance_ = NULL;

packetw2c_fourcolorball_history_result* packetw2c_fourcolorball_history_result::New() const {
  return new packetw2c_fourcolorball_history_result;
}

void packetw2c_fourcolorball_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7630;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_fourcolorball_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_fourcolorball_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        break;
      }

      // repeated .client2world_protocols.msg_fourcolorball_room_history room_history = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_fourcolorball_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_fourcolorball_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_fourcolorball_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_fourcolorball_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_fourcolorball_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_fourcolorball_room_history room_history = 2;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_fourcolorball_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_fourcolorball_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client2world_protocols.msg_fourcolorball_room_history room_history = 2;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_fourcolorball_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_fourcolorball_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_fourcolorball_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_fourcolorball_history_result::MergeFrom(const packetw2c_fourcolorball_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_fourcolorball_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_fourcolorball_history_result::CopyFrom(const packetw2c_fourcolorball_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_fourcolorball_history_result::IsInitialized() const {

  return true;
}

void packetw2c_fourcolorball_history_result::Swap(packetw2c_fourcolorball_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_fourcolorball_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_fourcolorball_history_result_descriptor_;
  metadata.reflection = packetw2c_fourcolorball_history_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

// @@protoc_insertion_point(global_scope)
