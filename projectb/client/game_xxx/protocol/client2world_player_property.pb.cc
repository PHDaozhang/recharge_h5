// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_player_property.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client2world_player_property.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2w_update_nickname_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_update_nickname_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_update_nickname_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_update_nickname_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_update_sex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_update_sex_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_update_sex_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_update_sex_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_change_photo_frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_change_photo_frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_change_photo_frame_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_change_photo_frame_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_req_safebox_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_safebox_log_reflection_ = NULL;
const ::google::protobuf::Descriptor* SafeBoxLogInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SafeBoxLogInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_req_safebox_log_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_req_safebox_log_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_update_playerhead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_update_playerhead_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_update_playerhead_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_update_playerhead_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto() {
  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client2world_player_property.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2w_update_nickname_descriptor_ = file->message_type(0);
  static const int packetc2w_update_nickname_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_nickname, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_nickname, nickname_),
  };
  packetc2w_update_nickname_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_update_nickname_descriptor_,
      packetc2w_update_nickname::default_instance_,
      packetc2w_update_nickname_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_nickname, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_nickname, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_update_nickname));
  packetw2c_update_nickname_result_descriptor_ = file->message_type(1);
  static const int packetw2c_update_nickname_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_nickname_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_nickname_result, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_nickname_result, result_),
  };
  packetw2c_update_nickname_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_update_nickname_result_descriptor_,
      packetw2c_update_nickname_result::default_instance_,
      packetw2c_update_nickname_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_nickname_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_nickname_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_update_nickname_result));
  packetc2w_update_sex_descriptor_ = file->message_type(2);
  static const int packetc2w_update_sex_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_sex, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_sex, sex_),
  };
  packetc2w_update_sex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_update_sex_descriptor_,
      packetc2w_update_sex::default_instance_,
      packetc2w_update_sex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_sex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_sex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_update_sex));
  packetw2c_update_sex_result_descriptor_ = file->message_type(3);
  static const int packetw2c_update_sex_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_sex_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_sex_result, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_sex_result, result_),
  };
  packetw2c_update_sex_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_update_sex_result_descriptor_,
      packetw2c_update_sex_result::default_instance_,
      packetw2c_update_sex_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_sex_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_sex_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_update_sex_result));
  packetc2w_change_photo_frame_descriptor_ = file->message_type(4);
  static const int packetc2w_change_photo_frame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_change_photo_frame, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_change_photo_frame, photoframeid_),
  };
  packetc2w_change_photo_frame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_change_photo_frame_descriptor_,
      packetc2w_change_photo_frame::default_instance_,
      packetc2w_change_photo_frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_change_photo_frame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_change_photo_frame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_change_photo_frame));
  packetw2c_change_photo_frame_result_descriptor_ = file->message_type(5);
  static const int packetw2c_change_photo_frame_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_change_photo_frame_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_change_photo_frame_result, photoframeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_change_photo_frame_result, result_),
  };
  packetw2c_change_photo_frame_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_change_photo_frame_result_descriptor_,
      packetw2c_change_photo_frame_result::default_instance_,
      packetw2c_change_photo_frame_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_change_photo_frame_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_change_photo_frame_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_change_photo_frame_result));
  packetc2w_req_safebox_log_descriptor_ = file->message_type(6);
  static const int packetc2w_req_safebox_log_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_safebox_log, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_safebox_log, lasttime_),
  };
  packetc2w_req_safebox_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_safebox_log_descriptor_,
      packetc2w_req_safebox_log::default_instance_,
      packetc2w_req_safebox_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_safebox_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_safebox_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_safebox_log));
  SafeBoxLogInfo_descriptor_ = file->message_type(7);
  static const int SafeBoxLogInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeBoxLogInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeBoxLogInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeBoxLogInfo, player_gold_),
  };
  SafeBoxLogInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SafeBoxLogInfo_descriptor_,
      SafeBoxLogInfo::default_instance_,
      SafeBoxLogInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeBoxLogInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeBoxLogInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SafeBoxLogInfo));
  packetw2c_req_safebox_log_result_descriptor_ = file->message_type(8);
  static const int packetw2c_req_safebox_log_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_safebox_log_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_safebox_log_result, loglist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_safebox_log_result, lasttime_),
  };
  packetw2c_req_safebox_log_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_req_safebox_log_result_descriptor_,
      packetw2c_req_safebox_log_result::default_instance_,
      packetw2c_req_safebox_log_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_safebox_log_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_safebox_log_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_req_safebox_log_result));
  packetc2w_update_playerhead_descriptor_ = file->message_type(9);
  static const int packetc2w_update_playerhead_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_playerhead, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_playerhead, headstr_),
  };
  packetc2w_update_playerhead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_update_playerhead_descriptor_,
      packetc2w_update_playerhead::default_instance_,
      packetc2w_update_playerhead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_playerhead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_playerhead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_update_playerhead));
  packetw2c_update_playerhead_result_descriptor_ = file->message_type(10);
  static const int packetw2c_update_playerhead_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_playerhead_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_playerhead_result, headstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_playerhead_result, result_),
  };
  packetw2c_update_playerhead_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_update_playerhead_result_descriptor_,
      packetw2c_update_playerhead_result::default_instance_,
      packetw2c_update_playerhead_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_playerhead_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_playerhead_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_update_playerhead_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_update_nickname_descriptor_, &packetc2w_update_nickname::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_update_nickname_result_descriptor_, &packetw2c_update_nickname_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_update_sex_descriptor_, &packetc2w_update_sex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_update_sex_result_descriptor_, &packetw2c_update_sex_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_change_photo_frame_descriptor_, &packetc2w_change_photo_frame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_change_photo_frame_result_descriptor_, &packetw2c_change_photo_frame_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_safebox_log_descriptor_, &packetc2w_req_safebox_log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SafeBoxLogInfo_descriptor_, &SafeBoxLogInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_req_safebox_log_result_descriptor_, &packetw2c_req_safebox_log_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_update_playerhead_descriptor_, &packetc2w_update_playerhead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_update_playerhead_result_descriptor_, &packetw2c_update_playerhead_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto() {
  delete packetc2w_update_nickname::default_instance_;
  delete packetc2w_update_nickname_reflection_;
  delete packetw2c_update_nickname_result::default_instance_;
  delete packetw2c_update_nickname_result_reflection_;
  delete packetc2w_update_sex::default_instance_;
  delete packetc2w_update_sex_reflection_;
  delete packetw2c_update_sex_result::default_instance_;
  delete packetw2c_update_sex_result_reflection_;
  delete packetc2w_change_photo_frame::default_instance_;
  delete packetc2w_change_photo_frame_reflection_;
  delete packetw2c_change_photo_frame_result::default_instance_;
  delete packetw2c_change_photo_frame_result_reflection_;
  delete packetc2w_req_safebox_log::default_instance_;
  delete packetc2w_req_safebox_log_reflection_;
  delete SafeBoxLogInfo::default_instance_;
  delete SafeBoxLogInfo_reflection_;
  delete packetw2c_req_safebox_log_result::default_instance_;
  delete packetw2c_req_safebox_log_result_reflection_;
  delete packetc2w_update_playerhead::default_instance_;
  delete packetc2w_update_playerhead_reflection_;
  delete packetw2c_update_playerhead_result::default_instance_;
  delete packetw2c_update_playerhead_result_reflection_;
}

void protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client2world_protocols::protobuf_AddDesc_client2world_5fmsg_5ftype_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"client2world_player_property.proto\022\026cl"
    "ient2world_protocols\032\033client2world_msg_t"
    "ype.proto\032\022msg_type_def.proto\032\022msg_info_"
    "def.proto\"\206\001\n\031packetc2w_update_nickname\022"
    "W\n\tpacket_id\030\001 \001(\0162).client2world_protoc"
    "ols.e_server_msg_type:\031e_mst_c2w_update_"
    "nickname\022\020\n\010nickName\030\002 \001(\t\"\244\001\n packetw2c"
    "_update_nickname_result\022^\n\tpacket_id\030\001 \001"
    "(\0162).client2world_protocols.e_server_msg"
    "_type: e_mst_w2c_update_nickname_result\022"
    "\020\n\010nickName\030\002 \001(\t\022\016\n\006result\030\003 \001(\005\"w\n\024pac"
    "ketc2w_update_sex\022R\n\tpacket_id\030\001 \001(\0162).c"
    "lient2world_protocols.e_server_msg_type:"
    "\024e_mst_c2w_update_sex\022\013\n\003sex\030\002 \001(\005\"\225\001\n\033p"
    "acketw2c_update_sex_result\022Y\n\tpacket_id\030"
    "\001 \001(\0162).client2world_protocols.e_server_"
    "msg_type:\033e_mst_w2c_update_sex_result\022\013\n"
    "\003sex\030\002 \001(\005\022\016\n\006result\030\003 \001(\005\"\220\001\n\034packetc2w"
    "_change_photo_frame\022Z\n\tpacket_id\030\001 \001(\0162)"
    ".client2world_protocols.e_server_msg_typ"
    "e:\034e_mst_c2w_change_photo_frame\022\024\n\014photo"
    "FrameId\030\002 \001(\005\"\256\001\n#packetw2c_change_photo"
    "_frame_result\022a\n\tpacket_id\030\001 \001(\0162).clien"
    "t2world_protocols.e_server_msg_type:#e_m"
    "st_w2c_change_photo_frame_result\022\024\n\014phot"
    "oFrameId\030\002 \001(\005\022\016\n\006result\030\003 \001(\005\"\206\001\n\031packe"
    "tc2w_req_safebox_log\022W\n\tpacket_id\030\001 \001(\0162"
    ").client2world_protocols.e_server_msg_ty"
    "pe:\031e_mst_c2w_req_safebox_log\022\020\n\010lastTim"
    "e\030\002 \001(\005\"A\n\016SafeBoxLogInfo\022\014\n\004time\030\001 \001(\005\022"
    "\014\n\004gold\030\002 \001(\003\022\023\n\013player_gold\030\003 \001(\003\"\315\001\n p"
    "acketw2c_req_safebox_log_result\022^\n\tpacke"
    "t_id\030\001 \001(\0162).client2world_protocols.e_se"
    "rver_msg_type: e_mst_w2c_req_safebox_log"
    "_result\0227\n\007logList\030\002 \003(\0132&.client2world_"
    "protocols.SafeBoxLogInfo\022\020\n\010lastTime\030\003 \001"
    "(\005\"\211\001\n\033packetc2w_update_playerhead\022Y\n\tpa"
    "cket_id\030\001 \001(\0162).client2world_protocols.e"
    "_server_msg_type:\033e_mst_c2w_update_playe"
    "rhead\022\017\n\007headstr\030\002 \001(\t\"\247\001\n\"packetw2c_upd"
    "ate_playerhead_result\022`\n\tpacket_id\030\001 \001(\016"
    "2).client2world_protocols.e_server_msg_t"
    "ype:\"e_mst_w2c_update_playerhead_result\022"
    "\017\n\007headstr\030\002 \001(\t\022\016\n\006result\030\003 \001(\005", 1752);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client2world_player_property.proto", &protobuf_RegisterTypes);
  packetc2w_update_nickname::default_instance_ = new packetc2w_update_nickname();
  packetw2c_update_nickname_result::default_instance_ = new packetw2c_update_nickname_result();
  packetc2w_update_sex::default_instance_ = new packetc2w_update_sex();
  packetw2c_update_sex_result::default_instance_ = new packetw2c_update_sex_result();
  packetc2w_change_photo_frame::default_instance_ = new packetc2w_change_photo_frame();
  packetw2c_change_photo_frame_result::default_instance_ = new packetw2c_change_photo_frame_result();
  packetc2w_req_safebox_log::default_instance_ = new packetc2w_req_safebox_log();
  SafeBoxLogInfo::default_instance_ = new SafeBoxLogInfo();
  packetw2c_req_safebox_log_result::default_instance_ = new packetw2c_req_safebox_log_result();
  packetc2w_update_playerhead::default_instance_ = new packetc2w_update_playerhead();
  packetw2c_update_playerhead_result::default_instance_ = new packetw2c_update_playerhead_result();
  packetc2w_update_nickname::default_instance_->InitAsDefaultInstance();
  packetw2c_update_nickname_result::default_instance_->InitAsDefaultInstance();
  packetc2w_update_sex::default_instance_->InitAsDefaultInstance();
  packetw2c_update_sex_result::default_instance_->InitAsDefaultInstance();
  packetc2w_change_photo_frame::default_instance_->InitAsDefaultInstance();
  packetw2c_change_photo_frame_result::default_instance_->InitAsDefaultInstance();
  packetc2w_req_safebox_log::default_instance_->InitAsDefaultInstance();
  SafeBoxLogInfo::default_instance_->InitAsDefaultInstance();
  packetw2c_req_safebox_log_result::default_instance_->InitAsDefaultInstance();
  packetc2w_update_playerhead::default_instance_->InitAsDefaultInstance();
  packetw2c_update_playerhead_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client2world_5fplayer_5fproperty_2eproto {
  StaticDescriptorInitializer_client2world_5fplayer_5fproperty_2eproto() {
    protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  }
} static_descriptor_initializer_client2world_5fplayer_5fproperty_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2w_update_nickname::kPacketIdFieldNumber;
const int packetc2w_update_nickname::kNickNameFieldNumber;
#endif  // !_MSC_VER

packetc2w_update_nickname::packetc2w_update_nickname()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_update_nickname::InitAsDefaultInstance() {
}

packetc2w_update_nickname::packetc2w_update_nickname(const packetc2w_update_nickname& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_update_nickname::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5011;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_update_nickname::~packetc2w_update_nickname() {
  SharedDtor();
}

void packetc2w_update_nickname::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_update_nickname::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_update_nickname::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_update_nickname_descriptor_;
}

const packetc2w_update_nickname& packetc2w_update_nickname::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetc2w_update_nickname* packetc2w_update_nickname::default_instance_ = NULL;

packetc2w_update_nickname* packetc2w_update_nickname::New() const {
  return new packetc2w_update_nickname;
}

void packetc2w_update_nickname::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5011;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_update_nickname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_nickname];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickName;
        break;
      }

      // optional string nickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_update_nickname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_nickname];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_update_nickname::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_nickname];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_update_nickname::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_nickname];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string nickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_update_nickname::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_update_nickname* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_update_nickname*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_update_nickname::MergeFrom(const packetc2w_update_nickname& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_update_nickname::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_update_nickname::CopyFrom(const packetc2w_update_nickname& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_update_nickname::IsInitialized() const {

  return true;
}

void packetc2w_update_nickname::Swap(packetc2w_update_nickname* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_update_nickname::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_update_nickname_descriptor_;
  metadata.reflection = packetc2w_update_nickname_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_update_nickname_result::kPacketIdFieldNumber;
const int packetw2c_update_nickname_result::kNickNameFieldNumber;
const int packetw2c_update_nickname_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_update_nickname_result::packetw2c_update_nickname_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_update_nickname_result::InitAsDefaultInstance() {
}

packetw2c_update_nickname_result::packetw2c_update_nickname_result(const packetw2c_update_nickname_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_update_nickname_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7510;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_update_nickname_result::~packetw2c_update_nickname_result() {
  SharedDtor();
}

void packetw2c_update_nickname_result::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_update_nickname_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_update_nickname_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_update_nickname_result_descriptor_;
}

const packetw2c_update_nickname_result& packetw2c_update_nickname_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetw2c_update_nickname_result* packetw2c_update_nickname_result::default_instance_ = NULL;

packetw2c_update_nickname_result* packetw2c_update_nickname_result::New() const {
  return new packetw2c_update_nickname_result;
}

void packetw2c_update_nickname_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7510;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_update_nickname_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_nickname_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickName;
        break;
      }

      // optional string nickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_update_nickname_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_nickname_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_update_nickname_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_nickname_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_update_nickname_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_nickname_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string nickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_update_nickname_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_update_nickname_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_update_nickname_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_update_nickname_result::MergeFrom(const packetw2c_update_nickname_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_update_nickname_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_update_nickname_result::CopyFrom(const packetw2c_update_nickname_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_update_nickname_result::IsInitialized() const {

  return true;
}

void packetw2c_update_nickname_result::Swap(packetw2c_update_nickname_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(nickname_, other->nickname_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_update_nickname_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_update_nickname_result_descriptor_;
  metadata.reflection = packetw2c_update_nickname_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_update_sex::kPacketIdFieldNumber;
const int packetc2w_update_sex::kSexFieldNumber;
#endif  // !_MSC_VER

packetc2w_update_sex::packetc2w_update_sex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_update_sex::InitAsDefaultInstance() {
}

packetc2w_update_sex::packetc2w_update_sex(const packetc2w_update_sex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_update_sex::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5012;
  sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_update_sex::~packetc2w_update_sex() {
  SharedDtor();
}

void packetc2w_update_sex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_update_sex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_update_sex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_update_sex_descriptor_;
}

const packetc2w_update_sex& packetc2w_update_sex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetc2w_update_sex* packetc2w_update_sex::default_instance_ = NULL;

packetc2w_update_sex* packetc2w_update_sex::New() const {
  return new packetc2w_update_sex;
}

void packetc2w_update_sex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5012;
    sex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_update_sex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_sex];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sex;
        break;
      }

      // optional int32 sex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_update_sex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_sex];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 sex = 2;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_update_sex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_sex];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 sex = 2;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_update_sex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_sex];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 sex = 2;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_update_sex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_update_sex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_update_sex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_update_sex::MergeFrom(const packetc2w_update_sex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_update_sex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_update_sex::CopyFrom(const packetc2w_update_sex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_update_sex::IsInitialized() const {

  return true;
}

void packetc2w_update_sex::Swap(packetc2w_update_sex* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_update_sex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_update_sex_descriptor_;
  metadata.reflection = packetc2w_update_sex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_update_sex_result::kPacketIdFieldNumber;
const int packetw2c_update_sex_result::kSexFieldNumber;
const int packetw2c_update_sex_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_update_sex_result::packetw2c_update_sex_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_update_sex_result::InitAsDefaultInstance() {
}

packetw2c_update_sex_result::packetw2c_update_sex_result(const packetw2c_update_sex_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_update_sex_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7511;
  sex_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_update_sex_result::~packetw2c_update_sex_result() {
  SharedDtor();
}

void packetw2c_update_sex_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_update_sex_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_update_sex_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_update_sex_result_descriptor_;
}

const packetw2c_update_sex_result& packetw2c_update_sex_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetw2c_update_sex_result* packetw2c_update_sex_result::default_instance_ = NULL;

packetw2c_update_sex_result* packetw2c_update_sex_result::New() const {
  return new packetw2c_update_sex_result;
}

void packetw2c_update_sex_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7511;
    sex_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_update_sex_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_sex_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sex;
        break;
      }

      // optional int32 sex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_update_sex_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_sex_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 sex = 2;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sex(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_update_sex_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_sex_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 sex = 2;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sex(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_update_sex_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_sex_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 sex = 2;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_update_sex_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_update_sex_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_update_sex_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_update_sex_result::MergeFrom(const packetw2c_update_sex_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_update_sex_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_update_sex_result::CopyFrom(const packetw2c_update_sex_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_update_sex_result::IsInitialized() const {

  return true;
}

void packetw2c_update_sex_result::Swap(packetw2c_update_sex_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(sex_, other->sex_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_update_sex_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_update_sex_result_descriptor_;
  metadata.reflection = packetw2c_update_sex_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_change_photo_frame::kPacketIdFieldNumber;
const int packetc2w_change_photo_frame::kPhotoFrameIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_change_photo_frame::packetc2w_change_photo_frame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_change_photo_frame::InitAsDefaultInstance() {
}

packetc2w_change_photo_frame::packetc2w_change_photo_frame(const packetc2w_change_photo_frame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_change_photo_frame::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5032;
  photoframeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_change_photo_frame::~packetc2w_change_photo_frame() {
  SharedDtor();
}

void packetc2w_change_photo_frame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_change_photo_frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_change_photo_frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_change_photo_frame_descriptor_;
}

const packetc2w_change_photo_frame& packetc2w_change_photo_frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetc2w_change_photo_frame* packetc2w_change_photo_frame::default_instance_ = NULL;

packetc2w_change_photo_frame* packetc2w_change_photo_frame::New() const {
  return new packetc2w_change_photo_frame;
}

void packetc2w_change_photo_frame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5032;
    photoframeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_change_photo_frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_change_photo_frame];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_photoFrameId;
        break;
      }

      // optional int32 photoFrameId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoFrameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photoframeid_)));
          set_has_photoframeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_change_photo_frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_change_photo_frame];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 photoFrameId = 2;
  if (has_photoframeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->photoframeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_change_photo_frame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_change_photo_frame];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 photoFrameId = 2;
  if (has_photoframeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->photoframeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_change_photo_frame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_change_photo_frame];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 photoFrameId = 2;
    if (has_photoframeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->photoframeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_change_photo_frame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_change_photo_frame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_change_photo_frame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_change_photo_frame::MergeFrom(const packetc2w_change_photo_frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_photoframeid()) {
      set_photoframeid(from.photoframeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_change_photo_frame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_change_photo_frame::CopyFrom(const packetc2w_change_photo_frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_change_photo_frame::IsInitialized() const {

  return true;
}

void packetc2w_change_photo_frame::Swap(packetc2w_change_photo_frame* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(photoframeid_, other->photoframeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_change_photo_frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_change_photo_frame_descriptor_;
  metadata.reflection = packetc2w_change_photo_frame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_change_photo_frame_result::kPacketIdFieldNumber;
const int packetw2c_change_photo_frame_result::kPhotoFrameIdFieldNumber;
const int packetw2c_change_photo_frame_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_change_photo_frame_result::packetw2c_change_photo_frame_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_change_photo_frame_result::InitAsDefaultInstance() {
}

packetw2c_change_photo_frame_result::packetw2c_change_photo_frame_result(const packetw2c_change_photo_frame_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_change_photo_frame_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7534;
  photoframeid_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_change_photo_frame_result::~packetw2c_change_photo_frame_result() {
  SharedDtor();
}

void packetw2c_change_photo_frame_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_change_photo_frame_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_change_photo_frame_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_change_photo_frame_result_descriptor_;
}

const packetw2c_change_photo_frame_result& packetw2c_change_photo_frame_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetw2c_change_photo_frame_result* packetw2c_change_photo_frame_result::default_instance_ = NULL;

packetw2c_change_photo_frame_result* packetw2c_change_photo_frame_result::New() const {
  return new packetw2c_change_photo_frame_result;
}

void packetw2c_change_photo_frame_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7534;
    photoframeid_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_change_photo_frame_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_change_photo_frame_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_photoFrameId;
        break;
      }

      // optional int32 photoFrameId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoFrameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photoframeid_)));
          set_has_photoframeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_change_photo_frame_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_change_photo_frame_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 photoFrameId = 2;
  if (has_photoframeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->photoframeid(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_change_photo_frame_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_change_photo_frame_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 photoFrameId = 2;
  if (has_photoframeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->photoframeid(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_change_photo_frame_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_change_photo_frame_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 photoFrameId = 2;
    if (has_photoframeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->photoframeid());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_change_photo_frame_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_change_photo_frame_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_change_photo_frame_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_change_photo_frame_result::MergeFrom(const packetw2c_change_photo_frame_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_photoframeid()) {
      set_photoframeid(from.photoframeid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_change_photo_frame_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_change_photo_frame_result::CopyFrom(const packetw2c_change_photo_frame_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_change_photo_frame_result::IsInitialized() const {

  return true;
}

void packetw2c_change_photo_frame_result::Swap(packetw2c_change_photo_frame_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(photoframeid_, other->photoframeid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_change_photo_frame_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_change_photo_frame_result_descriptor_;
  metadata.reflection = packetw2c_change_photo_frame_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_safebox_log::kPacketIdFieldNumber;
const int packetc2w_req_safebox_log::kLastTimeFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_safebox_log::packetc2w_req_safebox_log()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_req_safebox_log::InitAsDefaultInstance() {
}

packetc2w_req_safebox_log::packetc2w_req_safebox_log(const packetc2w_req_safebox_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_req_safebox_log::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5067;
  lasttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_safebox_log::~packetc2w_req_safebox_log() {
  SharedDtor();
}

void packetc2w_req_safebox_log::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_req_safebox_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_safebox_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_safebox_log_descriptor_;
}

const packetc2w_req_safebox_log& packetc2w_req_safebox_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetc2w_req_safebox_log* packetc2w_req_safebox_log::default_instance_ = NULL;

packetc2w_req_safebox_log* packetc2w_req_safebox_log::New() const {
  return new packetc2w_req_safebox_log;
}

void packetc2w_req_safebox_log::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5067;
    lasttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_safebox_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_safebox_log];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastTime;
        break;
      }

      // optional int32 lastTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_req_safebox_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_safebox_log];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 lastTime = 2;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_req_safebox_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_safebox_log];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 lastTime = 2;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_req_safebox_log::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_safebox_log];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 lastTime = 2;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_safebox_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_safebox_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_safebox_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_safebox_log::MergeFrom(const packetc2w_req_safebox_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_safebox_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_safebox_log::CopyFrom(const packetc2w_req_safebox_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_safebox_log::IsInitialized() const {

  return true;
}

void packetc2w_req_safebox_log::Swap(packetc2w_req_safebox_log* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_safebox_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_safebox_log_descriptor_;
  metadata.reflection = packetc2w_req_safebox_log_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SafeBoxLogInfo::kTimeFieldNumber;
const int SafeBoxLogInfo::kGoldFieldNumber;
const int SafeBoxLogInfo::kPlayerGoldFieldNumber;
#endif  // !_MSC_VER

SafeBoxLogInfo::SafeBoxLogInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SafeBoxLogInfo::InitAsDefaultInstance() {
}

SafeBoxLogInfo::SafeBoxLogInfo(const SafeBoxLogInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SafeBoxLogInfo::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  player_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SafeBoxLogInfo::~SafeBoxLogInfo() {
  SharedDtor();
}

void SafeBoxLogInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SafeBoxLogInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SafeBoxLogInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafeBoxLogInfo_descriptor_;
}

const SafeBoxLogInfo& SafeBoxLogInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

SafeBoxLogInfo* SafeBoxLogInfo::default_instance_ = NULL;

SafeBoxLogInfo* SafeBoxLogInfo::New() const {
  return new SafeBoxLogInfo;
}

void SafeBoxLogInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
    gold_ = GOOGLE_LONGLONG(0);
    player_gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SafeBoxLogInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional int64 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SafeBoxLogInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gold(), output);
  }

  // optional int64 player_gold = 3;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->player_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SafeBoxLogInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gold(), target);
  }

  // optional int64 player_gold = 3;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->player_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SafeBoxLogInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int64 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int64 player_gold = 3;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SafeBoxLogInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SafeBoxLogInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SafeBoxLogInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SafeBoxLogInfo::MergeFrom(const SafeBoxLogInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SafeBoxLogInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SafeBoxLogInfo::CopyFrom(const SafeBoxLogInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafeBoxLogInfo::IsInitialized() const {

  return true;
}

void SafeBoxLogInfo::Swap(SafeBoxLogInfo* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(gold_, other->gold_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SafeBoxLogInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SafeBoxLogInfo_descriptor_;
  metadata.reflection = SafeBoxLogInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_req_safebox_log_result::kPacketIdFieldNumber;
const int packetw2c_req_safebox_log_result::kLogListFieldNumber;
const int packetw2c_req_safebox_log_result::kLastTimeFieldNumber;
#endif  // !_MSC_VER

packetw2c_req_safebox_log_result::packetw2c_req_safebox_log_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_req_safebox_log_result::InitAsDefaultInstance() {
}

packetw2c_req_safebox_log_result::packetw2c_req_safebox_log_result(const packetw2c_req_safebox_log_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_req_safebox_log_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7573;
  lasttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_req_safebox_log_result::~packetw2c_req_safebox_log_result() {
  SharedDtor();
}

void packetw2c_req_safebox_log_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_req_safebox_log_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_req_safebox_log_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_req_safebox_log_result_descriptor_;
}

const packetw2c_req_safebox_log_result& packetw2c_req_safebox_log_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetw2c_req_safebox_log_result* packetw2c_req_safebox_log_result::default_instance_ = NULL;

packetw2c_req_safebox_log_result* packetw2c_req_safebox_log_result::New() const {
  return new packetw2c_req_safebox_log_result;
}

void packetw2c_req_safebox_log_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7573;
    lasttime_ = 0;
  }
  loglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_req_safebox_log_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_safebox_log_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_logList;
        break;
      }

      // repeated .client2world_protocols.SafeBoxLogInfo logList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loglist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_logList;
        if (input->ExpectTag(24)) goto parse_lastTime;
        break;
      }

      // optional int32 lastTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_req_safebox_log_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_safebox_log_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.SafeBoxLogInfo logList = 2;
  for (int i = 0; i < this->loglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->loglist(i), output);
  }

  // optional int32 lastTime = 3;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_req_safebox_log_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_safebox_log_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.SafeBoxLogInfo logList = 2;
  for (int i = 0; i < this->loglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->loglist(i), target);
  }

  // optional int32 lastTime = 3;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_req_safebox_log_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_safebox_log_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 lastTime = 3;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

  }
  // repeated .client2world_protocols.SafeBoxLogInfo logList = 2;
  total_size += 1 * this->loglist_size();
  for (int i = 0; i < this->loglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->loglist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_req_safebox_log_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_req_safebox_log_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_req_safebox_log_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_req_safebox_log_result::MergeFrom(const packetw2c_req_safebox_log_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  loglist_.MergeFrom(from.loglist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_req_safebox_log_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_req_safebox_log_result::CopyFrom(const packetw2c_req_safebox_log_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_req_safebox_log_result::IsInitialized() const {

  return true;
}

void packetw2c_req_safebox_log_result::Swap(packetw2c_req_safebox_log_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    loglist_.Swap(&other->loglist_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_req_safebox_log_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_req_safebox_log_result_descriptor_;
  metadata.reflection = packetw2c_req_safebox_log_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_update_playerhead::kPacketIdFieldNumber;
const int packetc2w_update_playerhead::kHeadstrFieldNumber;
#endif  // !_MSC_VER

packetc2w_update_playerhead::packetc2w_update_playerhead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_update_playerhead::InitAsDefaultInstance() {
}

packetc2w_update_playerhead::packetc2w_update_playerhead(const packetc2w_update_playerhead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_update_playerhead::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5010;
  headstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_update_playerhead::~packetc2w_update_playerhead() {
  SharedDtor();
}

void packetc2w_update_playerhead::SharedDtor() {
  if (headstr_ != &::google::protobuf::internal::kEmptyString) {
    delete headstr_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_update_playerhead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_update_playerhead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_update_playerhead_descriptor_;
}

const packetc2w_update_playerhead& packetc2w_update_playerhead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetc2w_update_playerhead* packetc2w_update_playerhead::default_instance_ = NULL;

packetc2w_update_playerhead* packetc2w_update_playerhead::New() const {
  return new packetc2w_update_playerhead;
}

void packetc2w_update_playerhead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5010;
    if (has_headstr()) {
      if (headstr_ != &::google::protobuf::internal::kEmptyString) {
        headstr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_update_playerhead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_playerhead];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_headstr;
        break;
      }

      // optional string headstr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headstr().data(), this->headstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_update_playerhead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_playerhead];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string headstr = 2;
  if (has_headstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headstr().data(), this->headstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->headstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_update_playerhead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_playerhead];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string headstr = 2;
  if (has_headstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headstr().data(), this->headstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->headstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_update_playerhead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_playerhead];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string headstr = 2;
    if (has_headstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_update_playerhead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_update_playerhead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_update_playerhead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_update_playerhead::MergeFrom(const packetc2w_update_playerhead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_headstr()) {
      set_headstr(from.headstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_update_playerhead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_update_playerhead::CopyFrom(const packetc2w_update_playerhead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_update_playerhead::IsInitialized() const {

  return true;
}

void packetc2w_update_playerhead::Swap(packetc2w_update_playerhead* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(headstr_, other->headstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_update_playerhead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_update_playerhead_descriptor_;
  metadata.reflection = packetc2w_update_playerhead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_update_playerhead_result::kPacketIdFieldNumber;
const int packetw2c_update_playerhead_result::kHeadstrFieldNumber;
const int packetw2c_update_playerhead_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_update_playerhead_result::packetw2c_update_playerhead_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_update_playerhead_result::InitAsDefaultInstance() {
}

packetw2c_update_playerhead_result::packetw2c_update_playerhead_result(const packetw2c_update_playerhead_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_update_playerhead_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7509;
  headstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_update_playerhead_result::~packetw2c_update_playerhead_result() {
  SharedDtor();
}

void packetw2c_update_playerhead_result::SharedDtor() {
  if (headstr_ != &::google::protobuf::internal::kEmptyString) {
    delete headstr_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_update_playerhead_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_update_playerhead_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_update_playerhead_result_descriptor_;
}

const packetw2c_update_playerhead_result& packetw2c_update_playerhead_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetw2c_update_playerhead_result* packetw2c_update_playerhead_result::default_instance_ = NULL;

packetw2c_update_playerhead_result* packetw2c_update_playerhead_result::New() const {
  return new packetw2c_update_playerhead_result;
}

void packetw2c_update_playerhead_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7509;
    if (has_headstr()) {
      if (headstr_ != &::google::protobuf::internal::kEmptyString) {
        headstr_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_update_playerhead_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_playerhead_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_headstr;
        break;
      }

      // optional string headstr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headstr().data(), this->headstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_update_playerhead_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_playerhead_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string headstr = 2;
  if (has_headstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headstr().data(), this->headstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->headstr(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_update_playerhead_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_playerhead_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string headstr = 2;
  if (has_headstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headstr().data(), this->headstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->headstr(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_update_playerhead_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_playerhead_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string headstr = 2;
    if (has_headstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headstr());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_update_playerhead_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_update_playerhead_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_update_playerhead_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_update_playerhead_result::MergeFrom(const packetw2c_update_playerhead_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_headstr()) {
      set_headstr(from.headstr());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_update_playerhead_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_update_playerhead_result::CopyFrom(const packetw2c_update_playerhead_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_update_playerhead_result::IsInitialized() const {

  return true;
}

void packetw2c_update_playerhead_result::Swap(packetw2c_update_playerhead_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(headstr_, other->headstr_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_update_playerhead_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_update_playerhead_result_descriptor_;
  metadata.reflection = packetw2c_update_playerhead_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

// @@protoc_insertion_point(global_scope)
