// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_prizeClaw_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_prizeClaw_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game_prizeClaw_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2l_get_player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_player_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_player_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc21_req_start_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc21_req_start_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet12c_req_start_game_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet12c_req_start_game_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_req_leave_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_req_leave_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_req_leave_game_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_req_leave_game_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc21_req_begin_pass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc21_req_begin_pass_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet12c_req_begin_pass_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet12c_req_begin_pass_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc21_claw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc21_claw_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet12c_claw_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet12c_claw_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc21_miss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc21_miss_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet12c_miss_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet12c_miss_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fprizeClaw_5fprotocol_2eproto() {
  protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_prizeClaw_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2l_get_player_info_descriptor_ = file->message_type(0);
  static const int packetc2l_get_player_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_player_info, packet_id_),
  };
  packetc2l_get_player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_player_info_descriptor_,
      packetc2l_get_player_info::default_instance_,
      packetc2l_get_player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_player_info));
  packetl2c_get_player_info_result_descriptor_ = file->message_type(1);
  static const int packetl2c_get_player_info_result_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_player_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_player_info_result, game_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_player_info_result, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_player_info_result, cd_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_player_info_result, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_player_info_result, catch_ret_),
  };
  packetl2c_get_player_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_player_info_result_descriptor_,
      packetl2c_get_player_info_result::default_instance_,
      packetl2c_get_player_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_player_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_player_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_player_info_result));
  packetc21_req_start_game_descriptor_ = file->message_type(2);
  static const int packetc21_req_start_game_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc21_req_start_game, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc21_req_start_game, type_),
  };
  packetc21_req_start_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc21_req_start_game_descriptor_,
      packetc21_req_start_game::default_instance_,
      packetc21_req_start_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc21_req_start_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc21_req_start_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc21_req_start_game));
  packet12c_req_start_game_result_descriptor_ = file->message_type(3);
  static const int packet12c_req_start_game_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet12c_req_start_game_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet12c_req_start_game_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet12c_req_start_game_result, type_),
  };
  packet12c_req_start_game_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet12c_req_start_game_result_descriptor_,
      packet12c_req_start_game_result::default_instance_,
      packet12c_req_start_game_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet12c_req_start_game_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet12c_req_start_game_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet12c_req_start_game_result));
  packetc2l_req_leave_game_descriptor_ = file->message_type(4);
  static const int packetc2l_req_leave_game_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_leave_game, packet_id_),
  };
  packetc2l_req_leave_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_req_leave_game_descriptor_,
      packetc2l_req_leave_game::default_instance_,
      packetc2l_req_leave_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_leave_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_leave_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_req_leave_game));
  packetl2c_req_leave_game_result_descriptor_ = file->message_type(5);
  static const int packetl2c_req_leave_game_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_leave_game_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_leave_game_result, result_),
  };
  packetl2c_req_leave_game_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_req_leave_game_result_descriptor_,
      packetl2c_req_leave_game_result::default_instance_,
      packetl2c_req_leave_game_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_leave_game_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_leave_game_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_req_leave_game_result));
  packetc21_req_begin_pass_descriptor_ = file->message_type(6);
  static const int packetc21_req_begin_pass_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc21_req_begin_pass, packet_id_),
  };
  packetc21_req_begin_pass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc21_req_begin_pass_descriptor_,
      packetc21_req_begin_pass::default_instance_,
      packetc21_req_begin_pass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc21_req_begin_pass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc21_req_begin_pass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc21_req_begin_pass));
  packet12c_req_begin_pass_result_descriptor_ = file->message_type(7);
  static const int packet12c_req_begin_pass_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet12c_req_begin_pass_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet12c_req_begin_pass_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet12c_req_begin_pass_result, count_),
  };
  packet12c_req_begin_pass_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet12c_req_begin_pass_result_descriptor_,
      packet12c_req_begin_pass_result::default_instance_,
      packet12c_req_begin_pass_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet12c_req_begin_pass_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet12c_req_begin_pass_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet12c_req_begin_pass_result));
  packetc21_claw_descriptor_ = file->message_type(8);
  static const int packetc21_claw_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc21_claw, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc21_claw, item_id_),
  };
  packetc21_claw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc21_claw_descriptor_,
      packetc21_claw::default_instance_,
      packetc21_claw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc21_claw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc21_claw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc21_claw));
  packet12c_claw_result_descriptor_ = file->message_type(9);
  static const int packet12c_claw_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet12c_claw_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet12c_claw_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet12c_claw_result, count_),
  };
  packet12c_claw_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet12c_claw_result_descriptor_,
      packet12c_claw_result::default_instance_,
      packet12c_claw_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet12c_claw_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet12c_claw_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet12c_claw_result));
  packetc21_miss_descriptor_ = file->message_type(10);
  static const int packetc21_miss_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc21_miss, packet_id_),
  };
  packetc21_miss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc21_miss_descriptor_,
      packetc21_miss::default_instance_,
      packetc21_miss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc21_miss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc21_miss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc21_miss));
  packet12c_miss_result_descriptor_ = file->message_type(11);
  static const int packet12c_miss_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet12c_miss_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet12c_miss_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet12c_miss_result, count_),
  };
  packet12c_miss_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet12c_miss_result_descriptor_,
      packet12c_miss_result::default_instance_,
      packet12c_miss_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet12c_miss_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet12c_miss_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet12c_miss_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fprizeClaw_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_player_info_descriptor_, &packetc2l_get_player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_player_info_result_descriptor_, &packetl2c_get_player_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc21_req_start_game_descriptor_, &packetc21_req_start_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet12c_req_start_game_result_descriptor_, &packet12c_req_start_game_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_req_leave_game_descriptor_, &packetc2l_req_leave_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_req_leave_game_result_descriptor_, &packetl2c_req_leave_game_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc21_req_begin_pass_descriptor_, &packetc21_req_begin_pass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet12c_req_begin_pass_result_descriptor_, &packet12c_req_begin_pass_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc21_claw_descriptor_, &packetc21_claw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet12c_claw_result_descriptor_, &packet12c_claw_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc21_miss_descriptor_, &packetc21_miss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet12c_miss_result_descriptor_, &packet12c_miss_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fprizeClaw_5fprotocol_2eproto() {
  delete packetc2l_get_player_info::default_instance_;
  delete packetc2l_get_player_info_reflection_;
  delete packetl2c_get_player_info_result::default_instance_;
  delete packetl2c_get_player_info_result_reflection_;
  delete packetc21_req_start_game::default_instance_;
  delete packetc21_req_start_game_reflection_;
  delete packet12c_req_start_game_result::default_instance_;
  delete packet12c_req_start_game_result_reflection_;
  delete packetc2l_req_leave_game::default_instance_;
  delete packetc2l_req_leave_game_reflection_;
  delete packetl2c_req_leave_game_result::default_instance_;
  delete packetl2c_req_leave_game_result_reflection_;
  delete packetc21_req_begin_pass::default_instance_;
  delete packetc21_req_begin_pass_reflection_;
  delete packet12c_req_begin_pass_result::default_instance_;
  delete packet12c_req_begin_pass_result_reflection_;
  delete packetc21_claw::default_instance_;
  delete packetc21_claw_reflection_;
  delete packet12c_claw_result::default_instance_;
  delete packet12c_claw_result_reflection_;
  delete packetc21_miss::default_instance_;
  delete packetc21_miss_reflection_;
  delete packet12c_miss_result::default_instance_;
  delete packet12c_miss_result_reflection_;
}

void protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::game_prizeClaw_protocols::protobuf_AddDesc_game_5fprizeClaw_5fdef_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035game_prizeClaw_protocol.proto\022\030game_pr"
    "izeClaw_protocols\032\030game_prizeClaw_def.pr"
    "oto\032\022msg_type_def.proto\"v\n\031packetc2l_get"
    "_player_info\022Y\n\tpacket_id\030\001 \001(\0162+.game_p"
    "rizeClaw_protocols.e_server_msg_type:\031e_"
    "mst_c2l_get_player_info\"\322\001\n packetl2c_ge"
    "t_player_info_result\022Y\n\tpacket_id\030\001 \001(\0162"
    "+.game_prizeClaw_protocols.e_server_msg_"
    "type:\031e_mst_l2c_get_player_info\022\022\n\ngame_"
    "state\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\022\017\n\007cd_time\030\004 \001"
    "(\005\022\r\n\005count\030\005 \001(\005\022\021\n\tcatch_ret\030\006 \001(\005\"\202\001\n"
    "\030packetc21_req_start_game\022X\n\tpacket_id\030\001"
    " \001(\0162+.game_prizeClaw_protocols.e_server"
    "_msg_type:\030e_mst_c2l_req_start_game\022\014\n\004t"
    "ype\030\002 \001(\005\"\305\001\n\037packet12c_req_start_game_r"
    "esult\022X\n\tpacket_id\030\001 \001(\0162+.game_prizeCla"
    "w_protocols.e_server_msg_type:\030e_mst_l2c"
    "_req_start_game\022:\n\006result\030\002 \001(\0162\036.msg_ty"
    "pe_def.e_msg_result_def:\ne_rmt_fail\022\014\n\004t"
    "ype\030\003 \001(\005\"t\n\030packetc2l_req_leave_game\022X\n"
    "\tpacket_id\030\001 \001(\0162+.game_prizeClaw_protoc"
    "ols.e_server_msg_type:\030e_mst_c2l_req_lea"
    "ve_game\"\267\001\n\037packetl2c_req_leave_game_res"
    "ult\022X\n\tpacket_id\030\001 \001(\0162+.game_prizeClaw_"
    "protocols.e_server_msg_type:\030e_mst_l2c_r"
    "eq_leave_game\022:\n\006result\030\002 \001(\0162\036.msg_type"
    "_def.e_msg_result_def:\ne_rmt_fail\"t\n\030pac"
    "ketc21_req_begin_pass\022X\n\tpacket_id\030\001 \001(\016"
    "2+.game_prizeClaw_protocols.e_server_msg"
    "_type:\030e_mst_c2l_req_begin_pass\"\306\001\n\037pack"
    "et12c_req_begin_pass_result\022X\n\tpacket_id"
    "\030\001 \001(\0162+.game_prizeClaw_protocols.e_serv"
    "er_msg_type:\030e_mst_l2c_req_begin_pass\022:\n"
    "\006result\030\002 \001(\0162\036.msg_type_def.e_msg_resul"
    "t_def:\ne_rmt_fail\022\r\n\005count\030\003 \001(\005\"q\n\016pack"
    "etc21_claw\022N\n\tpacket_id\030\001 \001(\0162+.game_pri"
    "zeClaw_protocols.e_server_msg_type:\016e_ms"
    "t_c2l_claw\022\017\n\007item_id\030\003 \001(\005\"\262\001\n\025packet12"
    "c_claw_result\022N\n\tpacket_id\030\001 \001(\0162+.game_"
    "prizeClaw_protocols.e_server_msg_type:\016e"
    "_mst_l2c_claw\022:\n\006result\030\002 \001(\0162\036.msg_type"
    "_def.e_msg_result_def:\ne_rmt_fail\022\r\n\005cou"
    "nt\030\003 \001(\005\"`\n\016packetc21_miss\022N\n\tpacket_id\030"
    "\001 \001(\0162+.game_prizeClaw_protocols.e_serve"
    "r_msg_type:\016e_mst_c2l_miss\"\262\001\n\025packet12c"
    "_miss_result\022N\n\tpacket_id\030\001 \001(\0162+.game_p"
    "rizeClaw_protocols.e_server_msg_type:\016e_"
    "mst_12c_miss\022:\n\006result\030\002 \001(\0162\036.msg_type_"
    "def.e_msg_result_def:\ne_rmt_fail\022\r\n\005coun"
    "t\030\003 \001(\005", 1967);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_prizeClaw_protocol.proto", &protobuf_RegisterTypes);
  packetc2l_get_player_info::default_instance_ = new packetc2l_get_player_info();
  packetl2c_get_player_info_result::default_instance_ = new packetl2c_get_player_info_result();
  packetc21_req_start_game::default_instance_ = new packetc21_req_start_game();
  packet12c_req_start_game_result::default_instance_ = new packet12c_req_start_game_result();
  packetc2l_req_leave_game::default_instance_ = new packetc2l_req_leave_game();
  packetl2c_req_leave_game_result::default_instance_ = new packetl2c_req_leave_game_result();
  packetc21_req_begin_pass::default_instance_ = new packetc21_req_begin_pass();
  packet12c_req_begin_pass_result::default_instance_ = new packet12c_req_begin_pass_result();
  packetc21_claw::default_instance_ = new packetc21_claw();
  packet12c_claw_result::default_instance_ = new packet12c_claw_result();
  packetc21_miss::default_instance_ = new packetc21_miss();
  packet12c_miss_result::default_instance_ = new packet12c_miss_result();
  packetc2l_get_player_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_player_info_result::default_instance_->InitAsDefaultInstance();
  packetc21_req_start_game::default_instance_->InitAsDefaultInstance();
  packet12c_req_start_game_result::default_instance_->InitAsDefaultInstance();
  packetc2l_req_leave_game::default_instance_->InitAsDefaultInstance();
  packetl2c_req_leave_game_result::default_instance_->InitAsDefaultInstance();
  packetc21_req_begin_pass::default_instance_->InitAsDefaultInstance();
  packet12c_req_begin_pass_result::default_instance_->InitAsDefaultInstance();
  packetc21_claw::default_instance_->InitAsDefaultInstance();
  packet12c_claw_result::default_instance_->InitAsDefaultInstance();
  packetc21_miss::default_instance_->InitAsDefaultInstance();
  packet12c_miss_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fprizeClaw_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fprizeClaw_5fprotocol_2eproto {
  StaticDescriptorInitializer_game_5fprizeClaw_5fprotocol_2eproto() {
    protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  }
} static_descriptor_initializer_game_5fprizeClaw_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_player_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_player_info::packetc2l_get_player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_player_info::InitAsDefaultInstance() {
}

packetc2l_get_player_info::packetc2l_get_player_info(const packetc2l_get_player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_player_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10001;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_player_info::~packetc2l_get_player_info() {
  SharedDtor();
}

void packetc2l_get_player_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_player_info_descriptor_;
}

const packetc2l_get_player_info& packetc2l_get_player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_player_info* packetc2l_get_player_info::default_instance_ = NULL;

packetc2l_get_player_info* packetc2l_get_player_info::New() const {
  return new packetc2l_get_player_info;
}

void packetc2l_get_player_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10001;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_player_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_prizeClaw_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_player_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_player_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_player_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_player_info::MergeFrom(const packetc2l_get_player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_player_info::CopyFrom(const packetc2l_get_player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_player_info::IsInitialized() const {

  return true;
}

void packetc2l_get_player_info::Swap(packetc2l_get_player_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_player_info_descriptor_;
  metadata.reflection = packetc2l_get_player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_player_info_result::kPacketIdFieldNumber;
const int packetl2c_get_player_info_result::kGameStateFieldNumber;
const int packetl2c_get_player_info_result::kTypeFieldNumber;
const int packetl2c_get_player_info_result::kCdTimeFieldNumber;
const int packetl2c_get_player_info_result::kCountFieldNumber;
const int packetl2c_get_player_info_result::kCatchRetFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_player_info_result::packetl2c_get_player_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_get_player_info_result::InitAsDefaultInstance() {
}

packetl2c_get_player_info_result::packetl2c_get_player_info_result(const packetl2c_get_player_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_get_player_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15001;
  game_state_ = 0;
  type_ = 0;
  cd_time_ = 0;
  count_ = 0;
  catch_ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_player_info_result::~packetl2c_get_player_info_result() {
  SharedDtor();
}

void packetl2c_get_player_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_get_player_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_player_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_player_info_result_descriptor_;
}

const packetl2c_get_player_info_result& packetl2c_get_player_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_get_player_info_result* packetl2c_get_player_info_result::default_instance_ = NULL;

packetl2c_get_player_info_result* packetl2c_get_player_info_result::New() const {
  return new packetl2c_get_player_info_result;
}

void packetl2c_get_player_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15001;
    game_state_ = 0;
    type_ = 0;
    cd_time_ = 0;
    count_ = 0;
    catch_ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_player_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_player_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_prizeClaw_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_state;
        break;
      }

      // optional int32 game_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_state_)));
          set_has_game_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cd_time;
        break;
      }

      // optional int32 cd_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_time_)));
          set_has_cd_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional int32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_catch_ret;
        break;
      }

      // optional int32 catch_ret = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_catch_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &catch_ret_)));
          set_has_catch_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_get_player_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_player_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 game_state = 2;
  if (has_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_state(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 cd_time = 4;
  if (has_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cd_time(), output);
  }

  // optional int32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }

  // optional int32 catch_ret = 6;
  if (has_catch_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->catch_ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_get_player_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_player_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 game_state = 2;
  if (has_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_state(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 cd_time = 4;
  if (has_cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cd_time(), target);
  }

  // optional int32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }

  // optional int32 catch_ret = 6;
  if (has_catch_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->catch_ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_get_player_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_player_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 game_state = 2;
    if (has_game_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_state());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 cd_time = 4;
    if (has_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd_time());
    }

    // optional int32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 catch_ret = 6;
    if (has_catch_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->catch_ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_player_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_player_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_player_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_player_info_result::MergeFrom(const packetl2c_get_player_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_game_state()) {
      set_game_state(from.game_state());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cd_time()) {
      set_cd_time(from.cd_time());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_catch_ret()) {
      set_catch_ret(from.catch_ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_player_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_player_info_result::CopyFrom(const packetl2c_get_player_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_player_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_player_info_result::Swap(packetl2c_get_player_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(game_state_, other->game_state_);
    std::swap(type_, other->type_);
    std::swap(cd_time_, other->cd_time_);
    std::swap(count_, other->count_);
    std::swap(catch_ret_, other->catch_ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_player_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_player_info_result_descriptor_;
  metadata.reflection = packetl2c_get_player_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc21_req_start_game::kPacketIdFieldNumber;
const int packetc21_req_start_game::kTypeFieldNumber;
#endif  // !_MSC_VER

packetc21_req_start_game::packetc21_req_start_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc21_req_start_game::InitAsDefaultInstance() {
}

packetc21_req_start_game::packetc21_req_start_game(const packetc21_req_start_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc21_req_start_game::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10002;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc21_req_start_game::~packetc21_req_start_game() {
  SharedDtor();
}

void packetc21_req_start_game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc21_req_start_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc21_req_start_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc21_req_start_game_descriptor_;
}

const packetc21_req_start_game& packetc21_req_start_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  return *default_instance_;
}

packetc21_req_start_game* packetc21_req_start_game::default_instance_ = NULL;

packetc21_req_start_game* packetc21_req_start_game::New() const {
  return new packetc21_req_start_game;
}

void packetc21_req_start_game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10002;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc21_req_start_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_start_game];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_prizeClaw_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc21_req_start_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_start_game];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc21_req_start_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_start_game];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc21_req_start_game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_start_game];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc21_req_start_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc21_req_start_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc21_req_start_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc21_req_start_game::MergeFrom(const packetc21_req_start_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc21_req_start_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc21_req_start_game::CopyFrom(const packetc21_req_start_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc21_req_start_game::IsInitialized() const {

  return true;
}

void packetc21_req_start_game::Swap(packetc21_req_start_game* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc21_req_start_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc21_req_start_game_descriptor_;
  metadata.reflection = packetc21_req_start_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet12c_req_start_game_result::kPacketIdFieldNumber;
const int packet12c_req_start_game_result::kResultFieldNumber;
const int packet12c_req_start_game_result::kTypeFieldNumber;
#endif  // !_MSC_VER

packet12c_req_start_game_result::packet12c_req_start_game_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet12c_req_start_game_result::InitAsDefaultInstance() {
}

packet12c_req_start_game_result::packet12c_req_start_game_result(const packet12c_req_start_game_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet12c_req_start_game_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15002;
  result_ = 2;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet12c_req_start_game_result::~packet12c_req_start_game_result() {
  SharedDtor();
}

void packet12c_req_start_game_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet12c_req_start_game_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet12c_req_start_game_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet12c_req_start_game_result_descriptor_;
}

const packet12c_req_start_game_result& packet12c_req_start_game_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  return *default_instance_;
}

packet12c_req_start_game_result* packet12c_req_start_game_result::default_instance_ = NULL;

packet12c_req_start_game_result* packet12c_req_start_game_result::New() const {
  return new packet12c_req_start_game_result;
}

void packet12c_req_start_game_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15002;
    result_ = 2;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet12c_req_start_game_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_start_game];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_prizeClaw_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet12c_req_start_game_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_start_game];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet12c_req_start_game_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_start_game];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet12c_req_start_game_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_start_game];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet12c_req_start_game_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet12c_req_start_game_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet12c_req_start_game_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet12c_req_start_game_result::MergeFrom(const packet12c_req_start_game_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet12c_req_start_game_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet12c_req_start_game_result::CopyFrom(const packet12c_req_start_game_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet12c_req_start_game_result::IsInitialized() const {

  return true;
}

void packet12c_req_start_game_result::Swap(packet12c_req_start_game_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet12c_req_start_game_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet12c_req_start_game_result_descriptor_;
  metadata.reflection = packet12c_req_start_game_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_req_leave_game::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_req_leave_game::packetc2l_req_leave_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_req_leave_game::InitAsDefaultInstance() {
}

packetc2l_req_leave_game::packetc2l_req_leave_game(const packetc2l_req_leave_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_req_leave_game::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10003;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_req_leave_game::~packetc2l_req_leave_game() {
  SharedDtor();
}

void packetc2l_req_leave_game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_req_leave_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_req_leave_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_req_leave_game_descriptor_;
}

const packetc2l_req_leave_game& packetc2l_req_leave_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_req_leave_game* packetc2l_req_leave_game::default_instance_ = NULL;

packetc2l_req_leave_game* packetc2l_req_leave_game::New() const {
  return new packetc2l_req_leave_game;
}

void packetc2l_req_leave_game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10003;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_req_leave_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_leave_game];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_prizeClaw_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_req_leave_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_leave_game];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_req_leave_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_leave_game];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_req_leave_game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_leave_game];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_req_leave_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_req_leave_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_req_leave_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_req_leave_game::MergeFrom(const packetc2l_req_leave_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_req_leave_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_req_leave_game::CopyFrom(const packetc2l_req_leave_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_req_leave_game::IsInitialized() const {

  return true;
}

void packetc2l_req_leave_game::Swap(packetc2l_req_leave_game* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_req_leave_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_req_leave_game_descriptor_;
  metadata.reflection = packetc2l_req_leave_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_req_leave_game_result::kPacketIdFieldNumber;
const int packetl2c_req_leave_game_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_req_leave_game_result::packetl2c_req_leave_game_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_req_leave_game_result::InitAsDefaultInstance() {
}

packetl2c_req_leave_game_result::packetl2c_req_leave_game_result(const packetl2c_req_leave_game_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_req_leave_game_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15003;
  result_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_req_leave_game_result::~packetl2c_req_leave_game_result() {
  SharedDtor();
}

void packetl2c_req_leave_game_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_req_leave_game_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_req_leave_game_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_req_leave_game_result_descriptor_;
}

const packetl2c_req_leave_game_result& packetl2c_req_leave_game_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_req_leave_game_result* packetl2c_req_leave_game_result::default_instance_ = NULL;

packetl2c_req_leave_game_result* packetl2c_req_leave_game_result::New() const {
  return new packetl2c_req_leave_game_result;
}

void packetl2c_req_leave_game_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15003;
    result_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_req_leave_game_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_leave_game];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_prizeClaw_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_req_leave_game_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_leave_game];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_req_leave_game_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_leave_game];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_req_leave_game_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_leave_game];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_req_leave_game_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_req_leave_game_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_req_leave_game_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_req_leave_game_result::MergeFrom(const packetl2c_req_leave_game_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_req_leave_game_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_req_leave_game_result::CopyFrom(const packetl2c_req_leave_game_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_req_leave_game_result::IsInitialized() const {

  return true;
}

void packetl2c_req_leave_game_result::Swap(packetl2c_req_leave_game_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_req_leave_game_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_req_leave_game_result_descriptor_;
  metadata.reflection = packetl2c_req_leave_game_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc21_req_begin_pass::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc21_req_begin_pass::packetc21_req_begin_pass()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc21_req_begin_pass::InitAsDefaultInstance() {
}

packetc21_req_begin_pass::packetc21_req_begin_pass(const packetc21_req_begin_pass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc21_req_begin_pass::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10004;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc21_req_begin_pass::~packetc21_req_begin_pass() {
  SharedDtor();
}

void packetc21_req_begin_pass::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc21_req_begin_pass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc21_req_begin_pass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc21_req_begin_pass_descriptor_;
}

const packetc21_req_begin_pass& packetc21_req_begin_pass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  return *default_instance_;
}

packetc21_req_begin_pass* packetc21_req_begin_pass::default_instance_ = NULL;

packetc21_req_begin_pass* packetc21_req_begin_pass::New() const {
  return new packetc21_req_begin_pass;
}

void packetc21_req_begin_pass::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10004;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc21_req_begin_pass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_begin_pass];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_prizeClaw_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc21_req_begin_pass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_begin_pass];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc21_req_begin_pass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_begin_pass];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc21_req_begin_pass::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_begin_pass];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc21_req_begin_pass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc21_req_begin_pass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc21_req_begin_pass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc21_req_begin_pass::MergeFrom(const packetc21_req_begin_pass& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc21_req_begin_pass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc21_req_begin_pass::CopyFrom(const packetc21_req_begin_pass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc21_req_begin_pass::IsInitialized() const {

  return true;
}

void packetc21_req_begin_pass::Swap(packetc21_req_begin_pass* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc21_req_begin_pass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc21_req_begin_pass_descriptor_;
  metadata.reflection = packetc21_req_begin_pass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet12c_req_begin_pass_result::kPacketIdFieldNumber;
const int packet12c_req_begin_pass_result::kResultFieldNumber;
const int packet12c_req_begin_pass_result::kCountFieldNumber;
#endif  // !_MSC_VER

packet12c_req_begin_pass_result::packet12c_req_begin_pass_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet12c_req_begin_pass_result::InitAsDefaultInstance() {
}

packet12c_req_begin_pass_result::packet12c_req_begin_pass_result(const packet12c_req_begin_pass_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet12c_req_begin_pass_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15004;
  result_ = 2;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet12c_req_begin_pass_result::~packet12c_req_begin_pass_result() {
  SharedDtor();
}

void packet12c_req_begin_pass_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet12c_req_begin_pass_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet12c_req_begin_pass_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet12c_req_begin_pass_result_descriptor_;
}

const packet12c_req_begin_pass_result& packet12c_req_begin_pass_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  return *default_instance_;
}

packet12c_req_begin_pass_result* packet12c_req_begin_pass_result::default_instance_ = NULL;

packet12c_req_begin_pass_result* packet12c_req_begin_pass_result::New() const {
  return new packet12c_req_begin_pass_result;
}

void packet12c_req_begin_pass_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15004;
    result_ = 2;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet12c_req_begin_pass_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_begin_pass];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_prizeClaw_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet12c_req_begin_pass_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_begin_pass];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet12c_req_begin_pass_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_begin_pass];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet12c_req_begin_pass_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_begin_pass];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet12c_req_begin_pass_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet12c_req_begin_pass_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet12c_req_begin_pass_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet12c_req_begin_pass_result::MergeFrom(const packet12c_req_begin_pass_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet12c_req_begin_pass_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet12c_req_begin_pass_result::CopyFrom(const packet12c_req_begin_pass_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet12c_req_begin_pass_result::IsInitialized() const {

  return true;
}

void packet12c_req_begin_pass_result::Swap(packet12c_req_begin_pass_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet12c_req_begin_pass_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet12c_req_begin_pass_result_descriptor_;
  metadata.reflection = packet12c_req_begin_pass_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc21_claw::kPacketIdFieldNumber;
const int packetc21_claw::kItemIdFieldNumber;
#endif  // !_MSC_VER

packetc21_claw::packetc21_claw()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc21_claw::InitAsDefaultInstance() {
}

packetc21_claw::packetc21_claw(const packetc21_claw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc21_claw::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10005;
  item_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc21_claw::~packetc21_claw() {
  SharedDtor();
}

void packetc21_claw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc21_claw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc21_claw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc21_claw_descriptor_;
}

const packetc21_claw& packetc21_claw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  return *default_instance_;
}

packetc21_claw* packetc21_claw::default_instance_ = NULL;

packetc21_claw* packetc21_claw::New() const {
  return new packetc21_claw;
}

void packetc21_claw::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10005;
    item_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc21_claw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_claw];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_prizeClaw_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // optional int32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc21_claw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_claw];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc21_claw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_claw];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc21_claw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_claw];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc21_claw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc21_claw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc21_claw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc21_claw::MergeFrom(const packetc21_claw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc21_claw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc21_claw::CopyFrom(const packetc21_claw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc21_claw::IsInitialized() const {

  return true;
}

void packetc21_claw::Swap(packetc21_claw* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc21_claw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc21_claw_descriptor_;
  metadata.reflection = packetc21_claw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet12c_claw_result::kPacketIdFieldNumber;
const int packet12c_claw_result::kResultFieldNumber;
const int packet12c_claw_result::kCountFieldNumber;
#endif  // !_MSC_VER

packet12c_claw_result::packet12c_claw_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet12c_claw_result::InitAsDefaultInstance() {
}

packet12c_claw_result::packet12c_claw_result(const packet12c_claw_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet12c_claw_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15005;
  result_ = 2;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet12c_claw_result::~packet12c_claw_result() {
  SharedDtor();
}

void packet12c_claw_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet12c_claw_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet12c_claw_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet12c_claw_result_descriptor_;
}

const packet12c_claw_result& packet12c_claw_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  return *default_instance_;
}

packet12c_claw_result* packet12c_claw_result::default_instance_ = NULL;

packet12c_claw_result* packet12c_claw_result::New() const {
  return new packet12c_claw_result;
}

void packet12c_claw_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15005;
    result_ = 2;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet12c_claw_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_claw];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_prizeClaw_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet12c_claw_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_claw];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet12c_claw_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_claw];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet12c_claw_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_claw];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet12c_claw_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet12c_claw_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet12c_claw_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet12c_claw_result::MergeFrom(const packet12c_claw_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet12c_claw_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet12c_claw_result::CopyFrom(const packet12c_claw_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet12c_claw_result::IsInitialized() const {

  return true;
}

void packet12c_claw_result::Swap(packet12c_claw_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet12c_claw_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet12c_claw_result_descriptor_;
  metadata.reflection = packet12c_claw_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc21_miss::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc21_miss::packetc21_miss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc21_miss::InitAsDefaultInstance() {
}

packetc21_miss::packetc21_miss(const packetc21_miss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc21_miss::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10006;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc21_miss::~packetc21_miss() {
  SharedDtor();
}

void packetc21_miss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc21_miss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc21_miss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc21_miss_descriptor_;
}

const packetc21_miss& packetc21_miss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  return *default_instance_;
}

packetc21_miss* packetc21_miss::default_instance_ = NULL;

packetc21_miss* packetc21_miss::New() const {
  return new packetc21_miss;
}

void packetc21_miss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10006;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc21_miss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_miss];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_prizeClaw_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc21_miss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_miss];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc21_miss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_miss];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc21_miss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_miss];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc21_miss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc21_miss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc21_miss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc21_miss::MergeFrom(const packetc21_miss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc21_miss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc21_miss::CopyFrom(const packetc21_miss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc21_miss::IsInitialized() const {

  return true;
}

void packetc21_miss::Swap(packetc21_miss* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc21_miss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc21_miss_descriptor_;
  metadata.reflection = packetc21_miss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet12c_miss_result::kPacketIdFieldNumber;
const int packet12c_miss_result::kResultFieldNumber;
const int packet12c_miss_result::kCountFieldNumber;
#endif  // !_MSC_VER

packet12c_miss_result::packet12c_miss_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet12c_miss_result::InitAsDefaultInstance() {
}

packet12c_miss_result::packet12c_miss_result(const packet12c_miss_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet12c_miss_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15006;
  result_ = 2;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet12c_miss_result::~packet12c_miss_result() {
  SharedDtor();
}

void packet12c_miss_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet12c_miss_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet12c_miss_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet12c_miss_result_descriptor_;
}

const packet12c_miss_result& packet12c_miss_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprizeClaw_5fprotocol_2eproto();
  return *default_instance_;
}

packet12c_miss_result* packet12c_miss_result::default_instance_ = NULL;

packet12c_miss_result* packet12c_miss_result::New() const {
  return new packet12c_miss_result;
}

void packet12c_miss_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15006;
    result_ = 2;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet12c_miss_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_12c_miss];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_prizeClaw_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_prizeClaw_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet12c_miss_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_12c_miss];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet12c_miss_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_12c_miss];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet12c_miss_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_prizeClaw_protocols.e_server_msg_type packet_id = 1 [default = e_mst_12c_miss];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet12c_miss_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet12c_miss_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet12c_miss_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet12c_miss_result::MergeFrom(const packet12c_miss_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet12c_miss_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet12c_miss_result::CopyFrom(const packet12c_miss_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet12c_miss_result::IsInitialized() const {

  return true;
}

void packet12c_miss_result::Swap(packet12c_miss_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet12c_miss_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet12c_miss_result_descriptor_;
  metadata.reflection = packet12c_miss_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_prizeClaw_protocols

// @@protoc_insertion_point(global_scope)
