// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fish_monkey_logic.proto

#ifndef PROTOBUF_fish_5fmonkey_5flogic_2eproto__INCLUDED
#define PROTOBUF_fish_5fmonkey_5flogic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "fish_monkey_def.pb.h"
#include "msg_type_def.pb.h"
// @@protoc_insertion_point(includes)

namespace fish_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

class packetc2l_get_scene_info;
class msg_fish_init;
class msg_generator_init;
class msg_scene_info;
class msg_buff_info;
class msg_seat_info;
class packetl2c_get_scene_info_result;
class packetc2l_change_seat;
class packetc2l_change_rate;
class packetl2c_change_seat_result;
class packetl2c_change_rate_result;
class packetc2l_try_turret;
class packetl2c_try_turret_result;
class packetc2l_try_turret_state;
class packetl2c_try_turret_state_result;
class packetc2l_use_turret_power;
class packetl2c_use_turret_power_result;
class packetc2l_turret_rotate;
class packetc2l_sync_gold;
class packetl2c_bc_enter_seat;
class packetl2c_bc_leave_seat;
class packetl2c_robot_enter;
class packetl2c_robot_leave;
class packetl2c_bc_change_rate;
class packetl2c_bc_change_attr;
class msg_fish_info;
class packetl2c_bc_create_fish;
class packetl2c_bc_create_generator;
class packetc2l_manual_fire;
class packetl2c_manual_fire_fail;
class packetl2c_bc_manual_fire;
class packetc2l_missile_fire;
class packetl2c_bc_missile_fire;
class packetc2l_hit_fish;
class packetc2l_hit_fishs;
class packetl2c_bc_fish_die;
class packetl2c_bc_specialfish_die;
class packetl2c_bc_fishs_die;
class packetl2c_bc_change_scene;
class packetl2c_bc_addbuff;
class packetl2c_bc_removebuff;
class packetl2c_bc_changeturret;
class packetc2l_lock_fish;
class packetl2c_bc_lock_fish;
class packetl2c_bc_freeze;
class packetl2c_bc_change_scene_bg;
class packetl2c_bc_scene_time;
class packetl2c_bc_hit_fishs;
class packetl2c_bc_turret_rotate;
class packetl2c_bc_change_max_power;
class packetl2c_bc_debuginfo;

// ===================================================================

class packetc2l_get_scene_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_scene_info();
  virtual ~packetc2l_get_scene_info();

  packetc2l_get_scene_info(const packetc2l_get_scene_info& from);

  inline packetc2l_get_scene_info& operator=(const packetc2l_get_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_scene_info& default_instance();

  void Swap(packetc2l_get_scene_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_scene_info& from);
  void MergeFrom(const packetc2l_get_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetc2l_get_scene_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_fish_init : public ::google::protobuf::Message {
 public:
  msg_fish_init();
  virtual ~msg_fish_init();

  msg_fish_init(const msg_fish_init& from);

  inline msg_fish_init& operator=(const msg_fish_init& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_fish_init& default_instance();

  void Swap(msg_fish_init* other);

  // implements Message ----------------------------------------------

  msg_fish_init* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_fish_init& from);
  void MergeFrom(const msg_fish_init& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 fish_id = 2;
  inline bool has_fish_id() const;
  inline void clear_fish_id();
  static const int kFishIdFieldNumber = 2;
  inline ::google::protobuf::int32 fish_id() const;
  inline void set_fish_id(::google::protobuf::int32 value);

  // optional int32 life_time = 3;
  inline bool has_life_time() const;
  inline void clear_life_time();
  static const int kLifeTimeFieldNumber = 3;
  inline ::google::protobuf::int32 life_time() const;
  inline void set_life_time(::google::protobuf::int32 value);

  // repeated int32 route_param = 4;
  inline int route_param_size() const;
  inline void clear_route_param();
  static const int kRouteParamFieldNumber = 4;
  inline ::google::protobuf::int32 route_param(int index) const;
  inline void set_route_param(int index, ::google::protobuf::int32 value);
  inline void add_route_param(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      route_param() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_route_param();

  // @@protoc_insertion_point(class_scope:fish_protocols.msg_fish_init)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_fish_id();
  inline void clear_has_fish_id();
  inline void set_has_life_time();
  inline void clear_has_life_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 fish_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > route_param_;
  ::google::protobuf::int32 life_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static msg_fish_init* default_instance_;
};
// -------------------------------------------------------------------

class msg_generator_init : public ::google::protobuf::Message {
 public:
  msg_generator_init();
  virtual ~msg_generator_init();

  msg_generator_init(const msg_generator_init& from);

  inline msg_generator_init& operator=(const msg_generator_init& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_generator_init& default_instance();

  void Swap(msg_generator_init* other);

  // implements Message ----------------------------------------------

  msg_generator_init* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_generator_init& from);
  void MergeFrom(const msg_generator_init& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 generator_id = 1;
  inline bool has_generator_id() const;
  inline void clear_generator_id();
  static const int kGeneratorIdFieldNumber = 1;
  inline ::google::protobuf::int32 generator_id() const;
  inline void set_generator_id(::google::protobuf::int32 value);

  // optional int32 life_time = 2;
  inline bool has_life_time() const;
  inline void clear_life_time();
  static const int kLifeTimeFieldNumber = 2;
  inline ::google::protobuf::int32 life_time() const;
  inline void set_life_time(::google::protobuf::int32 value);

  // optional int32 start_id = 3;
  inline bool has_start_id() const;
  inline void clear_start_id();
  static const int kStartIdFieldNumber = 3;
  inline ::google::protobuf::int32 start_id() const;
  inline void set_start_id(::google::protobuf::int32 value);

  // optional int32 route_id = 4 [default = 0];
  inline bool has_route_id() const;
  inline void clear_route_id();
  static const int kRouteIdFieldNumber = 4;
  inline ::google::protobuf::int32 route_id() const;
  inline void set_route_id(::google::protobuf::int32 value);

  // optional int32 pos_x = 5 [default = 0];
  inline bool has_pos_x() const;
  inline void clear_pos_x();
  static const int kPosXFieldNumber = 5;
  inline ::google::protobuf::int32 pos_x() const;
  inline void set_pos_x(::google::protobuf::int32 value);

  // optional int32 pos_y = 6 [default = 0];
  inline bool has_pos_y() const;
  inline void clear_pos_y();
  static const int kPosYFieldNumber = 6;
  inline ::google::protobuf::int32 pos_y() const;
  inline void set_pos_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.msg_generator_init)
 private:
  inline void set_has_generator_id();
  inline void clear_has_generator_id();
  inline void set_has_life_time();
  inline void clear_has_life_time();
  inline void set_has_start_id();
  inline void clear_has_start_id();
  inline void set_has_route_id();
  inline void clear_has_route_id();
  inline void set_has_pos_x();
  inline void clear_has_pos_x();
  inline void set_has_pos_y();
  inline void clear_has_pos_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 generator_id_;
  ::google::protobuf::int32 life_time_;
  ::google::protobuf::int32 start_id_;
  ::google::protobuf::int32 route_id_;
  ::google::protobuf::int32 pos_x_;
  ::google::protobuf::int32 pos_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static msg_generator_init* default_instance_;
};
// -------------------------------------------------------------------

class msg_scene_info : public ::google::protobuf::Message {
 public:
  msg_scene_info();
  virtual ~msg_scene_info();

  msg_scene_info(const msg_scene_info& from);

  inline msg_scene_info& operator=(const msg_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_scene_info& default_instance();

  void Swap(msg_scene_info* other);

  // implements Message ----------------------------------------------

  msg_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_scene_info& from);
  void MergeFrom(const msg_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sceneid = 1;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneidFieldNumber = 1;
  inline ::google::protobuf::int32 sceneid() const;
  inline void set_sceneid(::google::protobuf::int32 value);

  // optional int32 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // repeated .fish_protocols.msg_seat_info seat_info = 3;
  inline int seat_info_size() const;
  inline void clear_seat_info();
  static const int kSeatInfoFieldNumber = 3;
  inline const ::fish_protocols::msg_seat_info& seat_info(int index) const;
  inline ::fish_protocols::msg_seat_info* mutable_seat_info(int index);
  inline ::fish_protocols::msg_seat_info* add_seat_info();
  inline const ::google::protobuf::RepeatedPtrField< ::fish_protocols::msg_seat_info >&
      seat_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::fish_protocols::msg_seat_info >*
      mutable_seat_info();

  // repeated .fish_protocols.msg_fish_init fish_infos = 4;
  inline int fish_infos_size() const;
  inline void clear_fish_infos();
  static const int kFishInfosFieldNumber = 4;
  inline const ::fish_protocols::msg_fish_init& fish_infos(int index) const;
  inline ::fish_protocols::msg_fish_init* mutable_fish_infos(int index);
  inline ::fish_protocols::msg_fish_init* add_fish_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::fish_protocols::msg_fish_init >&
      fish_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::fish_protocols::msg_fish_init >*
      mutable_fish_infos();

  // repeated .fish_protocols.msg_generator_init generator_infos = 5;
  inline int generator_infos_size() const;
  inline void clear_generator_infos();
  static const int kGeneratorInfosFieldNumber = 5;
  inline const ::fish_protocols::msg_generator_init& generator_infos(int index) const;
  inline ::fish_protocols::msg_generator_init* mutable_generator_infos(int index);
  inline ::fish_protocols::msg_generator_init* add_generator_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::fish_protocols::msg_generator_init >&
      generator_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::fish_protocols::msg_generator_init >*
      mutable_generator_infos();

  // @@protoc_insertion_point(class_scope:fish_protocols.msg_scene_info)
 private:
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 sceneid_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::RepeatedPtrField< ::fish_protocols::msg_seat_info > seat_info_;
  ::google::protobuf::RepeatedPtrField< ::fish_protocols::msg_fish_init > fish_infos_;
  ::google::protobuf::RepeatedPtrField< ::fish_protocols::msg_generator_init > generator_infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static msg_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_buff_info : public ::google::protobuf::Message {
 public:
  msg_buff_info();
  virtual ~msg_buff_info();

  msg_buff_info(const msg_buff_info& from);

  inline msg_buff_info& operator=(const msg_buff_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_buff_info& default_instance();

  void Swap(msg_buff_info* other);

  // implements Message ----------------------------------------------

  msg_buff_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_buff_info& from);
  void MergeFrom(const msg_buff_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 buffid = 1;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffidFieldNumber = 1;
  inline ::google::protobuf::int32 buffid() const;
  inline void set_buffid(::google::protobuf::int32 value);

  // optional int32 outtime = 2 [default = -1];
  inline bool has_outtime() const;
  inline void clear_outtime();
  static const int kOuttimeFieldNumber = 2;
  inline ::google::protobuf::int32 outtime() const;
  inline void set_outtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.msg_buff_info)
 private:
  inline void set_has_buffid();
  inline void clear_has_buffid();
  inline void set_has_outtime();
  inline void clear_has_outtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 buffid_;
  ::google::protobuf::int32 outtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static msg_buff_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_seat_info : public ::google::protobuf::Message {
 public:
  msg_seat_info();
  virtual ~msg_seat_info();

  msg_seat_info(const msg_seat_info& from);

  inline msg_seat_info& operator=(const msg_seat_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_seat_info& default_instance();

  void Swap(msg_seat_info* other);

  // implements Message ----------------------------------------------

  msg_seat_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_seat_info& from);
  void MergeFrom(const msg_seat_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 seat_index = 1;
  inline bool has_seat_index() const;
  inline void clear_seat_index();
  static const int kSeatIndexFieldNumber = 1;
  inline ::google::protobuf::int32 seat_index() const;
  inline void set_seat_index(::google::protobuf::int32 value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional string nickname = 3;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int64 player_gold = 4;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 4;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // optional int32 turret_rate = 5;
  inline bool has_turret_rate() const;
  inline void clear_turret_rate();
  static const int kTurretRateFieldNumber = 5;
  inline ::google::protobuf::int32 turret_rate() const;
  inline void set_turret_rate(::google::protobuf::int32 value);

  // optional int32 turret_id = 6;
  inline bool has_turret_id() const;
  inline void clear_turret_id();
  static const int kTurretIdFieldNumber = 6;
  inline ::google::protobuf::int32 turret_id() const;
  inline void set_turret_id(::google::protobuf::int32 value);

  // repeated .fish_protocols.msg_buff_info bufflist = 7;
  inline int bufflist_size() const;
  inline void clear_bufflist();
  static const int kBufflistFieldNumber = 7;
  inline const ::fish_protocols::msg_buff_info& bufflist(int index) const;
  inline ::fish_protocols::msg_buff_info* mutable_bufflist(int index);
  inline ::fish_protocols::msg_buff_info* add_bufflist();
  inline const ::google::protobuf::RepeatedPtrField< ::fish_protocols::msg_buff_info >&
      bufflist() const;
  inline ::google::protobuf::RepeatedPtrField< ::fish_protocols::msg_buff_info >*
      mutable_bufflist();

  // optional int32 turret_power = 8;
  inline bool has_turret_power() const;
  inline void clear_turret_power();
  static const int kTurretPowerFieldNumber = 8;
  inline ::google::protobuf::int32 turret_power() const;
  inline void set_turret_power(::google::protobuf::int32 value);

  // optional int32 max_turret_power = 9;
  inline bool has_max_turret_power() const;
  inline void clear_max_turret_power();
  static const int kMaxTurretPowerFieldNumber = 9;
  inline ::google::protobuf::int32 max_turret_power() const;
  inline void set_max_turret_power(::google::protobuf::int32 value);

  // optional int32 photo_frame = 10;
  inline bool has_photo_frame() const;
  inline void clear_photo_frame();
  static const int kPhotoFrameFieldNumber = 10;
  inline ::google::protobuf::int32 photo_frame() const;
  inline void set_photo_frame(::google::protobuf::int32 value);

  // optional string icon_custom = 11;
  inline bool has_icon_custom() const;
  inline void clear_icon_custom();
  static const int kIconCustomFieldNumber = 11;
  inline const ::std::string& icon_custom() const;
  inline void set_icon_custom(const ::std::string& value);
  inline void set_icon_custom(const char* value);
  inline void set_icon_custom(const char* value, size_t size);
  inline ::std::string* mutable_icon_custom();
  inline ::std::string* release_icon_custom();
  inline void set_allocated_icon_custom(::std::string* icon_custom);

  // optional int32 sex = 12;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 12;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 vip = 13;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 13;
  inline ::google::protobuf::int32 vip() const;
  inline void set_vip(::google::protobuf::int32 value);

  // optional int32 player_ticket = 14;
  inline bool has_player_ticket() const;
  inline void clear_player_ticket();
  static const int kPlayerTicketFieldNumber = 14;
  inline ::google::protobuf::int32 player_ticket() const;
  inline void set_player_ticket(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.msg_seat_info)
 private:
  inline void set_has_seat_index();
  inline void clear_has_seat_index();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();
  inline void set_has_turret_rate();
  inline void clear_has_turret_rate();
  inline void set_has_turret_id();
  inline void clear_has_turret_id();
  inline void set_has_turret_power();
  inline void clear_has_turret_power();
  inline void set_has_max_turret_power();
  inline void clear_has_max_turret_power();
  inline void set_has_photo_frame();
  inline void clear_has_photo_frame();
  inline void set_has_icon_custom();
  inline void clear_has_icon_custom();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_player_ticket();
  inline void clear_has_player_ticket();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_index_;
  ::google::protobuf::int32 player_id_;
  ::std::string* nickname_;
  ::google::protobuf::int64 player_gold_;
  ::google::protobuf::int32 turret_rate_;
  ::google::protobuf::int32 turret_id_;
  ::google::protobuf::RepeatedPtrField< ::fish_protocols::msg_buff_info > bufflist_;
  ::google::protobuf::int32 turret_power_;
  ::google::protobuf::int32 max_turret_power_;
  ::std::string* icon_custom_;
  ::google::protobuf::int32 photo_frame_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 vip_;
  ::google::protobuf::int32 player_ticket_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static msg_seat_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_get_scene_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_get_scene_info_result();
  virtual ~packetl2c_get_scene_info_result();

  packetl2c_get_scene_info_result(const packetl2c_get_scene_info_result& from);

  inline packetl2c_get_scene_info_result& operator=(const packetl2c_get_scene_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_get_scene_info_result& default_instance();

  void Swap(packetl2c_get_scene_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_get_scene_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_get_scene_info_result& from);
  void MergeFrom(const packetl2c_get_scene_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional .fish_protocols.msg_scene_info scene_info = 2;
  inline bool has_scene_info() const;
  inline void clear_scene_info();
  static const int kSceneInfoFieldNumber = 2;
  inline const ::fish_protocols::msg_scene_info& scene_info() const;
  inline ::fish_protocols::msg_scene_info* mutable_scene_info();
  inline ::fish_protocols::msg_scene_info* release_scene_info();
  inline void set_allocated_scene_info(::fish_protocols::msg_scene_info* scene_info);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_get_scene_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_scene_info();
  inline void clear_has_scene_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::fish_protocols::msg_scene_info* scene_info_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_get_scene_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_change_seat : public ::google::protobuf::Message {
 public:
  packetc2l_change_seat();
  virtual ~packetc2l_change_seat();

  packetc2l_change_seat(const packetc2l_change_seat& from);

  inline packetc2l_change_seat& operator=(const packetc2l_change_seat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_change_seat& default_instance();

  void Swap(packetc2l_change_seat* other);

  // implements Message ----------------------------------------------

  packetc2l_change_seat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_change_seat& from);
  void MergeFrom(const packetc2l_change_seat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_seat];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int32 seat_index = 3;
  inline bool has_seat_index() const;
  inline void clear_seat_index();
  static const int kSeatIndexFieldNumber = 3;
  inline ::google::protobuf::int32 seat_index() const;
  inline void set_seat_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetc2l_change_seat)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_seat_index();
  inline void clear_has_seat_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 seat_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_change_seat* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_change_rate : public ::google::protobuf::Message {
 public:
  packetc2l_change_rate();
  virtual ~packetc2l_change_rate();

  packetc2l_change_rate(const packetc2l_change_rate& from);

  inline packetc2l_change_rate& operator=(const packetc2l_change_rate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_change_rate& default_instance();

  void Swap(packetc2l_change_rate* other);

  // implements Message ----------------------------------------------

  packetc2l_change_rate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_change_rate& from);
  void MergeFrom(const packetc2l_change_rate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_rate];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 turret_rate = 2;
  inline bool has_turret_rate() const;
  inline void clear_turret_rate();
  static const int kTurretRateFieldNumber = 2;
  inline ::google::protobuf::int32 turret_rate() const;
  inline void set_turret_rate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetc2l_change_rate)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_turret_rate();
  inline void clear_has_turret_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 turret_rate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_change_rate* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_change_seat_result : public ::google::protobuf::Message {
 public:
  packetl2c_change_seat_result();
  virtual ~packetl2c_change_seat_result();

  packetl2c_change_seat_result(const packetl2c_change_seat_result& from);

  inline packetl2c_change_seat_result& operator=(const packetl2c_change_seat_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_change_seat_result& default_instance();

  void Swap(packetl2c_change_seat_result* other);

  // implements Message ----------------------------------------------

  packetl2c_change_seat_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_change_seat_result& from);
  void MergeFrom(const packetl2c_change_seat_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_seat_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_change_seat_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_change_seat_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_change_rate_result : public ::google::protobuf::Message {
 public:
  packetl2c_change_rate_result();
  virtual ~packetl2c_change_rate_result();

  packetl2c_change_rate_result(const packetl2c_change_rate_result& from);

  inline packetl2c_change_rate_result& operator=(const packetl2c_change_rate_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_change_rate_result& default_instance();

  void Swap(packetl2c_change_rate_result* other);

  // implements Message ----------------------------------------------

  packetl2c_change_rate_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_change_rate_result& from);
  void MergeFrom(const packetl2c_change_rate_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_rate_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 old_rate = 3;
  inline bool has_old_rate() const;
  inline void clear_old_rate();
  static const int kOldRateFieldNumber = 3;
  inline ::google::protobuf::int32 old_rate() const;
  inline void set_old_rate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_change_rate_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_old_rate();
  inline void clear_has_old_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int32 old_rate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_change_rate_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_try_turret : public ::google::protobuf::Message {
 public:
  packetc2l_try_turret();
  virtual ~packetc2l_try_turret();

  packetc2l_try_turret(const packetc2l_try_turret& from);

  inline packetc2l_try_turret& operator=(const packetc2l_try_turret& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_try_turret& default_instance();

  void Swap(packetc2l_try_turret* other);

  // implements Message ----------------------------------------------

  packetc2l_try_turret* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_try_turret& from);
  void MergeFrom(const packetc2l_try_turret& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_try_turret];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetc2l_try_turret)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_try_turret* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_try_turret_result : public ::google::protobuf::Message {
 public:
  packetl2c_try_turret_result();
  virtual ~packetl2c_try_turret_result();

  packetl2c_try_turret_result(const packetl2c_try_turret_result& from);

  inline packetl2c_try_turret_result& operator=(const packetl2c_try_turret_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_try_turret_result& default_instance();

  void Swap(packetl2c_try_turret_result* other);

  // implements Message ----------------------------------------------

  packetl2c_try_turret_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_try_turret_result& from);
  void MergeFrom(const packetl2c_try_turret_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_try_turret_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 try_turret_id = 3 [default = -1];
  inline bool has_try_turret_id() const;
  inline void clear_try_turret_id();
  static const int kTryTurretIdFieldNumber = 3;
  inline ::google::protobuf::int32 try_turret_id() const;
  inline void set_try_turret_id(::google::protobuf::int32 value);

  // optional int32 try_endtime = 4;
  inline bool has_try_endtime() const;
  inline void clear_try_endtime();
  static const int kTryEndtimeFieldNumber = 4;
  inline ::google::protobuf::int32 try_endtime() const;
  inline void set_try_endtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_try_turret_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_try_turret_id();
  inline void clear_has_try_turret_id();
  inline void set_has_try_endtime();
  inline void clear_has_try_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int32 try_turret_id_;
  ::google::protobuf::int32 try_endtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_try_turret_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_try_turret_state : public ::google::protobuf::Message {
 public:
  packetc2l_try_turret_state();
  virtual ~packetc2l_try_turret_state();

  packetc2l_try_turret_state(const packetc2l_try_turret_state& from);

  inline packetc2l_try_turret_state& operator=(const packetc2l_try_turret_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_try_turret_state& default_instance();

  void Swap(packetc2l_try_turret_state* other);

  // implements Message ----------------------------------------------

  packetc2l_try_turret_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_try_turret_state& from);
  void MergeFrom(const packetc2l_try_turret_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_try_turret_state];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetc2l_try_turret_state)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_try_turret_state* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_try_turret_state_result : public ::google::protobuf::Message {
 public:
  packetl2c_try_turret_state_result();
  virtual ~packetl2c_try_turret_state_result();

  packetl2c_try_turret_state_result(const packetl2c_try_turret_state_result& from);

  inline packetl2c_try_turret_state_result& operator=(const packetl2c_try_turret_state_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_try_turret_state_result& default_instance();

  void Swap(packetl2c_try_turret_state_result* other);

  // implements Message ----------------------------------------------

  packetl2c_try_turret_state_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_try_turret_state_result& from);
  void MergeFrom(const packetl2c_try_turret_state_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_try_turret_state_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 try_turret_id = 2 [default = -1];
  inline bool has_try_turret_id() const;
  inline void clear_try_turret_id();
  static const int kTryTurretIdFieldNumber = 2;
  inline ::google::protobuf::int32 try_turret_id() const;
  inline void set_try_turret_id(::google::protobuf::int32 value);

  // optional int32 fire_count = 3;
  inline bool has_fire_count() const;
  inline void clear_fire_count();
  static const int kFireCountFieldNumber = 3;
  inline ::google::protobuf::int32 fire_count() const;
  inline void set_fire_count(::google::protobuf::int32 value);

  // optional int32 try_cd = 4;
  inline bool has_try_cd() const;
  inline void clear_try_cd();
  static const int kTryCdFieldNumber = 4;
  inline ::google::protobuf::int32 try_cd() const;
  inline void set_try_cd(::google::protobuf::int32 value);

  // optional int32 try_endtime = 5;
  inline bool has_try_endtime() const;
  inline void clear_try_endtime();
  static const int kTryEndtimeFieldNumber = 5;
  inline ::google::protobuf::int32 try_endtime() const;
  inline void set_try_endtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_try_turret_state_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_try_turret_id();
  inline void clear_has_try_turret_id();
  inline void set_has_fire_count();
  inline void clear_has_fire_count();
  inline void set_has_try_cd();
  inline void clear_has_try_cd();
  inline void set_has_try_endtime();
  inline void clear_has_try_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 try_turret_id_;
  ::google::protobuf::int32 fire_count_;
  ::google::protobuf::int32 try_cd_;
  ::google::protobuf::int32 try_endtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_try_turret_state_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_use_turret_power : public ::google::protobuf::Message {
 public:
  packetc2l_use_turret_power();
  virtual ~packetc2l_use_turret_power();

  packetc2l_use_turret_power(const packetc2l_use_turret_power& from);

  inline packetc2l_use_turret_power& operator=(const packetc2l_use_turret_power& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_use_turret_power& default_instance();

  void Swap(packetc2l_use_turret_power* other);

  // implements Message ----------------------------------------------

  packetc2l_use_turret_power* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_use_turret_power& from);
  void MergeFrom(const packetc2l_use_turret_power& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_use_turret_power];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional bool is_buy = 2 [default = false];
  inline bool has_is_buy() const;
  inline void clear_is_buy();
  static const int kIsBuyFieldNumber = 2;
  inline bool is_buy() const;
  inline void set_is_buy(bool value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetc2l_use_turret_power)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_is_buy();
  inline void clear_has_is_buy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  bool is_buy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_use_turret_power* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_use_turret_power_result : public ::google::protobuf::Message {
 public:
  packetl2c_use_turret_power_result();
  virtual ~packetl2c_use_turret_power_result();

  packetl2c_use_turret_power_result(const packetl2c_use_turret_power_result& from);

  inline packetl2c_use_turret_power_result& operator=(const packetl2c_use_turret_power_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_use_turret_power_result& default_instance();

  void Swap(packetl2c_use_turret_power_result* other);

  // implements Message ----------------------------------------------

  packetl2c_use_turret_power_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_use_turret_power_result& from);
  void MergeFrom(const packetl2c_use_turret_power_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_use_turret_power_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 power_type = 3;
  inline bool has_power_type() const;
  inline void clear_power_type();
  static const int kPowerTypeFieldNumber = 3;
  inline ::google::protobuf::int32 power_type() const;
  inline void set_power_type(::google::protobuf::int32 value);

  // optional bool is_buy = 4 [default = false];
  inline bool has_is_buy() const;
  inline void clear_is_buy();
  static const int kIsBuyFieldNumber = 4;
  inline bool is_buy() const;
  inline void set_is_buy(bool value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_use_turret_power_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_power_type();
  inline void clear_has_power_type();
  inline void set_has_is_buy();
  inline void clear_has_is_buy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int32 power_type_;
  bool is_buy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_use_turret_power_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_turret_rotate : public ::google::protobuf::Message {
 public:
  packetc2l_turret_rotate();
  virtual ~packetc2l_turret_rotate();

  packetc2l_turret_rotate(const packetc2l_turret_rotate& from);

  inline packetc2l_turret_rotate& operator=(const packetc2l_turret_rotate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_turret_rotate& default_instance();

  void Swap(packetc2l_turret_rotate* other);

  // implements Message ----------------------------------------------

  packetc2l_turret_rotate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_turret_rotate& from);
  void MergeFrom(const packetc2l_turret_rotate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_turret_rotate];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 rotate_angle = 2;
  inline bool has_rotate_angle() const;
  inline void clear_rotate_angle();
  static const int kRotateAngleFieldNumber = 2;
  inline ::google::protobuf::int32 rotate_angle() const;
  inline void set_rotate_angle(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetc2l_turret_rotate)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_rotate_angle();
  inline void clear_has_rotate_angle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 rotate_angle_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_turret_rotate* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_sync_gold : public ::google::protobuf::Message {
 public:
  packetc2l_sync_gold();
  virtual ~packetc2l_sync_gold();

  packetc2l_sync_gold(const packetc2l_sync_gold& from);

  inline packetc2l_sync_gold& operator=(const packetc2l_sync_gold& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_sync_gold& default_instance();

  void Swap(packetc2l_sync_gold* other);

  // implements Message ----------------------------------------------

  packetc2l_sync_gold* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_sync_gold& from);
  void MergeFrom(const packetc2l_sync_gold& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_sync_gold];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetc2l_sync_gold)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_sync_gold* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_enter_seat : public ::google::protobuf::Message {
 public:
  packetl2c_bc_enter_seat();
  virtual ~packetl2c_bc_enter_seat();

  packetl2c_bc_enter_seat(const packetl2c_bc_enter_seat& from);

  inline packetl2c_bc_enter_seat& operator=(const packetl2c_bc_enter_seat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_enter_seat& default_instance();

  void Swap(packetl2c_bc_enter_seat* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_enter_seat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_enter_seat& from);
  void MergeFrom(const packetl2c_bc_enter_seat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_enter_seat];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional .fish_protocols.msg_seat_info seat_info = 2;
  inline bool has_seat_info() const;
  inline void clear_seat_info();
  static const int kSeatInfoFieldNumber = 2;
  inline const ::fish_protocols::msg_seat_info& seat_info() const;
  inline ::fish_protocols::msg_seat_info* mutable_seat_info();
  inline ::fish_protocols::msg_seat_info* release_seat_info();
  inline void set_allocated_seat_info(::fish_protocols::msg_seat_info* seat_info);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_enter_seat)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_seat_info();
  inline void clear_has_seat_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::fish_protocols::msg_seat_info* seat_info_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_enter_seat* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_leave_seat : public ::google::protobuf::Message {
 public:
  packetl2c_bc_leave_seat();
  virtual ~packetl2c_bc_leave_seat();

  packetl2c_bc_leave_seat(const packetl2c_bc_leave_seat& from);

  inline packetl2c_bc_leave_seat& operator=(const packetl2c_bc_leave_seat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_leave_seat& default_instance();

  void Swap(packetl2c_bc_leave_seat* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_leave_seat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_leave_seat& from);
  void MergeFrom(const packetl2c_bc_leave_seat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_leave_seat];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_leave_seat)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_leave_seat* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_robot_enter : public ::google::protobuf::Message {
 public:
  packetl2c_robot_enter();
  virtual ~packetl2c_robot_enter();

  packetl2c_robot_enter(const packetl2c_robot_enter& from);

  inline packetl2c_robot_enter& operator=(const packetl2c_robot_enter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_robot_enter& default_instance();

  void Swap(packetl2c_robot_enter* other);

  // implements Message ----------------------------------------------

  packetl2c_robot_enter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_robot_enter& from);
  void MergeFrom(const packetl2c_robot_enter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_robot_enter];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional .fish_protocols.msg_seat_info seat_info = 2;
  inline bool has_seat_info() const;
  inline void clear_seat_info();
  static const int kSeatInfoFieldNumber = 2;
  inline const ::fish_protocols::msg_seat_info& seat_info() const;
  inline ::fish_protocols::msg_seat_info* mutable_seat_info();
  inline ::fish_protocols::msg_seat_info* release_seat_info();
  inline void set_allocated_seat_info(::fish_protocols::msg_seat_info* seat_info);

  // optional int32 scene_id = 3;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 3;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_robot_enter)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_seat_info();
  inline void clear_has_seat_info();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::fish_protocols::msg_seat_info* seat_info_;
  int packet_id_;
  ::google::protobuf::int32 scene_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_robot_enter* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_robot_leave : public ::google::protobuf::Message {
 public:
  packetl2c_robot_leave();
  virtual ~packetl2c_robot_leave();

  packetl2c_robot_leave(const packetl2c_robot_leave& from);

  inline packetl2c_robot_leave& operator=(const packetl2c_robot_leave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_robot_leave& default_instance();

  void Swap(packetl2c_robot_leave* other);

  // implements Message ----------------------------------------------

  packetl2c_robot_leave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_robot_leave& from);
  void MergeFrom(const packetl2c_robot_leave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_robot_leave];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_robot_leave)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_robot_leave* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_change_rate : public ::google::protobuf::Message {
 public:
  packetl2c_bc_change_rate();
  virtual ~packetl2c_bc_change_rate();

  packetl2c_bc_change_rate(const packetl2c_bc_change_rate& from);

  inline packetl2c_bc_change_rate& operator=(const packetl2c_bc_change_rate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_change_rate& default_instance();

  void Swap(packetl2c_bc_change_rate* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_change_rate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_change_rate& from);
  void MergeFrom(const packetl2c_bc_change_rate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_rate];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int32 turret_rate = 3;
  inline bool has_turret_rate() const;
  inline void clear_turret_rate();
  static const int kTurretRateFieldNumber = 3;
  inline ::google::protobuf::int32 turret_rate() const;
  inline void set_turret_rate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_change_rate)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_turret_rate();
  inline void clear_has_turret_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 turret_rate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_change_rate* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_change_attr : public ::google::protobuf::Message {
 public:
  packetl2c_bc_change_attr();
  virtual ~packetl2c_bc_change_attr();

  packetl2c_bc_change_attr(const packetl2c_bc_change_attr& from);

  inline packetl2c_bc_change_attr& operator=(const packetl2c_bc_change_attr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_change_attr& default_instance();

  void Swap(packetl2c_bc_change_attr* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_change_attr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_change_attr& from);
  void MergeFrom(const packetl2c_bc_change_attr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int64 change_gold = 3;
  inline bool has_change_gold() const;
  inline void clear_change_gold();
  static const int kChangeGoldFieldNumber = 3;
  inline ::google::protobuf::int64 change_gold() const;
  inline void set_change_gold(::google::protobuf::int64 value);

  // optional int32 change_vip = 4;
  inline bool has_change_vip() const;
  inline void clear_change_vip();
  static const int kChangeVipFieldNumber = 4;
  inline ::google::protobuf::int32 change_vip() const;
  inline void set_change_vip(::google::protobuf::int32 value);

  // optional int32 change_ticket = 5;
  inline bool has_change_ticket() const;
  inline void clear_change_ticket();
  static const int kChangeTicketFieldNumber = 5;
  inline ::google::protobuf::int32 change_ticket() const;
  inline void set_change_ticket(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_change_attr)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_change_gold();
  inline void clear_has_change_gold();
  inline void set_has_change_vip();
  inline void clear_has_change_vip();
  inline void set_has_change_ticket();
  inline void clear_has_change_ticket();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int64 change_gold_;
  ::google::protobuf::int32 change_vip_;
  ::google::protobuf::int32 change_ticket_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_change_attr* default_instance_;
};
// -------------------------------------------------------------------

class msg_fish_info : public ::google::protobuf::Message {
 public:
  msg_fish_info();
  virtual ~msg_fish_info();

  msg_fish_info(const msg_fish_info& from);

  inline msg_fish_info& operator=(const msg_fish_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_fish_info& default_instance();

  void Swap(msg_fish_info* other);

  // implements Message ----------------------------------------------

  msg_fish_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_fish_info& from);
  void MergeFrom(const msg_fish_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 fish_id = 2;
  inline bool has_fish_id() const;
  inline void clear_fish_id();
  static const int kFishIdFieldNumber = 2;
  inline ::google::protobuf::int32 fish_id() const;
  inline void set_fish_id(::google::protobuf::int32 value);

  // optional int32 route_id = 3;
  inline bool has_route_id() const;
  inline void clear_route_id();
  static const int kRouteIdFieldNumber = 3;
  inline ::google::protobuf::int32 route_id() const;
  inline void set_route_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.msg_fish_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_fish_id();
  inline void clear_has_fish_id();
  inline void set_has_route_id();
  inline void clear_has_route_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 fish_id_;
  ::google::protobuf::int32 route_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static msg_fish_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_create_fish : public ::google::protobuf::Message {
 public:
  packetl2c_bc_create_fish();
  virtual ~packetl2c_bc_create_fish();

  packetl2c_bc_create_fish(const packetl2c_bc_create_fish& from);

  inline packetl2c_bc_create_fish& operator=(const packetl2c_bc_create_fish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_create_fish& default_instance();

  void Swap(packetl2c_bc_create_fish* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_create_fish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_create_fish& from);
  void MergeFrom(const packetl2c_bc_create_fish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_create_fish];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional .fish_protocols.msg_fish_info fish_info = 2;
  inline bool has_fish_info() const;
  inline void clear_fish_info();
  static const int kFishInfoFieldNumber = 2;
  inline const ::fish_protocols::msg_fish_info& fish_info() const;
  inline ::fish_protocols::msg_fish_info* mutable_fish_info();
  inline ::fish_protocols::msg_fish_info* release_fish_info();
  inline void set_allocated_fish_info(::fish_protocols::msg_fish_info* fish_info);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_create_fish)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_fish_info();
  inline void clear_has_fish_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::fish_protocols::msg_fish_info* fish_info_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_create_fish* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_create_generator : public ::google::protobuf::Message {
 public:
  packetl2c_bc_create_generator();
  virtual ~packetl2c_bc_create_generator();

  packetl2c_bc_create_generator(const packetl2c_bc_create_generator& from);

  inline packetl2c_bc_create_generator& operator=(const packetl2c_bc_create_generator& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_create_generator& default_instance();

  void Swap(packetl2c_bc_create_generator* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_create_generator* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_create_generator& from);
  void MergeFrom(const packetl2c_bc_create_generator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_create_generator];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 generator_id = 2;
  inline bool has_generator_id() const;
  inline void clear_generator_id();
  static const int kGeneratorIdFieldNumber = 2;
  inline ::google::protobuf::int32 generator_id() const;
  inline void set_generator_id(::google::protobuf::int32 value);

  // optional int32 start_id = 3;
  inline bool has_start_id() const;
  inline void clear_start_id();
  static const int kStartIdFieldNumber = 3;
  inline ::google::protobuf::int32 start_id() const;
  inline void set_start_id(::google::protobuf::int32 value);

  // optional int32 route_id = 4 [default = 0];
  inline bool has_route_id() const;
  inline void clear_route_id();
  static const int kRouteIdFieldNumber = 4;
  inline ::google::protobuf::int32 route_id() const;
  inline void set_route_id(::google::protobuf::int32 value);

  // optional bool is_red = 5 [default = false];
  inline bool has_is_red() const;
  inline void clear_is_red();
  static const int kIsRedFieldNumber = 5;
  inline bool is_red() const;
  inline void set_is_red(bool value);

  // optional int32 pos_x = 6;
  inline bool has_pos_x() const;
  inline void clear_pos_x();
  static const int kPosXFieldNumber = 6;
  inline ::google::protobuf::int32 pos_x() const;
  inline void set_pos_x(::google::protobuf::int32 value);

  // optional int32 pos_y = 7;
  inline bool has_pos_y() const;
  inline void clear_pos_y();
  static const int kPosYFieldNumber = 7;
  inline ::google::protobuf::int32 pos_y() const;
  inline void set_pos_y(::google::protobuf::int32 value);

  // optional bool is_flash = 8 [default = false];
  inline bool has_is_flash() const;
  inline void clear_is_flash();
  static const int kIsFlashFieldNumber = 8;
  inline bool is_flash() const;
  inline void set_is_flash(bool value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_create_generator)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_generator_id();
  inline void clear_has_generator_id();
  inline void set_has_start_id();
  inline void clear_has_start_id();
  inline void set_has_route_id();
  inline void clear_has_route_id();
  inline void set_has_is_red();
  inline void clear_has_is_red();
  inline void set_has_pos_x();
  inline void clear_has_pos_x();
  inline void set_has_pos_y();
  inline void clear_has_pos_y();
  inline void set_has_is_flash();
  inline void clear_has_is_flash();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 generator_id_;
  ::google::protobuf::int32 start_id_;
  ::google::protobuf::int32 route_id_;
  ::google::protobuf::int32 pos_x_;
  bool is_red_;
  bool is_flash_;
  ::google::protobuf::int32 pos_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_create_generator* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_manual_fire : public ::google::protobuf::Message {
 public:
  packetc2l_manual_fire();
  virtual ~packetc2l_manual_fire();

  packetc2l_manual_fire(const packetc2l_manual_fire& from);

  inline packetc2l_manual_fire& operator=(const packetc2l_manual_fire& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_manual_fire& default_instance();

  void Swap(packetc2l_manual_fire* other);

  // implements Message ----------------------------------------------

  packetc2l_manual_fire* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_manual_fire& from);
  void MergeFrom(const packetc2l_manual_fire& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_manual_fire];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 bullet_id = 2;
  inline bool has_bullet_id() const;
  inline void clear_bullet_id();
  static const int kBulletIdFieldNumber = 2;
  inline ::google::protobuf::int32 bullet_id() const;
  inline void set_bullet_id(::google::protobuf::int32 value);

  // optional int32 bullet_angle = 3;
  inline bool has_bullet_angle() const;
  inline void clear_bullet_angle();
  static const int kBulletAngleFieldNumber = 3;
  inline ::google::protobuf::int32 bullet_angle() const;
  inline void set_bullet_angle(::google::protobuf::int32 value);

  // optional bool is_multi = 4 [default = false];
  inline bool has_is_multi() const;
  inline void clear_is_multi();
  static const int kIsMultiFieldNumber = 4;
  inline bool is_multi() const;
  inline void set_is_multi(bool value);

  // optional bool is_fast = 5 [default = false];
  inline bool has_is_fast() const;
  inline void clear_is_fast();
  static const int kIsFastFieldNumber = 5;
  inline bool is_fast() const;
  inline void set_is_fast(bool value);

  // optional int32 bullet_type = 6 [default = 1];
  inline bool has_bullet_type() const;
  inline void clear_bullet_type();
  static const int kBulletTypeFieldNumber = 6;
  inline ::google::protobuf::int32 bullet_type() const;
  inline void set_bullet_type(::google::protobuf::int32 value);

  // optional int32 bullet_rate = 7;
  inline bool has_bullet_rate() const;
  inline void clear_bullet_rate();
  static const int kBulletRateFieldNumber = 7;
  inline ::google::protobuf::int32 bullet_rate() const;
  inline void set_bullet_rate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetc2l_manual_fire)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_bullet_id();
  inline void clear_has_bullet_id();
  inline void set_has_bullet_angle();
  inline void clear_has_bullet_angle();
  inline void set_has_is_multi();
  inline void clear_has_is_multi();
  inline void set_has_is_fast();
  inline void clear_has_is_fast();
  inline void set_has_bullet_type();
  inline void clear_has_bullet_type();
  inline void set_has_bullet_rate();
  inline void clear_has_bullet_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 bullet_id_;
  ::google::protobuf::int32 bullet_angle_;
  bool is_multi_;
  bool is_fast_;
  ::google::protobuf::int32 bullet_type_;
  ::google::protobuf::int32 bullet_rate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_manual_fire* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_manual_fire_fail : public ::google::protobuf::Message {
 public:
  packetl2c_manual_fire_fail();
  virtual ~packetl2c_manual_fire_fail();

  packetl2c_manual_fire_fail(const packetl2c_manual_fire_fail& from);

  inline packetl2c_manual_fire_fail& operator=(const packetl2c_manual_fire_fail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_manual_fire_fail& default_instance();

  void Swap(packetl2c_manual_fire_fail* other);

  // implements Message ----------------------------------------------

  packetl2c_manual_fire_fail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_manual_fire_fail& from);
  void MergeFrom(const packetl2c_manual_fire_fail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_manual_fire_fail];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 bullet_cost = 2;
  inline bool has_bullet_cost() const;
  inline void clear_bullet_cost();
  static const int kBulletCostFieldNumber = 2;
  inline ::google::protobuf::int32 bullet_cost() const;
  inline void set_bullet_cost(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_manual_fire_fail)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_bullet_cost();
  inline void clear_has_bullet_cost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 bullet_cost_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_manual_fire_fail* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_manual_fire : public ::google::protobuf::Message {
 public:
  packetl2c_bc_manual_fire();
  virtual ~packetl2c_bc_manual_fire();

  packetl2c_bc_manual_fire(const packetl2c_bc_manual_fire& from);

  inline packetl2c_bc_manual_fire& operator=(const packetl2c_bc_manual_fire& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_manual_fire& default_instance();

  void Swap(packetl2c_bc_manual_fire* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_manual_fire* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_manual_fire& from);
  void MergeFrom(const packetl2c_bc_manual_fire& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_manual_fire];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 bullet_id = 2;
  inline bool has_bullet_id() const;
  inline void clear_bullet_id();
  static const int kBulletIdFieldNumber = 2;
  inline ::google::protobuf::int32 bullet_id() const;
  inline void set_bullet_id(::google::protobuf::int32 value);

  // optional int32 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int32 bullet_angle = 4;
  inline bool has_bullet_angle() const;
  inline void clear_bullet_angle();
  static const int kBulletAngleFieldNumber = 4;
  inline ::google::protobuf::int32 bullet_angle() const;
  inline void set_bullet_angle(::google::protobuf::int32 value);

  // optional bool is_multi = 5 [default = false];
  inline bool has_is_multi() const;
  inline void clear_is_multi();
  static const int kIsMultiFieldNumber = 5;
  inline bool is_multi() const;
  inline void set_is_multi(bool value);

  // optional int32 bullet_type = 6 [default = 1];
  inline bool has_bullet_type() const;
  inline void clear_bullet_type();
  static const int kBulletTypeFieldNumber = 6;
  inline ::google::protobuf::int32 bullet_type() const;
  inline void set_bullet_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_manual_fire)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_bullet_id();
  inline void clear_has_bullet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_bullet_angle();
  inline void clear_has_bullet_angle();
  inline void set_has_is_multi();
  inline void clear_has_is_multi();
  inline void set_has_bullet_type();
  inline void clear_has_bullet_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 bullet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 bullet_angle_;
  bool is_multi_;
  ::google::protobuf::int32 bullet_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_manual_fire* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_missile_fire : public ::google::protobuf::Message {
 public:
  packetc2l_missile_fire();
  virtual ~packetc2l_missile_fire();

  packetc2l_missile_fire(const packetc2l_missile_fire& from);

  inline packetc2l_missile_fire& operator=(const packetc2l_missile_fire& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_missile_fire& default_instance();

  void Swap(packetc2l_missile_fire* other);

  // implements Message ----------------------------------------------

  packetc2l_missile_fire* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_missile_fire& from);
  void MergeFrom(const packetc2l_missile_fire& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_missile_fire];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 bullet_id = 2;
  inline bool has_bullet_id() const;
  inline void clear_bullet_id();
  static const int kBulletIdFieldNumber = 2;
  inline ::google::protobuf::int32 bullet_id() const;
  inline void set_bullet_id(::google::protobuf::int32 value);

  // optional int32 fire_pos_x = 3;
  inline bool has_fire_pos_x() const;
  inline void clear_fire_pos_x();
  static const int kFirePosXFieldNumber = 3;
  inline ::google::protobuf::int32 fire_pos_x() const;
  inline void set_fire_pos_x(::google::protobuf::int32 value);

  // optional int32 fire_pos_y = 4;
  inline bool has_fire_pos_y() const;
  inline void clear_fire_pos_y();
  static const int kFirePosYFieldNumber = 4;
  inline ::google::protobuf::int32 fire_pos_y() const;
  inline void set_fire_pos_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetc2l_missile_fire)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_bullet_id();
  inline void clear_has_bullet_id();
  inline void set_has_fire_pos_x();
  inline void clear_has_fire_pos_x();
  inline void set_has_fire_pos_y();
  inline void clear_has_fire_pos_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 bullet_id_;
  ::google::protobuf::int32 fire_pos_x_;
  ::google::protobuf::int32 fire_pos_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_missile_fire* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_missile_fire : public ::google::protobuf::Message {
 public:
  packetl2c_bc_missile_fire();
  virtual ~packetl2c_bc_missile_fire();

  packetl2c_bc_missile_fire(const packetl2c_bc_missile_fire& from);

  inline packetl2c_bc_missile_fire& operator=(const packetl2c_bc_missile_fire& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_missile_fire& default_instance();

  void Swap(packetl2c_bc_missile_fire* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_missile_fire* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_missile_fire& from);
  void MergeFrom(const packetl2c_bc_missile_fire& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_missile_fire];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 bullet_id = 2;
  inline bool has_bullet_id() const;
  inline void clear_bullet_id();
  static const int kBulletIdFieldNumber = 2;
  inline ::google::protobuf::int32 bullet_id() const;
  inline void set_bullet_id(::google::protobuf::int32 value);

  // optional int32 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int32 fire_pos_x = 4;
  inline bool has_fire_pos_x() const;
  inline void clear_fire_pos_x();
  static const int kFirePosXFieldNumber = 4;
  inline ::google::protobuf::int32 fire_pos_x() const;
  inline void set_fire_pos_x(::google::protobuf::int32 value);

  // optional int32 fire_pos_y = 5;
  inline bool has_fire_pos_y() const;
  inline void clear_fire_pos_y();
  static const int kFirePosYFieldNumber = 5;
  inline ::google::protobuf::int32 fire_pos_y() const;
  inline void set_fire_pos_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_missile_fire)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_bullet_id();
  inline void clear_has_bullet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_fire_pos_x();
  inline void clear_has_fire_pos_x();
  inline void set_has_fire_pos_y();
  inline void clear_has_fire_pos_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 bullet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 fire_pos_x_;
  ::google::protobuf::int32 fire_pos_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_missile_fire* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_hit_fish : public ::google::protobuf::Message {
 public:
  packetc2l_hit_fish();
  virtual ~packetc2l_hit_fish();

  packetc2l_hit_fish(const packetc2l_hit_fish& from);

  inline packetc2l_hit_fish& operator=(const packetc2l_hit_fish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_hit_fish& default_instance();

  void Swap(packetc2l_hit_fish* other);

  // implements Message ----------------------------------------------

  packetc2l_hit_fish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_hit_fish& from);
  void MergeFrom(const packetc2l_hit_fish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_hit_fish];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 bullet_id = 3;
  inline bool has_bullet_id() const;
  inline void clear_bullet_id();
  static const int kBulletIdFieldNumber = 3;
  inline ::google::protobuf::int32 bullet_id() const;
  inline void set_bullet_id(::google::protobuf::int32 value);

  // optional int32 fish_id = 4;
  inline bool has_fish_id() const;
  inline void clear_fish_id();
  static const int kFishIdFieldNumber = 4;
  inline ::google::protobuf::int32 fish_id() const;
  inline void set_fish_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetc2l_hit_fish)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_bullet_id();
  inline void clear_has_bullet_id();
  inline void set_has_fish_id();
  inline void clear_has_fish_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 bullet_id_;
  ::google::protobuf::int32 fish_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_hit_fish* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_hit_fishs : public ::google::protobuf::Message {
 public:
  packetc2l_hit_fishs();
  virtual ~packetc2l_hit_fishs();

  packetc2l_hit_fishs(const packetc2l_hit_fishs& from);

  inline packetc2l_hit_fishs& operator=(const packetc2l_hit_fishs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_hit_fishs& default_instance();

  void Swap(packetc2l_hit_fishs* other);

  // implements Message ----------------------------------------------

  packetc2l_hit_fishs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_hit_fishs& from);
  void MergeFrom(const packetc2l_hit_fishs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_hit_fishs];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 hit_type = 2;
  inline bool has_hit_type() const;
  inline void clear_hit_type();
  static const int kHitTypeFieldNumber = 2;
  inline ::google::protobuf::int32 hit_type() const;
  inline void set_hit_type(::google::protobuf::int32 value);

  // optional int32 bullet_id = 3;
  inline bool has_bullet_id() const;
  inline void clear_bullet_id();
  static const int kBulletIdFieldNumber = 3;
  inline ::google::protobuf::int32 bullet_id() const;
  inline void set_bullet_id(::google::protobuf::int32 value);

  // repeated int32 fish_ids = 4;
  inline int fish_ids_size() const;
  inline void clear_fish_ids();
  static const int kFishIdsFieldNumber = 4;
  inline ::google::protobuf::int32 fish_ids(int index) const;
  inline void set_fish_ids(int index, ::google::protobuf::int32 value);
  inline void add_fish_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fish_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fish_ids();

  // optional int32 hit_param = 5 [default = 0];
  inline bool has_hit_param() const;
  inline void clear_hit_param();
  static const int kHitParamFieldNumber = 5;
  inline ::google::protobuf::int32 hit_param() const;
  inline void set_hit_param(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetc2l_hit_fishs)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_hit_type();
  inline void clear_has_hit_type();
  inline void set_has_bullet_id();
  inline void clear_has_bullet_id();
  inline void set_has_hit_param();
  inline void clear_has_hit_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 hit_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fish_ids_;
  ::google::protobuf::int32 bullet_id_;
  ::google::protobuf::int32 hit_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_hit_fishs* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_fish_die : public ::google::protobuf::Message {
 public:
  packetl2c_bc_fish_die();
  virtual ~packetl2c_bc_fish_die();

  packetl2c_bc_fish_die(const packetl2c_bc_fish_die& from);

  inline packetl2c_bc_fish_die& operator=(const packetl2c_bc_fish_die& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_fish_die& default_instance();

  void Swap(packetl2c_bc_fish_die* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_fish_die* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_fish_die& from);
  void MergeFrom(const packetl2c_bc_fish_die& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_fish_die];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 fish_id = 2;
  inline bool has_fish_id() const;
  inline void clear_fish_id();
  static const int kFishIdFieldNumber = 2;
  inline ::google::protobuf::int32 fish_id() const;
  inline void set_fish_id(::google::protobuf::int32 value);

  // optional int32 kill_id = 3;
  inline bool has_kill_id() const;
  inline void clear_kill_id();
  static const int kKillIdFieldNumber = 3;
  inline ::google::protobuf::int32 kill_id() const;
  inline void set_kill_id(::google::protobuf::int32 value);

  // optional int32 base_score = 4;
  inline bool has_base_score() const;
  inline void clear_base_score();
  static const int kBaseScoreFieldNumber = 4;
  inline ::google::protobuf::int32 base_score() const;
  inline void set_base_score(::google::protobuf::int32 value);

  // optional int32 add_score = 5 [default = 0];
  inline bool has_add_score() const;
  inline void clear_add_score();
  static const int kAddScoreFieldNumber = 5;
  inline ::google::protobuf::int32 add_score() const;
  inline void set_add_score(::google::protobuf::int32 value);

  // optional int32 ticket = 6 [default = 0];
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 6;
  inline ::google::protobuf::int32 ticket() const;
  inline void set_ticket(::google::protobuf::int32 value);

  // optional bool getstar = 7 [default = false];
  inline bool has_getstar() const;
  inline void clear_getstar();
  static const int kGetstarFieldNumber = 7;
  inline bool getstar() const;
  inline void set_getstar(bool value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_fish_die)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_fish_id();
  inline void clear_has_fish_id();
  inline void set_has_kill_id();
  inline void clear_has_kill_id();
  inline void set_has_base_score();
  inline void clear_has_base_score();
  inline void set_has_add_score();
  inline void clear_has_add_score();
  inline void set_has_ticket();
  inline void clear_has_ticket();
  inline void set_has_getstar();
  inline void clear_has_getstar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 fish_id_;
  ::google::protobuf::int32 kill_id_;
  ::google::protobuf::int32 base_score_;
  ::google::protobuf::int32 add_score_;
  ::google::protobuf::int32 ticket_;
  bool getstar_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_fish_die* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_specialfish_die : public ::google::protobuf::Message {
 public:
  packetl2c_bc_specialfish_die();
  virtual ~packetl2c_bc_specialfish_die();

  packetl2c_bc_specialfish_die(const packetl2c_bc_specialfish_die& from);

  inline packetl2c_bc_specialfish_die& operator=(const packetl2c_bc_specialfish_die& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_specialfish_die& default_instance();

  void Swap(packetl2c_bc_specialfish_die* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_specialfish_die* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_specialfish_die& from);
  void MergeFrom(const packetl2c_bc_specialfish_die& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_specialfish_die];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 fish_id = 2;
  inline bool has_fish_id() const;
  inline void clear_fish_id();
  static const int kFishIdFieldNumber = 2;
  inline ::google::protobuf::int32 fish_id() const;
  inline void set_fish_id(::google::protobuf::int32 value);

  // optional int32 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int32 bullet_id = 4;
  inline bool has_bullet_id() const;
  inline void clear_bullet_id();
  static const int kBulletIdFieldNumber = 4;
  inline ::google::protobuf::int32 bullet_id() const;
  inline void set_bullet_id(::google::protobuf::int32 value);

  // optional int32 base_score = 5;
  inline bool has_base_score() const;
  inline void clear_base_score();
  static const int kBaseScoreFieldNumber = 5;
  inline ::google::protobuf::int32 base_score() const;
  inline void set_base_score(::google::protobuf::int32 value);

  // optional int32 add_score = 6 [default = 0];
  inline bool has_add_score() const;
  inline void clear_add_score();
  static const int kAddScoreFieldNumber = 6;
  inline ::google::protobuf::int32 add_score() const;
  inline void set_add_score(::google::protobuf::int32 value);

  // optional int32 ticket = 7 [default = 0];
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 7;
  inline ::google::protobuf::int32 ticket() const;
  inline void set_ticket(::google::protobuf::int32 value);

  // optional bool getstar = 8 [default = false];
  inline bool has_getstar() const;
  inline void clear_getstar();
  static const int kGetstarFieldNumber = 8;
  inline bool getstar() const;
  inline void set_getstar(bool value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_specialfish_die)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_fish_id();
  inline void clear_has_fish_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_bullet_id();
  inline void clear_has_bullet_id();
  inline void set_has_base_score();
  inline void clear_has_base_score();
  inline void set_has_add_score();
  inline void clear_has_add_score();
  inline void set_has_ticket();
  inline void clear_has_ticket();
  inline void set_has_getstar();
  inline void clear_has_getstar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 fish_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 bullet_id_;
  ::google::protobuf::int32 base_score_;
  ::google::protobuf::int32 add_score_;
  ::google::protobuf::int32 ticket_;
  bool getstar_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_specialfish_die* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_fishs_die : public ::google::protobuf::Message {
 public:
  packetl2c_bc_fishs_die();
  virtual ~packetl2c_bc_fishs_die();

  packetl2c_bc_fishs_die(const packetl2c_bc_fishs_die& from);

  inline packetl2c_bc_fishs_die& operator=(const packetl2c_bc_fishs_die& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_fishs_die& default_instance();

  void Swap(packetl2c_bc_fishs_die* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_fishs_die* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_fishs_die& from);
  void MergeFrom(const packetl2c_bc_fishs_die& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_fishs_die];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int32 die_type = 3;
  inline bool has_die_type() const;
  inline void clear_die_type();
  static const int kDieTypeFieldNumber = 3;
  inline ::google::protobuf::int32 die_type() const;
  inline void set_die_type(::google::protobuf::int32 value);

  // repeated int32 die_params = 4;
  inline int die_params_size() const;
  inline void clear_die_params();
  static const int kDieParamsFieldNumber = 4;
  inline ::google::protobuf::int32 die_params(int index) const;
  inline void set_die_params(int index, ::google::protobuf::int32 value);
  inline void add_die_params(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      die_params() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_die_params();

  // optional int32 total_score = 5;
  inline bool has_total_score() const;
  inline void clear_total_score();
  static const int kTotalScoreFieldNumber = 5;
  inline ::google::protobuf::int32 total_score() const;
  inline void set_total_score(::google::protobuf::int32 value);

  // optional int32 base_rate = 6;
  inline bool has_base_rate() const;
  inline void clear_base_rate();
  static const int kBaseRateFieldNumber = 6;
  inline ::google::protobuf::int32 base_rate() const;
  inline void set_base_rate(::google::protobuf::int32 value);

  // optional int32 add_rate = 7 [default = 0];
  inline bool has_add_rate() const;
  inline void clear_add_rate();
  static const int kAddRateFieldNumber = 7;
  inline ::google::protobuf::int32 add_rate() const;
  inline void set_add_rate(::google::protobuf::int32 value);

  // optional int32 ticket = 8 [default = 0];
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 8;
  inline ::google::protobuf::int32 ticket() const;
  inline void set_ticket(::google::protobuf::int32 value);

  // optional bool getstar = 9 [default = false];
  inline bool has_getstar() const;
  inline void clear_getstar();
  static const int kGetstarFieldNumber = 9;
  inline bool getstar() const;
  inline void set_getstar(bool value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_fishs_die)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_die_type();
  inline void clear_has_die_type();
  inline void set_has_total_score();
  inline void clear_has_total_score();
  inline void set_has_base_rate();
  inline void clear_has_base_rate();
  inline void set_has_add_rate();
  inline void clear_has_add_rate();
  inline void set_has_ticket();
  inline void clear_has_ticket();
  inline void set_has_getstar();
  inline void clear_has_getstar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > die_params_;
  ::google::protobuf::int32 die_type_;
  ::google::protobuf::int32 total_score_;
  ::google::protobuf::int32 base_rate_;
  ::google::protobuf::int32 add_rate_;
  ::google::protobuf::int32 ticket_;
  bool getstar_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_fishs_die* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_change_scene : public ::google::protobuf::Message {
 public:
  packetl2c_bc_change_scene();
  virtual ~packetl2c_bc_change_scene();

  packetl2c_bc_change_scene(const packetl2c_bc_change_scene& from);

  inline packetl2c_bc_change_scene& operator=(const packetl2c_bc_change_scene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_change_scene& default_instance();

  void Swap(packetl2c_bc_change_scene* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_change_scene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_change_scene& from);
  void MergeFrom(const packetl2c_bc_change_scene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_scene];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 scene_id = 2;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // optional int32 large_fish_id = 3;
  inline bool has_large_fish_id() const;
  inline void clear_large_fish_id();
  static const int kLargeFishIdFieldNumber = 3;
  inline ::google::protobuf::int32 large_fish_id() const;
  inline void set_large_fish_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_change_scene)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_large_fish_id();
  inline void clear_has_large_fish_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 scene_id_;
  ::google::protobuf::int32 large_fish_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_change_scene* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_addbuff : public ::google::protobuf::Message {
 public:
  packetl2c_bc_addbuff();
  virtual ~packetl2c_bc_addbuff();

  packetl2c_bc_addbuff(const packetl2c_bc_addbuff& from);

  inline packetl2c_bc_addbuff& operator=(const packetl2c_bc_addbuff& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_addbuff& default_instance();

  void Swap(packetl2c_bc_addbuff* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_addbuff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_addbuff& from);
  void MergeFrom(const packetl2c_bc_addbuff& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_addbuff];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 buff_id = 2;
  inline bool has_buff_id() const;
  inline void clear_buff_id();
  static const int kBuffIdFieldNumber = 2;
  inline ::google::protobuf::int32 buff_id() const;
  inline void set_buff_id(::google::protobuf::int32 value);

  // optional int32 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int32 buff_time = 4 [default = -1];
  inline bool has_buff_time() const;
  inline void clear_buff_time();
  static const int kBuffTimeFieldNumber = 4;
  inline ::google::protobuf::int32 buff_time() const;
  inline void set_buff_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_addbuff)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_buff_id();
  inline void clear_has_buff_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_buff_time();
  inline void clear_has_buff_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 buff_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 buff_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_addbuff* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_removebuff : public ::google::protobuf::Message {
 public:
  packetl2c_bc_removebuff();
  virtual ~packetl2c_bc_removebuff();

  packetl2c_bc_removebuff(const packetl2c_bc_removebuff& from);

  inline packetl2c_bc_removebuff& operator=(const packetl2c_bc_removebuff& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_removebuff& default_instance();

  void Swap(packetl2c_bc_removebuff* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_removebuff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_removebuff& from);
  void MergeFrom(const packetl2c_bc_removebuff& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_removebuff];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 buff_id = 2;
  inline bool has_buff_id() const;
  inline void clear_buff_id();
  static const int kBuffIdFieldNumber = 2;
  inline ::google::protobuf::int32 buff_id() const;
  inline void set_buff_id(::google::protobuf::int32 value);

  // optional int32 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_removebuff)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_buff_id();
  inline void clear_has_buff_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 buff_id_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_removebuff* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_changeturret : public ::google::protobuf::Message {
 public:
  packetl2c_bc_changeturret();
  virtual ~packetl2c_bc_changeturret();

  packetl2c_bc_changeturret(const packetl2c_bc_changeturret& from);

  inline packetl2c_bc_changeturret& operator=(const packetl2c_bc_changeturret& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_changeturret& default_instance();

  void Swap(packetl2c_bc_changeturret* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_changeturret* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_changeturret& from);
  void MergeFrom(const packetl2c_bc_changeturret& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_changeturret];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 turret_id = 2;
  inline bool has_turret_id() const;
  inline void clear_turret_id();
  static const int kTurretIdFieldNumber = 2;
  inline ::google::protobuf::int32 turret_id() const;
  inline void set_turret_id(::google::protobuf::int32 value);

  // optional int32 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_changeturret)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_turret_id();
  inline void clear_has_turret_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 turret_id_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_changeturret* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_lock_fish : public ::google::protobuf::Message {
 public:
  packetc2l_lock_fish();
  virtual ~packetc2l_lock_fish();

  packetc2l_lock_fish(const packetc2l_lock_fish& from);

  inline packetc2l_lock_fish& operator=(const packetc2l_lock_fish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_lock_fish& default_instance();

  void Swap(packetc2l_lock_fish* other);

  // implements Message ----------------------------------------------

  packetc2l_lock_fish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_lock_fish& from);
  void MergeFrom(const packetc2l_lock_fish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_lock_fish];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 fish_id = 4;
  inline bool has_fish_id() const;
  inline void clear_fish_id();
  static const int kFishIdFieldNumber = 4;
  inline ::google::protobuf::int32 fish_id() const;
  inline void set_fish_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetc2l_lock_fish)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_fish_id();
  inline void clear_has_fish_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 fish_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_lock_fish* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_lock_fish : public ::google::protobuf::Message {
 public:
  packetl2c_bc_lock_fish();
  virtual ~packetl2c_bc_lock_fish();

  packetl2c_bc_lock_fish(const packetl2c_bc_lock_fish& from);

  inline packetl2c_bc_lock_fish& operator=(const packetl2c_bc_lock_fish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_lock_fish& default_instance();

  void Swap(packetl2c_bc_lock_fish* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_lock_fish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_lock_fish& from);
  void MergeFrom(const packetl2c_bc_lock_fish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_lock_fish];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int32 fish_id = 3;
  inline bool has_fish_id() const;
  inline void clear_fish_id();
  static const int kFishIdFieldNumber = 3;
  inline ::google::protobuf::int32 fish_id() const;
  inline void set_fish_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_lock_fish)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_fish_id();
  inline void clear_has_fish_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 fish_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_lock_fish* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_freeze : public ::google::protobuf::Message {
 public:
  packetl2c_bc_freeze();
  virtual ~packetl2c_bc_freeze();

  packetl2c_bc_freeze(const packetl2c_bc_freeze& from);

  inline packetl2c_bc_freeze& operator=(const packetl2c_bc_freeze& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_freeze& default_instance();

  void Swap(packetl2c_bc_freeze* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_freeze* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_freeze& from);
  void MergeFrom(const packetl2c_bc_freeze& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_freeze];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 freeze_Time = 2;
  inline bool has_freeze_time() const;
  inline void clear_freeze_time();
  static const int kFreezeTimeFieldNumber = 2;
  inline ::google::protobuf::int32 freeze_time() const;
  inline void set_freeze_time(::google::protobuf::int32 value);

  // optional bool is_show = 3;
  inline bool has_is_show() const;
  inline void clear_is_show();
  static const int kIsShowFieldNumber = 3;
  inline bool is_show() const;
  inline void set_is_show(bool value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_freeze)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_freeze_time();
  inline void clear_has_freeze_time();
  inline void set_has_is_show();
  inline void clear_has_is_show();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 freeze_time_;
  bool is_show_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_freeze* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_change_scene_bg : public ::google::protobuf::Message {
 public:
  packetl2c_bc_change_scene_bg();
  virtual ~packetl2c_bc_change_scene_bg();

  packetl2c_bc_change_scene_bg(const packetl2c_bc_change_scene_bg& from);

  inline packetl2c_bc_change_scene_bg& operator=(const packetl2c_bc_change_scene_bg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_change_scene_bg& default_instance();

  void Swap(packetl2c_bc_change_scene_bg* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_change_scene_bg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_change_scene_bg& from);
  void MergeFrom(const packetl2c_bc_change_scene_bg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_scene_bg];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 scene_id = 2;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_change_scene_bg)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 scene_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_change_scene_bg* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_scene_time : public ::google::protobuf::Message {
 public:
  packetl2c_bc_scene_time();
  virtual ~packetl2c_bc_scene_time();

  packetl2c_bc_scene_time(const packetl2c_bc_scene_time& from);

  inline packetl2c_bc_scene_time& operator=(const packetl2c_bc_scene_time& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_scene_time& default_instance();

  void Swap(packetl2c_bc_scene_time* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_scene_time* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_scene_time& from);
  void MergeFrom(const packetl2c_bc_scene_time& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_time];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 scene_time = 2;
  inline bool has_scene_time() const;
  inline void clear_scene_time();
  static const int kSceneTimeFieldNumber = 2;
  inline ::google::protobuf::int32 scene_time() const;
  inline void set_scene_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_scene_time)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_scene_time();
  inline void clear_has_scene_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 scene_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_scene_time* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_hit_fishs : public ::google::protobuf::Message {
 public:
  packetl2c_bc_hit_fishs();
  virtual ~packetl2c_bc_hit_fishs();

  packetl2c_bc_hit_fishs(const packetl2c_bc_hit_fishs& from);

  inline packetl2c_bc_hit_fishs& operator=(const packetl2c_bc_hit_fishs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_hit_fishs& default_instance();

  void Swap(packetl2c_bc_hit_fishs* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_hit_fishs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_hit_fishs& from);
  void MergeFrom(const packetl2c_bc_hit_fishs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_hit_fishs];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int32 hit_type = 3;
  inline bool has_hit_type() const;
  inline void clear_hit_type();
  static const int kHitTypeFieldNumber = 3;
  inline ::google::protobuf::int32 hit_type() const;
  inline void set_hit_type(::google::protobuf::int32 value);

  // repeated int32 fish_ids = 4;
  inline int fish_ids_size() const;
  inline void clear_fish_ids();
  static const int kFishIdsFieldNumber = 4;
  inline ::google::protobuf::int32 fish_ids(int index) const;
  inline void set_fish_ids(int index, ::google::protobuf::int32 value);
  inline void add_fish_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fish_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fish_ids();

  // repeated int32 params = 5;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 5;
  inline ::google::protobuf::int32 params(int index) const;
  inline void set_params(int index, ::google::protobuf::int32 value);
  inline void add_params(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      params() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_params();

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_hit_fishs)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_hit_type();
  inline void clear_has_hit_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fish_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > params_;
  ::google::protobuf::int32 hit_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_hit_fishs* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_turret_rotate : public ::google::protobuf::Message {
 public:
  packetl2c_bc_turret_rotate();
  virtual ~packetl2c_bc_turret_rotate();

  packetl2c_bc_turret_rotate(const packetl2c_bc_turret_rotate& from);

  inline packetl2c_bc_turret_rotate& operator=(const packetl2c_bc_turret_rotate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_turret_rotate& default_instance();

  void Swap(packetl2c_bc_turret_rotate* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_turret_rotate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_turret_rotate& from);
  void MergeFrom(const packetl2c_bc_turret_rotate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_turret_rotate];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int32 rotate_angle = 3;
  inline bool has_rotate_angle() const;
  inline void clear_rotate_angle();
  static const int kRotateAngleFieldNumber = 3;
  inline ::google::protobuf::int32 rotate_angle() const;
  inline void set_rotate_angle(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_turret_rotate)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_rotate_angle();
  inline void clear_has_rotate_angle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 rotate_angle_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_turret_rotate* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_change_max_power : public ::google::protobuf::Message {
 public:
  packetl2c_bc_change_max_power();
  virtual ~packetl2c_bc_change_max_power();

  packetl2c_bc_change_max_power(const packetl2c_bc_change_max_power& from);

  inline packetl2c_bc_change_max_power& operator=(const packetl2c_bc_change_max_power& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_change_max_power& default_instance();

  void Swap(packetl2c_bc_change_max_power* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_change_max_power* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_change_max_power& from);
  void MergeFrom(const packetl2c_bc_change_max_power& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_max_power];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int32 max_power = 3;
  inline bool has_max_power() const;
  inline void clear_max_power();
  static const int kMaxPowerFieldNumber = 3;
  inline ::google::protobuf::int32 max_power() const;
  inline void set_max_power(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_change_max_power)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_max_power();
  inline void clear_has_max_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 max_power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_change_max_power* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_debuginfo : public ::google::protobuf::Message {
 public:
  packetl2c_bc_debuginfo();
  virtual ~packetl2c_bc_debuginfo();

  packetl2c_bc_debuginfo(const packetl2c_bc_debuginfo& from);

  inline packetl2c_bc_debuginfo& operator=(const packetl2c_bc_debuginfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_debuginfo& default_instance();

  void Swap(packetl2c_bc_debuginfo* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_debuginfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_debuginfo& from);
  void MergeFrom(const packetl2c_bc_debuginfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::fish_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::fish_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int64 total_profit = 3 [default = 0];
  inline bool has_total_profit() const;
  inline void clear_total_profit();
  static const int kTotalProfitFieldNumber = 3;
  inline ::google::protobuf::int64 total_profit() const;
  inline void set_total_profit(::google::protobuf::int64 value);

  // optional int64 total_stock = 4 [default = 0];
  inline bool has_total_stock() const;
  inline void clear_total_stock();
  static const int kTotalStockFieldNumber = 4;
  inline ::google::protobuf::int64 total_stock() const;
  inline void set_total_stock(::google::protobuf::int64 value);

  // optional string debug_infos = 5;
  inline bool has_debug_infos() const;
  inline void clear_debug_infos();
  static const int kDebugInfosFieldNumber = 5;
  inline const ::std::string& debug_infos() const;
  inline void set_debug_infos(const ::std::string& value);
  inline void set_debug_infos(const char* value);
  inline void set_debug_infos(const char* value, size_t size);
  inline ::std::string* mutable_debug_infos();
  inline ::std::string* release_debug_infos();
  inline void set_allocated_debug_infos(::std::string* debug_infos);

  // @@protoc_insertion_point(class_scope:fish_protocols.packetl2c_bc_debuginfo)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_total_profit();
  inline void clear_has_total_profit();
  inline void set_has_total_stock();
  inline void clear_has_total_stock();
  inline void set_has_debug_infos();
  inline void clear_has_debug_infos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int64 total_profit_;
  ::google::protobuf::int64 total_stock_;
  ::std::string* debug_infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_AssignDesc_fish_5fmonkey_5flogic_2eproto();
  friend void protobuf_ShutdownFile_fish_5fmonkey_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_debuginfo* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2l_get_scene_info

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
inline bool packetc2l_get_scene_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_scene_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_scene_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_scene_info::clear_packet_id() {
  packet_id_ = 10100;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetc2l_get_scene_info::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_scene_info::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// msg_fish_init

// optional int32 id = 1;
inline bool msg_fish_init::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_fish_init::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_fish_init::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_fish_init::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 msg_fish_init::id() const {
  return id_;
}
inline void msg_fish_init::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 fish_id = 2;
inline bool msg_fish_init::has_fish_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_fish_init::set_has_fish_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_fish_init::clear_has_fish_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_fish_init::clear_fish_id() {
  fish_id_ = 0;
  clear_has_fish_id();
}
inline ::google::protobuf::int32 msg_fish_init::fish_id() const {
  return fish_id_;
}
inline void msg_fish_init::set_fish_id(::google::protobuf::int32 value) {
  set_has_fish_id();
  fish_id_ = value;
}

// optional int32 life_time = 3;
inline bool msg_fish_init::has_life_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_fish_init::set_has_life_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_fish_init::clear_has_life_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_fish_init::clear_life_time() {
  life_time_ = 0;
  clear_has_life_time();
}
inline ::google::protobuf::int32 msg_fish_init::life_time() const {
  return life_time_;
}
inline void msg_fish_init::set_life_time(::google::protobuf::int32 value) {
  set_has_life_time();
  life_time_ = value;
}

// repeated int32 route_param = 4;
inline int msg_fish_init::route_param_size() const {
  return route_param_.size();
}
inline void msg_fish_init::clear_route_param() {
  route_param_.Clear();
}
inline ::google::protobuf::int32 msg_fish_init::route_param(int index) const {
  return route_param_.Get(index);
}
inline void msg_fish_init::set_route_param(int index, ::google::protobuf::int32 value) {
  route_param_.Set(index, value);
}
inline void msg_fish_init::add_route_param(::google::protobuf::int32 value) {
  route_param_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_fish_init::route_param() const {
  return route_param_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_fish_init::mutable_route_param() {
  return &route_param_;
}

// -------------------------------------------------------------------

// msg_generator_init

// optional int32 generator_id = 1;
inline bool msg_generator_init::has_generator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_generator_init::set_has_generator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_generator_init::clear_has_generator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_generator_init::clear_generator_id() {
  generator_id_ = 0;
  clear_has_generator_id();
}
inline ::google::protobuf::int32 msg_generator_init::generator_id() const {
  return generator_id_;
}
inline void msg_generator_init::set_generator_id(::google::protobuf::int32 value) {
  set_has_generator_id();
  generator_id_ = value;
}

// optional int32 life_time = 2;
inline bool msg_generator_init::has_life_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_generator_init::set_has_life_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_generator_init::clear_has_life_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_generator_init::clear_life_time() {
  life_time_ = 0;
  clear_has_life_time();
}
inline ::google::protobuf::int32 msg_generator_init::life_time() const {
  return life_time_;
}
inline void msg_generator_init::set_life_time(::google::protobuf::int32 value) {
  set_has_life_time();
  life_time_ = value;
}

// optional int32 start_id = 3;
inline bool msg_generator_init::has_start_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_generator_init::set_has_start_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_generator_init::clear_has_start_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_generator_init::clear_start_id() {
  start_id_ = 0;
  clear_has_start_id();
}
inline ::google::protobuf::int32 msg_generator_init::start_id() const {
  return start_id_;
}
inline void msg_generator_init::set_start_id(::google::protobuf::int32 value) {
  set_has_start_id();
  start_id_ = value;
}

// optional int32 route_id = 4 [default = 0];
inline bool msg_generator_init::has_route_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_generator_init::set_has_route_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_generator_init::clear_has_route_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_generator_init::clear_route_id() {
  route_id_ = 0;
  clear_has_route_id();
}
inline ::google::protobuf::int32 msg_generator_init::route_id() const {
  return route_id_;
}
inline void msg_generator_init::set_route_id(::google::protobuf::int32 value) {
  set_has_route_id();
  route_id_ = value;
}

// optional int32 pos_x = 5 [default = 0];
inline bool msg_generator_init::has_pos_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_generator_init::set_has_pos_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_generator_init::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_generator_init::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline ::google::protobuf::int32 msg_generator_init::pos_x() const {
  return pos_x_;
}
inline void msg_generator_init::set_pos_x(::google::protobuf::int32 value) {
  set_has_pos_x();
  pos_x_ = value;
}

// optional int32 pos_y = 6 [default = 0];
inline bool msg_generator_init::has_pos_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_generator_init::set_has_pos_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_generator_init::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_generator_init::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline ::google::protobuf::int32 msg_generator_init::pos_y() const {
  return pos_y_;
}
inline void msg_generator_init::set_pos_y(::google::protobuf::int32 value) {
  set_has_pos_y();
  pos_y_ = value;
}

// -------------------------------------------------------------------

// msg_scene_info

// optional int32 sceneid = 1;
inline bool msg_scene_info::has_sceneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_scene_info::set_has_sceneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_scene_info::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_scene_info::clear_sceneid() {
  sceneid_ = 0;
  clear_has_sceneid();
}
inline ::google::protobuf::int32 msg_scene_info::sceneid() const {
  return sceneid_;
}
inline void msg_scene_info::set_sceneid(::google::protobuf::int32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// optional int32 roomid = 2;
inline bool msg_scene_info::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_scene_info::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_scene_info::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_scene_info::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 msg_scene_info::roomid() const {
  return roomid_;
}
inline void msg_scene_info::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// repeated .fish_protocols.msg_seat_info seat_info = 3;
inline int msg_scene_info::seat_info_size() const {
  return seat_info_.size();
}
inline void msg_scene_info::clear_seat_info() {
  seat_info_.Clear();
}
inline const ::fish_protocols::msg_seat_info& msg_scene_info::seat_info(int index) const {
  return seat_info_.Get(index);
}
inline ::fish_protocols::msg_seat_info* msg_scene_info::mutable_seat_info(int index) {
  return seat_info_.Mutable(index);
}
inline ::fish_protocols::msg_seat_info* msg_scene_info::add_seat_info() {
  return seat_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fish_protocols::msg_seat_info >&
msg_scene_info::seat_info() const {
  return seat_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::fish_protocols::msg_seat_info >*
msg_scene_info::mutable_seat_info() {
  return &seat_info_;
}

// repeated .fish_protocols.msg_fish_init fish_infos = 4;
inline int msg_scene_info::fish_infos_size() const {
  return fish_infos_.size();
}
inline void msg_scene_info::clear_fish_infos() {
  fish_infos_.Clear();
}
inline const ::fish_protocols::msg_fish_init& msg_scene_info::fish_infos(int index) const {
  return fish_infos_.Get(index);
}
inline ::fish_protocols::msg_fish_init* msg_scene_info::mutable_fish_infos(int index) {
  return fish_infos_.Mutable(index);
}
inline ::fish_protocols::msg_fish_init* msg_scene_info::add_fish_infos() {
  return fish_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fish_protocols::msg_fish_init >&
msg_scene_info::fish_infos() const {
  return fish_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::fish_protocols::msg_fish_init >*
msg_scene_info::mutable_fish_infos() {
  return &fish_infos_;
}

// repeated .fish_protocols.msg_generator_init generator_infos = 5;
inline int msg_scene_info::generator_infos_size() const {
  return generator_infos_.size();
}
inline void msg_scene_info::clear_generator_infos() {
  generator_infos_.Clear();
}
inline const ::fish_protocols::msg_generator_init& msg_scene_info::generator_infos(int index) const {
  return generator_infos_.Get(index);
}
inline ::fish_protocols::msg_generator_init* msg_scene_info::mutable_generator_infos(int index) {
  return generator_infos_.Mutable(index);
}
inline ::fish_protocols::msg_generator_init* msg_scene_info::add_generator_infos() {
  return generator_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fish_protocols::msg_generator_init >&
msg_scene_info::generator_infos() const {
  return generator_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::fish_protocols::msg_generator_init >*
msg_scene_info::mutable_generator_infos() {
  return &generator_infos_;
}

// -------------------------------------------------------------------

// msg_buff_info

// optional int32 buffid = 1;
inline bool msg_buff_info::has_buffid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_buff_info::set_has_buffid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_buff_info::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_buff_info::clear_buffid() {
  buffid_ = 0;
  clear_has_buffid();
}
inline ::google::protobuf::int32 msg_buff_info::buffid() const {
  return buffid_;
}
inline void msg_buff_info::set_buffid(::google::protobuf::int32 value) {
  set_has_buffid();
  buffid_ = value;
}

// optional int32 outtime = 2 [default = -1];
inline bool msg_buff_info::has_outtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_buff_info::set_has_outtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_buff_info::clear_has_outtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_buff_info::clear_outtime() {
  outtime_ = -1;
  clear_has_outtime();
}
inline ::google::protobuf::int32 msg_buff_info::outtime() const {
  return outtime_;
}
inline void msg_buff_info::set_outtime(::google::protobuf::int32 value) {
  set_has_outtime();
  outtime_ = value;
}

// -------------------------------------------------------------------

// msg_seat_info

// optional int32 seat_index = 1;
inline bool msg_seat_info::has_seat_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_seat_info::set_has_seat_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_seat_info::clear_has_seat_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_seat_info::clear_seat_index() {
  seat_index_ = 0;
  clear_has_seat_index();
}
inline ::google::protobuf::int32 msg_seat_info::seat_index() const {
  return seat_index_;
}
inline void msg_seat_info::set_seat_index(::google::protobuf::int32 value) {
  set_has_seat_index();
  seat_index_ = value;
}

// optional int32 player_id = 2;
inline bool msg_seat_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_seat_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_seat_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_seat_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_seat_info::player_id() const {
  return player_id_;
}
inline void msg_seat_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string nickname = 3;
inline bool msg_seat_info::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_seat_info::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_seat_info::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_seat_info::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& msg_seat_info::nickname() const {
  return *nickname_;
}
inline void msg_seat_info::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void msg_seat_info::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void msg_seat_info::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_seat_info::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* msg_seat_info::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_seat_info::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 player_gold = 4;
inline bool msg_seat_info::has_player_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_seat_info::set_has_player_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_seat_info::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_seat_info::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 msg_seat_info::player_gold() const {
  return player_gold_;
}
inline void msg_seat_info::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// optional int32 turret_rate = 5;
inline bool msg_seat_info::has_turret_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_seat_info::set_has_turret_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_seat_info::clear_has_turret_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_seat_info::clear_turret_rate() {
  turret_rate_ = 0;
  clear_has_turret_rate();
}
inline ::google::protobuf::int32 msg_seat_info::turret_rate() const {
  return turret_rate_;
}
inline void msg_seat_info::set_turret_rate(::google::protobuf::int32 value) {
  set_has_turret_rate();
  turret_rate_ = value;
}

// optional int32 turret_id = 6;
inline bool msg_seat_info::has_turret_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_seat_info::set_has_turret_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_seat_info::clear_has_turret_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_seat_info::clear_turret_id() {
  turret_id_ = 0;
  clear_has_turret_id();
}
inline ::google::protobuf::int32 msg_seat_info::turret_id() const {
  return turret_id_;
}
inline void msg_seat_info::set_turret_id(::google::protobuf::int32 value) {
  set_has_turret_id();
  turret_id_ = value;
}

// repeated .fish_protocols.msg_buff_info bufflist = 7;
inline int msg_seat_info::bufflist_size() const {
  return bufflist_.size();
}
inline void msg_seat_info::clear_bufflist() {
  bufflist_.Clear();
}
inline const ::fish_protocols::msg_buff_info& msg_seat_info::bufflist(int index) const {
  return bufflist_.Get(index);
}
inline ::fish_protocols::msg_buff_info* msg_seat_info::mutable_bufflist(int index) {
  return bufflist_.Mutable(index);
}
inline ::fish_protocols::msg_buff_info* msg_seat_info::add_bufflist() {
  return bufflist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fish_protocols::msg_buff_info >&
msg_seat_info::bufflist() const {
  return bufflist_;
}
inline ::google::protobuf::RepeatedPtrField< ::fish_protocols::msg_buff_info >*
msg_seat_info::mutable_bufflist() {
  return &bufflist_;
}

// optional int32 turret_power = 8;
inline bool msg_seat_info::has_turret_power() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_seat_info::set_has_turret_power() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_seat_info::clear_has_turret_power() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_seat_info::clear_turret_power() {
  turret_power_ = 0;
  clear_has_turret_power();
}
inline ::google::protobuf::int32 msg_seat_info::turret_power() const {
  return turret_power_;
}
inline void msg_seat_info::set_turret_power(::google::protobuf::int32 value) {
  set_has_turret_power();
  turret_power_ = value;
}

// optional int32 max_turret_power = 9;
inline bool msg_seat_info::has_max_turret_power() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msg_seat_info::set_has_max_turret_power() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msg_seat_info::clear_has_max_turret_power() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msg_seat_info::clear_max_turret_power() {
  max_turret_power_ = 0;
  clear_has_max_turret_power();
}
inline ::google::protobuf::int32 msg_seat_info::max_turret_power() const {
  return max_turret_power_;
}
inline void msg_seat_info::set_max_turret_power(::google::protobuf::int32 value) {
  set_has_max_turret_power();
  max_turret_power_ = value;
}

// optional int32 photo_frame = 10;
inline bool msg_seat_info::has_photo_frame() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void msg_seat_info::set_has_photo_frame() {
  _has_bits_[0] |= 0x00000200u;
}
inline void msg_seat_info::clear_has_photo_frame() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void msg_seat_info::clear_photo_frame() {
  photo_frame_ = 0;
  clear_has_photo_frame();
}
inline ::google::protobuf::int32 msg_seat_info::photo_frame() const {
  return photo_frame_;
}
inline void msg_seat_info::set_photo_frame(::google::protobuf::int32 value) {
  set_has_photo_frame();
  photo_frame_ = value;
}

// optional string icon_custom = 11;
inline bool msg_seat_info::has_icon_custom() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void msg_seat_info::set_has_icon_custom() {
  _has_bits_[0] |= 0x00000400u;
}
inline void msg_seat_info::clear_has_icon_custom() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void msg_seat_info::clear_icon_custom() {
  if (icon_custom_ != &::google::protobuf::internal::kEmptyString) {
    icon_custom_->clear();
  }
  clear_has_icon_custom();
}
inline const ::std::string& msg_seat_info::icon_custom() const {
  return *icon_custom_;
}
inline void msg_seat_info::set_icon_custom(const ::std::string& value) {
  set_has_icon_custom();
  if (icon_custom_ == &::google::protobuf::internal::kEmptyString) {
    icon_custom_ = new ::std::string;
  }
  icon_custom_->assign(value);
}
inline void msg_seat_info::set_icon_custom(const char* value) {
  set_has_icon_custom();
  if (icon_custom_ == &::google::protobuf::internal::kEmptyString) {
    icon_custom_ = new ::std::string;
  }
  icon_custom_->assign(value);
}
inline void msg_seat_info::set_icon_custom(const char* value, size_t size) {
  set_has_icon_custom();
  if (icon_custom_ == &::google::protobuf::internal::kEmptyString) {
    icon_custom_ = new ::std::string;
  }
  icon_custom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_seat_info::mutable_icon_custom() {
  set_has_icon_custom();
  if (icon_custom_ == &::google::protobuf::internal::kEmptyString) {
    icon_custom_ = new ::std::string;
  }
  return icon_custom_;
}
inline ::std::string* msg_seat_info::release_icon_custom() {
  clear_has_icon_custom();
  if (icon_custom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_custom_;
    icon_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_seat_info::set_allocated_icon_custom(::std::string* icon_custom) {
  if (icon_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_custom_;
  }
  if (icon_custom) {
    set_has_icon_custom();
    icon_custom_ = icon_custom;
  } else {
    clear_has_icon_custom();
    icon_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 sex = 12;
inline bool msg_seat_info::has_sex() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void msg_seat_info::set_has_sex() {
  _has_bits_[0] |= 0x00000800u;
}
inline void msg_seat_info::clear_has_sex() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void msg_seat_info::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 msg_seat_info::sex() const {
  return sex_;
}
inline void msg_seat_info::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 vip = 13;
inline bool msg_seat_info::has_vip() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void msg_seat_info::set_has_vip() {
  _has_bits_[0] |= 0x00001000u;
}
inline void msg_seat_info::clear_has_vip() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void msg_seat_info::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
inline ::google::protobuf::int32 msg_seat_info::vip() const {
  return vip_;
}
inline void msg_seat_info::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
}

// optional int32 player_ticket = 14;
inline bool msg_seat_info::has_player_ticket() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void msg_seat_info::set_has_player_ticket() {
  _has_bits_[0] |= 0x00002000u;
}
inline void msg_seat_info::clear_has_player_ticket() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void msg_seat_info::clear_player_ticket() {
  player_ticket_ = 0;
  clear_has_player_ticket();
}
inline ::google::protobuf::int32 msg_seat_info::player_ticket() const {
  return player_ticket_;
}
inline void msg_seat_info::set_player_ticket(::google::protobuf::int32 value) {
  set_has_player_ticket();
  player_ticket_ = value;
}

// -------------------------------------------------------------------

// packetl2c_get_scene_info_result

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
inline bool packetl2c_get_scene_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_get_scene_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_get_scene_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_get_scene_info_result::clear_packet_id() {
  packet_id_ = 15100;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_get_scene_info_result::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_get_scene_info_result::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .fish_protocols.msg_scene_info scene_info = 2;
inline bool packetl2c_get_scene_info_result::has_scene_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_get_scene_info_result::set_has_scene_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_get_scene_info_result::clear_has_scene_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_get_scene_info_result::clear_scene_info() {
  if (scene_info_ != NULL) scene_info_->::fish_protocols::msg_scene_info::Clear();
  clear_has_scene_info();
}
inline const ::fish_protocols::msg_scene_info& packetl2c_get_scene_info_result::scene_info() const {
  return scene_info_ != NULL ? *scene_info_ : *default_instance_->scene_info_;
}
inline ::fish_protocols::msg_scene_info* packetl2c_get_scene_info_result::mutable_scene_info() {
  set_has_scene_info();
  if (scene_info_ == NULL) scene_info_ = new ::fish_protocols::msg_scene_info;
  return scene_info_;
}
inline ::fish_protocols::msg_scene_info* packetl2c_get_scene_info_result::release_scene_info() {
  clear_has_scene_info();
  ::fish_protocols::msg_scene_info* temp = scene_info_;
  scene_info_ = NULL;
  return temp;
}
inline void packetl2c_get_scene_info_result::set_allocated_scene_info(::fish_protocols::msg_scene_info* scene_info) {
  delete scene_info_;
  scene_info_ = scene_info;
  if (scene_info) {
    set_has_scene_info();
  } else {
    clear_has_scene_info();
  }
}

// -------------------------------------------------------------------

// packetc2l_change_seat

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_seat];
inline bool packetc2l_change_seat::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_change_seat::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_change_seat::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_change_seat::clear_packet_id() {
  packet_id_ = 10101;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetc2l_change_seat::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_change_seat::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetc2l_change_seat::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_change_seat::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_change_seat::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_change_seat::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetc2l_change_seat::player_id() const {
  return player_id_;
}
inline void packetc2l_change_seat::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 seat_index = 3;
inline bool packetc2l_change_seat::has_seat_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_change_seat::set_has_seat_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_change_seat::clear_has_seat_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_change_seat::clear_seat_index() {
  seat_index_ = 0;
  clear_has_seat_index();
}
inline ::google::protobuf::int32 packetc2l_change_seat::seat_index() const {
  return seat_index_;
}
inline void packetc2l_change_seat::set_seat_index(::google::protobuf::int32 value) {
  set_has_seat_index();
  seat_index_ = value;
}

// -------------------------------------------------------------------

// packetc2l_change_rate

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_rate];
inline bool packetc2l_change_rate::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_change_rate::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_change_rate::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_change_rate::clear_packet_id() {
  packet_id_ = 10102;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetc2l_change_rate::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_change_rate::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 turret_rate = 2;
inline bool packetc2l_change_rate::has_turret_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_change_rate::set_has_turret_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_change_rate::clear_has_turret_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_change_rate::clear_turret_rate() {
  turret_rate_ = 0;
  clear_has_turret_rate();
}
inline ::google::protobuf::int32 packetc2l_change_rate::turret_rate() const {
  return turret_rate_;
}
inline void packetc2l_change_rate::set_turret_rate(::google::protobuf::int32 value) {
  set_has_turret_rate();
  turret_rate_ = value;
}

// -------------------------------------------------------------------

// packetl2c_change_seat_result

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_seat_result];
inline bool packetl2c_change_seat_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_change_seat_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_change_seat_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_change_seat_result::clear_packet_id() {
  packet_id_ = 15101;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_change_seat_result::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_change_seat_result::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_change_seat_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_change_seat_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_change_seat_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_change_seat_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_change_seat_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_change_seat_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetl2c_change_rate_result

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_rate_result];
inline bool packetl2c_change_rate_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_change_rate_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_change_rate_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_change_rate_result::clear_packet_id() {
  packet_id_ = 15110;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_change_rate_result::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_change_rate_result::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_change_rate_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_change_rate_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_change_rate_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_change_rate_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_change_rate_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_change_rate_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 old_rate = 3;
inline bool packetl2c_change_rate_result::has_old_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_change_rate_result::set_has_old_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_change_rate_result::clear_has_old_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_change_rate_result::clear_old_rate() {
  old_rate_ = 0;
  clear_has_old_rate();
}
inline ::google::protobuf::int32 packetl2c_change_rate_result::old_rate() const {
  return old_rate_;
}
inline void packetl2c_change_rate_result::set_old_rate(::google::protobuf::int32 value) {
  set_has_old_rate();
  old_rate_ = value;
}

// -------------------------------------------------------------------

// packetc2l_try_turret

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_try_turret];
inline bool packetc2l_try_turret::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_try_turret::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_try_turret::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_try_turret::clear_packet_id() {
  packet_id_ = 10113;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetc2l_try_turret::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_try_turret::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_try_turret_result

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_try_turret_result];
inline bool packetl2c_try_turret_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_try_turret_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_try_turret_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_try_turret_result::clear_packet_id() {
  packet_id_ = 15105;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_try_turret_result::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_try_turret_result::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_try_turret_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_try_turret_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_try_turret_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_try_turret_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_try_turret_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_try_turret_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 try_turret_id = 3 [default = -1];
inline bool packetl2c_try_turret_result::has_try_turret_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_try_turret_result::set_has_try_turret_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_try_turret_result::clear_has_try_turret_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_try_turret_result::clear_try_turret_id() {
  try_turret_id_ = -1;
  clear_has_try_turret_id();
}
inline ::google::protobuf::int32 packetl2c_try_turret_result::try_turret_id() const {
  return try_turret_id_;
}
inline void packetl2c_try_turret_result::set_try_turret_id(::google::protobuf::int32 value) {
  set_has_try_turret_id();
  try_turret_id_ = value;
}

// optional int32 try_endtime = 4;
inline bool packetl2c_try_turret_result::has_try_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_try_turret_result::set_has_try_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_try_turret_result::clear_has_try_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_try_turret_result::clear_try_endtime() {
  try_endtime_ = 0;
  clear_has_try_endtime();
}
inline ::google::protobuf::int32 packetl2c_try_turret_result::try_endtime() const {
  return try_endtime_;
}
inline void packetl2c_try_turret_result::set_try_endtime(::google::protobuf::int32 value) {
  set_has_try_endtime();
  try_endtime_ = value;
}

// -------------------------------------------------------------------

// packetc2l_try_turret_state

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_try_turret_state];
inline bool packetc2l_try_turret_state::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_try_turret_state::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_try_turret_state::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_try_turret_state::clear_packet_id() {
  packet_id_ = 10114;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetc2l_try_turret_state::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_try_turret_state::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_try_turret_state_result

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_try_turret_state_result];
inline bool packetl2c_try_turret_state_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_try_turret_state_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_try_turret_state_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_try_turret_state_result::clear_packet_id() {
  packet_id_ = 15106;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_try_turret_state_result::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_try_turret_state_result::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 try_turret_id = 2 [default = -1];
inline bool packetl2c_try_turret_state_result::has_try_turret_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_try_turret_state_result::set_has_try_turret_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_try_turret_state_result::clear_has_try_turret_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_try_turret_state_result::clear_try_turret_id() {
  try_turret_id_ = -1;
  clear_has_try_turret_id();
}
inline ::google::protobuf::int32 packetl2c_try_turret_state_result::try_turret_id() const {
  return try_turret_id_;
}
inline void packetl2c_try_turret_state_result::set_try_turret_id(::google::protobuf::int32 value) {
  set_has_try_turret_id();
  try_turret_id_ = value;
}

// optional int32 fire_count = 3;
inline bool packetl2c_try_turret_state_result::has_fire_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_try_turret_state_result::set_has_fire_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_try_turret_state_result::clear_has_fire_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_try_turret_state_result::clear_fire_count() {
  fire_count_ = 0;
  clear_has_fire_count();
}
inline ::google::protobuf::int32 packetl2c_try_turret_state_result::fire_count() const {
  return fire_count_;
}
inline void packetl2c_try_turret_state_result::set_fire_count(::google::protobuf::int32 value) {
  set_has_fire_count();
  fire_count_ = value;
}

// optional int32 try_cd = 4;
inline bool packetl2c_try_turret_state_result::has_try_cd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_try_turret_state_result::set_has_try_cd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_try_turret_state_result::clear_has_try_cd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_try_turret_state_result::clear_try_cd() {
  try_cd_ = 0;
  clear_has_try_cd();
}
inline ::google::protobuf::int32 packetl2c_try_turret_state_result::try_cd() const {
  return try_cd_;
}
inline void packetl2c_try_turret_state_result::set_try_cd(::google::protobuf::int32 value) {
  set_has_try_cd();
  try_cd_ = value;
}

// optional int32 try_endtime = 5;
inline bool packetl2c_try_turret_state_result::has_try_endtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_try_turret_state_result::set_has_try_endtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_try_turret_state_result::clear_has_try_endtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_try_turret_state_result::clear_try_endtime() {
  try_endtime_ = 0;
  clear_has_try_endtime();
}
inline ::google::protobuf::int32 packetl2c_try_turret_state_result::try_endtime() const {
  return try_endtime_;
}
inline void packetl2c_try_turret_state_result::set_try_endtime(::google::protobuf::int32 value) {
  set_has_try_endtime();
  try_endtime_ = value;
}

// -------------------------------------------------------------------

// packetc2l_use_turret_power

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_use_turret_power];
inline bool packetc2l_use_turret_power::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_use_turret_power::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_use_turret_power::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_use_turret_power::clear_packet_id() {
  packet_id_ = 10115;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetc2l_use_turret_power::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_use_turret_power::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional bool is_buy = 2 [default = false];
inline bool packetc2l_use_turret_power::has_is_buy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_use_turret_power::set_has_is_buy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_use_turret_power::clear_has_is_buy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_use_turret_power::clear_is_buy() {
  is_buy_ = false;
  clear_has_is_buy();
}
inline bool packetc2l_use_turret_power::is_buy() const {
  return is_buy_;
}
inline void packetc2l_use_turret_power::set_is_buy(bool value) {
  set_has_is_buy();
  is_buy_ = value;
}

// -------------------------------------------------------------------

// packetl2c_use_turret_power_result

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_use_turret_power_result];
inline bool packetl2c_use_turret_power_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_use_turret_power_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_use_turret_power_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_use_turret_power_result::clear_packet_id() {
  packet_id_ = 15107;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_use_turret_power_result::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_use_turret_power_result::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_use_turret_power_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_use_turret_power_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_use_turret_power_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_use_turret_power_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_use_turret_power_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_use_turret_power_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 power_type = 3;
inline bool packetl2c_use_turret_power_result::has_power_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_use_turret_power_result::set_has_power_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_use_turret_power_result::clear_has_power_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_use_turret_power_result::clear_power_type() {
  power_type_ = 0;
  clear_has_power_type();
}
inline ::google::protobuf::int32 packetl2c_use_turret_power_result::power_type() const {
  return power_type_;
}
inline void packetl2c_use_turret_power_result::set_power_type(::google::protobuf::int32 value) {
  set_has_power_type();
  power_type_ = value;
}

// optional bool is_buy = 4 [default = false];
inline bool packetl2c_use_turret_power_result::has_is_buy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_use_turret_power_result::set_has_is_buy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_use_turret_power_result::clear_has_is_buy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_use_turret_power_result::clear_is_buy() {
  is_buy_ = false;
  clear_has_is_buy();
}
inline bool packetl2c_use_turret_power_result::is_buy() const {
  return is_buy_;
}
inline void packetl2c_use_turret_power_result::set_is_buy(bool value) {
  set_has_is_buy();
  is_buy_ = value;
}

// -------------------------------------------------------------------

// packetc2l_turret_rotate

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_turret_rotate];
inline bool packetc2l_turret_rotate::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_turret_rotate::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_turret_rotate::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_turret_rotate::clear_packet_id() {
  packet_id_ = 10116;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetc2l_turret_rotate::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_turret_rotate::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 rotate_angle = 2;
inline bool packetc2l_turret_rotate::has_rotate_angle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_turret_rotate::set_has_rotate_angle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_turret_rotate::clear_has_rotate_angle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_turret_rotate::clear_rotate_angle() {
  rotate_angle_ = 0;
  clear_has_rotate_angle();
}
inline ::google::protobuf::int32 packetc2l_turret_rotate::rotate_angle() const {
  return rotate_angle_;
}
inline void packetc2l_turret_rotate::set_rotate_angle(::google::protobuf::int32 value) {
  set_has_rotate_angle();
  rotate_angle_ = value;
}

// -------------------------------------------------------------------

// packetc2l_sync_gold

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_sync_gold];
inline bool packetc2l_sync_gold::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_sync_gold::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_sync_gold::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_sync_gold::clear_packet_id() {
  packet_id_ = 10118;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetc2l_sync_gold::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_sync_gold::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_enter_seat

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_enter_seat];
inline bool packetl2c_bc_enter_seat::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_enter_seat::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_enter_seat::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_enter_seat::clear_packet_id() {
  packet_id_ = 15201;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_enter_seat::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_enter_seat::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .fish_protocols.msg_seat_info seat_info = 2;
inline bool packetl2c_bc_enter_seat::has_seat_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_enter_seat::set_has_seat_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_enter_seat::clear_has_seat_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_enter_seat::clear_seat_info() {
  if (seat_info_ != NULL) seat_info_->::fish_protocols::msg_seat_info::Clear();
  clear_has_seat_info();
}
inline const ::fish_protocols::msg_seat_info& packetl2c_bc_enter_seat::seat_info() const {
  return seat_info_ != NULL ? *seat_info_ : *default_instance_->seat_info_;
}
inline ::fish_protocols::msg_seat_info* packetl2c_bc_enter_seat::mutable_seat_info() {
  set_has_seat_info();
  if (seat_info_ == NULL) seat_info_ = new ::fish_protocols::msg_seat_info;
  return seat_info_;
}
inline ::fish_protocols::msg_seat_info* packetl2c_bc_enter_seat::release_seat_info() {
  clear_has_seat_info();
  ::fish_protocols::msg_seat_info* temp = seat_info_;
  seat_info_ = NULL;
  return temp;
}
inline void packetl2c_bc_enter_seat::set_allocated_seat_info(::fish_protocols::msg_seat_info* seat_info) {
  delete seat_info_;
  seat_info_ = seat_info;
  if (seat_info) {
    set_has_seat_info();
  } else {
    clear_has_seat_info();
  }
}

// -------------------------------------------------------------------

// packetl2c_bc_leave_seat

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_leave_seat];
inline bool packetl2c_bc_leave_seat::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_leave_seat::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_leave_seat::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_leave_seat::clear_packet_id() {
  packet_id_ = 15202;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_leave_seat::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_leave_seat::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_bc_leave_seat::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_leave_seat::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_leave_seat::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_leave_seat::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_leave_seat::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_leave_seat::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_robot_enter

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_robot_enter];
inline bool packetl2c_robot_enter::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_robot_enter::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_robot_enter::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_robot_enter::clear_packet_id() {
  packet_id_ = 16000;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_robot_enter::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_robot_enter::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .fish_protocols.msg_seat_info seat_info = 2;
inline bool packetl2c_robot_enter::has_seat_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_robot_enter::set_has_seat_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_robot_enter::clear_has_seat_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_robot_enter::clear_seat_info() {
  if (seat_info_ != NULL) seat_info_->::fish_protocols::msg_seat_info::Clear();
  clear_has_seat_info();
}
inline const ::fish_protocols::msg_seat_info& packetl2c_robot_enter::seat_info() const {
  return seat_info_ != NULL ? *seat_info_ : *default_instance_->seat_info_;
}
inline ::fish_protocols::msg_seat_info* packetl2c_robot_enter::mutable_seat_info() {
  set_has_seat_info();
  if (seat_info_ == NULL) seat_info_ = new ::fish_protocols::msg_seat_info;
  return seat_info_;
}
inline ::fish_protocols::msg_seat_info* packetl2c_robot_enter::release_seat_info() {
  clear_has_seat_info();
  ::fish_protocols::msg_seat_info* temp = seat_info_;
  seat_info_ = NULL;
  return temp;
}
inline void packetl2c_robot_enter::set_allocated_seat_info(::fish_protocols::msg_seat_info* seat_info) {
  delete seat_info_;
  seat_info_ = seat_info;
  if (seat_info) {
    set_has_seat_info();
  } else {
    clear_has_seat_info();
  }
}

// optional int32 scene_id = 3;
inline bool packetl2c_robot_enter::has_scene_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_robot_enter::set_has_scene_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_robot_enter::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_robot_enter::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 packetl2c_robot_enter::scene_id() const {
  return scene_id_;
}
inline void packetl2c_robot_enter::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_robot_leave

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_robot_leave];
inline bool packetl2c_robot_leave::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_robot_leave::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_robot_leave::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_robot_leave::clear_packet_id() {
  packet_id_ = 16100;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_robot_leave::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_robot_leave::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_robot_leave::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_robot_leave::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_robot_leave::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_robot_leave::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_robot_leave::player_id() const {
  return player_id_;
}
inline void packetl2c_robot_leave::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_change_rate

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_rate];
inline bool packetl2c_bc_change_rate::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_change_rate::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_change_rate::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_change_rate::clear_packet_id() {
  packet_id_ = 15203;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_change_rate::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_change_rate::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_bc_change_rate::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_change_rate::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_change_rate::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_change_rate::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_change_rate::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_change_rate::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 turret_rate = 3;
inline bool packetl2c_bc_change_rate::has_turret_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_change_rate::set_has_turret_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_change_rate::clear_has_turret_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_change_rate::clear_turret_rate() {
  turret_rate_ = 0;
  clear_has_turret_rate();
}
inline ::google::protobuf::int32 packetl2c_bc_change_rate::turret_rate() const {
  return turret_rate_;
}
inline void packetl2c_bc_change_rate::set_turret_rate(::google::protobuf::int32 value) {
  set_has_turret_rate();
  turret_rate_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_change_attr

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
inline bool packetl2c_bc_change_attr::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_change_attr::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_change_attr::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_change_attr::clear_packet_id() {
  packet_id_ = 15207;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_change_attr::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_change_attr::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_bc_change_attr::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_change_attr::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_change_attr::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_change_attr::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_change_attr::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_change_attr::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int64 change_gold = 3;
inline bool packetl2c_bc_change_attr::has_change_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_change_attr::set_has_change_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_change_attr::clear_has_change_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_change_attr::clear_change_gold() {
  change_gold_ = GOOGLE_LONGLONG(0);
  clear_has_change_gold();
}
inline ::google::protobuf::int64 packetl2c_bc_change_attr::change_gold() const {
  return change_gold_;
}
inline void packetl2c_bc_change_attr::set_change_gold(::google::protobuf::int64 value) {
  set_has_change_gold();
  change_gold_ = value;
}

// optional int32 change_vip = 4;
inline bool packetl2c_bc_change_attr::has_change_vip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_bc_change_attr::set_has_change_vip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_bc_change_attr::clear_has_change_vip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_bc_change_attr::clear_change_vip() {
  change_vip_ = 0;
  clear_has_change_vip();
}
inline ::google::protobuf::int32 packetl2c_bc_change_attr::change_vip() const {
  return change_vip_;
}
inline void packetl2c_bc_change_attr::set_change_vip(::google::protobuf::int32 value) {
  set_has_change_vip();
  change_vip_ = value;
}

// optional int32 change_ticket = 5;
inline bool packetl2c_bc_change_attr::has_change_ticket() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_bc_change_attr::set_has_change_ticket() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_bc_change_attr::clear_has_change_ticket() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_bc_change_attr::clear_change_ticket() {
  change_ticket_ = 0;
  clear_has_change_ticket();
}
inline ::google::protobuf::int32 packetl2c_bc_change_attr::change_ticket() const {
  return change_ticket_;
}
inline void packetl2c_bc_change_attr::set_change_ticket(::google::protobuf::int32 value) {
  set_has_change_ticket();
  change_ticket_ = value;
}

// -------------------------------------------------------------------

// msg_fish_info

// optional int32 id = 1;
inline bool msg_fish_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_fish_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_fish_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_fish_info::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 msg_fish_info::id() const {
  return id_;
}
inline void msg_fish_info::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 fish_id = 2;
inline bool msg_fish_info::has_fish_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_fish_info::set_has_fish_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_fish_info::clear_has_fish_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_fish_info::clear_fish_id() {
  fish_id_ = 0;
  clear_has_fish_id();
}
inline ::google::protobuf::int32 msg_fish_info::fish_id() const {
  return fish_id_;
}
inline void msg_fish_info::set_fish_id(::google::protobuf::int32 value) {
  set_has_fish_id();
  fish_id_ = value;
}

// optional int32 route_id = 3;
inline bool msg_fish_info::has_route_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_fish_info::set_has_route_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_fish_info::clear_has_route_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_fish_info::clear_route_id() {
  route_id_ = 0;
  clear_has_route_id();
}
inline ::google::protobuf::int32 msg_fish_info::route_id() const {
  return route_id_;
}
inline void msg_fish_info::set_route_id(::google::protobuf::int32 value) {
  set_has_route_id();
  route_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_create_fish

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_create_fish];
inline bool packetl2c_bc_create_fish::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_create_fish::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_create_fish::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_create_fish::clear_packet_id() {
  packet_id_ = 15204;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_create_fish::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_create_fish::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .fish_protocols.msg_fish_info fish_info = 2;
inline bool packetl2c_bc_create_fish::has_fish_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_create_fish::set_has_fish_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_create_fish::clear_has_fish_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_create_fish::clear_fish_info() {
  if (fish_info_ != NULL) fish_info_->::fish_protocols::msg_fish_info::Clear();
  clear_has_fish_info();
}
inline const ::fish_protocols::msg_fish_info& packetl2c_bc_create_fish::fish_info() const {
  return fish_info_ != NULL ? *fish_info_ : *default_instance_->fish_info_;
}
inline ::fish_protocols::msg_fish_info* packetl2c_bc_create_fish::mutable_fish_info() {
  set_has_fish_info();
  if (fish_info_ == NULL) fish_info_ = new ::fish_protocols::msg_fish_info;
  return fish_info_;
}
inline ::fish_protocols::msg_fish_info* packetl2c_bc_create_fish::release_fish_info() {
  clear_has_fish_info();
  ::fish_protocols::msg_fish_info* temp = fish_info_;
  fish_info_ = NULL;
  return temp;
}
inline void packetl2c_bc_create_fish::set_allocated_fish_info(::fish_protocols::msg_fish_info* fish_info) {
  delete fish_info_;
  fish_info_ = fish_info;
  if (fish_info) {
    set_has_fish_info();
  } else {
    clear_has_fish_info();
  }
}

// -------------------------------------------------------------------

// packetl2c_bc_create_generator

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_create_generator];
inline bool packetl2c_bc_create_generator::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_create_generator::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_create_generator::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_create_generator::clear_packet_id() {
  packet_id_ = 15208;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_create_generator::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_create_generator::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 generator_id = 2;
inline bool packetl2c_bc_create_generator::has_generator_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_create_generator::set_has_generator_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_create_generator::clear_has_generator_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_create_generator::clear_generator_id() {
  generator_id_ = 0;
  clear_has_generator_id();
}
inline ::google::protobuf::int32 packetl2c_bc_create_generator::generator_id() const {
  return generator_id_;
}
inline void packetl2c_bc_create_generator::set_generator_id(::google::protobuf::int32 value) {
  set_has_generator_id();
  generator_id_ = value;
}

// optional int32 start_id = 3;
inline bool packetl2c_bc_create_generator::has_start_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_create_generator::set_has_start_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_create_generator::clear_has_start_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_create_generator::clear_start_id() {
  start_id_ = 0;
  clear_has_start_id();
}
inline ::google::protobuf::int32 packetl2c_bc_create_generator::start_id() const {
  return start_id_;
}
inline void packetl2c_bc_create_generator::set_start_id(::google::protobuf::int32 value) {
  set_has_start_id();
  start_id_ = value;
}

// optional int32 route_id = 4 [default = 0];
inline bool packetl2c_bc_create_generator::has_route_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_bc_create_generator::set_has_route_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_bc_create_generator::clear_has_route_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_bc_create_generator::clear_route_id() {
  route_id_ = 0;
  clear_has_route_id();
}
inline ::google::protobuf::int32 packetl2c_bc_create_generator::route_id() const {
  return route_id_;
}
inline void packetl2c_bc_create_generator::set_route_id(::google::protobuf::int32 value) {
  set_has_route_id();
  route_id_ = value;
}

// optional bool is_red = 5 [default = false];
inline bool packetl2c_bc_create_generator::has_is_red() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_bc_create_generator::set_has_is_red() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_bc_create_generator::clear_has_is_red() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_bc_create_generator::clear_is_red() {
  is_red_ = false;
  clear_has_is_red();
}
inline bool packetl2c_bc_create_generator::is_red() const {
  return is_red_;
}
inline void packetl2c_bc_create_generator::set_is_red(bool value) {
  set_has_is_red();
  is_red_ = value;
}

// optional int32 pos_x = 6;
inline bool packetl2c_bc_create_generator::has_pos_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_bc_create_generator::set_has_pos_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_bc_create_generator::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_bc_create_generator::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline ::google::protobuf::int32 packetl2c_bc_create_generator::pos_x() const {
  return pos_x_;
}
inline void packetl2c_bc_create_generator::set_pos_x(::google::protobuf::int32 value) {
  set_has_pos_x();
  pos_x_ = value;
}

// optional int32 pos_y = 7;
inline bool packetl2c_bc_create_generator::has_pos_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetl2c_bc_create_generator::set_has_pos_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetl2c_bc_create_generator::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetl2c_bc_create_generator::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline ::google::protobuf::int32 packetl2c_bc_create_generator::pos_y() const {
  return pos_y_;
}
inline void packetl2c_bc_create_generator::set_pos_y(::google::protobuf::int32 value) {
  set_has_pos_y();
  pos_y_ = value;
}

// optional bool is_flash = 8 [default = false];
inline bool packetl2c_bc_create_generator::has_is_flash() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void packetl2c_bc_create_generator::set_has_is_flash() {
  _has_bits_[0] |= 0x00000080u;
}
inline void packetl2c_bc_create_generator::clear_has_is_flash() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void packetl2c_bc_create_generator::clear_is_flash() {
  is_flash_ = false;
  clear_has_is_flash();
}
inline bool packetl2c_bc_create_generator::is_flash() const {
  return is_flash_;
}
inline void packetl2c_bc_create_generator::set_is_flash(bool value) {
  set_has_is_flash();
  is_flash_ = value;
}

// -------------------------------------------------------------------

// packetc2l_manual_fire

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_manual_fire];
inline bool packetc2l_manual_fire::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_manual_fire::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_manual_fire::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_manual_fire::clear_packet_id() {
  packet_id_ = 10103;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetc2l_manual_fire::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_manual_fire::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 bullet_id = 2;
inline bool packetc2l_manual_fire::has_bullet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_manual_fire::set_has_bullet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_manual_fire::clear_has_bullet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_manual_fire::clear_bullet_id() {
  bullet_id_ = 0;
  clear_has_bullet_id();
}
inline ::google::protobuf::int32 packetc2l_manual_fire::bullet_id() const {
  return bullet_id_;
}
inline void packetc2l_manual_fire::set_bullet_id(::google::protobuf::int32 value) {
  set_has_bullet_id();
  bullet_id_ = value;
}

// optional int32 bullet_angle = 3;
inline bool packetc2l_manual_fire::has_bullet_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_manual_fire::set_has_bullet_angle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_manual_fire::clear_has_bullet_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_manual_fire::clear_bullet_angle() {
  bullet_angle_ = 0;
  clear_has_bullet_angle();
}
inline ::google::protobuf::int32 packetc2l_manual_fire::bullet_angle() const {
  return bullet_angle_;
}
inline void packetc2l_manual_fire::set_bullet_angle(::google::protobuf::int32 value) {
  set_has_bullet_angle();
  bullet_angle_ = value;
}

// optional bool is_multi = 4 [default = false];
inline bool packetc2l_manual_fire::has_is_multi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetc2l_manual_fire::set_has_is_multi() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetc2l_manual_fire::clear_has_is_multi() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetc2l_manual_fire::clear_is_multi() {
  is_multi_ = false;
  clear_has_is_multi();
}
inline bool packetc2l_manual_fire::is_multi() const {
  return is_multi_;
}
inline void packetc2l_manual_fire::set_is_multi(bool value) {
  set_has_is_multi();
  is_multi_ = value;
}

// optional bool is_fast = 5 [default = false];
inline bool packetc2l_manual_fire::has_is_fast() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetc2l_manual_fire::set_has_is_fast() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetc2l_manual_fire::clear_has_is_fast() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetc2l_manual_fire::clear_is_fast() {
  is_fast_ = false;
  clear_has_is_fast();
}
inline bool packetc2l_manual_fire::is_fast() const {
  return is_fast_;
}
inline void packetc2l_manual_fire::set_is_fast(bool value) {
  set_has_is_fast();
  is_fast_ = value;
}

// optional int32 bullet_type = 6 [default = 1];
inline bool packetc2l_manual_fire::has_bullet_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetc2l_manual_fire::set_has_bullet_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetc2l_manual_fire::clear_has_bullet_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetc2l_manual_fire::clear_bullet_type() {
  bullet_type_ = 1;
  clear_has_bullet_type();
}
inline ::google::protobuf::int32 packetc2l_manual_fire::bullet_type() const {
  return bullet_type_;
}
inline void packetc2l_manual_fire::set_bullet_type(::google::protobuf::int32 value) {
  set_has_bullet_type();
  bullet_type_ = value;
}

// optional int32 bullet_rate = 7;
inline bool packetc2l_manual_fire::has_bullet_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetc2l_manual_fire::set_has_bullet_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetc2l_manual_fire::clear_has_bullet_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetc2l_manual_fire::clear_bullet_rate() {
  bullet_rate_ = 0;
  clear_has_bullet_rate();
}
inline ::google::protobuf::int32 packetc2l_manual_fire::bullet_rate() const {
  return bullet_rate_;
}
inline void packetc2l_manual_fire::set_bullet_rate(::google::protobuf::int32 value) {
  set_has_bullet_rate();
  bullet_rate_ = value;
}

// -------------------------------------------------------------------

// packetl2c_manual_fire_fail

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_manual_fire_fail];
inline bool packetl2c_manual_fire_fail::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_manual_fire_fail::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_manual_fire_fail::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_manual_fire_fail::clear_packet_id() {
  packet_id_ = 15111;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_manual_fire_fail::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_manual_fire_fail::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 bullet_cost = 2;
inline bool packetl2c_manual_fire_fail::has_bullet_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_manual_fire_fail::set_has_bullet_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_manual_fire_fail::clear_has_bullet_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_manual_fire_fail::clear_bullet_cost() {
  bullet_cost_ = 0;
  clear_has_bullet_cost();
}
inline ::google::protobuf::int32 packetl2c_manual_fire_fail::bullet_cost() const {
  return bullet_cost_;
}
inline void packetl2c_manual_fire_fail::set_bullet_cost(::google::protobuf::int32 value) {
  set_has_bullet_cost();
  bullet_cost_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_manual_fire

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_manual_fire];
inline bool packetl2c_bc_manual_fire::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_manual_fire::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_manual_fire::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_manual_fire::clear_packet_id() {
  packet_id_ = 15205;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_manual_fire::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_manual_fire::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 bullet_id = 2;
inline bool packetl2c_bc_manual_fire::has_bullet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_manual_fire::set_has_bullet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_manual_fire::clear_has_bullet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_manual_fire::clear_bullet_id() {
  bullet_id_ = 0;
  clear_has_bullet_id();
}
inline ::google::protobuf::int32 packetl2c_bc_manual_fire::bullet_id() const {
  return bullet_id_;
}
inline void packetl2c_bc_manual_fire::set_bullet_id(::google::protobuf::int32 value) {
  set_has_bullet_id();
  bullet_id_ = value;
}

// optional int32 player_id = 3;
inline bool packetl2c_bc_manual_fire::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_manual_fire::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_manual_fire::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_manual_fire::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_manual_fire::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_manual_fire::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 bullet_angle = 4;
inline bool packetl2c_bc_manual_fire::has_bullet_angle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_bc_manual_fire::set_has_bullet_angle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_bc_manual_fire::clear_has_bullet_angle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_bc_manual_fire::clear_bullet_angle() {
  bullet_angle_ = 0;
  clear_has_bullet_angle();
}
inline ::google::protobuf::int32 packetl2c_bc_manual_fire::bullet_angle() const {
  return bullet_angle_;
}
inline void packetl2c_bc_manual_fire::set_bullet_angle(::google::protobuf::int32 value) {
  set_has_bullet_angle();
  bullet_angle_ = value;
}

// optional bool is_multi = 5 [default = false];
inline bool packetl2c_bc_manual_fire::has_is_multi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_bc_manual_fire::set_has_is_multi() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_bc_manual_fire::clear_has_is_multi() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_bc_manual_fire::clear_is_multi() {
  is_multi_ = false;
  clear_has_is_multi();
}
inline bool packetl2c_bc_manual_fire::is_multi() const {
  return is_multi_;
}
inline void packetl2c_bc_manual_fire::set_is_multi(bool value) {
  set_has_is_multi();
  is_multi_ = value;
}

// optional int32 bullet_type = 6 [default = 1];
inline bool packetl2c_bc_manual_fire::has_bullet_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_bc_manual_fire::set_has_bullet_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_bc_manual_fire::clear_has_bullet_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_bc_manual_fire::clear_bullet_type() {
  bullet_type_ = 1;
  clear_has_bullet_type();
}
inline ::google::protobuf::int32 packetl2c_bc_manual_fire::bullet_type() const {
  return bullet_type_;
}
inline void packetl2c_bc_manual_fire::set_bullet_type(::google::protobuf::int32 value) {
  set_has_bullet_type();
  bullet_type_ = value;
}

// -------------------------------------------------------------------

// packetc2l_missile_fire

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_missile_fire];
inline bool packetc2l_missile_fire::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_missile_fire::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_missile_fire::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_missile_fire::clear_packet_id() {
  packet_id_ = 10117;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetc2l_missile_fire::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_missile_fire::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 bullet_id = 2;
inline bool packetc2l_missile_fire::has_bullet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_missile_fire::set_has_bullet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_missile_fire::clear_has_bullet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_missile_fire::clear_bullet_id() {
  bullet_id_ = 0;
  clear_has_bullet_id();
}
inline ::google::protobuf::int32 packetc2l_missile_fire::bullet_id() const {
  return bullet_id_;
}
inline void packetc2l_missile_fire::set_bullet_id(::google::protobuf::int32 value) {
  set_has_bullet_id();
  bullet_id_ = value;
}

// optional int32 fire_pos_x = 3;
inline bool packetc2l_missile_fire::has_fire_pos_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_missile_fire::set_has_fire_pos_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_missile_fire::clear_has_fire_pos_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_missile_fire::clear_fire_pos_x() {
  fire_pos_x_ = 0;
  clear_has_fire_pos_x();
}
inline ::google::protobuf::int32 packetc2l_missile_fire::fire_pos_x() const {
  return fire_pos_x_;
}
inline void packetc2l_missile_fire::set_fire_pos_x(::google::protobuf::int32 value) {
  set_has_fire_pos_x();
  fire_pos_x_ = value;
}

// optional int32 fire_pos_y = 4;
inline bool packetc2l_missile_fire::has_fire_pos_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetc2l_missile_fire::set_has_fire_pos_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetc2l_missile_fire::clear_has_fire_pos_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetc2l_missile_fire::clear_fire_pos_y() {
  fire_pos_y_ = 0;
  clear_has_fire_pos_y();
}
inline ::google::protobuf::int32 packetc2l_missile_fire::fire_pos_y() const {
  return fire_pos_y_;
}
inline void packetc2l_missile_fire::set_fire_pos_y(::google::protobuf::int32 value) {
  set_has_fire_pos_y();
  fire_pos_y_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_missile_fire

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_missile_fire];
inline bool packetl2c_bc_missile_fire::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_missile_fire::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_missile_fire::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_missile_fire::clear_packet_id() {
  packet_id_ = 15226;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_missile_fire::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_missile_fire::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 bullet_id = 2;
inline bool packetl2c_bc_missile_fire::has_bullet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_missile_fire::set_has_bullet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_missile_fire::clear_has_bullet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_missile_fire::clear_bullet_id() {
  bullet_id_ = 0;
  clear_has_bullet_id();
}
inline ::google::protobuf::int32 packetl2c_bc_missile_fire::bullet_id() const {
  return bullet_id_;
}
inline void packetl2c_bc_missile_fire::set_bullet_id(::google::protobuf::int32 value) {
  set_has_bullet_id();
  bullet_id_ = value;
}

// optional int32 player_id = 3;
inline bool packetl2c_bc_missile_fire::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_missile_fire::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_missile_fire::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_missile_fire::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_missile_fire::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_missile_fire::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 fire_pos_x = 4;
inline bool packetl2c_bc_missile_fire::has_fire_pos_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_bc_missile_fire::set_has_fire_pos_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_bc_missile_fire::clear_has_fire_pos_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_bc_missile_fire::clear_fire_pos_x() {
  fire_pos_x_ = 0;
  clear_has_fire_pos_x();
}
inline ::google::protobuf::int32 packetl2c_bc_missile_fire::fire_pos_x() const {
  return fire_pos_x_;
}
inline void packetl2c_bc_missile_fire::set_fire_pos_x(::google::protobuf::int32 value) {
  set_has_fire_pos_x();
  fire_pos_x_ = value;
}

// optional int32 fire_pos_y = 5;
inline bool packetl2c_bc_missile_fire::has_fire_pos_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_bc_missile_fire::set_has_fire_pos_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_bc_missile_fire::clear_has_fire_pos_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_bc_missile_fire::clear_fire_pos_y() {
  fire_pos_y_ = 0;
  clear_has_fire_pos_y();
}
inline ::google::protobuf::int32 packetl2c_bc_missile_fire::fire_pos_y() const {
  return fire_pos_y_;
}
inline void packetl2c_bc_missile_fire::set_fire_pos_y(::google::protobuf::int32 value) {
  set_has_fire_pos_y();
  fire_pos_y_ = value;
}

// -------------------------------------------------------------------

// packetc2l_hit_fish

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_hit_fish];
inline bool packetc2l_hit_fish::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_hit_fish::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_hit_fish::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_hit_fish::clear_packet_id() {
  packet_id_ = 10104;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetc2l_hit_fish::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_hit_fish::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 bullet_id = 3;
inline bool packetc2l_hit_fish::has_bullet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_hit_fish::set_has_bullet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_hit_fish::clear_has_bullet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_hit_fish::clear_bullet_id() {
  bullet_id_ = 0;
  clear_has_bullet_id();
}
inline ::google::protobuf::int32 packetc2l_hit_fish::bullet_id() const {
  return bullet_id_;
}
inline void packetc2l_hit_fish::set_bullet_id(::google::protobuf::int32 value) {
  set_has_bullet_id();
  bullet_id_ = value;
}

// optional int32 fish_id = 4;
inline bool packetc2l_hit_fish::has_fish_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_hit_fish::set_has_fish_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_hit_fish::clear_has_fish_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_hit_fish::clear_fish_id() {
  fish_id_ = 0;
  clear_has_fish_id();
}
inline ::google::protobuf::int32 packetc2l_hit_fish::fish_id() const {
  return fish_id_;
}
inline void packetc2l_hit_fish::set_fish_id(::google::protobuf::int32 value) {
  set_has_fish_id();
  fish_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_hit_fishs

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_hit_fishs];
inline bool packetc2l_hit_fishs::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_hit_fishs::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_hit_fishs::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_hit_fishs::clear_packet_id() {
  packet_id_ = 10108;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetc2l_hit_fishs::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_hit_fishs::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 hit_type = 2;
inline bool packetc2l_hit_fishs::has_hit_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_hit_fishs::set_has_hit_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_hit_fishs::clear_has_hit_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_hit_fishs::clear_hit_type() {
  hit_type_ = 0;
  clear_has_hit_type();
}
inline ::google::protobuf::int32 packetc2l_hit_fishs::hit_type() const {
  return hit_type_;
}
inline void packetc2l_hit_fishs::set_hit_type(::google::protobuf::int32 value) {
  set_has_hit_type();
  hit_type_ = value;
}

// optional int32 bullet_id = 3;
inline bool packetc2l_hit_fishs::has_bullet_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_hit_fishs::set_has_bullet_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_hit_fishs::clear_has_bullet_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_hit_fishs::clear_bullet_id() {
  bullet_id_ = 0;
  clear_has_bullet_id();
}
inline ::google::protobuf::int32 packetc2l_hit_fishs::bullet_id() const {
  return bullet_id_;
}
inline void packetc2l_hit_fishs::set_bullet_id(::google::protobuf::int32 value) {
  set_has_bullet_id();
  bullet_id_ = value;
}

// repeated int32 fish_ids = 4;
inline int packetc2l_hit_fishs::fish_ids_size() const {
  return fish_ids_.size();
}
inline void packetc2l_hit_fishs::clear_fish_ids() {
  fish_ids_.Clear();
}
inline ::google::protobuf::int32 packetc2l_hit_fishs::fish_ids(int index) const {
  return fish_ids_.Get(index);
}
inline void packetc2l_hit_fishs::set_fish_ids(int index, ::google::protobuf::int32 value) {
  fish_ids_.Set(index, value);
}
inline void packetc2l_hit_fishs::add_fish_ids(::google::protobuf::int32 value) {
  fish_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetc2l_hit_fishs::fish_ids() const {
  return fish_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetc2l_hit_fishs::mutable_fish_ids() {
  return &fish_ids_;
}

// optional int32 hit_param = 5 [default = 0];
inline bool packetc2l_hit_fishs::has_hit_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetc2l_hit_fishs::set_has_hit_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetc2l_hit_fishs::clear_has_hit_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetc2l_hit_fishs::clear_hit_param() {
  hit_param_ = 0;
  clear_has_hit_param();
}
inline ::google::protobuf::int32 packetc2l_hit_fishs::hit_param() const {
  return hit_param_;
}
inline void packetc2l_hit_fishs::set_hit_param(::google::protobuf::int32 value) {
  set_has_hit_param();
  hit_param_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_fish_die

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_fish_die];
inline bool packetl2c_bc_fish_die::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_fish_die::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_fish_die::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_fish_die::clear_packet_id() {
  packet_id_ = 15206;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_fish_die::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_fish_die::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 fish_id = 2;
inline bool packetl2c_bc_fish_die::has_fish_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_fish_die::set_has_fish_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_fish_die::clear_has_fish_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_fish_die::clear_fish_id() {
  fish_id_ = 0;
  clear_has_fish_id();
}
inline ::google::protobuf::int32 packetl2c_bc_fish_die::fish_id() const {
  return fish_id_;
}
inline void packetl2c_bc_fish_die::set_fish_id(::google::protobuf::int32 value) {
  set_has_fish_id();
  fish_id_ = value;
}

// optional int32 kill_id = 3;
inline bool packetl2c_bc_fish_die::has_kill_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_fish_die::set_has_kill_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_fish_die::clear_has_kill_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_fish_die::clear_kill_id() {
  kill_id_ = 0;
  clear_has_kill_id();
}
inline ::google::protobuf::int32 packetl2c_bc_fish_die::kill_id() const {
  return kill_id_;
}
inline void packetl2c_bc_fish_die::set_kill_id(::google::protobuf::int32 value) {
  set_has_kill_id();
  kill_id_ = value;
}

// optional int32 base_score = 4;
inline bool packetl2c_bc_fish_die::has_base_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_bc_fish_die::set_has_base_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_bc_fish_die::clear_has_base_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_bc_fish_die::clear_base_score() {
  base_score_ = 0;
  clear_has_base_score();
}
inline ::google::protobuf::int32 packetl2c_bc_fish_die::base_score() const {
  return base_score_;
}
inline void packetl2c_bc_fish_die::set_base_score(::google::protobuf::int32 value) {
  set_has_base_score();
  base_score_ = value;
}

// optional int32 add_score = 5 [default = 0];
inline bool packetl2c_bc_fish_die::has_add_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_bc_fish_die::set_has_add_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_bc_fish_die::clear_has_add_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_bc_fish_die::clear_add_score() {
  add_score_ = 0;
  clear_has_add_score();
}
inline ::google::protobuf::int32 packetl2c_bc_fish_die::add_score() const {
  return add_score_;
}
inline void packetl2c_bc_fish_die::set_add_score(::google::protobuf::int32 value) {
  set_has_add_score();
  add_score_ = value;
}

// optional int32 ticket = 6 [default = 0];
inline bool packetl2c_bc_fish_die::has_ticket() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_bc_fish_die::set_has_ticket() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_bc_fish_die::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_bc_fish_die::clear_ticket() {
  ticket_ = 0;
  clear_has_ticket();
}
inline ::google::protobuf::int32 packetl2c_bc_fish_die::ticket() const {
  return ticket_;
}
inline void packetl2c_bc_fish_die::set_ticket(::google::protobuf::int32 value) {
  set_has_ticket();
  ticket_ = value;
}

// optional bool getstar = 7 [default = false];
inline bool packetl2c_bc_fish_die::has_getstar() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetl2c_bc_fish_die::set_has_getstar() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetl2c_bc_fish_die::clear_has_getstar() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetl2c_bc_fish_die::clear_getstar() {
  getstar_ = false;
  clear_has_getstar();
}
inline bool packetl2c_bc_fish_die::getstar() const {
  return getstar_;
}
inline void packetl2c_bc_fish_die::set_getstar(bool value) {
  set_has_getstar();
  getstar_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_specialfish_die

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_specialfish_die];
inline bool packetl2c_bc_specialfish_die::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_specialfish_die::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_specialfish_die::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_specialfish_die::clear_packet_id() {
  packet_id_ = 15219;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_specialfish_die::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_specialfish_die::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 fish_id = 2;
inline bool packetl2c_bc_specialfish_die::has_fish_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_specialfish_die::set_has_fish_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_specialfish_die::clear_has_fish_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_specialfish_die::clear_fish_id() {
  fish_id_ = 0;
  clear_has_fish_id();
}
inline ::google::protobuf::int32 packetl2c_bc_specialfish_die::fish_id() const {
  return fish_id_;
}
inline void packetl2c_bc_specialfish_die::set_fish_id(::google::protobuf::int32 value) {
  set_has_fish_id();
  fish_id_ = value;
}

// optional int32 player_id = 3;
inline bool packetl2c_bc_specialfish_die::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_specialfish_die::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_specialfish_die::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_specialfish_die::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_specialfish_die::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_specialfish_die::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 bullet_id = 4;
inline bool packetl2c_bc_specialfish_die::has_bullet_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_bc_specialfish_die::set_has_bullet_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_bc_specialfish_die::clear_has_bullet_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_bc_specialfish_die::clear_bullet_id() {
  bullet_id_ = 0;
  clear_has_bullet_id();
}
inline ::google::protobuf::int32 packetl2c_bc_specialfish_die::bullet_id() const {
  return bullet_id_;
}
inline void packetl2c_bc_specialfish_die::set_bullet_id(::google::protobuf::int32 value) {
  set_has_bullet_id();
  bullet_id_ = value;
}

// optional int32 base_score = 5;
inline bool packetl2c_bc_specialfish_die::has_base_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_bc_specialfish_die::set_has_base_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_bc_specialfish_die::clear_has_base_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_bc_specialfish_die::clear_base_score() {
  base_score_ = 0;
  clear_has_base_score();
}
inline ::google::protobuf::int32 packetl2c_bc_specialfish_die::base_score() const {
  return base_score_;
}
inline void packetl2c_bc_specialfish_die::set_base_score(::google::protobuf::int32 value) {
  set_has_base_score();
  base_score_ = value;
}

// optional int32 add_score = 6 [default = 0];
inline bool packetl2c_bc_specialfish_die::has_add_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_bc_specialfish_die::set_has_add_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_bc_specialfish_die::clear_has_add_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_bc_specialfish_die::clear_add_score() {
  add_score_ = 0;
  clear_has_add_score();
}
inline ::google::protobuf::int32 packetl2c_bc_specialfish_die::add_score() const {
  return add_score_;
}
inline void packetl2c_bc_specialfish_die::set_add_score(::google::protobuf::int32 value) {
  set_has_add_score();
  add_score_ = value;
}

// optional int32 ticket = 7 [default = 0];
inline bool packetl2c_bc_specialfish_die::has_ticket() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetl2c_bc_specialfish_die::set_has_ticket() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetl2c_bc_specialfish_die::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetl2c_bc_specialfish_die::clear_ticket() {
  ticket_ = 0;
  clear_has_ticket();
}
inline ::google::protobuf::int32 packetl2c_bc_specialfish_die::ticket() const {
  return ticket_;
}
inline void packetl2c_bc_specialfish_die::set_ticket(::google::protobuf::int32 value) {
  set_has_ticket();
  ticket_ = value;
}

// optional bool getstar = 8 [default = false];
inline bool packetl2c_bc_specialfish_die::has_getstar() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void packetl2c_bc_specialfish_die::set_has_getstar() {
  _has_bits_[0] |= 0x00000080u;
}
inline void packetl2c_bc_specialfish_die::clear_has_getstar() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void packetl2c_bc_specialfish_die::clear_getstar() {
  getstar_ = false;
  clear_has_getstar();
}
inline bool packetl2c_bc_specialfish_die::getstar() const {
  return getstar_;
}
inline void packetl2c_bc_specialfish_die::set_getstar(bool value) {
  set_has_getstar();
  getstar_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_fishs_die

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_fishs_die];
inline bool packetl2c_bc_fishs_die::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_fishs_die::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_fishs_die::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_fishs_die::clear_packet_id() {
  packet_id_ = 15218;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_fishs_die::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_fishs_die::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_bc_fishs_die::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_fishs_die::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_fishs_die::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_fishs_die::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_fishs_die::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_fishs_die::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 die_type = 3;
inline bool packetl2c_bc_fishs_die::has_die_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_fishs_die::set_has_die_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_fishs_die::clear_has_die_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_fishs_die::clear_die_type() {
  die_type_ = 0;
  clear_has_die_type();
}
inline ::google::protobuf::int32 packetl2c_bc_fishs_die::die_type() const {
  return die_type_;
}
inline void packetl2c_bc_fishs_die::set_die_type(::google::protobuf::int32 value) {
  set_has_die_type();
  die_type_ = value;
}

// repeated int32 die_params = 4;
inline int packetl2c_bc_fishs_die::die_params_size() const {
  return die_params_.size();
}
inline void packetl2c_bc_fishs_die::clear_die_params() {
  die_params_.Clear();
}
inline ::google::protobuf::int32 packetl2c_bc_fishs_die::die_params(int index) const {
  return die_params_.Get(index);
}
inline void packetl2c_bc_fishs_die::set_die_params(int index, ::google::protobuf::int32 value) {
  die_params_.Set(index, value);
}
inline void packetl2c_bc_fishs_die::add_die_params(::google::protobuf::int32 value) {
  die_params_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_bc_fishs_die::die_params() const {
  return die_params_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_bc_fishs_die::mutable_die_params() {
  return &die_params_;
}

// optional int32 total_score = 5;
inline bool packetl2c_bc_fishs_die::has_total_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_bc_fishs_die::set_has_total_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_bc_fishs_die::clear_has_total_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_bc_fishs_die::clear_total_score() {
  total_score_ = 0;
  clear_has_total_score();
}
inline ::google::protobuf::int32 packetl2c_bc_fishs_die::total_score() const {
  return total_score_;
}
inline void packetl2c_bc_fishs_die::set_total_score(::google::protobuf::int32 value) {
  set_has_total_score();
  total_score_ = value;
}

// optional int32 base_rate = 6;
inline bool packetl2c_bc_fishs_die::has_base_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_bc_fishs_die::set_has_base_rate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_bc_fishs_die::clear_has_base_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_bc_fishs_die::clear_base_rate() {
  base_rate_ = 0;
  clear_has_base_rate();
}
inline ::google::protobuf::int32 packetl2c_bc_fishs_die::base_rate() const {
  return base_rate_;
}
inline void packetl2c_bc_fishs_die::set_base_rate(::google::protobuf::int32 value) {
  set_has_base_rate();
  base_rate_ = value;
}

// optional int32 add_rate = 7 [default = 0];
inline bool packetl2c_bc_fishs_die::has_add_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetl2c_bc_fishs_die::set_has_add_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetl2c_bc_fishs_die::clear_has_add_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetl2c_bc_fishs_die::clear_add_rate() {
  add_rate_ = 0;
  clear_has_add_rate();
}
inline ::google::protobuf::int32 packetl2c_bc_fishs_die::add_rate() const {
  return add_rate_;
}
inline void packetl2c_bc_fishs_die::set_add_rate(::google::protobuf::int32 value) {
  set_has_add_rate();
  add_rate_ = value;
}

// optional int32 ticket = 8 [default = 0];
inline bool packetl2c_bc_fishs_die::has_ticket() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void packetl2c_bc_fishs_die::set_has_ticket() {
  _has_bits_[0] |= 0x00000080u;
}
inline void packetl2c_bc_fishs_die::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void packetl2c_bc_fishs_die::clear_ticket() {
  ticket_ = 0;
  clear_has_ticket();
}
inline ::google::protobuf::int32 packetl2c_bc_fishs_die::ticket() const {
  return ticket_;
}
inline void packetl2c_bc_fishs_die::set_ticket(::google::protobuf::int32 value) {
  set_has_ticket();
  ticket_ = value;
}

// optional bool getstar = 9 [default = false];
inline bool packetl2c_bc_fishs_die::has_getstar() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void packetl2c_bc_fishs_die::set_has_getstar() {
  _has_bits_[0] |= 0x00000100u;
}
inline void packetl2c_bc_fishs_die::clear_has_getstar() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void packetl2c_bc_fishs_die::clear_getstar() {
  getstar_ = false;
  clear_has_getstar();
}
inline bool packetl2c_bc_fishs_die::getstar() const {
  return getstar_;
}
inline void packetl2c_bc_fishs_die::set_getstar(bool value) {
  set_has_getstar();
  getstar_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_change_scene

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_scene];
inline bool packetl2c_bc_change_scene::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_change_scene::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_change_scene::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_change_scene::clear_packet_id() {
  packet_id_ = 15209;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_change_scene::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_change_scene::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 scene_id = 2;
inline bool packetl2c_bc_change_scene::has_scene_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_change_scene::set_has_scene_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_change_scene::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_change_scene::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 packetl2c_bc_change_scene::scene_id() const {
  return scene_id_;
}
inline void packetl2c_bc_change_scene::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional int32 large_fish_id = 3;
inline bool packetl2c_bc_change_scene::has_large_fish_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_change_scene::set_has_large_fish_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_change_scene::clear_has_large_fish_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_change_scene::clear_large_fish_id() {
  large_fish_id_ = 0;
  clear_has_large_fish_id();
}
inline ::google::protobuf::int32 packetl2c_bc_change_scene::large_fish_id() const {
  return large_fish_id_;
}
inline void packetl2c_bc_change_scene::set_large_fish_id(::google::protobuf::int32 value) {
  set_has_large_fish_id();
  large_fish_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_addbuff

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_addbuff];
inline bool packetl2c_bc_addbuff::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_addbuff::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_addbuff::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_addbuff::clear_packet_id() {
  packet_id_ = 15213;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_addbuff::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_addbuff::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 buff_id = 2;
inline bool packetl2c_bc_addbuff::has_buff_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_addbuff::set_has_buff_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_addbuff::clear_has_buff_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_addbuff::clear_buff_id() {
  buff_id_ = 0;
  clear_has_buff_id();
}
inline ::google::protobuf::int32 packetl2c_bc_addbuff::buff_id() const {
  return buff_id_;
}
inline void packetl2c_bc_addbuff::set_buff_id(::google::protobuf::int32 value) {
  set_has_buff_id();
  buff_id_ = value;
}

// optional int32 player_id = 3;
inline bool packetl2c_bc_addbuff::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_addbuff::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_addbuff::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_addbuff::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_addbuff::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_addbuff::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 buff_time = 4 [default = -1];
inline bool packetl2c_bc_addbuff::has_buff_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_bc_addbuff::set_has_buff_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_bc_addbuff::clear_has_buff_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_bc_addbuff::clear_buff_time() {
  buff_time_ = -1;
  clear_has_buff_time();
}
inline ::google::protobuf::int32 packetl2c_bc_addbuff::buff_time() const {
  return buff_time_;
}
inline void packetl2c_bc_addbuff::set_buff_time(::google::protobuf::int32 value) {
  set_has_buff_time();
  buff_time_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_removebuff

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_removebuff];
inline bool packetl2c_bc_removebuff::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_removebuff::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_removebuff::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_removebuff::clear_packet_id() {
  packet_id_ = 15214;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_removebuff::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_removebuff::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 buff_id = 2;
inline bool packetl2c_bc_removebuff::has_buff_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_removebuff::set_has_buff_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_removebuff::clear_has_buff_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_removebuff::clear_buff_id() {
  buff_id_ = 0;
  clear_has_buff_id();
}
inline ::google::protobuf::int32 packetl2c_bc_removebuff::buff_id() const {
  return buff_id_;
}
inline void packetl2c_bc_removebuff::set_buff_id(::google::protobuf::int32 value) {
  set_has_buff_id();
  buff_id_ = value;
}

// optional int32 player_id = 3;
inline bool packetl2c_bc_removebuff::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_removebuff::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_removebuff::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_removebuff::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_removebuff::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_removebuff::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_changeturret

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_changeturret];
inline bool packetl2c_bc_changeturret::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_changeturret::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_changeturret::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_changeturret::clear_packet_id() {
  packet_id_ = 15215;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_changeturret::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_changeturret::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 turret_id = 2;
inline bool packetl2c_bc_changeturret::has_turret_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_changeturret::set_has_turret_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_changeturret::clear_has_turret_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_changeturret::clear_turret_id() {
  turret_id_ = 0;
  clear_has_turret_id();
}
inline ::google::protobuf::int32 packetl2c_bc_changeturret::turret_id() const {
  return turret_id_;
}
inline void packetl2c_bc_changeturret::set_turret_id(::google::protobuf::int32 value) {
  set_has_turret_id();
  turret_id_ = value;
}

// optional int32 player_id = 3;
inline bool packetl2c_bc_changeturret::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_changeturret::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_changeturret::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_changeturret::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_changeturret::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_changeturret::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_lock_fish

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_lock_fish];
inline bool packetc2l_lock_fish::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_lock_fish::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_lock_fish::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_lock_fish::clear_packet_id() {
  packet_id_ = 10109;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetc2l_lock_fish::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_lock_fish::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 fish_id = 4;
inline bool packetc2l_lock_fish::has_fish_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_lock_fish::set_has_fish_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_lock_fish::clear_has_fish_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_lock_fish::clear_fish_id() {
  fish_id_ = 0;
  clear_has_fish_id();
}
inline ::google::protobuf::int32 packetc2l_lock_fish::fish_id() const {
  return fish_id_;
}
inline void packetc2l_lock_fish::set_fish_id(::google::protobuf::int32 value) {
  set_has_fish_id();
  fish_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_lock_fish

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_lock_fish];
inline bool packetl2c_bc_lock_fish::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_lock_fish::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_lock_fish::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_lock_fish::clear_packet_id() {
  packet_id_ = 15216;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_lock_fish::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_lock_fish::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_bc_lock_fish::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_lock_fish::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_lock_fish::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_lock_fish::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_lock_fish::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_lock_fish::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 fish_id = 3;
inline bool packetl2c_bc_lock_fish::has_fish_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_lock_fish::set_has_fish_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_lock_fish::clear_has_fish_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_lock_fish::clear_fish_id() {
  fish_id_ = 0;
  clear_has_fish_id();
}
inline ::google::protobuf::int32 packetl2c_bc_lock_fish::fish_id() const {
  return fish_id_;
}
inline void packetl2c_bc_lock_fish::set_fish_id(::google::protobuf::int32 value) {
  set_has_fish_id();
  fish_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_freeze

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_freeze];
inline bool packetl2c_bc_freeze::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_freeze::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_freeze::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_freeze::clear_packet_id() {
  packet_id_ = 15217;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_freeze::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_freeze::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 freeze_Time = 2;
inline bool packetl2c_bc_freeze::has_freeze_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_freeze::set_has_freeze_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_freeze::clear_has_freeze_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_freeze::clear_freeze_time() {
  freeze_time_ = 0;
  clear_has_freeze_time();
}
inline ::google::protobuf::int32 packetl2c_bc_freeze::freeze_time() const {
  return freeze_time_;
}
inline void packetl2c_bc_freeze::set_freeze_time(::google::protobuf::int32 value) {
  set_has_freeze_time();
  freeze_time_ = value;
}

// optional bool is_show = 3;
inline bool packetl2c_bc_freeze::has_is_show() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_freeze::set_has_is_show() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_freeze::clear_has_is_show() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_freeze::clear_is_show() {
  is_show_ = false;
  clear_has_is_show();
}
inline bool packetl2c_bc_freeze::is_show() const {
  return is_show_;
}
inline void packetl2c_bc_freeze::set_is_show(bool value) {
  set_has_is_show();
  is_show_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_change_scene_bg

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_scene_bg];
inline bool packetl2c_bc_change_scene_bg::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_change_scene_bg::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_change_scene_bg::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_change_scene_bg::clear_packet_id() {
  packet_id_ = 15220;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_change_scene_bg::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_change_scene_bg::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 scene_id = 2;
inline bool packetl2c_bc_change_scene_bg::has_scene_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_change_scene_bg::set_has_scene_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_change_scene_bg::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_change_scene_bg::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 packetl2c_bc_change_scene_bg::scene_id() const {
  return scene_id_;
}
inline void packetl2c_bc_change_scene_bg::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_scene_time

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_time];
inline bool packetl2c_bc_scene_time::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_scene_time::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_scene_time::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_scene_time::clear_packet_id() {
  packet_id_ = 15221;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_scene_time::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_scene_time::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 scene_time = 2;
inline bool packetl2c_bc_scene_time::has_scene_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_scene_time::set_has_scene_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_scene_time::clear_has_scene_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_scene_time::clear_scene_time() {
  scene_time_ = 0;
  clear_has_scene_time();
}
inline ::google::protobuf::int32 packetl2c_bc_scene_time::scene_time() const {
  return scene_time_;
}
inline void packetl2c_bc_scene_time::set_scene_time(::google::protobuf::int32 value) {
  set_has_scene_time();
  scene_time_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_hit_fishs

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_hit_fishs];
inline bool packetl2c_bc_hit_fishs::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_hit_fishs::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_hit_fishs::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_hit_fishs::clear_packet_id() {
  packet_id_ = 15223;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_hit_fishs::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_hit_fishs::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_bc_hit_fishs::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_hit_fishs::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_hit_fishs::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_hit_fishs::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_hit_fishs::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_hit_fishs::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 hit_type = 3;
inline bool packetl2c_bc_hit_fishs::has_hit_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_hit_fishs::set_has_hit_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_hit_fishs::clear_has_hit_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_hit_fishs::clear_hit_type() {
  hit_type_ = 0;
  clear_has_hit_type();
}
inline ::google::protobuf::int32 packetl2c_bc_hit_fishs::hit_type() const {
  return hit_type_;
}
inline void packetl2c_bc_hit_fishs::set_hit_type(::google::protobuf::int32 value) {
  set_has_hit_type();
  hit_type_ = value;
}

// repeated int32 fish_ids = 4;
inline int packetl2c_bc_hit_fishs::fish_ids_size() const {
  return fish_ids_.size();
}
inline void packetl2c_bc_hit_fishs::clear_fish_ids() {
  fish_ids_.Clear();
}
inline ::google::protobuf::int32 packetl2c_bc_hit_fishs::fish_ids(int index) const {
  return fish_ids_.Get(index);
}
inline void packetl2c_bc_hit_fishs::set_fish_ids(int index, ::google::protobuf::int32 value) {
  fish_ids_.Set(index, value);
}
inline void packetl2c_bc_hit_fishs::add_fish_ids(::google::protobuf::int32 value) {
  fish_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_bc_hit_fishs::fish_ids() const {
  return fish_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_bc_hit_fishs::mutable_fish_ids() {
  return &fish_ids_;
}

// repeated int32 params = 5;
inline int packetl2c_bc_hit_fishs::params_size() const {
  return params_.size();
}
inline void packetl2c_bc_hit_fishs::clear_params() {
  params_.Clear();
}
inline ::google::protobuf::int32 packetl2c_bc_hit_fishs::params(int index) const {
  return params_.Get(index);
}
inline void packetl2c_bc_hit_fishs::set_params(int index, ::google::protobuf::int32 value) {
  params_.Set(index, value);
}
inline void packetl2c_bc_hit_fishs::add_params(::google::protobuf::int32 value) {
  params_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_bc_hit_fishs::params() const {
  return params_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_bc_hit_fishs::mutable_params() {
  return &params_;
}

// -------------------------------------------------------------------

// packetl2c_bc_turret_rotate

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_turret_rotate];
inline bool packetl2c_bc_turret_rotate::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_turret_rotate::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_turret_rotate::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_turret_rotate::clear_packet_id() {
  packet_id_ = 15224;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_turret_rotate::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_turret_rotate::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_bc_turret_rotate::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_turret_rotate::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_turret_rotate::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_turret_rotate::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_turret_rotate::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_turret_rotate::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 rotate_angle = 3;
inline bool packetl2c_bc_turret_rotate::has_rotate_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_turret_rotate::set_has_rotate_angle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_turret_rotate::clear_has_rotate_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_turret_rotate::clear_rotate_angle() {
  rotate_angle_ = 0;
  clear_has_rotate_angle();
}
inline ::google::protobuf::int32 packetl2c_bc_turret_rotate::rotate_angle() const {
  return rotate_angle_;
}
inline void packetl2c_bc_turret_rotate::set_rotate_angle(::google::protobuf::int32 value) {
  set_has_rotate_angle();
  rotate_angle_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_change_max_power

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_max_power];
inline bool packetl2c_bc_change_max_power::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_change_max_power::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_change_max_power::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_change_max_power::clear_packet_id() {
  packet_id_ = 15225;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_change_max_power::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_change_max_power::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_bc_change_max_power::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_change_max_power::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_change_max_power::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_change_max_power::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_change_max_power::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_change_max_power::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 max_power = 3;
inline bool packetl2c_bc_change_max_power::has_max_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_change_max_power::set_has_max_power() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_change_max_power::clear_has_max_power() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_change_max_power::clear_max_power() {
  max_power_ = 0;
  clear_has_max_power();
}
inline ::google::protobuf::int32 packetl2c_bc_change_max_power::max_power() const {
  return max_power_;
}
inline void packetl2c_bc_change_max_power::set_max_power(::google::protobuf::int32 value) {
  set_has_max_power();
  max_power_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_debuginfo

// optional .fish_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
inline bool packetl2c_bc_debuginfo::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_debuginfo::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_debuginfo::clear_packet_id() {
  packet_id_ = 15227;
  clear_has_packet_id();
}
inline ::fish_protocols::e_server_msg_type packetl2c_bc_debuginfo::packet_id() const {
  return static_cast< ::fish_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_debuginfo::set_packet_id(::fish_protocols::e_server_msg_type value) {
  assert(::fish_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_bc_debuginfo::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_debuginfo::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_debuginfo::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_debuginfo::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_debuginfo::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int64 total_profit = 3 [default = 0];
inline bool packetl2c_bc_debuginfo::has_total_profit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_total_profit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_debuginfo::clear_has_total_profit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_debuginfo::clear_total_profit() {
  total_profit_ = GOOGLE_LONGLONG(0);
  clear_has_total_profit();
}
inline ::google::protobuf::int64 packetl2c_bc_debuginfo::total_profit() const {
  return total_profit_;
}
inline void packetl2c_bc_debuginfo::set_total_profit(::google::protobuf::int64 value) {
  set_has_total_profit();
  total_profit_ = value;
}

// optional int64 total_stock = 4 [default = 0];
inline bool packetl2c_bc_debuginfo::has_total_stock() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_total_stock() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_bc_debuginfo::clear_has_total_stock() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_bc_debuginfo::clear_total_stock() {
  total_stock_ = GOOGLE_LONGLONG(0);
  clear_has_total_stock();
}
inline ::google::protobuf::int64 packetl2c_bc_debuginfo::total_stock() const {
  return total_stock_;
}
inline void packetl2c_bc_debuginfo::set_total_stock(::google::protobuf::int64 value) {
  set_has_total_stock();
  total_stock_ = value;
}

// optional string debug_infos = 5;
inline bool packetl2c_bc_debuginfo::has_debug_infos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_debug_infos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_bc_debuginfo::clear_has_debug_infos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_bc_debuginfo::clear_debug_infos() {
  if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
    debug_infos_->clear();
  }
  clear_has_debug_infos();
}
inline const ::std::string& packetl2c_bc_debuginfo::debug_infos() const {
  return *debug_infos_;
}
inline void packetl2c_bc_debuginfo::set_debug_infos(const ::std::string& value) {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  debug_infos_->assign(value);
}
inline void packetl2c_bc_debuginfo::set_debug_infos(const char* value) {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  debug_infos_->assign(value);
}
inline void packetl2c_bc_debuginfo::set_debug_infos(const char* value, size_t size) {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  debug_infos_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetl2c_bc_debuginfo::mutable_debug_infos() {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  return debug_infos_;
}
inline ::std::string* packetl2c_bc_debuginfo::release_debug_infos() {
  clear_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = debug_infos_;
    debug_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetl2c_bc_debuginfo::set_allocated_debug_infos(::std::string* debug_infos) {
  if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_infos_;
  }
  if (debug_infos) {
    set_has_debug_infos();
    debug_infos_ = debug_infos;
  } else {
    clear_has_debug_infos();
    debug_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fish_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fish_5fmonkey_5flogic_2eproto__INCLUDED
