// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_land_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_land_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game_land_protocols {

namespace {

const ::google::protobuf::Descriptor* msg_player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_check_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_check_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_check_state_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_check_state_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_get_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_room_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_room_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_score_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_score_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_times_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_times_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_playing_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_playing_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_scene_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_scene_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_enter_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_enter_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_enter_room_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_enter_room_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_leave_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_leave_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_leave_room_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_leave_room_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_user_trustee_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_user_trustee_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_user_trustee_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_user_trustee_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_ready_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_ready_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_send_all_playerinfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_send_all_playerinfos_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_send_all_card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_send_all_card_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_land_score_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_land_score_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_land_score_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_land_score_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_game_start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_game_start_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_times_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_times_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_times_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_times_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_really_game_start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_really_game_start_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_out_card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_out_card_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_out_card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_out_card_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_pass_card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_pass_card_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_game_end_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_game_end_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_game_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_game_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_report_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_report_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_report_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_report_res_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto() {
  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_land_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  msg_player_info_descriptor_ = file->message_type(0);
  static const int msg_player_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, head_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, head_custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, vip_level_),
  };
  msg_player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_player_info_descriptor_,
      msg_player_info::default_instance_,
      msg_player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_player_info));
  packetc2l_check_state_descriptor_ = file->message_type(1);
  static const int packetc2l_check_state_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, packet_id_),
  };
  packetc2l_check_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_check_state_descriptor_,
      packetc2l_check_state::default_instance_,
      packetc2l_check_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_check_state));
  packetl2c_check_state_result_descriptor_ = file->message_type(2);
  static const int packetl2c_check_state_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, result_),
  };
  packetl2c_check_state_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_check_state_result_descriptor_,
      packetl2c_check_state_result::default_instance_,
      packetl2c_check_state_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_check_state_result));
  packetc2l_get_scene_info_descriptor_ = file->message_type(3);
  static const int packetc2l_get_scene_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_scene_info, packet_id_),
  };
  packetc2l_get_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_scene_info_descriptor_,
      packetc2l_get_scene_info::default_instance_,
      packetc2l_get_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_scene_info));
  msg_room_scene_info_descriptor_ = file->message_type(4);
  static const int msg_room_scene_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_scene_info, ready_),
  };
  msg_room_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_room_scene_info_descriptor_,
      msg_room_scene_info::default_instance_,
      msg_room_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_room_scene_info));
  msg_score_scene_info_descriptor_ = file->message_type(5);
  static const int msg_score_scene_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_score_scene_info, current_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_score_scene_info, remain_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_score_scene_info, score_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_score_scene_info, user_trustee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_score_scene_info, cards_info_),
  };
  msg_score_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_score_scene_info_descriptor_,
      msg_score_scene_info::default_instance_,
      msg_score_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_score_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_score_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_score_scene_info));
  msg_times_scene_info_descriptor_ = file->message_type(6);
  static const int msg_times_scene_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_times_scene_info, remain_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_times_scene_info, user_trustee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_times_scene_info, cards_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_times_scene_info, land_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_times_scene_info, land_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_times_scene_info, back_card_),
  };
  msg_times_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_times_scene_info_descriptor_,
      msg_times_scene_info::default_instance_,
      msg_times_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_times_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_times_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_times_scene_info));
  msg_playing_scene_info_descriptor_ = file->message_type(7);
  static const int msg_playing_scene_info_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, land_chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, land_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, current_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, remain_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, user_trustee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, remain_card_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, back_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, cards_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, turn_cards1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, turn_cards2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, turn_cards3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, new_turn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, bomb_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, out_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, score_times_),
  };
  msg_playing_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_playing_scene_info_descriptor_,
      msg_playing_scene_info::default_instance_,
      msg_playing_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_playing_scene_info));
  packetl2c_scene_info_result_descriptor_ = file->message_type(8);
  static const int packetl2c_scene_info_result_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, scene_info1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, scene_info2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, scene_info3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, info_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, scene_info4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, land_chair_id4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, land_score4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, score_times4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, scene_info5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, play_cnt_),
  };
  packetl2c_scene_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_scene_info_result_descriptor_,
      packetl2c_scene_info_result::default_instance_,
      packetl2c_scene_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_scene_info_result));
  packetc2l_enter_room_descriptor_ = file->message_type(9);
  static const int packetc2l_enter_room_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, room_type_),
  };
  packetc2l_enter_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_enter_room_descriptor_,
      packetc2l_enter_room::default_instance_,
      packetc2l_enter_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_enter_room));
  packetl2c_enter_room_result_descriptor_ = file->message_type(10);
  static const int packetl2c_enter_room_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, result_),
  };
  packetl2c_enter_room_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_enter_room_result_descriptor_,
      packetl2c_enter_room_result::default_instance_,
      packetl2c_enter_room_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_enter_room_result));
  packetc2l_leave_room_descriptor_ = file->message_type(11);
  static const int packetc2l_leave_room_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_room, packet_id_),
  };
  packetc2l_leave_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_leave_room_descriptor_,
      packetc2l_leave_room::default_instance_,
      packetc2l_leave_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_leave_room));
  packetl2c_leave_room_result_descriptor_ = file->message_type(12);
  static const int packetl2c_leave_room_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, player_gold_),
  };
  packetl2c_leave_room_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_leave_room_result_descriptor_,
      packetl2c_leave_room_result::default_instance_,
      packetl2c_leave_room_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_leave_room_result));
  packetc2l_user_trustee_descriptor_ = file->message_type(13);
  static const int packetc2l_user_trustee_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_user_trustee, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_user_trustee, trustee_),
  };
  packetc2l_user_trustee_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_user_trustee_descriptor_,
      packetc2l_user_trustee::default_instance_,
      packetc2l_user_trustee_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_user_trustee, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_user_trustee, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_user_trustee));
  packetl2c_user_trustee_notify_descriptor_ = file->message_type(14);
  static const int packetl2c_user_trustee_notify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_user_trustee_notify, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_user_trustee_notify, chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_user_trustee_notify, trustee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_user_trustee_notify, remain_seconds_),
  };
  packetl2c_user_trustee_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_user_trustee_notify_descriptor_,
      packetl2c_user_trustee_notify::default_instance_,
      packetl2c_user_trustee_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_user_trustee_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_user_trustee_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_user_trustee_notify));
  packetc2l_ready_descriptor_ = file->message_type(15);
  static const int packetc2l_ready_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ready, packet_id_),
  };
  packetc2l_ready_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_ready_descriptor_,
      packetc2l_ready::default_instance_,
      packetc2l_ready_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ready, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ready, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_ready));
  packetl2c_send_all_playerinfos_descriptor_ = file->message_type(16);
  static const int packetl2c_send_all_playerinfos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_playerinfos, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_playerinfos, player_info_),
  };
  packetl2c_send_all_playerinfos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_send_all_playerinfos_descriptor_,
      packetl2c_send_all_playerinfos::default_instance_,
      packetl2c_send_all_playerinfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_playerinfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_playerinfos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_send_all_playerinfos));
  packetl2c_send_all_card_descriptor_ = file->message_type(17);
  static const int packetl2c_send_all_card_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_card, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_card, current_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_card, user_trustee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_card, cards_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_card, cards_info2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_card, cards_info3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_card, back_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_card, botbanker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_card, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_card, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_card, bot_landlords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_card, play_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_card, four_take_),
  };
  packetl2c_send_all_card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_send_all_card_descriptor_,
      packetl2c_send_all_card::default_instance_,
      packetl2c_send_all_card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_send_all_card));
  packetc2l_land_score_descriptor_ = file->message_type(18);
  static const int packetc2l_land_score_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_land_score, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_land_score, score_),
  };
  packetc2l_land_score_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_land_score_descriptor_,
      packetc2l_land_score::default_instance_,
      packetc2l_land_score_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_land_score, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_land_score, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_land_score));
  packetl2c_land_score_descriptor_ = file->message_type(19);
  static const int packetl2c_land_score_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_land_score, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_land_score, land_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_land_score, current_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_land_score, land_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_land_score, current_score_),
  };
  packetl2c_land_score_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_land_score_descriptor_,
      packetl2c_land_score::default_instance_,
      packetl2c_land_score_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_land_score, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_land_score, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_land_score));
  packetl2c_game_start_descriptor_ = file->message_type(20);
  static const int packetl2c_game_start_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start, land_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start, land_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start, back_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start, score_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start, remain_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start, need_times_),
  };
  packetl2c_game_start_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_game_start_descriptor_,
      packetl2c_game_start::default_instance_,
      packetl2c_game_start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_game_start));
  packetc2l_times_descriptor_ = file->message_type(21);
  static const int packetc2l_times_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_times, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_times, times_),
  };
  packetc2l_times_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_times_descriptor_,
      packetc2l_times::default_instance_,
      packetc2l_times_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_times, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_times, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_times));
  packetl2c_times_notify_descriptor_ = file->message_type(22);
  static const int packetl2c_times_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_times_notify, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_times_notify, chair_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_times_notify, times_),
  };
  packetl2c_times_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_times_notify_descriptor_,
      packetl2c_times_notify::default_instance_,
      packetl2c_times_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_times_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_times_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_times_notify));
  packetl2c_really_game_start_descriptor_ = file->message_type(23);
  static const int packetl2c_really_game_start_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_really_game_start, packet_id_),
  };
  packetl2c_really_game_start_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_really_game_start_descriptor_,
      packetl2c_really_game_start::default_instance_,
      packetl2c_really_game_start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_really_game_start, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_really_game_start, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_really_game_start));
  packetc2l_out_card_descriptor_ = file->message_type(24);
  static const int packetc2l_out_card_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_out_card, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_out_card, cards_),
  };
  packetc2l_out_card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_out_card_descriptor_,
      packetc2l_out_card::default_instance_,
      packetc2l_out_card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_out_card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_out_card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_out_card));
  packetl2c_out_card_descriptor_ = file->message_type(25);
  static const int packetl2c_out_card_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_out_card, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_out_card, out_card_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_out_card, current_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_out_card, bomb_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_out_card, cards_),
  };
  packetl2c_out_card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_out_card_descriptor_,
      packetl2c_out_card::default_instance_,
      packetl2c_out_card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_out_card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_out_card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_out_card));
  packetl2c_pass_card_descriptor_ = file->message_type(26);
  static const int packetl2c_pass_card_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_pass_card, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_pass_card, pass_card_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_pass_card, current_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_pass_card, new_turn_),
  };
  packetl2c_pass_card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_pass_card_descriptor_,
      packetl2c_pass_card::default_instance_,
      packetl2c_pass_card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_pass_card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_pass_card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_pass_card));
  packetl2c_game_end_descriptor_ = file->message_type(27);
  static const int packetl2c_game_end_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, bomb_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, game_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, leave_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, spring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, cards1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, cards2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, cards3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, limited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, task_ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, low_limited_),
  };
  packetl2c_game_end_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_game_end_descriptor_,
      packetl2c_game_end::default_instance_,
      packetl2c_game_end_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_game_end));
  packetl2c_game_notify_descriptor_ = file->message_type(28);
  static const int packetl2c_game_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_notify, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_notify, notify_type_),
  };
  packetl2c_game_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_game_notify_descriptor_,
      packetl2c_game_notify::default_instance_,
      packetl2c_game_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_game_notify));
  packetc2l_report_descriptor_ = file->message_type(29);
  static const int packetc2l_report_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_report, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_report, chair_idx_),
  };
  packetc2l_report_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_report_descriptor_,
      packetc2l_report::default_instance_,
      packetc2l_report_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_report, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_report, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_report));
  packetl2c_report_res_descriptor_ = file->message_type(30);
  static const int packetl2c_report_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_report_res, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_report_res, chair_idx_),
  };
  packetl2c_report_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_report_res_descriptor_,
      packetl2c_report_res::default_instance_,
      packetl2c_report_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_report_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_report_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_report_res));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fland_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_player_info_descriptor_, &msg_player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_check_state_descriptor_, &packetc2l_check_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_check_state_result_descriptor_, &packetl2c_check_state_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_scene_info_descriptor_, &packetc2l_get_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_room_scene_info_descriptor_, &msg_room_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_score_scene_info_descriptor_, &msg_score_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_times_scene_info_descriptor_, &msg_times_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_playing_scene_info_descriptor_, &msg_playing_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_scene_info_result_descriptor_, &packetl2c_scene_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_enter_room_descriptor_, &packetc2l_enter_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_enter_room_result_descriptor_, &packetl2c_enter_room_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_leave_room_descriptor_, &packetc2l_leave_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_leave_room_result_descriptor_, &packetl2c_leave_room_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_user_trustee_descriptor_, &packetc2l_user_trustee::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_user_trustee_notify_descriptor_, &packetl2c_user_trustee_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_ready_descriptor_, &packetc2l_ready::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_send_all_playerinfos_descriptor_, &packetl2c_send_all_playerinfos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_send_all_card_descriptor_, &packetl2c_send_all_card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_land_score_descriptor_, &packetc2l_land_score::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_land_score_descriptor_, &packetl2c_land_score::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_game_start_descriptor_, &packetl2c_game_start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_times_descriptor_, &packetc2l_times::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_times_notify_descriptor_, &packetl2c_times_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_really_game_start_descriptor_, &packetl2c_really_game_start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_out_card_descriptor_, &packetc2l_out_card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_out_card_descriptor_, &packetl2c_out_card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_pass_card_descriptor_, &packetl2c_pass_card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_game_end_descriptor_, &packetl2c_game_end::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_game_notify_descriptor_, &packetl2c_game_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_report_descriptor_, &packetc2l_report::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_report_res_descriptor_, &packetl2c_report_res::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto() {
  delete msg_player_info::default_instance_;
  delete msg_player_info_reflection_;
  delete packetc2l_check_state::default_instance_;
  delete packetc2l_check_state_reflection_;
  delete packetl2c_check_state_result::default_instance_;
  delete packetl2c_check_state_result_reflection_;
  delete packetc2l_get_scene_info::default_instance_;
  delete packetc2l_get_scene_info_reflection_;
  delete msg_room_scene_info::default_instance_;
  delete msg_room_scene_info_reflection_;
  delete msg_score_scene_info::default_instance_;
  delete msg_score_scene_info_reflection_;
  delete msg_times_scene_info::default_instance_;
  delete msg_times_scene_info_reflection_;
  delete msg_playing_scene_info::default_instance_;
  delete msg_playing_scene_info_reflection_;
  delete packetl2c_scene_info_result::default_instance_;
  delete packetl2c_scene_info_result_reflection_;
  delete packetc2l_enter_room::default_instance_;
  delete packetc2l_enter_room_reflection_;
  delete packetl2c_enter_room_result::default_instance_;
  delete packetl2c_enter_room_result_reflection_;
  delete packetc2l_leave_room::default_instance_;
  delete packetc2l_leave_room_reflection_;
  delete packetl2c_leave_room_result::default_instance_;
  delete packetl2c_leave_room_result_reflection_;
  delete packetc2l_user_trustee::default_instance_;
  delete packetc2l_user_trustee_reflection_;
  delete packetl2c_user_trustee_notify::default_instance_;
  delete packetl2c_user_trustee_notify_reflection_;
  delete packetc2l_ready::default_instance_;
  delete packetc2l_ready_reflection_;
  delete packetl2c_send_all_playerinfos::default_instance_;
  delete packetl2c_send_all_playerinfos_reflection_;
  delete packetl2c_send_all_card::default_instance_;
  delete packetl2c_send_all_card_reflection_;
  delete packetc2l_land_score::default_instance_;
  delete packetc2l_land_score_reflection_;
  delete packetl2c_land_score::default_instance_;
  delete packetl2c_land_score_reflection_;
  delete packetl2c_game_start::default_instance_;
  delete packetl2c_game_start_reflection_;
  delete packetc2l_times::default_instance_;
  delete packetc2l_times_reflection_;
  delete packetl2c_times_notify::default_instance_;
  delete packetl2c_times_notify_reflection_;
  delete packetl2c_really_game_start::default_instance_;
  delete packetl2c_really_game_start_reflection_;
  delete packetc2l_out_card::default_instance_;
  delete packetc2l_out_card_reflection_;
  delete packetl2c_out_card::default_instance_;
  delete packetl2c_out_card_reflection_;
  delete packetl2c_pass_card::default_instance_;
  delete packetl2c_pass_card_reflection_;
  delete packetl2c_game_end::default_instance_;
  delete packetl2c_game_end_reflection_;
  delete packetl2c_game_notify::default_instance_;
  delete packetl2c_game_notify_reflection_;
  delete packetc2l_report::default_instance_;
  delete packetc2l_report_reflection_;
  delete packetl2c_report_res::default_instance_;
  delete packetl2c_report_res_reflection_;
}

void protobuf_AddDesc_game_5fland_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::game_land_protocols::protobuf_AddDesc_game_5fland_5fdef_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030game_land_protocol.proto\022\023game_land_pr"
    "otocols\032\023game_land_def.proto\032\022msg_type_d"
    "ef.proto\"\236\001\n\017msg_player_info\022\021\n\tplayer_i"
    "d\030\001 \001(\005\022\023\n\013player_name\030\002 \001(\t\022\022\n\nhead_fra"
    "me\030\003 \001(\005\022\023\n\013head_custom\030\004 \001(\t\022\023\n\013player_"
    "gold\030\005 \001(\003\022\022\n\nplayer_sex\030\006 \001(\005\022\021\n\tvip_le"
    "vel\030\007 \001(\005\"i\n\025packetc2l_check_state\022P\n\tpa"
    "cket_id\030\001 \001(\0162&.game_land_protocols.e_se"
    "rver_msg_type:\025e_mst_c2l_check_state\"\212\001\n"
    "\034packetl2c_check_state_result\022W\n\tpacket_"
    "id\030\001 \001(\0162&.game_land_protocols.e_server_"
    "msg_type:\034e_mst_l2c_check_state_result\022\021"
    "\n\006result\030\002 \001(\005:\0010\"o\n\030packetc2l_get_scene"
    "_info\022S\n\tpacket_id\030\001 \001(\0162&.game_land_pro"
    "tocols.e_server_msg_type:\030e_mst_c2l_get_"
    "scene_info\"$\n\023msg_room_scene_info\022\r\n\005rea"
    "dy\030\001 \001(\010\"\202\001\n\024msg_score_scene_info\022\024\n\014cur"
    "rent_user\030\001 \001(\005\022\026\n\016remain_seconds\030\002 \001(\005\022"
    "\022\n\nscore_info\030\003 \003(\005\022\024\n\014user_trustee\030\004 \003("
    "\010\022\022\n\ncards_info\030\005 \003(\005\"\222\001\n\024msg_times_scen"
    "e_info\022\026\n\016remain_seconds\030\001 \001(\005\022\024\n\014user_t"
    "rustee\030\002 \003(\010\022\022\n\ncards_info\030\003 \003(\005\022\021\n\tland"
    "_user\030\004 \001(\005\022\022\n\nland_score\030\005 \001(\005\022\021\n\tback_"
    "card\030\006 \003(\005\"\323\002\n\026msg_playing_scene_info\022\025\n"
    "\rland_chair_id\030\001 \001(\005\022\022\n\nland_score\030\002 \001(\005"
    "\022\024\n\014current_user\030\003 \001(\005\022\026\n\016remain_seconds"
    "\030\004 \001(\005\022\024\n\014user_trustee\030\005 \003(\010\022\027\n\017remain_c"
    "ard_cnt\030\006 \003(\005\022\021\n\tback_card\030\007 \003(\005\022\022\n\ncard"
    "s_info\030\010 \003(\005\022\023\n\013turn_cards1\030\t \003(\005\022\023\n\013tur"
    "n_cards2\030\n \003(\005\022\023\n\013turn_cards3\030\013 \003(\005\022\020\n\010n"
    "ew_turn\030\014 \001(\010\022\021\n\tbomb_time\030\r \001(\005\022\021\n\tout_"
    "cards\030\016 \003(\005\022\023\n\013score_times\030\017 \001(\005\"\323\004\n\033pac"
    "ketl2c_scene_info_result\022V\n\tpacket_id\030\001 "
    "\001(\0162&.game_land_protocols.e_server_msg_t"
    "ype:\033e_mst_l2c_scene_info_result\022\021\n\troom"
    "_type\030\002 \001(\005\022=\n\013scene_info1\030\003 \001(\0132(.game_"
    "land_protocols.msg_room_scene_info\022>\n\013sc"
    "ene_info2\030\004 \001(\0132).game_land_protocols.ms"
    "g_score_scene_info\022@\n\013scene_info3\030\005 \001(\0132"
    "+.game_land_protocols.msg_playing_scene_"
    "info\022\021\n\tinfo_type\030\006 \001(\005\022<\n\013scene_info4\030\007"
    " \001(\0132\'.game_land_protocols.packetl2c_gam"
    "e_end\022\026\n\016land_chair_id4\030\010 \001(\005\022\023\n\013land_sc"
    "ore4\030\t \001(\005\022\024\n\014score_times4\030\n \001(\005\022\023\n\007task"
    "_id\030\013 \001(\005:\002-1\022\r\n\005times\030\014 \003(\005\022>\n\013scene_in"
    "fo5\030\r \001(\0132).game_land_protocols.msg_time"
    "s_scene_info\022\020\n\010play_cnt\030\016 \001(\005\"z\n\024packet"
    "c2l_enter_room\022O\n\tpacket_id\030\001 \001(\0162&.game"
    "_land_protocols.e_server_msg_type:\024e_mst"
    "_c2l_enter_room\022\021\n\troom_type\030\002 \001(\005\"\261\001\n\033p"
    "acketl2c_enter_room_result\022V\n\tpacket_id\030"
    "\001 \001(\0162&.game_land_protocols.e_server_msg"
    "_type:\033e_mst_l2c_enter_room_result\022:\n\006re"
    "sult\030\002 \001(\0162\036.msg_type_def.e_msg_result_d"
    "ef:\ne_rmt_fail\"g\n\024packetc2l_leave_room\022O"
    "\n\tpacket_id\030\001 \001(\0162&.game_land_protocols."
    "e_server_msg_type:\024e_mst_c2l_leave_room\""
    "\212\001\n\033packetl2c_leave_room_result\022V\n\tpacke"
    "t_id\030\001 \001(\0162&.game_land_protocols.e_serve"
    "r_msg_type:\033e_mst_l2c_leave_room_result\022"
    "\023\n\013player_gold\030\002 \001(\003\"|\n\026packetc2l_user_t"
    "rustee\022Q\n\tpacket_id\030\001 \001(\0162&.game_land_pr"
    "otocols.e_server_msg_type:\026e_mst_c2l_use"
    "r_trustee\022\017\n\007trustee\030\002 \001(\010\"\255\001\n\035packetl2c"
    "_user_trustee_notify\022Q\n\tpacket_id\030\001 \001(\0162"
    "&.game_land_protocols.e_server_msg_type:"
    "\026e_mst_l2c_user_trustee\022\020\n\010chair_id\030\002 \001("
    "\005\022\017\n\007trustee\030\003 \001(\010\022\026\n\016remain_seconds\030\004 \001"
    "(\005\"]\n\017packetc2l_ready\022J\n\tpacket_id\030\001 \001(\016"
    "2&.game_land_protocols.e_server_msg_type"
    ":\017e_mst_c2l_ready\"\266\001\n\036packetl2c_send_all"
    "_playerinfos\022Y\n\tpacket_id\030\001 \001(\0162&.game_l"
    "and_protocols.e_server_msg_type:\036e_mst_l"
    "2c_send_all_playerinfos\0229\n\013player_info\030\002"
    " \003(\0132$.game_land_protocols.msg_player_in"
    "fo\"\333\002\n\027packetl2c_send_all_card\022R\n\tpacket"
    "_id\030\001 \001(\0162&.game_land_protocols.e_server"
    "_msg_type:\027e_mst_l2c_send_all_card\022\024\n\014cu"
    "rrent_user\030\002 \001(\005\022\024\n\014user_trustee\030\003 \003(\010\022\022"
    "\n\ncards_info\030\004 \003(\005\022\023\n\013cards_info2\030\005 \003(\005\022"
    "\023\n\013cards_info3\030\006 \003(\005\022\021\n\tback_card\030\007 \003(\005\022"
    "\021\n\tBotBanker\030\010 \001(\010\022\017\n\007room_id\030\t \001(\005\022\017\n\007t"
    "ask_id\030\n \001(\005\022\025\n\rbot_landlords\030\013 \003(\005\022\020\n\010p"
    "lay_cnt\030\014 \001(\005\022\021\n\tfour_take\030\r \001(\005\"v\n\024pack"
    "etc2l_land_score\022O\n\tpacket_id\030\001 \001(\0162&.ga"
    "me_land_protocols.e_server_msg_type:\024e_m"
    "st_c2l_land_score\022\r\n\005score\030\002 \001(\010\"\273\001\n\024pac"
    "ketl2c_land_score\022O\n\tpacket_id\030\001 \001(\0162&.g"
    "ame_land_protocols.e_server_msg_type:\024e_"
    "mst_l2c_land_score\022\021\n\tland_user\030\002 \001(\005\022\024\n"
    "\014current_user\030\003 \001(\005\022\022\n\nland_score\030\004 \001(\005\022"
    "\025\n\rcurrent_score\030\005 \001(\005\"\342\001\n\024packetl2c_gam"
    "e_start\022O\n\tpacket_id\030\001 \001(\0162&.game_land_p"
    "rotocols.e_server_msg_type:\024e_mst_l2c_ga"
    "me_start\022\021\n\tland_user\030\002 \001(\005\022\022\n\nland_scor"
    "e\030\003 \001(\005\022\021\n\tback_card\030\004 \003(\005\022\023\n\013score_time"
    "s\030\005 \001(\005\022\026\n\016remain_seconds\030\006 \001(\005\022\022\n\nneed_"
    "times\030\007 \001(\010\"l\n\017packetc2l_times\022J\n\tpacket"
    "_id\030\001 \001(\0162&.game_land_protocols.e_server"
    "_msg_type:\017e_mst_c2l_times\022\r\n\005times\030\002 \001("
    "\005\"\215\001\n\026packetl2c_times_notify\022Q\n\tpacket_i"
    "d\030\001 \001(\0162&.game_land_protocols.e_server_m"
    "sg_type:\026e_mst_l2c_times_notify\022\021\n\tchair"
    "_idx\030\002 \001(\005\022\r\n\005times\030\003 \001(\005\"u\n\033packetl2c_r"
    "eally_game_start\022V\n\tpacket_id\030\001 \001(\0162&.ga"
    "me_land_protocols.e_server_msg_type:\033e_m"
    "st_l2c_really_game_start\"r\n\022packetc2l_ou"
    "t_card\022M\n\tpacket_id\030\001 \001(\0162&.game_land_pr"
    "otocols.e_server_msg_type:\022e_mst_c2l_out"
    "_card\022\r\n\005cards\030\002 \003(\005\"\262\001\n\022packetl2c_out_c"
    "ard\022M\n\tpacket_id\030\001 \001(\0162&.game_land_proto"
    "cols.e_server_msg_type:\022e_mst_l2c_out_ca"
    "rd\022\025\n\rout_card_user\030\002 \001(\005\022\024\n\014current_use"
    "r\030\003 \001(\005\022\021\n\tbomb_time\030\004 \001(\005\022\r\n\005cards\030\005 \003("
    "\005\"\245\001\n\023packetl2c_pass_card\022N\n\tpacket_id\030\001"
    " \001(\0162&.game_land_protocols.e_server_msg_"
    "type:\023e_mst_l2c_pass_card\022\026\n\016pass_card_u"
    "ser\030\002 \001(\005\022\024\n\014current_user\030\003 \001(\005\022\020\n\010new_t"
    "urn\030\004 \001(\010\"\225\002\n\022packetl2c_game_end\022M\n\tpack"
    "et_id\030\001 \001(\0162&.game_land_protocols.e_serv"
    "er_msg_type:\022e_mst_l2c_game_end\022\021\n\tbomb_"
    "time\030\002 \003(\005\022\022\n\ngame_score\030\003 \003(\005\022\022\n\nleave_"
    "game\030\004 \003(\010\022\016\n\006spring\030\005 \001(\010\022\016\n\006cards1\030\006 \003"
    "(\005\022\016\n\006cards2\030\007 \003(\005\022\016\n\006cards3\030\010 \003(\005\022\017\n\007li"
    "mited\030\t \003(\010\022\017\n\007task_ok\030\n \001(\005\022\023\n\013low_limi"
    "ted\030\013 \003(\010\"\242\001\n\025packetl2c_game_notify\022P\n\tp"
    "acket_id\030\001 \001(\0162&.game_land_protocols.e_s"
    "erver_msg_type:\025e_mst_l2c_game_notify\0227\n"
    "\013notify_type\030\002 \001(\0162\".game_land_protocols"
    ".e_notify_type\"r\n\020packetc2l_report\022K\n\tpa"
    "cket_id\030\001 \001(\0162&.game_land_protocols.e_se"
    "rver_msg_type:\020e_mst_c2l_report\022\021\n\tchair"
    "_idx\030\002 \001(\005\"z\n\024packetl2c_report_res\022O\n\tpa"
    "cket_id\030\001 \001(\0162&.game_land_protocols.e_se"
    "rver_msg_type:\024e_mst_l2c_report_res\022\021\n\tc"
    "hair_idx\030\002 \001(\005", 5414);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_land_protocol.proto", &protobuf_RegisterTypes);
  msg_player_info::default_instance_ = new msg_player_info();
  packetc2l_check_state::default_instance_ = new packetc2l_check_state();
  packetl2c_check_state_result::default_instance_ = new packetl2c_check_state_result();
  packetc2l_get_scene_info::default_instance_ = new packetc2l_get_scene_info();
  msg_room_scene_info::default_instance_ = new msg_room_scene_info();
  msg_score_scene_info::default_instance_ = new msg_score_scene_info();
  msg_times_scene_info::default_instance_ = new msg_times_scene_info();
  msg_playing_scene_info::default_instance_ = new msg_playing_scene_info();
  packetl2c_scene_info_result::default_instance_ = new packetl2c_scene_info_result();
  packetc2l_enter_room::default_instance_ = new packetc2l_enter_room();
  packetl2c_enter_room_result::default_instance_ = new packetl2c_enter_room_result();
  packetc2l_leave_room::default_instance_ = new packetc2l_leave_room();
  packetl2c_leave_room_result::default_instance_ = new packetl2c_leave_room_result();
  packetc2l_user_trustee::default_instance_ = new packetc2l_user_trustee();
  packetl2c_user_trustee_notify::default_instance_ = new packetl2c_user_trustee_notify();
  packetc2l_ready::default_instance_ = new packetc2l_ready();
  packetl2c_send_all_playerinfos::default_instance_ = new packetl2c_send_all_playerinfos();
  packetl2c_send_all_card::default_instance_ = new packetl2c_send_all_card();
  packetc2l_land_score::default_instance_ = new packetc2l_land_score();
  packetl2c_land_score::default_instance_ = new packetl2c_land_score();
  packetl2c_game_start::default_instance_ = new packetl2c_game_start();
  packetc2l_times::default_instance_ = new packetc2l_times();
  packetl2c_times_notify::default_instance_ = new packetl2c_times_notify();
  packetl2c_really_game_start::default_instance_ = new packetl2c_really_game_start();
  packetc2l_out_card::default_instance_ = new packetc2l_out_card();
  packetl2c_out_card::default_instance_ = new packetl2c_out_card();
  packetl2c_pass_card::default_instance_ = new packetl2c_pass_card();
  packetl2c_game_end::default_instance_ = new packetl2c_game_end();
  packetl2c_game_notify::default_instance_ = new packetl2c_game_notify();
  packetc2l_report::default_instance_ = new packetc2l_report();
  packetl2c_report_res::default_instance_ = new packetl2c_report_res();
  msg_player_info::default_instance_->InitAsDefaultInstance();
  packetc2l_check_state::default_instance_->InitAsDefaultInstance();
  packetl2c_check_state_result::default_instance_->InitAsDefaultInstance();
  packetc2l_get_scene_info::default_instance_->InitAsDefaultInstance();
  msg_room_scene_info::default_instance_->InitAsDefaultInstance();
  msg_score_scene_info::default_instance_->InitAsDefaultInstance();
  msg_times_scene_info::default_instance_->InitAsDefaultInstance();
  msg_playing_scene_info::default_instance_->InitAsDefaultInstance();
  packetl2c_scene_info_result::default_instance_->InitAsDefaultInstance();
  packetc2l_enter_room::default_instance_->InitAsDefaultInstance();
  packetl2c_enter_room_result::default_instance_->InitAsDefaultInstance();
  packetc2l_leave_room::default_instance_->InitAsDefaultInstance();
  packetl2c_leave_room_result::default_instance_->InitAsDefaultInstance();
  packetc2l_user_trustee::default_instance_->InitAsDefaultInstance();
  packetl2c_user_trustee_notify::default_instance_->InitAsDefaultInstance();
  packetc2l_ready::default_instance_->InitAsDefaultInstance();
  packetl2c_send_all_playerinfos::default_instance_->InitAsDefaultInstance();
  packetl2c_send_all_card::default_instance_->InitAsDefaultInstance();
  packetc2l_land_score::default_instance_->InitAsDefaultInstance();
  packetl2c_land_score::default_instance_->InitAsDefaultInstance();
  packetl2c_game_start::default_instance_->InitAsDefaultInstance();
  packetc2l_times::default_instance_->InitAsDefaultInstance();
  packetl2c_times_notify::default_instance_->InitAsDefaultInstance();
  packetl2c_really_game_start::default_instance_->InitAsDefaultInstance();
  packetc2l_out_card::default_instance_->InitAsDefaultInstance();
  packetl2c_out_card::default_instance_->InitAsDefaultInstance();
  packetl2c_pass_card::default_instance_->InitAsDefaultInstance();
  packetl2c_game_end::default_instance_->InitAsDefaultInstance();
  packetl2c_game_notify::default_instance_->InitAsDefaultInstance();
  packetc2l_report::default_instance_->InitAsDefaultInstance();
  packetl2c_report_res::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fland_5fprotocol_2eproto {
  StaticDescriptorInitializer_game_5fland_5fprotocol_2eproto() {
    protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  }
} static_descriptor_initializer_game_5fland_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_player_info::kPlayerIdFieldNumber;
const int msg_player_info::kPlayerNameFieldNumber;
const int msg_player_info::kHeadFrameFieldNumber;
const int msg_player_info::kHeadCustomFieldNumber;
const int msg_player_info::kPlayerGoldFieldNumber;
const int msg_player_info::kPlayerSexFieldNumber;
const int msg_player_info::kVipLevelFieldNumber;
#endif  // !_MSC_VER

msg_player_info::msg_player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_player_info::InitAsDefaultInstance() {
}

msg_player_info::msg_player_info(const msg_player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_player_info::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_frame_ = 0;
  head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_gold_ = GOOGLE_LONGLONG(0);
  player_sex_ = 0;
  vip_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_player_info::~msg_player_info() {
  SharedDtor();
}

void msg_player_info::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete head_custom_;
  }
  if (this != default_instance_) {
  }
}

void msg_player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_player_info_descriptor_;
}

const msg_player_info& msg_player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

msg_player_info* msg_player_info::default_instance_ = NULL;

msg_player_info* msg_player_info::New() const {
  return new msg_player_info;
}

void msg_player_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    head_frame_ = 0;
    if (has_head_custom()) {
      if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
        head_custom_->clear();
      }
    }
    player_gold_ = GOOGLE_LONGLONG(0);
    player_sex_ = 0;
    vip_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_frame;
        break;
      }

      // optional int32 head_frame = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_frame_)));
          set_has_head_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_head_custom;
        break;
      }

      // optional string head_custom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head_custom().data(), this->head_custom().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_player_sex;
        break;
      }

      // optional int32 player_sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_sex_)));
          set_has_player_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vip_level;
        break;
      }

      // optional int32 vip_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  // optional int32 head_frame = 3;
  if (has_head_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->head_frame(), output);
  }

  // optional string head_custom = 4;
  if (has_head_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head_custom().data(), this->head_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->head_custom(), output);
  }

  // optional int64 player_gold = 5;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->player_gold(), output);
  }

  // optional int32 player_sex = 6;
  if (has_player_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->player_sex(), output);
  }

  // optional int32 vip_level = 7;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vip_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional int32 head_frame = 3;
  if (has_head_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->head_frame(), target);
  }

  // optional string head_custom = 4;
  if (has_head_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head_custom().data(), this->head_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->head_custom(), target);
  }

  // optional int64 player_gold = 5;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->player_gold(), target);
  }

  // optional int32 player_sex = 6;
  if (has_player_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->player_sex(), target);
  }

  // optional int32 vip_level = 7;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vip_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional int32 head_frame = 3;
    if (has_head_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head_frame());
    }

    // optional string head_custom = 4;
    if (has_head_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head_custom());
    }

    // optional int64 player_gold = 5;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

    // optional int32 player_sex = 6;
    if (has_player_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_sex());
    }

    // optional int32 vip_level = 7;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_player_info::MergeFrom(const msg_player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_head_frame()) {
      set_head_frame(from.head_frame());
    }
    if (from.has_head_custom()) {
      set_head_custom(from.head_custom());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
    if (from.has_player_sex()) {
      set_player_sex(from.player_sex());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_player_info::CopyFrom(const msg_player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_player_info::IsInitialized() const {

  return true;
}

void msg_player_info::Swap(msg_player_info* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_name_, other->player_name_);
    std::swap(head_frame_, other->head_frame_);
    std::swap(head_custom_, other->head_custom_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(player_sex_, other->player_sex_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_player_info_descriptor_;
  metadata.reflection = msg_player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_check_state::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_check_state::packetc2l_check_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_check_state::InitAsDefaultInstance() {
}

packetc2l_check_state::packetc2l_check_state(const packetc2l_check_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_check_state::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10001;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_check_state::~packetc2l_check_state() {
  SharedDtor();
}

void packetc2l_check_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_check_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_check_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_check_state_descriptor_;
}

const packetc2l_check_state& packetc2l_check_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_check_state* packetc2l_check_state::default_instance_ = NULL;

packetc2l_check_state* packetc2l_check_state::New() const {
  return new packetc2l_check_state;
}

void packetc2l_check_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10001;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_check_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_check_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_check_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_check_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_check_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_check_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_check_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_check_state::MergeFrom(const packetc2l_check_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_check_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_check_state::CopyFrom(const packetc2l_check_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_check_state::IsInitialized() const {

  return true;
}

void packetc2l_check_state::Swap(packetc2l_check_state* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_check_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_check_state_descriptor_;
  metadata.reflection = packetc2l_check_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_check_state_result::kPacketIdFieldNumber;
const int packetl2c_check_state_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_check_state_result::packetl2c_check_state_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_check_state_result::InitAsDefaultInstance() {
}

packetl2c_check_state_result::packetl2c_check_state_result(const packetl2c_check_state_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_check_state_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15001;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_check_state_result::~packetl2c_check_state_result() {
  SharedDtor();
}

void packetl2c_check_state_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_check_state_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_check_state_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_check_state_result_descriptor_;
}

const packetl2c_check_state_result& packetl2c_check_state_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_check_state_result* packetl2c_check_state_result::default_instance_ = NULL;

packetl2c_check_state_result* packetl2c_check_state_result::New() const {
  return new packetl2c_check_state_result;
}

void packetl2c_check_state_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15001;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_check_state_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_check_state_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_check_state_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_check_state_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_check_state_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_check_state_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_check_state_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_check_state_result::MergeFrom(const packetl2c_check_state_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_check_state_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_check_state_result::CopyFrom(const packetl2c_check_state_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_check_state_result::IsInitialized() const {

  return true;
}

void packetl2c_check_state_result::Swap(packetl2c_check_state_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_check_state_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_check_state_result_descriptor_;
  metadata.reflection = packetl2c_check_state_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_scene_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_scene_info::packetc2l_get_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_scene_info::InitAsDefaultInstance() {
}

packetc2l_get_scene_info::packetc2l_get_scene_info(const packetc2l_get_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_scene_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10002;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_scene_info::~packetc2l_get_scene_info() {
  SharedDtor();
}

void packetc2l_get_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_scene_info_descriptor_;
}

const packetc2l_get_scene_info& packetc2l_get_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_scene_info* packetc2l_get_scene_info::default_instance_ = NULL;

packetc2l_get_scene_info* packetc2l_get_scene_info::New() const {
  return new packetc2l_get_scene_info;
}

void packetc2l_get_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10002;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_scene_info::MergeFrom(const packetc2l_get_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_scene_info::CopyFrom(const packetc2l_get_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_scene_info::IsInitialized() const {

  return true;
}

void packetc2l_get_scene_info::Swap(packetc2l_get_scene_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_scene_info_descriptor_;
  metadata.reflection = packetc2l_get_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_room_scene_info::kReadyFieldNumber;
#endif  // !_MSC_VER

msg_room_scene_info::msg_room_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_room_scene_info::InitAsDefaultInstance() {
}

msg_room_scene_info::msg_room_scene_info(const msg_room_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_room_scene_info::SharedCtor() {
  _cached_size_ = 0;
  ready_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_room_scene_info::~msg_room_scene_info() {
  SharedDtor();
}

void msg_room_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_room_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_room_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_room_scene_info_descriptor_;
}

const msg_room_scene_info& msg_room_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

msg_room_scene_info* msg_room_scene_info::default_instance_ = NULL;

msg_room_scene_info* msg_room_scene_info::New() const {
  return new msg_room_scene_info;
}

void msg_room_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ready_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_room_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ready = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_room_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool ready = 1;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ready(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_room_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool ready = 1;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ready(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_room_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool ready = 1;
    if (has_ready()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_room_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_room_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_room_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_room_scene_info::MergeFrom(const msg_room_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ready()) {
      set_ready(from.ready());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_room_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_room_scene_info::CopyFrom(const msg_room_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_room_scene_info::IsInitialized() const {

  return true;
}

void msg_room_scene_info::Swap(msg_room_scene_info* other) {
  if (other != this) {
    std::swap(ready_, other->ready_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_room_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_room_scene_info_descriptor_;
  metadata.reflection = msg_room_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_score_scene_info::kCurrentUserFieldNumber;
const int msg_score_scene_info::kRemainSecondsFieldNumber;
const int msg_score_scene_info::kScoreInfoFieldNumber;
const int msg_score_scene_info::kUserTrusteeFieldNumber;
const int msg_score_scene_info::kCardsInfoFieldNumber;
#endif  // !_MSC_VER

msg_score_scene_info::msg_score_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_score_scene_info::InitAsDefaultInstance() {
}

msg_score_scene_info::msg_score_scene_info(const msg_score_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_score_scene_info::SharedCtor() {
  _cached_size_ = 0;
  current_user_ = 0;
  remain_seconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_score_scene_info::~msg_score_scene_info() {
  SharedDtor();
}

void msg_score_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_score_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_score_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_score_scene_info_descriptor_;
}

const msg_score_scene_info& msg_score_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

msg_score_scene_info* msg_score_scene_info::default_instance_ = NULL;

msg_score_scene_info* msg_score_scene_info::New() const {
  return new msg_score_scene_info;
}

void msg_score_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_user_ = 0;
    remain_seconds_ = 0;
  }
  score_info_.Clear();
  user_trustee_.Clear();
  cards_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_score_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 current_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_user_)));
          set_has_current_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remain_seconds;
        break;
      }

      // optional int32 remain_seconds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_seconds_)));
          set_has_remain_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score_info;
        break;
      }

      // repeated int32 score_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_score_info())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score_info())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score_info;
        if (input->ExpectTag(32)) goto parse_user_trustee;
        break;
      }

      // repeated bool user_trustee = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_trustee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 32, input, this->mutable_user_trustee())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_user_trustee())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_user_trustee;
        if (input->ExpectTag(40)) goto parse_cards_info;
        break;
      }

      // repeated int32 cards_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_cards_info())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards_info())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cards_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_score_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 current_user = 1;
  if (has_current_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->current_user(), output);
  }

  // optional int32 remain_seconds = 2;
  if (has_remain_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->remain_seconds(), output);
  }

  // repeated int32 score_info = 3;
  for (int i = 0; i < this->score_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->score_info(i), output);
  }

  // repeated bool user_trustee = 4;
  for (int i = 0; i < this->user_trustee_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      4, this->user_trustee(i), output);
  }

  // repeated int32 cards_info = 5;
  for (int i = 0; i < this->cards_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->cards_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_score_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 current_user = 1;
  if (has_current_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->current_user(), target);
  }

  // optional int32 remain_seconds = 2;
  if (has_remain_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->remain_seconds(), target);
  }

  // repeated int32 score_info = 3;
  for (int i = 0; i < this->score_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->score_info(i), target);
  }

  // repeated bool user_trustee = 4;
  for (int i = 0; i < this->user_trustee_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(4, this->user_trustee(i), target);
  }

  // repeated int32 cards_info = 5;
  for (int i = 0; i < this->cards_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->cards_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_score_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 current_user = 1;
    if (has_current_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_user());
    }

    // optional int32 remain_seconds = 2;
    if (has_remain_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_seconds());
    }

  }
  // repeated int32 score_info = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_info_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->score_info(i));
    }
    total_size += 1 * this->score_info_size() + data_size;
  }

  // repeated bool user_trustee = 4;
  {
    int data_size = 0;
    data_size = 1 * this->user_trustee_size();
    total_size += 1 * this->user_trustee_size() + data_size;
  }

  // repeated int32 cards_info = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_info_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards_info(i));
    }
    total_size += 1 * this->cards_info_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_score_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_score_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_score_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_score_scene_info::MergeFrom(const msg_score_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_info_.MergeFrom(from.score_info_);
  user_trustee_.MergeFrom(from.user_trustee_);
  cards_info_.MergeFrom(from.cards_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_user()) {
      set_current_user(from.current_user());
    }
    if (from.has_remain_seconds()) {
      set_remain_seconds(from.remain_seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_score_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_score_scene_info::CopyFrom(const msg_score_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_score_scene_info::IsInitialized() const {

  return true;
}

void msg_score_scene_info::Swap(msg_score_scene_info* other) {
  if (other != this) {
    std::swap(current_user_, other->current_user_);
    std::swap(remain_seconds_, other->remain_seconds_);
    score_info_.Swap(&other->score_info_);
    user_trustee_.Swap(&other->user_trustee_);
    cards_info_.Swap(&other->cards_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_score_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_score_scene_info_descriptor_;
  metadata.reflection = msg_score_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_times_scene_info::kRemainSecondsFieldNumber;
const int msg_times_scene_info::kUserTrusteeFieldNumber;
const int msg_times_scene_info::kCardsInfoFieldNumber;
const int msg_times_scene_info::kLandUserFieldNumber;
const int msg_times_scene_info::kLandScoreFieldNumber;
const int msg_times_scene_info::kBackCardFieldNumber;
#endif  // !_MSC_VER

msg_times_scene_info::msg_times_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_times_scene_info::InitAsDefaultInstance() {
}

msg_times_scene_info::msg_times_scene_info(const msg_times_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_times_scene_info::SharedCtor() {
  _cached_size_ = 0;
  remain_seconds_ = 0;
  land_user_ = 0;
  land_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_times_scene_info::~msg_times_scene_info() {
  SharedDtor();
}

void msg_times_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_times_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_times_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_times_scene_info_descriptor_;
}

const msg_times_scene_info& msg_times_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

msg_times_scene_info* msg_times_scene_info::default_instance_ = NULL;

msg_times_scene_info* msg_times_scene_info::New() const {
  return new msg_times_scene_info;
}

void msg_times_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    remain_seconds_ = 0;
    land_user_ = 0;
    land_score_ = 0;
  }
  user_trustee_.Clear();
  cards_info_.Clear();
  back_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_times_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 remain_seconds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_seconds_)));
          set_has_remain_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_trustee;
        break;
      }

      // repeated bool user_trustee = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_trustee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_user_trustee())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_user_trustee())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_trustee;
        if (input->ExpectTag(24)) goto parse_cards_info;
        break;
      }

      // repeated int32 cards_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_cards_info())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards_info())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cards_info;
        if (input->ExpectTag(32)) goto parse_land_user;
        break;
      }

      // optional int32 land_user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_land_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &land_user_)));
          set_has_land_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_land_score;
        break;
      }

      // optional int32 land_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_land_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &land_score_)));
          set_has_land_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_back_card;
        break;
      }

      // repeated int32 back_card = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_back_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_back_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_back_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_back_card;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_times_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 remain_seconds = 1;
  if (has_remain_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->remain_seconds(), output);
  }

  // repeated bool user_trustee = 2;
  for (int i = 0; i < this->user_trustee_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->user_trustee(i), output);
  }

  // repeated int32 cards_info = 3;
  for (int i = 0; i < this->cards_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cards_info(i), output);
  }

  // optional int32 land_user = 4;
  if (has_land_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->land_user(), output);
  }

  // optional int32 land_score = 5;
  if (has_land_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->land_score(), output);
  }

  // repeated int32 back_card = 6;
  for (int i = 0; i < this->back_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->back_card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_times_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 remain_seconds = 1;
  if (has_remain_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->remain_seconds(), target);
  }

  // repeated bool user_trustee = 2;
  for (int i = 0; i < this->user_trustee_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->user_trustee(i), target);
  }

  // repeated int32 cards_info = 3;
  for (int i = 0; i < this->cards_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->cards_info(i), target);
  }

  // optional int32 land_user = 4;
  if (has_land_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->land_user(), target);
  }

  // optional int32 land_score = 5;
  if (has_land_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->land_score(), target);
  }

  // repeated int32 back_card = 6;
  for (int i = 0; i < this->back_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->back_card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_times_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 remain_seconds = 1;
    if (has_remain_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_seconds());
    }

    // optional int32 land_user = 4;
    if (has_land_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->land_user());
    }

    // optional int32 land_score = 5;
    if (has_land_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->land_score());
    }

  }
  // repeated bool user_trustee = 2;
  {
    int data_size = 0;
    data_size = 1 * this->user_trustee_size();
    total_size += 1 * this->user_trustee_size() + data_size;
  }

  // repeated int32 cards_info = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_info_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards_info(i));
    }
    total_size += 1 * this->cards_info_size() + data_size;
  }

  // repeated int32 back_card = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->back_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->back_card(i));
    }
    total_size += 1 * this->back_card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_times_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_times_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_times_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_times_scene_info::MergeFrom(const msg_times_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_trustee_.MergeFrom(from.user_trustee_);
  cards_info_.MergeFrom(from.cards_info_);
  back_card_.MergeFrom(from.back_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remain_seconds()) {
      set_remain_seconds(from.remain_seconds());
    }
    if (from.has_land_user()) {
      set_land_user(from.land_user());
    }
    if (from.has_land_score()) {
      set_land_score(from.land_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_times_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_times_scene_info::CopyFrom(const msg_times_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_times_scene_info::IsInitialized() const {

  return true;
}

void msg_times_scene_info::Swap(msg_times_scene_info* other) {
  if (other != this) {
    std::swap(remain_seconds_, other->remain_seconds_);
    user_trustee_.Swap(&other->user_trustee_);
    cards_info_.Swap(&other->cards_info_);
    std::swap(land_user_, other->land_user_);
    std::swap(land_score_, other->land_score_);
    back_card_.Swap(&other->back_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_times_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_times_scene_info_descriptor_;
  metadata.reflection = msg_times_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_playing_scene_info::kLandChairIdFieldNumber;
const int msg_playing_scene_info::kLandScoreFieldNumber;
const int msg_playing_scene_info::kCurrentUserFieldNumber;
const int msg_playing_scene_info::kRemainSecondsFieldNumber;
const int msg_playing_scene_info::kUserTrusteeFieldNumber;
const int msg_playing_scene_info::kRemainCardCntFieldNumber;
const int msg_playing_scene_info::kBackCardFieldNumber;
const int msg_playing_scene_info::kCardsInfoFieldNumber;
const int msg_playing_scene_info::kTurnCards1FieldNumber;
const int msg_playing_scene_info::kTurnCards2FieldNumber;
const int msg_playing_scene_info::kTurnCards3FieldNumber;
const int msg_playing_scene_info::kNewTurnFieldNumber;
const int msg_playing_scene_info::kBombTimeFieldNumber;
const int msg_playing_scene_info::kOutCardsFieldNumber;
const int msg_playing_scene_info::kScoreTimesFieldNumber;
#endif  // !_MSC_VER

msg_playing_scene_info::msg_playing_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_playing_scene_info::InitAsDefaultInstance() {
}

msg_playing_scene_info::msg_playing_scene_info(const msg_playing_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_playing_scene_info::SharedCtor() {
  _cached_size_ = 0;
  land_chair_id_ = 0;
  land_score_ = 0;
  current_user_ = 0;
  remain_seconds_ = 0;
  new_turn_ = false;
  bomb_time_ = 0;
  score_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_playing_scene_info::~msg_playing_scene_info() {
  SharedDtor();
}

void msg_playing_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_playing_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_playing_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_playing_scene_info_descriptor_;
}

const msg_playing_scene_info& msg_playing_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

msg_playing_scene_info* msg_playing_scene_info::default_instance_ = NULL;

msg_playing_scene_info* msg_playing_scene_info::New() const {
  return new msg_playing_scene_info;
}

void msg_playing_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    land_chair_id_ = 0;
    land_score_ = 0;
    current_user_ = 0;
    remain_seconds_ = 0;
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    new_turn_ = false;
    bomb_time_ = 0;
    score_times_ = 0;
  }
  user_trustee_.Clear();
  remain_card_cnt_.Clear();
  back_card_.Clear();
  cards_info_.Clear();
  turn_cards1_.Clear();
  turn_cards2_.Clear();
  turn_cards3_.Clear();
  out_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_playing_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 land_chair_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &land_chair_id_)));
          set_has_land_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_land_score;
        break;
      }

      // optional int32 land_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_land_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &land_score_)));
          set_has_land_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_current_user;
        break;
      }

      // optional int32 current_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_user_)));
          set_has_current_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remain_seconds;
        break;
      }

      // optional int32 remain_seconds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_seconds_)));
          set_has_remain_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_trustee;
        break;
      }

      // repeated bool user_trustee = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_trustee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 40, input, this->mutable_user_trustee())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_user_trustee())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_trustee;
        if (input->ExpectTag(48)) goto parse_remain_card_cnt;
        break;
      }

      // repeated int32 remain_card_cnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_card_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_remain_card_cnt())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_remain_card_cnt())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_remain_card_cnt;
        if (input->ExpectTag(56)) goto parse_back_card;
        break;
      }

      // repeated int32 back_card = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_back_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_back_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_back_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_back_card;
        if (input->ExpectTag(64)) goto parse_cards_info;
        break;
      }

      // repeated int32 cards_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_cards_info())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards_info())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cards_info;
        if (input->ExpectTag(72)) goto parse_turn_cards1;
        break;
      }

      // repeated int32 turn_cards1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_cards1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_turn_cards1())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_turn_cards1())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_turn_cards1;
        if (input->ExpectTag(80)) goto parse_turn_cards2;
        break;
      }

      // repeated int32 turn_cards2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_cards2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_turn_cards2())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_turn_cards2())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_turn_cards2;
        if (input->ExpectTag(88)) goto parse_turn_cards3;
        break;
      }

      // repeated int32 turn_cards3 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_cards3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_turn_cards3())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_turn_cards3())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_turn_cards3;
        if (input->ExpectTag(96)) goto parse_new_turn;
        break;
      }

      // optional bool new_turn = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_turn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new_turn_)));
          set_has_new_turn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_bomb_time;
        break;
      }

      // optional int32 bomb_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bomb_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bomb_time_)));
          set_has_bomb_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_out_cards;
        break;
      }

      // repeated int32 out_cards = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_out_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_out_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_out_cards;
        if (input->ExpectTag(120)) goto parse_score_times;
        break;
      }

      // optional int32 score_times = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_times_)));
          set_has_score_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_playing_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 land_chair_id = 1;
  if (has_land_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->land_chair_id(), output);
  }

  // optional int32 land_score = 2;
  if (has_land_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->land_score(), output);
  }

  // optional int32 current_user = 3;
  if (has_current_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->current_user(), output);
  }

  // optional int32 remain_seconds = 4;
  if (has_remain_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->remain_seconds(), output);
  }

  // repeated bool user_trustee = 5;
  for (int i = 0; i < this->user_trustee_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      5, this->user_trustee(i), output);
  }

  // repeated int32 remain_card_cnt = 6;
  for (int i = 0; i < this->remain_card_cnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->remain_card_cnt(i), output);
  }

  // repeated int32 back_card = 7;
  for (int i = 0; i < this->back_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->back_card(i), output);
  }

  // repeated int32 cards_info = 8;
  for (int i = 0; i < this->cards_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->cards_info(i), output);
  }

  // repeated int32 turn_cards1 = 9;
  for (int i = 0; i < this->turn_cards1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->turn_cards1(i), output);
  }

  // repeated int32 turn_cards2 = 10;
  for (int i = 0; i < this->turn_cards2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->turn_cards2(i), output);
  }

  // repeated int32 turn_cards3 = 11;
  for (int i = 0; i < this->turn_cards3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->turn_cards3(i), output);
  }

  // optional bool new_turn = 12;
  if (has_new_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->new_turn(), output);
  }

  // optional int32 bomb_time = 13;
  if (has_bomb_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->bomb_time(), output);
  }

  // repeated int32 out_cards = 14;
  for (int i = 0; i < this->out_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->out_cards(i), output);
  }

  // optional int32 score_times = 15;
  if (has_score_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->score_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_playing_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 land_chair_id = 1;
  if (has_land_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->land_chair_id(), target);
  }

  // optional int32 land_score = 2;
  if (has_land_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->land_score(), target);
  }

  // optional int32 current_user = 3;
  if (has_current_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->current_user(), target);
  }

  // optional int32 remain_seconds = 4;
  if (has_remain_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->remain_seconds(), target);
  }

  // repeated bool user_trustee = 5;
  for (int i = 0; i < this->user_trustee_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(5, this->user_trustee(i), target);
  }

  // repeated int32 remain_card_cnt = 6;
  for (int i = 0; i < this->remain_card_cnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->remain_card_cnt(i), target);
  }

  // repeated int32 back_card = 7;
  for (int i = 0; i < this->back_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->back_card(i), target);
  }

  // repeated int32 cards_info = 8;
  for (int i = 0; i < this->cards_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->cards_info(i), target);
  }

  // repeated int32 turn_cards1 = 9;
  for (int i = 0; i < this->turn_cards1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->turn_cards1(i), target);
  }

  // repeated int32 turn_cards2 = 10;
  for (int i = 0; i < this->turn_cards2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->turn_cards2(i), target);
  }

  // repeated int32 turn_cards3 = 11;
  for (int i = 0; i < this->turn_cards3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->turn_cards3(i), target);
  }

  // optional bool new_turn = 12;
  if (has_new_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->new_turn(), target);
  }

  // optional int32 bomb_time = 13;
  if (has_bomb_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->bomb_time(), target);
  }

  // repeated int32 out_cards = 14;
  for (int i = 0; i < this->out_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->out_cards(i), target);
  }

  // optional int32 score_times = 15;
  if (has_score_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->score_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_playing_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 land_chair_id = 1;
    if (has_land_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->land_chair_id());
    }

    // optional int32 land_score = 2;
    if (has_land_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->land_score());
    }

    // optional int32 current_user = 3;
    if (has_current_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_user());
    }

    // optional int32 remain_seconds = 4;
    if (has_remain_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_seconds());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional bool new_turn = 12;
    if (has_new_turn()) {
      total_size += 1 + 1;
    }

    // optional int32 bomb_time = 13;
    if (has_bomb_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bomb_time());
    }

    // optional int32 score_times = 15;
    if (has_score_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score_times());
    }

  }
  // repeated bool user_trustee = 5;
  {
    int data_size = 0;
    data_size = 1 * this->user_trustee_size();
    total_size += 1 * this->user_trustee_size() + data_size;
  }

  // repeated int32 remain_card_cnt = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->remain_card_cnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->remain_card_cnt(i));
    }
    total_size += 1 * this->remain_card_cnt_size() + data_size;
  }

  // repeated int32 back_card = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->back_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->back_card(i));
    }
    total_size += 1 * this->back_card_size() + data_size;
  }

  // repeated int32 cards_info = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_info_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards_info(i));
    }
    total_size += 1 * this->cards_info_size() + data_size;
  }

  // repeated int32 turn_cards1 = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->turn_cards1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->turn_cards1(i));
    }
    total_size += 1 * this->turn_cards1_size() + data_size;
  }

  // repeated int32 turn_cards2 = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->turn_cards2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->turn_cards2(i));
    }
    total_size += 1 * this->turn_cards2_size() + data_size;
  }

  // repeated int32 turn_cards3 = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->turn_cards3_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->turn_cards3(i));
    }
    total_size += 1 * this->turn_cards3_size() + data_size;
  }

  // repeated int32 out_cards = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->out_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->out_cards(i));
    }
    total_size += 1 * this->out_cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_playing_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_playing_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_playing_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_playing_scene_info::MergeFrom(const msg_playing_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_trustee_.MergeFrom(from.user_trustee_);
  remain_card_cnt_.MergeFrom(from.remain_card_cnt_);
  back_card_.MergeFrom(from.back_card_);
  cards_info_.MergeFrom(from.cards_info_);
  turn_cards1_.MergeFrom(from.turn_cards1_);
  turn_cards2_.MergeFrom(from.turn_cards2_);
  turn_cards3_.MergeFrom(from.turn_cards3_);
  out_cards_.MergeFrom(from.out_cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_land_chair_id()) {
      set_land_chair_id(from.land_chair_id());
    }
    if (from.has_land_score()) {
      set_land_score(from.land_score());
    }
    if (from.has_current_user()) {
      set_current_user(from.current_user());
    }
    if (from.has_remain_seconds()) {
      set_remain_seconds(from.remain_seconds());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_new_turn()) {
      set_new_turn(from.new_turn());
    }
    if (from.has_bomb_time()) {
      set_bomb_time(from.bomb_time());
    }
    if (from.has_score_times()) {
      set_score_times(from.score_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_playing_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_playing_scene_info::CopyFrom(const msg_playing_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_playing_scene_info::IsInitialized() const {

  return true;
}

void msg_playing_scene_info::Swap(msg_playing_scene_info* other) {
  if (other != this) {
    std::swap(land_chair_id_, other->land_chair_id_);
    std::swap(land_score_, other->land_score_);
    std::swap(current_user_, other->current_user_);
    std::swap(remain_seconds_, other->remain_seconds_);
    user_trustee_.Swap(&other->user_trustee_);
    remain_card_cnt_.Swap(&other->remain_card_cnt_);
    back_card_.Swap(&other->back_card_);
    cards_info_.Swap(&other->cards_info_);
    turn_cards1_.Swap(&other->turn_cards1_);
    turn_cards2_.Swap(&other->turn_cards2_);
    turn_cards3_.Swap(&other->turn_cards3_);
    std::swap(new_turn_, other->new_turn_);
    std::swap(bomb_time_, other->bomb_time_);
    out_cards_.Swap(&other->out_cards_);
    std::swap(score_times_, other->score_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_playing_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_playing_scene_info_descriptor_;
  metadata.reflection = msg_playing_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_scene_info_result::kPacketIdFieldNumber;
const int packetl2c_scene_info_result::kRoomTypeFieldNumber;
const int packetl2c_scene_info_result::kSceneInfo1FieldNumber;
const int packetl2c_scene_info_result::kSceneInfo2FieldNumber;
const int packetl2c_scene_info_result::kSceneInfo3FieldNumber;
const int packetl2c_scene_info_result::kInfoTypeFieldNumber;
const int packetl2c_scene_info_result::kSceneInfo4FieldNumber;
const int packetl2c_scene_info_result::kLandChairId4FieldNumber;
const int packetl2c_scene_info_result::kLandScore4FieldNumber;
const int packetl2c_scene_info_result::kScoreTimes4FieldNumber;
const int packetl2c_scene_info_result::kTaskIdFieldNumber;
const int packetl2c_scene_info_result::kTimesFieldNumber;
const int packetl2c_scene_info_result::kSceneInfo5FieldNumber;
const int packetl2c_scene_info_result::kPlayCntFieldNumber;
#endif  // !_MSC_VER

packetl2c_scene_info_result::packetl2c_scene_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_scene_info_result::InitAsDefaultInstance() {
  scene_info1_ = const_cast< ::game_land_protocols::msg_room_scene_info*>(&::game_land_protocols::msg_room_scene_info::default_instance());
  scene_info2_ = const_cast< ::game_land_protocols::msg_score_scene_info*>(&::game_land_protocols::msg_score_scene_info::default_instance());
  scene_info3_ = const_cast< ::game_land_protocols::msg_playing_scene_info*>(&::game_land_protocols::msg_playing_scene_info::default_instance());
  scene_info4_ = const_cast< ::game_land_protocols::packetl2c_game_end*>(&::game_land_protocols::packetl2c_game_end::default_instance());
  scene_info5_ = const_cast< ::game_land_protocols::msg_times_scene_info*>(&::game_land_protocols::msg_times_scene_info::default_instance());
}

packetl2c_scene_info_result::packetl2c_scene_info_result(const packetl2c_scene_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_scene_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15002;
  room_type_ = 0;
  scene_info1_ = NULL;
  scene_info2_ = NULL;
  scene_info3_ = NULL;
  info_type_ = 0;
  scene_info4_ = NULL;
  land_chair_id4_ = 0;
  land_score4_ = 0;
  score_times4_ = 0;
  task_id_ = -1;
  scene_info5_ = NULL;
  play_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_scene_info_result::~packetl2c_scene_info_result() {
  SharedDtor();
}

void packetl2c_scene_info_result::SharedDtor() {
  if (this != default_instance_) {
    delete scene_info1_;
    delete scene_info2_;
    delete scene_info3_;
    delete scene_info4_;
    delete scene_info5_;
  }
}

void packetl2c_scene_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_scene_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_scene_info_result_descriptor_;
}

const packetl2c_scene_info_result& packetl2c_scene_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_scene_info_result* packetl2c_scene_info_result::default_instance_ = NULL;

packetl2c_scene_info_result* packetl2c_scene_info_result::New() const {
  return new packetl2c_scene_info_result;
}

void packetl2c_scene_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15002;
    room_type_ = 0;
    if (has_scene_info1()) {
      if (scene_info1_ != NULL) scene_info1_->::game_land_protocols::msg_room_scene_info::Clear();
    }
    if (has_scene_info2()) {
      if (scene_info2_ != NULL) scene_info2_->::game_land_protocols::msg_score_scene_info::Clear();
    }
    if (has_scene_info3()) {
      if (scene_info3_ != NULL) scene_info3_->::game_land_protocols::msg_playing_scene_info::Clear();
    }
    info_type_ = 0;
    if (has_scene_info4()) {
      if (scene_info4_ != NULL) scene_info4_->::game_land_protocols::packetl2c_game_end::Clear();
    }
    land_chair_id4_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    land_score4_ = 0;
    score_times4_ = 0;
    task_id_ = -1;
    if (has_scene_info5()) {
      if (scene_info5_ != NULL) scene_info5_->::game_land_protocols::msg_times_scene_info::Clear();
    }
    play_cnt_ = 0;
  }
  times_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_scene_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_type;
        break;
      }

      // optional int32 room_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_type_)));
          set_has_room_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_scene_info1;
        break;
      }

      // optional .game_land_protocols.msg_room_scene_info scene_info1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene_info1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene_info1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_scene_info2;
        break;
      }

      // optional .game_land_protocols.msg_score_scene_info scene_info2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene_info2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene_info2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_scene_info3;
        break;
      }

      // optional .game_land_protocols.msg_playing_scene_info scene_info3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene_info3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene_info3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_info_type;
        break;
      }

      // optional int32 info_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &info_type_)));
          set_has_info_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_scene_info4;
        break;
      }

      // optional .game_land_protocols.packetl2c_game_end scene_info4 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene_info4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene_info4()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_land_chair_id4;
        break;
      }

      // optional int32 land_chair_id4 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_land_chair_id4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &land_chair_id4_)));
          set_has_land_chair_id4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_land_score4;
        break;
      }

      // optional int32 land_score4 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_land_score4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &land_score4_)));
          set_has_land_score4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_score_times4;
        break;
      }

      // optional int32 score_times4 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score_times4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_times4_)));
          set_has_score_times4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_task_id;
        break;
      }

      // optional int32 task_id = 11 [default = -1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_times;
        break;
      }

      // repeated int32 times = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_times())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_times())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_times;
        if (input->ExpectTag(106)) goto parse_scene_info5;
        break;
      }

      // optional .game_land_protocols.msg_times_scene_info scene_info5 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene_info5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene_info5()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_play_cnt;
        break;
      }

      // optional int32 play_cnt = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_play_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &play_cnt_)));
          set_has_play_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_scene_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_type = 2;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_type(), output);
  }

  // optional .game_land_protocols.msg_room_scene_info scene_info1 = 3;
  if (has_scene_info1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->scene_info1(), output);
  }

  // optional .game_land_protocols.msg_score_scene_info scene_info2 = 4;
  if (has_scene_info2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->scene_info2(), output);
  }

  // optional .game_land_protocols.msg_playing_scene_info scene_info3 = 5;
  if (has_scene_info3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->scene_info3(), output);
  }

  // optional int32 info_type = 6;
  if (has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->info_type(), output);
  }

  // optional .game_land_protocols.packetl2c_game_end scene_info4 = 7;
  if (has_scene_info4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->scene_info4(), output);
  }

  // optional int32 land_chair_id4 = 8;
  if (has_land_chair_id4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->land_chair_id4(), output);
  }

  // optional int32 land_score4 = 9;
  if (has_land_score4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->land_score4(), output);
  }

  // optional int32 score_times4 = 10;
  if (has_score_times4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->score_times4(), output);
  }

  // optional int32 task_id = 11 [default = -1];
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->task_id(), output);
  }

  // repeated int32 times = 12;
  for (int i = 0; i < this->times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->times(i), output);
  }

  // optional .game_land_protocols.msg_times_scene_info scene_info5 = 13;
  if (has_scene_info5()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->scene_info5(), output);
  }

  // optional int32 play_cnt = 14;
  if (has_play_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->play_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_scene_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_type = 2;
  if (has_room_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_type(), target);
  }

  // optional .game_land_protocols.msg_room_scene_info scene_info1 = 3;
  if (has_scene_info1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->scene_info1(), target);
  }

  // optional .game_land_protocols.msg_score_scene_info scene_info2 = 4;
  if (has_scene_info2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->scene_info2(), target);
  }

  // optional .game_land_protocols.msg_playing_scene_info scene_info3 = 5;
  if (has_scene_info3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->scene_info3(), target);
  }

  // optional int32 info_type = 6;
  if (has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->info_type(), target);
  }

  // optional .game_land_protocols.packetl2c_game_end scene_info4 = 7;
  if (has_scene_info4()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->scene_info4(), target);
  }

  // optional int32 land_chair_id4 = 8;
  if (has_land_chair_id4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->land_chair_id4(), target);
  }

  // optional int32 land_score4 = 9;
  if (has_land_score4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->land_score4(), target);
  }

  // optional int32 score_times4 = 10;
  if (has_score_times4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->score_times4(), target);
  }

  // optional int32 task_id = 11 [default = -1];
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->task_id(), target);
  }

  // repeated int32 times = 12;
  for (int i = 0; i < this->times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->times(i), target);
  }

  // optional .game_land_protocols.msg_times_scene_info scene_info5 = 13;
  if (has_scene_info5()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->scene_info5(), target);
  }

  // optional int32 play_cnt = 14;
  if (has_play_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->play_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_scene_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_type = 2;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_type());
    }

    // optional .game_land_protocols.msg_room_scene_info scene_info1 = 3;
    if (has_scene_info1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scene_info1());
    }

    // optional .game_land_protocols.msg_score_scene_info scene_info2 = 4;
    if (has_scene_info2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scene_info2());
    }

    // optional .game_land_protocols.msg_playing_scene_info scene_info3 = 5;
    if (has_scene_info3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scene_info3());
    }

    // optional int32 info_type = 6;
    if (has_info_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->info_type());
    }

    // optional .game_land_protocols.packetl2c_game_end scene_info4 = 7;
    if (has_scene_info4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scene_info4());
    }

    // optional int32 land_chair_id4 = 8;
    if (has_land_chair_id4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->land_chair_id4());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 land_score4 = 9;
    if (has_land_score4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->land_score4());
    }

    // optional int32 score_times4 = 10;
    if (has_score_times4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score_times4());
    }

    // optional int32 task_id = 11 [default = -1];
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

    // optional .game_land_protocols.msg_times_scene_info scene_info5 = 13;
    if (has_scene_info5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scene_info5());
    }

    // optional int32 play_cnt = 14;
    if (has_play_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->play_cnt());
    }

  }
  // repeated int32 times = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->times(i));
    }
    total_size += 1 * this->times_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_scene_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_scene_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_scene_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_scene_info_result::MergeFrom(const packetl2c_scene_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  times_.MergeFrom(from.times_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
    if (from.has_scene_info1()) {
      mutable_scene_info1()->::game_land_protocols::msg_room_scene_info::MergeFrom(from.scene_info1());
    }
    if (from.has_scene_info2()) {
      mutable_scene_info2()->::game_land_protocols::msg_score_scene_info::MergeFrom(from.scene_info2());
    }
    if (from.has_scene_info3()) {
      mutable_scene_info3()->::game_land_protocols::msg_playing_scene_info::MergeFrom(from.scene_info3());
    }
    if (from.has_info_type()) {
      set_info_type(from.info_type());
    }
    if (from.has_scene_info4()) {
      mutable_scene_info4()->::game_land_protocols::packetl2c_game_end::MergeFrom(from.scene_info4());
    }
    if (from.has_land_chair_id4()) {
      set_land_chair_id4(from.land_chair_id4());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_land_score4()) {
      set_land_score4(from.land_score4());
    }
    if (from.has_score_times4()) {
      set_score_times4(from.score_times4());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_scene_info5()) {
      mutable_scene_info5()->::game_land_protocols::msg_times_scene_info::MergeFrom(from.scene_info5());
    }
    if (from.has_play_cnt()) {
      set_play_cnt(from.play_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_scene_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_scene_info_result::CopyFrom(const packetl2c_scene_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_scene_info_result::IsInitialized() const {

  return true;
}

void packetl2c_scene_info_result::Swap(packetl2c_scene_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_type_, other->room_type_);
    std::swap(scene_info1_, other->scene_info1_);
    std::swap(scene_info2_, other->scene_info2_);
    std::swap(scene_info3_, other->scene_info3_);
    std::swap(info_type_, other->info_type_);
    std::swap(scene_info4_, other->scene_info4_);
    std::swap(land_chair_id4_, other->land_chair_id4_);
    std::swap(land_score4_, other->land_score4_);
    std::swap(score_times4_, other->score_times4_);
    std::swap(task_id_, other->task_id_);
    times_.Swap(&other->times_);
    std::swap(scene_info5_, other->scene_info5_);
    std::swap(play_cnt_, other->play_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_scene_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_scene_info_result_descriptor_;
  metadata.reflection = packetl2c_scene_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_enter_room::kPacketIdFieldNumber;
const int packetc2l_enter_room::kRoomTypeFieldNumber;
#endif  // !_MSC_VER

packetc2l_enter_room::packetc2l_enter_room()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_enter_room::InitAsDefaultInstance() {
}

packetc2l_enter_room::packetc2l_enter_room(const packetc2l_enter_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_enter_room::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10009;
  room_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_enter_room::~packetc2l_enter_room() {
  SharedDtor();
}

void packetc2l_enter_room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_enter_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_enter_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_enter_room_descriptor_;
}

const packetc2l_enter_room& packetc2l_enter_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_enter_room* packetc2l_enter_room::default_instance_ = NULL;

packetc2l_enter_room* packetc2l_enter_room::New() const {
  return new packetc2l_enter_room;
}

void packetc2l_enter_room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10009;
    room_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_enter_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_type;
        break;
      }

      // optional int32 room_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_type_)));
          set_has_room_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_enter_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_type = 2;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_enter_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_type = 2;
  if (has_room_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_enter_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_type = 2;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_enter_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_enter_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_enter_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_enter_room::MergeFrom(const packetc2l_enter_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_enter_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_enter_room::CopyFrom(const packetc2l_enter_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_enter_room::IsInitialized() const {

  return true;
}

void packetc2l_enter_room::Swap(packetc2l_enter_room* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_type_, other->room_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_enter_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_enter_room_descriptor_;
  metadata.reflection = packetc2l_enter_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_enter_room_result::kPacketIdFieldNumber;
const int packetl2c_enter_room_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_enter_room_result::packetl2c_enter_room_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_enter_room_result::InitAsDefaultInstance() {
}

packetl2c_enter_room_result::packetl2c_enter_room_result(const packetl2c_enter_room_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_enter_room_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15009;
  result_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_enter_room_result::~packetl2c_enter_room_result() {
  SharedDtor();
}

void packetl2c_enter_room_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_enter_room_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_enter_room_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_enter_room_result_descriptor_;
}

const packetl2c_enter_room_result& packetl2c_enter_room_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_enter_room_result* packetl2c_enter_room_result::default_instance_ = NULL;

packetl2c_enter_room_result* packetl2c_enter_room_result::New() const {
  return new packetl2c_enter_room_result;
}

void packetl2c_enter_room_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15009;
    result_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_enter_room_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_enter_room_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_enter_room_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_enter_room_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_enter_room_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_enter_room_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_enter_room_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_enter_room_result::MergeFrom(const packetl2c_enter_room_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_enter_room_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_enter_room_result::CopyFrom(const packetl2c_enter_room_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_enter_room_result::IsInitialized() const {

  return true;
}

void packetl2c_enter_room_result::Swap(packetl2c_enter_room_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_enter_room_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_enter_room_result_descriptor_;
  metadata.reflection = packetl2c_enter_room_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_leave_room::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_leave_room::packetc2l_leave_room()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_leave_room::InitAsDefaultInstance() {
}

packetc2l_leave_room::packetc2l_leave_room(const packetc2l_leave_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_leave_room::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10010;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_leave_room::~packetc2l_leave_room() {
  SharedDtor();
}

void packetc2l_leave_room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_leave_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_leave_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_leave_room_descriptor_;
}

const packetc2l_leave_room& packetc2l_leave_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_leave_room* packetc2l_leave_room::default_instance_ = NULL;

packetc2l_leave_room* packetc2l_leave_room::New() const {
  return new packetc2l_leave_room;
}

void packetc2l_leave_room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10010;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_leave_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_leave_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_leave_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_leave_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_leave_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_leave_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_leave_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_leave_room::MergeFrom(const packetc2l_leave_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_leave_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_leave_room::CopyFrom(const packetc2l_leave_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_leave_room::IsInitialized() const {

  return true;
}

void packetc2l_leave_room::Swap(packetc2l_leave_room* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_leave_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_leave_room_descriptor_;
  metadata.reflection = packetc2l_leave_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_leave_room_result::kPacketIdFieldNumber;
const int packetl2c_leave_room_result::kPlayerGoldFieldNumber;
#endif  // !_MSC_VER

packetl2c_leave_room_result::packetl2c_leave_room_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_leave_room_result::InitAsDefaultInstance() {
}

packetl2c_leave_room_result::packetl2c_leave_room_result(const packetl2c_leave_room_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_leave_room_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15010;
  player_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_leave_room_result::~packetl2c_leave_room_result() {
  SharedDtor();
}

void packetl2c_leave_room_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_leave_room_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_leave_room_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_leave_room_result_descriptor_;
}

const packetl2c_leave_room_result& packetl2c_leave_room_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_leave_room_result* packetl2c_leave_room_result::default_instance_ = NULL;

packetl2c_leave_room_result* packetl2c_leave_room_result::New() const {
  return new packetl2c_leave_room_result;
}

void packetl2c_leave_room_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15010;
    player_gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_leave_room_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_leave_room_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int64 player_gold = 2;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->player_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_leave_room_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int64 player_gold = 2;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->player_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_leave_room_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int64 player_gold = 2;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_leave_room_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_leave_room_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_leave_room_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_leave_room_result::MergeFrom(const packetl2c_leave_room_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_leave_room_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_leave_room_result::CopyFrom(const packetl2c_leave_room_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_leave_room_result::IsInitialized() const {

  return true;
}

void packetl2c_leave_room_result::Swap(packetl2c_leave_room_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_leave_room_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_leave_room_result_descriptor_;
  metadata.reflection = packetl2c_leave_room_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_user_trustee::kPacketIdFieldNumber;
const int packetc2l_user_trustee::kTrusteeFieldNumber;
#endif  // !_MSC_VER

packetc2l_user_trustee::packetc2l_user_trustee()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_user_trustee::InitAsDefaultInstance() {
}

packetc2l_user_trustee::packetc2l_user_trustee(const packetc2l_user_trustee& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_user_trustee::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10008;
  trustee_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_user_trustee::~packetc2l_user_trustee() {
  SharedDtor();
}

void packetc2l_user_trustee::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_user_trustee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_user_trustee::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_user_trustee_descriptor_;
}

const packetc2l_user_trustee& packetc2l_user_trustee::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_user_trustee* packetc2l_user_trustee::default_instance_ = NULL;

packetc2l_user_trustee* packetc2l_user_trustee::New() const {
  return new packetc2l_user_trustee;
}

void packetc2l_user_trustee::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10008;
    trustee_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_user_trustee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_user_trustee];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trustee;
        break;
      }

      // optional bool trustee = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trustee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trustee_)));
          set_has_trustee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_user_trustee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_user_trustee];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional bool trustee = 2;
  if (has_trustee()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->trustee(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_user_trustee::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_user_trustee];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional bool trustee = 2;
  if (has_trustee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->trustee(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_user_trustee::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_user_trustee];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool trustee = 2;
    if (has_trustee()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_user_trustee::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_user_trustee* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_user_trustee*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_user_trustee::MergeFrom(const packetc2l_user_trustee& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_trustee()) {
      set_trustee(from.trustee());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_user_trustee::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_user_trustee::CopyFrom(const packetc2l_user_trustee& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_user_trustee::IsInitialized() const {

  return true;
}

void packetc2l_user_trustee::Swap(packetc2l_user_trustee* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(trustee_, other->trustee_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_user_trustee::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_user_trustee_descriptor_;
  metadata.reflection = packetc2l_user_trustee_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_user_trustee_notify::kPacketIdFieldNumber;
const int packetl2c_user_trustee_notify::kChairIdFieldNumber;
const int packetl2c_user_trustee_notify::kTrusteeFieldNumber;
const int packetl2c_user_trustee_notify::kRemainSecondsFieldNumber;
#endif  // !_MSC_VER

packetl2c_user_trustee_notify::packetl2c_user_trustee_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_user_trustee_notify::InitAsDefaultInstance() {
}

packetl2c_user_trustee_notify::packetl2c_user_trustee_notify(const packetl2c_user_trustee_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_user_trustee_notify::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15008;
  chair_id_ = 0;
  trustee_ = false;
  remain_seconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_user_trustee_notify::~packetl2c_user_trustee_notify() {
  SharedDtor();
}

void packetl2c_user_trustee_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_user_trustee_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_user_trustee_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_user_trustee_notify_descriptor_;
}

const packetl2c_user_trustee_notify& packetl2c_user_trustee_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_user_trustee_notify* packetl2c_user_trustee_notify::default_instance_ = NULL;

packetl2c_user_trustee_notify* packetl2c_user_trustee_notify::New() const {
  return new packetl2c_user_trustee_notify;
}

void packetl2c_user_trustee_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15008;
    chair_id_ = 0;
    trustee_ = false;
    remain_seconds_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_user_trustee_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_user_trustee];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chair_id;
        break;
      }

      // optional int32 chair_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chair_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_trustee;
        break;
      }

      // optional bool trustee = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trustee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trustee_)));
          set_has_trustee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remain_seconds;
        break;
      }

      // optional int32 remain_seconds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_seconds_)));
          set_has_remain_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_user_trustee_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_user_trustee];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 chair_id = 2;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chair_id(), output);
  }

  // optional bool trustee = 3;
  if (has_trustee()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->trustee(), output);
  }

  // optional int32 remain_seconds = 4;
  if (has_remain_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->remain_seconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_user_trustee_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_user_trustee];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 chair_id = 2;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chair_id(), target);
  }

  // optional bool trustee = 3;
  if (has_trustee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->trustee(), target);
  }

  // optional int32 remain_seconds = 4;
  if (has_remain_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->remain_seconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_user_trustee_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_user_trustee];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 chair_id = 2;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_id());
    }

    // optional bool trustee = 3;
    if (has_trustee()) {
      total_size += 1 + 1;
    }

    // optional int32 remain_seconds = 4;
    if (has_remain_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_seconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_user_trustee_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_user_trustee_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_user_trustee_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_user_trustee_notify::MergeFrom(const packetl2c_user_trustee_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
    if (from.has_trustee()) {
      set_trustee(from.trustee());
    }
    if (from.has_remain_seconds()) {
      set_remain_seconds(from.remain_seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_user_trustee_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_user_trustee_notify::CopyFrom(const packetl2c_user_trustee_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_user_trustee_notify::IsInitialized() const {

  return true;
}

void packetl2c_user_trustee_notify::Swap(packetl2c_user_trustee_notify* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(chair_id_, other->chair_id_);
    std::swap(trustee_, other->trustee_);
    std::swap(remain_seconds_, other->remain_seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_user_trustee_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_user_trustee_notify_descriptor_;
  metadata.reflection = packetl2c_user_trustee_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_ready::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_ready::packetc2l_ready()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_ready::InitAsDefaultInstance() {
}

packetc2l_ready::packetc2l_ready(const packetc2l_ready& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_ready::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10011;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_ready::~packetc2l_ready() {
  SharedDtor();
}

void packetc2l_ready::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_ready::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_ready::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_ready_descriptor_;
}

const packetc2l_ready& packetc2l_ready::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_ready* packetc2l_ready::default_instance_ = NULL;

packetc2l_ready* packetc2l_ready::New() const {
  return new packetc2l_ready;
}

void packetc2l_ready::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10011;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_ready::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ready];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_ready::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ready];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_ready::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ready];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_ready::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ready];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_ready::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_ready* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_ready*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_ready::MergeFrom(const packetc2l_ready& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_ready::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_ready::CopyFrom(const packetc2l_ready& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_ready::IsInitialized() const {

  return true;
}

void packetc2l_ready::Swap(packetc2l_ready* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_ready::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_ready_descriptor_;
  metadata.reflection = packetc2l_ready_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_send_all_playerinfos::kPacketIdFieldNumber;
const int packetl2c_send_all_playerinfos::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_send_all_playerinfos::packetl2c_send_all_playerinfos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_send_all_playerinfos::InitAsDefaultInstance() {
}

packetl2c_send_all_playerinfos::packetl2c_send_all_playerinfos(const packetl2c_send_all_playerinfos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_send_all_playerinfos::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15017;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_send_all_playerinfos::~packetl2c_send_all_playerinfos() {
  SharedDtor();
}

void packetl2c_send_all_playerinfos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_send_all_playerinfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_send_all_playerinfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_send_all_playerinfos_descriptor_;
}

const packetl2c_send_all_playerinfos& packetl2c_send_all_playerinfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_send_all_playerinfos* packetl2c_send_all_playerinfos::default_instance_ = NULL;

packetl2c_send_all_playerinfos* packetl2c_send_all_playerinfos::New() const {
  return new packetl2c_send_all_playerinfos;
}

void packetl2c_send_all_playerinfos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15017;
  }
  player_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_send_all_playerinfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_all_playerinfos];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_info;
        break;
      }

      // repeated .game_land_protocols.msg_player_info player_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_send_all_playerinfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_all_playerinfos];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_land_protocols.msg_player_info player_info = 2;
  for (int i = 0; i < this->player_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_send_all_playerinfos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_all_playerinfos];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_land_protocols.msg_player_info player_info = 2;
  for (int i = 0; i < this->player_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_send_all_playerinfos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_all_playerinfos];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_land_protocols.msg_player_info player_info = 2;
  total_size += 1 * this->player_info_size();
  for (int i = 0; i < this->player_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_send_all_playerinfos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_send_all_playerinfos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_send_all_playerinfos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_send_all_playerinfos::MergeFrom(const packetl2c_send_all_playerinfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_info_.MergeFrom(from.player_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_send_all_playerinfos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_send_all_playerinfos::CopyFrom(const packetl2c_send_all_playerinfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_send_all_playerinfos::IsInitialized() const {

  return true;
}

void packetl2c_send_all_playerinfos::Swap(packetl2c_send_all_playerinfos* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    player_info_.Swap(&other->player_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_send_all_playerinfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_send_all_playerinfos_descriptor_;
  metadata.reflection = packetl2c_send_all_playerinfos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_send_all_card::kPacketIdFieldNumber;
const int packetl2c_send_all_card::kCurrentUserFieldNumber;
const int packetl2c_send_all_card::kUserTrusteeFieldNumber;
const int packetl2c_send_all_card::kCardsInfoFieldNumber;
const int packetl2c_send_all_card::kCardsInfo2FieldNumber;
const int packetl2c_send_all_card::kCardsInfo3FieldNumber;
const int packetl2c_send_all_card::kBackCardFieldNumber;
const int packetl2c_send_all_card::kBotBankerFieldNumber;
const int packetl2c_send_all_card::kRoomIdFieldNumber;
const int packetl2c_send_all_card::kTaskIdFieldNumber;
const int packetl2c_send_all_card::kBotLandlordsFieldNumber;
const int packetl2c_send_all_card::kPlayCntFieldNumber;
const int packetl2c_send_all_card::kFourTakeFieldNumber;
#endif  // !_MSC_VER

packetl2c_send_all_card::packetl2c_send_all_card()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_send_all_card::InitAsDefaultInstance() {
}

packetl2c_send_all_card::packetl2c_send_all_card(const packetl2c_send_all_card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_send_all_card::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15011;
  current_user_ = 0;
  botbanker_ = false;
  room_id_ = 0;
  task_id_ = 0;
  play_cnt_ = 0;
  four_take_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_send_all_card::~packetl2c_send_all_card() {
  SharedDtor();
}

void packetl2c_send_all_card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_send_all_card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_send_all_card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_send_all_card_descriptor_;
}

const packetl2c_send_all_card& packetl2c_send_all_card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_send_all_card* packetl2c_send_all_card::default_instance_ = NULL;

packetl2c_send_all_card* packetl2c_send_all_card::New() const {
  return new packetl2c_send_all_card;
}

void packetl2c_send_all_card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15011;
    current_user_ = 0;
    botbanker_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    room_id_ = 0;
    task_id_ = 0;
    play_cnt_ = 0;
    four_take_ = 0;
  }
  user_trustee_.Clear();
  cards_info_.Clear();
  cards_info2_.Clear();
  cards_info3_.Clear();
  back_card_.Clear();
  bot_landlords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_send_all_card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_all_card];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current_user;
        break;
      }

      // optional int32 current_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_user_)));
          set_has_current_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_trustee;
        break;
      }

      // repeated bool user_trustee = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_trustee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 24, input, this->mutable_user_trustee())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_user_trustee())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_trustee;
        if (input->ExpectTag(32)) goto parse_cards_info;
        break;
      }

      // repeated int32 cards_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_cards_info())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards_info())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cards_info;
        if (input->ExpectTag(40)) goto parse_cards_info2;
        break;
      }

      // repeated int32 cards_info2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards_info2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_cards_info2())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards_info2())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cards_info2;
        if (input->ExpectTag(48)) goto parse_cards_info3;
        break;
      }

      // repeated int32 cards_info3 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards_info3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_cards_info3())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards_info3())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cards_info3;
        if (input->ExpectTag(56)) goto parse_back_card;
        break;
      }

      // repeated int32 back_card = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_back_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_back_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_back_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_back_card;
        if (input->ExpectTag(64)) goto parse_BotBanker;
        break;
      }

      // optional bool BotBanker = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BotBanker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &botbanker_)));
          set_has_botbanker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_task_id;
        break;
      }

      // optional int32 task_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bot_landlords;
        break;
      }

      // repeated int32 bot_landlords = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bot_landlords:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_bot_landlords())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bot_landlords())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bot_landlords;
        if (input->ExpectTag(96)) goto parse_play_cnt;
        break;
      }

      // optional int32 play_cnt = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_play_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &play_cnt_)));
          set_has_play_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_four_take;
        break;
      }

      // optional int32 four_take = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_four_take:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &four_take_)));
          set_has_four_take();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_send_all_card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_all_card];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 current_user = 2;
  if (has_current_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->current_user(), output);
  }

  // repeated bool user_trustee = 3;
  for (int i = 0; i < this->user_trustee_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      3, this->user_trustee(i), output);
  }

  // repeated int32 cards_info = 4;
  for (int i = 0; i < this->cards_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->cards_info(i), output);
  }

  // repeated int32 cards_info2 = 5;
  for (int i = 0; i < this->cards_info2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->cards_info2(i), output);
  }

  // repeated int32 cards_info3 = 6;
  for (int i = 0; i < this->cards_info3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->cards_info3(i), output);
  }

  // repeated int32 back_card = 7;
  for (int i = 0; i < this->back_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->back_card(i), output);
  }

  // optional bool BotBanker = 8;
  if (has_botbanker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->botbanker(), output);
  }

  // optional int32 room_id = 9;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->room_id(), output);
  }

  // optional int32 task_id = 10;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->task_id(), output);
  }

  // repeated int32 bot_landlords = 11;
  for (int i = 0; i < this->bot_landlords_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->bot_landlords(i), output);
  }

  // optional int32 play_cnt = 12;
  if (has_play_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->play_cnt(), output);
  }

  // optional int32 four_take = 13;
  if (has_four_take()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->four_take(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_send_all_card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_all_card];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 current_user = 2;
  if (has_current_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->current_user(), target);
  }

  // repeated bool user_trustee = 3;
  for (int i = 0; i < this->user_trustee_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(3, this->user_trustee(i), target);
  }

  // repeated int32 cards_info = 4;
  for (int i = 0; i < this->cards_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->cards_info(i), target);
  }

  // repeated int32 cards_info2 = 5;
  for (int i = 0; i < this->cards_info2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->cards_info2(i), target);
  }

  // repeated int32 cards_info3 = 6;
  for (int i = 0; i < this->cards_info3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->cards_info3(i), target);
  }

  // repeated int32 back_card = 7;
  for (int i = 0; i < this->back_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->back_card(i), target);
  }

  // optional bool BotBanker = 8;
  if (has_botbanker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->botbanker(), target);
  }

  // optional int32 room_id = 9;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->room_id(), target);
  }

  // optional int32 task_id = 10;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->task_id(), target);
  }

  // repeated int32 bot_landlords = 11;
  for (int i = 0; i < this->bot_landlords_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->bot_landlords(i), target);
  }

  // optional int32 play_cnt = 12;
  if (has_play_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->play_cnt(), target);
  }

  // optional int32 four_take = 13;
  if (has_four_take()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->four_take(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_send_all_card::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_all_card];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 current_user = 2;
    if (has_current_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_user());
    }

    // optional bool BotBanker = 8;
    if (has_botbanker()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 room_id = 9;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int32 task_id = 10;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

    // optional int32 play_cnt = 12;
    if (has_play_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->play_cnt());
    }

    // optional int32 four_take = 13;
    if (has_four_take()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->four_take());
    }

  }
  // repeated bool user_trustee = 3;
  {
    int data_size = 0;
    data_size = 1 * this->user_trustee_size();
    total_size += 1 * this->user_trustee_size() + data_size;
  }

  // repeated int32 cards_info = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_info_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards_info(i));
    }
    total_size += 1 * this->cards_info_size() + data_size;
  }

  // repeated int32 cards_info2 = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_info2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards_info2(i));
    }
    total_size += 1 * this->cards_info2_size() + data_size;
  }

  // repeated int32 cards_info3 = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_info3_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards_info3(i));
    }
    total_size += 1 * this->cards_info3_size() + data_size;
  }

  // repeated int32 back_card = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->back_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->back_card(i));
    }
    total_size += 1 * this->back_card_size() + data_size;
  }

  // repeated int32 bot_landlords = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->bot_landlords_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bot_landlords(i));
    }
    total_size += 1 * this->bot_landlords_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_send_all_card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_send_all_card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_send_all_card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_send_all_card::MergeFrom(const packetl2c_send_all_card& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_trustee_.MergeFrom(from.user_trustee_);
  cards_info_.MergeFrom(from.cards_info_);
  cards_info2_.MergeFrom(from.cards_info2_);
  cards_info3_.MergeFrom(from.cards_info3_);
  back_card_.MergeFrom(from.back_card_);
  bot_landlords_.MergeFrom(from.bot_landlords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_current_user()) {
      set_current_user(from.current_user());
    }
    if (from.has_botbanker()) {
      set_botbanker(from.botbanker());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_play_cnt()) {
      set_play_cnt(from.play_cnt());
    }
    if (from.has_four_take()) {
      set_four_take(from.four_take());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_send_all_card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_send_all_card::CopyFrom(const packetl2c_send_all_card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_send_all_card::IsInitialized() const {

  return true;
}

void packetl2c_send_all_card::Swap(packetl2c_send_all_card* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(current_user_, other->current_user_);
    user_trustee_.Swap(&other->user_trustee_);
    cards_info_.Swap(&other->cards_info_);
    cards_info2_.Swap(&other->cards_info2_);
    cards_info3_.Swap(&other->cards_info3_);
    back_card_.Swap(&other->back_card_);
    std::swap(botbanker_, other->botbanker_);
    std::swap(room_id_, other->room_id_);
    std::swap(task_id_, other->task_id_);
    bot_landlords_.Swap(&other->bot_landlords_);
    std::swap(play_cnt_, other->play_cnt_);
    std::swap(four_take_, other->four_take_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_send_all_card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_send_all_card_descriptor_;
  metadata.reflection = packetl2c_send_all_card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_land_score::kPacketIdFieldNumber;
const int packetc2l_land_score::kScoreFieldNumber;
#endif  // !_MSC_VER

packetc2l_land_score::packetc2l_land_score()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_land_score::InitAsDefaultInstance() {
}

packetc2l_land_score::packetc2l_land_score(const packetc2l_land_score& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_land_score::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10012;
  score_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_land_score::~packetc2l_land_score() {
  SharedDtor();
}

void packetc2l_land_score::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_land_score::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_land_score::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_land_score_descriptor_;
}

const packetc2l_land_score& packetc2l_land_score::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_land_score* packetc2l_land_score::default_instance_ = NULL;

packetc2l_land_score* packetc2l_land_score::New() const {
  return new packetc2l_land_score;
}

void packetc2l_land_score::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10012;
    score_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_land_score::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_land_score];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional bool score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_land_score::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_land_score];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional bool score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_land_score::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_land_score];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional bool score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_land_score::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_land_score];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool score = 2;
    if (has_score()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_land_score::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_land_score* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_land_score*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_land_score::MergeFrom(const packetc2l_land_score& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_land_score::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_land_score::CopyFrom(const packetc2l_land_score& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_land_score::IsInitialized() const {

  return true;
}

void packetc2l_land_score::Swap(packetc2l_land_score* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_land_score::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_land_score_descriptor_;
  metadata.reflection = packetc2l_land_score_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_land_score::kPacketIdFieldNumber;
const int packetl2c_land_score::kLandUserFieldNumber;
const int packetl2c_land_score::kCurrentUserFieldNumber;
const int packetl2c_land_score::kLandScoreFieldNumber;
const int packetl2c_land_score::kCurrentScoreFieldNumber;
#endif  // !_MSC_VER

packetl2c_land_score::packetl2c_land_score()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_land_score::InitAsDefaultInstance() {
}

packetl2c_land_score::packetl2c_land_score(const packetl2c_land_score& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_land_score::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15012;
  land_user_ = 0;
  current_user_ = 0;
  land_score_ = 0;
  current_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_land_score::~packetl2c_land_score() {
  SharedDtor();
}

void packetl2c_land_score::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_land_score::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_land_score::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_land_score_descriptor_;
}

const packetl2c_land_score& packetl2c_land_score::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_land_score* packetl2c_land_score::default_instance_ = NULL;

packetl2c_land_score* packetl2c_land_score::New() const {
  return new packetl2c_land_score;
}

void packetl2c_land_score::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15012;
    land_user_ = 0;
    current_user_ = 0;
    land_score_ = 0;
    current_score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_land_score::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_land_score];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_land_user;
        break;
      }

      // optional int32 land_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_land_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &land_user_)));
          set_has_land_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_current_user;
        break;
      }

      // optional int32 current_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_user_)));
          set_has_current_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_land_score;
        break;
      }

      // optional int32 land_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_land_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &land_score_)));
          set_has_land_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_current_score;
        break;
      }

      // optional int32 current_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_score_)));
          set_has_current_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_land_score::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_land_score];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 land_user = 2;
  if (has_land_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->land_user(), output);
  }

  // optional int32 current_user = 3;
  if (has_current_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->current_user(), output);
  }

  // optional int32 land_score = 4;
  if (has_land_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->land_score(), output);
  }

  // optional int32 current_score = 5;
  if (has_current_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->current_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_land_score::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_land_score];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 land_user = 2;
  if (has_land_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->land_user(), target);
  }

  // optional int32 current_user = 3;
  if (has_current_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->current_user(), target);
  }

  // optional int32 land_score = 4;
  if (has_land_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->land_score(), target);
  }

  // optional int32 current_score = 5;
  if (has_current_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->current_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_land_score::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_land_score];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 land_user = 2;
    if (has_land_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->land_user());
    }

    // optional int32 current_user = 3;
    if (has_current_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_user());
    }

    // optional int32 land_score = 4;
    if (has_land_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->land_score());
    }

    // optional int32 current_score = 5;
    if (has_current_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_land_score::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_land_score* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_land_score*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_land_score::MergeFrom(const packetl2c_land_score& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_land_user()) {
      set_land_user(from.land_user());
    }
    if (from.has_current_user()) {
      set_current_user(from.current_user());
    }
    if (from.has_land_score()) {
      set_land_score(from.land_score());
    }
    if (from.has_current_score()) {
      set_current_score(from.current_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_land_score::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_land_score::CopyFrom(const packetl2c_land_score& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_land_score::IsInitialized() const {

  return true;
}

void packetl2c_land_score::Swap(packetl2c_land_score* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(land_user_, other->land_user_);
    std::swap(current_user_, other->current_user_);
    std::swap(land_score_, other->land_score_);
    std::swap(current_score_, other->current_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_land_score::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_land_score_descriptor_;
  metadata.reflection = packetl2c_land_score_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_game_start::kPacketIdFieldNumber;
const int packetl2c_game_start::kLandUserFieldNumber;
const int packetl2c_game_start::kLandScoreFieldNumber;
const int packetl2c_game_start::kBackCardFieldNumber;
const int packetl2c_game_start::kScoreTimesFieldNumber;
const int packetl2c_game_start::kRemainSecondsFieldNumber;
const int packetl2c_game_start::kNeedTimesFieldNumber;
#endif  // !_MSC_VER

packetl2c_game_start::packetl2c_game_start()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_game_start::InitAsDefaultInstance() {
}

packetl2c_game_start::packetl2c_game_start(const packetl2c_game_start& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_game_start::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15013;
  land_user_ = 0;
  land_score_ = 0;
  score_times_ = 0;
  remain_seconds_ = 0;
  need_times_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_game_start::~packetl2c_game_start() {
  SharedDtor();
}

void packetl2c_game_start::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_game_start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_game_start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_game_start_descriptor_;
}

const packetl2c_game_start& packetl2c_game_start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_game_start* packetl2c_game_start::default_instance_ = NULL;

packetl2c_game_start* packetl2c_game_start::New() const {
  return new packetl2c_game_start;
}

void packetl2c_game_start::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15013;
    land_user_ = 0;
    land_score_ = 0;
    score_times_ = 0;
    remain_seconds_ = 0;
    need_times_ = false;
  }
  back_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_game_start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_land_user;
        break;
      }

      // optional int32 land_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_land_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &land_user_)));
          set_has_land_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_land_score;
        break;
      }

      // optional int32 land_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_land_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &land_score_)));
          set_has_land_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_back_card;
        break;
      }

      // repeated int32 back_card = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_back_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_back_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_back_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_back_card;
        if (input->ExpectTag(40)) goto parse_score_times;
        break;
      }

      // optional int32 score_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_times_)));
          set_has_score_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_remain_seconds;
        break;
      }

      // optional int32 remain_seconds = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_seconds_)));
          set_has_remain_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_need_times;
        break;
      }

      // optional bool need_times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_times_)));
          set_has_need_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_game_start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 land_user = 2;
  if (has_land_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->land_user(), output);
  }

  // optional int32 land_score = 3;
  if (has_land_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->land_score(), output);
  }

  // repeated int32 back_card = 4;
  for (int i = 0; i < this->back_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->back_card(i), output);
  }

  // optional int32 score_times = 5;
  if (has_score_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score_times(), output);
  }

  // optional int32 remain_seconds = 6;
  if (has_remain_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->remain_seconds(), output);
  }

  // optional bool need_times = 7;
  if (has_need_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->need_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_game_start::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 land_user = 2;
  if (has_land_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->land_user(), target);
  }

  // optional int32 land_score = 3;
  if (has_land_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->land_score(), target);
  }

  // repeated int32 back_card = 4;
  for (int i = 0; i < this->back_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->back_card(i), target);
  }

  // optional int32 score_times = 5;
  if (has_score_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->score_times(), target);
  }

  // optional int32 remain_seconds = 6;
  if (has_remain_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->remain_seconds(), target);
  }

  // optional bool need_times = 7;
  if (has_need_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->need_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_game_start::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 land_user = 2;
    if (has_land_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->land_user());
    }

    // optional int32 land_score = 3;
    if (has_land_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->land_score());
    }

    // optional int32 score_times = 5;
    if (has_score_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score_times());
    }

    // optional int32 remain_seconds = 6;
    if (has_remain_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_seconds());
    }

    // optional bool need_times = 7;
    if (has_need_times()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 back_card = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->back_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->back_card(i));
    }
    total_size += 1 * this->back_card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_game_start::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_game_start* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_game_start*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_game_start::MergeFrom(const packetl2c_game_start& from) {
  GOOGLE_CHECK_NE(&from, this);
  back_card_.MergeFrom(from.back_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_land_user()) {
      set_land_user(from.land_user());
    }
    if (from.has_land_score()) {
      set_land_score(from.land_score());
    }
    if (from.has_score_times()) {
      set_score_times(from.score_times());
    }
    if (from.has_remain_seconds()) {
      set_remain_seconds(from.remain_seconds());
    }
    if (from.has_need_times()) {
      set_need_times(from.need_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_game_start::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_game_start::CopyFrom(const packetl2c_game_start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_game_start::IsInitialized() const {

  return true;
}

void packetl2c_game_start::Swap(packetl2c_game_start* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(land_user_, other->land_user_);
    std::swap(land_score_, other->land_score_);
    back_card_.Swap(&other->back_card_);
    std::swap(score_times_, other->score_times_);
    std::swap(remain_seconds_, other->remain_seconds_);
    std::swap(need_times_, other->need_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_game_start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_game_start_descriptor_;
  metadata.reflection = packetl2c_game_start_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_times::kPacketIdFieldNumber;
const int packetc2l_times::kTimesFieldNumber;
#endif  // !_MSC_VER

packetc2l_times::packetc2l_times()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_times::InitAsDefaultInstance() {
}

packetc2l_times::packetc2l_times(const packetc2l_times& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_times::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10014;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_times::~packetc2l_times() {
  SharedDtor();
}

void packetc2l_times::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_times::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_times::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_times_descriptor_;
}

const packetc2l_times& packetc2l_times::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_times* packetc2l_times::default_instance_ = NULL;

packetc2l_times* packetc2l_times::New() const {
  return new packetc2l_times;
}

void packetc2l_times::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10014;
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_times::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_times];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // optional int32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_times::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_times];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_times::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_times];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_times::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_times];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_times::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_times* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_times*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_times::MergeFrom(const packetc2l_times& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_times::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_times::CopyFrom(const packetc2l_times& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_times::IsInitialized() const {

  return true;
}

void packetc2l_times::Swap(packetc2l_times* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_times::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_times_descriptor_;
  metadata.reflection = packetc2l_times_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_times_notify::kPacketIdFieldNumber;
const int packetl2c_times_notify::kChairIdxFieldNumber;
const int packetl2c_times_notify::kTimesFieldNumber;
#endif  // !_MSC_VER

packetl2c_times_notify::packetl2c_times_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_times_notify::InitAsDefaultInstance() {
}

packetl2c_times_notify::packetl2c_times_notify(const packetl2c_times_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_times_notify::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15019;
  chair_idx_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_times_notify::~packetl2c_times_notify() {
  SharedDtor();
}

void packetl2c_times_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_times_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_times_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_times_notify_descriptor_;
}

const packetl2c_times_notify& packetl2c_times_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_times_notify* packetl2c_times_notify::default_instance_ = NULL;

packetl2c_times_notify* packetl2c_times_notify::New() const {
  return new packetl2c_times_notify;
}

void packetl2c_times_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15019;
    chair_idx_ = 0;
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_times_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_times_notify];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chair_idx;
        break;
      }

      // optional int32 chair_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chair_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_idx_)));
          set_has_chair_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_times;
        break;
      }

      // optional int32 times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_times_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_times_notify];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 chair_idx = 2;
  if (has_chair_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chair_idx(), output);
  }

  // optional int32 times = 3;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_times_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_times_notify];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 chair_idx = 2;
  if (has_chair_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chair_idx(), target);
  }

  // optional int32 times = 3;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_times_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_times_notify];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 chair_idx = 2;
    if (has_chair_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_idx());
    }

    // optional int32 times = 3;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_times_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_times_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_times_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_times_notify::MergeFrom(const packetl2c_times_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_chair_idx()) {
      set_chair_idx(from.chair_idx());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_times_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_times_notify::CopyFrom(const packetl2c_times_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_times_notify::IsInitialized() const {

  return true;
}

void packetl2c_times_notify::Swap(packetl2c_times_notify* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(chair_idx_, other->chair_idx_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_times_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_times_notify_descriptor_;
  metadata.reflection = packetl2c_times_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_really_game_start::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_really_game_start::packetl2c_really_game_start()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_really_game_start::InitAsDefaultInstance() {
}

packetl2c_really_game_start::packetl2c_really_game_start(const packetl2c_really_game_start& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_really_game_start::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15020;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_really_game_start::~packetl2c_really_game_start() {
  SharedDtor();
}

void packetl2c_really_game_start::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_really_game_start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_really_game_start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_really_game_start_descriptor_;
}

const packetl2c_really_game_start& packetl2c_really_game_start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_really_game_start* packetl2c_really_game_start::default_instance_ = NULL;

packetl2c_really_game_start* packetl2c_really_game_start::New() const {
  return new packetl2c_really_game_start;
}

void packetl2c_really_game_start::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15020;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_really_game_start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_really_game_start];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_really_game_start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_really_game_start];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_really_game_start::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_really_game_start];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_really_game_start::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_really_game_start];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_really_game_start::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_really_game_start* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_really_game_start*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_really_game_start::MergeFrom(const packetl2c_really_game_start& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_really_game_start::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_really_game_start::CopyFrom(const packetl2c_really_game_start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_really_game_start::IsInitialized() const {

  return true;
}

void packetl2c_really_game_start::Swap(packetl2c_really_game_start* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_really_game_start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_really_game_start_descriptor_;
  metadata.reflection = packetl2c_really_game_start_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_out_card::kPacketIdFieldNumber;
const int packetc2l_out_card::kCardsFieldNumber;
#endif  // !_MSC_VER

packetc2l_out_card::packetc2l_out_card()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_out_card::InitAsDefaultInstance() {
}

packetc2l_out_card::packetc2l_out_card(const packetc2l_out_card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_out_card::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10013;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_out_card::~packetc2l_out_card() {
  SharedDtor();
}

void packetc2l_out_card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_out_card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_out_card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_out_card_descriptor_;
}

const packetc2l_out_card& packetc2l_out_card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_out_card* packetc2l_out_card::default_instance_ = NULL;

packetc2l_out_card* packetc2l_out_card::New() const {
  return new packetc2l_out_card;
}

void packetc2l_out_card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10013;
  }
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_out_card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_out_card];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_out_card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_out_card];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated int32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_out_card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_out_card];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated int32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_out_card::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_out_card];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated int32 cards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_out_card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_out_card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_out_card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_out_card::MergeFrom(const packetc2l_out_card& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_out_card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_out_card::CopyFrom(const packetc2l_out_card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_out_card::IsInitialized() const {

  return true;
}

void packetc2l_out_card::Swap(packetc2l_out_card* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_out_card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_out_card_descriptor_;
  metadata.reflection = packetc2l_out_card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_out_card::kPacketIdFieldNumber;
const int packetl2c_out_card::kOutCardUserFieldNumber;
const int packetl2c_out_card::kCurrentUserFieldNumber;
const int packetl2c_out_card::kBombTimeFieldNumber;
const int packetl2c_out_card::kCardsFieldNumber;
#endif  // !_MSC_VER

packetl2c_out_card::packetl2c_out_card()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_out_card::InitAsDefaultInstance() {
}

packetl2c_out_card::packetl2c_out_card(const packetl2c_out_card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_out_card::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15014;
  out_card_user_ = 0;
  current_user_ = 0;
  bomb_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_out_card::~packetl2c_out_card() {
  SharedDtor();
}

void packetl2c_out_card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_out_card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_out_card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_out_card_descriptor_;
}

const packetl2c_out_card& packetl2c_out_card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_out_card* packetl2c_out_card::default_instance_ = NULL;

packetl2c_out_card* packetl2c_out_card::New() const {
  return new packetl2c_out_card;
}

void packetl2c_out_card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15014;
    out_card_user_ = 0;
    current_user_ = 0;
    bomb_time_ = 0;
  }
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_out_card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_out_card];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_out_card_user;
        break;
      }

      // optional int32 out_card_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_card_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_card_user_)));
          set_has_out_card_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_current_user;
        break;
      }

      // optional int32 current_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_user_)));
          set_has_current_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bomb_time;
        break;
      }

      // optional int32 bomb_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bomb_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bomb_time_)));
          set_has_bomb_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_out_card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_out_card];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 out_card_user = 2;
  if (has_out_card_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->out_card_user(), output);
  }

  // optional int32 current_user = 3;
  if (has_current_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->current_user(), output);
  }

  // optional int32 bomb_time = 4;
  if (has_bomb_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bomb_time(), output);
  }

  // repeated int32 cards = 5;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_out_card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_out_card];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 out_card_user = 2;
  if (has_out_card_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->out_card_user(), target);
  }

  // optional int32 current_user = 3;
  if (has_current_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->current_user(), target);
  }

  // optional int32 bomb_time = 4;
  if (has_bomb_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bomb_time(), target);
  }

  // repeated int32 cards = 5;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_out_card::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_out_card];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 out_card_user = 2;
    if (has_out_card_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_card_user());
    }

    // optional int32 current_user = 3;
    if (has_current_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_user());
    }

    // optional int32 bomb_time = 4;
    if (has_bomb_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bomb_time());
    }

  }
  // repeated int32 cards = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_out_card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_out_card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_out_card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_out_card::MergeFrom(const packetl2c_out_card& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_out_card_user()) {
      set_out_card_user(from.out_card_user());
    }
    if (from.has_current_user()) {
      set_current_user(from.current_user());
    }
    if (from.has_bomb_time()) {
      set_bomb_time(from.bomb_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_out_card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_out_card::CopyFrom(const packetl2c_out_card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_out_card::IsInitialized() const {

  return true;
}

void packetl2c_out_card::Swap(packetl2c_out_card* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(out_card_user_, other->out_card_user_);
    std::swap(current_user_, other->current_user_);
    std::swap(bomb_time_, other->bomb_time_);
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_out_card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_out_card_descriptor_;
  metadata.reflection = packetl2c_out_card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_pass_card::kPacketIdFieldNumber;
const int packetl2c_pass_card::kPassCardUserFieldNumber;
const int packetl2c_pass_card::kCurrentUserFieldNumber;
const int packetl2c_pass_card::kNewTurnFieldNumber;
#endif  // !_MSC_VER

packetl2c_pass_card::packetl2c_pass_card()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_pass_card::InitAsDefaultInstance() {
}

packetl2c_pass_card::packetl2c_pass_card(const packetl2c_pass_card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_pass_card::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15015;
  pass_card_user_ = 0;
  current_user_ = 0;
  new_turn_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_pass_card::~packetl2c_pass_card() {
  SharedDtor();
}

void packetl2c_pass_card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_pass_card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_pass_card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_pass_card_descriptor_;
}

const packetl2c_pass_card& packetl2c_pass_card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_pass_card* packetl2c_pass_card::default_instance_ = NULL;

packetl2c_pass_card* packetl2c_pass_card::New() const {
  return new packetl2c_pass_card;
}

void packetl2c_pass_card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15015;
    pass_card_user_ = 0;
    current_user_ = 0;
    new_turn_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_pass_card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_pass_card];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass_card_user;
        break;
      }

      // optional int32 pass_card_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_card_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_card_user_)));
          set_has_pass_card_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_current_user;
        break;
      }

      // optional int32 current_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_user_)));
          set_has_current_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_new_turn;
        break;
      }

      // optional bool new_turn = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_turn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new_turn_)));
          set_has_new_turn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_pass_card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_pass_card];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 pass_card_user = 2;
  if (has_pass_card_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass_card_user(), output);
  }

  // optional int32 current_user = 3;
  if (has_current_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->current_user(), output);
  }

  // optional bool new_turn = 4;
  if (has_new_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->new_turn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_pass_card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_pass_card];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 pass_card_user = 2;
  if (has_pass_card_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass_card_user(), target);
  }

  // optional int32 current_user = 3;
  if (has_current_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->current_user(), target);
  }

  // optional bool new_turn = 4;
  if (has_new_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->new_turn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_pass_card::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_pass_card];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 pass_card_user = 2;
    if (has_pass_card_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_card_user());
    }

    // optional int32 current_user = 3;
    if (has_current_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_user());
    }

    // optional bool new_turn = 4;
    if (has_new_turn()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_pass_card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_pass_card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_pass_card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_pass_card::MergeFrom(const packetl2c_pass_card& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_pass_card_user()) {
      set_pass_card_user(from.pass_card_user());
    }
    if (from.has_current_user()) {
      set_current_user(from.current_user());
    }
    if (from.has_new_turn()) {
      set_new_turn(from.new_turn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_pass_card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_pass_card::CopyFrom(const packetl2c_pass_card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_pass_card::IsInitialized() const {

  return true;
}

void packetl2c_pass_card::Swap(packetl2c_pass_card* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(pass_card_user_, other->pass_card_user_);
    std::swap(current_user_, other->current_user_);
    std::swap(new_turn_, other->new_turn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_pass_card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_pass_card_descriptor_;
  metadata.reflection = packetl2c_pass_card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_game_end::kPacketIdFieldNumber;
const int packetl2c_game_end::kBombTimeFieldNumber;
const int packetl2c_game_end::kGameScoreFieldNumber;
const int packetl2c_game_end::kLeaveGameFieldNumber;
const int packetl2c_game_end::kSpringFieldNumber;
const int packetl2c_game_end::kCards1FieldNumber;
const int packetl2c_game_end::kCards2FieldNumber;
const int packetl2c_game_end::kCards3FieldNumber;
const int packetl2c_game_end::kLimitedFieldNumber;
const int packetl2c_game_end::kTaskOkFieldNumber;
const int packetl2c_game_end::kLowLimitedFieldNumber;
#endif  // !_MSC_VER

packetl2c_game_end::packetl2c_game_end()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_game_end::InitAsDefaultInstance() {
}

packetl2c_game_end::packetl2c_game_end(const packetl2c_game_end& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_game_end::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15016;
  spring_ = false;
  task_ok_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_game_end::~packetl2c_game_end() {
  SharedDtor();
}

void packetl2c_game_end::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_game_end::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_game_end::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_game_end_descriptor_;
}

const packetl2c_game_end& packetl2c_game_end::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_game_end* packetl2c_game_end::default_instance_ = NULL;

packetl2c_game_end* packetl2c_game_end::New() const {
  return new packetl2c_game_end;
}

void packetl2c_game_end::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15016;
    spring_ = false;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    task_ok_ = 0;
  }
  bomb_time_.Clear();
  game_score_.Clear();
  leave_game_.Clear();
  cards1_.Clear();
  cards2_.Clear();
  cards3_.Clear();
  limited_.Clear();
  low_limited_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_game_end::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bomb_time;
        break;
      }

      // repeated int32 bomb_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bomb_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_bomb_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bomb_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bomb_time;
        if (input->ExpectTag(24)) goto parse_game_score;
        break;
      }

      // repeated int32 game_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_game_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_game_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_score;
        if (input->ExpectTag(32)) goto parse_leave_game;
        break;
      }

      // repeated bool leave_game = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leave_game:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 32, input, this->mutable_leave_game())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_leave_game())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leave_game;
        if (input->ExpectTag(40)) goto parse_spring;
        break;
      }

      // optional bool spring = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spring_)));
          set_has_spring();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cards1;
        break;
      }

      // repeated int32 cards1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_cards1())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards1())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cards1;
        if (input->ExpectTag(56)) goto parse_cards2;
        break;
      }

      // repeated int32 cards2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_cards2())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards2())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cards2;
        if (input->ExpectTag(64)) goto parse_cards3;
        break;
      }

      // repeated int32 cards3 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_cards3())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards3())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cards3;
        if (input->ExpectTag(72)) goto parse_limited;
        break;
      }

      // repeated bool limited = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 72, input, this->mutable_limited())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_limited())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_limited;
        if (input->ExpectTag(80)) goto parse_task_ok;
        break;
      }

      // optional int32 task_ok = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_ok_)));
          set_has_task_ok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_low_limited;
        break;
      }

      // repeated bool low_limited = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_low_limited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 88, input, this->mutable_low_limited())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_low_limited())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_low_limited;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_game_end::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated int32 bomb_time = 2;
  for (int i = 0; i < this->bomb_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->bomb_time(i), output);
  }

  // repeated int32 game_score = 3;
  for (int i = 0; i < this->game_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->game_score(i), output);
  }

  // repeated bool leave_game = 4;
  for (int i = 0; i < this->leave_game_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      4, this->leave_game(i), output);
  }

  // optional bool spring = 5;
  if (has_spring()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->spring(), output);
  }

  // repeated int32 cards1 = 6;
  for (int i = 0; i < this->cards1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->cards1(i), output);
  }

  // repeated int32 cards2 = 7;
  for (int i = 0; i < this->cards2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->cards2(i), output);
  }

  // repeated int32 cards3 = 8;
  for (int i = 0; i < this->cards3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->cards3(i), output);
  }

  // repeated bool limited = 9;
  for (int i = 0; i < this->limited_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      9, this->limited(i), output);
  }

  // optional int32 task_ok = 10;
  if (has_task_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->task_ok(), output);
  }

  // repeated bool low_limited = 11;
  for (int i = 0; i < this->low_limited_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      11, this->low_limited(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_game_end::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated int32 bomb_time = 2;
  for (int i = 0; i < this->bomb_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->bomb_time(i), target);
  }

  // repeated int32 game_score = 3;
  for (int i = 0; i < this->game_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->game_score(i), target);
  }

  // repeated bool leave_game = 4;
  for (int i = 0; i < this->leave_game_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(4, this->leave_game(i), target);
  }

  // optional bool spring = 5;
  if (has_spring()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->spring(), target);
  }

  // repeated int32 cards1 = 6;
  for (int i = 0; i < this->cards1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->cards1(i), target);
  }

  // repeated int32 cards2 = 7;
  for (int i = 0; i < this->cards2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->cards2(i), target);
  }

  // repeated int32 cards3 = 8;
  for (int i = 0; i < this->cards3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->cards3(i), target);
  }

  // repeated bool limited = 9;
  for (int i = 0; i < this->limited_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(9, this->limited(i), target);
  }

  // optional int32 task_ok = 10;
  if (has_task_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->task_ok(), target);
  }

  // repeated bool low_limited = 11;
  for (int i = 0; i < this->low_limited_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(11, this->low_limited(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_game_end::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool spring = 5;
    if (has_spring()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 task_ok = 10;
    if (has_task_ok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_ok());
    }

  }
  // repeated int32 bomb_time = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->bomb_time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bomb_time(i));
    }
    total_size += 1 * this->bomb_time_size() + data_size;
  }

  // repeated int32 game_score = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->game_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->game_score(i));
    }
    total_size += 1 * this->game_score_size() + data_size;
  }

  // repeated bool leave_game = 4;
  {
    int data_size = 0;
    data_size = 1 * this->leave_game_size();
    total_size += 1 * this->leave_game_size() + data_size;
  }

  // repeated int32 cards1 = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards1(i));
    }
    total_size += 1 * this->cards1_size() + data_size;
  }

  // repeated int32 cards2 = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards2(i));
    }
    total_size += 1 * this->cards2_size() + data_size;
  }

  // repeated int32 cards3 = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards3_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards3(i));
    }
    total_size += 1 * this->cards3_size() + data_size;
  }

  // repeated bool limited = 9;
  {
    int data_size = 0;
    data_size = 1 * this->limited_size();
    total_size += 1 * this->limited_size() + data_size;
  }

  // repeated bool low_limited = 11;
  {
    int data_size = 0;
    data_size = 1 * this->low_limited_size();
    total_size += 1 * this->low_limited_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_game_end::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_game_end* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_game_end*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_game_end::MergeFrom(const packetl2c_game_end& from) {
  GOOGLE_CHECK_NE(&from, this);
  bomb_time_.MergeFrom(from.bomb_time_);
  game_score_.MergeFrom(from.game_score_);
  leave_game_.MergeFrom(from.leave_game_);
  cards1_.MergeFrom(from.cards1_);
  cards2_.MergeFrom(from.cards2_);
  cards3_.MergeFrom(from.cards3_);
  limited_.MergeFrom(from.limited_);
  low_limited_.MergeFrom(from.low_limited_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_spring()) {
      set_spring(from.spring());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_task_ok()) {
      set_task_ok(from.task_ok());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_game_end::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_game_end::CopyFrom(const packetl2c_game_end& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_game_end::IsInitialized() const {

  return true;
}

void packetl2c_game_end::Swap(packetl2c_game_end* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    bomb_time_.Swap(&other->bomb_time_);
    game_score_.Swap(&other->game_score_);
    leave_game_.Swap(&other->leave_game_);
    std::swap(spring_, other->spring_);
    cards1_.Swap(&other->cards1_);
    cards2_.Swap(&other->cards2_);
    cards3_.Swap(&other->cards3_);
    limited_.Swap(&other->limited_);
    std::swap(task_ok_, other->task_ok_);
    low_limited_.Swap(&other->low_limited_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_game_end::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_game_end_descriptor_;
  metadata.reflection = packetl2c_game_end_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_game_notify::kPacketIdFieldNumber;
const int packetl2c_game_notify::kNotifyTypeFieldNumber;
#endif  // !_MSC_VER

packetl2c_game_notify::packetl2c_game_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_game_notify::InitAsDefaultInstance() {
}

packetl2c_game_notify::packetl2c_game_notify(const packetl2c_game_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_game_notify::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15018;
  notify_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_game_notify::~packetl2c_game_notify() {
  SharedDtor();
}

void packetl2c_game_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_game_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_game_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_game_notify_descriptor_;
}

const packetl2c_game_notify& packetl2c_game_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_game_notify* packetl2c_game_notify::default_instance_ = NULL;

packetl2c_game_notify* packetl2c_game_notify::New() const {
  return new packetl2c_game_notify;
}

void packetl2c_game_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15018;
    notify_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_game_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_notify];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_notify_type;
        break;
      }

      // optional .game_land_protocols.e_notify_type notify_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notify_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_notify_type_IsValid(value)) {
            set_notify_type(static_cast< ::game_land_protocols::e_notify_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_game_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_notify];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_land_protocols.e_notify_type notify_type = 2;
  if (has_notify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->notify_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_game_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_notify];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_land_protocols.e_notify_type notify_type = 2;
  if (has_notify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->notify_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_game_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_notify];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_land_protocols.e_notify_type notify_type = 2;
    if (has_notify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->notify_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_game_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_game_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_game_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_game_notify::MergeFrom(const packetl2c_game_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_notify_type()) {
      set_notify_type(from.notify_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_game_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_game_notify::CopyFrom(const packetl2c_game_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_game_notify::IsInitialized() const {

  return true;
}

void packetl2c_game_notify::Swap(packetl2c_game_notify* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(notify_type_, other->notify_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_game_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_game_notify_descriptor_;
  metadata.reflection = packetl2c_game_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_report::kPacketIdFieldNumber;
const int packetc2l_report::kChairIdxFieldNumber;
#endif  // !_MSC_VER

packetc2l_report::packetc2l_report()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_report::InitAsDefaultInstance() {
}

packetc2l_report::packetc2l_report(const packetc2l_report& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_report::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10015;
  chair_idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_report::~packetc2l_report() {
  SharedDtor();
}

void packetc2l_report::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_report::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_report_descriptor_;
}

const packetc2l_report& packetc2l_report::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_report* packetc2l_report::default_instance_ = NULL;

packetc2l_report* packetc2l_report::New() const {
  return new packetc2l_report;
}

void packetc2l_report::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10015;
    chair_idx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_report];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chair_idx;
        break;
      }

      // optional int32 chair_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chair_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_idx_)));
          set_has_chair_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_report];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 chair_idx = 2;
  if (has_chair_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chair_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_report::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_report];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 chair_idx = 2;
  if (has_chair_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chair_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_report::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_report];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 chair_idx = 2;
    if (has_chair_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_report::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_report* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_report*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_report::MergeFrom(const packetc2l_report& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_chair_idx()) {
      set_chair_idx(from.chair_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_report::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_report::CopyFrom(const packetc2l_report& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_report::IsInitialized() const {

  return true;
}

void packetc2l_report::Swap(packetc2l_report* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(chair_idx_, other->chair_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_report::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_report_descriptor_;
  metadata.reflection = packetc2l_report_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_report_res::kPacketIdFieldNumber;
const int packetl2c_report_res::kChairIdxFieldNumber;
#endif  // !_MSC_VER

packetl2c_report_res::packetl2c_report_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_report_res::InitAsDefaultInstance() {
}

packetl2c_report_res::packetl2c_report_res(const packetl2c_report_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_report_res::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15021;
  chair_idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_report_res::~packetl2c_report_res() {
  SharedDtor();
}

void packetl2c_report_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_report_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_report_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_report_res_descriptor_;
}

const packetl2c_report_res& packetl2c_report_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_report_res* packetl2c_report_res::default_instance_ = NULL;

packetl2c_report_res* packetl2c_report_res::New() const {
  return new packetl2c_report_res;
}

void packetl2c_report_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15021;
    chair_idx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_report_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_report_res];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_land_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_land_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chair_idx;
        break;
      }

      // optional int32 chair_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chair_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_idx_)));
          set_has_chair_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_report_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_report_res];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 chair_idx = 2;
  if (has_chair_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chair_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_report_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_report_res];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 chair_idx = 2;
  if (has_chair_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chair_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_report_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_report_res];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 chair_idx = 2;
    if (has_chair_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_report_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_report_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_report_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_report_res::MergeFrom(const packetl2c_report_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_chair_idx()) {
      set_chair_idx(from.chair_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_report_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_report_res::CopyFrom(const packetl2c_report_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_report_res::IsInitialized() const {

  return true;
}

void packetl2c_report_res::Swap(packetl2c_report_res* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(chair_idx_, other->chair_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_report_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_report_res_descriptor_;
  metadata.reflection = packetl2c_report_res_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_land_protocols

// @@protoc_insertion_point(global_scope)
