// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_protocol.proto

#ifndef PROTOBUF_client2world_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_client2world_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client2world_msg_type.pb.h"
#include "msg_type_def.pb.h"
#include "msg_info_def.pb.h"
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

class packetc2w_player_connect;
class packetw2c_player_connect_result;
class packet_c2w_timesync;
class packet_w2c_timesync_result;
class packetc2w_ask_login;
class msg_game_info;
class packetw2c_ask_login_result;
class packetc2w_enter_game;
class packetw2c_enter_game_result;
class packetc2w_gm_command;
class packetw2c_gm_command_result;
class packetc2w_leave_game;
class packetw2c_leave_game_result;
class packetw2c_player_kick;
class packetc2w_get_gamelist;
class packetw2c_get_gamelist_result;
class packetc2w_ac_bind;
class packetw2c_ac_bind_result;
class packetc2w_ac_transfer;
class packetw2c_ac_transfer_result;
class packetc2w_ac_url;
class packetw2c_ac_url_result;
class packetc2w_ask_check_payment;
class packetc2w_ask_test_payment;
class packetw2c_ask_check_payment_result;
class packetw2c_bind_reward;
class msg_some_info;
class packetc2w_ask_message;
class packetw2c_ask_message_result;
class packetc2w_delete_message;
class packetw2c_delete_message_result;
class packetc2w_read_message;
class packetw2c_read_message_result;
class packetw2c_picture_verify;
class packetc2w_picture_verify_result;
class packetc2w_ask_report_account;
class packetw2c_ask_report_account_result;
class msg_faq_def;
class packetc2w_req_faq;
class packetw2c_req_faq_result;
class packetc2w_req_faq_detail;
class packetw2c_req_faq_detail_result;
class packetc2w_req_cs_contact;
class packetw2c_req_cs_contact_result;
class packetc2w_bind_bank_card;
class packetw2c_bind_bank_card_result;
class packetc2w_req_bank_card;
class packetw2c_req_bank_card_result;
class msg_suggest;
class packetc2w_suggestion;
class packetw2c_suggestion_result;
class packetc2w_req_suggest;
class packetw2c_req_suggest_result;
class msg_bank_info;
class packetc2w_req_bank_list;
class packetw2c_req_bank_list_result;
class packetc2w_req_sync_gold;
class packetw2c_req_sync_gold_result;

// ===================================================================

class packetc2w_player_connect : public ::google::protobuf::Message {
 public:
  packetc2w_player_connect();
  virtual ~packetc2w_player_connect();

  packetc2w_player_connect(const packetc2w_player_connect& from);

  inline packetc2w_player_connect& operator=(const packetc2w_player_connect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_player_connect& default_instance();

  void Swap(packetc2w_player_connect* other);

  // implements Message ----------------------------------------------

  packetc2w_player_connect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_player_connect& from);
  void MergeFrom(const packetc2w_player_connect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_connect];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional string sign = 4;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 4;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional string platform = 5;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 5;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // optional string login_platform = 6;
  inline bool has_login_platform() const;
  inline void clear_login_platform();
  static const int kLoginPlatformFieldNumber = 6;
  inline const ::std::string& login_platform() const;
  inline void set_login_platform(const ::std::string& value);
  inline void set_login_platform(const char* value);
  inline void set_login_platform(const char* value, size_t size);
  inline ::std::string* mutable_login_platform();
  inline ::std::string* release_login_platform();
  inline void set_allocated_login_platform(::std::string* login_platform);

  // optional string machine_code = 7;
  inline bool has_machine_code() const;
  inline void clear_machine_code();
  static const int kMachineCodeFieldNumber = 7;
  inline const ::std::string& machine_code() const;
  inline void set_machine_code(const ::std::string& value);
  inline void set_machine_code(const char* value);
  inline void set_machine_code(const char* value, size_t size);
  inline ::std::string* mutable_machine_code();
  inline ::std::string* release_machine_code();
  inline void set_allocated_machine_code(::std::string* machine_code);

  // optional string machine_type = 8;
  inline bool has_machine_type() const;
  inline void clear_machine_type();
  static const int kMachineTypeFieldNumber = 8;
  inline const ::std::string& machine_type() const;
  inline void set_machine_type(const ::std::string& value);
  inline void set_machine_type(const char* value);
  inline void set_machine_type(const char* value, size_t size);
  inline ::std::string* mutable_machine_type();
  inline ::std::string* release_machine_type();
  inline void set_allocated_machine_type(::std::string* machine_type);

  // optional int32 channelid = 9;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 9;
  inline ::google::protobuf::int32 channelid() const;
  inline void set_channelid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_player_connect)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_login_platform();
  inline void clear_has_login_platform();
  inline void set_has_machine_code();
  inline void clear_has_machine_code();
  inline void set_has_machine_type();
  inline void clear_has_machine_type();
  inline void set_has_channelid();
  inline void clear_has_channelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* token_;
  ::std::string* sign_;
  ::std::string* platform_;
  int packet_id_;
  ::google::protobuf::int32 channelid_;
  ::std::string* login_platform_;
  ::std::string* machine_code_;
  ::std::string* machine_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_player_connect* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_player_connect_result : public ::google::protobuf::Message {
 public:
  packetw2c_player_connect_result();
  virtual ~packetw2c_player_connect_result();

  packetw2c_player_connect_result(const packetw2c_player_connect_result& from);

  inline packetw2c_player_connect_result& operator=(const packetw2c_player_connect_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_player_connect_result& default_instance();

  void Swap(packetw2c_player_connect_result* other);

  // implements Message ----------------------------------------------

  packetw2c_player_connect_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_player_connect_result& from);
  void MergeFrom(const packetw2c_player_connect_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_connect_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 result = 2 [default = 2];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 servertime = 3;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServertimeFieldNumber = 3;
  inline ::google::protobuf::int32 servertime() const;
  inline void set_servertime(::google::protobuf::int32 value);

  // optional int32 gaming = 4 [default = 0];
  inline bool has_gaming() const;
  inline void clear_gaming();
  static const int kGamingFieldNumber = 4;
  inline ::google::protobuf::int32 gaming() const;
  inline void set_gaming(::google::protobuf::int32 value);

  // optional string ver = 5;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 5;
  inline const ::std::string& ver() const;
  inline void set_ver(const ::std::string& value);
  inline void set_ver(const char* value);
  inline void set_ver(const char* value, size_t size);
  inline ::std::string* mutable_ver();
  inline ::std::string* release_ver();
  inline void set_allocated_ver(::std::string* ver);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_player_connect_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_servertime();
  inline void clear_has_servertime();
  inline void set_has_gaming();
  inline void clear_has_gaming();
  inline void set_has_ver();
  inline void clear_has_ver();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 servertime_;
  ::google::protobuf::int32 gaming_;
  ::std::string* ver_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_player_connect_result* default_instance_;
};
// -------------------------------------------------------------------

class packet_c2w_timesync : public ::google::protobuf::Message {
 public:
  packet_c2w_timesync();
  virtual ~packet_c2w_timesync();

  packet_c2w_timesync(const packet_c2w_timesync& from);

  inline packet_c2w_timesync& operator=(const packet_c2w_timesync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_c2w_timesync& default_instance();

  void Swap(packet_c2w_timesync* other);

  // implements Message ----------------------------------------------

  packet_c2w_timesync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_c2w_timesync& from);
  void MergeFrom(const packet_c2w_timesync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_timesync];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packet_c2w_timesync)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_c2w_timesync* default_instance_;
};
// -------------------------------------------------------------------

class packet_w2c_timesync_result : public ::google::protobuf::Message {
 public:
  packet_w2c_timesync_result();
  virtual ~packet_w2c_timesync_result();

  packet_w2c_timesync_result(const packet_w2c_timesync_result& from);

  inline packet_w2c_timesync_result& operator=(const packet_w2c_timesync_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_w2c_timesync_result& default_instance();

  void Swap(packet_w2c_timesync_result* other);

  // implements Message ----------------------------------------------

  packet_w2c_timesync_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_w2c_timesync_result& from);
  void MergeFrom(const packet_w2c_timesync_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_timesync_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 server_time = 2;
  inline bool has_server_time() const;
  inline void clear_server_time();
  static const int kServerTimeFieldNumber = 2;
  inline ::google::protobuf::int32 server_time() const;
  inline void set_server_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packet_w2c_timesync_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_server_time();
  inline void clear_has_server_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 server_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_w2c_timesync_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_ask_login : public ::google::protobuf::Message {
 public:
  packetc2w_ask_login();
  virtual ~packetc2w_ask_login();

  packetc2w_ask_login(const packetc2w_ask_login& from);

  inline packetc2w_ask_login& operator=(const packetc2w_ask_login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_ask_login& default_instance();

  void Swap(packetc2w_ask_login* other);

  // implements Message ----------------------------------------------

  packetc2w_ask_login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_ask_login& from);
  void MergeFrom(const packetc2w_ask_login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_asklogin];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_ask_login)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_ask_login* default_instance_;
};
// -------------------------------------------------------------------

class msg_game_info : public ::google::protobuf::Message {
 public:
  msg_game_info();
  virtual ~msg_game_info();

  msg_game_info(const msg_game_info& from);

  inline msg_game_info& operator=(const msg_game_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_game_info& default_instance();

  void Swap(msg_game_info* other);

  // implements Message ----------------------------------------------

  msg_game_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_game_info& from);
  void MergeFrom(const msg_game_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 gameid = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // optional int32 gamever = 2;
  inline bool has_gamever() const;
  inline void clear_gamever();
  static const int kGameverFieldNumber = 2;
  inline ::google::protobuf::int32 gamever() const;
  inline void set_gamever(::google::protobuf::int32 value);

  // optional int32 curOnlineNum = 3;
  inline bool has_curonlinenum() const;
  inline void clear_curonlinenum();
  static const int kCurOnlineNumFieldNumber = 3;
  inline ::google::protobuf::int32 curonlinenum() const;
  inline void set_curonlinenum(::google::protobuf::int32 value);

  // optional bool isHot = 4;
  inline bool has_ishot() const;
  inline void clear_ishot();
  static const int kIsHotFieldNumber = 4;
  inline bool ishot() const;
  inline void set_ishot(bool value);

  // optional int32 sort = 5;
  inline bool has_sort() const;
  inline void clear_sort();
  static const int kSortFieldNumber = 5;
  inline ::google::protobuf::int32 sort() const;
  inline void set_sort(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.msg_game_info)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_gamever();
  inline void clear_has_gamever();
  inline void set_has_curonlinenum();
  inline void clear_has_curonlinenum();
  inline void set_has_ishot();
  inline void clear_has_ishot();
  inline void set_has_sort();
  inline void clear_has_sort();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 gamever_;
  ::google::protobuf::int32 curonlinenum_;
  bool ishot_;
  ::google::protobuf::int32 sort_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_game_info* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_ask_login_result : public ::google::protobuf::Message {
 public:
  packetw2c_ask_login_result();
  virtual ~packetw2c_ask_login_result();

  packetw2c_ask_login_result(const packetw2c_ask_login_result& from);

  inline packetw2c_ask_login_result& operator=(const packetw2c_ask_login_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_ask_login_result& default_instance();

  void Swap(packetw2c_ask_login_result* other);

  // implements Message ----------------------------------------------

  packetw2c_ask_login_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_ask_login_result& from);
  void MergeFrom(const packetw2c_ask_login_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_asklogin_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_info_def.msg_account_info account_info = 2;
  inline bool has_account_info() const;
  inline void clear_account_info();
  static const int kAccountInfoFieldNumber = 2;
  inline const ::msg_info_def::msg_account_info& account_info() const;
  inline ::msg_info_def::msg_account_info* mutable_account_info();
  inline ::msg_info_def::msg_account_info* release_account_info();
  inline void set_allocated_account_info(::msg_info_def::msg_account_info* account_info);

  // repeated .client2world_protocols.msg_game_info game_list = 3;
  inline int game_list_size() const;
  inline void clear_game_list();
  static const int kGameListFieldNumber = 3;
  inline const ::client2world_protocols::msg_game_info& game_list(int index) const;
  inline ::client2world_protocols::msg_game_info* mutable_game_list(int index);
  inline ::client2world_protocols::msg_game_info* add_game_list();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_game_info >&
      game_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_game_info >*
      mutable_game_list();

  // optional int32 gaming = 4 [default = 0];
  inline bool has_gaming() const;
  inline void clear_gaming();
  static const int kGamingFieldNumber = 4;
  inline ::google::protobuf::int32 gaming() const;
  inline void set_gaming(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_ask_login_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_account_info();
  inline void clear_has_account_info();
  inline void set_has_gaming();
  inline void clear_has_gaming();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::msg_info_def::msg_account_info* account_info_;
  int packet_id_;
  ::google::protobuf::int32 gaming_;
  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_game_info > game_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_ask_login_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_enter_game : public ::google::protobuf::Message {
 public:
  packetc2w_enter_game();
  virtual ~packetc2w_enter_game();

  packetc2w_enter_game(const packetc2w_enter_game& from);

  inline packetc2w_enter_game& operator=(const packetc2w_enter_game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_enter_game& default_instance();

  void Swap(packetc2w_enter_game* other);

  // implements Message ----------------------------------------------

  packetc2w_enter_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_enter_game& from);
  void MergeFrom(const packetc2w_enter_game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_enter_game];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 gameid = 2;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 2;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // optional int32 gamever = 3;
  inline bool has_gamever() const;
  inline void clear_gamever();
  static const int kGameverFieldNumber = 3;
  inline ::google::protobuf::int32 gamever() const;
  inline void set_gamever(::google::protobuf::int32 value);

  // optional int32 roomid = 4 [default = -1];
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 4;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_enter_game)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_gamever();
  inline void clear_has_gamever();
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 gamever_;
  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_enter_game* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_enter_game_result : public ::google::protobuf::Message {
 public:
  packetw2c_enter_game_result();
  virtual ~packetw2c_enter_game_result();

  packetw2c_enter_game_result(const packetw2c_enter_game_result& from);

  inline packetw2c_enter_game_result& operator=(const packetw2c_enter_game_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_enter_game_result& default_instance();

  void Swap(packetw2c_enter_game_result* other);

  // implements Message ----------------------------------------------

  packetw2c_enter_game_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_enter_game_result& from);
  void MergeFrom(const packetw2c_enter_game_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_enter_game_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_enter_game_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_enter_game_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_gm_command : public ::google::protobuf::Message {
 public:
  packetc2w_gm_command();
  virtual ~packetc2w_gm_command();

  packetc2w_gm_command(const packetc2w_gm_command& from);

  inline packetc2w_gm_command& operator=(const packetc2w_gm_command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_gm_command& default_instance();

  void Swap(packetc2w_gm_command* other);

  // implements Message ----------------------------------------------

  packetc2w_gm_command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_gm_command& from);
  void MergeFrom(const packetc2w_gm_command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_command];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string command = 2;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 2;
  inline const ::std::string& command() const;
  inline void set_command(const ::std::string& value);
  inline void set_command(const char* value);
  inline void set_command(const char* value, size_t size);
  inline ::std::string* mutable_command();
  inline ::std::string* release_command();
  inline void set_allocated_command(::std::string* command);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_gm_command)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_command();
  inline void clear_has_command();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* command_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_gm_command* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_gm_command_result : public ::google::protobuf::Message {
 public:
  packetw2c_gm_command_result();
  virtual ~packetw2c_gm_command_result();

  packetw2c_gm_command_result(const packetw2c_gm_command_result& from);

  inline packetw2c_gm_command_result& operator=(const packetw2c_gm_command_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_gm_command_result& default_instance();

  void Swap(packetw2c_gm_command_result* other);

  // implements Message ----------------------------------------------

  packetw2c_gm_command_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_gm_command_result& from);
  void MergeFrom(const packetw2c_gm_command_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_command_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_gm_command_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_gm_command_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_leave_game : public ::google::protobuf::Message {
 public:
  packetc2w_leave_game();
  virtual ~packetc2w_leave_game();

  packetc2w_leave_game(const packetc2w_leave_game& from);

  inline packetc2w_leave_game& operator=(const packetc2w_leave_game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_leave_game& default_instance();

  void Swap(packetc2w_leave_game* other);

  // implements Message ----------------------------------------------

  packetc2w_leave_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_leave_game& from);
  void MergeFrom(const packetc2w_leave_game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_leave_game];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_leave_game)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_leave_game* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_leave_game_result : public ::google::protobuf::Message {
 public:
  packetw2c_leave_game_result();
  virtual ~packetw2c_leave_game_result();

  packetw2c_leave_game_result(const packetw2c_leave_game_result& from);

  inline packetw2c_leave_game_result& operator=(const packetw2c_leave_game_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_leave_game_result& default_instance();

  void Swap(packetw2c_leave_game_result* other);

  // implements Message ----------------------------------------------

  packetw2c_leave_game_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_leave_game_result& from);
  void MergeFrom(const packetw2c_leave_game_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_leave_game_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional bool shutdown = 2 [default = false];
  inline bool has_shutdown() const;
  inline void clear_shutdown();
  static const int kShutdownFieldNumber = 2;
  inline bool shutdown() const;
  inline void set_shutdown(bool value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_leave_game_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_shutdown();
  inline void clear_has_shutdown();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  bool shutdown_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_leave_game_result* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_player_kick : public ::google::protobuf::Message {
 public:
  packetw2c_player_kick();
  virtual ~packetw2c_player_kick();

  packetw2c_player_kick(const packetw2c_player_kick& from);

  inline packetw2c_player_kick& operator=(const packetw2c_player_kick& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_player_kick& default_instance();

  void Swap(packetw2c_player_kick* other);

  // implements Message ----------------------------------------------

  packetw2c_player_kick* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_player_kick& from);
  void MergeFrom(const packetw2c_player_kick& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_kick];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 kick_type = 2 [default = 0];
  inline bool has_kick_type() const;
  inline void clear_kick_type();
  static const int kKickTypeFieldNumber = 2;
  inline ::google::protobuf::int32 kick_type() const;
  inline void set_kick_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_player_kick)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_kick_type();
  inline void clear_has_kick_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 kick_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_player_kick* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_get_gamelist : public ::google::protobuf::Message {
 public:
  packetc2w_get_gamelist();
  virtual ~packetc2w_get_gamelist();

  packetc2w_get_gamelist(const packetc2w_get_gamelist& from);

  inline packetc2w_get_gamelist& operator=(const packetc2w_get_gamelist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_get_gamelist& default_instance();

  void Swap(packetc2w_get_gamelist* other);

  // implements Message ----------------------------------------------

  packetc2w_get_gamelist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_get_gamelist& from);
  void MergeFrom(const packetc2w_get_gamelist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_gamelist];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_get_gamelist)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_get_gamelist* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_get_gamelist_result : public ::google::protobuf::Message {
 public:
  packetw2c_get_gamelist_result();
  virtual ~packetw2c_get_gamelist_result();

  packetw2c_get_gamelist_result(const packetw2c_get_gamelist_result& from);

  inline packetw2c_get_gamelist_result& operator=(const packetw2c_get_gamelist_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_get_gamelist_result& default_instance();

  void Swap(packetw2c_get_gamelist_result* other);

  // implements Message ----------------------------------------------

  packetw2c_get_gamelist_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_get_gamelist_result& from);
  void MergeFrom(const packetw2c_get_gamelist_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_gamelist_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // repeated .client2world_protocols.msg_game_info game_list = 2;
  inline int game_list_size() const;
  inline void clear_game_list();
  static const int kGameListFieldNumber = 2;
  inline const ::client2world_protocols::msg_game_info& game_list(int index) const;
  inline ::client2world_protocols::msg_game_info* mutable_game_list(int index);
  inline ::client2world_protocols::msg_game_info* add_game_list();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_game_info >&
      game_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_game_info >*
      mutable_game_list();

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_get_gamelist_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_game_info > game_list_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_get_gamelist_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_ac_bind : public ::google::protobuf::Message {
 public:
  packetc2w_ac_bind();
  virtual ~packetc2w_ac_bind();

  packetc2w_ac_bind(const packetc2w_ac_bind& from);

  inline packetc2w_ac_bind& operator=(const packetc2w_ac_bind& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_ac_bind& default_instance();

  void Swap(packetc2w_ac_bind* other);

  // implements Message ----------------------------------------------

  packetc2w_ac_bind* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_ac_bind& from);
  void MergeFrom(const packetc2w_ac_bind& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ac_bind];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string real_name = 3;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 3;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const char* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_ac_bind)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_real_name();
  inline void clear_has_real_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* real_name_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_ac_bind* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_ac_bind_result : public ::google::protobuf::Message {
 public:
  packetw2c_ac_bind_result();
  virtual ~packetw2c_ac_bind_result();

  packetw2c_ac_bind_result(const packetw2c_ac_bind_result& from);

  inline packetw2c_ac_bind_result& operator=(const packetw2c_ac_bind_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_ac_bind_result& default_instance();

  void Swap(packetw2c_ac_bind_result* other);

  // implements Message ----------------------------------------------

  packetw2c_ac_bind_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_ac_bind_result& from);
  void MergeFrom(const packetw2c_ac_bind_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ac_bind_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional string error_info = 3;
  inline bool has_error_info() const;
  inline void clear_error_info();
  static const int kErrorInfoFieldNumber = 3;
  inline const ::std::string& error_info() const;
  inline void set_error_info(const ::std::string& value);
  inline void set_error_info(const char* value);
  inline void set_error_info(const char* value, size_t size);
  inline ::std::string* mutable_error_info();
  inline ::std::string* release_error_info();
  inline void set_allocated_error_info(::std::string* error_info);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_ac_bind_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_error_info();
  inline void clear_has_error_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::std::string* error_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_ac_bind_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_ac_transfer : public ::google::protobuf::Message {
 public:
  packetc2w_ac_transfer();
  virtual ~packetc2w_ac_transfer();

  packetc2w_ac_transfer(const packetc2w_ac_transfer& from);

  inline packetc2w_ac_transfer& operator=(const packetc2w_ac_transfer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_ac_transfer& default_instance();

  void Swap(packetc2w_ac_transfer* other);

  // implements Message ----------------------------------------------

  packetc2w_ac_transfer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_ac_transfer& from);
  void MergeFrom(const packetc2w_ac_transfer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ac_transfer];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int64 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int32 type = 3 [default = 1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_ac_transfer)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gold_;
  int packet_id_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_ac_transfer* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_ac_transfer_result : public ::google::protobuf::Message {
 public:
  packetw2c_ac_transfer_result();
  virtual ~packetw2c_ac_transfer_result();

  packetw2c_ac_transfer_result(const packetw2c_ac_transfer_result& from);

  inline packetw2c_ac_transfer_result& operator=(const packetw2c_ac_transfer_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_ac_transfer_result& default_instance();

  void Swap(packetw2c_ac_transfer_result* other);

  // implements Message ----------------------------------------------

  packetw2c_ac_transfer_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_ac_transfer_result& from);
  void MergeFrom(const packetw2c_ac_transfer_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ac_transfer_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int64 gold = 3;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 3;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_ac_transfer_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gold();
  inline void clear_has_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int64 gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_ac_transfer_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_ac_url : public ::google::protobuf::Message {
 public:
  packetc2w_ac_url();
  virtual ~packetc2w_ac_url();

  packetc2w_ac_url(const packetc2w_ac_url& from);

  inline packetc2w_ac_url& operator=(const packetc2w_ac_url& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_ac_url& default_instance();

  void Swap(packetc2w_ac_url* other);

  // implements Message ----------------------------------------------

  packetc2w_ac_url* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_ac_url& from);
  void MergeFrom(const packetc2w_ac_url& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ac_url];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int64 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int32 paytype = 3 [default = 1];
  inline bool has_paytype() const;
  inline void clear_paytype();
  static const int kPaytypeFieldNumber = 3;
  inline ::google::protobuf::int32 paytype() const;
  inline void set_paytype(::google::protobuf::int32 value);

  // optional string param = 4;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 4;
  inline const ::std::string& param() const;
  inline void set_param(const ::std::string& value);
  inline void set_param(const char* value);
  inline void set_param(const char* value, size_t size);
  inline ::std::string* mutable_param();
  inline ::std::string* release_param();
  inline void set_allocated_param(::std::string* param);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_ac_url)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_paytype();
  inline void clear_has_paytype();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gold_;
  int packet_id_;
  ::google::protobuf::int32 paytype_;
  ::std::string* param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_ac_url* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_ac_url_result : public ::google::protobuf::Message {
 public:
  packetw2c_ac_url_result();
  virtual ~packetw2c_ac_url_result();

  packetw2c_ac_url_result(const packetw2c_ac_url_result& from);

  inline packetw2c_ac_url_result& operator=(const packetw2c_ac_url_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_ac_url_result& default_instance();

  void Swap(packetw2c_ac_url_result* other);

  // implements Message ----------------------------------------------

  packetw2c_ac_url_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_ac_url_result& from);
  void MergeFrom(const packetw2c_ac_url_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ac_url_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional string url = 3;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 3;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional string order_id = 4;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 4;
  inline const ::std::string& order_id() const;
  inline void set_order_id(const ::std::string& value);
  inline void set_order_id(const char* value);
  inline void set_order_id(const char* value, size_t size);
  inline ::std::string* mutable_order_id();
  inline ::std::string* release_order_id();
  inline void set_allocated_order_id(::std::string* order_id);

  // optional bool is_webview = 5 [default = false];
  inline bool has_is_webview() const;
  inline void clear_is_webview();
  static const int kIsWebviewFieldNumber = 5;
  inline bool is_webview() const;
  inline void set_is_webview(bool value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_ac_url_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_is_webview();
  inline void clear_has_is_webview();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::std::string* url_;
  ::std::string* order_id_;
  bool is_webview_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_ac_url_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_ask_check_payment : public ::google::protobuf::Message {
 public:
  packetc2w_ask_check_payment();
  virtual ~packetc2w_ask_check_payment();

  packetc2w_ask_check_payment(const packetc2w_ask_check_payment& from);

  inline packetc2w_ask_check_payment& operator=(const packetc2w_ask_check_payment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_ask_check_payment& default_instance();

  void Swap(packetc2w_ask_check_payment* other);

  // implements Message ----------------------------------------------

  packetc2w_ask_check_payment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_ask_check_payment& from);
  void MergeFrom(const packetc2w_ask_check_payment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_check_payment];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string orderid = 2;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 2;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_ask_check_payment)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_orderid();
  inline void clear_has_orderid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* orderid_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_ask_check_payment* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_ask_test_payment : public ::google::protobuf::Message {
 public:
  packetc2w_ask_test_payment();
  virtual ~packetc2w_ask_test_payment();

  packetc2w_ask_test_payment(const packetc2w_ask_test_payment& from);

  inline packetc2w_ask_test_payment& operator=(const packetc2w_ask_test_payment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_ask_test_payment& default_instance();

  void Swap(packetc2w_ask_test_payment* other);

  // implements Message ----------------------------------------------

  packetc2w_ask_test_payment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_ask_test_payment& from);
  void MergeFrom(const packetc2w_ask_test_payment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_test_payment];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 pay_type = 2;
  inline bool has_pay_type() const;
  inline void clear_pay_type();
  static const int kPayTypeFieldNumber = 2;
  inline ::google::protobuf::int32 pay_type() const;
  inline void set_pay_type(::google::protobuf::int32 value);

  // optional int32 pay_value = 3;
  inline bool has_pay_value() const;
  inline void clear_pay_value();
  static const int kPayValueFieldNumber = 3;
  inline ::google::protobuf::int32 pay_value() const;
  inline void set_pay_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_ask_test_payment)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_pay_type();
  inline void clear_has_pay_type();
  inline void set_has_pay_value();
  inline void clear_has_pay_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 pay_type_;
  ::google::protobuf::int32 pay_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_ask_test_payment* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_ask_check_payment_result : public ::google::protobuf::Message {
 public:
  packetw2c_ask_check_payment_result();
  virtual ~packetw2c_ask_check_payment_result();

  packetw2c_ask_check_payment_result(const packetw2c_ask_check_payment_result& from);

  inline packetw2c_ask_check_payment_result& operator=(const packetw2c_ask_check_payment_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_ask_check_payment_result& default_instance();

  void Swap(packetw2c_ask_check_payment_result* other);

  // implements Message ----------------------------------------------

  packetw2c_ask_check_payment_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_ask_check_payment_result& from);
  void MergeFrom(const packetw2c_ask_check_payment_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_check_payment_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 pay_type = 3;
  inline bool has_pay_type() const;
  inline void clear_pay_type();
  static const int kPayTypeFieldNumber = 3;
  inline ::google::protobuf::int32 pay_type() const;
  inline void set_pay_type(::google::protobuf::int32 value);

  // optional int32 pay_value = 4;
  inline bool has_pay_value() const;
  inline void clear_pay_value();
  static const int kPayValueFieldNumber = 4;
  inline ::google::protobuf::int32 pay_value() const;
  inline void set_pay_value(::google::protobuf::int32 value);

  // optional int32 vip_exp = 5;
  inline bool has_vip_exp() const;
  inline void clear_vip_exp();
  static const int kVipExpFieldNumber = 5;
  inline ::google::protobuf::int32 vip_exp() const;
  inline void set_vip_exp(::google::protobuf::int32 value);

  // optional string orderid = 6;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 6;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_ask_check_payment_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_pay_type();
  inline void clear_has_pay_type();
  inline void set_has_pay_value();
  inline void clear_has_pay_value();
  inline void set_has_vip_exp();
  inline void clear_has_vip_exp();
  inline void set_has_orderid();
  inline void clear_has_orderid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int32 pay_type_;
  ::google::protobuf::int32 pay_value_;
  ::std::string* orderid_;
  ::google::protobuf::int32 vip_exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_ask_check_payment_result* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_bind_reward : public ::google::protobuf::Message {
 public:
  packetw2c_bind_reward();
  virtual ~packetw2c_bind_reward();

  packetw2c_bind_reward(const packetw2c_bind_reward& from);

  inline packetw2c_bind_reward& operator=(const packetw2c_bind_reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_bind_reward& default_instance();

  void Swap(packetw2c_bind_reward* other);

  // implements Message ----------------------------------------------

  packetw2c_bind_reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_bind_reward& from);
  void MergeFrom(const packetw2c_bind_reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_bind_reward];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 reward_gold = 2;
  inline bool has_reward_gold() const;
  inline void clear_reward_gold();
  static const int kRewardGoldFieldNumber = 2;
  inline ::google::protobuf::int32 reward_gold() const;
  inline void set_reward_gold(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_bind_reward)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_reward_gold();
  inline void clear_has_reward_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 reward_gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_bind_reward* default_instance_;
};
// -------------------------------------------------------------------

class msg_some_info : public ::google::protobuf::Message {
 public:
  msg_some_info();
  virtual ~msg_some_info();

  msg_some_info(const msg_some_info& from);

  inline msg_some_info& operator=(const msg_some_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_some_info& default_instance();

  void Swap(msg_some_info* other);

  // implements Message ----------------------------------------------

  msg_some_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_some_info& from);
  void MergeFrom(const msg_some_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional int32 userId = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int64 timeValue = 3;
  inline bool has_timevalue() const;
  inline void clear_timevalue();
  static const int kTimeValueFieldNumber = 3;
  inline ::google::protobuf::int64 timevalue() const;
  inline void set_timevalue(::google::protobuf::int64 value);

  // optional string msgInfo = 4;
  inline bool has_msginfo() const;
  inline void clear_msginfo();
  static const int kMsgInfoFieldNumber = 4;
  inline const ::std::string& msginfo() const;
  inline void set_msginfo(const ::std::string& value);
  inline void set_msginfo(const char* value);
  inline void set_msginfo(const char* value, size_t size);
  inline ::std::string* mutable_msginfo();
  inline ::std::string* release_msginfo();
  inline void set_allocated_msginfo(::std::string* msginfo);

  // optional int32 read = 5;
  inline bool has_read() const;
  inline void clear_read();
  static const int kReadFieldNumber = 5;
  inline ::google::protobuf::int32 read() const;
  inline void set_read(::google::protobuf::int32 value);

  // repeated .msg_info_def.msg_item items = 6;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 6;
  inline const ::msg_info_def::msg_item& items(int index) const;
  inline ::msg_info_def::msg_item* mutable_items(int index);
  inline ::msg_info_def::msg_item* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_item >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_item >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:client2world_protocols.msg_some_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_timevalue();
  inline void clear_has_timevalue();
  inline void set_has_msginfo();
  inline void clear_has_msginfo();
  inline void set_has_read();
  inline void clear_has_read();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int64 timevalue_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 read_;
  ::std::string* msginfo_;
  ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_item > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_some_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_ask_message : public ::google::protobuf::Message {
 public:
  packetc2w_ask_message();
  virtual ~packetc2w_ask_message();

  packetc2w_ask_message(const packetc2w_ask_message& from);

  inline packetc2w_ask_message& operator=(const packetc2w_ask_message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_ask_message& default_instance();

  void Swap(packetc2w_ask_message* other);

  // implements Message ----------------------------------------------

  packetc2w_ask_message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_ask_message& from);
  void MergeFrom(const packetc2w_ask_message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_message];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_ask_message)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_ask_message* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_ask_message_result : public ::google::protobuf::Message {
 public:
  packetw2c_ask_message_result();
  virtual ~packetw2c_ask_message_result();

  packetw2c_ask_message_result(const packetw2c_ask_message_result& from);

  inline packetw2c_ask_message_result& operator=(const packetw2c_ask_message_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_ask_message_result& default_instance();

  void Swap(packetw2c_ask_message_result* other);

  // implements Message ----------------------------------------------

  packetw2c_ask_message_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_ask_message_result& from);
  void MergeFrom(const packetw2c_ask_message_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_message_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional bool result = 2 [default = false];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline bool result() const;
  inline void set_result(bool value);

  // repeated .client2world_protocols.msg_some_info msg_list = 3;
  inline int msg_list_size() const;
  inline void clear_msg_list();
  static const int kMsgListFieldNumber = 3;
  inline const ::client2world_protocols::msg_some_info& msg_list(int index) const;
  inline ::client2world_protocols::msg_some_info* mutable_msg_list(int index);
  inline ::client2world_protocols::msg_some_info* add_msg_list();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_some_info >&
      msg_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_some_info >*
      mutable_msg_list();

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_ask_message_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  bool result_;
  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_some_info > msg_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_ask_message_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_delete_message : public ::google::protobuf::Message {
 public:
  packetc2w_delete_message();
  virtual ~packetc2w_delete_message();

  packetc2w_delete_message(const packetc2w_delete_message& from);

  inline packetc2w_delete_message& operator=(const packetc2w_delete_message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_delete_message& default_instance();

  void Swap(packetc2w_delete_message* other);

  // implements Message ----------------------------------------------

  packetc2w_delete_message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_delete_message& from);
  void MergeFrom(const packetc2w_delete_message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_delete_message];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // repeated string delete_list = 2;
  inline int delete_list_size() const;
  inline void clear_delete_list();
  static const int kDeleteListFieldNumber = 2;
  inline const ::std::string& delete_list(int index) const;
  inline ::std::string* mutable_delete_list(int index);
  inline void set_delete_list(int index, const ::std::string& value);
  inline void set_delete_list(int index, const char* value);
  inline void set_delete_list(int index, const char* value, size_t size);
  inline ::std::string* add_delete_list();
  inline void add_delete_list(const ::std::string& value);
  inline void add_delete_list(const char* value);
  inline void add_delete_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& delete_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_delete_list();

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_delete_message)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> delete_list_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_delete_message* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_delete_message_result : public ::google::protobuf::Message {
 public:
  packetw2c_delete_message_result();
  virtual ~packetw2c_delete_message_result();

  packetw2c_delete_message_result(const packetw2c_delete_message_result& from);

  inline packetw2c_delete_message_result& operator=(const packetw2c_delete_message_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_delete_message_result& default_instance();

  void Swap(packetw2c_delete_message_result* other);

  // implements Message ----------------------------------------------

  packetw2c_delete_message_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_delete_message_result& from);
  void MergeFrom(const packetw2c_delete_message_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_delete_message_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional bool result = 2 [default = false];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_delete_message_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_delete_message_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_read_message : public ::google::protobuf::Message {
 public:
  packetc2w_read_message();
  virtual ~packetc2w_read_message();

  packetc2w_read_message(const packetc2w_read_message& from);

  inline packetc2w_read_message& operator=(const packetc2w_read_message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_read_message& default_instance();

  void Swap(packetc2w_read_message* other);

  // implements Message ----------------------------------------------

  packetc2w_read_message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_read_message& from);
  void MergeFrom(const packetc2w_read_message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_read_message];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_read_message)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_read_message* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_read_message_result : public ::google::protobuf::Message {
 public:
  packetw2c_read_message_result();
  virtual ~packetw2c_read_message_result();

  packetw2c_read_message_result(const packetw2c_read_message_result& from);

  inline packetw2c_read_message_result& operator=(const packetw2c_read_message_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_read_message_result& default_instance();

  void Swap(packetw2c_read_message_result* other);

  // implements Message ----------------------------------------------

  packetw2c_read_message_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_read_message_result& from);
  void MergeFrom(const packetw2c_read_message_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_read_message_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional string id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_read_message_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::std::string* id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_read_message_result* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_picture_verify : public ::google::protobuf::Message {
 public:
  packetw2c_picture_verify();
  virtual ~packetw2c_picture_verify();

  packetw2c_picture_verify(const packetw2c_picture_verify& from);

  inline packetw2c_picture_verify& operator=(const packetw2c_picture_verify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_picture_verify& default_instance();

  void Swap(packetw2c_picture_verify* other);

  // implements Message ----------------------------------------------

  packetw2c_picture_verify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_picture_verify& from);
  void MergeFrom(const packetw2c_picture_verify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_picture_verify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_picture_verify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_picture_verify* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_picture_verify_result : public ::google::protobuf::Message {
 public:
  packetc2w_picture_verify_result();
  virtual ~packetc2w_picture_verify_result();

  packetc2w_picture_verify_result(const packetc2w_picture_verify_result& from);

  inline packetc2w_picture_verify_result& operator=(const packetc2w_picture_verify_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_picture_verify_result& default_instance();

  void Swap(packetc2w_picture_verify_result* other);

  // implements Message ----------------------------------------------

  packetc2w_picture_verify_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_picture_verify_result& from);
  void MergeFrom(const packetc2w_picture_verify_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_picture_verify_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string validate = 2;
  inline bool has_validate() const;
  inline void clear_validate();
  static const int kValidateFieldNumber = 2;
  inline const ::std::string& validate() const;
  inline void set_validate(const ::std::string& value);
  inline void set_validate(const char* value);
  inline void set_validate(const char* value, size_t size);
  inline ::std::string* mutable_validate();
  inline ::std::string* release_validate();
  inline void set_allocated_validate(::std::string* validate);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_picture_verify_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_validate();
  inline void clear_has_validate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* validate_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_picture_verify_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_ask_report_account : public ::google::protobuf::Message {
 public:
  packetc2w_ask_report_account();
  virtual ~packetc2w_ask_report_account();

  packetc2w_ask_report_account(const packetc2w_ask_report_account& from);

  inline packetc2w_ask_report_account& operator=(const packetc2w_ask_report_account& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_ask_report_account& default_instance();

  void Swap(packetc2w_ask_report_account* other);

  // implements Message ----------------------------------------------

  packetc2w_ask_report_account* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_ask_report_account& from);
  void MergeFrom(const packetc2w_ask_report_account& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_report_account];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_ask_report_account)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_ask_report_account* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_ask_report_account_result : public ::google::protobuf::Message {
 public:
  packetw2c_ask_report_account_result();
  virtual ~packetw2c_ask_report_account_result();

  packetw2c_ask_report_account_result(const packetw2c_ask_report_account_result& from);

  inline packetw2c_ask_report_account_result& operator=(const packetw2c_ask_report_account_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_ask_report_account_result& default_instance();

  void Swap(packetw2c_ask_report_account_result* other);

  // implements Message ----------------------------------------------

  packetw2c_ask_report_account_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_ask_report_account_result& from);
  void MergeFrom(const packetw2c_ask_report_account_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_report_account_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_ask_report_account_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_account();
  inline void clear_has_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_ask_report_account_result* default_instance_;
};
// -------------------------------------------------------------------

class msg_faq_def : public ::google::protobuf::Message {
 public:
  msg_faq_def();
  virtual ~msg_faq_def();

  msg_faq_def(const msg_faq_def& from);

  inline msg_faq_def& operator=(const msg_faq_def& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_faq_def& default_instance();

  void Swap(msg_faq_def* other);

  // implements Message ----------------------------------------------

  msg_faq_def* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_faq_def& from);
  void MergeFrom(const msg_faq_def& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:client2world_protocols.msg_faq_def)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* text_;
  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_faq_def* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_req_faq : public ::google::protobuf::Message {
 public:
  packetc2w_req_faq();
  virtual ~packetc2w_req_faq();

  packetc2w_req_faq(const packetc2w_req_faq& from);

  inline packetc2w_req_faq& operator=(const packetc2w_req_faq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_faq& default_instance();

  void Swap(packetc2w_req_faq* other);

  // implements Message ----------------------------------------------

  packetc2w_req_faq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_faq& from);
  void MergeFrom(const packetc2w_req_faq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_faq];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_faq)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_faq* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_faq_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_faq_result();
  virtual ~packetw2c_req_faq_result();

  packetw2c_req_faq_result(const packetw2c_req_faq_result& from);

  inline packetw2c_req_faq_result& operator=(const packetw2c_req_faq_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_faq_result& default_instance();

  void Swap(packetw2c_req_faq_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_faq_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_faq_result& from);
  void MergeFrom(const packetw2c_req_faq_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_faq_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // repeated .client2world_protocols.msg_faq_def faq_list = 2;
  inline int faq_list_size() const;
  inline void clear_faq_list();
  static const int kFaqListFieldNumber = 2;
  inline const ::client2world_protocols::msg_faq_def& faq_list(int index) const;
  inline ::client2world_protocols::msg_faq_def* mutable_faq_list(int index);
  inline ::client2world_protocols::msg_faq_def* add_faq_list();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_faq_def >&
      faq_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_faq_def >*
      mutable_faq_list();

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_faq_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_faq_def > faq_list_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_faq_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_req_faq_detail : public ::google::protobuf::Message {
 public:
  packetc2w_req_faq_detail();
  virtual ~packetc2w_req_faq_detail();

  packetc2w_req_faq_detail(const packetc2w_req_faq_detail& from);

  inline packetc2w_req_faq_detail& operator=(const packetc2w_req_faq_detail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_faq_detail& default_instance();

  void Swap(packetc2w_req_faq_detail* other);

  // implements Message ----------------------------------------------

  packetc2w_req_faq_detail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_faq_detail& from);
  void MergeFrom(const packetc2w_req_faq_detail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_faq_detail];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_faq_detail)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_faq_detail* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_faq_detail_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_faq_detail_result();
  virtual ~packetw2c_req_faq_detail_result();

  packetw2c_req_faq_detail_result(const packetw2c_req_faq_detail_result& from);

  inline packetw2c_req_faq_detail_result& operator=(const packetw2c_req_faq_detail_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_faq_detail_result& default_instance();

  void Swap(packetw2c_req_faq_detail_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_faq_detail_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_faq_detail_result& from);
  void MergeFrom(const packetw2c_req_faq_detail_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_faq_detail_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .client2world_protocols.msg_faq_def faq = 2;
  inline bool has_faq() const;
  inline void clear_faq();
  static const int kFaqFieldNumber = 2;
  inline const ::client2world_protocols::msg_faq_def& faq() const;
  inline ::client2world_protocols::msg_faq_def* mutable_faq();
  inline ::client2world_protocols::msg_faq_def* release_faq();
  inline void set_allocated_faq(::client2world_protocols::msg_faq_def* faq);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_faq_detail_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_faq();
  inline void clear_has_faq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client2world_protocols::msg_faq_def* faq_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_faq_detail_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_req_cs_contact : public ::google::protobuf::Message {
 public:
  packetc2w_req_cs_contact();
  virtual ~packetc2w_req_cs_contact();

  packetc2w_req_cs_contact(const packetc2w_req_cs_contact& from);

  inline packetc2w_req_cs_contact& operator=(const packetc2w_req_cs_contact& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_cs_contact& default_instance();

  void Swap(packetc2w_req_cs_contact* other);

  // implements Message ----------------------------------------------

  packetc2w_req_cs_contact* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_cs_contact& from);
  void MergeFrom(const packetc2w_req_cs_contact& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_cs_contact];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_cs_contact)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_cs_contact* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_cs_contact_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_cs_contact_result();
  virtual ~packetw2c_req_cs_contact_result();

  packetw2c_req_cs_contact_result(const packetw2c_req_cs_contact_result& from);

  inline packetw2c_req_cs_contact_result& operator=(const packetw2c_req_cs_contact_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_cs_contact_result& default_instance();

  void Swap(packetw2c_req_cs_contact_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_cs_contact_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_cs_contact_result& from);
  void MergeFrom(const packetw2c_req_cs_contact_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_cs_contact_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string qq = 2;
  inline bool has_qq() const;
  inline void clear_qq();
  static const int kQqFieldNumber = 2;
  inline const ::std::string& qq() const;
  inline void set_qq(const ::std::string& value);
  inline void set_qq(const char* value);
  inline void set_qq(const char* value, size_t size);
  inline ::std::string* mutable_qq();
  inline ::std::string* release_qq();
  inline void set_allocated_qq(::std::string* qq);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_cs_contact_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_qq();
  inline void clear_has_qq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* qq_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_cs_contact_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_bind_bank_card : public ::google::protobuf::Message {
 public:
  packetc2w_bind_bank_card();
  virtual ~packetc2w_bind_bank_card();

  packetc2w_bind_bank_card(const packetc2w_bind_bank_card& from);

  inline packetc2w_bind_bank_card& operator=(const packetc2w_bind_bank_card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_bind_bank_card& default_instance();

  void Swap(packetc2w_bind_bank_card* other);

  // implements Message ----------------------------------------------

  packetc2w_bind_bank_card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_bind_bank_card& from);
  void MergeFrom(const packetc2w_bind_bank_card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_bind_bank_card];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string card_number = 3;
  inline bool has_card_number() const;
  inline void clear_card_number();
  static const int kCardNumberFieldNumber = 3;
  inline const ::std::string& card_number() const;
  inline void set_card_number(const ::std::string& value);
  inline void set_card_number(const char* value);
  inline void set_card_number(const char* value, size_t size);
  inline ::std::string* mutable_card_number();
  inline ::std::string* release_card_number();
  inline void set_allocated_card_number(::std::string* card_number);

  // optional string identity_number = 4;
  inline bool has_identity_number() const;
  inline void clear_identity_number();
  static const int kIdentityNumberFieldNumber = 4;
  inline const ::std::string& identity_number() const;
  inline void set_identity_number(const ::std::string& value);
  inline void set_identity_number(const char* value);
  inline void set_identity_number(const char* value, size_t size);
  inline ::std::string* mutable_identity_number();
  inline ::std::string* release_identity_number();
  inline void set_allocated_identity_number(::std::string* identity_number);

  // optional string bank_name = 5;
  inline bool has_bank_name() const;
  inline void clear_bank_name();
  static const int kBankNameFieldNumber = 5;
  inline const ::std::string& bank_name() const;
  inline void set_bank_name(const ::std::string& value);
  inline void set_bank_name(const char* value);
  inline void set_bank_name(const char* value, size_t size);
  inline ::std::string* mutable_bank_name();
  inline ::std::string* release_bank_name();
  inline void set_allocated_bank_name(::std::string* bank_name);

  // optional string card_number2 = 6;
  inline bool has_card_number2() const;
  inline void clear_card_number2();
  static const int kCardNumber2FieldNumber = 6;
  inline const ::std::string& card_number2() const;
  inline void set_card_number2(const ::std::string& value);
  inline void set_card_number2(const char* value);
  inline void set_card_number2(const char* value, size_t size);
  inline ::std::string* mutable_card_number2();
  inline ::std::string* release_card_number2();
  inline void set_allocated_card_number2(::std::string* card_number2);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_bind_bank_card)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_card_number();
  inline void clear_has_card_number();
  inline void set_has_identity_number();
  inline void clear_has_identity_number();
  inline void set_has_bank_name();
  inline void clear_has_bank_name();
  inline void set_has_card_number2();
  inline void clear_has_card_number2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* card_number_;
  ::std::string* identity_number_;
  ::std::string* bank_name_;
  ::std::string* card_number2_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_bind_bank_card* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_bind_bank_card_result : public ::google::protobuf::Message {
 public:
  packetw2c_bind_bank_card_result();
  virtual ~packetw2c_bind_bank_card_result();

  packetw2c_bind_bank_card_result(const packetw2c_bind_bank_card_result& from);

  inline packetw2c_bind_bank_card_result& operator=(const packetw2c_bind_bank_card_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_bind_bank_card_result& default_instance();

  void Swap(packetw2c_bind_bank_card_result* other);

  // implements Message ----------------------------------------------

  packetw2c_bind_bank_card_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_bind_bank_card_result& from);
  void MergeFrom(const packetw2c_bind_bank_card_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_bind_bank_card_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional string error_info = 3;
  inline bool has_error_info() const;
  inline void clear_error_info();
  static const int kErrorInfoFieldNumber = 3;
  inline const ::std::string& error_info() const;
  inline void set_error_info(const ::std::string& value);
  inline void set_error_info(const char* value);
  inline void set_error_info(const char* value, size_t size);
  inline ::std::string* mutable_error_info();
  inline ::std::string* release_error_info();
  inline void set_allocated_error_info(::std::string* error_info);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_bind_bank_card_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_error_info();
  inline void clear_has_error_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::std::string* error_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_bind_bank_card_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_req_bank_card : public ::google::protobuf::Message {
 public:
  packetc2w_req_bank_card();
  virtual ~packetc2w_req_bank_card();

  packetc2w_req_bank_card(const packetc2w_req_bank_card& from);

  inline packetc2w_req_bank_card& operator=(const packetc2w_req_bank_card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_bank_card& default_instance();

  void Swap(packetc2w_req_bank_card* other);

  // implements Message ----------------------------------------------

  packetc2w_req_bank_card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_bank_card& from);
  void MergeFrom(const packetc2w_req_bank_card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_bank_card];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_bank_card)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_bank_card* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_bank_card_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_bank_card_result();
  virtual ~packetw2c_req_bank_card_result();

  packetw2c_req_bank_card_result(const packetw2c_req_bank_card_result& from);

  inline packetw2c_req_bank_card_result& operator=(const packetw2c_req_bank_card_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_bank_card_result& default_instance();

  void Swap(packetw2c_req_bank_card_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_bank_card_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_bank_card_result& from);
  void MergeFrom(const packetw2c_req_bank_card_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_bank_card_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string card_number = 4;
  inline bool has_card_number() const;
  inline void clear_card_number();
  static const int kCardNumberFieldNumber = 4;
  inline const ::std::string& card_number() const;
  inline void set_card_number(const ::std::string& value);
  inline void set_card_number(const char* value);
  inline void set_card_number(const char* value, size_t size);
  inline ::std::string* mutable_card_number();
  inline ::std::string* release_card_number();
  inline void set_allocated_card_number(::std::string* card_number);

  // optional string bank_name = 5;
  inline bool has_bank_name() const;
  inline void clear_bank_name();
  static const int kBankNameFieldNumber = 5;
  inline const ::std::string& bank_name() const;
  inline void set_bank_name(const ::std::string& value);
  inline void set_bank_name(const char* value);
  inline void set_bank_name(const char* value, size_t size);
  inline ::std::string* mutable_bank_name();
  inline ::std::string* release_bank_name();
  inline void set_allocated_bank_name(::std::string* bank_name);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_bank_card_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_card_number();
  inline void clear_has_card_number();
  inline void set_has_bank_name();
  inline void clear_has_bank_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::std::string* name_;
  ::std::string* card_number_;
  ::std::string* bank_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_bank_card_result* default_instance_;
};
// -------------------------------------------------------------------

class msg_suggest : public ::google::protobuf::Message {
 public:
  msg_suggest();
  virtual ~msg_suggest();

  msg_suggest(const msg_suggest& from);

  inline msg_suggest& operator=(const msg_suggest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_suggest& default_instance();

  void Swap(msg_suggest* other);

  // implements Message ----------------------------------------------

  msg_suggest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_suggest& from);
  void MergeFrom(const msg_suggest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // optional int64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.msg_suggest)
 private:
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* text_;
  ::google::protobuf::int64 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_suggest* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_suggestion : public ::google::protobuf::Message {
 public:
  packetc2w_suggestion();
  virtual ~packetc2w_suggestion();

  packetc2w_suggestion(const packetc2w_suggestion& from);

  inline packetc2w_suggestion& operator=(const packetc2w_suggestion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_suggestion& default_instance();

  void Swap(packetc2w_suggestion* other);

  // implements Message ----------------------------------------------

  packetc2w_suggestion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_suggestion& from);
  void MergeFrom(const packetc2w_suggestion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_suggestion];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_suggestion)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* text_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_suggestion* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_suggestion_result : public ::google::protobuf::Message {
 public:
  packetw2c_suggestion_result();
  virtual ~packetw2c_suggestion_result();

  packetw2c_suggestion_result(const packetw2c_suggestion_result& from);

  inline packetw2c_suggestion_result& operator=(const packetw2c_suggestion_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_suggestion_result& default_instance();

  void Swap(packetw2c_suggestion_result* other);

  // implements Message ----------------------------------------------

  packetw2c_suggestion_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_suggestion_result& from);
  void MergeFrom(const packetw2c_suggestion_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_suggestion_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional .client2world_protocols.msg_suggest suggest = 3;
  inline bool has_suggest() const;
  inline void clear_suggest();
  static const int kSuggestFieldNumber = 3;
  inline const ::client2world_protocols::msg_suggest& suggest() const;
  inline ::client2world_protocols::msg_suggest* mutable_suggest();
  inline ::client2world_protocols::msg_suggest* release_suggest();
  inline void set_allocated_suggest(::client2world_protocols::msg_suggest* suggest);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_suggestion_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_suggest();
  inline void clear_has_suggest();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::client2world_protocols::msg_suggest* suggest_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_suggestion_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_req_suggest : public ::google::protobuf::Message {
 public:
  packetc2w_req_suggest();
  virtual ~packetc2w_req_suggest();

  packetc2w_req_suggest(const packetc2w_req_suggest& from);

  inline packetc2w_req_suggest& operator=(const packetc2w_req_suggest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_suggest& default_instance();

  void Swap(packetc2w_req_suggest* other);

  // implements Message ----------------------------------------------

  packetc2w_req_suggest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_suggest& from);
  void MergeFrom(const packetc2w_req_suggest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_suggest];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_suggest)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_suggest* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_suggest_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_suggest_result();
  virtual ~packetw2c_req_suggest_result();

  packetw2c_req_suggest_result(const packetw2c_req_suggest_result& from);

  inline packetw2c_req_suggest_result& operator=(const packetw2c_req_suggest_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_suggest_result& default_instance();

  void Swap(packetw2c_req_suggest_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_suggest_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_suggest_result& from);
  void MergeFrom(const packetw2c_req_suggest_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_suggest_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // repeated .client2world_protocols.msg_suggest list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::client2world_protocols::msg_suggest& list(int index) const;
  inline ::client2world_protocols::msg_suggest* mutable_list(int index);
  inline ::client2world_protocols::msg_suggest* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_suggest >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_suggest >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_suggest_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_suggest > list_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_suggest_result* default_instance_;
};
// -------------------------------------------------------------------

class msg_bank_info : public ::google::protobuf::Message {
 public:
  msg_bank_info();
  virtual ~msg_bank_info();

  msg_bank_info(const msg_bank_info& from);

  inline msg_bank_info& operator=(const msg_bank_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_bank_info& default_instance();

  void Swap(msg_bank_info* other);

  // implements Message ----------------------------------------------

  msg_bank_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_bank_info& from);
  void MergeFrom(const msg_bank_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool open = 3;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 3;
  inline bool open() const;
  inline void set_open(bool value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.msg_bank_info)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_open();
  inline void clear_has_open();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* code_;
  ::std::string* name_;
  bool open_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_bank_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_req_bank_list : public ::google::protobuf::Message {
 public:
  packetc2w_req_bank_list();
  virtual ~packetc2w_req_bank_list();

  packetc2w_req_bank_list(const packetc2w_req_bank_list& from);

  inline packetc2w_req_bank_list& operator=(const packetc2w_req_bank_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_bank_list& default_instance();

  void Swap(packetc2w_req_bank_list* other);

  // implements Message ----------------------------------------------

  packetc2w_req_bank_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_bank_list& from);
  void MergeFrom(const packetc2w_req_bank_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_bank_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_bank_list)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_bank_list* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_bank_list_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_bank_list_result();
  virtual ~packetw2c_req_bank_list_result();

  packetw2c_req_bank_list_result(const packetw2c_req_bank_list_result& from);

  inline packetw2c_req_bank_list_result& operator=(const packetw2c_req_bank_list_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_bank_list_result& default_instance();

  void Swap(packetw2c_req_bank_list_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_bank_list_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_bank_list_result& from);
  void MergeFrom(const packetw2c_req_bank_list_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_bank_list_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // repeated .client2world_protocols.msg_bank_info bank_list = 2;
  inline int bank_list_size() const;
  inline void clear_bank_list();
  static const int kBankListFieldNumber = 2;
  inline const ::client2world_protocols::msg_bank_info& bank_list(int index) const;
  inline ::client2world_protocols::msg_bank_info* mutable_bank_list(int index);
  inline ::client2world_protocols::msg_bank_info* add_bank_list();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_bank_info >&
      bank_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_bank_info >*
      mutable_bank_list();

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_bank_list_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_bank_info > bank_list_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_bank_list_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_req_sync_gold : public ::google::protobuf::Message {
 public:
  packetc2w_req_sync_gold();
  virtual ~packetc2w_req_sync_gold();

  packetc2w_req_sync_gold(const packetc2w_req_sync_gold& from);

  inline packetc2w_req_sync_gold& operator=(const packetc2w_req_sync_gold& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_sync_gold& default_instance();

  void Swap(packetc2w_req_sync_gold* other);

  // implements Message ----------------------------------------------

  packetc2w_req_sync_gold* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_sync_gold& from);
  void MergeFrom(const packetc2w_req_sync_gold& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_sync_gold];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_sync_gold)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_sync_gold* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_sync_gold_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_sync_gold_result();
  virtual ~packetw2c_req_sync_gold_result();

  packetw2c_req_sync_gold_result(const packetw2c_req_sync_gold_result& from);

  inline packetw2c_req_sync_gold_result& operator=(const packetw2c_req_sync_gold_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_sync_gold_result& default_instance();

  void Swap(packetw2c_req_sync_gold_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_sync_gold_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_sync_gold_result& from);
  void MergeFrom(const packetw2c_req_sync_gold_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_sync_gold_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int64 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_sync_gold_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_gold();
  inline void clear_has_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gold_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_sync_gold_result* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2w_player_connect

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_connect];
inline bool packetc2w_player_connect::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_player_connect::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_player_connect::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_player_connect::clear_packet_id() {
  packet_id_ = 5001;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_player_connect::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_player_connect::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional string account = 2;
inline bool packetc2w_player_connect::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_player_connect::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_player_connect::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_player_connect::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& packetc2w_player_connect::account() const {
  return *account_;
}
inline void packetc2w_player_connect::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void packetc2w_player_connect::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void packetc2w_player_connect::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_player_connect::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* packetc2w_player_connect::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_player_connect::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string token = 3;
inline bool packetc2w_player_connect::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_player_connect::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_player_connect::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_player_connect::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& packetc2w_player_connect::token() const {
  return *token_;
}
inline void packetc2w_player_connect::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void packetc2w_player_connect::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void packetc2w_player_connect::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_player_connect::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* packetc2w_player_connect::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_player_connect::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sign = 4;
inline bool packetc2w_player_connect::has_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetc2w_player_connect::set_has_sign() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetc2w_player_connect::clear_has_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetc2w_player_connect::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& packetc2w_player_connect::sign() const {
  return *sign_;
}
inline void packetc2w_player_connect::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void packetc2w_player_connect::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void packetc2w_player_connect::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_player_connect::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* packetc2w_player_connect::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_player_connect::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string platform = 5;
inline bool packetc2w_player_connect::has_platform() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetc2w_player_connect::set_has_platform() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetc2w_player_connect::clear_has_platform() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetc2w_player_connect::clear_platform() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& packetc2w_player_connect::platform() const {
  return *platform_;
}
inline void packetc2w_player_connect::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void packetc2w_player_connect::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void packetc2w_player_connect::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_player_connect::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  return platform_;
}
inline ::std::string* packetc2w_player_connect::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_player_connect::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string login_platform = 6;
inline bool packetc2w_player_connect::has_login_platform() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetc2w_player_connect::set_has_login_platform() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetc2w_player_connect::clear_has_login_platform() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetc2w_player_connect::clear_login_platform() {
  if (login_platform_ != &::google::protobuf::internal::kEmptyString) {
    login_platform_->clear();
  }
  clear_has_login_platform();
}
inline const ::std::string& packetc2w_player_connect::login_platform() const {
  return *login_platform_;
}
inline void packetc2w_player_connect::set_login_platform(const ::std::string& value) {
  set_has_login_platform();
  if (login_platform_ == &::google::protobuf::internal::kEmptyString) {
    login_platform_ = new ::std::string;
  }
  login_platform_->assign(value);
}
inline void packetc2w_player_connect::set_login_platform(const char* value) {
  set_has_login_platform();
  if (login_platform_ == &::google::protobuf::internal::kEmptyString) {
    login_platform_ = new ::std::string;
  }
  login_platform_->assign(value);
}
inline void packetc2w_player_connect::set_login_platform(const char* value, size_t size) {
  set_has_login_platform();
  if (login_platform_ == &::google::protobuf::internal::kEmptyString) {
    login_platform_ = new ::std::string;
  }
  login_platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_player_connect::mutable_login_platform() {
  set_has_login_platform();
  if (login_platform_ == &::google::protobuf::internal::kEmptyString) {
    login_platform_ = new ::std::string;
  }
  return login_platform_;
}
inline ::std::string* packetc2w_player_connect::release_login_platform() {
  clear_has_login_platform();
  if (login_platform_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = login_platform_;
    login_platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_player_connect::set_allocated_login_platform(::std::string* login_platform) {
  if (login_platform_ != &::google::protobuf::internal::kEmptyString) {
    delete login_platform_;
  }
  if (login_platform) {
    set_has_login_platform();
    login_platform_ = login_platform;
  } else {
    clear_has_login_platform();
    login_platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string machine_code = 7;
inline bool packetc2w_player_connect::has_machine_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetc2w_player_connect::set_has_machine_code() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetc2w_player_connect::clear_has_machine_code() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetc2w_player_connect::clear_machine_code() {
  if (machine_code_ != &::google::protobuf::internal::kEmptyString) {
    machine_code_->clear();
  }
  clear_has_machine_code();
}
inline const ::std::string& packetc2w_player_connect::machine_code() const {
  return *machine_code_;
}
inline void packetc2w_player_connect::set_machine_code(const ::std::string& value) {
  set_has_machine_code();
  if (machine_code_ == &::google::protobuf::internal::kEmptyString) {
    machine_code_ = new ::std::string;
  }
  machine_code_->assign(value);
}
inline void packetc2w_player_connect::set_machine_code(const char* value) {
  set_has_machine_code();
  if (machine_code_ == &::google::protobuf::internal::kEmptyString) {
    machine_code_ = new ::std::string;
  }
  machine_code_->assign(value);
}
inline void packetc2w_player_connect::set_machine_code(const char* value, size_t size) {
  set_has_machine_code();
  if (machine_code_ == &::google::protobuf::internal::kEmptyString) {
    machine_code_ = new ::std::string;
  }
  machine_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_player_connect::mutable_machine_code() {
  set_has_machine_code();
  if (machine_code_ == &::google::protobuf::internal::kEmptyString) {
    machine_code_ = new ::std::string;
  }
  return machine_code_;
}
inline ::std::string* packetc2w_player_connect::release_machine_code() {
  clear_has_machine_code();
  if (machine_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = machine_code_;
    machine_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_player_connect::set_allocated_machine_code(::std::string* machine_code) {
  if (machine_code_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_code_;
  }
  if (machine_code) {
    set_has_machine_code();
    machine_code_ = machine_code;
  } else {
    clear_has_machine_code();
    machine_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string machine_type = 8;
inline bool packetc2w_player_connect::has_machine_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void packetc2w_player_connect::set_has_machine_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void packetc2w_player_connect::clear_has_machine_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void packetc2w_player_connect::clear_machine_type() {
  if (machine_type_ != &::google::protobuf::internal::kEmptyString) {
    machine_type_->clear();
  }
  clear_has_machine_type();
}
inline const ::std::string& packetc2w_player_connect::machine_type() const {
  return *machine_type_;
}
inline void packetc2w_player_connect::set_machine_type(const ::std::string& value) {
  set_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::kEmptyString) {
    machine_type_ = new ::std::string;
  }
  machine_type_->assign(value);
}
inline void packetc2w_player_connect::set_machine_type(const char* value) {
  set_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::kEmptyString) {
    machine_type_ = new ::std::string;
  }
  machine_type_->assign(value);
}
inline void packetc2w_player_connect::set_machine_type(const char* value, size_t size) {
  set_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::kEmptyString) {
    machine_type_ = new ::std::string;
  }
  machine_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_player_connect::mutable_machine_type() {
  set_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::kEmptyString) {
    machine_type_ = new ::std::string;
  }
  return machine_type_;
}
inline ::std::string* packetc2w_player_connect::release_machine_type() {
  clear_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = machine_type_;
    machine_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_player_connect::set_allocated_machine_type(::std::string* machine_type) {
  if (machine_type_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_type_;
  }
  if (machine_type) {
    set_has_machine_type();
    machine_type_ = machine_type;
  } else {
    clear_has_machine_type();
    machine_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 channelid = 9;
inline bool packetc2w_player_connect::has_channelid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void packetc2w_player_connect::set_has_channelid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void packetc2w_player_connect::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void packetc2w_player_connect::clear_channelid() {
  channelid_ = 0;
  clear_has_channelid();
}
inline ::google::protobuf::int32 packetc2w_player_connect::channelid() const {
  return channelid_;
}
inline void packetc2w_player_connect::set_channelid(::google::protobuf::int32 value) {
  set_has_channelid();
  channelid_ = value;
}

// -------------------------------------------------------------------

// packetw2c_player_connect_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_connect_result];
inline bool packetw2c_player_connect_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_player_connect_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_player_connect_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_player_connect_result::clear_packet_id() {
  packet_id_ = 7501;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_player_connect_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_player_connect_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 result = 2 [default = 2];
inline bool packetw2c_player_connect_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_player_connect_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_player_connect_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_player_connect_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_player_connect_result::result() const {
  return result_;
}
inline void packetw2c_player_connect_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 servertime = 3;
inline bool packetw2c_player_connect_result::has_servertime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_player_connect_result::set_has_servertime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_player_connect_result::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_player_connect_result::clear_servertime() {
  servertime_ = 0;
  clear_has_servertime();
}
inline ::google::protobuf::int32 packetw2c_player_connect_result::servertime() const {
  return servertime_;
}
inline void packetw2c_player_connect_result::set_servertime(::google::protobuf::int32 value) {
  set_has_servertime();
  servertime_ = value;
}

// optional int32 gaming = 4 [default = 0];
inline bool packetw2c_player_connect_result::has_gaming() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_player_connect_result::set_has_gaming() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_player_connect_result::clear_has_gaming() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_player_connect_result::clear_gaming() {
  gaming_ = 0;
  clear_has_gaming();
}
inline ::google::protobuf::int32 packetw2c_player_connect_result::gaming() const {
  return gaming_;
}
inline void packetw2c_player_connect_result::set_gaming(::google::protobuf::int32 value) {
  set_has_gaming();
  gaming_ = value;
}

// optional string ver = 5;
inline bool packetw2c_player_connect_result::has_ver() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetw2c_player_connect_result::set_has_ver() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetw2c_player_connect_result::clear_has_ver() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetw2c_player_connect_result::clear_ver() {
  if (ver_ != &::google::protobuf::internal::kEmptyString) {
    ver_->clear();
  }
  clear_has_ver();
}
inline const ::std::string& packetw2c_player_connect_result::ver() const {
  return *ver_;
}
inline void packetw2c_player_connect_result::set_ver(const ::std::string& value) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::kEmptyString) {
    ver_ = new ::std::string;
  }
  ver_->assign(value);
}
inline void packetw2c_player_connect_result::set_ver(const char* value) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::kEmptyString) {
    ver_ = new ::std::string;
  }
  ver_->assign(value);
}
inline void packetw2c_player_connect_result::set_ver(const char* value, size_t size) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::kEmptyString) {
    ver_ = new ::std::string;
  }
  ver_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_player_connect_result::mutable_ver() {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::kEmptyString) {
    ver_ = new ::std::string;
  }
  return ver_;
}
inline ::std::string* packetw2c_player_connect_result::release_ver() {
  clear_has_ver();
  if (ver_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ver_;
    ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_player_connect_result::set_allocated_ver(::std::string* ver) {
  if (ver_ != &::google::protobuf::internal::kEmptyString) {
    delete ver_;
  }
  if (ver) {
    set_has_ver();
    ver_ = ver;
  } else {
    clear_has_ver();
    ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packet_c2w_timesync

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_timesync];
inline bool packet_c2w_timesync::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_c2w_timesync::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_c2w_timesync::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_c2w_timesync::clear_packet_id() {
  packet_id_ = 5002;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packet_c2w_timesync::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_c2w_timesync::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packet_w2c_timesync_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_timesync_result];
inline bool packet_w2c_timesync_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_w2c_timesync_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_w2c_timesync_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_w2c_timesync_result::clear_packet_id() {
  packet_id_ = 7502;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packet_w2c_timesync_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_w2c_timesync_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 server_time = 2;
inline bool packet_w2c_timesync_result::has_server_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_w2c_timesync_result::set_has_server_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_w2c_timesync_result::clear_has_server_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_w2c_timesync_result::clear_server_time() {
  server_time_ = 0;
  clear_has_server_time();
}
inline ::google::protobuf::int32 packet_w2c_timesync_result::server_time() const {
  return server_time_;
}
inline void packet_w2c_timesync_result::set_server_time(::google::protobuf::int32 value) {
  set_has_server_time();
  server_time_ = value;
}

// -------------------------------------------------------------------

// packetc2w_ask_login

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_asklogin];
inline bool packetc2w_ask_login::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_ask_login::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_ask_login::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_ask_login::clear_packet_id() {
  packet_id_ = 5003;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_ask_login::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_ask_login::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// msg_game_info

// optional int32 gameid = 1;
inline bool msg_game_info::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_game_info::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_game_info::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_game_info::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 msg_game_info::gameid() const {
  return gameid_;
}
inline void msg_game_info::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// optional int32 gamever = 2;
inline bool msg_game_info::has_gamever() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_game_info::set_has_gamever() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_game_info::clear_has_gamever() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_game_info::clear_gamever() {
  gamever_ = 0;
  clear_has_gamever();
}
inline ::google::protobuf::int32 msg_game_info::gamever() const {
  return gamever_;
}
inline void msg_game_info::set_gamever(::google::protobuf::int32 value) {
  set_has_gamever();
  gamever_ = value;
}

// optional int32 curOnlineNum = 3;
inline bool msg_game_info::has_curonlinenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_game_info::set_has_curonlinenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_game_info::clear_has_curonlinenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_game_info::clear_curonlinenum() {
  curonlinenum_ = 0;
  clear_has_curonlinenum();
}
inline ::google::protobuf::int32 msg_game_info::curonlinenum() const {
  return curonlinenum_;
}
inline void msg_game_info::set_curonlinenum(::google::protobuf::int32 value) {
  set_has_curonlinenum();
  curonlinenum_ = value;
}

// optional bool isHot = 4;
inline bool msg_game_info::has_ishot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_game_info::set_has_ishot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_game_info::clear_has_ishot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_game_info::clear_ishot() {
  ishot_ = false;
  clear_has_ishot();
}
inline bool msg_game_info::ishot() const {
  return ishot_;
}
inline void msg_game_info::set_ishot(bool value) {
  set_has_ishot();
  ishot_ = value;
}

// optional int32 sort = 5;
inline bool msg_game_info::has_sort() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_game_info::set_has_sort() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_game_info::clear_has_sort() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_game_info::clear_sort() {
  sort_ = 0;
  clear_has_sort();
}
inline ::google::protobuf::int32 msg_game_info::sort() const {
  return sort_;
}
inline void msg_game_info::set_sort(::google::protobuf::int32 value) {
  set_has_sort();
  sort_ = value;
}

// -------------------------------------------------------------------

// packetw2c_ask_login_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_asklogin_result];
inline bool packetw2c_ask_login_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_ask_login_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_ask_login_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_ask_login_result::clear_packet_id() {
  packet_id_ = 7503;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_ask_login_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_ask_login_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_info_def.msg_account_info account_info = 2;
inline bool packetw2c_ask_login_result::has_account_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_ask_login_result::set_has_account_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_ask_login_result::clear_has_account_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_ask_login_result::clear_account_info() {
  if (account_info_ != NULL) account_info_->::msg_info_def::msg_account_info::Clear();
  clear_has_account_info();
}
inline const ::msg_info_def::msg_account_info& packetw2c_ask_login_result::account_info() const {
  return account_info_ != NULL ? *account_info_ : *default_instance_->account_info_;
}
inline ::msg_info_def::msg_account_info* packetw2c_ask_login_result::mutable_account_info() {
  set_has_account_info();
  if (account_info_ == NULL) account_info_ = new ::msg_info_def::msg_account_info;
  return account_info_;
}
inline ::msg_info_def::msg_account_info* packetw2c_ask_login_result::release_account_info() {
  clear_has_account_info();
  ::msg_info_def::msg_account_info* temp = account_info_;
  account_info_ = NULL;
  return temp;
}
inline void packetw2c_ask_login_result::set_allocated_account_info(::msg_info_def::msg_account_info* account_info) {
  delete account_info_;
  account_info_ = account_info;
  if (account_info) {
    set_has_account_info();
  } else {
    clear_has_account_info();
  }
}

// repeated .client2world_protocols.msg_game_info game_list = 3;
inline int packetw2c_ask_login_result::game_list_size() const {
  return game_list_.size();
}
inline void packetw2c_ask_login_result::clear_game_list() {
  game_list_.Clear();
}
inline const ::client2world_protocols::msg_game_info& packetw2c_ask_login_result::game_list(int index) const {
  return game_list_.Get(index);
}
inline ::client2world_protocols::msg_game_info* packetw2c_ask_login_result::mutable_game_list(int index) {
  return game_list_.Mutable(index);
}
inline ::client2world_protocols::msg_game_info* packetw2c_ask_login_result::add_game_list() {
  return game_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_game_info >&
packetw2c_ask_login_result::game_list() const {
  return game_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_game_info >*
packetw2c_ask_login_result::mutable_game_list() {
  return &game_list_;
}

// optional int32 gaming = 4 [default = 0];
inline bool packetw2c_ask_login_result::has_gaming() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_ask_login_result::set_has_gaming() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_ask_login_result::clear_has_gaming() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_ask_login_result::clear_gaming() {
  gaming_ = 0;
  clear_has_gaming();
}
inline ::google::protobuf::int32 packetw2c_ask_login_result::gaming() const {
  return gaming_;
}
inline void packetw2c_ask_login_result::set_gaming(::google::protobuf::int32 value) {
  set_has_gaming();
  gaming_ = value;
}

// -------------------------------------------------------------------

// packetc2w_enter_game

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_enter_game];
inline bool packetc2w_enter_game::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_enter_game::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_enter_game::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_enter_game::clear_packet_id() {
  packet_id_ = 5004;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_enter_game::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_enter_game::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 gameid = 2;
inline bool packetc2w_enter_game::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_enter_game::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_enter_game::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_enter_game::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 packetc2w_enter_game::gameid() const {
  return gameid_;
}
inline void packetc2w_enter_game::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// optional int32 gamever = 3;
inline bool packetc2w_enter_game::has_gamever() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_enter_game::set_has_gamever() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_enter_game::clear_has_gamever() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_enter_game::clear_gamever() {
  gamever_ = 0;
  clear_has_gamever();
}
inline ::google::protobuf::int32 packetc2w_enter_game::gamever() const {
  return gamever_;
}
inline void packetc2w_enter_game::set_gamever(::google::protobuf::int32 value) {
  set_has_gamever();
  gamever_ = value;
}

// optional int32 roomid = 4 [default = -1];
inline bool packetc2w_enter_game::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetc2w_enter_game::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetc2w_enter_game::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetc2w_enter_game::clear_roomid() {
  roomid_ = -1;
  clear_has_roomid();
}
inline ::google::protobuf::int32 packetc2w_enter_game::roomid() const {
  return roomid_;
}
inline void packetc2w_enter_game::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// packetw2c_enter_game_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_enter_game_result];
inline bool packetw2c_enter_game_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_enter_game_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_enter_game_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_enter_game_result::clear_packet_id() {
  packet_id_ = 7504;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_enter_game_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_enter_game_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_enter_game_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_enter_game_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_enter_game_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_enter_game_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_enter_game_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_enter_game_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2w_gm_command

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_command];
inline bool packetc2w_gm_command::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_gm_command::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_gm_command::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_gm_command::clear_packet_id() {
  packet_id_ = 5005;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_gm_command::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_gm_command::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional string command = 2;
inline bool packetc2w_gm_command::has_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_gm_command::set_has_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_gm_command::clear_has_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_gm_command::clear_command() {
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    command_->clear();
  }
  clear_has_command();
}
inline const ::std::string& packetc2w_gm_command::command() const {
  return *command_;
}
inline void packetc2w_gm_command::set_command(const ::std::string& value) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void packetc2w_gm_command::set_command(const char* value) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void packetc2w_gm_command::set_command(const char* value, size_t size) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  command_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_gm_command::mutable_command() {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  return command_;
}
inline ::std::string* packetc2w_gm_command::release_command() {
  clear_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = command_;
    command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_gm_command::set_allocated_command(::std::string* command) {
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    delete command_;
  }
  if (command) {
    set_has_command();
    command_ = command;
  } else {
    clear_has_command();
    command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetw2c_gm_command_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_command_result];
inline bool packetw2c_gm_command_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_gm_command_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_gm_command_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_gm_command_result::clear_packet_id() {
  packet_id_ = 7505;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_gm_command_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_gm_command_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_gm_command_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_gm_command_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_gm_command_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_gm_command_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_gm_command_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_gm_command_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2w_leave_game

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_leave_game];
inline bool packetc2w_leave_game::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_leave_game::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_leave_game::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_leave_game::clear_packet_id() {
  packet_id_ = 5008;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_leave_game::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_leave_game::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_leave_game_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_leave_game_result];
inline bool packetw2c_leave_game_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_leave_game_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_leave_game_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_leave_game_result::clear_packet_id() {
  packet_id_ = 7507;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_leave_game_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_leave_game_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional bool shutdown = 2 [default = false];
inline bool packetw2c_leave_game_result::has_shutdown() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_leave_game_result::set_has_shutdown() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_leave_game_result::clear_has_shutdown() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_leave_game_result::clear_shutdown() {
  shutdown_ = false;
  clear_has_shutdown();
}
inline bool packetw2c_leave_game_result::shutdown() const {
  return shutdown_;
}
inline void packetw2c_leave_game_result::set_shutdown(bool value) {
  set_has_shutdown();
  shutdown_ = value;
}

// -------------------------------------------------------------------

// packetw2c_player_kick

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_kick];
inline bool packetw2c_player_kick::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_player_kick::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_player_kick::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_player_kick::clear_packet_id() {
  packet_id_ = 7541;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_player_kick::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_player_kick::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 kick_type = 2 [default = 0];
inline bool packetw2c_player_kick::has_kick_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_player_kick::set_has_kick_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_player_kick::clear_has_kick_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_player_kick::clear_kick_type() {
  kick_type_ = 0;
  clear_has_kick_type();
}
inline ::google::protobuf::int32 packetw2c_player_kick::kick_type() const {
  return kick_type_;
}
inline void packetw2c_player_kick::set_kick_type(::google::protobuf::int32 value) {
  set_has_kick_type();
  kick_type_ = value;
}

// -------------------------------------------------------------------

// packetc2w_get_gamelist

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_gamelist];
inline bool packetc2w_get_gamelist::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_get_gamelist::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_get_gamelist::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_get_gamelist::clear_packet_id() {
  packet_id_ = 5048;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_get_gamelist::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_get_gamelist::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_get_gamelist_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_gamelist_result];
inline bool packetw2c_get_gamelist_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_get_gamelist_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_get_gamelist_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_get_gamelist_result::clear_packet_id() {
  packet_id_ = 7552;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_get_gamelist_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_get_gamelist_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .client2world_protocols.msg_game_info game_list = 2;
inline int packetw2c_get_gamelist_result::game_list_size() const {
  return game_list_.size();
}
inline void packetw2c_get_gamelist_result::clear_game_list() {
  game_list_.Clear();
}
inline const ::client2world_protocols::msg_game_info& packetw2c_get_gamelist_result::game_list(int index) const {
  return game_list_.Get(index);
}
inline ::client2world_protocols::msg_game_info* packetw2c_get_gamelist_result::mutable_game_list(int index) {
  return game_list_.Mutable(index);
}
inline ::client2world_protocols::msg_game_info* packetw2c_get_gamelist_result::add_game_list() {
  return game_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_game_info >&
packetw2c_get_gamelist_result::game_list() const {
  return game_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_game_info >*
packetw2c_get_gamelist_result::mutable_game_list() {
  return &game_list_;
}

// -------------------------------------------------------------------

// packetc2w_ac_bind

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ac_bind];
inline bool packetc2w_ac_bind::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_ac_bind::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_ac_bind::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_ac_bind::clear_packet_id() {
  packet_id_ = 5075;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_ac_bind::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_ac_bind::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional string account = 2;
inline bool packetc2w_ac_bind::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_ac_bind::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_ac_bind::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_ac_bind::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& packetc2w_ac_bind::account() const {
  return *account_;
}
inline void packetc2w_ac_bind::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void packetc2w_ac_bind::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void packetc2w_ac_bind::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_ac_bind::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* packetc2w_ac_bind::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_ac_bind::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string real_name = 3;
inline bool packetc2w_ac_bind::has_real_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_ac_bind::set_has_real_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_ac_bind::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_ac_bind::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::kEmptyString) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& packetc2w_ac_bind::real_name() const {
  return *real_name_;
}
inline void packetc2w_ac_bind::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
}
inline void packetc2w_ac_bind::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
}
inline void packetc2w_ac_bind::set_real_name(const char* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_ac_bind::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  return real_name_;
}
inline ::std::string* packetc2w_ac_bind::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_ac_bind::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::kEmptyString) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetw2c_ac_bind_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ac_bind_result];
inline bool packetw2c_ac_bind_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_ac_bind_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_ac_bind_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_ac_bind_result::clear_packet_id() {
  packet_id_ = 7581;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_ac_bind_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_ac_bind_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_ac_bind_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_ac_bind_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_ac_bind_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_ac_bind_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_ac_bind_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_ac_bind_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string error_info = 3;
inline bool packetw2c_ac_bind_result::has_error_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_ac_bind_result::set_has_error_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_ac_bind_result::clear_has_error_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_ac_bind_result::clear_error_info() {
  if (error_info_ != &::google::protobuf::internal::kEmptyString) {
    error_info_->clear();
  }
  clear_has_error_info();
}
inline const ::std::string& packetw2c_ac_bind_result::error_info() const {
  return *error_info_;
}
inline void packetw2c_ac_bind_result::set_error_info(const ::std::string& value) {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    error_info_ = new ::std::string;
  }
  error_info_->assign(value);
}
inline void packetw2c_ac_bind_result::set_error_info(const char* value) {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    error_info_ = new ::std::string;
  }
  error_info_->assign(value);
}
inline void packetw2c_ac_bind_result::set_error_info(const char* value, size_t size) {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    error_info_ = new ::std::string;
  }
  error_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_ac_bind_result::mutable_error_info() {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    error_info_ = new ::std::string;
  }
  return error_info_;
}
inline ::std::string* packetw2c_ac_bind_result::release_error_info() {
  clear_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_info_;
    error_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_ac_bind_result::set_allocated_error_info(::std::string* error_info) {
  if (error_info_ != &::google::protobuf::internal::kEmptyString) {
    delete error_info_;
  }
  if (error_info) {
    set_has_error_info();
    error_info_ = error_info;
  } else {
    clear_has_error_info();
    error_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetc2w_ac_transfer

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ac_transfer];
inline bool packetc2w_ac_transfer::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_ac_transfer::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_ac_transfer::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_ac_transfer::clear_packet_id() {
  packet_id_ = 5076;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_ac_transfer::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_ac_transfer::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int64 gold = 2;
inline bool packetc2w_ac_transfer::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_ac_transfer::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_ac_transfer::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_ac_transfer::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 packetc2w_ac_transfer::gold() const {
  return gold_;
}
inline void packetc2w_ac_transfer::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 type = 3 [default = 1];
inline bool packetc2w_ac_transfer::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_ac_transfer::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_ac_transfer::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_ac_transfer::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::google::protobuf::int32 packetc2w_ac_transfer::type() const {
  return type_;
}
inline void packetc2w_ac_transfer::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// packetw2c_ac_transfer_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ac_transfer_result];
inline bool packetw2c_ac_transfer_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_ac_transfer_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_ac_transfer_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_ac_transfer_result::clear_packet_id() {
  packet_id_ = 7582;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_ac_transfer_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_ac_transfer_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_ac_transfer_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_ac_transfer_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_ac_transfer_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_ac_transfer_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_ac_transfer_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_ac_transfer_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int64 gold = 3;
inline bool packetw2c_ac_transfer_result::has_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_ac_transfer_result::set_has_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_ac_transfer_result::clear_has_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_ac_transfer_result::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 packetw2c_ac_transfer_result::gold() const {
  return gold_;
}
inline void packetw2c_ac_transfer_result::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// -------------------------------------------------------------------

// packetc2w_ac_url

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ac_url];
inline bool packetc2w_ac_url::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_ac_url::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_ac_url::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_ac_url::clear_packet_id() {
  packet_id_ = 5077;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_ac_url::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_ac_url::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int64 gold = 2;
inline bool packetc2w_ac_url::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_ac_url::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_ac_url::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_ac_url::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 packetc2w_ac_url::gold() const {
  return gold_;
}
inline void packetc2w_ac_url::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 paytype = 3 [default = 1];
inline bool packetc2w_ac_url::has_paytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_ac_url::set_has_paytype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_ac_url::clear_has_paytype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_ac_url::clear_paytype() {
  paytype_ = 1;
  clear_has_paytype();
}
inline ::google::protobuf::int32 packetc2w_ac_url::paytype() const {
  return paytype_;
}
inline void packetc2w_ac_url::set_paytype(::google::protobuf::int32 value) {
  set_has_paytype();
  paytype_ = value;
}

// optional string param = 4;
inline bool packetc2w_ac_url::has_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetc2w_ac_url::set_has_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetc2w_ac_url::clear_has_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetc2w_ac_url::clear_param() {
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    param_->clear();
  }
  clear_has_param();
}
inline const ::std::string& packetc2w_ac_url::param() const {
  return *param_;
}
inline void packetc2w_ac_url::set_param(const ::std::string& value) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(value);
}
inline void packetc2w_ac_url::set_param(const char* value) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(value);
}
inline void packetc2w_ac_url::set_param(const char* value, size_t size) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_ac_url::mutable_param() {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  return param_;
}
inline ::std::string* packetc2w_ac_url::release_param() {
  clear_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param_;
    param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_ac_url::set_allocated_param(::std::string* param) {
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    delete param_;
  }
  if (param) {
    set_has_param();
    param_ = param;
  } else {
    clear_has_param();
    param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetw2c_ac_url_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ac_url_result];
inline bool packetw2c_ac_url_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_ac_url_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_ac_url_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_ac_url_result::clear_packet_id() {
  packet_id_ = 7583;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_ac_url_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_ac_url_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_ac_url_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_ac_url_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_ac_url_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_ac_url_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_ac_url_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_ac_url_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string url = 3;
inline bool packetw2c_ac_url_result::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_ac_url_result::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_ac_url_result::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_ac_url_result::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& packetw2c_ac_url_result::url() const {
  return *url_;
}
inline void packetw2c_ac_url_result::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void packetw2c_ac_url_result::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void packetw2c_ac_url_result::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_ac_url_result::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* packetw2c_ac_url_result::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_ac_url_result::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string order_id = 4;
inline bool packetw2c_ac_url_result::has_order_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_ac_url_result::set_has_order_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_ac_url_result::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_ac_url_result::clear_order_id() {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    order_id_->clear();
  }
  clear_has_order_id();
}
inline const ::std::string& packetw2c_ac_url_result::order_id() const {
  return *order_id_;
}
inline void packetw2c_ac_url_result::set_order_id(const ::std::string& value) {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  order_id_->assign(value);
}
inline void packetw2c_ac_url_result::set_order_id(const char* value) {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  order_id_->assign(value);
}
inline void packetw2c_ac_url_result::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  order_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_ac_url_result::mutable_order_id() {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  return order_id_;
}
inline ::std::string* packetw2c_ac_url_result::release_order_id() {
  clear_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_id_;
    order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_ac_url_result::set_allocated_order_id(::std::string* order_id) {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete order_id_;
  }
  if (order_id) {
    set_has_order_id();
    order_id_ = order_id;
  } else {
    clear_has_order_id();
    order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool is_webview = 5 [default = false];
inline bool packetw2c_ac_url_result::has_is_webview() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetw2c_ac_url_result::set_has_is_webview() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetw2c_ac_url_result::clear_has_is_webview() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetw2c_ac_url_result::clear_is_webview() {
  is_webview_ = false;
  clear_has_is_webview();
}
inline bool packetw2c_ac_url_result::is_webview() const {
  return is_webview_;
}
inline void packetw2c_ac_url_result::set_is_webview(bool value) {
  set_has_is_webview();
  is_webview_ = value;
}

// -------------------------------------------------------------------

// packetc2w_ask_check_payment

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_check_payment];
inline bool packetc2w_ask_check_payment::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_ask_check_payment::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_ask_check_payment::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_ask_check_payment::clear_packet_id() {
  packet_id_ = 5006;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_ask_check_payment::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_ask_check_payment::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional string orderid = 2;
inline bool packetc2w_ask_check_payment::has_orderid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_ask_check_payment::set_has_orderid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_ask_check_payment::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_ask_check_payment::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& packetc2w_ask_check_payment::orderid() const {
  return *orderid_;
}
inline void packetc2w_ask_check_payment::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void packetc2w_ask_check_payment::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void packetc2w_ask_check_payment::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_ask_check_payment::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* packetc2w_ask_check_payment::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_ask_check_payment::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetc2w_ask_test_payment

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_test_payment];
inline bool packetc2w_ask_test_payment::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_ask_test_payment::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_ask_test_payment::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_ask_test_payment::clear_packet_id() {
  packet_id_ = 5007;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_ask_test_payment::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_ask_test_payment::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 pay_type = 2;
inline bool packetc2w_ask_test_payment::has_pay_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_ask_test_payment::set_has_pay_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_ask_test_payment::clear_has_pay_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_ask_test_payment::clear_pay_type() {
  pay_type_ = 0;
  clear_has_pay_type();
}
inline ::google::protobuf::int32 packetc2w_ask_test_payment::pay_type() const {
  return pay_type_;
}
inline void packetc2w_ask_test_payment::set_pay_type(::google::protobuf::int32 value) {
  set_has_pay_type();
  pay_type_ = value;
}

// optional int32 pay_value = 3;
inline bool packetc2w_ask_test_payment::has_pay_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_ask_test_payment::set_has_pay_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_ask_test_payment::clear_has_pay_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_ask_test_payment::clear_pay_value() {
  pay_value_ = 0;
  clear_has_pay_value();
}
inline ::google::protobuf::int32 packetc2w_ask_test_payment::pay_value() const {
  return pay_value_;
}
inline void packetc2w_ask_test_payment::set_pay_value(::google::protobuf::int32 value) {
  set_has_pay_value();
  pay_value_ = value;
}

// -------------------------------------------------------------------

// packetw2c_ask_check_payment_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_check_payment_result];
inline bool packetw2c_ask_check_payment_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_ask_check_payment_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_ask_check_payment_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_ask_check_payment_result::clear_packet_id() {
  packet_id_ = 7506;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_ask_check_payment_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_ask_check_payment_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_ask_check_payment_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_ask_check_payment_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_ask_check_payment_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_ask_check_payment_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_ask_check_payment_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_ask_check_payment_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 pay_type = 3;
inline bool packetw2c_ask_check_payment_result::has_pay_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_ask_check_payment_result::set_has_pay_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_ask_check_payment_result::clear_has_pay_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_ask_check_payment_result::clear_pay_type() {
  pay_type_ = 0;
  clear_has_pay_type();
}
inline ::google::protobuf::int32 packetw2c_ask_check_payment_result::pay_type() const {
  return pay_type_;
}
inline void packetw2c_ask_check_payment_result::set_pay_type(::google::protobuf::int32 value) {
  set_has_pay_type();
  pay_type_ = value;
}

// optional int32 pay_value = 4;
inline bool packetw2c_ask_check_payment_result::has_pay_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_ask_check_payment_result::set_has_pay_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_ask_check_payment_result::clear_has_pay_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_ask_check_payment_result::clear_pay_value() {
  pay_value_ = 0;
  clear_has_pay_value();
}
inline ::google::protobuf::int32 packetw2c_ask_check_payment_result::pay_value() const {
  return pay_value_;
}
inline void packetw2c_ask_check_payment_result::set_pay_value(::google::protobuf::int32 value) {
  set_has_pay_value();
  pay_value_ = value;
}

// optional int32 vip_exp = 5;
inline bool packetw2c_ask_check_payment_result::has_vip_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetw2c_ask_check_payment_result::set_has_vip_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetw2c_ask_check_payment_result::clear_has_vip_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetw2c_ask_check_payment_result::clear_vip_exp() {
  vip_exp_ = 0;
  clear_has_vip_exp();
}
inline ::google::protobuf::int32 packetw2c_ask_check_payment_result::vip_exp() const {
  return vip_exp_;
}
inline void packetw2c_ask_check_payment_result::set_vip_exp(::google::protobuf::int32 value) {
  set_has_vip_exp();
  vip_exp_ = value;
}

// optional string orderid = 6;
inline bool packetw2c_ask_check_payment_result::has_orderid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetw2c_ask_check_payment_result::set_has_orderid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetw2c_ask_check_payment_result::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetw2c_ask_check_payment_result::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& packetw2c_ask_check_payment_result::orderid() const {
  return *orderid_;
}
inline void packetw2c_ask_check_payment_result::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void packetw2c_ask_check_payment_result::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void packetw2c_ask_check_payment_result::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_ask_check_payment_result::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* packetw2c_ask_check_payment_result::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_ask_check_payment_result::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetw2c_bind_reward

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_bind_reward];
inline bool packetw2c_bind_reward::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_bind_reward::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_bind_reward::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_bind_reward::clear_packet_id() {
  packet_id_ = 7589;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_bind_reward::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_bind_reward::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 reward_gold = 2;
inline bool packetw2c_bind_reward::has_reward_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_bind_reward::set_has_reward_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_bind_reward::clear_has_reward_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_bind_reward::clear_reward_gold() {
  reward_gold_ = 0;
  clear_has_reward_gold();
}
inline ::google::protobuf::int32 packetw2c_bind_reward::reward_gold() const {
  return reward_gold_;
}
inline void packetw2c_bind_reward::set_reward_gold(::google::protobuf::int32 value) {
  set_has_reward_gold();
  reward_gold_ = value;
}

// -------------------------------------------------------------------

// msg_some_info

// optional string id = 1;
inline bool msg_some_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_some_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_some_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_some_info::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& msg_some_info::id() const {
  return *id_;
}
inline void msg_some_info::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void msg_some_info::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void msg_some_info::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_some_info::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* msg_some_info::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_some_info::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 userId = 2;
inline bool msg_some_info::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_some_info::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_some_info::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_some_info::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 msg_some_info::userid() const {
  return userid_;
}
inline void msg_some_info::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int64 timeValue = 3;
inline bool msg_some_info::has_timevalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_some_info::set_has_timevalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_some_info::clear_has_timevalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_some_info::clear_timevalue() {
  timevalue_ = GOOGLE_LONGLONG(0);
  clear_has_timevalue();
}
inline ::google::protobuf::int64 msg_some_info::timevalue() const {
  return timevalue_;
}
inline void msg_some_info::set_timevalue(::google::protobuf::int64 value) {
  set_has_timevalue();
  timevalue_ = value;
}

// optional string msgInfo = 4;
inline bool msg_some_info::has_msginfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_some_info::set_has_msginfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_some_info::clear_has_msginfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_some_info::clear_msginfo() {
  if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
    msginfo_->clear();
  }
  clear_has_msginfo();
}
inline const ::std::string& msg_some_info::msginfo() const {
  return *msginfo_;
}
inline void msg_some_info::set_msginfo(const ::std::string& value) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(value);
}
inline void msg_some_info::set_msginfo(const char* value) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(value);
}
inline void msg_some_info::set_msginfo(const char* value, size_t size) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_some_info::mutable_msginfo() {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  return msginfo_;
}
inline ::std::string* msg_some_info::release_msginfo() {
  clear_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msginfo_;
    msginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_some_info::set_allocated_msginfo(::std::string* msginfo) {
  if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
    delete msginfo_;
  }
  if (msginfo) {
    set_has_msginfo();
    msginfo_ = msginfo;
  } else {
    clear_has_msginfo();
    msginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 read = 5;
inline bool msg_some_info::has_read() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_some_info::set_has_read() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_some_info::clear_has_read() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_some_info::clear_read() {
  read_ = 0;
  clear_has_read();
}
inline ::google::protobuf::int32 msg_some_info::read() const {
  return read_;
}
inline void msg_some_info::set_read(::google::protobuf::int32 value) {
  set_has_read();
  read_ = value;
}

// repeated .msg_info_def.msg_item items = 6;
inline int msg_some_info::items_size() const {
  return items_.size();
}
inline void msg_some_info::clear_items() {
  items_.Clear();
}
inline const ::msg_info_def::msg_item& msg_some_info::items(int index) const {
  return items_.Get(index);
}
inline ::msg_info_def::msg_item* msg_some_info::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::msg_info_def::msg_item* msg_some_info::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_item >&
msg_some_info::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_item >*
msg_some_info::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// packetc2w_ask_message

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_message];
inline bool packetc2w_ask_message::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_ask_message::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_ask_message::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_ask_message::clear_packet_id() {
  packet_id_ = 5080;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_ask_message::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_ask_message::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_ask_message_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_message_result];
inline bool packetw2c_ask_message_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_ask_message_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_ask_message_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_ask_message_result::clear_packet_id() {
  packet_id_ = 7586;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_ask_message_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_ask_message_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional bool result = 2 [default = false];
inline bool packetw2c_ask_message_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_ask_message_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_ask_message_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_ask_message_result::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool packetw2c_ask_message_result::result() const {
  return result_;
}
inline void packetw2c_ask_message_result::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// repeated .client2world_protocols.msg_some_info msg_list = 3;
inline int packetw2c_ask_message_result::msg_list_size() const {
  return msg_list_.size();
}
inline void packetw2c_ask_message_result::clear_msg_list() {
  msg_list_.Clear();
}
inline const ::client2world_protocols::msg_some_info& packetw2c_ask_message_result::msg_list(int index) const {
  return msg_list_.Get(index);
}
inline ::client2world_protocols::msg_some_info* packetw2c_ask_message_result::mutable_msg_list(int index) {
  return msg_list_.Mutable(index);
}
inline ::client2world_protocols::msg_some_info* packetw2c_ask_message_result::add_msg_list() {
  return msg_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_some_info >&
packetw2c_ask_message_result::msg_list() const {
  return msg_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_some_info >*
packetw2c_ask_message_result::mutable_msg_list() {
  return &msg_list_;
}

// -------------------------------------------------------------------

// packetc2w_delete_message

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_delete_message];
inline bool packetc2w_delete_message::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_delete_message::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_delete_message::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_delete_message::clear_packet_id() {
  packet_id_ = 5081;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_delete_message::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_delete_message::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated string delete_list = 2;
inline int packetc2w_delete_message::delete_list_size() const {
  return delete_list_.size();
}
inline void packetc2w_delete_message::clear_delete_list() {
  delete_list_.Clear();
}
inline const ::std::string& packetc2w_delete_message::delete_list(int index) const {
  return delete_list_.Get(index);
}
inline ::std::string* packetc2w_delete_message::mutable_delete_list(int index) {
  return delete_list_.Mutable(index);
}
inline void packetc2w_delete_message::set_delete_list(int index, const ::std::string& value) {
  delete_list_.Mutable(index)->assign(value);
}
inline void packetc2w_delete_message::set_delete_list(int index, const char* value) {
  delete_list_.Mutable(index)->assign(value);
}
inline void packetc2w_delete_message::set_delete_list(int index, const char* value, size_t size) {
  delete_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_delete_message::add_delete_list() {
  return delete_list_.Add();
}
inline void packetc2w_delete_message::add_delete_list(const ::std::string& value) {
  delete_list_.Add()->assign(value);
}
inline void packetc2w_delete_message::add_delete_list(const char* value) {
  delete_list_.Add()->assign(value);
}
inline void packetc2w_delete_message::add_delete_list(const char* value, size_t size) {
  delete_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
packetc2w_delete_message::delete_list() const {
  return delete_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
packetc2w_delete_message::mutable_delete_list() {
  return &delete_list_;
}

// -------------------------------------------------------------------

// packetw2c_delete_message_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_delete_message_result];
inline bool packetw2c_delete_message_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_delete_message_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_delete_message_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_delete_message_result::clear_packet_id() {
  packet_id_ = 7587;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_delete_message_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_delete_message_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional bool result = 2 [default = false];
inline bool packetw2c_delete_message_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_delete_message_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_delete_message_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_delete_message_result::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool packetw2c_delete_message_result::result() const {
  return result_;
}
inline void packetw2c_delete_message_result::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2w_read_message

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_read_message];
inline bool packetc2w_read_message::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_read_message::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_read_message::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_read_message::clear_packet_id() {
  packet_id_ = 5082;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_read_message::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_read_message::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional string id = 2;
inline bool packetc2w_read_message::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_read_message::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_read_message::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_read_message::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& packetc2w_read_message::id() const {
  return *id_;
}
inline void packetc2w_read_message::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void packetc2w_read_message::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void packetc2w_read_message::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_read_message::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* packetc2w_read_message::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_read_message::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetw2c_read_message_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_read_message_result];
inline bool packetw2c_read_message_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_read_message_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_read_message_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_read_message_result::clear_packet_id() {
  packet_id_ = 7588;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_read_message_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_read_message_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_read_message_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_read_message_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_read_message_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_read_message_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_read_message_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_read_message_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string id = 3;
inline bool packetw2c_read_message_result::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_read_message_result::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_read_message_result::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_read_message_result::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& packetw2c_read_message_result::id() const {
  return *id_;
}
inline void packetw2c_read_message_result::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void packetw2c_read_message_result::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void packetw2c_read_message_result::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_read_message_result::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* packetw2c_read_message_result::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_read_message_result::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetw2c_picture_verify

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_picture_verify];
inline bool packetw2c_picture_verify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_picture_verify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_picture_verify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_picture_verify::clear_packet_id() {
  packet_id_ = 7593;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_picture_verify::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_picture_verify::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetc2w_picture_verify_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_picture_verify_result];
inline bool packetc2w_picture_verify_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_picture_verify_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_picture_verify_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_picture_verify_result::clear_packet_id() {
  packet_id_ = 5085;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_picture_verify_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_picture_verify_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional string validate = 2;
inline bool packetc2w_picture_verify_result::has_validate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_picture_verify_result::set_has_validate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_picture_verify_result::clear_has_validate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_picture_verify_result::clear_validate() {
  if (validate_ != &::google::protobuf::internal::kEmptyString) {
    validate_->clear();
  }
  clear_has_validate();
}
inline const ::std::string& packetc2w_picture_verify_result::validate() const {
  return *validate_;
}
inline void packetc2w_picture_verify_result::set_validate(const ::std::string& value) {
  set_has_validate();
  if (validate_ == &::google::protobuf::internal::kEmptyString) {
    validate_ = new ::std::string;
  }
  validate_->assign(value);
}
inline void packetc2w_picture_verify_result::set_validate(const char* value) {
  set_has_validate();
  if (validate_ == &::google::protobuf::internal::kEmptyString) {
    validate_ = new ::std::string;
  }
  validate_->assign(value);
}
inline void packetc2w_picture_verify_result::set_validate(const char* value, size_t size) {
  set_has_validate();
  if (validate_ == &::google::protobuf::internal::kEmptyString) {
    validate_ = new ::std::string;
  }
  validate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_picture_verify_result::mutable_validate() {
  set_has_validate();
  if (validate_ == &::google::protobuf::internal::kEmptyString) {
    validate_ = new ::std::string;
  }
  return validate_;
}
inline ::std::string* packetc2w_picture_verify_result::release_validate() {
  clear_has_validate();
  if (validate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = validate_;
    validate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_picture_verify_result::set_allocated_validate(::std::string* validate) {
  if (validate_ != &::google::protobuf::internal::kEmptyString) {
    delete validate_;
  }
  if (validate) {
    set_has_validate();
    validate_ = validate;
  } else {
    clear_has_validate();
    validate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetc2w_ask_report_account

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_report_account];
inline bool packetc2w_ask_report_account::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_ask_report_account::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_ask_report_account::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_ask_report_account::clear_packet_id() {
  packet_id_ = 5086;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_ask_report_account::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_ask_report_account::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_ask_report_account_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_report_account_result];
inline bool packetw2c_ask_report_account_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_ask_report_account_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_ask_report_account_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_ask_report_account_result::clear_packet_id() {
  packet_id_ = 7594;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_ask_report_account_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_ask_report_account_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional string account = 2;
inline bool packetw2c_ask_report_account_result::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_ask_report_account_result::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_ask_report_account_result::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_ask_report_account_result::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& packetw2c_ask_report_account_result::account() const {
  return *account_;
}
inline void packetw2c_ask_report_account_result::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void packetw2c_ask_report_account_result::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void packetw2c_ask_report_account_result::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_ask_report_account_result::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* packetw2c_ask_report_account_result::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_ask_report_account_result::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_faq_def

// optional int32 index = 1;
inline bool msg_faq_def::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_faq_def::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_faq_def::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_faq_def::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 msg_faq_def::index() const {
  return index_;
}
inline void msg_faq_def::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional string text = 2;
inline bool msg_faq_def::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_faq_def::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_faq_def::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_faq_def::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& msg_faq_def::text() const {
  return *text_;
}
inline void msg_faq_def::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void msg_faq_def::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void msg_faq_def::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_faq_def::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* msg_faq_def::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_faq_def::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetc2w_req_faq

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_faq];
inline bool packetc2w_req_faq::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_faq::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_faq::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_faq::clear_packet_id() {
  packet_id_ = 5092;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_faq::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_faq::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_req_faq_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_faq_result];
inline bool packetw2c_req_faq_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_faq_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_faq_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_faq_result::clear_packet_id() {
  packet_id_ = 7601;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_faq_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_faq_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .client2world_protocols.msg_faq_def faq_list = 2;
inline int packetw2c_req_faq_result::faq_list_size() const {
  return faq_list_.size();
}
inline void packetw2c_req_faq_result::clear_faq_list() {
  faq_list_.Clear();
}
inline const ::client2world_protocols::msg_faq_def& packetw2c_req_faq_result::faq_list(int index) const {
  return faq_list_.Get(index);
}
inline ::client2world_protocols::msg_faq_def* packetw2c_req_faq_result::mutable_faq_list(int index) {
  return faq_list_.Mutable(index);
}
inline ::client2world_protocols::msg_faq_def* packetw2c_req_faq_result::add_faq_list() {
  return faq_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_faq_def >&
packetw2c_req_faq_result::faq_list() const {
  return faq_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_faq_def >*
packetw2c_req_faq_result::mutable_faq_list() {
  return &faq_list_;
}

// -------------------------------------------------------------------

// packetc2w_req_faq_detail

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_faq_detail];
inline bool packetc2w_req_faq_detail::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_faq_detail::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_faq_detail::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_faq_detail::clear_packet_id() {
  packet_id_ = 5093;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_faq_detail::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_faq_detail::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 index = 2;
inline bool packetc2w_req_faq_detail::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_req_faq_detail::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_req_faq_detail::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_req_faq_detail::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 packetc2w_req_faq_detail::index() const {
  return index_;
}
inline void packetc2w_req_faq_detail::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// packetw2c_req_faq_detail_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_faq_detail_result];
inline bool packetw2c_req_faq_detail_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_faq_detail_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_faq_detail_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_faq_detail_result::clear_packet_id() {
  packet_id_ = 7602;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_faq_detail_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_faq_detail_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .client2world_protocols.msg_faq_def faq = 2;
inline bool packetw2c_req_faq_detail_result::has_faq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_req_faq_detail_result::set_has_faq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_req_faq_detail_result::clear_has_faq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_req_faq_detail_result::clear_faq() {
  if (faq_ != NULL) faq_->::client2world_protocols::msg_faq_def::Clear();
  clear_has_faq();
}
inline const ::client2world_protocols::msg_faq_def& packetw2c_req_faq_detail_result::faq() const {
  return faq_ != NULL ? *faq_ : *default_instance_->faq_;
}
inline ::client2world_protocols::msg_faq_def* packetw2c_req_faq_detail_result::mutable_faq() {
  set_has_faq();
  if (faq_ == NULL) faq_ = new ::client2world_protocols::msg_faq_def;
  return faq_;
}
inline ::client2world_protocols::msg_faq_def* packetw2c_req_faq_detail_result::release_faq() {
  clear_has_faq();
  ::client2world_protocols::msg_faq_def* temp = faq_;
  faq_ = NULL;
  return temp;
}
inline void packetw2c_req_faq_detail_result::set_allocated_faq(::client2world_protocols::msg_faq_def* faq) {
  delete faq_;
  faq_ = faq;
  if (faq) {
    set_has_faq();
  } else {
    clear_has_faq();
  }
}

// -------------------------------------------------------------------

// packetc2w_req_cs_contact

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_cs_contact];
inline bool packetc2w_req_cs_contact::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_cs_contact::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_cs_contact::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_cs_contact::clear_packet_id() {
  packet_id_ = 5094;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_cs_contact::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_cs_contact::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_req_cs_contact_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_cs_contact_result];
inline bool packetw2c_req_cs_contact_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_cs_contact_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_cs_contact_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_cs_contact_result::clear_packet_id() {
  packet_id_ = 7603;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_cs_contact_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_cs_contact_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional string qq = 2;
inline bool packetw2c_req_cs_contact_result::has_qq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_req_cs_contact_result::set_has_qq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_req_cs_contact_result::clear_has_qq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_req_cs_contact_result::clear_qq() {
  if (qq_ != &::google::protobuf::internal::kEmptyString) {
    qq_->clear();
  }
  clear_has_qq();
}
inline const ::std::string& packetw2c_req_cs_contact_result::qq() const {
  return *qq_;
}
inline void packetw2c_req_cs_contact_result::set_qq(const ::std::string& value) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    qq_ = new ::std::string;
  }
  qq_->assign(value);
}
inline void packetw2c_req_cs_contact_result::set_qq(const char* value) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    qq_ = new ::std::string;
  }
  qq_->assign(value);
}
inline void packetw2c_req_cs_contact_result::set_qq(const char* value, size_t size) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    qq_ = new ::std::string;
  }
  qq_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_req_cs_contact_result::mutable_qq() {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    qq_ = new ::std::string;
  }
  return qq_;
}
inline ::std::string* packetw2c_req_cs_contact_result::release_qq() {
  clear_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qq_;
    qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_req_cs_contact_result::set_allocated_qq(::std::string* qq) {
  if (qq_ != &::google::protobuf::internal::kEmptyString) {
    delete qq_;
  }
  if (qq) {
    set_has_qq();
    qq_ = qq;
  } else {
    clear_has_qq();
    qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetc2w_bind_bank_card

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_bind_bank_card];
inline bool packetc2w_bind_bank_card::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_bind_bank_card::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_bind_bank_card::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_bind_bank_card::clear_packet_id() {
  packet_id_ = 5095;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_bind_bank_card::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_bind_bank_card::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional string name = 2;
inline bool packetc2w_bind_bank_card::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_bind_bank_card::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_bind_bank_card::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_bind_bank_card::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& packetc2w_bind_bank_card::name() const {
  return *name_;
}
inline void packetc2w_bind_bank_card::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void packetc2w_bind_bank_card::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void packetc2w_bind_bank_card::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_bind_bank_card::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* packetc2w_bind_bank_card::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_bind_bank_card::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string card_number = 3;
inline bool packetc2w_bind_bank_card::has_card_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_bind_bank_card::set_has_card_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_bind_bank_card::clear_has_card_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_bind_bank_card::clear_card_number() {
  if (card_number_ != &::google::protobuf::internal::kEmptyString) {
    card_number_->clear();
  }
  clear_has_card_number();
}
inline const ::std::string& packetc2w_bind_bank_card::card_number() const {
  return *card_number_;
}
inline void packetc2w_bind_bank_card::set_card_number(const ::std::string& value) {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  card_number_->assign(value);
}
inline void packetc2w_bind_bank_card::set_card_number(const char* value) {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  card_number_->assign(value);
}
inline void packetc2w_bind_bank_card::set_card_number(const char* value, size_t size) {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  card_number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_bind_bank_card::mutable_card_number() {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  return card_number_;
}
inline ::std::string* packetc2w_bind_bank_card::release_card_number() {
  clear_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_number_;
    card_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_bind_bank_card::set_allocated_card_number(::std::string* card_number) {
  if (card_number_ != &::google::protobuf::internal::kEmptyString) {
    delete card_number_;
  }
  if (card_number) {
    set_has_card_number();
    card_number_ = card_number;
  } else {
    clear_has_card_number();
    card_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string identity_number = 4;
inline bool packetc2w_bind_bank_card::has_identity_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetc2w_bind_bank_card::set_has_identity_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetc2w_bind_bank_card::clear_has_identity_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetc2w_bind_bank_card::clear_identity_number() {
  if (identity_number_ != &::google::protobuf::internal::kEmptyString) {
    identity_number_->clear();
  }
  clear_has_identity_number();
}
inline const ::std::string& packetc2w_bind_bank_card::identity_number() const {
  return *identity_number_;
}
inline void packetc2w_bind_bank_card::set_identity_number(const ::std::string& value) {
  set_has_identity_number();
  if (identity_number_ == &::google::protobuf::internal::kEmptyString) {
    identity_number_ = new ::std::string;
  }
  identity_number_->assign(value);
}
inline void packetc2w_bind_bank_card::set_identity_number(const char* value) {
  set_has_identity_number();
  if (identity_number_ == &::google::protobuf::internal::kEmptyString) {
    identity_number_ = new ::std::string;
  }
  identity_number_->assign(value);
}
inline void packetc2w_bind_bank_card::set_identity_number(const char* value, size_t size) {
  set_has_identity_number();
  if (identity_number_ == &::google::protobuf::internal::kEmptyString) {
    identity_number_ = new ::std::string;
  }
  identity_number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_bind_bank_card::mutable_identity_number() {
  set_has_identity_number();
  if (identity_number_ == &::google::protobuf::internal::kEmptyString) {
    identity_number_ = new ::std::string;
  }
  return identity_number_;
}
inline ::std::string* packetc2w_bind_bank_card::release_identity_number() {
  clear_has_identity_number();
  if (identity_number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identity_number_;
    identity_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_bind_bank_card::set_allocated_identity_number(::std::string* identity_number) {
  if (identity_number_ != &::google::protobuf::internal::kEmptyString) {
    delete identity_number_;
  }
  if (identity_number) {
    set_has_identity_number();
    identity_number_ = identity_number;
  } else {
    clear_has_identity_number();
    identity_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bank_name = 5;
inline bool packetc2w_bind_bank_card::has_bank_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetc2w_bind_bank_card::set_has_bank_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetc2w_bind_bank_card::clear_has_bank_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetc2w_bind_bank_card::clear_bank_name() {
  if (bank_name_ != &::google::protobuf::internal::kEmptyString) {
    bank_name_->clear();
  }
  clear_has_bank_name();
}
inline const ::std::string& packetc2w_bind_bank_card::bank_name() const {
  return *bank_name_;
}
inline void packetc2w_bind_bank_card::set_bank_name(const ::std::string& value) {
  set_has_bank_name();
  if (bank_name_ == &::google::protobuf::internal::kEmptyString) {
    bank_name_ = new ::std::string;
  }
  bank_name_->assign(value);
}
inline void packetc2w_bind_bank_card::set_bank_name(const char* value) {
  set_has_bank_name();
  if (bank_name_ == &::google::protobuf::internal::kEmptyString) {
    bank_name_ = new ::std::string;
  }
  bank_name_->assign(value);
}
inline void packetc2w_bind_bank_card::set_bank_name(const char* value, size_t size) {
  set_has_bank_name();
  if (bank_name_ == &::google::protobuf::internal::kEmptyString) {
    bank_name_ = new ::std::string;
  }
  bank_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_bind_bank_card::mutable_bank_name() {
  set_has_bank_name();
  if (bank_name_ == &::google::protobuf::internal::kEmptyString) {
    bank_name_ = new ::std::string;
  }
  return bank_name_;
}
inline ::std::string* packetc2w_bind_bank_card::release_bank_name() {
  clear_has_bank_name();
  if (bank_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bank_name_;
    bank_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_bind_bank_card::set_allocated_bank_name(::std::string* bank_name) {
  if (bank_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_name_;
  }
  if (bank_name) {
    set_has_bank_name();
    bank_name_ = bank_name;
  } else {
    clear_has_bank_name();
    bank_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string card_number2 = 6;
inline bool packetc2w_bind_bank_card::has_card_number2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetc2w_bind_bank_card::set_has_card_number2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetc2w_bind_bank_card::clear_has_card_number2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetc2w_bind_bank_card::clear_card_number2() {
  if (card_number2_ != &::google::protobuf::internal::kEmptyString) {
    card_number2_->clear();
  }
  clear_has_card_number2();
}
inline const ::std::string& packetc2w_bind_bank_card::card_number2() const {
  return *card_number2_;
}
inline void packetc2w_bind_bank_card::set_card_number2(const ::std::string& value) {
  set_has_card_number2();
  if (card_number2_ == &::google::protobuf::internal::kEmptyString) {
    card_number2_ = new ::std::string;
  }
  card_number2_->assign(value);
}
inline void packetc2w_bind_bank_card::set_card_number2(const char* value) {
  set_has_card_number2();
  if (card_number2_ == &::google::protobuf::internal::kEmptyString) {
    card_number2_ = new ::std::string;
  }
  card_number2_->assign(value);
}
inline void packetc2w_bind_bank_card::set_card_number2(const char* value, size_t size) {
  set_has_card_number2();
  if (card_number2_ == &::google::protobuf::internal::kEmptyString) {
    card_number2_ = new ::std::string;
  }
  card_number2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_bind_bank_card::mutable_card_number2() {
  set_has_card_number2();
  if (card_number2_ == &::google::protobuf::internal::kEmptyString) {
    card_number2_ = new ::std::string;
  }
  return card_number2_;
}
inline ::std::string* packetc2w_bind_bank_card::release_card_number2() {
  clear_has_card_number2();
  if (card_number2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_number2_;
    card_number2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_bind_bank_card::set_allocated_card_number2(::std::string* card_number2) {
  if (card_number2_ != &::google::protobuf::internal::kEmptyString) {
    delete card_number2_;
  }
  if (card_number2) {
    set_has_card_number2();
    card_number2_ = card_number2;
  } else {
    clear_has_card_number2();
    card_number2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetw2c_bind_bank_card_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_bind_bank_card_result];
inline bool packetw2c_bind_bank_card_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_bind_bank_card_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_bind_bank_card_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_bind_bank_card_result::clear_packet_id() {
  packet_id_ = 7604;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_bind_bank_card_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_bind_bank_card_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_bind_bank_card_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_bind_bank_card_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_bind_bank_card_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_bind_bank_card_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_bind_bank_card_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_bind_bank_card_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string error_info = 3;
inline bool packetw2c_bind_bank_card_result::has_error_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_bind_bank_card_result::set_has_error_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_bind_bank_card_result::clear_has_error_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_bind_bank_card_result::clear_error_info() {
  if (error_info_ != &::google::protobuf::internal::kEmptyString) {
    error_info_->clear();
  }
  clear_has_error_info();
}
inline const ::std::string& packetw2c_bind_bank_card_result::error_info() const {
  return *error_info_;
}
inline void packetw2c_bind_bank_card_result::set_error_info(const ::std::string& value) {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    error_info_ = new ::std::string;
  }
  error_info_->assign(value);
}
inline void packetw2c_bind_bank_card_result::set_error_info(const char* value) {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    error_info_ = new ::std::string;
  }
  error_info_->assign(value);
}
inline void packetw2c_bind_bank_card_result::set_error_info(const char* value, size_t size) {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    error_info_ = new ::std::string;
  }
  error_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_bind_bank_card_result::mutable_error_info() {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    error_info_ = new ::std::string;
  }
  return error_info_;
}
inline ::std::string* packetw2c_bind_bank_card_result::release_error_info() {
  clear_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_info_;
    error_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_bind_bank_card_result::set_allocated_error_info(::std::string* error_info) {
  if (error_info_ != &::google::protobuf::internal::kEmptyString) {
    delete error_info_;
  }
  if (error_info) {
    set_has_error_info();
    error_info_ = error_info;
  } else {
    clear_has_error_info();
    error_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetc2w_req_bank_card

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_bank_card];
inline bool packetc2w_req_bank_card::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_bank_card::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_bank_card::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_bank_card::clear_packet_id() {
  packet_id_ = 5096;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_bank_card::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_bank_card::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_req_bank_card_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_bank_card_result];
inline bool packetw2c_req_bank_card_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_bank_card_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_bank_card_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_bank_card_result::clear_packet_id() {
  packet_id_ = 7605;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_bank_card_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_bank_card_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_req_bank_card_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_req_bank_card_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_req_bank_card_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_req_bank_card_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_req_bank_card_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_req_bank_card_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string name = 3;
inline bool packetw2c_req_bank_card_result::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_req_bank_card_result::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_req_bank_card_result::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_req_bank_card_result::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& packetw2c_req_bank_card_result::name() const {
  return *name_;
}
inline void packetw2c_req_bank_card_result::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void packetw2c_req_bank_card_result::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void packetw2c_req_bank_card_result::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_req_bank_card_result::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* packetw2c_req_bank_card_result::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_req_bank_card_result::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string card_number = 4;
inline bool packetw2c_req_bank_card_result::has_card_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_req_bank_card_result::set_has_card_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_req_bank_card_result::clear_has_card_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_req_bank_card_result::clear_card_number() {
  if (card_number_ != &::google::protobuf::internal::kEmptyString) {
    card_number_->clear();
  }
  clear_has_card_number();
}
inline const ::std::string& packetw2c_req_bank_card_result::card_number() const {
  return *card_number_;
}
inline void packetw2c_req_bank_card_result::set_card_number(const ::std::string& value) {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  card_number_->assign(value);
}
inline void packetw2c_req_bank_card_result::set_card_number(const char* value) {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  card_number_->assign(value);
}
inline void packetw2c_req_bank_card_result::set_card_number(const char* value, size_t size) {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  card_number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_req_bank_card_result::mutable_card_number() {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  return card_number_;
}
inline ::std::string* packetw2c_req_bank_card_result::release_card_number() {
  clear_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_number_;
    card_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_req_bank_card_result::set_allocated_card_number(::std::string* card_number) {
  if (card_number_ != &::google::protobuf::internal::kEmptyString) {
    delete card_number_;
  }
  if (card_number) {
    set_has_card_number();
    card_number_ = card_number;
  } else {
    clear_has_card_number();
    card_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bank_name = 5;
inline bool packetw2c_req_bank_card_result::has_bank_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetw2c_req_bank_card_result::set_has_bank_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetw2c_req_bank_card_result::clear_has_bank_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetw2c_req_bank_card_result::clear_bank_name() {
  if (bank_name_ != &::google::protobuf::internal::kEmptyString) {
    bank_name_->clear();
  }
  clear_has_bank_name();
}
inline const ::std::string& packetw2c_req_bank_card_result::bank_name() const {
  return *bank_name_;
}
inline void packetw2c_req_bank_card_result::set_bank_name(const ::std::string& value) {
  set_has_bank_name();
  if (bank_name_ == &::google::protobuf::internal::kEmptyString) {
    bank_name_ = new ::std::string;
  }
  bank_name_->assign(value);
}
inline void packetw2c_req_bank_card_result::set_bank_name(const char* value) {
  set_has_bank_name();
  if (bank_name_ == &::google::protobuf::internal::kEmptyString) {
    bank_name_ = new ::std::string;
  }
  bank_name_->assign(value);
}
inline void packetw2c_req_bank_card_result::set_bank_name(const char* value, size_t size) {
  set_has_bank_name();
  if (bank_name_ == &::google::protobuf::internal::kEmptyString) {
    bank_name_ = new ::std::string;
  }
  bank_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_req_bank_card_result::mutable_bank_name() {
  set_has_bank_name();
  if (bank_name_ == &::google::protobuf::internal::kEmptyString) {
    bank_name_ = new ::std::string;
  }
  return bank_name_;
}
inline ::std::string* packetw2c_req_bank_card_result::release_bank_name() {
  clear_has_bank_name();
  if (bank_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bank_name_;
    bank_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_req_bank_card_result::set_allocated_bank_name(::std::string* bank_name) {
  if (bank_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_name_;
  }
  if (bank_name) {
    set_has_bank_name();
    bank_name_ = bank_name;
  } else {
    clear_has_bank_name();
    bank_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_suggest

// optional string text = 1;
inline bool msg_suggest::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_suggest::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_suggest::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_suggest::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& msg_suggest::text() const {
  return *text_;
}
inline void msg_suggest::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void msg_suggest::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void msg_suggest::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_suggest::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* msg_suggest::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_suggest::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 time = 2;
inline bool msg_suggest::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_suggest::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_suggest::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_suggest::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 msg_suggest::time() const {
  return time_;
}
inline void msg_suggest::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// packetc2w_suggestion

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_suggestion];
inline bool packetc2w_suggestion::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_suggestion::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_suggestion::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_suggestion::clear_packet_id() {
  packet_id_ = 5097;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_suggestion::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_suggestion::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional string text = 2;
inline bool packetc2w_suggestion::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_suggestion::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_suggestion::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_suggestion::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& packetc2w_suggestion::text() const {
  return *text_;
}
inline void packetc2w_suggestion::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void packetc2w_suggestion::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void packetc2w_suggestion::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_suggestion::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* packetc2w_suggestion::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_suggestion::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetw2c_suggestion_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_suggestion_result];
inline bool packetw2c_suggestion_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_suggestion_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_suggestion_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_suggestion_result::clear_packet_id() {
  packet_id_ = 7606;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_suggestion_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_suggestion_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_suggestion_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_suggestion_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_suggestion_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_suggestion_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_suggestion_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_suggestion_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional .client2world_protocols.msg_suggest suggest = 3;
inline bool packetw2c_suggestion_result::has_suggest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_suggestion_result::set_has_suggest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_suggestion_result::clear_has_suggest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_suggestion_result::clear_suggest() {
  if (suggest_ != NULL) suggest_->::client2world_protocols::msg_suggest::Clear();
  clear_has_suggest();
}
inline const ::client2world_protocols::msg_suggest& packetw2c_suggestion_result::suggest() const {
  return suggest_ != NULL ? *suggest_ : *default_instance_->suggest_;
}
inline ::client2world_protocols::msg_suggest* packetw2c_suggestion_result::mutable_suggest() {
  set_has_suggest();
  if (suggest_ == NULL) suggest_ = new ::client2world_protocols::msg_suggest;
  return suggest_;
}
inline ::client2world_protocols::msg_suggest* packetw2c_suggestion_result::release_suggest() {
  clear_has_suggest();
  ::client2world_protocols::msg_suggest* temp = suggest_;
  suggest_ = NULL;
  return temp;
}
inline void packetw2c_suggestion_result::set_allocated_suggest(::client2world_protocols::msg_suggest* suggest) {
  delete suggest_;
  suggest_ = suggest;
  if (suggest) {
    set_has_suggest();
  } else {
    clear_has_suggest();
  }
}

// -------------------------------------------------------------------

// packetc2w_req_suggest

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_suggest];
inline bool packetc2w_req_suggest::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_suggest::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_suggest::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_suggest::clear_packet_id() {
  packet_id_ = 5098;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_suggest::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_suggest::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_req_suggest_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_suggest_result];
inline bool packetw2c_req_suggest_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_suggest_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_suggest_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_suggest_result::clear_packet_id() {
  packet_id_ = 7607;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_suggest_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_suggest_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .client2world_protocols.msg_suggest list = 2;
inline int packetw2c_req_suggest_result::list_size() const {
  return list_.size();
}
inline void packetw2c_req_suggest_result::clear_list() {
  list_.Clear();
}
inline const ::client2world_protocols::msg_suggest& packetw2c_req_suggest_result::list(int index) const {
  return list_.Get(index);
}
inline ::client2world_protocols::msg_suggest* packetw2c_req_suggest_result::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::client2world_protocols::msg_suggest* packetw2c_req_suggest_result::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_suggest >&
packetw2c_req_suggest_result::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_suggest >*
packetw2c_req_suggest_result::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// msg_bank_info

// optional string code = 1;
inline bool msg_bank_info::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_bank_info::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_bank_info::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_bank_info::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& msg_bank_info::code() const {
  return *code_;
}
inline void msg_bank_info::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void msg_bank_info::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void msg_bank_info::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_bank_info::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* msg_bank_info::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_bank_info::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 2;
inline bool msg_bank_info::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_bank_info::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_bank_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_bank_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& msg_bank_info::name() const {
  return *name_;
}
inline void msg_bank_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void msg_bank_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void msg_bank_info::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_bank_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* msg_bank_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_bank_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool open = 3;
inline bool msg_bank_info::has_open() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_bank_info::set_has_open() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_bank_info::clear_has_open() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_bank_info::clear_open() {
  open_ = false;
  clear_has_open();
}
inline bool msg_bank_info::open() const {
  return open_;
}
inline void msg_bank_info::set_open(bool value) {
  set_has_open();
  open_ = value;
}

// -------------------------------------------------------------------

// packetc2w_req_bank_list

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_bank_list];
inline bool packetc2w_req_bank_list::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_bank_list::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_bank_list::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_bank_list::clear_packet_id() {
  packet_id_ = 5099;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_bank_list::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_bank_list::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_req_bank_list_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_bank_list_result];
inline bool packetw2c_req_bank_list_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_bank_list_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_bank_list_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_bank_list_result::clear_packet_id() {
  packet_id_ = 7608;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_bank_list_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_bank_list_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .client2world_protocols.msg_bank_info bank_list = 2;
inline int packetw2c_req_bank_list_result::bank_list_size() const {
  return bank_list_.size();
}
inline void packetw2c_req_bank_list_result::clear_bank_list() {
  bank_list_.Clear();
}
inline const ::client2world_protocols::msg_bank_info& packetw2c_req_bank_list_result::bank_list(int index) const {
  return bank_list_.Get(index);
}
inline ::client2world_protocols::msg_bank_info* packetw2c_req_bank_list_result::mutable_bank_list(int index) {
  return bank_list_.Mutable(index);
}
inline ::client2world_protocols::msg_bank_info* packetw2c_req_bank_list_result::add_bank_list() {
  return bank_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_bank_info >&
packetw2c_req_bank_list_result::bank_list() const {
  return bank_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_bank_info >*
packetw2c_req_bank_list_result::mutable_bank_list() {
  return &bank_list_;
}

// -------------------------------------------------------------------

// packetc2w_req_sync_gold

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_sync_gold];
inline bool packetc2w_req_sync_gold::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_sync_gold::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_sync_gold::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_sync_gold::clear_packet_id() {
  packet_id_ = 5111;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_sync_gold::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_sync_gold::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_req_sync_gold_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_sync_gold_result];
inline bool packetw2c_req_sync_gold_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_sync_gold_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_sync_gold_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_sync_gold_result::clear_packet_id() {
  packet_id_ = 7622;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_sync_gold_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_sync_gold_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int64 gold = 2;
inline bool packetw2c_req_sync_gold_result::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_req_sync_gold_result::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_req_sync_gold_result::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_req_sync_gold_result::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 packetw2c_req_sync_gold_result::gold() const {
  return gold_;
}
inline void packetw2c_req_sync_gold_result::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client2world_5fprotocol_2eproto__INCLUDED
