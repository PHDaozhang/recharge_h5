// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_redblack_protocol.proto

#ifndef PROTOBUF_game_5fredblack_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_game_5fredblack_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "game_redblack_def.pb.h"
#include "msg_type_def.pb.h"
// @@protoc_insertion_point(includes)

namespace game_redblack_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

class msg_cards_info;
class msg_history_info;
class msg_player_info;
class msg_bet_info;
class msg_result_info;
class msg_scene_info;
class packetc2l_get_scene_info;
class packetl2c_get_scene_info_result;
class packetl2c_bc_scene_prepare_into;
class packetl2c_bc_scene_bet_into;
class packetl2c_bc_sync_scene_bet_into;
class packetl2c_bc_scene_deal_into;
class packetl2c_bc_scene_result_into;
class packetc2l_ask_bet_info;
class packetl2c_bet_info_result;
class packetc2l_ask_continue_bet;
class packetl2c_continue_bet_result;
class packetl2c_enter_player_info;
class packetl2c_leave_player_info;
class packetc2l_game_control;
class packetl2c_game_control_result;
class packetl2c_bc_debuginfo;
class msg_bet_infoex;
class gm_msg_bet_info;
class packetl2c_notice_all_bet_info;

// ===================================================================

class msg_cards_info : public ::google::protobuf::Message {
 public:
  msg_cards_info();
  virtual ~msg_cards_info();

  msg_cards_info(const msg_cards_info& from);

  inline msg_cards_info& operator=(const msg_cards_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_cards_info& default_instance();

  void Swap(msg_cards_info* other);

  // implements Message ----------------------------------------------

  msg_cards_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_cards_info& from);
  void MergeFrom(const msg_cards_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 red_cards = 1;
  inline int red_cards_size() const;
  inline void clear_red_cards();
  static const int kRedCardsFieldNumber = 1;
  inline ::google::protobuf::int32 red_cards(int index) const;
  inline void set_red_cards(int index, ::google::protobuf::int32 value);
  inline void add_red_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      red_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_red_cards();

  // repeated int32 black_cards = 2;
  inline int black_cards_size() const;
  inline void clear_black_cards();
  static const int kBlackCardsFieldNumber = 2;
  inline ::google::protobuf::int32 black_cards(int index) const;
  inline void set_black_cards(int index, ::google::protobuf::int32 value);
  inline void add_black_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      black_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_black_cards();

  // optional int32 red_cards_type = 3;
  inline bool has_red_cards_type() const;
  inline void clear_red_cards_type();
  static const int kRedCardsTypeFieldNumber = 3;
  inline ::google::protobuf::int32 red_cards_type() const;
  inline void set_red_cards_type(::google::protobuf::int32 value);

  // optional int32 black_cards_type = 4;
  inline bool has_black_cards_type() const;
  inline void clear_black_cards_type();
  static const int kBlackCardsTypeFieldNumber = 4;
  inline ::google::protobuf::int32 black_cards_type() const;
  inline void set_black_cards_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.msg_cards_info)
 private:
  inline void set_has_red_cards_type();
  inline void clear_has_red_cards_type();
  inline void set_has_black_cards_type();
  inline void clear_has_black_cards_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > red_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > black_cards_;
  ::google::protobuf::int32 red_cards_type_;
  ::google::protobuf::int32 black_cards_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_cards_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_history_info : public ::google::protobuf::Message {
 public:
  msg_history_info();
  virtual ~msg_history_info();

  msg_history_info(const msg_history_info& from);

  inline msg_history_info& operator=(const msg_history_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_history_info& default_instance();

  void Swap(msg_history_info* other);

  // implements Message ----------------------------------------------

  msg_history_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_history_info& from);
  void MergeFrom(const msg_history_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 winner = 1;
  inline bool has_winner() const;
  inline void clear_winner();
  static const int kWinnerFieldNumber = 1;
  inline ::google::protobuf::int32 winner() const;
  inline void set_winner(::google::protobuf::int32 value);

  // optional int32 cards_type = 2;
  inline bool has_cards_type() const;
  inline void clear_cards_type();
  static const int kCardsTypeFieldNumber = 2;
  inline ::google::protobuf::int32 cards_type() const;
  inline void set_cards_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.msg_history_info)
 private:
  inline void set_has_winner();
  inline void clear_has_winner();
  inline void set_has_cards_type();
  inline void clear_has_cards_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 winner_;
  ::google::protobuf::int32 cards_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_history_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_player_info : public ::google::protobuf::Message {
 public:
  msg_player_info();
  virtual ~msg_player_info();

  msg_player_info(const msg_player_info& from);

  inline msg_player_info& operator=(const msg_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_player_info& default_instance();

  void Swap(msg_player_info* other);

  // implements Message ----------------------------------------------

  msg_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_player_info& from);
  void MergeFrom(const msg_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional int32 head_frame = 3;
  inline bool has_head_frame() const;
  inline void clear_head_frame();
  static const int kHeadFrameFieldNumber = 3;
  inline ::google::protobuf::int32 head_frame() const;
  inline void set_head_frame(::google::protobuf::int32 value);

  // optional string head_custom = 4;
  inline bool has_head_custom() const;
  inline void clear_head_custom();
  static const int kHeadCustomFieldNumber = 4;
  inline const ::std::string& head_custom() const;
  inline void set_head_custom(const ::std::string& value);
  inline void set_head_custom(const char* value);
  inline void set_head_custom(const char* value, size_t size);
  inline ::std::string* mutable_head_custom();
  inline ::std::string* release_head_custom();
  inline void set_allocated_head_custom(::std::string* head_custom);

  // optional int64 player_gold = 5;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 5;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // optional int32 player_sex = 6;
  inline bool has_player_sex() const;
  inline void clear_player_sex();
  static const int kPlayerSexFieldNumber = 6;
  inline ::google::protobuf::int32 player_sex() const;
  inline void set_player_sex(::google::protobuf::int32 value);

  // optional int32 vip_level = 7;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 7;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.msg_player_info)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_head_frame();
  inline void clear_has_head_frame();
  inline void set_has_head_custom();
  inline void clear_has_head_custom();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();
  inline void set_has_player_sex();
  inline void clear_has_player_sex();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_name_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 head_frame_;
  ::std::string* head_custom_;
  ::google::protobuf::int64 player_gold_;
  ::google::protobuf::int32 player_sex_;
  ::google::protobuf::int32 vip_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_player_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_bet_info : public ::google::protobuf::Message {
 public:
  msg_bet_info();
  virtual ~msg_bet_info();

  msg_bet_info(const msg_bet_info& from);

  inline msg_bet_info& operator=(const msg_bet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_bet_info& default_instance();

  void Swap(msg_bet_info* other);

  // implements Message ----------------------------------------------

  msg_bet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_bet_info& from);
  void MergeFrom(const msg_bet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 self_bet_golds = 1;
  inline int self_bet_golds_size() const;
  inline void clear_self_bet_golds();
  static const int kSelfBetGoldsFieldNumber = 1;
  inline ::google::protobuf::int64 self_bet_golds(int index) const;
  inline void set_self_bet_golds(int index, ::google::protobuf::int64 value);
  inline void add_self_bet_golds(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      self_bet_golds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_self_bet_golds();

  // repeated int64 total_bet_golds = 2;
  inline int total_bet_golds_size() const;
  inline void clear_total_bet_golds();
  static const int kTotalBetGoldsFieldNumber = 2;
  inline ::google::protobuf::int64 total_bet_golds(int index) const;
  inline void set_total_bet_golds(int index, ::google::protobuf::int64 value);
  inline void add_total_bet_golds(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      total_bet_golds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_total_bet_golds();

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.msg_bet_info)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > self_bet_golds_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > total_bet_golds_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_bet_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_result_info : public ::google::protobuf::Message {
 public:
  msg_result_info();
  virtual ~msg_result_info();

  msg_result_info(const msg_result_info& from);

  inline msg_result_info& operator=(const msg_result_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_result_info& default_instance();

  void Swap(msg_result_info* other);

  // implements Message ----------------------------------------------

  msg_result_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_result_info& from);
  void MergeFrom(const msg_result_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 winner = 1;
  inline bool has_winner() const;
  inline void clear_winner();
  static const int kWinnerFieldNumber = 1;
  inline ::google::protobuf::int32 winner() const;
  inline void set_winner(::google::protobuf::int32 value);

  // optional int32 cards_type = 2;
  inline bool has_cards_type() const;
  inline void clear_cards_type();
  static const int kCardsTypeFieldNumber = 2;
  inline ::google::protobuf::int32 cards_type() const;
  inline void set_cards_type(::google::protobuf::int32 value);

  // repeated int64 red_win_gold = 3;
  inline int red_win_gold_size() const;
  inline void clear_red_win_gold();
  static const int kRedWinGoldFieldNumber = 3;
  inline ::google::protobuf::int64 red_win_gold(int index) const;
  inline void set_red_win_gold(int index, ::google::protobuf::int64 value);
  inline void add_red_win_gold(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      red_win_gold() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_red_win_gold();

  // repeated int64 black_win_gold = 4;
  inline int black_win_gold_size() const;
  inline void clear_black_win_gold();
  static const int kBlackWinGoldFieldNumber = 4;
  inline ::google::protobuf::int64 black_win_gold(int index) const;
  inline void set_black_win_gold(int index, ::google::protobuf::int64 value);
  inline void add_black_win_gold(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      black_win_gold() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_black_win_gold();

  // repeated int64 special_win_gold = 5;
  inline int special_win_gold_size() const;
  inline void clear_special_win_gold();
  static const int kSpecialWinGoldFieldNumber = 5;
  inline ::google::protobuf::int64 special_win_gold(int index) const;
  inline void set_special_win_gold(int index, ::google::protobuf::int64 value);
  inline void add_special_win_gold(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      special_win_gold() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_special_win_gold();

  // repeated int32 seat_list = 6;
  inline int seat_list_size() const;
  inline void clear_seat_list();
  static const int kSeatListFieldNumber = 6;
  inline ::google::protobuf::int32 seat_list(int index) const;
  inline void set_seat_list(int index, ::google::protobuf::int32 value);
  inline void add_seat_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      seat_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_seat_list();

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.msg_result_info)
 private:
  inline void set_has_winner();
  inline void clear_has_winner();
  inline void set_has_cards_type();
  inline void clear_has_cards_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 winner_;
  ::google::protobuf::int32 cards_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > red_win_gold_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > black_win_gold_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > special_win_gold_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > seat_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_result_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_scene_info : public ::google::protobuf::Message {
 public:
  msg_scene_info();
  virtual ~msg_scene_info();

  msg_scene_info(const msg_scene_info& from);

  inline msg_scene_info& operator=(const msg_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_scene_info& default_instance();

  void Swap(msg_scene_info* other);

  // implements Message ----------------------------------------------

  msg_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_scene_info& from);
  void MergeFrom(const msg_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // optional int32 scene_state = 2;
  inline bool has_scene_state() const;
  inline void clear_scene_state();
  static const int kSceneStateFieldNumber = 2;
  inline ::google::protobuf::int32 scene_state() const;
  inline void set_scene_state(::google::protobuf::int32 value);

  // optional int32 count_down = 3;
  inline bool has_count_down() const;
  inline void clear_count_down();
  static const int kCountDownFieldNumber = 3;
  inline ::google::protobuf::int32 count_down() const;
  inline void set_count_down(::google::protobuf::int32 value);

  // repeated int64 red_bet_golds = 4;
  inline int red_bet_golds_size() const;
  inline void clear_red_bet_golds();
  static const int kRedBetGoldsFieldNumber = 4;
  inline ::google::protobuf::int64 red_bet_golds(int index) const;
  inline void set_red_bet_golds(int index, ::google::protobuf::int64 value);
  inline void add_red_bet_golds(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      red_bet_golds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_red_bet_golds();

  // repeated int64 black_bet_golds = 5;
  inline int black_bet_golds_size() const;
  inline void clear_black_bet_golds();
  static const int kBlackBetGoldsFieldNumber = 5;
  inline ::google::protobuf::int64 black_bet_golds(int index) const;
  inline void set_black_bet_golds(int index, ::google::protobuf::int64 value);
  inline void add_black_bet_golds(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      black_bet_golds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_black_bet_golds();

  // repeated int64 special_bet_golds = 6;
  inline int special_bet_golds_size() const;
  inline void clear_special_bet_golds();
  static const int kSpecialBetGoldsFieldNumber = 6;
  inline ::google::protobuf::int64 special_bet_golds(int index) const;
  inline void set_special_bet_golds(int index, ::google::protobuf::int64 value);
  inline void add_special_bet_golds(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      special_bet_golds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_special_bet_golds();

  // repeated .game_redblack_protocols.msg_player_info player_infos = 7;
  inline int player_infos_size() const;
  inline void clear_player_infos();
  static const int kPlayerInfosFieldNumber = 7;
  inline const ::game_redblack_protocols::msg_player_info& player_infos(int index) const;
  inline ::game_redblack_protocols::msg_player_info* mutable_player_infos(int index);
  inline ::game_redblack_protocols::msg_player_info* add_player_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::game_redblack_protocols::msg_player_info >&
      player_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_redblack_protocols::msg_player_info >*
      mutable_player_infos();

  // repeated int32 seat_list = 8;
  inline int seat_list_size() const;
  inline void clear_seat_list();
  static const int kSeatListFieldNumber = 8;
  inline ::google::protobuf::int32 seat_list(int index) const;
  inline void set_seat_list(int index, ::google::protobuf::int32 value);
  inline void add_seat_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      seat_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_seat_list();

  // optional int32 red_leader_seat = 9 [default = 99];
  inline bool has_red_leader_seat() const;
  inline void clear_red_leader_seat();
  static const int kRedLeaderSeatFieldNumber = 9;
  inline ::google::protobuf::int32 red_leader_seat() const;
  inline void set_red_leader_seat(::google::protobuf::int32 value);

  // optional int32 black_leader_seat = 10 [default = 99];
  inline bool has_black_leader_seat() const;
  inline void clear_black_leader_seat();
  static const int kBlackLeaderSeatFieldNumber = 10;
  inline ::google::protobuf::int32 black_leader_seat() const;
  inline void set_black_leader_seat(::google::protobuf::int32 value);

  // optional .game_redblack_protocols.msg_cards_info cards_info = 11;
  inline bool has_cards_info() const;
  inline void clear_cards_info();
  static const int kCardsInfoFieldNumber = 11;
  inline const ::game_redblack_protocols::msg_cards_info& cards_info() const;
  inline ::game_redblack_protocols::msg_cards_info* mutable_cards_info();
  inline ::game_redblack_protocols::msg_cards_info* release_cards_info();
  inline void set_allocated_cards_info(::game_redblack_protocols::msg_cards_info* cards_info);

  // optional .game_redblack_protocols.msg_result_info result_info = 12;
  inline bool has_result_info() const;
  inline void clear_result_info();
  static const int kResultInfoFieldNumber = 12;
  inline const ::game_redblack_protocols::msg_result_info& result_info() const;
  inline ::game_redblack_protocols::msg_result_info* mutable_result_info();
  inline ::game_redblack_protocols::msg_result_info* release_result_info();
  inline void set_allocated_result_info(::game_redblack_protocols::msg_result_info* result_info);

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.msg_scene_info)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_scene_state();
  inline void clear_has_scene_state();
  inline void set_has_count_down();
  inline void clear_has_count_down();
  inline void set_has_red_leader_seat();
  inline void clear_has_red_leader_seat();
  inline void set_has_black_leader_seat();
  inline void clear_has_black_leader_seat();
  inline void set_has_cards_info();
  inline void clear_has_cards_info();
  inline void set_has_result_info();
  inline void clear_has_result_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 scene_state_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > red_bet_golds_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > black_bet_golds_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > special_bet_golds_;
  ::google::protobuf::int32 count_down_;
  ::google::protobuf::int32 red_leader_seat_;
  ::google::protobuf::RepeatedPtrField< ::game_redblack_protocols::msg_player_info > player_infos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > seat_list_;
  ::game_redblack_protocols::msg_cards_info* cards_info_;
  ::game_redblack_protocols::msg_result_info* result_info_;
  ::google::protobuf::int32 black_leader_seat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_scene_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_scene_info();
  virtual ~packetc2l_get_scene_info();

  packetc2l_get_scene_info(const packetc2l_get_scene_info& from);

  inline packetc2l_get_scene_info& operator=(const packetc2l_get_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_scene_info& default_instance();

  void Swap(packetc2l_get_scene_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_scene_info& from);
  void MergeFrom(const packetc2l_get_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_redblack_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_redblack_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.packetc2l_get_scene_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_get_scene_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_get_scene_info_result();
  virtual ~packetl2c_get_scene_info_result();

  packetl2c_get_scene_info_result(const packetl2c_get_scene_info_result& from);

  inline packetl2c_get_scene_info_result& operator=(const packetl2c_get_scene_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_get_scene_info_result& default_instance();

  void Swap(packetl2c_get_scene_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_get_scene_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_get_scene_info_result& from);
  void MergeFrom(const packetl2c_get_scene_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_redblack_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_redblack_protocols::e_server_msg_type value);

  // optional .game_redblack_protocols.msg_scene_info scene_info = 2;
  inline bool has_scene_info() const;
  inline void clear_scene_info();
  static const int kSceneInfoFieldNumber = 2;
  inline const ::game_redblack_protocols::msg_scene_info& scene_info() const;
  inline ::game_redblack_protocols::msg_scene_info* mutable_scene_info();
  inline ::game_redblack_protocols::msg_scene_info* release_scene_info();
  inline void set_allocated_scene_info(::game_redblack_protocols::msg_scene_info* scene_info);

  // repeated .game_redblack_protocols.msg_history_info history_infos = 3;
  inline int history_infos_size() const;
  inline void clear_history_infos();
  static const int kHistoryInfosFieldNumber = 3;
  inline const ::game_redblack_protocols::msg_history_info& history_infos(int index) const;
  inline ::game_redblack_protocols::msg_history_info* mutable_history_infos(int index);
  inline ::game_redblack_protocols::msg_history_info* add_history_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::game_redblack_protocols::msg_history_info >&
      history_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_redblack_protocols::msg_history_info >*
      mutable_history_infos();

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.packetl2c_get_scene_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_scene_info();
  inline void clear_has_scene_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game_redblack_protocols::msg_scene_info* scene_info_;
  ::google::protobuf::RepeatedPtrField< ::game_redblack_protocols::msg_history_info > history_infos_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_get_scene_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_scene_prepare_into : public ::google::protobuf::Message {
 public:
  packetl2c_bc_scene_prepare_into();
  virtual ~packetl2c_bc_scene_prepare_into();

  packetl2c_bc_scene_prepare_into(const packetl2c_bc_scene_prepare_into& from);

  inline packetl2c_bc_scene_prepare_into& operator=(const packetl2c_bc_scene_prepare_into& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_scene_prepare_into& default_instance();

  void Swap(packetl2c_bc_scene_prepare_into* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_scene_prepare_into* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_scene_prepare_into& from);
  void MergeFrom(const packetl2c_bc_scene_prepare_into& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_prepare_into];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_redblack_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_redblack_protocols::e_server_msg_type value);

  // optional int32 count_down = 2;
  inline bool has_count_down() const;
  inline void clear_count_down();
  static const int kCountDownFieldNumber = 2;
  inline ::google::protobuf::int32 count_down() const;
  inline void set_count_down(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.packetl2c_bc_scene_prepare_into)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_count_down();
  inline void clear_has_count_down();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 count_down_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_scene_prepare_into* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_scene_bet_into : public ::google::protobuf::Message {
 public:
  packetl2c_bc_scene_bet_into();
  virtual ~packetl2c_bc_scene_bet_into();

  packetl2c_bc_scene_bet_into(const packetl2c_bc_scene_bet_into& from);

  inline packetl2c_bc_scene_bet_into& operator=(const packetl2c_bc_scene_bet_into& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_scene_bet_into& default_instance();

  void Swap(packetl2c_bc_scene_bet_into* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_scene_bet_into* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_scene_bet_into& from);
  void MergeFrom(const packetl2c_bc_scene_bet_into& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_bet_into];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_redblack_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_redblack_protocols::e_server_msg_type value);

  // optional int32 count_down = 2;
  inline bool has_count_down() const;
  inline void clear_count_down();
  static const int kCountDownFieldNumber = 2;
  inline ::google::protobuf::int32 count_down() const;
  inline void set_count_down(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.packetl2c_bc_scene_bet_into)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_count_down();
  inline void clear_has_count_down();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 count_down_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_scene_bet_into* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_sync_scene_bet_into : public ::google::protobuf::Message {
 public:
  packetl2c_bc_sync_scene_bet_into();
  virtual ~packetl2c_bc_sync_scene_bet_into();

  packetl2c_bc_sync_scene_bet_into(const packetl2c_bc_sync_scene_bet_into& from);

  inline packetl2c_bc_sync_scene_bet_into& operator=(const packetl2c_bc_sync_scene_bet_into& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_sync_scene_bet_into& default_instance();

  void Swap(packetl2c_bc_sync_scene_bet_into* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_sync_scene_bet_into* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_sync_scene_bet_into& from);
  void MergeFrom(const packetl2c_bc_sync_scene_bet_into& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_scene_bet_into];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_redblack_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_redblack_protocols::e_server_msg_type value);

  // repeated int64 red_bet_golds = 2;
  inline int red_bet_golds_size() const;
  inline void clear_red_bet_golds();
  static const int kRedBetGoldsFieldNumber = 2;
  inline ::google::protobuf::int64 red_bet_golds(int index) const;
  inline void set_red_bet_golds(int index, ::google::protobuf::int64 value);
  inline void add_red_bet_golds(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      red_bet_golds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_red_bet_golds();

  // repeated int64 black_bet_golds = 3;
  inline int black_bet_golds_size() const;
  inline void clear_black_bet_golds();
  static const int kBlackBetGoldsFieldNumber = 3;
  inline ::google::protobuf::int64 black_bet_golds(int index) const;
  inline void set_black_bet_golds(int index, ::google::protobuf::int64 value);
  inline void add_black_bet_golds(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      black_bet_golds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_black_bet_golds();

  // repeated int64 special_bet_golds = 4;
  inline int special_bet_golds_size() const;
  inline void clear_special_bet_golds();
  static const int kSpecialBetGoldsFieldNumber = 4;
  inline ::google::protobuf::int64 special_bet_golds(int index) const;
  inline void set_special_bet_golds(int index, ::google::protobuf::int64 value);
  inline void add_special_bet_golds(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      special_bet_golds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_special_bet_golds();

  // repeated int32 seat_list = 5;
  inline int seat_list_size() const;
  inline void clear_seat_list();
  static const int kSeatListFieldNumber = 5;
  inline ::google::protobuf::int32 seat_list(int index) const;
  inline void set_seat_list(int index, ::google::protobuf::int32 value);
  inline void add_seat_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      seat_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_seat_list();

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.packetl2c_bc_sync_scene_bet_into)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > red_bet_golds_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > black_bet_golds_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > special_bet_golds_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > seat_list_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_sync_scene_bet_into* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_scene_deal_into : public ::google::protobuf::Message {
 public:
  packetl2c_bc_scene_deal_into();
  virtual ~packetl2c_bc_scene_deal_into();

  packetl2c_bc_scene_deal_into(const packetl2c_bc_scene_deal_into& from);

  inline packetl2c_bc_scene_deal_into& operator=(const packetl2c_bc_scene_deal_into& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_scene_deal_into& default_instance();

  void Swap(packetl2c_bc_scene_deal_into* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_scene_deal_into* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_scene_deal_into& from);
  void MergeFrom(const packetl2c_bc_scene_deal_into& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_deal_into];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_redblack_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_redblack_protocols::e_server_msg_type value);

  // optional int32 count_down = 2;
  inline bool has_count_down() const;
  inline void clear_count_down();
  static const int kCountDownFieldNumber = 2;
  inline ::google::protobuf::int32 count_down() const;
  inline void set_count_down(::google::protobuf::int32 value);

  // optional .game_redblack_protocols.msg_cards_info cards_info = 3;
  inline bool has_cards_info() const;
  inline void clear_cards_info();
  static const int kCardsInfoFieldNumber = 3;
  inline const ::game_redblack_protocols::msg_cards_info& cards_info() const;
  inline ::game_redblack_protocols::msg_cards_info* mutable_cards_info();
  inline ::game_redblack_protocols::msg_cards_info* release_cards_info();
  inline void set_allocated_cards_info(::game_redblack_protocols::msg_cards_info* cards_info);

  // optional int32 red_leader_seat = 4 [default = 99];
  inline bool has_red_leader_seat() const;
  inline void clear_red_leader_seat();
  static const int kRedLeaderSeatFieldNumber = 4;
  inline ::google::protobuf::int32 red_leader_seat() const;
  inline void set_red_leader_seat(::google::protobuf::int32 value);

  // optional int32 black_leader_seat = 5 [default = 99];
  inline bool has_black_leader_seat() const;
  inline void clear_black_leader_seat();
  static const int kBlackLeaderSeatFieldNumber = 5;
  inline ::google::protobuf::int32 black_leader_seat() const;
  inline void set_black_leader_seat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.packetl2c_bc_scene_deal_into)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_count_down();
  inline void clear_has_count_down();
  inline void set_has_cards_info();
  inline void clear_has_cards_info();
  inline void set_has_red_leader_seat();
  inline void clear_has_red_leader_seat();
  inline void set_has_black_leader_seat();
  inline void clear_has_black_leader_seat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 count_down_;
  ::game_redblack_protocols::msg_cards_info* cards_info_;
  ::google::protobuf::int32 red_leader_seat_;
  ::google::protobuf::int32 black_leader_seat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_scene_deal_into* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_scene_result_into : public ::google::protobuf::Message {
 public:
  packetl2c_bc_scene_result_into();
  virtual ~packetl2c_bc_scene_result_into();

  packetl2c_bc_scene_result_into(const packetl2c_bc_scene_result_into& from);

  inline packetl2c_bc_scene_result_into& operator=(const packetl2c_bc_scene_result_into& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_scene_result_into& default_instance();

  void Swap(packetl2c_bc_scene_result_into* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_scene_result_into* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_scene_result_into& from);
  void MergeFrom(const packetl2c_bc_scene_result_into& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_result_into];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_redblack_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_redblack_protocols::e_server_msg_type value);

  // optional int32 count_down = 2;
  inline bool has_count_down() const;
  inline void clear_count_down();
  static const int kCountDownFieldNumber = 2;
  inline ::google::protobuf::int32 count_down() const;
  inline void set_count_down(::google::protobuf::int32 value);

  // optional .game_redblack_protocols.msg_result_info result_info = 3;
  inline bool has_result_info() const;
  inline void clear_result_info();
  static const int kResultInfoFieldNumber = 3;
  inline const ::game_redblack_protocols::msg_result_info& result_info() const;
  inline ::game_redblack_protocols::msg_result_info* mutable_result_info();
  inline ::game_redblack_protocols::msg_result_info* release_result_info();
  inline void set_allocated_result_info(::game_redblack_protocols::msg_result_info* result_info);

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.packetl2c_bc_scene_result_into)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_count_down();
  inline void clear_has_count_down();
  inline void set_has_result_info();
  inline void clear_has_result_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 count_down_;
  ::game_redblack_protocols::msg_result_info* result_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_scene_result_into* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_ask_bet_info : public ::google::protobuf::Message {
 public:
  packetc2l_ask_bet_info();
  virtual ~packetc2l_ask_bet_info();

  packetc2l_ask_bet_info(const packetc2l_ask_bet_info& from);

  inline packetc2l_ask_bet_info& operator=(const packetc2l_ask_bet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_ask_bet_info& default_instance();

  void Swap(packetc2l_ask_bet_info* other);

  // implements Message ----------------------------------------------

  packetc2l_ask_bet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_ask_bet_info& from);
  void MergeFrom(const packetc2l_ask_bet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_bet_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_redblack_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_redblack_protocols::e_server_msg_type value);

  // optional int32 bet_index = 2;
  inline bool has_bet_index() const;
  inline void clear_bet_index();
  static const int kBetIndexFieldNumber = 2;
  inline ::google::protobuf::int32 bet_index() const;
  inline void set_bet_index(::google::protobuf::int32 value);

  // optional int32 bet_gold = 3;
  inline bool has_bet_gold() const;
  inline void clear_bet_gold();
  static const int kBetGoldFieldNumber = 3;
  inline ::google::protobuf::int32 bet_gold() const;
  inline void set_bet_gold(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.packetc2l_ask_bet_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_bet_index();
  inline void clear_has_bet_index();
  inline void set_has_bet_gold();
  inline void clear_has_bet_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 bet_index_;
  ::google::protobuf::int32 bet_gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_ask_bet_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bet_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_bet_info_result();
  virtual ~packetl2c_bet_info_result();

  packetl2c_bet_info_result(const packetl2c_bet_info_result& from);

  inline packetl2c_bet_info_result& operator=(const packetl2c_bet_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bet_info_result& default_instance();

  void Swap(packetl2c_bet_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_bet_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bet_info_result& from);
  void MergeFrom(const packetl2c_bet_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_redblack_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_redblack_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 bet_index = 3;
  inline bool has_bet_index() const;
  inline void clear_bet_index();
  static const int kBetIndexFieldNumber = 3;
  inline ::google::protobuf::int32 bet_index() const;
  inline void set_bet_index(::google::protobuf::int32 value);

  // optional int32 bet_gold = 4;
  inline bool has_bet_gold() const;
  inline void clear_bet_gold();
  static const int kBetGoldFieldNumber = 4;
  inline ::google::protobuf::int32 bet_gold() const;
  inline void set_bet_gold(::google::protobuf::int32 value);

  // optional int64 self_gold = 5;
  inline bool has_self_gold() const;
  inline void clear_self_gold();
  static const int kSelfGoldFieldNumber = 5;
  inline ::google::protobuf::int64 self_gold() const;
  inline void set_self_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.packetl2c_bet_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_bet_index();
  inline void clear_has_bet_index();
  inline void set_has_bet_gold();
  inline void clear_has_bet_gold();
  inline void set_has_self_gold();
  inline void clear_has_self_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int32 bet_index_;
  ::google::protobuf::int32 bet_gold_;
  ::google::protobuf::int64 self_gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bet_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_ask_continue_bet : public ::google::protobuf::Message {
 public:
  packetc2l_ask_continue_bet();
  virtual ~packetc2l_ask_continue_bet();

  packetc2l_ask_continue_bet(const packetc2l_ask_continue_bet& from);

  inline packetc2l_ask_continue_bet& operator=(const packetc2l_ask_continue_bet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_ask_continue_bet& default_instance();

  void Swap(packetc2l_ask_continue_bet* other);

  // implements Message ----------------------------------------------

  packetc2l_ask_continue_bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_ask_continue_bet& from);
  void MergeFrom(const packetc2l_ask_continue_bet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_continue_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_redblack_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_redblack_protocols::e_server_msg_type value);

  // repeated int32 bet_golds = 2;
  inline int bet_golds_size() const;
  inline void clear_bet_golds();
  static const int kBetGoldsFieldNumber = 2;
  inline ::google::protobuf::int32 bet_golds(int index) const;
  inline void set_bet_golds(int index, ::google::protobuf::int32 value);
  inline void add_bet_golds(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bet_golds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bet_golds();

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.packetc2l_ask_continue_bet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bet_golds_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_ask_continue_bet* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_continue_bet_result : public ::google::protobuf::Message {
 public:
  packetl2c_continue_bet_result();
  virtual ~packetl2c_continue_bet_result();

  packetl2c_continue_bet_result(const packetl2c_continue_bet_result& from);

  inline packetl2c_continue_bet_result& operator=(const packetl2c_continue_bet_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_continue_bet_result& default_instance();

  void Swap(packetl2c_continue_bet_result* other);

  // implements Message ----------------------------------------------

  packetl2c_continue_bet_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_continue_bet_result& from);
  void MergeFrom(const packetl2c_continue_bet_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_continue_bet_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_redblack_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_redblack_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // repeated int32 bet_golds = 3;
  inline int bet_golds_size() const;
  inline void clear_bet_golds();
  static const int kBetGoldsFieldNumber = 3;
  inline ::google::protobuf::int32 bet_golds(int index) const;
  inline void set_bet_golds(int index, ::google::protobuf::int32 value);
  inline void add_bet_golds(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bet_golds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bet_golds();

  // optional int64 self_gold = 4;
  inline bool has_self_gold() const;
  inline void clear_self_gold();
  static const int kSelfGoldFieldNumber = 4;
  inline ::google::protobuf::int64 self_gold() const;
  inline void set_self_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.packetl2c_continue_bet_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_self_gold();
  inline void clear_has_self_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bet_golds_;
  ::google::protobuf::int64 self_gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_continue_bet_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_enter_player_info : public ::google::protobuf::Message {
 public:
  packetl2c_enter_player_info();
  virtual ~packetl2c_enter_player_info();

  packetl2c_enter_player_info(const packetl2c_enter_player_info& from);

  inline packetl2c_enter_player_info& operator=(const packetl2c_enter_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_enter_player_info& default_instance();

  void Swap(packetl2c_enter_player_info* other);

  // implements Message ----------------------------------------------

  packetl2c_enter_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_enter_player_info& from);
  void MergeFrom(const packetl2c_enter_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_player_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_redblack_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_redblack_protocols::e_server_msg_type value);

  // optional .game_redblack_protocols.msg_player_info player_info = 2;
  inline bool has_player_info() const;
  inline void clear_player_info();
  static const int kPlayerInfoFieldNumber = 2;
  inline const ::game_redblack_protocols::msg_player_info& player_info() const;
  inline ::game_redblack_protocols::msg_player_info* mutable_player_info();
  inline ::game_redblack_protocols::msg_player_info* release_player_info();
  inline void set_allocated_player_info(::game_redblack_protocols::msg_player_info* player_info);

  // optional int32 seat_id = 3;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 3;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.packetl2c_enter_player_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_info();
  inline void clear_has_player_info();
  inline void set_has_seat_id();
  inline void clear_has_seat_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game_redblack_protocols::msg_player_info* player_info_;
  int packet_id_;
  ::google::protobuf::int32 seat_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_enter_player_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_leave_player_info : public ::google::protobuf::Message {
 public:
  packetl2c_leave_player_info();
  virtual ~packetl2c_leave_player_info();

  packetl2c_leave_player_info(const packetl2c_leave_player_info& from);

  inline packetl2c_leave_player_info& operator=(const packetl2c_leave_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_leave_player_info& default_instance();

  void Swap(packetl2c_leave_player_info* other);

  // implements Message ----------------------------------------------

  packetl2c_leave_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_leave_player_info& from);
  void MergeFrom(const packetl2c_leave_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_player_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_redblack_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_redblack_protocols::e_server_msg_type value);

  // optional int32 seat_id = 2;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 2;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.packetl2c_leave_player_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_seat_id();
  inline void clear_has_seat_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 seat_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_leave_player_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_game_control : public ::google::protobuf::Message {
 public:
  packetc2l_game_control();
  virtual ~packetc2l_game_control();

  packetc2l_game_control(const packetc2l_game_control& from);

  inline packetc2l_game_control& operator=(const packetc2l_game_control& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_game_control& default_instance();

  void Swap(packetc2l_game_control* other);

  // implements Message ----------------------------------------------

  packetc2l_game_control* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_game_control& from);
  void MergeFrom(const packetc2l_game_control& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_game_control];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_redblack_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_redblack_protocols::e_server_msg_type value);

  // optional int32 control = 2 [default = 0];
  inline bool has_control() const;
  inline void clear_control();
  static const int kControlFieldNumber = 2;
  inline ::google::protobuf::int32 control() const;
  inline void set_control(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.packetc2l_game_control)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_control();
  inline void clear_has_control();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 control_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_game_control* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_game_control_result : public ::google::protobuf::Message {
 public:
  packetl2c_game_control_result();
  virtual ~packetl2c_game_control_result();

  packetl2c_game_control_result(const packetl2c_game_control_result& from);

  inline packetl2c_game_control_result& operator=(const packetl2c_game_control_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_game_control_result& default_instance();

  void Swap(packetl2c_game_control_result* other);

  // implements Message ----------------------------------------------

  packetl2c_game_control_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_game_control_result& from);
  void MergeFrom(const packetl2c_game_control_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_control_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_redblack_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_redblack_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.packetl2c_game_control_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_game_control_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_debuginfo : public ::google::protobuf::Message {
 public:
  packetl2c_bc_debuginfo();
  virtual ~packetl2c_bc_debuginfo();

  packetl2c_bc_debuginfo(const packetl2c_bc_debuginfo& from);

  inline packetl2c_bc_debuginfo& operator=(const packetl2c_bc_debuginfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_debuginfo& default_instance();

  void Swap(packetl2c_bc_debuginfo* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_debuginfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_debuginfo& from);
  void MergeFrom(const packetl2c_bc_debuginfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_redblack_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_redblack_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int64 total_profit = 3 [default = 0];
  inline bool has_total_profit() const;
  inline void clear_total_profit();
  static const int kTotalProfitFieldNumber = 3;
  inline ::google::protobuf::int64 total_profit() const;
  inline void set_total_profit(::google::protobuf::int64 value);

  // optional int64 total_stock = 4 [default = 0];
  inline bool has_total_stock() const;
  inline void clear_total_stock();
  static const int kTotalStockFieldNumber = 4;
  inline ::google::protobuf::int64 total_stock() const;
  inline void set_total_stock(::google::protobuf::int64 value);

  // optional int64 total_Rate = 6 [default = 0];
  inline bool has_total_rate() const;
  inline void clear_total_rate();
  static const int kTotalRateFieldNumber = 6;
  inline ::google::protobuf::int64 total_rate() const;
  inline void set_total_rate(::google::protobuf::int64 value);

  // optional string debug_infos = 5;
  inline bool has_debug_infos() const;
  inline void clear_debug_infos();
  static const int kDebugInfosFieldNumber = 5;
  inline const ::std::string& debug_infos() const;
  inline void set_debug_infos(const ::std::string& value);
  inline void set_debug_infos(const char* value);
  inline void set_debug_infos(const char* value, size_t size);
  inline ::std::string* mutable_debug_infos();
  inline ::std::string* release_debug_infos();
  inline void set_allocated_debug_infos(::std::string* debug_infos);

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.packetl2c_bc_debuginfo)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_total_profit();
  inline void clear_has_total_profit();
  inline void set_has_total_stock();
  inline void clear_has_total_stock();
  inline void set_has_total_rate();
  inline void clear_has_total_rate();
  inline void set_has_debug_infos();
  inline void clear_has_debug_infos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int64 total_profit_;
  ::google::protobuf::int64 total_stock_;
  ::google::protobuf::int64 total_rate_;
  ::std::string* debug_infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_debuginfo* default_instance_;
};
// -------------------------------------------------------------------

class msg_bet_infoex : public ::google::protobuf::Message {
 public:
  msg_bet_infoex();
  virtual ~msg_bet_infoex();

  msg_bet_infoex(const msg_bet_infoex& from);

  inline msg_bet_infoex& operator=(const msg_bet_infoex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_bet_infoex& default_instance();

  void Swap(msg_bet_infoex* other);

  // implements Message ----------------------------------------------

  msg_bet_infoex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_bet_infoex& from);
  void MergeFrom(const msg_bet_infoex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bet_index = 1;
  inline bool has_bet_index() const;
  inline void clear_bet_index();
  static const int kBetIndexFieldNumber = 1;
  inline ::google::protobuf::int32 bet_index() const;
  inline void set_bet_index(::google::protobuf::int32 value);

  // optional int64 bet_count = 2;
  inline bool has_bet_count() const;
  inline void clear_bet_count();
  static const int kBetCountFieldNumber = 2;
  inline ::google::protobuf::int64 bet_count() const;
  inline void set_bet_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.msg_bet_infoex)
 private:
  inline void set_has_bet_index();
  inline void clear_has_bet_index();
  inline void set_has_bet_count();
  inline void clear_has_bet_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 bet_count_;
  ::google::protobuf::int32 bet_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_bet_infoex* default_instance_;
};
// -------------------------------------------------------------------

class gm_msg_bet_info : public ::google::protobuf::Message {
 public:
  gm_msg_bet_info();
  virtual ~gm_msg_bet_info();

  gm_msg_bet_info(const gm_msg_bet_info& from);

  inline gm_msg_bet_info& operator=(const gm_msg_bet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gm_msg_bet_info& default_instance();

  void Swap(gm_msg_bet_info* other);

  // implements Message ----------------------------------------------

  gm_msg_bet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gm_msg_bet_info& from);
  void MergeFrom(const gm_msg_bet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_redblack_protocols.msg_player_info player_info = 1;
  inline bool has_player_info() const;
  inline void clear_player_info();
  static const int kPlayerInfoFieldNumber = 1;
  inline const ::game_redblack_protocols::msg_player_info& player_info() const;
  inline ::game_redblack_protocols::msg_player_info* mutable_player_info();
  inline ::game_redblack_protocols::msg_player_info* release_player_info();
  inline void set_allocated_player_info(::game_redblack_protocols::msg_player_info* player_info);

  // repeated .game_redblack_protocols.msg_bet_infoex bet_info = 2;
  inline int bet_info_size() const;
  inline void clear_bet_info();
  static const int kBetInfoFieldNumber = 2;
  inline const ::game_redblack_protocols::msg_bet_infoex& bet_info(int index) const;
  inline ::game_redblack_protocols::msg_bet_infoex* mutable_bet_info(int index);
  inline ::game_redblack_protocols::msg_bet_infoex* add_bet_info();
  inline const ::google::protobuf::RepeatedPtrField< ::game_redblack_protocols::msg_bet_infoex >&
      bet_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_redblack_protocols::msg_bet_infoex >*
      mutable_bet_info();

  // optional int32 seat_id = 3;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 3;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.gm_msg_bet_info)
 private:
  inline void set_has_player_info();
  inline void clear_has_player_info();
  inline void set_has_seat_id();
  inline void clear_has_seat_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game_redblack_protocols::msg_player_info* player_info_;
  ::google::protobuf::RepeatedPtrField< ::game_redblack_protocols::msg_bet_infoex > bet_info_;
  ::google::protobuf::int32 seat_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gm_msg_bet_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_all_bet_info : public ::google::protobuf::Message {
 public:
  packetl2c_notice_all_bet_info();
  virtual ~packetl2c_notice_all_bet_info();

  packetl2c_notice_all_bet_info(const packetl2c_notice_all_bet_info& from);

  inline packetl2c_notice_all_bet_info& operator=(const packetl2c_notice_all_bet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_all_bet_info& default_instance();

  void Swap(packetl2c_notice_all_bet_info* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_all_bet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_all_bet_info& from);
  void MergeFrom(const packetl2c_notice_all_bet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_redblack_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_redblack_protocols::e_server_msg_type value);

  // repeated .game_redblack_protocols.gm_msg_bet_info bet_info_list = 2;
  inline int bet_info_list_size() const;
  inline void clear_bet_info_list();
  static const int kBetInfoListFieldNumber = 2;
  inline const ::game_redblack_protocols::gm_msg_bet_info& bet_info_list(int index) const;
  inline ::game_redblack_protocols::gm_msg_bet_info* mutable_bet_info_list(int index);
  inline ::game_redblack_protocols::gm_msg_bet_info* add_bet_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_redblack_protocols::gm_msg_bet_info >&
      bet_info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_redblack_protocols::gm_msg_bet_info >*
      mutable_bet_info_list();

  // @@protoc_insertion_point(class_scope:game_redblack_protocols.packetl2c_notice_all_bet_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_redblack_protocols::gm_msg_bet_info > bet_info_list_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fredblack_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fredblack_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_all_bet_info* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_cards_info

// repeated int32 red_cards = 1;
inline int msg_cards_info::red_cards_size() const {
  return red_cards_.size();
}
inline void msg_cards_info::clear_red_cards() {
  red_cards_.Clear();
}
inline ::google::protobuf::int32 msg_cards_info::red_cards(int index) const {
  return red_cards_.Get(index);
}
inline void msg_cards_info::set_red_cards(int index, ::google::protobuf::int32 value) {
  red_cards_.Set(index, value);
}
inline void msg_cards_info::add_red_cards(::google::protobuf::int32 value) {
  red_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_cards_info::red_cards() const {
  return red_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_cards_info::mutable_red_cards() {
  return &red_cards_;
}

// repeated int32 black_cards = 2;
inline int msg_cards_info::black_cards_size() const {
  return black_cards_.size();
}
inline void msg_cards_info::clear_black_cards() {
  black_cards_.Clear();
}
inline ::google::protobuf::int32 msg_cards_info::black_cards(int index) const {
  return black_cards_.Get(index);
}
inline void msg_cards_info::set_black_cards(int index, ::google::protobuf::int32 value) {
  black_cards_.Set(index, value);
}
inline void msg_cards_info::add_black_cards(::google::protobuf::int32 value) {
  black_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_cards_info::black_cards() const {
  return black_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_cards_info::mutable_black_cards() {
  return &black_cards_;
}

// optional int32 red_cards_type = 3;
inline bool msg_cards_info::has_red_cards_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_cards_info::set_has_red_cards_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_cards_info::clear_has_red_cards_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_cards_info::clear_red_cards_type() {
  red_cards_type_ = 0;
  clear_has_red_cards_type();
}
inline ::google::protobuf::int32 msg_cards_info::red_cards_type() const {
  return red_cards_type_;
}
inline void msg_cards_info::set_red_cards_type(::google::protobuf::int32 value) {
  set_has_red_cards_type();
  red_cards_type_ = value;
}

// optional int32 black_cards_type = 4;
inline bool msg_cards_info::has_black_cards_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_cards_info::set_has_black_cards_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_cards_info::clear_has_black_cards_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_cards_info::clear_black_cards_type() {
  black_cards_type_ = 0;
  clear_has_black_cards_type();
}
inline ::google::protobuf::int32 msg_cards_info::black_cards_type() const {
  return black_cards_type_;
}
inline void msg_cards_info::set_black_cards_type(::google::protobuf::int32 value) {
  set_has_black_cards_type();
  black_cards_type_ = value;
}

// -------------------------------------------------------------------

// msg_history_info

// optional int32 winner = 1;
inline bool msg_history_info::has_winner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_history_info::set_has_winner() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_history_info::clear_has_winner() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_history_info::clear_winner() {
  winner_ = 0;
  clear_has_winner();
}
inline ::google::protobuf::int32 msg_history_info::winner() const {
  return winner_;
}
inline void msg_history_info::set_winner(::google::protobuf::int32 value) {
  set_has_winner();
  winner_ = value;
}

// optional int32 cards_type = 2;
inline bool msg_history_info::has_cards_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_history_info::set_has_cards_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_history_info::clear_has_cards_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_history_info::clear_cards_type() {
  cards_type_ = 0;
  clear_has_cards_type();
}
inline ::google::protobuf::int32 msg_history_info::cards_type() const {
  return cards_type_;
}
inline void msg_history_info::set_cards_type(::google::protobuf::int32 value) {
  set_has_cards_type();
  cards_type_ = value;
}

// -------------------------------------------------------------------

// msg_player_info

// optional int32 player_id = 1;
inline bool msg_player_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_player_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_player_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_player_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_player_info::player_id() const {
  return player_id_;
}
inline void msg_player_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string player_name = 2;
inline bool msg_player_info::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_player_info::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_player_info::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_player_info::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& msg_player_info::player_name() const {
  return *player_name_;
}
inline void msg_player_info::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void msg_player_info::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void msg_player_info::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_player_info::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* msg_player_info::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_player_info::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 head_frame = 3;
inline bool msg_player_info::has_head_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_player_info::set_has_head_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_player_info::clear_has_head_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_player_info::clear_head_frame() {
  head_frame_ = 0;
  clear_has_head_frame();
}
inline ::google::protobuf::int32 msg_player_info::head_frame() const {
  return head_frame_;
}
inline void msg_player_info::set_head_frame(::google::protobuf::int32 value) {
  set_has_head_frame();
  head_frame_ = value;
}

// optional string head_custom = 4;
inline bool msg_player_info::has_head_custom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_player_info::set_has_head_custom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_player_info::clear_has_head_custom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_player_info::clear_head_custom() {
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    head_custom_->clear();
  }
  clear_has_head_custom();
}
inline const ::std::string& msg_player_info::head_custom() const {
  return *head_custom_;
}
inline void msg_player_info::set_head_custom(const ::std::string& value) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(value);
}
inline void msg_player_info::set_head_custom(const char* value) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(value);
}
inline void msg_player_info::set_head_custom(const char* value, size_t size) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_player_info::mutable_head_custom() {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  return head_custom_;
}
inline ::std::string* msg_player_info::release_head_custom() {
  clear_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_custom_;
    head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_player_info::set_allocated_head_custom(::std::string* head_custom) {
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete head_custom_;
  }
  if (head_custom) {
    set_has_head_custom();
    head_custom_ = head_custom;
  } else {
    clear_has_head_custom();
    head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 player_gold = 5;
inline bool msg_player_info::has_player_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_player_info::set_has_player_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_player_info::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_player_info::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 msg_player_info::player_gold() const {
  return player_gold_;
}
inline void msg_player_info::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// optional int32 player_sex = 6;
inline bool msg_player_info::has_player_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_player_info::set_has_player_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_player_info::clear_has_player_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_player_info::clear_player_sex() {
  player_sex_ = 0;
  clear_has_player_sex();
}
inline ::google::protobuf::int32 msg_player_info::player_sex() const {
  return player_sex_;
}
inline void msg_player_info::set_player_sex(::google::protobuf::int32 value) {
  set_has_player_sex();
  player_sex_ = value;
}

// optional int32 vip_level = 7;
inline bool msg_player_info::has_vip_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_player_info::set_has_vip_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_player_info::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_player_info::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 msg_player_info::vip_level() const {
  return vip_level_;
}
inline void msg_player_info::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// -------------------------------------------------------------------

// msg_bet_info

// repeated int64 self_bet_golds = 1;
inline int msg_bet_info::self_bet_golds_size() const {
  return self_bet_golds_.size();
}
inline void msg_bet_info::clear_self_bet_golds() {
  self_bet_golds_.Clear();
}
inline ::google::protobuf::int64 msg_bet_info::self_bet_golds(int index) const {
  return self_bet_golds_.Get(index);
}
inline void msg_bet_info::set_self_bet_golds(int index, ::google::protobuf::int64 value) {
  self_bet_golds_.Set(index, value);
}
inline void msg_bet_info::add_self_bet_golds(::google::protobuf::int64 value) {
  self_bet_golds_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_bet_info::self_bet_golds() const {
  return self_bet_golds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_bet_info::mutable_self_bet_golds() {
  return &self_bet_golds_;
}

// repeated int64 total_bet_golds = 2;
inline int msg_bet_info::total_bet_golds_size() const {
  return total_bet_golds_.size();
}
inline void msg_bet_info::clear_total_bet_golds() {
  total_bet_golds_.Clear();
}
inline ::google::protobuf::int64 msg_bet_info::total_bet_golds(int index) const {
  return total_bet_golds_.Get(index);
}
inline void msg_bet_info::set_total_bet_golds(int index, ::google::protobuf::int64 value) {
  total_bet_golds_.Set(index, value);
}
inline void msg_bet_info::add_total_bet_golds(::google::protobuf::int64 value) {
  total_bet_golds_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_bet_info::total_bet_golds() const {
  return total_bet_golds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_bet_info::mutable_total_bet_golds() {
  return &total_bet_golds_;
}

// -------------------------------------------------------------------

// msg_result_info

// optional int32 winner = 1;
inline bool msg_result_info::has_winner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_result_info::set_has_winner() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_result_info::clear_has_winner() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_result_info::clear_winner() {
  winner_ = 0;
  clear_has_winner();
}
inline ::google::protobuf::int32 msg_result_info::winner() const {
  return winner_;
}
inline void msg_result_info::set_winner(::google::protobuf::int32 value) {
  set_has_winner();
  winner_ = value;
}

// optional int32 cards_type = 2;
inline bool msg_result_info::has_cards_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_result_info::set_has_cards_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_result_info::clear_has_cards_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_result_info::clear_cards_type() {
  cards_type_ = 0;
  clear_has_cards_type();
}
inline ::google::protobuf::int32 msg_result_info::cards_type() const {
  return cards_type_;
}
inline void msg_result_info::set_cards_type(::google::protobuf::int32 value) {
  set_has_cards_type();
  cards_type_ = value;
}

// repeated int64 red_win_gold = 3;
inline int msg_result_info::red_win_gold_size() const {
  return red_win_gold_.size();
}
inline void msg_result_info::clear_red_win_gold() {
  red_win_gold_.Clear();
}
inline ::google::protobuf::int64 msg_result_info::red_win_gold(int index) const {
  return red_win_gold_.Get(index);
}
inline void msg_result_info::set_red_win_gold(int index, ::google::protobuf::int64 value) {
  red_win_gold_.Set(index, value);
}
inline void msg_result_info::add_red_win_gold(::google::protobuf::int64 value) {
  red_win_gold_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_result_info::red_win_gold() const {
  return red_win_gold_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_result_info::mutable_red_win_gold() {
  return &red_win_gold_;
}

// repeated int64 black_win_gold = 4;
inline int msg_result_info::black_win_gold_size() const {
  return black_win_gold_.size();
}
inline void msg_result_info::clear_black_win_gold() {
  black_win_gold_.Clear();
}
inline ::google::protobuf::int64 msg_result_info::black_win_gold(int index) const {
  return black_win_gold_.Get(index);
}
inline void msg_result_info::set_black_win_gold(int index, ::google::protobuf::int64 value) {
  black_win_gold_.Set(index, value);
}
inline void msg_result_info::add_black_win_gold(::google::protobuf::int64 value) {
  black_win_gold_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_result_info::black_win_gold() const {
  return black_win_gold_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_result_info::mutable_black_win_gold() {
  return &black_win_gold_;
}

// repeated int64 special_win_gold = 5;
inline int msg_result_info::special_win_gold_size() const {
  return special_win_gold_.size();
}
inline void msg_result_info::clear_special_win_gold() {
  special_win_gold_.Clear();
}
inline ::google::protobuf::int64 msg_result_info::special_win_gold(int index) const {
  return special_win_gold_.Get(index);
}
inline void msg_result_info::set_special_win_gold(int index, ::google::protobuf::int64 value) {
  special_win_gold_.Set(index, value);
}
inline void msg_result_info::add_special_win_gold(::google::protobuf::int64 value) {
  special_win_gold_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_result_info::special_win_gold() const {
  return special_win_gold_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_result_info::mutable_special_win_gold() {
  return &special_win_gold_;
}

// repeated int32 seat_list = 6;
inline int msg_result_info::seat_list_size() const {
  return seat_list_.size();
}
inline void msg_result_info::clear_seat_list() {
  seat_list_.Clear();
}
inline ::google::protobuf::int32 msg_result_info::seat_list(int index) const {
  return seat_list_.Get(index);
}
inline void msg_result_info::set_seat_list(int index, ::google::protobuf::int32 value) {
  seat_list_.Set(index, value);
}
inline void msg_result_info::add_seat_list(::google::protobuf::int32 value) {
  seat_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_result_info::seat_list() const {
  return seat_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_result_info::mutable_seat_list() {
  return &seat_list_;
}

// -------------------------------------------------------------------

// msg_scene_info

// optional int32 roomid = 1;
inline bool msg_scene_info::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_scene_info::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_scene_info::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_scene_info::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 msg_scene_info::roomid() const {
  return roomid_;
}
inline void msg_scene_info::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional int32 scene_state = 2;
inline bool msg_scene_info::has_scene_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_scene_info::set_has_scene_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_scene_info::clear_has_scene_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_scene_info::clear_scene_state() {
  scene_state_ = 0;
  clear_has_scene_state();
}
inline ::google::protobuf::int32 msg_scene_info::scene_state() const {
  return scene_state_;
}
inline void msg_scene_info::set_scene_state(::google::protobuf::int32 value) {
  set_has_scene_state();
  scene_state_ = value;
}

// optional int32 count_down = 3;
inline bool msg_scene_info::has_count_down() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_scene_info::set_has_count_down() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_scene_info::clear_has_count_down() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_scene_info::clear_count_down() {
  count_down_ = 0;
  clear_has_count_down();
}
inline ::google::protobuf::int32 msg_scene_info::count_down() const {
  return count_down_;
}
inline void msg_scene_info::set_count_down(::google::protobuf::int32 value) {
  set_has_count_down();
  count_down_ = value;
}

// repeated int64 red_bet_golds = 4;
inline int msg_scene_info::red_bet_golds_size() const {
  return red_bet_golds_.size();
}
inline void msg_scene_info::clear_red_bet_golds() {
  red_bet_golds_.Clear();
}
inline ::google::protobuf::int64 msg_scene_info::red_bet_golds(int index) const {
  return red_bet_golds_.Get(index);
}
inline void msg_scene_info::set_red_bet_golds(int index, ::google::protobuf::int64 value) {
  red_bet_golds_.Set(index, value);
}
inline void msg_scene_info::add_red_bet_golds(::google::protobuf::int64 value) {
  red_bet_golds_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_scene_info::red_bet_golds() const {
  return red_bet_golds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_scene_info::mutable_red_bet_golds() {
  return &red_bet_golds_;
}

// repeated int64 black_bet_golds = 5;
inline int msg_scene_info::black_bet_golds_size() const {
  return black_bet_golds_.size();
}
inline void msg_scene_info::clear_black_bet_golds() {
  black_bet_golds_.Clear();
}
inline ::google::protobuf::int64 msg_scene_info::black_bet_golds(int index) const {
  return black_bet_golds_.Get(index);
}
inline void msg_scene_info::set_black_bet_golds(int index, ::google::protobuf::int64 value) {
  black_bet_golds_.Set(index, value);
}
inline void msg_scene_info::add_black_bet_golds(::google::protobuf::int64 value) {
  black_bet_golds_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_scene_info::black_bet_golds() const {
  return black_bet_golds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_scene_info::mutable_black_bet_golds() {
  return &black_bet_golds_;
}

// repeated int64 special_bet_golds = 6;
inline int msg_scene_info::special_bet_golds_size() const {
  return special_bet_golds_.size();
}
inline void msg_scene_info::clear_special_bet_golds() {
  special_bet_golds_.Clear();
}
inline ::google::protobuf::int64 msg_scene_info::special_bet_golds(int index) const {
  return special_bet_golds_.Get(index);
}
inline void msg_scene_info::set_special_bet_golds(int index, ::google::protobuf::int64 value) {
  special_bet_golds_.Set(index, value);
}
inline void msg_scene_info::add_special_bet_golds(::google::protobuf::int64 value) {
  special_bet_golds_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_scene_info::special_bet_golds() const {
  return special_bet_golds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_scene_info::mutable_special_bet_golds() {
  return &special_bet_golds_;
}

// repeated .game_redblack_protocols.msg_player_info player_infos = 7;
inline int msg_scene_info::player_infos_size() const {
  return player_infos_.size();
}
inline void msg_scene_info::clear_player_infos() {
  player_infos_.Clear();
}
inline const ::game_redblack_protocols::msg_player_info& msg_scene_info::player_infos(int index) const {
  return player_infos_.Get(index);
}
inline ::game_redblack_protocols::msg_player_info* msg_scene_info::mutable_player_infos(int index) {
  return player_infos_.Mutable(index);
}
inline ::game_redblack_protocols::msg_player_info* msg_scene_info::add_player_infos() {
  return player_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_redblack_protocols::msg_player_info >&
msg_scene_info::player_infos() const {
  return player_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_redblack_protocols::msg_player_info >*
msg_scene_info::mutable_player_infos() {
  return &player_infos_;
}

// repeated int32 seat_list = 8;
inline int msg_scene_info::seat_list_size() const {
  return seat_list_.size();
}
inline void msg_scene_info::clear_seat_list() {
  seat_list_.Clear();
}
inline ::google::protobuf::int32 msg_scene_info::seat_list(int index) const {
  return seat_list_.Get(index);
}
inline void msg_scene_info::set_seat_list(int index, ::google::protobuf::int32 value) {
  seat_list_.Set(index, value);
}
inline void msg_scene_info::add_seat_list(::google::protobuf::int32 value) {
  seat_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_scene_info::seat_list() const {
  return seat_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_scene_info::mutable_seat_list() {
  return &seat_list_;
}

// optional int32 red_leader_seat = 9 [default = 99];
inline bool msg_scene_info::has_red_leader_seat() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msg_scene_info::set_has_red_leader_seat() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msg_scene_info::clear_has_red_leader_seat() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msg_scene_info::clear_red_leader_seat() {
  red_leader_seat_ = 99;
  clear_has_red_leader_seat();
}
inline ::google::protobuf::int32 msg_scene_info::red_leader_seat() const {
  return red_leader_seat_;
}
inline void msg_scene_info::set_red_leader_seat(::google::protobuf::int32 value) {
  set_has_red_leader_seat();
  red_leader_seat_ = value;
}

// optional int32 black_leader_seat = 10 [default = 99];
inline bool msg_scene_info::has_black_leader_seat() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void msg_scene_info::set_has_black_leader_seat() {
  _has_bits_[0] |= 0x00000200u;
}
inline void msg_scene_info::clear_has_black_leader_seat() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void msg_scene_info::clear_black_leader_seat() {
  black_leader_seat_ = 99;
  clear_has_black_leader_seat();
}
inline ::google::protobuf::int32 msg_scene_info::black_leader_seat() const {
  return black_leader_seat_;
}
inline void msg_scene_info::set_black_leader_seat(::google::protobuf::int32 value) {
  set_has_black_leader_seat();
  black_leader_seat_ = value;
}

// optional .game_redblack_protocols.msg_cards_info cards_info = 11;
inline bool msg_scene_info::has_cards_info() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void msg_scene_info::set_has_cards_info() {
  _has_bits_[0] |= 0x00000400u;
}
inline void msg_scene_info::clear_has_cards_info() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void msg_scene_info::clear_cards_info() {
  if (cards_info_ != NULL) cards_info_->::game_redblack_protocols::msg_cards_info::Clear();
  clear_has_cards_info();
}
inline const ::game_redblack_protocols::msg_cards_info& msg_scene_info::cards_info() const {
  return cards_info_ != NULL ? *cards_info_ : *default_instance_->cards_info_;
}
inline ::game_redblack_protocols::msg_cards_info* msg_scene_info::mutable_cards_info() {
  set_has_cards_info();
  if (cards_info_ == NULL) cards_info_ = new ::game_redblack_protocols::msg_cards_info;
  return cards_info_;
}
inline ::game_redblack_protocols::msg_cards_info* msg_scene_info::release_cards_info() {
  clear_has_cards_info();
  ::game_redblack_protocols::msg_cards_info* temp = cards_info_;
  cards_info_ = NULL;
  return temp;
}
inline void msg_scene_info::set_allocated_cards_info(::game_redblack_protocols::msg_cards_info* cards_info) {
  delete cards_info_;
  cards_info_ = cards_info;
  if (cards_info) {
    set_has_cards_info();
  } else {
    clear_has_cards_info();
  }
}

// optional .game_redblack_protocols.msg_result_info result_info = 12;
inline bool msg_scene_info::has_result_info() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void msg_scene_info::set_has_result_info() {
  _has_bits_[0] |= 0x00000800u;
}
inline void msg_scene_info::clear_has_result_info() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void msg_scene_info::clear_result_info() {
  if (result_info_ != NULL) result_info_->::game_redblack_protocols::msg_result_info::Clear();
  clear_has_result_info();
}
inline const ::game_redblack_protocols::msg_result_info& msg_scene_info::result_info() const {
  return result_info_ != NULL ? *result_info_ : *default_instance_->result_info_;
}
inline ::game_redblack_protocols::msg_result_info* msg_scene_info::mutable_result_info() {
  set_has_result_info();
  if (result_info_ == NULL) result_info_ = new ::game_redblack_protocols::msg_result_info;
  return result_info_;
}
inline ::game_redblack_protocols::msg_result_info* msg_scene_info::release_result_info() {
  clear_has_result_info();
  ::game_redblack_protocols::msg_result_info* temp = result_info_;
  result_info_ = NULL;
  return temp;
}
inline void msg_scene_info::set_allocated_result_info(::game_redblack_protocols::msg_result_info* result_info) {
  delete result_info_;
  result_info_ = result_info;
  if (result_info) {
    set_has_result_info();
  } else {
    clear_has_result_info();
  }
}

// -------------------------------------------------------------------

// packetc2l_get_scene_info

// optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
inline bool packetc2l_get_scene_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_scene_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_scene_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_scene_info::clear_packet_id() {
  packet_id_ = 10001;
  clear_has_packet_id();
}
inline ::game_redblack_protocols::e_server_msg_type packetc2l_get_scene_info::packet_id() const {
  return static_cast< ::game_redblack_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_scene_info::set_packet_id(::game_redblack_protocols::e_server_msg_type value) {
  assert(::game_redblack_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_get_scene_info_result

// optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
inline bool packetl2c_get_scene_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_get_scene_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_get_scene_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_get_scene_info_result::clear_packet_id() {
  packet_id_ = 15001;
  clear_has_packet_id();
}
inline ::game_redblack_protocols::e_server_msg_type packetl2c_get_scene_info_result::packet_id() const {
  return static_cast< ::game_redblack_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_get_scene_info_result::set_packet_id(::game_redblack_protocols::e_server_msg_type value) {
  assert(::game_redblack_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_redblack_protocols.msg_scene_info scene_info = 2;
inline bool packetl2c_get_scene_info_result::has_scene_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_get_scene_info_result::set_has_scene_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_get_scene_info_result::clear_has_scene_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_get_scene_info_result::clear_scene_info() {
  if (scene_info_ != NULL) scene_info_->::game_redblack_protocols::msg_scene_info::Clear();
  clear_has_scene_info();
}
inline const ::game_redblack_protocols::msg_scene_info& packetl2c_get_scene_info_result::scene_info() const {
  return scene_info_ != NULL ? *scene_info_ : *default_instance_->scene_info_;
}
inline ::game_redblack_protocols::msg_scene_info* packetl2c_get_scene_info_result::mutable_scene_info() {
  set_has_scene_info();
  if (scene_info_ == NULL) scene_info_ = new ::game_redblack_protocols::msg_scene_info;
  return scene_info_;
}
inline ::game_redblack_protocols::msg_scene_info* packetl2c_get_scene_info_result::release_scene_info() {
  clear_has_scene_info();
  ::game_redblack_protocols::msg_scene_info* temp = scene_info_;
  scene_info_ = NULL;
  return temp;
}
inline void packetl2c_get_scene_info_result::set_allocated_scene_info(::game_redblack_protocols::msg_scene_info* scene_info) {
  delete scene_info_;
  scene_info_ = scene_info;
  if (scene_info) {
    set_has_scene_info();
  } else {
    clear_has_scene_info();
  }
}

// repeated .game_redblack_protocols.msg_history_info history_infos = 3;
inline int packetl2c_get_scene_info_result::history_infos_size() const {
  return history_infos_.size();
}
inline void packetl2c_get_scene_info_result::clear_history_infos() {
  history_infos_.Clear();
}
inline const ::game_redblack_protocols::msg_history_info& packetl2c_get_scene_info_result::history_infos(int index) const {
  return history_infos_.Get(index);
}
inline ::game_redblack_protocols::msg_history_info* packetl2c_get_scene_info_result::mutable_history_infos(int index) {
  return history_infos_.Mutable(index);
}
inline ::game_redblack_protocols::msg_history_info* packetl2c_get_scene_info_result::add_history_infos() {
  return history_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_redblack_protocols::msg_history_info >&
packetl2c_get_scene_info_result::history_infos() const {
  return history_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_redblack_protocols::msg_history_info >*
packetl2c_get_scene_info_result::mutable_history_infos() {
  return &history_infos_;
}

// -------------------------------------------------------------------

// packetl2c_bc_scene_prepare_into

// optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_prepare_into];
inline bool packetl2c_bc_scene_prepare_into::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_scene_prepare_into::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_scene_prepare_into::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_scene_prepare_into::clear_packet_id() {
  packet_id_ = 15050;
  clear_has_packet_id();
}
inline ::game_redblack_protocols::e_server_msg_type packetl2c_bc_scene_prepare_into::packet_id() const {
  return static_cast< ::game_redblack_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_scene_prepare_into::set_packet_id(::game_redblack_protocols::e_server_msg_type value) {
  assert(::game_redblack_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 count_down = 2;
inline bool packetl2c_bc_scene_prepare_into::has_count_down() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_scene_prepare_into::set_has_count_down() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_scene_prepare_into::clear_has_count_down() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_scene_prepare_into::clear_count_down() {
  count_down_ = 0;
  clear_has_count_down();
}
inline ::google::protobuf::int32 packetl2c_bc_scene_prepare_into::count_down() const {
  return count_down_;
}
inline void packetl2c_bc_scene_prepare_into::set_count_down(::google::protobuf::int32 value) {
  set_has_count_down();
  count_down_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_scene_bet_into

// optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_bet_into];
inline bool packetl2c_bc_scene_bet_into::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_scene_bet_into::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_scene_bet_into::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_scene_bet_into::clear_packet_id() {
  packet_id_ = 15051;
  clear_has_packet_id();
}
inline ::game_redblack_protocols::e_server_msg_type packetl2c_bc_scene_bet_into::packet_id() const {
  return static_cast< ::game_redblack_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_scene_bet_into::set_packet_id(::game_redblack_protocols::e_server_msg_type value) {
  assert(::game_redblack_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 count_down = 2;
inline bool packetl2c_bc_scene_bet_into::has_count_down() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_scene_bet_into::set_has_count_down() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_scene_bet_into::clear_has_count_down() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_scene_bet_into::clear_count_down() {
  count_down_ = 0;
  clear_has_count_down();
}
inline ::google::protobuf::int32 packetl2c_bc_scene_bet_into::count_down() const {
  return count_down_;
}
inline void packetl2c_bc_scene_bet_into::set_count_down(::google::protobuf::int32 value) {
  set_has_count_down();
  count_down_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_sync_scene_bet_into

// optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_scene_bet_into];
inline bool packetl2c_bc_sync_scene_bet_into::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_sync_scene_bet_into::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_sync_scene_bet_into::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_sync_scene_bet_into::clear_packet_id() {
  packet_id_ = 15052;
  clear_has_packet_id();
}
inline ::game_redblack_protocols::e_server_msg_type packetl2c_bc_sync_scene_bet_into::packet_id() const {
  return static_cast< ::game_redblack_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_sync_scene_bet_into::set_packet_id(::game_redblack_protocols::e_server_msg_type value) {
  assert(::game_redblack_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated int64 red_bet_golds = 2;
inline int packetl2c_bc_sync_scene_bet_into::red_bet_golds_size() const {
  return red_bet_golds_.size();
}
inline void packetl2c_bc_sync_scene_bet_into::clear_red_bet_golds() {
  red_bet_golds_.Clear();
}
inline ::google::protobuf::int64 packetl2c_bc_sync_scene_bet_into::red_bet_golds(int index) const {
  return red_bet_golds_.Get(index);
}
inline void packetl2c_bc_sync_scene_bet_into::set_red_bet_golds(int index, ::google::protobuf::int64 value) {
  red_bet_golds_.Set(index, value);
}
inline void packetl2c_bc_sync_scene_bet_into::add_red_bet_golds(::google::protobuf::int64 value) {
  red_bet_golds_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
packetl2c_bc_sync_scene_bet_into::red_bet_golds() const {
  return red_bet_golds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
packetl2c_bc_sync_scene_bet_into::mutable_red_bet_golds() {
  return &red_bet_golds_;
}

// repeated int64 black_bet_golds = 3;
inline int packetl2c_bc_sync_scene_bet_into::black_bet_golds_size() const {
  return black_bet_golds_.size();
}
inline void packetl2c_bc_sync_scene_bet_into::clear_black_bet_golds() {
  black_bet_golds_.Clear();
}
inline ::google::protobuf::int64 packetl2c_bc_sync_scene_bet_into::black_bet_golds(int index) const {
  return black_bet_golds_.Get(index);
}
inline void packetl2c_bc_sync_scene_bet_into::set_black_bet_golds(int index, ::google::protobuf::int64 value) {
  black_bet_golds_.Set(index, value);
}
inline void packetl2c_bc_sync_scene_bet_into::add_black_bet_golds(::google::protobuf::int64 value) {
  black_bet_golds_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
packetl2c_bc_sync_scene_bet_into::black_bet_golds() const {
  return black_bet_golds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
packetl2c_bc_sync_scene_bet_into::mutable_black_bet_golds() {
  return &black_bet_golds_;
}

// repeated int64 special_bet_golds = 4;
inline int packetl2c_bc_sync_scene_bet_into::special_bet_golds_size() const {
  return special_bet_golds_.size();
}
inline void packetl2c_bc_sync_scene_bet_into::clear_special_bet_golds() {
  special_bet_golds_.Clear();
}
inline ::google::protobuf::int64 packetl2c_bc_sync_scene_bet_into::special_bet_golds(int index) const {
  return special_bet_golds_.Get(index);
}
inline void packetl2c_bc_sync_scene_bet_into::set_special_bet_golds(int index, ::google::protobuf::int64 value) {
  special_bet_golds_.Set(index, value);
}
inline void packetl2c_bc_sync_scene_bet_into::add_special_bet_golds(::google::protobuf::int64 value) {
  special_bet_golds_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
packetl2c_bc_sync_scene_bet_into::special_bet_golds() const {
  return special_bet_golds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
packetl2c_bc_sync_scene_bet_into::mutable_special_bet_golds() {
  return &special_bet_golds_;
}

// repeated int32 seat_list = 5;
inline int packetl2c_bc_sync_scene_bet_into::seat_list_size() const {
  return seat_list_.size();
}
inline void packetl2c_bc_sync_scene_bet_into::clear_seat_list() {
  seat_list_.Clear();
}
inline ::google::protobuf::int32 packetl2c_bc_sync_scene_bet_into::seat_list(int index) const {
  return seat_list_.Get(index);
}
inline void packetl2c_bc_sync_scene_bet_into::set_seat_list(int index, ::google::protobuf::int32 value) {
  seat_list_.Set(index, value);
}
inline void packetl2c_bc_sync_scene_bet_into::add_seat_list(::google::protobuf::int32 value) {
  seat_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_bc_sync_scene_bet_into::seat_list() const {
  return seat_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_bc_sync_scene_bet_into::mutable_seat_list() {
  return &seat_list_;
}

// -------------------------------------------------------------------

// packetl2c_bc_scene_deal_into

// optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_deal_into];
inline bool packetl2c_bc_scene_deal_into::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_scene_deal_into::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_scene_deal_into::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_scene_deal_into::clear_packet_id() {
  packet_id_ = 15053;
  clear_has_packet_id();
}
inline ::game_redblack_protocols::e_server_msg_type packetl2c_bc_scene_deal_into::packet_id() const {
  return static_cast< ::game_redblack_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_scene_deal_into::set_packet_id(::game_redblack_protocols::e_server_msg_type value) {
  assert(::game_redblack_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 count_down = 2;
inline bool packetl2c_bc_scene_deal_into::has_count_down() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_scene_deal_into::set_has_count_down() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_scene_deal_into::clear_has_count_down() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_scene_deal_into::clear_count_down() {
  count_down_ = 0;
  clear_has_count_down();
}
inline ::google::protobuf::int32 packetl2c_bc_scene_deal_into::count_down() const {
  return count_down_;
}
inline void packetl2c_bc_scene_deal_into::set_count_down(::google::protobuf::int32 value) {
  set_has_count_down();
  count_down_ = value;
}

// optional .game_redblack_protocols.msg_cards_info cards_info = 3;
inline bool packetl2c_bc_scene_deal_into::has_cards_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_scene_deal_into::set_has_cards_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_scene_deal_into::clear_has_cards_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_scene_deal_into::clear_cards_info() {
  if (cards_info_ != NULL) cards_info_->::game_redblack_protocols::msg_cards_info::Clear();
  clear_has_cards_info();
}
inline const ::game_redblack_protocols::msg_cards_info& packetl2c_bc_scene_deal_into::cards_info() const {
  return cards_info_ != NULL ? *cards_info_ : *default_instance_->cards_info_;
}
inline ::game_redblack_protocols::msg_cards_info* packetl2c_bc_scene_deal_into::mutable_cards_info() {
  set_has_cards_info();
  if (cards_info_ == NULL) cards_info_ = new ::game_redblack_protocols::msg_cards_info;
  return cards_info_;
}
inline ::game_redblack_protocols::msg_cards_info* packetl2c_bc_scene_deal_into::release_cards_info() {
  clear_has_cards_info();
  ::game_redblack_protocols::msg_cards_info* temp = cards_info_;
  cards_info_ = NULL;
  return temp;
}
inline void packetl2c_bc_scene_deal_into::set_allocated_cards_info(::game_redblack_protocols::msg_cards_info* cards_info) {
  delete cards_info_;
  cards_info_ = cards_info;
  if (cards_info) {
    set_has_cards_info();
  } else {
    clear_has_cards_info();
  }
}

// optional int32 red_leader_seat = 4 [default = 99];
inline bool packetl2c_bc_scene_deal_into::has_red_leader_seat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_bc_scene_deal_into::set_has_red_leader_seat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_bc_scene_deal_into::clear_has_red_leader_seat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_bc_scene_deal_into::clear_red_leader_seat() {
  red_leader_seat_ = 99;
  clear_has_red_leader_seat();
}
inline ::google::protobuf::int32 packetl2c_bc_scene_deal_into::red_leader_seat() const {
  return red_leader_seat_;
}
inline void packetl2c_bc_scene_deal_into::set_red_leader_seat(::google::protobuf::int32 value) {
  set_has_red_leader_seat();
  red_leader_seat_ = value;
}

// optional int32 black_leader_seat = 5 [default = 99];
inline bool packetl2c_bc_scene_deal_into::has_black_leader_seat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_bc_scene_deal_into::set_has_black_leader_seat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_bc_scene_deal_into::clear_has_black_leader_seat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_bc_scene_deal_into::clear_black_leader_seat() {
  black_leader_seat_ = 99;
  clear_has_black_leader_seat();
}
inline ::google::protobuf::int32 packetl2c_bc_scene_deal_into::black_leader_seat() const {
  return black_leader_seat_;
}
inline void packetl2c_bc_scene_deal_into::set_black_leader_seat(::google::protobuf::int32 value) {
  set_has_black_leader_seat();
  black_leader_seat_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_scene_result_into

// optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_result_into];
inline bool packetl2c_bc_scene_result_into::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_scene_result_into::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_scene_result_into::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_scene_result_into::clear_packet_id() {
  packet_id_ = 15054;
  clear_has_packet_id();
}
inline ::game_redblack_protocols::e_server_msg_type packetl2c_bc_scene_result_into::packet_id() const {
  return static_cast< ::game_redblack_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_scene_result_into::set_packet_id(::game_redblack_protocols::e_server_msg_type value) {
  assert(::game_redblack_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 count_down = 2;
inline bool packetl2c_bc_scene_result_into::has_count_down() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_scene_result_into::set_has_count_down() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_scene_result_into::clear_has_count_down() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_scene_result_into::clear_count_down() {
  count_down_ = 0;
  clear_has_count_down();
}
inline ::google::protobuf::int32 packetl2c_bc_scene_result_into::count_down() const {
  return count_down_;
}
inline void packetl2c_bc_scene_result_into::set_count_down(::google::protobuf::int32 value) {
  set_has_count_down();
  count_down_ = value;
}

// optional .game_redblack_protocols.msg_result_info result_info = 3;
inline bool packetl2c_bc_scene_result_into::has_result_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_scene_result_into::set_has_result_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_scene_result_into::clear_has_result_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_scene_result_into::clear_result_info() {
  if (result_info_ != NULL) result_info_->::game_redblack_protocols::msg_result_info::Clear();
  clear_has_result_info();
}
inline const ::game_redblack_protocols::msg_result_info& packetl2c_bc_scene_result_into::result_info() const {
  return result_info_ != NULL ? *result_info_ : *default_instance_->result_info_;
}
inline ::game_redblack_protocols::msg_result_info* packetl2c_bc_scene_result_into::mutable_result_info() {
  set_has_result_info();
  if (result_info_ == NULL) result_info_ = new ::game_redblack_protocols::msg_result_info;
  return result_info_;
}
inline ::game_redblack_protocols::msg_result_info* packetl2c_bc_scene_result_into::release_result_info() {
  clear_has_result_info();
  ::game_redblack_protocols::msg_result_info* temp = result_info_;
  result_info_ = NULL;
  return temp;
}
inline void packetl2c_bc_scene_result_into::set_allocated_result_info(::game_redblack_protocols::msg_result_info* result_info) {
  delete result_info_;
  result_info_ = result_info;
  if (result_info) {
    set_has_result_info();
  } else {
    clear_has_result_info();
  }
}

// -------------------------------------------------------------------

// packetc2l_ask_bet_info

// optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_bet_info];
inline bool packetc2l_ask_bet_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_ask_bet_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_ask_bet_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_ask_bet_info::clear_packet_id() {
  packet_id_ = 10011;
  clear_has_packet_id();
}
inline ::game_redblack_protocols::e_server_msg_type packetc2l_ask_bet_info::packet_id() const {
  return static_cast< ::game_redblack_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_ask_bet_info::set_packet_id(::game_redblack_protocols::e_server_msg_type value) {
  assert(::game_redblack_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 bet_index = 2;
inline bool packetc2l_ask_bet_info::has_bet_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_ask_bet_info::set_has_bet_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_ask_bet_info::clear_has_bet_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_ask_bet_info::clear_bet_index() {
  bet_index_ = 0;
  clear_has_bet_index();
}
inline ::google::protobuf::int32 packetc2l_ask_bet_info::bet_index() const {
  return bet_index_;
}
inline void packetc2l_ask_bet_info::set_bet_index(::google::protobuf::int32 value) {
  set_has_bet_index();
  bet_index_ = value;
}

// optional int32 bet_gold = 3;
inline bool packetc2l_ask_bet_info::has_bet_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_ask_bet_info::set_has_bet_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_ask_bet_info::clear_has_bet_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_ask_bet_info::clear_bet_gold() {
  bet_gold_ = 0;
  clear_has_bet_gold();
}
inline ::google::protobuf::int32 packetc2l_ask_bet_info::bet_gold() const {
  return bet_gold_;
}
inline void packetc2l_ask_bet_info::set_bet_gold(::google::protobuf::int32 value) {
  set_has_bet_gold();
  bet_gold_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bet_info_result

// optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_info_result];
inline bool packetl2c_bet_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bet_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bet_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bet_info_result::clear_packet_id() {
  packet_id_ = 15011;
  clear_has_packet_id();
}
inline ::game_redblack_protocols::e_server_msg_type packetl2c_bet_info_result::packet_id() const {
  return static_cast< ::game_redblack_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bet_info_result::set_packet_id(::game_redblack_protocols::e_server_msg_type value) {
  assert(::game_redblack_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_bet_info_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bet_info_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bet_info_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bet_info_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_bet_info_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_bet_info_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 bet_index = 3;
inline bool packetl2c_bet_info_result::has_bet_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bet_info_result::set_has_bet_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bet_info_result::clear_has_bet_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bet_info_result::clear_bet_index() {
  bet_index_ = 0;
  clear_has_bet_index();
}
inline ::google::protobuf::int32 packetl2c_bet_info_result::bet_index() const {
  return bet_index_;
}
inline void packetl2c_bet_info_result::set_bet_index(::google::protobuf::int32 value) {
  set_has_bet_index();
  bet_index_ = value;
}

// optional int32 bet_gold = 4;
inline bool packetl2c_bet_info_result::has_bet_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_bet_info_result::set_has_bet_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_bet_info_result::clear_has_bet_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_bet_info_result::clear_bet_gold() {
  bet_gold_ = 0;
  clear_has_bet_gold();
}
inline ::google::protobuf::int32 packetl2c_bet_info_result::bet_gold() const {
  return bet_gold_;
}
inline void packetl2c_bet_info_result::set_bet_gold(::google::protobuf::int32 value) {
  set_has_bet_gold();
  bet_gold_ = value;
}

// optional int64 self_gold = 5;
inline bool packetl2c_bet_info_result::has_self_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_bet_info_result::set_has_self_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_bet_info_result::clear_has_self_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_bet_info_result::clear_self_gold() {
  self_gold_ = GOOGLE_LONGLONG(0);
  clear_has_self_gold();
}
inline ::google::protobuf::int64 packetl2c_bet_info_result::self_gold() const {
  return self_gold_;
}
inline void packetl2c_bet_info_result::set_self_gold(::google::protobuf::int64 value) {
  set_has_self_gold();
  self_gold_ = value;
}

// -------------------------------------------------------------------

// packetc2l_ask_continue_bet

// optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_continue_bet];
inline bool packetc2l_ask_continue_bet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_ask_continue_bet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_ask_continue_bet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_ask_continue_bet::clear_packet_id() {
  packet_id_ = 10012;
  clear_has_packet_id();
}
inline ::game_redblack_protocols::e_server_msg_type packetc2l_ask_continue_bet::packet_id() const {
  return static_cast< ::game_redblack_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_ask_continue_bet::set_packet_id(::game_redblack_protocols::e_server_msg_type value) {
  assert(::game_redblack_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated int32 bet_golds = 2;
inline int packetc2l_ask_continue_bet::bet_golds_size() const {
  return bet_golds_.size();
}
inline void packetc2l_ask_continue_bet::clear_bet_golds() {
  bet_golds_.Clear();
}
inline ::google::protobuf::int32 packetc2l_ask_continue_bet::bet_golds(int index) const {
  return bet_golds_.Get(index);
}
inline void packetc2l_ask_continue_bet::set_bet_golds(int index, ::google::protobuf::int32 value) {
  bet_golds_.Set(index, value);
}
inline void packetc2l_ask_continue_bet::add_bet_golds(::google::protobuf::int32 value) {
  bet_golds_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetc2l_ask_continue_bet::bet_golds() const {
  return bet_golds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetc2l_ask_continue_bet::mutable_bet_golds() {
  return &bet_golds_;
}

// -------------------------------------------------------------------

// packetl2c_continue_bet_result

// optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_continue_bet_result];
inline bool packetl2c_continue_bet_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_continue_bet_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_continue_bet_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_continue_bet_result::clear_packet_id() {
  packet_id_ = 15012;
  clear_has_packet_id();
}
inline ::game_redblack_protocols::e_server_msg_type packetl2c_continue_bet_result::packet_id() const {
  return static_cast< ::game_redblack_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_continue_bet_result::set_packet_id(::game_redblack_protocols::e_server_msg_type value) {
  assert(::game_redblack_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_continue_bet_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_continue_bet_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_continue_bet_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_continue_bet_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_continue_bet_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_continue_bet_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// repeated int32 bet_golds = 3;
inline int packetl2c_continue_bet_result::bet_golds_size() const {
  return bet_golds_.size();
}
inline void packetl2c_continue_bet_result::clear_bet_golds() {
  bet_golds_.Clear();
}
inline ::google::protobuf::int32 packetl2c_continue_bet_result::bet_golds(int index) const {
  return bet_golds_.Get(index);
}
inline void packetl2c_continue_bet_result::set_bet_golds(int index, ::google::protobuf::int32 value) {
  bet_golds_.Set(index, value);
}
inline void packetl2c_continue_bet_result::add_bet_golds(::google::protobuf::int32 value) {
  bet_golds_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_continue_bet_result::bet_golds() const {
  return bet_golds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_continue_bet_result::mutable_bet_golds() {
  return &bet_golds_;
}

// optional int64 self_gold = 4;
inline bool packetl2c_continue_bet_result::has_self_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_continue_bet_result::set_has_self_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_continue_bet_result::clear_has_self_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_continue_bet_result::clear_self_gold() {
  self_gold_ = GOOGLE_LONGLONG(0);
  clear_has_self_gold();
}
inline ::google::protobuf::int64 packetl2c_continue_bet_result::self_gold() const {
  return self_gold_;
}
inline void packetl2c_continue_bet_result::set_self_gold(::google::protobuf::int64 value) {
  set_has_self_gold();
  self_gold_ = value;
}

// -------------------------------------------------------------------

// packetl2c_enter_player_info

// optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_player_info];
inline bool packetl2c_enter_player_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_enter_player_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_enter_player_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_enter_player_info::clear_packet_id() {
  packet_id_ = 15055;
  clear_has_packet_id();
}
inline ::game_redblack_protocols::e_server_msg_type packetl2c_enter_player_info::packet_id() const {
  return static_cast< ::game_redblack_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_enter_player_info::set_packet_id(::game_redblack_protocols::e_server_msg_type value) {
  assert(::game_redblack_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_redblack_protocols.msg_player_info player_info = 2;
inline bool packetl2c_enter_player_info::has_player_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_enter_player_info::set_has_player_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_enter_player_info::clear_has_player_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_enter_player_info::clear_player_info() {
  if (player_info_ != NULL) player_info_->::game_redblack_protocols::msg_player_info::Clear();
  clear_has_player_info();
}
inline const ::game_redblack_protocols::msg_player_info& packetl2c_enter_player_info::player_info() const {
  return player_info_ != NULL ? *player_info_ : *default_instance_->player_info_;
}
inline ::game_redblack_protocols::msg_player_info* packetl2c_enter_player_info::mutable_player_info() {
  set_has_player_info();
  if (player_info_ == NULL) player_info_ = new ::game_redblack_protocols::msg_player_info;
  return player_info_;
}
inline ::game_redblack_protocols::msg_player_info* packetl2c_enter_player_info::release_player_info() {
  clear_has_player_info();
  ::game_redblack_protocols::msg_player_info* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
inline void packetl2c_enter_player_info::set_allocated_player_info(::game_redblack_protocols::msg_player_info* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    set_has_player_info();
  } else {
    clear_has_player_info();
  }
}

// optional int32 seat_id = 3;
inline bool packetl2c_enter_player_info::has_seat_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_enter_player_info::set_has_seat_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_enter_player_info::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_enter_player_info::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 packetl2c_enter_player_info::seat_id() const {
  return seat_id_;
}
inline void packetl2c_enter_player_info::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_leave_player_info

// optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_player_info];
inline bool packetl2c_leave_player_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_leave_player_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_leave_player_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_leave_player_info::clear_packet_id() {
  packet_id_ = 15056;
  clear_has_packet_id();
}
inline ::game_redblack_protocols::e_server_msg_type packetl2c_leave_player_info::packet_id() const {
  return static_cast< ::game_redblack_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_leave_player_info::set_packet_id(::game_redblack_protocols::e_server_msg_type value) {
  assert(::game_redblack_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 seat_id = 2;
inline bool packetl2c_leave_player_info::has_seat_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_leave_player_info::set_has_seat_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_leave_player_info::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_leave_player_info::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 packetl2c_leave_player_info::seat_id() const {
  return seat_id_;
}
inline void packetl2c_leave_player_info::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_game_control

// optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_game_control];
inline bool packetc2l_game_control::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_game_control::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_game_control::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_game_control::clear_packet_id() {
  packet_id_ = 10013;
  clear_has_packet_id();
}
inline ::game_redblack_protocols::e_server_msg_type packetc2l_game_control::packet_id() const {
  return static_cast< ::game_redblack_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_game_control::set_packet_id(::game_redblack_protocols::e_server_msg_type value) {
  assert(::game_redblack_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 control = 2 [default = 0];
inline bool packetc2l_game_control::has_control() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_game_control::set_has_control() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_game_control::clear_has_control() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_game_control::clear_control() {
  control_ = 0;
  clear_has_control();
}
inline ::google::protobuf::int32 packetc2l_game_control::control() const {
  return control_;
}
inline void packetc2l_game_control::set_control(::google::protobuf::int32 value) {
  set_has_control();
  control_ = value;
}

// -------------------------------------------------------------------

// packetl2c_game_control_result

// optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_control_result];
inline bool packetl2c_game_control_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_game_control_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_game_control_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_game_control_result::clear_packet_id() {
  packet_id_ = 15057;
  clear_has_packet_id();
}
inline ::game_redblack_protocols::e_server_msg_type packetl2c_game_control_result::packet_id() const {
  return static_cast< ::game_redblack_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_game_control_result::set_packet_id(::game_redblack_protocols::e_server_msg_type value) {
  assert(::game_redblack_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
inline bool packetl2c_game_control_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_game_control_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_game_control_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_game_control_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_game_control_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_game_control_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_debuginfo

// optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
inline bool packetl2c_bc_debuginfo::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_debuginfo::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_debuginfo::clear_packet_id() {
  packet_id_ = 15013;
  clear_has_packet_id();
}
inline ::game_redblack_protocols::e_server_msg_type packetl2c_bc_debuginfo::packet_id() const {
  return static_cast< ::game_redblack_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_debuginfo::set_packet_id(::game_redblack_protocols::e_server_msg_type value) {
  assert(::game_redblack_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_bc_debuginfo::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_debuginfo::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_debuginfo::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_debuginfo::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_debuginfo::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int64 total_profit = 3 [default = 0];
inline bool packetl2c_bc_debuginfo::has_total_profit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_total_profit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_debuginfo::clear_has_total_profit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_debuginfo::clear_total_profit() {
  total_profit_ = GOOGLE_LONGLONG(0);
  clear_has_total_profit();
}
inline ::google::protobuf::int64 packetl2c_bc_debuginfo::total_profit() const {
  return total_profit_;
}
inline void packetl2c_bc_debuginfo::set_total_profit(::google::protobuf::int64 value) {
  set_has_total_profit();
  total_profit_ = value;
}

// optional int64 total_stock = 4 [default = 0];
inline bool packetl2c_bc_debuginfo::has_total_stock() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_total_stock() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_bc_debuginfo::clear_has_total_stock() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_bc_debuginfo::clear_total_stock() {
  total_stock_ = GOOGLE_LONGLONG(0);
  clear_has_total_stock();
}
inline ::google::protobuf::int64 packetl2c_bc_debuginfo::total_stock() const {
  return total_stock_;
}
inline void packetl2c_bc_debuginfo::set_total_stock(::google::protobuf::int64 value) {
  set_has_total_stock();
  total_stock_ = value;
}

// optional int64 total_Rate = 6 [default = 0];
inline bool packetl2c_bc_debuginfo::has_total_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_total_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_bc_debuginfo::clear_has_total_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_bc_debuginfo::clear_total_rate() {
  total_rate_ = GOOGLE_LONGLONG(0);
  clear_has_total_rate();
}
inline ::google::protobuf::int64 packetl2c_bc_debuginfo::total_rate() const {
  return total_rate_;
}
inline void packetl2c_bc_debuginfo::set_total_rate(::google::protobuf::int64 value) {
  set_has_total_rate();
  total_rate_ = value;
}

// optional string debug_infos = 5;
inline bool packetl2c_bc_debuginfo::has_debug_infos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_debug_infos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_bc_debuginfo::clear_has_debug_infos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_bc_debuginfo::clear_debug_infos() {
  if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
    debug_infos_->clear();
  }
  clear_has_debug_infos();
}
inline const ::std::string& packetl2c_bc_debuginfo::debug_infos() const {
  return *debug_infos_;
}
inline void packetl2c_bc_debuginfo::set_debug_infos(const ::std::string& value) {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  debug_infos_->assign(value);
}
inline void packetl2c_bc_debuginfo::set_debug_infos(const char* value) {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  debug_infos_->assign(value);
}
inline void packetl2c_bc_debuginfo::set_debug_infos(const char* value, size_t size) {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  debug_infos_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetl2c_bc_debuginfo::mutable_debug_infos() {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  return debug_infos_;
}
inline ::std::string* packetl2c_bc_debuginfo::release_debug_infos() {
  clear_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = debug_infos_;
    debug_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetl2c_bc_debuginfo::set_allocated_debug_infos(::std::string* debug_infos) {
  if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_infos_;
  }
  if (debug_infos) {
    set_has_debug_infos();
    debug_infos_ = debug_infos;
  } else {
    clear_has_debug_infos();
    debug_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_bet_infoex

// optional int32 bet_index = 1;
inline bool msg_bet_infoex::has_bet_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_bet_infoex::set_has_bet_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_bet_infoex::clear_has_bet_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_bet_infoex::clear_bet_index() {
  bet_index_ = 0;
  clear_has_bet_index();
}
inline ::google::protobuf::int32 msg_bet_infoex::bet_index() const {
  return bet_index_;
}
inline void msg_bet_infoex::set_bet_index(::google::protobuf::int32 value) {
  set_has_bet_index();
  bet_index_ = value;
}

// optional int64 bet_count = 2;
inline bool msg_bet_infoex::has_bet_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_bet_infoex::set_has_bet_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_bet_infoex::clear_has_bet_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_bet_infoex::clear_bet_count() {
  bet_count_ = GOOGLE_LONGLONG(0);
  clear_has_bet_count();
}
inline ::google::protobuf::int64 msg_bet_infoex::bet_count() const {
  return bet_count_;
}
inline void msg_bet_infoex::set_bet_count(::google::protobuf::int64 value) {
  set_has_bet_count();
  bet_count_ = value;
}

// -------------------------------------------------------------------

// gm_msg_bet_info

// optional .game_redblack_protocols.msg_player_info player_info = 1;
inline bool gm_msg_bet_info::has_player_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gm_msg_bet_info::set_has_player_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gm_msg_bet_info::clear_has_player_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gm_msg_bet_info::clear_player_info() {
  if (player_info_ != NULL) player_info_->::game_redblack_protocols::msg_player_info::Clear();
  clear_has_player_info();
}
inline const ::game_redblack_protocols::msg_player_info& gm_msg_bet_info::player_info() const {
  return player_info_ != NULL ? *player_info_ : *default_instance_->player_info_;
}
inline ::game_redblack_protocols::msg_player_info* gm_msg_bet_info::mutable_player_info() {
  set_has_player_info();
  if (player_info_ == NULL) player_info_ = new ::game_redblack_protocols::msg_player_info;
  return player_info_;
}
inline ::game_redblack_protocols::msg_player_info* gm_msg_bet_info::release_player_info() {
  clear_has_player_info();
  ::game_redblack_protocols::msg_player_info* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
inline void gm_msg_bet_info::set_allocated_player_info(::game_redblack_protocols::msg_player_info* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    set_has_player_info();
  } else {
    clear_has_player_info();
  }
}

// repeated .game_redblack_protocols.msg_bet_infoex bet_info = 2;
inline int gm_msg_bet_info::bet_info_size() const {
  return bet_info_.size();
}
inline void gm_msg_bet_info::clear_bet_info() {
  bet_info_.Clear();
}
inline const ::game_redblack_protocols::msg_bet_infoex& gm_msg_bet_info::bet_info(int index) const {
  return bet_info_.Get(index);
}
inline ::game_redblack_protocols::msg_bet_infoex* gm_msg_bet_info::mutable_bet_info(int index) {
  return bet_info_.Mutable(index);
}
inline ::game_redblack_protocols::msg_bet_infoex* gm_msg_bet_info::add_bet_info() {
  return bet_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_redblack_protocols::msg_bet_infoex >&
gm_msg_bet_info::bet_info() const {
  return bet_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_redblack_protocols::msg_bet_infoex >*
gm_msg_bet_info::mutable_bet_info() {
  return &bet_info_;
}

// optional int32 seat_id = 3;
inline bool gm_msg_bet_info::has_seat_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gm_msg_bet_info::set_has_seat_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gm_msg_bet_info::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gm_msg_bet_info::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 gm_msg_bet_info::seat_id() const {
  return seat_id_;
}
inline void gm_msg_bet_info::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_notice_all_bet_info

// optional .game_redblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
inline bool packetl2c_notice_all_bet_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_all_bet_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_all_bet_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_all_bet_info::clear_packet_id() {
  packet_id_ = 15014;
  clear_has_packet_id();
}
inline ::game_redblack_protocols::e_server_msg_type packetl2c_notice_all_bet_info::packet_id() const {
  return static_cast< ::game_redblack_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_all_bet_info::set_packet_id(::game_redblack_protocols::e_server_msg_type value) {
  assert(::game_redblack_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_redblack_protocols.gm_msg_bet_info bet_info_list = 2;
inline int packetl2c_notice_all_bet_info::bet_info_list_size() const {
  return bet_info_list_.size();
}
inline void packetl2c_notice_all_bet_info::clear_bet_info_list() {
  bet_info_list_.Clear();
}
inline const ::game_redblack_protocols::gm_msg_bet_info& packetl2c_notice_all_bet_info::bet_info_list(int index) const {
  return bet_info_list_.Get(index);
}
inline ::game_redblack_protocols::gm_msg_bet_info* packetl2c_notice_all_bet_info::mutable_bet_info_list(int index) {
  return bet_info_list_.Mutable(index);
}
inline ::game_redblack_protocols::gm_msg_bet_info* packetl2c_notice_all_bet_info::add_bet_info_list() {
  return bet_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_redblack_protocols::gm_msg_bet_info >&
packetl2c_notice_all_bet_info::bet_info_list() const {
  return bet_info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_redblack_protocols::gm_msg_bet_info >*
packetl2c_notice_all_bet_info::mutable_bet_info_list() {
  return &bet_info_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_redblack_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fredblack_5fprotocol_2eproto__INCLUDED
