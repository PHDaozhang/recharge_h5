// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_other.proto

#ifndef PROTOBUF_client2world_5fother_2eproto__INCLUDED
#define PROTOBUF_client2world_5fother_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client2world_msg_type.pb.h"
#include "msg_type_def.pb.h"
#include "msg_info_def.pb.h"
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client2world_5fother_2eproto();
void protobuf_AssignDesc_client2world_5fother_2eproto();
void protobuf_ShutdownFile_client2world_5fother_2eproto();

class packetc2w_ac_bind;
class packetw2c_ac_bind_result;
class packetc2w_ac_transfer;
class packetw2c_ac_transfer_result;
class packetc2w_ac_url;
class packetw2c_ac_url_result;
class packetc2w_ask_check_payment;
class packetc2w_ask_test_payment;
class packetw2c_ask_check_payment_result;
class msg_bank_info;
class packetc2w_req_bank_list;
class packetw2c_req_bank_list_result;
class packetc2w_bind_bank_card;
class packetw2c_bind_bank_card_result;
class packetc2w_req_bank_card;
class packetw2c_req_bank_card_result;

// ===================================================================

class packetc2w_ac_bind : public ::google::protobuf::Message {
 public:
  packetc2w_ac_bind();
  virtual ~packetc2w_ac_bind();

  packetc2w_ac_bind(const packetc2w_ac_bind& from);

  inline packetc2w_ac_bind& operator=(const packetc2w_ac_bind& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_ac_bind& default_instance();

  void Swap(packetc2w_ac_bind* other);

  // implements Message ----------------------------------------------

  packetc2w_ac_bind* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_ac_bind& from);
  void MergeFrom(const packetc2w_ac_bind& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ac_bind];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string real_name = 3;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 3;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const char* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_ac_bind)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_real_name();
  inline void clear_has_real_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* real_name_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fother_2eproto();
  friend void protobuf_AssignDesc_client2world_5fother_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fother_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_ac_bind* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_ac_bind_result : public ::google::protobuf::Message {
 public:
  packetw2c_ac_bind_result();
  virtual ~packetw2c_ac_bind_result();

  packetw2c_ac_bind_result(const packetw2c_ac_bind_result& from);

  inline packetw2c_ac_bind_result& operator=(const packetw2c_ac_bind_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_ac_bind_result& default_instance();

  void Swap(packetw2c_ac_bind_result* other);

  // implements Message ----------------------------------------------

  packetw2c_ac_bind_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_ac_bind_result& from);
  void MergeFrom(const packetw2c_ac_bind_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ac_bind_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional string error_info = 3;
  inline bool has_error_info() const;
  inline void clear_error_info();
  static const int kErrorInfoFieldNumber = 3;
  inline const ::std::string& error_info() const;
  inline void set_error_info(const ::std::string& value);
  inline void set_error_info(const char* value);
  inline void set_error_info(const char* value, size_t size);
  inline ::std::string* mutable_error_info();
  inline ::std::string* release_error_info();
  inline void set_allocated_error_info(::std::string* error_info);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_ac_bind_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_error_info();
  inline void clear_has_error_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::std::string* error_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fother_2eproto();
  friend void protobuf_AssignDesc_client2world_5fother_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fother_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_ac_bind_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_ac_transfer : public ::google::protobuf::Message {
 public:
  packetc2w_ac_transfer();
  virtual ~packetc2w_ac_transfer();

  packetc2w_ac_transfer(const packetc2w_ac_transfer& from);

  inline packetc2w_ac_transfer& operator=(const packetc2w_ac_transfer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_ac_transfer& default_instance();

  void Swap(packetc2w_ac_transfer* other);

  // implements Message ----------------------------------------------

  packetc2w_ac_transfer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_ac_transfer& from);
  void MergeFrom(const packetc2w_ac_transfer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ac_transfer];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int64 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int32 type = 3 [default = 1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_ac_transfer)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gold_;
  int packet_id_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fother_2eproto();
  friend void protobuf_AssignDesc_client2world_5fother_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fother_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_ac_transfer* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_ac_transfer_result : public ::google::protobuf::Message {
 public:
  packetw2c_ac_transfer_result();
  virtual ~packetw2c_ac_transfer_result();

  packetw2c_ac_transfer_result(const packetw2c_ac_transfer_result& from);

  inline packetw2c_ac_transfer_result& operator=(const packetw2c_ac_transfer_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_ac_transfer_result& default_instance();

  void Swap(packetw2c_ac_transfer_result* other);

  // implements Message ----------------------------------------------

  packetw2c_ac_transfer_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_ac_transfer_result& from);
  void MergeFrom(const packetw2c_ac_transfer_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ac_transfer_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int64 gold = 3;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 3;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_ac_transfer_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gold();
  inline void clear_has_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int64 gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fother_2eproto();
  friend void protobuf_AssignDesc_client2world_5fother_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fother_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_ac_transfer_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_ac_url : public ::google::protobuf::Message {
 public:
  packetc2w_ac_url();
  virtual ~packetc2w_ac_url();

  packetc2w_ac_url(const packetc2w_ac_url& from);

  inline packetc2w_ac_url& operator=(const packetc2w_ac_url& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_ac_url& default_instance();

  void Swap(packetc2w_ac_url* other);

  // implements Message ----------------------------------------------

  packetc2w_ac_url* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_ac_url& from);
  void MergeFrom(const packetc2w_ac_url& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ac_url];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int64 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int32 paytype = 3 [default = 1];
  inline bool has_paytype() const;
  inline void clear_paytype();
  static const int kPaytypeFieldNumber = 3;
  inline ::google::protobuf::int32 paytype() const;
  inline void set_paytype(::google::protobuf::int32 value);

  // optional string param = 4;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 4;
  inline const ::std::string& param() const;
  inline void set_param(const ::std::string& value);
  inline void set_param(const char* value);
  inline void set_param(const char* value, size_t size);
  inline ::std::string* mutable_param();
  inline ::std::string* release_param();
  inline void set_allocated_param(::std::string* param);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_ac_url)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_paytype();
  inline void clear_has_paytype();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gold_;
  int packet_id_;
  ::google::protobuf::int32 paytype_;
  ::std::string* param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fother_2eproto();
  friend void protobuf_AssignDesc_client2world_5fother_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fother_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_ac_url* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_ac_url_result : public ::google::protobuf::Message {
 public:
  packetw2c_ac_url_result();
  virtual ~packetw2c_ac_url_result();

  packetw2c_ac_url_result(const packetw2c_ac_url_result& from);

  inline packetw2c_ac_url_result& operator=(const packetw2c_ac_url_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_ac_url_result& default_instance();

  void Swap(packetw2c_ac_url_result* other);

  // implements Message ----------------------------------------------

  packetw2c_ac_url_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_ac_url_result& from);
  void MergeFrom(const packetw2c_ac_url_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ac_url_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional string url = 3;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 3;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional string order_id = 4;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 4;
  inline const ::std::string& order_id() const;
  inline void set_order_id(const ::std::string& value);
  inline void set_order_id(const char* value);
  inline void set_order_id(const char* value, size_t size);
  inline ::std::string* mutable_order_id();
  inline ::std::string* release_order_id();
  inline void set_allocated_order_id(::std::string* order_id);

  // optional bool is_webview = 5 [default = false];
  inline bool has_is_webview() const;
  inline void clear_is_webview();
  static const int kIsWebviewFieldNumber = 5;
  inline bool is_webview() const;
  inline void set_is_webview(bool value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_ac_url_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_is_webview();
  inline void clear_has_is_webview();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::std::string* url_;
  ::std::string* order_id_;
  bool is_webview_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fother_2eproto();
  friend void protobuf_AssignDesc_client2world_5fother_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fother_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_ac_url_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_ask_check_payment : public ::google::protobuf::Message {
 public:
  packetc2w_ask_check_payment();
  virtual ~packetc2w_ask_check_payment();

  packetc2w_ask_check_payment(const packetc2w_ask_check_payment& from);

  inline packetc2w_ask_check_payment& operator=(const packetc2w_ask_check_payment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_ask_check_payment& default_instance();

  void Swap(packetc2w_ask_check_payment* other);

  // implements Message ----------------------------------------------

  packetc2w_ask_check_payment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_ask_check_payment& from);
  void MergeFrom(const packetc2w_ask_check_payment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_check_payment];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string orderid = 2;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 2;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_ask_check_payment)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_orderid();
  inline void clear_has_orderid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* orderid_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fother_2eproto();
  friend void protobuf_AssignDesc_client2world_5fother_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fother_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_ask_check_payment* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_ask_test_payment : public ::google::protobuf::Message {
 public:
  packetc2w_ask_test_payment();
  virtual ~packetc2w_ask_test_payment();

  packetc2w_ask_test_payment(const packetc2w_ask_test_payment& from);

  inline packetc2w_ask_test_payment& operator=(const packetc2w_ask_test_payment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_ask_test_payment& default_instance();

  void Swap(packetc2w_ask_test_payment* other);

  // implements Message ----------------------------------------------

  packetc2w_ask_test_payment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_ask_test_payment& from);
  void MergeFrom(const packetc2w_ask_test_payment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_test_payment];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 pay_type = 2;
  inline bool has_pay_type() const;
  inline void clear_pay_type();
  static const int kPayTypeFieldNumber = 2;
  inline ::google::protobuf::int32 pay_type() const;
  inline void set_pay_type(::google::protobuf::int32 value);

  // optional int32 pay_value = 3;
  inline bool has_pay_value() const;
  inline void clear_pay_value();
  static const int kPayValueFieldNumber = 3;
  inline ::google::protobuf::int32 pay_value() const;
  inline void set_pay_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_ask_test_payment)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_pay_type();
  inline void clear_has_pay_type();
  inline void set_has_pay_value();
  inline void clear_has_pay_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 pay_type_;
  ::google::protobuf::int32 pay_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fother_2eproto();
  friend void protobuf_AssignDesc_client2world_5fother_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fother_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_ask_test_payment* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_ask_check_payment_result : public ::google::protobuf::Message {
 public:
  packetw2c_ask_check_payment_result();
  virtual ~packetw2c_ask_check_payment_result();

  packetw2c_ask_check_payment_result(const packetw2c_ask_check_payment_result& from);

  inline packetw2c_ask_check_payment_result& operator=(const packetw2c_ask_check_payment_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_ask_check_payment_result& default_instance();

  void Swap(packetw2c_ask_check_payment_result* other);

  // implements Message ----------------------------------------------

  packetw2c_ask_check_payment_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_ask_check_payment_result& from);
  void MergeFrom(const packetw2c_ask_check_payment_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_check_payment_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 pay_type = 3;
  inline bool has_pay_type() const;
  inline void clear_pay_type();
  static const int kPayTypeFieldNumber = 3;
  inline ::google::protobuf::int32 pay_type() const;
  inline void set_pay_type(::google::protobuf::int32 value);

  // optional int32 pay_value = 4;
  inline bool has_pay_value() const;
  inline void clear_pay_value();
  static const int kPayValueFieldNumber = 4;
  inline ::google::protobuf::int32 pay_value() const;
  inline void set_pay_value(::google::protobuf::int32 value);

  // optional int32 vip_exp = 5;
  inline bool has_vip_exp() const;
  inline void clear_vip_exp();
  static const int kVipExpFieldNumber = 5;
  inline ::google::protobuf::int32 vip_exp() const;
  inline void set_vip_exp(::google::protobuf::int32 value);

  // optional string orderid = 6;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 6;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_ask_check_payment_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_pay_type();
  inline void clear_has_pay_type();
  inline void set_has_pay_value();
  inline void clear_has_pay_value();
  inline void set_has_vip_exp();
  inline void clear_has_vip_exp();
  inline void set_has_orderid();
  inline void clear_has_orderid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int32 pay_type_;
  ::google::protobuf::int32 pay_value_;
  ::std::string* orderid_;
  ::google::protobuf::int32 vip_exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fother_2eproto();
  friend void protobuf_AssignDesc_client2world_5fother_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fother_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_ask_check_payment_result* default_instance_;
};
// -------------------------------------------------------------------

class msg_bank_info : public ::google::protobuf::Message {
 public:
  msg_bank_info();
  virtual ~msg_bank_info();

  msg_bank_info(const msg_bank_info& from);

  inline msg_bank_info& operator=(const msg_bank_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_bank_info& default_instance();

  void Swap(msg_bank_info* other);

  // implements Message ----------------------------------------------

  msg_bank_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_bank_info& from);
  void MergeFrom(const msg_bank_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool open = 3;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 3;
  inline bool open() const;
  inline void set_open(bool value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.msg_bank_info)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_open();
  inline void clear_has_open();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* code_;
  ::std::string* name_;
  bool open_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fother_2eproto();
  friend void protobuf_AssignDesc_client2world_5fother_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fother_2eproto();

  void InitAsDefaultInstance();
  static msg_bank_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_req_bank_list : public ::google::protobuf::Message {
 public:
  packetc2w_req_bank_list();
  virtual ~packetc2w_req_bank_list();

  packetc2w_req_bank_list(const packetc2w_req_bank_list& from);

  inline packetc2w_req_bank_list& operator=(const packetc2w_req_bank_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_bank_list& default_instance();

  void Swap(packetc2w_req_bank_list* other);

  // implements Message ----------------------------------------------

  packetc2w_req_bank_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_bank_list& from);
  void MergeFrom(const packetc2w_req_bank_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_bank_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_bank_list)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fother_2eproto();
  friend void protobuf_AssignDesc_client2world_5fother_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fother_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_bank_list* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_bank_list_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_bank_list_result();
  virtual ~packetw2c_req_bank_list_result();

  packetw2c_req_bank_list_result(const packetw2c_req_bank_list_result& from);

  inline packetw2c_req_bank_list_result& operator=(const packetw2c_req_bank_list_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_bank_list_result& default_instance();

  void Swap(packetw2c_req_bank_list_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_bank_list_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_bank_list_result& from);
  void MergeFrom(const packetw2c_req_bank_list_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_bank_list_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // repeated .client2world_protocols.msg_bank_info bank_list = 2;
  inline int bank_list_size() const;
  inline void clear_bank_list();
  static const int kBankListFieldNumber = 2;
  inline const ::client2world_protocols::msg_bank_info& bank_list(int index) const;
  inline ::client2world_protocols::msg_bank_info* mutable_bank_list(int index);
  inline ::client2world_protocols::msg_bank_info* add_bank_list();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_bank_info >&
      bank_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_bank_info >*
      mutable_bank_list();

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_bank_list_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_bank_info > bank_list_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fother_2eproto();
  friend void protobuf_AssignDesc_client2world_5fother_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fother_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_bank_list_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_bind_bank_card : public ::google::protobuf::Message {
 public:
  packetc2w_bind_bank_card();
  virtual ~packetc2w_bind_bank_card();

  packetc2w_bind_bank_card(const packetc2w_bind_bank_card& from);

  inline packetc2w_bind_bank_card& operator=(const packetc2w_bind_bank_card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_bind_bank_card& default_instance();

  void Swap(packetc2w_bind_bank_card* other);

  // implements Message ----------------------------------------------

  packetc2w_bind_bank_card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_bind_bank_card& from);
  void MergeFrom(const packetc2w_bind_bank_card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_bind_bank_card];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string card_number = 3;
  inline bool has_card_number() const;
  inline void clear_card_number();
  static const int kCardNumberFieldNumber = 3;
  inline const ::std::string& card_number() const;
  inline void set_card_number(const ::std::string& value);
  inline void set_card_number(const char* value);
  inline void set_card_number(const char* value, size_t size);
  inline ::std::string* mutable_card_number();
  inline ::std::string* release_card_number();
  inline void set_allocated_card_number(::std::string* card_number);

  // optional string identity_number = 4;
  inline bool has_identity_number() const;
  inline void clear_identity_number();
  static const int kIdentityNumberFieldNumber = 4;
  inline const ::std::string& identity_number() const;
  inline void set_identity_number(const ::std::string& value);
  inline void set_identity_number(const char* value);
  inline void set_identity_number(const char* value, size_t size);
  inline ::std::string* mutable_identity_number();
  inline ::std::string* release_identity_number();
  inline void set_allocated_identity_number(::std::string* identity_number);

  // optional string bank_name = 5;
  inline bool has_bank_name() const;
  inline void clear_bank_name();
  static const int kBankNameFieldNumber = 5;
  inline const ::std::string& bank_name() const;
  inline void set_bank_name(const ::std::string& value);
  inline void set_bank_name(const char* value);
  inline void set_bank_name(const char* value, size_t size);
  inline ::std::string* mutable_bank_name();
  inline ::std::string* release_bank_name();
  inline void set_allocated_bank_name(::std::string* bank_name);

  // optional string card_number2 = 6;
  inline bool has_card_number2() const;
  inline void clear_card_number2();
  static const int kCardNumber2FieldNumber = 6;
  inline const ::std::string& card_number2() const;
  inline void set_card_number2(const ::std::string& value);
  inline void set_card_number2(const char* value);
  inline void set_card_number2(const char* value, size_t size);
  inline ::std::string* mutable_card_number2();
  inline ::std::string* release_card_number2();
  inline void set_allocated_card_number2(::std::string* card_number2);

  // optional string phone_number = 7;
  inline bool has_phone_number() const;
  inline void clear_phone_number();
  static const int kPhoneNumberFieldNumber = 7;
  inline const ::std::string& phone_number() const;
  inline void set_phone_number(const ::std::string& value);
  inline void set_phone_number(const char* value);
  inline void set_phone_number(const char* value, size_t size);
  inline ::std::string* mutable_phone_number();
  inline ::std::string* release_phone_number();
  inline void set_allocated_phone_number(::std::string* phone_number);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_bind_bank_card)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_card_number();
  inline void clear_has_card_number();
  inline void set_has_identity_number();
  inline void clear_has_identity_number();
  inline void set_has_bank_name();
  inline void clear_has_bank_name();
  inline void set_has_card_number2();
  inline void clear_has_card_number2();
  inline void set_has_phone_number();
  inline void clear_has_phone_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* card_number_;
  ::std::string* identity_number_;
  ::std::string* bank_name_;
  ::std::string* card_number2_;
  ::std::string* phone_number_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fother_2eproto();
  friend void protobuf_AssignDesc_client2world_5fother_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fother_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_bind_bank_card* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_bind_bank_card_result : public ::google::protobuf::Message {
 public:
  packetw2c_bind_bank_card_result();
  virtual ~packetw2c_bind_bank_card_result();

  packetw2c_bind_bank_card_result(const packetw2c_bind_bank_card_result& from);

  inline packetw2c_bind_bank_card_result& operator=(const packetw2c_bind_bank_card_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_bind_bank_card_result& default_instance();

  void Swap(packetw2c_bind_bank_card_result* other);

  // implements Message ----------------------------------------------

  packetw2c_bind_bank_card_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_bind_bank_card_result& from);
  void MergeFrom(const packetw2c_bind_bank_card_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_bind_bank_card_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional string error_info = 3;
  inline bool has_error_info() const;
  inline void clear_error_info();
  static const int kErrorInfoFieldNumber = 3;
  inline const ::std::string& error_info() const;
  inline void set_error_info(const ::std::string& value);
  inline void set_error_info(const char* value);
  inline void set_error_info(const char* value, size_t size);
  inline ::std::string* mutable_error_info();
  inline ::std::string* release_error_info();
  inline void set_allocated_error_info(::std::string* error_info);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_bind_bank_card_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_error_info();
  inline void clear_has_error_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::std::string* error_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fother_2eproto();
  friend void protobuf_AssignDesc_client2world_5fother_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fother_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_bind_bank_card_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_req_bank_card : public ::google::protobuf::Message {
 public:
  packetc2w_req_bank_card();
  virtual ~packetc2w_req_bank_card();

  packetc2w_req_bank_card(const packetc2w_req_bank_card& from);

  inline packetc2w_req_bank_card& operator=(const packetc2w_req_bank_card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_bank_card& default_instance();

  void Swap(packetc2w_req_bank_card* other);

  // implements Message ----------------------------------------------

  packetc2w_req_bank_card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_bank_card& from);
  void MergeFrom(const packetc2w_req_bank_card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_bank_card];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_bank_card)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fother_2eproto();
  friend void protobuf_AssignDesc_client2world_5fother_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fother_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_bank_card* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_bank_card_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_bank_card_result();
  virtual ~packetw2c_req_bank_card_result();

  packetw2c_req_bank_card_result(const packetw2c_req_bank_card_result& from);

  inline packetw2c_req_bank_card_result& operator=(const packetw2c_req_bank_card_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_bank_card_result& default_instance();

  void Swap(packetw2c_req_bank_card_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_bank_card_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_bank_card_result& from);
  void MergeFrom(const packetw2c_req_bank_card_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_bank_card_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string card_number = 4;
  inline bool has_card_number() const;
  inline void clear_card_number();
  static const int kCardNumberFieldNumber = 4;
  inline const ::std::string& card_number() const;
  inline void set_card_number(const ::std::string& value);
  inline void set_card_number(const char* value);
  inline void set_card_number(const char* value, size_t size);
  inline ::std::string* mutable_card_number();
  inline ::std::string* release_card_number();
  inline void set_allocated_card_number(::std::string* card_number);

  // optional string bank_name = 5;
  inline bool has_bank_name() const;
  inline void clear_bank_name();
  static const int kBankNameFieldNumber = 5;
  inline const ::std::string& bank_name() const;
  inline void set_bank_name(const ::std::string& value);
  inline void set_bank_name(const char* value);
  inline void set_bank_name(const char* value, size_t size);
  inline ::std::string* mutable_bank_name();
  inline ::std::string* release_bank_name();
  inline void set_allocated_bank_name(::std::string* bank_name);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_bank_card_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_card_number();
  inline void clear_has_card_number();
  inline void set_has_bank_name();
  inline void clear_has_bank_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::std::string* name_;
  ::std::string* card_number_;
  ::std::string* bank_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fother_2eproto();
  friend void protobuf_AssignDesc_client2world_5fother_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fother_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_bank_card_result* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2w_ac_bind

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ac_bind];
inline bool packetc2w_ac_bind::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_ac_bind::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_ac_bind::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_ac_bind::clear_packet_id() {
  packet_id_ = 5075;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_ac_bind::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_ac_bind::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional string account = 2;
inline bool packetc2w_ac_bind::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_ac_bind::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_ac_bind::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_ac_bind::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& packetc2w_ac_bind::account() const {
  return *account_;
}
inline void packetc2w_ac_bind::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void packetc2w_ac_bind::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void packetc2w_ac_bind::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_ac_bind::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* packetc2w_ac_bind::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_ac_bind::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string real_name = 3;
inline bool packetc2w_ac_bind::has_real_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_ac_bind::set_has_real_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_ac_bind::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_ac_bind::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::kEmptyString) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& packetc2w_ac_bind::real_name() const {
  return *real_name_;
}
inline void packetc2w_ac_bind::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
}
inline void packetc2w_ac_bind::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
}
inline void packetc2w_ac_bind::set_real_name(const char* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_ac_bind::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  return real_name_;
}
inline ::std::string* packetc2w_ac_bind::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_ac_bind::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::kEmptyString) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetw2c_ac_bind_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ac_bind_result];
inline bool packetw2c_ac_bind_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_ac_bind_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_ac_bind_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_ac_bind_result::clear_packet_id() {
  packet_id_ = 7581;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_ac_bind_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_ac_bind_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_ac_bind_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_ac_bind_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_ac_bind_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_ac_bind_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_ac_bind_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_ac_bind_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string error_info = 3;
inline bool packetw2c_ac_bind_result::has_error_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_ac_bind_result::set_has_error_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_ac_bind_result::clear_has_error_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_ac_bind_result::clear_error_info() {
  if (error_info_ != &::google::protobuf::internal::kEmptyString) {
    error_info_->clear();
  }
  clear_has_error_info();
}
inline const ::std::string& packetw2c_ac_bind_result::error_info() const {
  return *error_info_;
}
inline void packetw2c_ac_bind_result::set_error_info(const ::std::string& value) {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    error_info_ = new ::std::string;
  }
  error_info_->assign(value);
}
inline void packetw2c_ac_bind_result::set_error_info(const char* value) {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    error_info_ = new ::std::string;
  }
  error_info_->assign(value);
}
inline void packetw2c_ac_bind_result::set_error_info(const char* value, size_t size) {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    error_info_ = new ::std::string;
  }
  error_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_ac_bind_result::mutable_error_info() {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    error_info_ = new ::std::string;
  }
  return error_info_;
}
inline ::std::string* packetw2c_ac_bind_result::release_error_info() {
  clear_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_info_;
    error_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_ac_bind_result::set_allocated_error_info(::std::string* error_info) {
  if (error_info_ != &::google::protobuf::internal::kEmptyString) {
    delete error_info_;
  }
  if (error_info) {
    set_has_error_info();
    error_info_ = error_info;
  } else {
    clear_has_error_info();
    error_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetc2w_ac_transfer

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ac_transfer];
inline bool packetc2w_ac_transfer::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_ac_transfer::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_ac_transfer::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_ac_transfer::clear_packet_id() {
  packet_id_ = 5076;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_ac_transfer::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_ac_transfer::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int64 gold = 2;
inline bool packetc2w_ac_transfer::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_ac_transfer::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_ac_transfer::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_ac_transfer::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 packetc2w_ac_transfer::gold() const {
  return gold_;
}
inline void packetc2w_ac_transfer::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 type = 3 [default = 1];
inline bool packetc2w_ac_transfer::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_ac_transfer::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_ac_transfer::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_ac_transfer::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::google::protobuf::int32 packetc2w_ac_transfer::type() const {
  return type_;
}
inline void packetc2w_ac_transfer::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// packetw2c_ac_transfer_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ac_transfer_result];
inline bool packetw2c_ac_transfer_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_ac_transfer_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_ac_transfer_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_ac_transfer_result::clear_packet_id() {
  packet_id_ = 7582;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_ac_transfer_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_ac_transfer_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_ac_transfer_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_ac_transfer_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_ac_transfer_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_ac_transfer_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_ac_transfer_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_ac_transfer_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int64 gold = 3;
inline bool packetw2c_ac_transfer_result::has_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_ac_transfer_result::set_has_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_ac_transfer_result::clear_has_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_ac_transfer_result::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 packetw2c_ac_transfer_result::gold() const {
  return gold_;
}
inline void packetw2c_ac_transfer_result::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// -------------------------------------------------------------------

// packetc2w_ac_url

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ac_url];
inline bool packetc2w_ac_url::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_ac_url::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_ac_url::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_ac_url::clear_packet_id() {
  packet_id_ = 5077;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_ac_url::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_ac_url::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int64 gold = 2;
inline bool packetc2w_ac_url::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_ac_url::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_ac_url::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_ac_url::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 packetc2w_ac_url::gold() const {
  return gold_;
}
inline void packetc2w_ac_url::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 paytype = 3 [default = 1];
inline bool packetc2w_ac_url::has_paytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_ac_url::set_has_paytype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_ac_url::clear_has_paytype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_ac_url::clear_paytype() {
  paytype_ = 1;
  clear_has_paytype();
}
inline ::google::protobuf::int32 packetc2w_ac_url::paytype() const {
  return paytype_;
}
inline void packetc2w_ac_url::set_paytype(::google::protobuf::int32 value) {
  set_has_paytype();
  paytype_ = value;
}

// optional string param = 4;
inline bool packetc2w_ac_url::has_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetc2w_ac_url::set_has_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetc2w_ac_url::clear_has_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetc2w_ac_url::clear_param() {
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    param_->clear();
  }
  clear_has_param();
}
inline const ::std::string& packetc2w_ac_url::param() const {
  return *param_;
}
inline void packetc2w_ac_url::set_param(const ::std::string& value) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(value);
}
inline void packetc2w_ac_url::set_param(const char* value) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(value);
}
inline void packetc2w_ac_url::set_param(const char* value, size_t size) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_ac_url::mutable_param() {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  return param_;
}
inline ::std::string* packetc2w_ac_url::release_param() {
  clear_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param_;
    param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_ac_url::set_allocated_param(::std::string* param) {
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    delete param_;
  }
  if (param) {
    set_has_param();
    param_ = param;
  } else {
    clear_has_param();
    param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetw2c_ac_url_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ac_url_result];
inline bool packetw2c_ac_url_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_ac_url_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_ac_url_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_ac_url_result::clear_packet_id() {
  packet_id_ = 7583;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_ac_url_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_ac_url_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_ac_url_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_ac_url_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_ac_url_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_ac_url_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_ac_url_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_ac_url_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string url = 3;
inline bool packetw2c_ac_url_result::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_ac_url_result::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_ac_url_result::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_ac_url_result::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& packetw2c_ac_url_result::url() const {
  return *url_;
}
inline void packetw2c_ac_url_result::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void packetw2c_ac_url_result::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void packetw2c_ac_url_result::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_ac_url_result::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* packetw2c_ac_url_result::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_ac_url_result::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string order_id = 4;
inline bool packetw2c_ac_url_result::has_order_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_ac_url_result::set_has_order_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_ac_url_result::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_ac_url_result::clear_order_id() {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    order_id_->clear();
  }
  clear_has_order_id();
}
inline const ::std::string& packetw2c_ac_url_result::order_id() const {
  return *order_id_;
}
inline void packetw2c_ac_url_result::set_order_id(const ::std::string& value) {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  order_id_->assign(value);
}
inline void packetw2c_ac_url_result::set_order_id(const char* value) {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  order_id_->assign(value);
}
inline void packetw2c_ac_url_result::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  order_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_ac_url_result::mutable_order_id() {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  return order_id_;
}
inline ::std::string* packetw2c_ac_url_result::release_order_id() {
  clear_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_id_;
    order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_ac_url_result::set_allocated_order_id(::std::string* order_id) {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete order_id_;
  }
  if (order_id) {
    set_has_order_id();
    order_id_ = order_id;
  } else {
    clear_has_order_id();
    order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool is_webview = 5 [default = false];
inline bool packetw2c_ac_url_result::has_is_webview() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetw2c_ac_url_result::set_has_is_webview() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetw2c_ac_url_result::clear_has_is_webview() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetw2c_ac_url_result::clear_is_webview() {
  is_webview_ = false;
  clear_has_is_webview();
}
inline bool packetw2c_ac_url_result::is_webview() const {
  return is_webview_;
}
inline void packetw2c_ac_url_result::set_is_webview(bool value) {
  set_has_is_webview();
  is_webview_ = value;
}

// -------------------------------------------------------------------

// packetc2w_ask_check_payment

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_check_payment];
inline bool packetc2w_ask_check_payment::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_ask_check_payment::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_ask_check_payment::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_ask_check_payment::clear_packet_id() {
  packet_id_ = 5006;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_ask_check_payment::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_ask_check_payment::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional string orderid = 2;
inline bool packetc2w_ask_check_payment::has_orderid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_ask_check_payment::set_has_orderid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_ask_check_payment::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_ask_check_payment::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& packetc2w_ask_check_payment::orderid() const {
  return *orderid_;
}
inline void packetc2w_ask_check_payment::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void packetc2w_ask_check_payment::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void packetc2w_ask_check_payment::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_ask_check_payment::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* packetc2w_ask_check_payment::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_ask_check_payment::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetc2w_ask_test_payment

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_test_payment];
inline bool packetc2w_ask_test_payment::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_ask_test_payment::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_ask_test_payment::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_ask_test_payment::clear_packet_id() {
  packet_id_ = 5007;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_ask_test_payment::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_ask_test_payment::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 pay_type = 2;
inline bool packetc2w_ask_test_payment::has_pay_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_ask_test_payment::set_has_pay_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_ask_test_payment::clear_has_pay_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_ask_test_payment::clear_pay_type() {
  pay_type_ = 0;
  clear_has_pay_type();
}
inline ::google::protobuf::int32 packetc2w_ask_test_payment::pay_type() const {
  return pay_type_;
}
inline void packetc2w_ask_test_payment::set_pay_type(::google::protobuf::int32 value) {
  set_has_pay_type();
  pay_type_ = value;
}

// optional int32 pay_value = 3;
inline bool packetc2w_ask_test_payment::has_pay_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_ask_test_payment::set_has_pay_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_ask_test_payment::clear_has_pay_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_ask_test_payment::clear_pay_value() {
  pay_value_ = 0;
  clear_has_pay_value();
}
inline ::google::protobuf::int32 packetc2w_ask_test_payment::pay_value() const {
  return pay_value_;
}
inline void packetc2w_ask_test_payment::set_pay_value(::google::protobuf::int32 value) {
  set_has_pay_value();
  pay_value_ = value;
}

// -------------------------------------------------------------------

// packetw2c_ask_check_payment_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_check_payment_result];
inline bool packetw2c_ask_check_payment_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_ask_check_payment_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_ask_check_payment_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_ask_check_payment_result::clear_packet_id() {
  packet_id_ = 7506;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_ask_check_payment_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_ask_check_payment_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_ask_check_payment_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_ask_check_payment_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_ask_check_payment_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_ask_check_payment_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_ask_check_payment_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_ask_check_payment_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 pay_type = 3;
inline bool packetw2c_ask_check_payment_result::has_pay_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_ask_check_payment_result::set_has_pay_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_ask_check_payment_result::clear_has_pay_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_ask_check_payment_result::clear_pay_type() {
  pay_type_ = 0;
  clear_has_pay_type();
}
inline ::google::protobuf::int32 packetw2c_ask_check_payment_result::pay_type() const {
  return pay_type_;
}
inline void packetw2c_ask_check_payment_result::set_pay_type(::google::protobuf::int32 value) {
  set_has_pay_type();
  pay_type_ = value;
}

// optional int32 pay_value = 4;
inline bool packetw2c_ask_check_payment_result::has_pay_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_ask_check_payment_result::set_has_pay_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_ask_check_payment_result::clear_has_pay_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_ask_check_payment_result::clear_pay_value() {
  pay_value_ = 0;
  clear_has_pay_value();
}
inline ::google::protobuf::int32 packetw2c_ask_check_payment_result::pay_value() const {
  return pay_value_;
}
inline void packetw2c_ask_check_payment_result::set_pay_value(::google::protobuf::int32 value) {
  set_has_pay_value();
  pay_value_ = value;
}

// optional int32 vip_exp = 5;
inline bool packetw2c_ask_check_payment_result::has_vip_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetw2c_ask_check_payment_result::set_has_vip_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetw2c_ask_check_payment_result::clear_has_vip_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetw2c_ask_check_payment_result::clear_vip_exp() {
  vip_exp_ = 0;
  clear_has_vip_exp();
}
inline ::google::protobuf::int32 packetw2c_ask_check_payment_result::vip_exp() const {
  return vip_exp_;
}
inline void packetw2c_ask_check_payment_result::set_vip_exp(::google::protobuf::int32 value) {
  set_has_vip_exp();
  vip_exp_ = value;
}

// optional string orderid = 6;
inline bool packetw2c_ask_check_payment_result::has_orderid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetw2c_ask_check_payment_result::set_has_orderid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetw2c_ask_check_payment_result::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetw2c_ask_check_payment_result::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& packetw2c_ask_check_payment_result::orderid() const {
  return *orderid_;
}
inline void packetw2c_ask_check_payment_result::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void packetw2c_ask_check_payment_result::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void packetw2c_ask_check_payment_result::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_ask_check_payment_result::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* packetw2c_ask_check_payment_result::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_ask_check_payment_result::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_bank_info

// optional string code = 1;
inline bool msg_bank_info::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_bank_info::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_bank_info::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_bank_info::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& msg_bank_info::code() const {
  return *code_;
}
inline void msg_bank_info::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void msg_bank_info::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void msg_bank_info::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_bank_info::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* msg_bank_info::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_bank_info::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 2;
inline bool msg_bank_info::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_bank_info::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_bank_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_bank_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& msg_bank_info::name() const {
  return *name_;
}
inline void msg_bank_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void msg_bank_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void msg_bank_info::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_bank_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* msg_bank_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_bank_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool open = 3;
inline bool msg_bank_info::has_open() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_bank_info::set_has_open() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_bank_info::clear_has_open() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_bank_info::clear_open() {
  open_ = false;
  clear_has_open();
}
inline bool msg_bank_info::open() const {
  return open_;
}
inline void msg_bank_info::set_open(bool value) {
  set_has_open();
  open_ = value;
}

// -------------------------------------------------------------------

// packetc2w_req_bank_list

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_bank_list];
inline bool packetc2w_req_bank_list::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_bank_list::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_bank_list::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_bank_list::clear_packet_id() {
  packet_id_ = 5099;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_bank_list::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_bank_list::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_req_bank_list_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_bank_list_result];
inline bool packetw2c_req_bank_list_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_bank_list_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_bank_list_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_bank_list_result::clear_packet_id() {
  packet_id_ = 7608;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_bank_list_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_bank_list_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .client2world_protocols.msg_bank_info bank_list = 2;
inline int packetw2c_req_bank_list_result::bank_list_size() const {
  return bank_list_.size();
}
inline void packetw2c_req_bank_list_result::clear_bank_list() {
  bank_list_.Clear();
}
inline const ::client2world_protocols::msg_bank_info& packetw2c_req_bank_list_result::bank_list(int index) const {
  return bank_list_.Get(index);
}
inline ::client2world_protocols::msg_bank_info* packetw2c_req_bank_list_result::mutable_bank_list(int index) {
  return bank_list_.Mutable(index);
}
inline ::client2world_protocols::msg_bank_info* packetw2c_req_bank_list_result::add_bank_list() {
  return bank_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_bank_info >&
packetw2c_req_bank_list_result::bank_list() const {
  return bank_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_bank_info >*
packetw2c_req_bank_list_result::mutable_bank_list() {
  return &bank_list_;
}

// -------------------------------------------------------------------

// packetc2w_bind_bank_card

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_bind_bank_card];
inline bool packetc2w_bind_bank_card::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_bind_bank_card::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_bind_bank_card::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_bind_bank_card::clear_packet_id() {
  packet_id_ = 5095;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_bind_bank_card::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_bind_bank_card::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional string name = 2;
inline bool packetc2w_bind_bank_card::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_bind_bank_card::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_bind_bank_card::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_bind_bank_card::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& packetc2w_bind_bank_card::name() const {
  return *name_;
}
inline void packetc2w_bind_bank_card::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void packetc2w_bind_bank_card::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void packetc2w_bind_bank_card::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_bind_bank_card::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* packetc2w_bind_bank_card::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_bind_bank_card::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string card_number = 3;
inline bool packetc2w_bind_bank_card::has_card_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_bind_bank_card::set_has_card_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_bind_bank_card::clear_has_card_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_bind_bank_card::clear_card_number() {
  if (card_number_ != &::google::protobuf::internal::kEmptyString) {
    card_number_->clear();
  }
  clear_has_card_number();
}
inline const ::std::string& packetc2w_bind_bank_card::card_number() const {
  return *card_number_;
}
inline void packetc2w_bind_bank_card::set_card_number(const ::std::string& value) {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  card_number_->assign(value);
}
inline void packetc2w_bind_bank_card::set_card_number(const char* value) {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  card_number_->assign(value);
}
inline void packetc2w_bind_bank_card::set_card_number(const char* value, size_t size) {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  card_number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_bind_bank_card::mutable_card_number() {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  return card_number_;
}
inline ::std::string* packetc2w_bind_bank_card::release_card_number() {
  clear_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_number_;
    card_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_bind_bank_card::set_allocated_card_number(::std::string* card_number) {
  if (card_number_ != &::google::protobuf::internal::kEmptyString) {
    delete card_number_;
  }
  if (card_number) {
    set_has_card_number();
    card_number_ = card_number;
  } else {
    clear_has_card_number();
    card_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string identity_number = 4;
inline bool packetc2w_bind_bank_card::has_identity_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetc2w_bind_bank_card::set_has_identity_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetc2w_bind_bank_card::clear_has_identity_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetc2w_bind_bank_card::clear_identity_number() {
  if (identity_number_ != &::google::protobuf::internal::kEmptyString) {
    identity_number_->clear();
  }
  clear_has_identity_number();
}
inline const ::std::string& packetc2w_bind_bank_card::identity_number() const {
  return *identity_number_;
}
inline void packetc2w_bind_bank_card::set_identity_number(const ::std::string& value) {
  set_has_identity_number();
  if (identity_number_ == &::google::protobuf::internal::kEmptyString) {
    identity_number_ = new ::std::string;
  }
  identity_number_->assign(value);
}
inline void packetc2w_bind_bank_card::set_identity_number(const char* value) {
  set_has_identity_number();
  if (identity_number_ == &::google::protobuf::internal::kEmptyString) {
    identity_number_ = new ::std::string;
  }
  identity_number_->assign(value);
}
inline void packetc2w_bind_bank_card::set_identity_number(const char* value, size_t size) {
  set_has_identity_number();
  if (identity_number_ == &::google::protobuf::internal::kEmptyString) {
    identity_number_ = new ::std::string;
  }
  identity_number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_bind_bank_card::mutable_identity_number() {
  set_has_identity_number();
  if (identity_number_ == &::google::protobuf::internal::kEmptyString) {
    identity_number_ = new ::std::string;
  }
  return identity_number_;
}
inline ::std::string* packetc2w_bind_bank_card::release_identity_number() {
  clear_has_identity_number();
  if (identity_number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identity_number_;
    identity_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_bind_bank_card::set_allocated_identity_number(::std::string* identity_number) {
  if (identity_number_ != &::google::protobuf::internal::kEmptyString) {
    delete identity_number_;
  }
  if (identity_number) {
    set_has_identity_number();
    identity_number_ = identity_number;
  } else {
    clear_has_identity_number();
    identity_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bank_name = 5;
inline bool packetc2w_bind_bank_card::has_bank_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetc2w_bind_bank_card::set_has_bank_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetc2w_bind_bank_card::clear_has_bank_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetc2w_bind_bank_card::clear_bank_name() {
  if (bank_name_ != &::google::protobuf::internal::kEmptyString) {
    bank_name_->clear();
  }
  clear_has_bank_name();
}
inline const ::std::string& packetc2w_bind_bank_card::bank_name() const {
  return *bank_name_;
}
inline void packetc2w_bind_bank_card::set_bank_name(const ::std::string& value) {
  set_has_bank_name();
  if (bank_name_ == &::google::protobuf::internal::kEmptyString) {
    bank_name_ = new ::std::string;
  }
  bank_name_->assign(value);
}
inline void packetc2w_bind_bank_card::set_bank_name(const char* value) {
  set_has_bank_name();
  if (bank_name_ == &::google::protobuf::internal::kEmptyString) {
    bank_name_ = new ::std::string;
  }
  bank_name_->assign(value);
}
inline void packetc2w_bind_bank_card::set_bank_name(const char* value, size_t size) {
  set_has_bank_name();
  if (bank_name_ == &::google::protobuf::internal::kEmptyString) {
    bank_name_ = new ::std::string;
  }
  bank_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_bind_bank_card::mutable_bank_name() {
  set_has_bank_name();
  if (bank_name_ == &::google::protobuf::internal::kEmptyString) {
    bank_name_ = new ::std::string;
  }
  return bank_name_;
}
inline ::std::string* packetc2w_bind_bank_card::release_bank_name() {
  clear_has_bank_name();
  if (bank_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bank_name_;
    bank_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_bind_bank_card::set_allocated_bank_name(::std::string* bank_name) {
  if (bank_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_name_;
  }
  if (bank_name) {
    set_has_bank_name();
    bank_name_ = bank_name;
  } else {
    clear_has_bank_name();
    bank_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string card_number2 = 6;
inline bool packetc2w_bind_bank_card::has_card_number2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetc2w_bind_bank_card::set_has_card_number2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetc2w_bind_bank_card::clear_has_card_number2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetc2w_bind_bank_card::clear_card_number2() {
  if (card_number2_ != &::google::protobuf::internal::kEmptyString) {
    card_number2_->clear();
  }
  clear_has_card_number2();
}
inline const ::std::string& packetc2w_bind_bank_card::card_number2() const {
  return *card_number2_;
}
inline void packetc2w_bind_bank_card::set_card_number2(const ::std::string& value) {
  set_has_card_number2();
  if (card_number2_ == &::google::protobuf::internal::kEmptyString) {
    card_number2_ = new ::std::string;
  }
  card_number2_->assign(value);
}
inline void packetc2w_bind_bank_card::set_card_number2(const char* value) {
  set_has_card_number2();
  if (card_number2_ == &::google::protobuf::internal::kEmptyString) {
    card_number2_ = new ::std::string;
  }
  card_number2_->assign(value);
}
inline void packetc2w_bind_bank_card::set_card_number2(const char* value, size_t size) {
  set_has_card_number2();
  if (card_number2_ == &::google::protobuf::internal::kEmptyString) {
    card_number2_ = new ::std::string;
  }
  card_number2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_bind_bank_card::mutable_card_number2() {
  set_has_card_number2();
  if (card_number2_ == &::google::protobuf::internal::kEmptyString) {
    card_number2_ = new ::std::string;
  }
  return card_number2_;
}
inline ::std::string* packetc2w_bind_bank_card::release_card_number2() {
  clear_has_card_number2();
  if (card_number2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_number2_;
    card_number2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_bind_bank_card::set_allocated_card_number2(::std::string* card_number2) {
  if (card_number2_ != &::google::protobuf::internal::kEmptyString) {
    delete card_number2_;
  }
  if (card_number2) {
    set_has_card_number2();
    card_number2_ = card_number2;
  } else {
    clear_has_card_number2();
    card_number2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string phone_number = 7;
inline bool packetc2w_bind_bank_card::has_phone_number() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetc2w_bind_bank_card::set_has_phone_number() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetc2w_bind_bank_card::clear_has_phone_number() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetc2w_bind_bank_card::clear_phone_number() {
  if (phone_number_ != &::google::protobuf::internal::kEmptyString) {
    phone_number_->clear();
  }
  clear_has_phone_number();
}
inline const ::std::string& packetc2w_bind_bank_card::phone_number() const {
  return *phone_number_;
}
inline void packetc2w_bind_bank_card::set_phone_number(const ::std::string& value) {
  set_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::kEmptyString) {
    phone_number_ = new ::std::string;
  }
  phone_number_->assign(value);
}
inline void packetc2w_bind_bank_card::set_phone_number(const char* value) {
  set_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::kEmptyString) {
    phone_number_ = new ::std::string;
  }
  phone_number_->assign(value);
}
inline void packetc2w_bind_bank_card::set_phone_number(const char* value, size_t size) {
  set_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::kEmptyString) {
    phone_number_ = new ::std::string;
  }
  phone_number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_bind_bank_card::mutable_phone_number() {
  set_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::kEmptyString) {
    phone_number_ = new ::std::string;
  }
  return phone_number_;
}
inline ::std::string* packetc2w_bind_bank_card::release_phone_number() {
  clear_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_number_;
    phone_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_bind_bank_card::set_allocated_phone_number(::std::string* phone_number) {
  if (phone_number_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_number_;
  }
  if (phone_number) {
    set_has_phone_number();
    phone_number_ = phone_number;
  } else {
    clear_has_phone_number();
    phone_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetw2c_bind_bank_card_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_bind_bank_card_result];
inline bool packetw2c_bind_bank_card_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_bind_bank_card_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_bind_bank_card_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_bind_bank_card_result::clear_packet_id() {
  packet_id_ = 7604;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_bind_bank_card_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_bind_bank_card_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_bind_bank_card_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_bind_bank_card_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_bind_bank_card_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_bind_bank_card_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_bind_bank_card_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_bind_bank_card_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string error_info = 3;
inline bool packetw2c_bind_bank_card_result::has_error_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_bind_bank_card_result::set_has_error_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_bind_bank_card_result::clear_has_error_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_bind_bank_card_result::clear_error_info() {
  if (error_info_ != &::google::protobuf::internal::kEmptyString) {
    error_info_->clear();
  }
  clear_has_error_info();
}
inline const ::std::string& packetw2c_bind_bank_card_result::error_info() const {
  return *error_info_;
}
inline void packetw2c_bind_bank_card_result::set_error_info(const ::std::string& value) {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    error_info_ = new ::std::string;
  }
  error_info_->assign(value);
}
inline void packetw2c_bind_bank_card_result::set_error_info(const char* value) {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    error_info_ = new ::std::string;
  }
  error_info_->assign(value);
}
inline void packetw2c_bind_bank_card_result::set_error_info(const char* value, size_t size) {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    error_info_ = new ::std::string;
  }
  error_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_bind_bank_card_result::mutable_error_info() {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    error_info_ = new ::std::string;
  }
  return error_info_;
}
inline ::std::string* packetw2c_bind_bank_card_result::release_error_info() {
  clear_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_info_;
    error_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_bind_bank_card_result::set_allocated_error_info(::std::string* error_info) {
  if (error_info_ != &::google::protobuf::internal::kEmptyString) {
    delete error_info_;
  }
  if (error_info) {
    set_has_error_info();
    error_info_ = error_info;
  } else {
    clear_has_error_info();
    error_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetc2w_req_bank_card

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_bank_card];
inline bool packetc2w_req_bank_card::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_bank_card::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_bank_card::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_bank_card::clear_packet_id() {
  packet_id_ = 5096;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_bank_card::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_bank_card::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_req_bank_card_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_bank_card_result];
inline bool packetw2c_req_bank_card_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_bank_card_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_bank_card_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_bank_card_result::clear_packet_id() {
  packet_id_ = 7605;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_bank_card_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_bank_card_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_req_bank_card_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_req_bank_card_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_req_bank_card_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_req_bank_card_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_req_bank_card_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_req_bank_card_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string name = 3;
inline bool packetw2c_req_bank_card_result::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_req_bank_card_result::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_req_bank_card_result::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_req_bank_card_result::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& packetw2c_req_bank_card_result::name() const {
  return *name_;
}
inline void packetw2c_req_bank_card_result::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void packetw2c_req_bank_card_result::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void packetw2c_req_bank_card_result::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_req_bank_card_result::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* packetw2c_req_bank_card_result::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_req_bank_card_result::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string card_number = 4;
inline bool packetw2c_req_bank_card_result::has_card_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_req_bank_card_result::set_has_card_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_req_bank_card_result::clear_has_card_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_req_bank_card_result::clear_card_number() {
  if (card_number_ != &::google::protobuf::internal::kEmptyString) {
    card_number_->clear();
  }
  clear_has_card_number();
}
inline const ::std::string& packetw2c_req_bank_card_result::card_number() const {
  return *card_number_;
}
inline void packetw2c_req_bank_card_result::set_card_number(const ::std::string& value) {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  card_number_->assign(value);
}
inline void packetw2c_req_bank_card_result::set_card_number(const char* value) {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  card_number_->assign(value);
}
inline void packetw2c_req_bank_card_result::set_card_number(const char* value, size_t size) {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  card_number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_req_bank_card_result::mutable_card_number() {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  return card_number_;
}
inline ::std::string* packetw2c_req_bank_card_result::release_card_number() {
  clear_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_number_;
    card_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_req_bank_card_result::set_allocated_card_number(::std::string* card_number) {
  if (card_number_ != &::google::protobuf::internal::kEmptyString) {
    delete card_number_;
  }
  if (card_number) {
    set_has_card_number();
    card_number_ = card_number;
  } else {
    clear_has_card_number();
    card_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bank_name = 5;
inline bool packetw2c_req_bank_card_result::has_bank_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetw2c_req_bank_card_result::set_has_bank_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetw2c_req_bank_card_result::clear_has_bank_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetw2c_req_bank_card_result::clear_bank_name() {
  if (bank_name_ != &::google::protobuf::internal::kEmptyString) {
    bank_name_->clear();
  }
  clear_has_bank_name();
}
inline const ::std::string& packetw2c_req_bank_card_result::bank_name() const {
  return *bank_name_;
}
inline void packetw2c_req_bank_card_result::set_bank_name(const ::std::string& value) {
  set_has_bank_name();
  if (bank_name_ == &::google::protobuf::internal::kEmptyString) {
    bank_name_ = new ::std::string;
  }
  bank_name_->assign(value);
}
inline void packetw2c_req_bank_card_result::set_bank_name(const char* value) {
  set_has_bank_name();
  if (bank_name_ == &::google::protobuf::internal::kEmptyString) {
    bank_name_ = new ::std::string;
  }
  bank_name_->assign(value);
}
inline void packetw2c_req_bank_card_result::set_bank_name(const char* value, size_t size) {
  set_has_bank_name();
  if (bank_name_ == &::google::protobuf::internal::kEmptyString) {
    bank_name_ = new ::std::string;
  }
  bank_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_req_bank_card_result::mutable_bank_name() {
  set_has_bank_name();
  if (bank_name_ == &::google::protobuf::internal::kEmptyString) {
    bank_name_ = new ::std::string;
  }
  return bank_name_;
}
inline ::std::string* packetw2c_req_bank_card_result::release_bank_name() {
  clear_has_bank_name();
  if (bank_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bank_name_;
    bank_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_req_bank_card_result::set_allocated_bank_name(::std::string* bank_name) {
  if (bank_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_name_;
  }
  if (bank_name) {
    set_has_bank_name();
    bank_name_ = bank_name;
  } else {
    clear_has_bank_name();
    bank_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client2world_5fother_2eproto__INCLUDED
