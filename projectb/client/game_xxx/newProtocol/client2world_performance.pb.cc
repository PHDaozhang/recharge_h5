// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_performance.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client2world_performance.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

namespace {

const ::google::protobuf::Descriptor* msg_performance_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_performance_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_performance_team_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_performance_team_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_performance_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_performance_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_performance_list_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_performance_list_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_performance_gain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_performance_gain_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_performance_gain_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_performance_gain_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_performance_child_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_performance_child_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_performance_child_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_performance_child_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_performance_check_gain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_performance_check_gain_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_performance_check_gain_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_performance_check_gain_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_performance_team_create_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_performance_team_create_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_performance_team_create_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_performance_team_create_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_performance_team_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_performance_team_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_performance_team_list_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_performance_team_list_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_performance_team_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_performance_team_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_performance_team_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_performance_team_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_performance_team_update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_performance_team_update_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_performance_team_update_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_performance_team_update_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_performance_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_performance_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_performance_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_performance_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_performance_info_self_today_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_performance_info_self_today_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_performance_info_self_today_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_performance_info_self_today_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_performance_info_self_yesterday_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_performance_info_self_yesterday_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_performance_info_self_yesterday_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_performance_info_self_yesterday_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_performance_info_agent_today_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_performance_info_agent_today_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_performance_info_agent_today_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_performance_info_agent_today_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_performance_info_agent_yesterday_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_performance_info_agent_yesterday_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_performance_info_agent_yesterday_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_performance_info_agent_yesterday_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client2world_5fperformance_2eproto() {
  protobuf_AddDesc_client2world_5fperformance_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client2world_performance.proto");
  GOOGLE_CHECK(file != NULL);
  msg_performance_info_descriptor_ = file->message_type(0);
  static const int msg_performance_info_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, photo_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, per_today_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, per_yesterday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, per_sub_today_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, per_sub_yesterday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, per_tw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, per_lw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, per_sub_tw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, per_sub_lw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, ts_create_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, ac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, ac_inc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, ac_inc_yd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, ac_inc_tw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, ac_inc_lw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, ac_inc_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, ac_inc_lm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, gain_yd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, gain_tw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, gain_lw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, gain_),
  };
  msg_performance_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_performance_info_descriptor_,
      msg_performance_info::default_instance_,
      msg_performance_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_performance_info));
  msg_performance_team_descriptor_ = file->message_type(1);
  static const int msg_performance_team_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_team, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_team, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_team, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_team, count_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_team, code_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_team, ac_inc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_team, member_infos_),
  };
  msg_performance_team_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_performance_team_descriptor_,
      msg_performance_team::default_instance_,
      msg_performance_team_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_team, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_performance_team, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_performance_team));
  packetc2w_performance_list_descriptor_ = file->message_type(2);
  static const int packetc2w_performance_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_list, packet_id_),
  };
  packetc2w_performance_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_performance_list_descriptor_,
      packetc2w_performance_list::default_instance_,
      packetc2w_performance_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_performance_list));
  packetw2c_performance_list_result_descriptor_ = file->message_type(3);
  static const int packetw2c_performance_list_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_list_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_list_result, info_),
  };
  packetw2c_performance_list_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_performance_list_result_descriptor_,
      packetw2c_performance_list_result::default_instance_,
      packetw2c_performance_list_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_list_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_list_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_performance_list_result));
  packetc2w_performance_gain_descriptor_ = file->message_type(4);
  static const int packetc2w_performance_gain_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_gain, packet_id_),
  };
  packetc2w_performance_gain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_performance_gain_descriptor_,
      packetc2w_performance_gain::default_instance_,
      packetc2w_performance_gain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_gain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_gain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_performance_gain));
  packetw2c_performance_gain_result_descriptor_ = file->message_type(5);
  static const int packetw2c_performance_gain_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_gain_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_gain_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_gain_result, gain_),
  };
  packetw2c_performance_gain_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_performance_gain_result_descriptor_,
      packetw2c_performance_gain_result::default_instance_,
      packetw2c_performance_gain_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_gain_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_gain_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_performance_gain_result));
  packetc2w_performance_child_descriptor_ = file->message_type(6);
  static const int packetc2w_performance_child_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_child, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_child, player_id_),
  };
  packetc2w_performance_child_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_performance_child_descriptor_,
      packetc2w_performance_child::default_instance_,
      packetc2w_performance_child_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_child, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_child, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_performance_child));
  packetw2c_performance_child_result_descriptor_ = file->message_type(7);
  static const int packetw2c_performance_child_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_child_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_child_result, info_),
  };
  packetw2c_performance_child_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_performance_child_result_descriptor_,
      packetw2c_performance_child_result::default_instance_,
      packetw2c_performance_child_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_child_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_child_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_performance_child_result));
  packetc2w_performance_check_gain_descriptor_ = file->message_type(8);
  static const int packetc2w_performance_check_gain_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_check_gain, packet_id_),
  };
  packetc2w_performance_check_gain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_performance_check_gain_descriptor_,
      packetc2w_performance_check_gain::default_instance_,
      packetc2w_performance_check_gain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_check_gain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_check_gain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_performance_check_gain));
  packetw2c_performance_check_gain_result_descriptor_ = file->message_type(9);
  static const int packetw2c_performance_check_gain_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_check_gain_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_check_gain_result, gain_),
  };
  packetw2c_performance_check_gain_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_performance_check_gain_result_descriptor_,
      packetw2c_performance_check_gain_result::default_instance_,
      packetw2c_performance_check_gain_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_check_gain_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_check_gain_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_performance_check_gain_result));
  packetc2w_performance_team_create_descriptor_ = file->message_type(10);
  static const int packetc2w_performance_team_create_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_team_create, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_team_create, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_team_create, nick_name_),
  };
  packetc2w_performance_team_create_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_performance_team_create_descriptor_,
      packetc2w_performance_team_create::default_instance_,
      packetc2w_performance_team_create_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_team_create, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_team_create, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_performance_team_create));
  packetw2c_performance_team_create_result_descriptor_ = file->message_type(11);
  static const int packetw2c_performance_team_create_result_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_create_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_create_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_create_result, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_create_result, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_create_result, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_create_result, code_tag_),
  };
  packetw2c_performance_team_create_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_performance_team_create_result_descriptor_,
      packetw2c_performance_team_create_result::default_instance_,
      packetw2c_performance_team_create_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_create_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_create_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_performance_team_create_result));
  packetc2w_performance_team_list_descriptor_ = file->message_type(12);
  static const int packetc2w_performance_team_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_team_list, packet_id_),
  };
  packetc2w_performance_team_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_performance_team_list_descriptor_,
      packetc2w_performance_team_list::default_instance_,
      packetc2w_performance_team_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_team_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_team_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_performance_team_list));
  packetw2c_performance_team_list_result_descriptor_ = file->message_type(13);
  static const int packetw2c_performance_team_list_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_list_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_list_result, teams_),
  };
  packetw2c_performance_team_list_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_performance_team_list_result_descriptor_,
      packetw2c_performance_team_list_result::default_instance_,
      packetw2c_performance_team_list_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_list_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_list_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_performance_team_list_result));
  packetc2w_performance_team_info_descriptor_ = file->message_type(14);
  static const int packetc2w_performance_team_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_team_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_team_info, team_id_),
  };
  packetc2w_performance_team_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_performance_team_info_descriptor_,
      packetc2w_performance_team_info::default_instance_,
      packetc2w_performance_team_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_team_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_team_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_performance_team_info));
  packetw2c_performance_team_info_result_descriptor_ = file->message_type(15);
  static const int packetw2c_performance_team_info_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_info_result, team_),
  };
  packetw2c_performance_team_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_performance_team_info_result_descriptor_,
      packetw2c_performance_team_info_result::default_instance_,
      packetw2c_performance_team_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_performance_team_info_result));
  packetc2w_performance_team_update_descriptor_ = file->message_type(16);
  static const int packetc2w_performance_team_update_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_team_update, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_team_update, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_team_update, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_team_update, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_team_update, nick_name_),
  };
  packetc2w_performance_team_update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_performance_team_update_descriptor_,
      packetc2w_performance_team_update::default_instance_,
      packetc2w_performance_team_update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_team_update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_team_update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_performance_team_update));
  packetw2c_performance_team_update_result_descriptor_ = file->message_type(17);
  static const int packetw2c_performance_team_update_result_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_update_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_update_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_update_result, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_update_result, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_update_result, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_update_result, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_update_result, code_tag_),
  };
  packetw2c_performance_team_update_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_performance_team_update_result_descriptor_,
      packetw2c_performance_team_update_result::default_instance_,
      packetw2c_performance_team_update_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_update_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_team_update_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_performance_team_update_result));
  packetc2w_performance_info_descriptor_ = file->message_type(18);
  static const int packetc2w_performance_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_info, packet_id_),
  };
  packetc2w_performance_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_performance_info_descriptor_,
      packetc2w_performance_info::default_instance_,
      packetc2w_performance_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_performance_info));
  packetw2c_performance_info_result_descriptor_ = file->message_type(19);
  static const int packetw2c_performance_info_result_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, commission_today_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, commission_today_self_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, commission_today_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, commission_yesterday_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, commission_yesterday_self_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, commission_yesterday_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, per_today_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, per_today_self_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, per_today_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, per_yesterday_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, per_yesterday_self_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, per_yesterday_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, per_today_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, per_this_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, rebate_today_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, rebate_this_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, per_b_self_today_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, per_b_child_today_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, per_b_self_yesterday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, per_b_child_yesterday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, ac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, ac_inc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, ac_inc_yd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, ac_inc_tw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, ac_inc_lw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, ac_inc_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, ac_inc_lm_),
  };
  packetw2c_performance_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_performance_info_result_descriptor_,
      packetw2c_performance_info_result::default_instance_,
      packetw2c_performance_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_performance_info_result));
  packetc2w_performance_info_self_today_descriptor_ = file->message_type(20);
  static const int packetc2w_performance_info_self_today_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_info_self_today, packet_id_),
  };
  packetc2w_performance_info_self_today_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_performance_info_self_today_descriptor_,
      packetc2w_performance_info_self_today::default_instance_,
      packetc2w_performance_info_self_today_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_info_self_today, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_info_self_today, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_performance_info_self_today));
  packetw2c_performance_info_self_today_result_descriptor_ = file->message_type(21);
  static const int packetw2c_performance_info_self_today_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_self_today_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_self_today_result, result_),
  };
  packetw2c_performance_info_self_today_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_performance_info_self_today_result_descriptor_,
      packetw2c_performance_info_self_today_result::default_instance_,
      packetw2c_performance_info_self_today_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_self_today_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_self_today_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_performance_info_self_today_result));
  packetc2w_performance_info_self_yesterday_descriptor_ = file->message_type(22);
  static const int packetc2w_performance_info_self_yesterday_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_info_self_yesterday, packet_id_),
  };
  packetc2w_performance_info_self_yesterday_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_performance_info_self_yesterday_descriptor_,
      packetc2w_performance_info_self_yesterday::default_instance_,
      packetc2w_performance_info_self_yesterday_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_info_self_yesterday, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_info_self_yesterday, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_performance_info_self_yesterday));
  packetw2c_performance_info_self_yesterday_result_descriptor_ = file->message_type(23);
  static const int packetw2c_performance_info_self_yesterday_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_self_yesterday_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_self_yesterday_result, result_),
  };
  packetw2c_performance_info_self_yesterday_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_performance_info_self_yesterday_result_descriptor_,
      packetw2c_performance_info_self_yesterday_result::default_instance_,
      packetw2c_performance_info_self_yesterday_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_self_yesterday_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_self_yesterday_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_performance_info_self_yesterday_result));
  packetc2w_performance_info_agent_today_descriptor_ = file->message_type(24);
  static const int packetc2w_performance_info_agent_today_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_info_agent_today, packet_id_),
  };
  packetc2w_performance_info_agent_today_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_performance_info_agent_today_descriptor_,
      packetc2w_performance_info_agent_today::default_instance_,
      packetc2w_performance_info_agent_today_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_info_agent_today, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_info_agent_today, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_performance_info_agent_today));
  packetw2c_performance_info_agent_today_result_descriptor_ = file->message_type(25);
  static const int packetw2c_performance_info_agent_today_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_agent_today_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_agent_today_result, result_),
  };
  packetw2c_performance_info_agent_today_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_performance_info_agent_today_result_descriptor_,
      packetw2c_performance_info_agent_today_result::default_instance_,
      packetw2c_performance_info_agent_today_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_agent_today_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_agent_today_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_performance_info_agent_today_result));
  packetc2w_performance_info_agent_yesterday_descriptor_ = file->message_type(26);
  static const int packetc2w_performance_info_agent_yesterday_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_info_agent_yesterday, packet_id_),
  };
  packetc2w_performance_info_agent_yesterday_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_performance_info_agent_yesterday_descriptor_,
      packetc2w_performance_info_agent_yesterday::default_instance_,
      packetc2w_performance_info_agent_yesterday_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_info_agent_yesterday, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_performance_info_agent_yesterday, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_performance_info_agent_yesterday));
  packetw2c_performance_info_agent_yesterday_result_descriptor_ = file->message_type(27);
  static const int packetw2c_performance_info_agent_yesterday_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_agent_yesterday_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_agent_yesterday_result, result_),
  };
  packetw2c_performance_info_agent_yesterday_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_performance_info_agent_yesterday_result_descriptor_,
      packetw2c_performance_info_agent_yesterday_result::default_instance_,
      packetw2c_performance_info_agent_yesterday_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_agent_yesterday_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_performance_info_agent_yesterday_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_performance_info_agent_yesterday_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client2world_5fperformance_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_performance_info_descriptor_, &msg_performance_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_performance_team_descriptor_, &msg_performance_team::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_performance_list_descriptor_, &packetc2w_performance_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_performance_list_result_descriptor_, &packetw2c_performance_list_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_performance_gain_descriptor_, &packetc2w_performance_gain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_performance_gain_result_descriptor_, &packetw2c_performance_gain_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_performance_child_descriptor_, &packetc2w_performance_child::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_performance_child_result_descriptor_, &packetw2c_performance_child_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_performance_check_gain_descriptor_, &packetc2w_performance_check_gain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_performance_check_gain_result_descriptor_, &packetw2c_performance_check_gain_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_performance_team_create_descriptor_, &packetc2w_performance_team_create::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_performance_team_create_result_descriptor_, &packetw2c_performance_team_create_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_performance_team_list_descriptor_, &packetc2w_performance_team_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_performance_team_list_result_descriptor_, &packetw2c_performance_team_list_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_performance_team_info_descriptor_, &packetc2w_performance_team_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_performance_team_info_result_descriptor_, &packetw2c_performance_team_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_performance_team_update_descriptor_, &packetc2w_performance_team_update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_performance_team_update_result_descriptor_, &packetw2c_performance_team_update_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_performance_info_descriptor_, &packetc2w_performance_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_performance_info_result_descriptor_, &packetw2c_performance_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_performance_info_self_today_descriptor_, &packetc2w_performance_info_self_today::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_performance_info_self_today_result_descriptor_, &packetw2c_performance_info_self_today_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_performance_info_self_yesterday_descriptor_, &packetc2w_performance_info_self_yesterday::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_performance_info_self_yesterday_result_descriptor_, &packetw2c_performance_info_self_yesterday_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_performance_info_agent_today_descriptor_, &packetc2w_performance_info_agent_today::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_performance_info_agent_today_result_descriptor_, &packetw2c_performance_info_agent_today_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_performance_info_agent_yesterday_descriptor_, &packetc2w_performance_info_agent_yesterday::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_performance_info_agent_yesterday_result_descriptor_, &packetw2c_performance_info_agent_yesterday_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client2world_5fperformance_2eproto() {
  delete msg_performance_info::default_instance_;
  delete msg_performance_info_reflection_;
  delete msg_performance_team::default_instance_;
  delete msg_performance_team_reflection_;
  delete packetc2w_performance_list::default_instance_;
  delete packetc2w_performance_list_reflection_;
  delete packetw2c_performance_list_result::default_instance_;
  delete packetw2c_performance_list_result_reflection_;
  delete packetc2w_performance_gain::default_instance_;
  delete packetc2w_performance_gain_reflection_;
  delete packetw2c_performance_gain_result::default_instance_;
  delete packetw2c_performance_gain_result_reflection_;
  delete packetc2w_performance_child::default_instance_;
  delete packetc2w_performance_child_reflection_;
  delete packetw2c_performance_child_result::default_instance_;
  delete packetw2c_performance_child_result_reflection_;
  delete packetc2w_performance_check_gain::default_instance_;
  delete packetc2w_performance_check_gain_reflection_;
  delete packetw2c_performance_check_gain_result::default_instance_;
  delete packetw2c_performance_check_gain_result_reflection_;
  delete packetc2w_performance_team_create::default_instance_;
  delete packetc2w_performance_team_create_reflection_;
  delete packetw2c_performance_team_create_result::default_instance_;
  delete packetw2c_performance_team_create_result_reflection_;
  delete packetc2w_performance_team_list::default_instance_;
  delete packetc2w_performance_team_list_reflection_;
  delete packetw2c_performance_team_list_result::default_instance_;
  delete packetw2c_performance_team_list_result_reflection_;
  delete packetc2w_performance_team_info::default_instance_;
  delete packetc2w_performance_team_info_reflection_;
  delete packetw2c_performance_team_info_result::default_instance_;
  delete packetw2c_performance_team_info_result_reflection_;
  delete packetc2w_performance_team_update::default_instance_;
  delete packetc2w_performance_team_update_reflection_;
  delete packetw2c_performance_team_update_result::default_instance_;
  delete packetw2c_performance_team_update_result_reflection_;
  delete packetc2w_performance_info::default_instance_;
  delete packetc2w_performance_info_reflection_;
  delete packetw2c_performance_info_result::default_instance_;
  delete packetw2c_performance_info_result_reflection_;
  delete packetc2w_performance_info_self_today::default_instance_;
  delete packetc2w_performance_info_self_today_reflection_;
  delete packetw2c_performance_info_self_today_result::default_instance_;
  delete packetw2c_performance_info_self_today_result_reflection_;
  delete packetc2w_performance_info_self_yesterday::default_instance_;
  delete packetc2w_performance_info_self_yesterday_reflection_;
  delete packetw2c_performance_info_self_yesterday_result::default_instance_;
  delete packetw2c_performance_info_self_yesterday_result_reflection_;
  delete packetc2w_performance_info_agent_today::default_instance_;
  delete packetc2w_performance_info_agent_today_reflection_;
  delete packetw2c_performance_info_agent_today_result::default_instance_;
  delete packetw2c_performance_info_agent_today_result_reflection_;
  delete packetc2w_performance_info_agent_yesterday::default_instance_;
  delete packetc2w_performance_info_agent_yesterday_reflection_;
  delete packetw2c_performance_info_agent_yesterday_result::default_instance_;
  delete packetw2c_performance_info_agent_yesterday_result_reflection_;
}

void protobuf_AddDesc_client2world_5fperformance_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client2world_protocols::protobuf_AddDesc_client2world_5fmsg_5ftype_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036client2world_performance.proto\022\026client"
    "2world_protocols\032\033client2world_msg_type."
    "proto\032\022msg_type_def.proto\032\022msg_info_def."
    "proto\"\324\003\n\024msg_performance_info\022\021\n\tplayer"
    "_id\030\001 \001(\005\022\023\n\013photo_frame\030\002 \001(\005\022\021\n\tnick_n"
    "ame\030\003 \001(\t\022\016\n\006parent\030\004 \001(\005\022\021\n\tper_today\030\005"
    " \001(\003\022\025\n\rper_yesterday\030\006 \001(\003\022\025\n\rper_sub_t"
    "oday\030\007 \001(\003\022\031\n\021per_sub_yesterday\030\010 \001(\003\022\016\n"
    "\006per_tw\030\t \001(\003\022\016\n\006per_lw\030\n \001(\003\022\022\n\nper_sub"
    "_tw\030\013 \001(\003\022\022\n\nper_sub_lw\030\014 \001(\003\022\021\n\tts_crea"
    "te\030\r \001(\005\022\n\n\002ac\030\016 \001(\005\022\016\n\006ac_inc\030\017 \001(\005\022\021\n\t"
    "ac_inc_yd\030\020 \001(\005\022\021\n\tac_inc_tw\030\021 \001(\005\022\021\n\tac"
    "_inc_lw\030\022 \001(\005\022\021\n\tac_inc_tm\030\023 \001(\005\022\021\n\tac_i"
    "nc_lm\030\024 \001(\005\022\017\n\007gain_yd\030\025 \001(\003\022\017\n\007gain_tw\030"
    "\026 \001(\003\022\017\n\007gain_lw\030\027 \001(\003\022\014\n\004gain\030\030 \001(\003\"\272\001\n"
    "\024msg_performance_team\022\n\n\002id\030\001 \001(\005\022\014\n\004nam"
    "e\030\002 \001(\t\022\r\n\005count\030\003 \001(\005\022\023\n\013count_limit\030\004 "
    "\001(\005\022\020\n\010code_tag\030\005 \001(\005\022\016\n\006ac_inc\030\006 \001(\005\022B\n"
    "\014member_infos\030\007 \003(\0132,.client2world_proto"
    "cols.msg_performance_info\"v\n\032packetc2w_p"
    "erformance_list\022X\n\tpacket_id\030\001 \001(\0162).cli"
    "ent2world_protocols.e_server_msg_type:\032e"
    "_mst_c2w_performance_list\"\300\001\n!packetw2c_"
    "performance_list_result\022_\n\tpacket_id\030\001 \001"
    "(\0162).client2world_protocols.e_server_msg"
    "_type:!e_mst_w2c_performance_list_result"
    "\022:\n\004info\030\002 \003(\0132,.client2world_protocols."
    "msg_performance_info\"v\n\032packetc2w_perfor"
    "mance_gain\022X\n\tpacket_id\030\001 \001(\0162).client2w"
    "orld_protocols.e_server_msg_type:\032e_mst_"
    "c2w_performance_gain\"\316\001\n!packetw2c_perfo"
    "rmance_gain_result\022_\n\tpacket_id\030\001 \001(\0162)."
    "client2world_protocols.e_server_msg_type"
    ":!e_mst_w2c_performance_gain_result\022:\n\006r"
    "esult\030\002 \001(\0162\036.msg_type_def.e_msg_result_"
    "def:\ne_rmt_fail\022\014\n\004gain\030\003 \001(\003\"\213\001\n\033packet"
    "c2w_performance_child\022Y\n\tpacket_id\030\001 \001(\016"
    "2).client2world_protocols.e_server_msg_t"
    "ype:\033e_mst_c2w_performance_child\022\021\n\tplay"
    "er_id\030\002 \001(\005\"\302\001\n\"packetw2c_performance_ch"
    "ild_result\022`\n\tpacket_id\030\001 \001(\0162).client2w"
    "orld_protocols.e_server_msg_type:\"e_mst_"
    "w2c_performance_child_result\022:\n\004info\030\002 \001"
    "(\0132,.client2world_protocols.msg_performa"
    "nce_info\"\202\001\n packetc2w_performance_check"
    "_gain\022^\n\tpacket_id\030\001 \001(\0162).client2world_"
    "protocols.e_server_msg_type: e_mst_c2w_p"
    "erformance_check_gain\"\236\001\n\'packetw2c_perf"
    "ormance_check_gain_result\022e\n\tpacket_id\030\001"
    " \001(\0162).client2world_protocols.e_server_m"
    "sg_type:\'e_mst_w2c_performance_check_gai"
    "n_result\022\014\n\004gain\030\002 \001(\003\"\246\001\n!packetc2w_per"
    "formance_team_create\022_\n\tpacket_id\030\001 \001(\0162"
    ").client2world_protocols.e_server_msg_ty"
    "pe:!e_mst_c2w_performance_team_create\022\r\n"
    "\005count\030\002 \001(\005\022\021\n\tnick_name\030\003 \001(\t\"\223\002\n(pack"
    "etw2c_performance_team_create_result\022f\n\t"
    "packet_id\030\001 \001(\0162).client2world_protocols"
    ".e_server_msg_type:(e_mst_w2c_performanc"
    "e_team_create_result\022:\n\006result\030\002 \001(\0162\036.m"
    "sg_type_def.e_msg_result_def:\ne_rmt_fail"
    "\022\017\n\007team_id\030\003 \001(\005\022\r\n\005count\030\004 \001(\005\022\021\n\tnick"
    "_name\030\005 \001(\t\022\020\n\010code_tag\030\006 \001(\005\"\200\001\n\037packet"
    "c2w_performance_team_list\022]\n\tpacket_id\030\001"
    " \001(\0162).client2world_protocols.e_server_m"
    "sg_type:\037e_mst_c2w_performance_team_list"
    "\"\313\001\n&packetw2c_performance_team_list_res"
    "ult\022d\n\tpacket_id\030\001 \001(\0162).client2world_pr"
    "otocols.e_server_msg_type:&e_mst_w2c_per"
    "formance_team_list_result\022;\n\005teams\030\002 \003(\013"
    "2,.client2world_protocols.msg_performanc"
    "e_team\"\221\001\n\037packetc2w_performance_team_in"
    "fo\022]\n\tpacket_id\030\001 \001(\0162).client2world_pro"
    "tocols.e_server_msg_type:\037e_mst_c2w_perf"
    "ormance_team_info\022\017\n\007team_id\030\003 \001(\005\"\312\001\n&p"
    "acketw2c_performance_team_info_result\022d\n"
    "\tpacket_id\030\001 \001(\0162).client2world_protocol"
    "s.e_server_msg_type:&e_mst_w2c_performan"
    "ce_team_info_result\022:\n\004team\030\002 \001(\0132,.clie"
    "nt2world_protocols.msg_performance_team\""
    "\312\001\n!packetc2w_performance_team_update\022_\n"
    "\tpacket_id\030\001 \001(\0162).client2world_protocol"
    "s.e_server_msg_type:!e_mst_c2w_performan"
    "ce_team_update\022\016\n\006optype\030\002 \001(\005\022\017\n\007team_i"
    "d\030\003 \001(\005\022\020\n\005limit\030\004 \001(\005:\0010\022\021\n\tnick_name\030\005"
    " \001(\t\"\246\002\n(packetw2c_performance_team_upda"
    "te_result\022f\n\tpacket_id\030\001 \001(\0162).client2wo"
    "rld_protocols.e_server_msg_type:(e_mst_w"
    "2c_performance_team_update_result\022:\n\006res"
    "ult\030\002 \001(\0162\036.msg_type_def.e_msg_result_de"
    "f:\ne_rmt_fail\022\016\n\006optype\030\003 \001(\005\022\017\n\007team_id"
    "\030\004 \001(\005\022\020\n\005limit\030\005 \001(\005:\0010\022\021\n\tnick_name\030\006 "
    "\001(\t\022\020\n\010code_tag\030\007 \001(\005\"v\n\032packetc2w_perfo"
    "rmance_info\022X\n\tpacket_id\030\001 \001(\0162).client2"
    "world_protocols.e_server_msg_type:\032e_mst"
    "_c2w_performance_info\"\261\006\n!packetw2c_perf"
    "ormance_info_result\022_\n\tpacket_id\030\001 \001(\0162)"
    ".client2world_protocols.e_server_msg_typ"
    "e:!e_mst_w2c_performance_info_result\022\035\n\025"
    "commission_today_team\030\002 \001(\003\022\035\n\025commissio"
    "n_today_self\030\003 \001(\003\022\036\n\026commission_today_a"
    "gent\030\004 \001(\003\022!\n\031commission_yesterday_team\030"
    "\005 \001(\003\022!\n\031commission_yesterday_self\030\006 \001(\003"
    "\022\"\n\032commission_yesterday_agent\030\007 \001(\003\022\026\n\016"
    "per_today_team\030\010 \001(\003\022\026\n\016per_today_self\030\t"
    " \001(\003\022\027\n\017per_today_agent\030\n \001(\003\022\032\n\022per_yes"
    "terday_team\030\013 \001(\003\022\032\n\022per_yesterday_self\030"
    "\014 \001(\003\022\033\n\023per_yesterday_agent\030\r \001(\003\022\021\n\tpe"
    "r_today\030\016 \001(\003\022\025\n\rper_this_week\030\017 \001(\003\022\024\n\014"
    "rebate_today\030\020 \001(\003\022\030\n\020rebate_this_week\030\021"
    " \001(\003\022\030\n\020per_b_self_today\030\022 \001(\003\022\031\n\021per_b_"
    "child_today\030\023 \001(\003\022\034\n\024per_b_self_yesterda"
    "y\030\024 \001(\003\022\035\n\025per_b_child_yesterday\030\025 \001(\003\022\n"
    "\n\002ac\030\026 \001(\005\022\016\n\006ac_inc\030\027 \001(\005\022\021\n\tac_inc_yd\030"
    "\030 \001(\005\022\021\n\tac_inc_tw\030\031 \001(\005\022\021\n\tac_inc_lw\030\032 "
    "\001(\005\022\021\n\tac_inc_tm\030\033 \001(\005\022\021\n\tac_inc_lm\030\034 \001("
    "\005\"\214\001\n%packetc2w_performance_info_self_to"
    "day\022c\n\tpacket_id\030\001 \001(\0162).client2world_pr"
    "otocols.e_server_msg_type:%e_mst_c2w_per"
    "formance_info_self_today\"\326\001\n,packetw2c_p"
    "erformance_info_self_today_result\022j\n\tpac"
    "ket_id\030\001 \001(\0162).client2world_protocols.e_"
    "server_msg_type:,e_mst_w2c_performance_i"
    "nfo_self_today_result\022:\n\006result\030\002 \001(\0162\036."
    "msg_type_def.e_msg_result_def:\ne_rmt_fai"
    "l\"\224\001\n)packetc2w_performance_info_self_ye"
    "sterday\022g\n\tpacket_id\030\001 \001(\0162).client2worl"
    "d_protocols.e_server_msg_type:)e_mst_c2w"
    "_performance_info_self_yesterday\"\336\001\n0pac"
    "ketw2c_performance_info_self_yesterday_r"
    "esult\022n\n\tpacket_id\030\001 \001(\0162).client2world_"
    "protocols.e_server_msg_type:0e_mst_w2c_p"
    "erformance_info_self_yesterday_result\022:\n"
    "\006result\030\002 \001(\0162\036.msg_type_def.e_msg_resul"
    "t_def:\ne_rmt_fail\"\216\001\n&packetc2w_performa"
    "nce_info_agent_today\022d\n\tpacket_id\030\001 \001(\0162"
    ").client2world_protocols.e_server_msg_ty"
    "pe:&e_mst_c2w_performance_info_agent_tod"
    "ay\"\330\001\n-packetw2c_performance_info_agent_"
    "today_result\022k\n\tpacket_id\030\001 \001(\0162).client"
    "2world_protocols.e_server_msg_type:-e_ms"
    "t_w2c_performance_info_agent_today_resul"
    "t\022:\n\006result\030\002 \001(\0162\036.msg_type_def.e_msg_r"
    "esult_def:\ne_rmt_fail\"\226\001\n*packetc2w_perf"
    "ormance_info_agent_yesterday\022h\n\tpacket_i"
    "d\030\001 \001(\0162).client2world_protocols.e_serve"
    "r_msg_type:*e_mst_c2w_performance_info_a"
    "gent_yesterday\"\340\001\n1packetw2c_performance"
    "_info_agent_yesterday_result\022o\n\tpacket_i"
    "d\030\001 \001(\0162).client2world_protocols.e_serve"
    "r_msg_type:1e_mst_w2c_performance_info_a"
    "gent_yesterday_result\022:\n\006result\030\002 \001(\0162\036."
    "msg_type_def.e_msg_result_def:\ne_rmt_fai"
    "l", 6121);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client2world_performance.proto", &protobuf_RegisterTypes);
  msg_performance_info::default_instance_ = new msg_performance_info();
  msg_performance_team::default_instance_ = new msg_performance_team();
  packetc2w_performance_list::default_instance_ = new packetc2w_performance_list();
  packetw2c_performance_list_result::default_instance_ = new packetw2c_performance_list_result();
  packetc2w_performance_gain::default_instance_ = new packetc2w_performance_gain();
  packetw2c_performance_gain_result::default_instance_ = new packetw2c_performance_gain_result();
  packetc2w_performance_child::default_instance_ = new packetc2w_performance_child();
  packetw2c_performance_child_result::default_instance_ = new packetw2c_performance_child_result();
  packetc2w_performance_check_gain::default_instance_ = new packetc2w_performance_check_gain();
  packetw2c_performance_check_gain_result::default_instance_ = new packetw2c_performance_check_gain_result();
  packetc2w_performance_team_create::default_instance_ = new packetc2w_performance_team_create();
  packetw2c_performance_team_create_result::default_instance_ = new packetw2c_performance_team_create_result();
  packetc2w_performance_team_list::default_instance_ = new packetc2w_performance_team_list();
  packetw2c_performance_team_list_result::default_instance_ = new packetw2c_performance_team_list_result();
  packetc2w_performance_team_info::default_instance_ = new packetc2w_performance_team_info();
  packetw2c_performance_team_info_result::default_instance_ = new packetw2c_performance_team_info_result();
  packetc2w_performance_team_update::default_instance_ = new packetc2w_performance_team_update();
  packetw2c_performance_team_update_result::default_instance_ = new packetw2c_performance_team_update_result();
  packetc2w_performance_info::default_instance_ = new packetc2w_performance_info();
  packetw2c_performance_info_result::default_instance_ = new packetw2c_performance_info_result();
  packetc2w_performance_info_self_today::default_instance_ = new packetc2w_performance_info_self_today();
  packetw2c_performance_info_self_today_result::default_instance_ = new packetw2c_performance_info_self_today_result();
  packetc2w_performance_info_self_yesterday::default_instance_ = new packetc2w_performance_info_self_yesterday();
  packetw2c_performance_info_self_yesterday_result::default_instance_ = new packetw2c_performance_info_self_yesterday_result();
  packetc2w_performance_info_agent_today::default_instance_ = new packetc2w_performance_info_agent_today();
  packetw2c_performance_info_agent_today_result::default_instance_ = new packetw2c_performance_info_agent_today_result();
  packetc2w_performance_info_agent_yesterday::default_instance_ = new packetc2w_performance_info_agent_yesterday();
  packetw2c_performance_info_agent_yesterday_result::default_instance_ = new packetw2c_performance_info_agent_yesterday_result();
  msg_performance_info::default_instance_->InitAsDefaultInstance();
  msg_performance_team::default_instance_->InitAsDefaultInstance();
  packetc2w_performance_list::default_instance_->InitAsDefaultInstance();
  packetw2c_performance_list_result::default_instance_->InitAsDefaultInstance();
  packetc2w_performance_gain::default_instance_->InitAsDefaultInstance();
  packetw2c_performance_gain_result::default_instance_->InitAsDefaultInstance();
  packetc2w_performance_child::default_instance_->InitAsDefaultInstance();
  packetw2c_performance_child_result::default_instance_->InitAsDefaultInstance();
  packetc2w_performance_check_gain::default_instance_->InitAsDefaultInstance();
  packetw2c_performance_check_gain_result::default_instance_->InitAsDefaultInstance();
  packetc2w_performance_team_create::default_instance_->InitAsDefaultInstance();
  packetw2c_performance_team_create_result::default_instance_->InitAsDefaultInstance();
  packetc2w_performance_team_list::default_instance_->InitAsDefaultInstance();
  packetw2c_performance_team_list_result::default_instance_->InitAsDefaultInstance();
  packetc2w_performance_team_info::default_instance_->InitAsDefaultInstance();
  packetw2c_performance_team_info_result::default_instance_->InitAsDefaultInstance();
  packetc2w_performance_team_update::default_instance_->InitAsDefaultInstance();
  packetw2c_performance_team_update_result::default_instance_->InitAsDefaultInstance();
  packetc2w_performance_info::default_instance_->InitAsDefaultInstance();
  packetw2c_performance_info_result::default_instance_->InitAsDefaultInstance();
  packetc2w_performance_info_self_today::default_instance_->InitAsDefaultInstance();
  packetw2c_performance_info_self_today_result::default_instance_->InitAsDefaultInstance();
  packetc2w_performance_info_self_yesterday::default_instance_->InitAsDefaultInstance();
  packetw2c_performance_info_self_yesterday_result::default_instance_->InitAsDefaultInstance();
  packetc2w_performance_info_agent_today::default_instance_->InitAsDefaultInstance();
  packetw2c_performance_info_agent_today_result::default_instance_->InitAsDefaultInstance();
  packetc2w_performance_info_agent_yesterday::default_instance_->InitAsDefaultInstance();
  packetw2c_performance_info_agent_yesterday_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client2world_5fperformance_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client2world_5fperformance_2eproto {
  StaticDescriptorInitializer_client2world_5fperformance_2eproto() {
    protobuf_AddDesc_client2world_5fperformance_2eproto();
  }
} static_descriptor_initializer_client2world_5fperformance_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_performance_info::kPlayerIdFieldNumber;
const int msg_performance_info::kPhotoFrameFieldNumber;
const int msg_performance_info::kNickNameFieldNumber;
const int msg_performance_info::kParentFieldNumber;
const int msg_performance_info::kPerTodayFieldNumber;
const int msg_performance_info::kPerYesterdayFieldNumber;
const int msg_performance_info::kPerSubTodayFieldNumber;
const int msg_performance_info::kPerSubYesterdayFieldNumber;
const int msg_performance_info::kPerTwFieldNumber;
const int msg_performance_info::kPerLwFieldNumber;
const int msg_performance_info::kPerSubTwFieldNumber;
const int msg_performance_info::kPerSubLwFieldNumber;
const int msg_performance_info::kTsCreateFieldNumber;
const int msg_performance_info::kAcFieldNumber;
const int msg_performance_info::kAcIncFieldNumber;
const int msg_performance_info::kAcIncYdFieldNumber;
const int msg_performance_info::kAcIncTwFieldNumber;
const int msg_performance_info::kAcIncLwFieldNumber;
const int msg_performance_info::kAcIncTmFieldNumber;
const int msg_performance_info::kAcIncLmFieldNumber;
const int msg_performance_info::kGainYdFieldNumber;
const int msg_performance_info::kGainTwFieldNumber;
const int msg_performance_info::kGainLwFieldNumber;
const int msg_performance_info::kGainFieldNumber;
#endif  // !_MSC_VER

msg_performance_info::msg_performance_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_performance_info::InitAsDefaultInstance() {
}

msg_performance_info::msg_performance_info(const msg_performance_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_performance_info::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  photo_frame_ = 0;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parent_ = 0;
  per_today_ = GOOGLE_LONGLONG(0);
  per_yesterday_ = GOOGLE_LONGLONG(0);
  per_sub_today_ = GOOGLE_LONGLONG(0);
  per_sub_yesterday_ = GOOGLE_LONGLONG(0);
  per_tw_ = GOOGLE_LONGLONG(0);
  per_lw_ = GOOGLE_LONGLONG(0);
  per_sub_tw_ = GOOGLE_LONGLONG(0);
  per_sub_lw_ = GOOGLE_LONGLONG(0);
  ts_create_ = 0;
  ac_ = 0;
  ac_inc_ = 0;
  ac_inc_yd_ = 0;
  ac_inc_tw_ = 0;
  ac_inc_lw_ = 0;
  ac_inc_tm_ = 0;
  ac_inc_lm_ = 0;
  gain_yd_ = GOOGLE_LONGLONG(0);
  gain_tw_ = GOOGLE_LONGLONG(0);
  gain_lw_ = GOOGLE_LONGLONG(0);
  gain_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_performance_info::~msg_performance_info() {
  SharedDtor();
}

void msg_performance_info::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void msg_performance_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_performance_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_performance_info_descriptor_;
}

const msg_performance_info& msg_performance_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

msg_performance_info* msg_performance_info::default_instance_ = NULL;

msg_performance_info* msg_performance_info::New() const {
  return new msg_performance_info;
}

void msg_performance_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    photo_frame_ = 0;
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    parent_ = 0;
    per_today_ = GOOGLE_LONGLONG(0);
    per_yesterday_ = GOOGLE_LONGLONG(0);
    per_sub_today_ = GOOGLE_LONGLONG(0);
    per_sub_yesterday_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    per_tw_ = GOOGLE_LONGLONG(0);
    per_lw_ = GOOGLE_LONGLONG(0);
    per_sub_tw_ = GOOGLE_LONGLONG(0);
    per_sub_lw_ = GOOGLE_LONGLONG(0);
    ts_create_ = 0;
    ac_ = 0;
    ac_inc_ = 0;
    ac_inc_yd_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    ac_inc_tw_ = 0;
    ac_inc_lw_ = 0;
    ac_inc_tm_ = 0;
    ac_inc_lm_ = 0;
    gain_yd_ = GOOGLE_LONGLONG(0);
    gain_tw_ = GOOGLE_LONGLONG(0);
    gain_lw_ = GOOGLE_LONGLONG(0);
    gain_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_performance_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_photo_frame;
        break;
      }

      // optional int32 photo_frame = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photo_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photo_frame_)));
          set_has_photo_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_parent;
        break;
      }

      // optional int32 parent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_)));
          set_has_parent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_per_today;
        break;
      }

      // optional int64 per_today = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_per_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &per_today_)));
          set_has_per_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_per_yesterday;
        break;
      }

      // optional int64 per_yesterday = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_per_yesterday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &per_yesterday_)));
          set_has_per_yesterday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_per_sub_today;
        break;
      }

      // optional int64 per_sub_today = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_per_sub_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &per_sub_today_)));
          set_has_per_sub_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_per_sub_yesterday;
        break;
      }

      // optional int64 per_sub_yesterday = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_per_sub_yesterday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &per_sub_yesterday_)));
          set_has_per_sub_yesterday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_per_tw;
        break;
      }

      // optional int64 per_tw = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_per_tw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &per_tw_)));
          set_has_per_tw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_per_lw;
        break;
      }

      // optional int64 per_lw = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_per_lw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &per_lw_)));
          set_has_per_lw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_per_sub_tw;
        break;
      }

      // optional int64 per_sub_tw = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_per_sub_tw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &per_sub_tw_)));
          set_has_per_sub_tw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_per_sub_lw;
        break;
      }

      // optional int64 per_sub_lw = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_per_sub_lw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &per_sub_lw_)));
          set_has_per_sub_lw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_ts_create;
        break;
      }

      // optional int32 ts_create = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ts_create:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ts_create_)));
          set_has_ts_create();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ac;
        break;
      }

      // optional int32 ac = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ac_)));
          set_has_ac();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_ac_inc;
        break;
      }

      // optional int32 ac_inc = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ac_inc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ac_inc_)));
          set_has_ac_inc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ac_inc_yd;
        break;
      }

      // optional int32 ac_inc_yd = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ac_inc_yd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ac_inc_yd_)));
          set_has_ac_inc_yd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_ac_inc_tw;
        break;
      }

      // optional int32 ac_inc_tw = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ac_inc_tw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ac_inc_tw_)));
          set_has_ac_inc_tw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_ac_inc_lw;
        break;
      }

      // optional int32 ac_inc_lw = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ac_inc_lw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ac_inc_lw_)));
          set_has_ac_inc_lw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_ac_inc_tm;
        break;
      }

      // optional int32 ac_inc_tm = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ac_inc_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ac_inc_tm_)));
          set_has_ac_inc_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_ac_inc_lm;
        break;
      }

      // optional int32 ac_inc_lm = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ac_inc_lm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ac_inc_lm_)));
          set_has_ac_inc_lm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_gain_yd;
        break;
      }

      // optional int64 gain_yd = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain_yd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gain_yd_)));
          set_has_gain_yd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_gain_tw;
        break;
      }

      // optional int64 gain_tw = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain_tw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gain_tw_)));
          set_has_gain_tw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_gain_lw;
        break;
      }

      // optional int64 gain_lw = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain_lw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gain_lw_)));
          set_has_gain_lw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_gain;
        break;
      }

      // optional int64 gain = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_performance_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional int32 photo_frame = 2;
  if (has_photo_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->photo_frame(), output);
  }

  // optional string nick_name = 3;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nick_name(), output);
  }

  // optional int32 parent = 4;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->parent(), output);
  }

  // optional int64 per_today = 5;
  if (has_per_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->per_today(), output);
  }

  // optional int64 per_yesterday = 6;
  if (has_per_yesterday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->per_yesterday(), output);
  }

  // optional int64 per_sub_today = 7;
  if (has_per_sub_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->per_sub_today(), output);
  }

  // optional int64 per_sub_yesterday = 8;
  if (has_per_sub_yesterday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->per_sub_yesterday(), output);
  }

  // optional int64 per_tw = 9;
  if (has_per_tw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->per_tw(), output);
  }

  // optional int64 per_lw = 10;
  if (has_per_lw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->per_lw(), output);
  }

  // optional int64 per_sub_tw = 11;
  if (has_per_sub_tw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->per_sub_tw(), output);
  }

  // optional int64 per_sub_lw = 12;
  if (has_per_sub_lw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->per_sub_lw(), output);
  }

  // optional int32 ts_create = 13;
  if (has_ts_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->ts_create(), output);
  }

  // optional int32 ac = 14;
  if (has_ac()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->ac(), output);
  }

  // optional int32 ac_inc = 15;
  if (has_ac_inc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->ac_inc(), output);
  }

  // optional int32 ac_inc_yd = 16;
  if (has_ac_inc_yd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->ac_inc_yd(), output);
  }

  // optional int32 ac_inc_tw = 17;
  if (has_ac_inc_tw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->ac_inc_tw(), output);
  }

  // optional int32 ac_inc_lw = 18;
  if (has_ac_inc_lw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->ac_inc_lw(), output);
  }

  // optional int32 ac_inc_tm = 19;
  if (has_ac_inc_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->ac_inc_tm(), output);
  }

  // optional int32 ac_inc_lm = 20;
  if (has_ac_inc_lm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->ac_inc_lm(), output);
  }

  // optional int64 gain_yd = 21;
  if (has_gain_yd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->gain_yd(), output);
  }

  // optional int64 gain_tw = 22;
  if (has_gain_tw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->gain_tw(), output);
  }

  // optional int64 gain_lw = 23;
  if (has_gain_lw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->gain_lw(), output);
  }

  // optional int64 gain = 24;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->gain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_performance_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional int32 photo_frame = 2;
  if (has_photo_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->photo_frame(), target);
  }

  // optional string nick_name = 3;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nick_name(), target);
  }

  // optional int32 parent = 4;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->parent(), target);
  }

  // optional int64 per_today = 5;
  if (has_per_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->per_today(), target);
  }

  // optional int64 per_yesterday = 6;
  if (has_per_yesterday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->per_yesterday(), target);
  }

  // optional int64 per_sub_today = 7;
  if (has_per_sub_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->per_sub_today(), target);
  }

  // optional int64 per_sub_yesterday = 8;
  if (has_per_sub_yesterday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->per_sub_yesterday(), target);
  }

  // optional int64 per_tw = 9;
  if (has_per_tw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->per_tw(), target);
  }

  // optional int64 per_lw = 10;
  if (has_per_lw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->per_lw(), target);
  }

  // optional int64 per_sub_tw = 11;
  if (has_per_sub_tw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->per_sub_tw(), target);
  }

  // optional int64 per_sub_lw = 12;
  if (has_per_sub_lw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->per_sub_lw(), target);
  }

  // optional int32 ts_create = 13;
  if (has_ts_create()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->ts_create(), target);
  }

  // optional int32 ac = 14;
  if (has_ac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->ac(), target);
  }

  // optional int32 ac_inc = 15;
  if (has_ac_inc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->ac_inc(), target);
  }

  // optional int32 ac_inc_yd = 16;
  if (has_ac_inc_yd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->ac_inc_yd(), target);
  }

  // optional int32 ac_inc_tw = 17;
  if (has_ac_inc_tw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->ac_inc_tw(), target);
  }

  // optional int32 ac_inc_lw = 18;
  if (has_ac_inc_lw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->ac_inc_lw(), target);
  }

  // optional int32 ac_inc_tm = 19;
  if (has_ac_inc_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->ac_inc_tm(), target);
  }

  // optional int32 ac_inc_lm = 20;
  if (has_ac_inc_lm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->ac_inc_lm(), target);
  }

  // optional int64 gain_yd = 21;
  if (has_gain_yd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->gain_yd(), target);
  }

  // optional int64 gain_tw = 22;
  if (has_gain_tw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->gain_tw(), target);
  }

  // optional int64 gain_lw = 23;
  if (has_gain_lw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->gain_lw(), target);
  }

  // optional int64 gain = 24;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->gain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_performance_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 photo_frame = 2;
    if (has_photo_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->photo_frame());
    }

    // optional string nick_name = 3;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional int32 parent = 4;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent());
    }

    // optional int64 per_today = 5;
    if (has_per_today()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->per_today());
    }

    // optional int64 per_yesterday = 6;
    if (has_per_yesterday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->per_yesterday());
    }

    // optional int64 per_sub_today = 7;
    if (has_per_sub_today()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->per_sub_today());
    }

    // optional int64 per_sub_yesterday = 8;
    if (has_per_sub_yesterday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->per_sub_yesterday());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 per_tw = 9;
    if (has_per_tw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->per_tw());
    }

    // optional int64 per_lw = 10;
    if (has_per_lw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->per_lw());
    }

    // optional int64 per_sub_tw = 11;
    if (has_per_sub_tw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->per_sub_tw());
    }

    // optional int64 per_sub_lw = 12;
    if (has_per_sub_lw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->per_sub_lw());
    }

    // optional int32 ts_create = 13;
    if (has_ts_create()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ts_create());
    }

    // optional int32 ac = 14;
    if (has_ac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ac());
    }

    // optional int32 ac_inc = 15;
    if (has_ac_inc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ac_inc());
    }

    // optional int32 ac_inc_yd = 16;
    if (has_ac_inc_yd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ac_inc_yd());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 ac_inc_tw = 17;
    if (has_ac_inc_tw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ac_inc_tw());
    }

    // optional int32 ac_inc_lw = 18;
    if (has_ac_inc_lw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ac_inc_lw());
    }

    // optional int32 ac_inc_tm = 19;
    if (has_ac_inc_tm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ac_inc_tm());
    }

    // optional int32 ac_inc_lm = 20;
    if (has_ac_inc_lm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ac_inc_lm());
    }

    // optional int64 gain_yd = 21;
    if (has_gain_yd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gain_yd());
    }

    // optional int64 gain_tw = 22;
    if (has_gain_tw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gain_tw());
    }

    // optional int64 gain_lw = 23;
    if (has_gain_lw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gain_lw());
    }

    // optional int64 gain = 24;
    if (has_gain()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_performance_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_performance_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_performance_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_performance_info::MergeFrom(const msg_performance_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_photo_frame()) {
      set_photo_frame(from.photo_frame());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_parent()) {
      set_parent(from.parent());
    }
    if (from.has_per_today()) {
      set_per_today(from.per_today());
    }
    if (from.has_per_yesterday()) {
      set_per_yesterday(from.per_yesterday());
    }
    if (from.has_per_sub_today()) {
      set_per_sub_today(from.per_sub_today());
    }
    if (from.has_per_sub_yesterday()) {
      set_per_sub_yesterday(from.per_sub_yesterday());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_per_tw()) {
      set_per_tw(from.per_tw());
    }
    if (from.has_per_lw()) {
      set_per_lw(from.per_lw());
    }
    if (from.has_per_sub_tw()) {
      set_per_sub_tw(from.per_sub_tw());
    }
    if (from.has_per_sub_lw()) {
      set_per_sub_lw(from.per_sub_lw());
    }
    if (from.has_ts_create()) {
      set_ts_create(from.ts_create());
    }
    if (from.has_ac()) {
      set_ac(from.ac());
    }
    if (from.has_ac_inc()) {
      set_ac_inc(from.ac_inc());
    }
    if (from.has_ac_inc_yd()) {
      set_ac_inc_yd(from.ac_inc_yd());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ac_inc_tw()) {
      set_ac_inc_tw(from.ac_inc_tw());
    }
    if (from.has_ac_inc_lw()) {
      set_ac_inc_lw(from.ac_inc_lw());
    }
    if (from.has_ac_inc_tm()) {
      set_ac_inc_tm(from.ac_inc_tm());
    }
    if (from.has_ac_inc_lm()) {
      set_ac_inc_lm(from.ac_inc_lm());
    }
    if (from.has_gain_yd()) {
      set_gain_yd(from.gain_yd());
    }
    if (from.has_gain_tw()) {
      set_gain_tw(from.gain_tw());
    }
    if (from.has_gain_lw()) {
      set_gain_lw(from.gain_lw());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_performance_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_performance_info::CopyFrom(const msg_performance_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_performance_info::IsInitialized() const {

  return true;
}

void msg_performance_info::Swap(msg_performance_info* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(photo_frame_, other->photo_frame_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(parent_, other->parent_);
    std::swap(per_today_, other->per_today_);
    std::swap(per_yesterday_, other->per_yesterday_);
    std::swap(per_sub_today_, other->per_sub_today_);
    std::swap(per_sub_yesterday_, other->per_sub_yesterday_);
    std::swap(per_tw_, other->per_tw_);
    std::swap(per_lw_, other->per_lw_);
    std::swap(per_sub_tw_, other->per_sub_tw_);
    std::swap(per_sub_lw_, other->per_sub_lw_);
    std::swap(ts_create_, other->ts_create_);
    std::swap(ac_, other->ac_);
    std::swap(ac_inc_, other->ac_inc_);
    std::swap(ac_inc_yd_, other->ac_inc_yd_);
    std::swap(ac_inc_tw_, other->ac_inc_tw_);
    std::swap(ac_inc_lw_, other->ac_inc_lw_);
    std::swap(ac_inc_tm_, other->ac_inc_tm_);
    std::swap(ac_inc_lm_, other->ac_inc_lm_);
    std::swap(gain_yd_, other->gain_yd_);
    std::swap(gain_tw_, other->gain_tw_);
    std::swap(gain_lw_, other->gain_lw_);
    std::swap(gain_, other->gain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_performance_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_performance_info_descriptor_;
  metadata.reflection = msg_performance_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_performance_team::kIdFieldNumber;
const int msg_performance_team::kNameFieldNumber;
const int msg_performance_team::kCountFieldNumber;
const int msg_performance_team::kCountLimitFieldNumber;
const int msg_performance_team::kCodeTagFieldNumber;
const int msg_performance_team::kAcIncFieldNumber;
const int msg_performance_team::kMemberInfosFieldNumber;
#endif  // !_MSC_VER

msg_performance_team::msg_performance_team()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_performance_team::InitAsDefaultInstance() {
}

msg_performance_team::msg_performance_team(const msg_performance_team& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_performance_team::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0;
  count_limit_ = 0;
  code_tag_ = 0;
  ac_inc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_performance_team::~msg_performance_team() {
  SharedDtor();
}

void msg_performance_team::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void msg_performance_team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_performance_team::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_performance_team_descriptor_;
}

const msg_performance_team& msg_performance_team::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

msg_performance_team* msg_performance_team::default_instance_ = NULL;

msg_performance_team* msg_performance_team::New() const {
  return new msg_performance_team;
}

void msg_performance_team::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    count_ = 0;
    count_limit_ = 0;
    code_tag_ = 0;
    ac_inc_ = 0;
  }
  member_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_performance_team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count_limit;
        break;
      }

      // optional int32 count_limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_limit_)));
          set_has_count_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_code_tag;
        break;
      }

      // optional int32 code_tag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_tag_)));
          set_has_code_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ac_inc;
        break;
      }

      // optional int32 ac_inc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ac_inc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ac_inc_)));
          set_has_ac_inc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_member_infos;
        break;
      }

      // repeated .client2world_protocols.msg_performance_info member_infos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_member_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_performance_team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // optional int32 count_limit = 4;
  if (has_count_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count_limit(), output);
  }

  // optional int32 code_tag = 5;
  if (has_code_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->code_tag(), output);
  }

  // optional int32 ac_inc = 6;
  if (has_ac_inc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ac_inc(), output);
  }

  // repeated .client2world_protocols.msg_performance_info member_infos = 7;
  for (int i = 0; i < this->member_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->member_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_performance_team::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // optional int32 count_limit = 4;
  if (has_count_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count_limit(), target);
  }

  // optional int32 code_tag = 5;
  if (has_code_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->code_tag(), target);
  }

  // optional int32 ac_inc = 6;
  if (has_ac_inc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ac_inc(), target);
  }

  // repeated .client2world_protocols.msg_performance_info member_infos = 7;
  for (int i = 0; i < this->member_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->member_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_performance_team::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 count_limit = 4;
    if (has_count_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_limit());
    }

    // optional int32 code_tag = 5;
    if (has_code_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code_tag());
    }

    // optional int32 ac_inc = 6;
    if (has_ac_inc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ac_inc());
    }

  }
  // repeated .client2world_protocols.msg_performance_info member_infos = 7;
  total_size += 1 * this->member_infos_size();
  for (int i = 0; i < this->member_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_performance_team::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_performance_team* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_performance_team*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_performance_team::MergeFrom(const msg_performance_team& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_infos_.MergeFrom(from.member_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_count_limit()) {
      set_count_limit(from.count_limit());
    }
    if (from.has_code_tag()) {
      set_code_tag(from.code_tag());
    }
    if (from.has_ac_inc()) {
      set_ac_inc(from.ac_inc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_performance_team::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_performance_team::CopyFrom(const msg_performance_team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_performance_team::IsInitialized() const {

  return true;
}

void msg_performance_team::Swap(msg_performance_team* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(count_, other->count_);
    std::swap(count_limit_, other->count_limit_);
    std::swap(code_tag_, other->code_tag_);
    std::swap(ac_inc_, other->ac_inc_);
    member_infos_.Swap(&other->member_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_performance_team::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_performance_team_descriptor_;
  metadata.reflection = msg_performance_team_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_performance_list::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_performance_list::packetc2w_performance_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_performance_list::InitAsDefaultInstance() {
}

packetc2w_performance_list::packetc2w_performance_list(const packetc2w_performance_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_performance_list::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5120;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_performance_list::~packetc2w_performance_list() {
  SharedDtor();
}

void packetc2w_performance_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_performance_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_performance_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_performance_list_descriptor_;
}

const packetc2w_performance_list& packetc2w_performance_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetc2w_performance_list* packetc2w_performance_list::default_instance_ = NULL;

packetc2w_performance_list* packetc2w_performance_list::New() const {
  return new packetc2w_performance_list;
}

void packetc2w_performance_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5120;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_performance_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_list];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_performance_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_list];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_performance_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_list];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_performance_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_list];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_performance_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_performance_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_performance_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_performance_list::MergeFrom(const packetc2w_performance_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_performance_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_performance_list::CopyFrom(const packetc2w_performance_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_performance_list::IsInitialized() const {

  return true;
}

void packetc2w_performance_list::Swap(packetc2w_performance_list* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_performance_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_performance_list_descriptor_;
  metadata.reflection = packetc2w_performance_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_performance_list_result::kPacketIdFieldNumber;
const int packetw2c_performance_list_result::kInfoFieldNumber;
#endif  // !_MSC_VER

packetw2c_performance_list_result::packetw2c_performance_list_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_performance_list_result::InitAsDefaultInstance() {
}

packetw2c_performance_list_result::packetw2c_performance_list_result(const packetw2c_performance_list_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_performance_list_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7631;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_performance_list_result::~packetw2c_performance_list_result() {
  SharedDtor();
}

void packetw2c_performance_list_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_performance_list_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_performance_list_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_performance_list_result_descriptor_;
}

const packetw2c_performance_list_result& packetw2c_performance_list_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetw2c_performance_list_result* packetw2c_performance_list_result::default_instance_ = NULL;

packetw2c_performance_list_result* packetw2c_performance_list_result::New() const {
  return new packetw2c_performance_list_result;
}

void packetw2c_performance_list_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7631;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_performance_list_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_list_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .client2world_protocols.msg_performance_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_performance_list_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_list_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_performance_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_performance_list_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_list_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_performance_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_performance_list_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_list_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client2world_protocols.msg_performance_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_performance_list_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_performance_list_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_performance_list_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_performance_list_result::MergeFrom(const packetw2c_performance_list_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_performance_list_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_performance_list_result::CopyFrom(const packetw2c_performance_list_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_performance_list_result::IsInitialized() const {

  return true;
}

void packetw2c_performance_list_result::Swap(packetw2c_performance_list_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_performance_list_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_performance_list_result_descriptor_;
  metadata.reflection = packetw2c_performance_list_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_performance_gain::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_performance_gain::packetc2w_performance_gain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_performance_gain::InitAsDefaultInstance() {
}

packetc2w_performance_gain::packetc2w_performance_gain(const packetc2w_performance_gain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_performance_gain::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5121;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_performance_gain::~packetc2w_performance_gain() {
  SharedDtor();
}

void packetc2w_performance_gain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_performance_gain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_performance_gain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_performance_gain_descriptor_;
}

const packetc2w_performance_gain& packetc2w_performance_gain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetc2w_performance_gain* packetc2w_performance_gain::default_instance_ = NULL;

packetc2w_performance_gain* packetc2w_performance_gain::New() const {
  return new packetc2w_performance_gain;
}

void packetc2w_performance_gain::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5121;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_performance_gain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_gain];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_performance_gain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_gain];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_performance_gain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_gain];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_performance_gain::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_gain];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_performance_gain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_performance_gain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_performance_gain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_performance_gain::MergeFrom(const packetc2w_performance_gain& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_performance_gain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_performance_gain::CopyFrom(const packetc2w_performance_gain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_performance_gain::IsInitialized() const {

  return true;
}

void packetc2w_performance_gain::Swap(packetc2w_performance_gain* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_performance_gain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_performance_gain_descriptor_;
  metadata.reflection = packetc2w_performance_gain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_performance_gain_result::kPacketIdFieldNumber;
const int packetw2c_performance_gain_result::kResultFieldNumber;
const int packetw2c_performance_gain_result::kGainFieldNumber;
#endif  // !_MSC_VER

packetw2c_performance_gain_result::packetw2c_performance_gain_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_performance_gain_result::InitAsDefaultInstance() {
}

packetw2c_performance_gain_result::packetw2c_performance_gain_result(const packetw2c_performance_gain_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_performance_gain_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7632;
  result_ = 2;
  gain_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_performance_gain_result::~packetw2c_performance_gain_result() {
  SharedDtor();
}

void packetw2c_performance_gain_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_performance_gain_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_performance_gain_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_performance_gain_result_descriptor_;
}

const packetw2c_performance_gain_result& packetw2c_performance_gain_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetw2c_performance_gain_result* packetw2c_performance_gain_result::default_instance_ = NULL;

packetw2c_performance_gain_result* packetw2c_performance_gain_result::New() const {
  return new packetw2c_performance_gain_result;
}

void packetw2c_performance_gain_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7632;
    result_ = 2;
    gain_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_performance_gain_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_gain_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gain;
        break;
      }

      // optional int64 gain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_performance_gain_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_gain_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int64 gain = 3;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->gain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_performance_gain_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_gain_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int64 gain = 3;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->gain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_performance_gain_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_gain_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int64 gain = 3;
    if (has_gain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_performance_gain_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_performance_gain_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_performance_gain_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_performance_gain_result::MergeFrom(const packetw2c_performance_gain_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_performance_gain_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_performance_gain_result::CopyFrom(const packetw2c_performance_gain_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_performance_gain_result::IsInitialized() const {

  return true;
}

void packetw2c_performance_gain_result::Swap(packetw2c_performance_gain_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(gain_, other->gain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_performance_gain_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_performance_gain_result_descriptor_;
  metadata.reflection = packetw2c_performance_gain_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_performance_child::kPacketIdFieldNumber;
const int packetc2w_performance_child::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_performance_child::packetc2w_performance_child()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_performance_child::InitAsDefaultInstance() {
}

packetc2w_performance_child::packetc2w_performance_child(const packetc2w_performance_child& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_performance_child::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5122;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_performance_child::~packetc2w_performance_child() {
  SharedDtor();
}

void packetc2w_performance_child::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_performance_child::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_performance_child::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_performance_child_descriptor_;
}

const packetc2w_performance_child& packetc2w_performance_child::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetc2w_performance_child* packetc2w_performance_child::default_instance_ = NULL;

packetc2w_performance_child* packetc2w_performance_child::New() const {
  return new packetc2w_performance_child;
}

void packetc2w_performance_child::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5122;
    player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_performance_child::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_child];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_performance_child::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_child];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_performance_child::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_child];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_performance_child::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_child];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_performance_child::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_performance_child* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_performance_child*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_performance_child::MergeFrom(const packetc2w_performance_child& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_performance_child::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_performance_child::CopyFrom(const packetc2w_performance_child& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_performance_child::IsInitialized() const {

  return true;
}

void packetc2w_performance_child::Swap(packetc2w_performance_child* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_performance_child::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_performance_child_descriptor_;
  metadata.reflection = packetc2w_performance_child_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_performance_child_result::kPacketIdFieldNumber;
const int packetw2c_performance_child_result::kInfoFieldNumber;
#endif  // !_MSC_VER

packetw2c_performance_child_result::packetw2c_performance_child_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_performance_child_result::InitAsDefaultInstance() {
  info_ = const_cast< ::client2world_protocols::msg_performance_info*>(&::client2world_protocols::msg_performance_info::default_instance());
}

packetw2c_performance_child_result::packetw2c_performance_child_result(const packetw2c_performance_child_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_performance_child_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7633;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_performance_child_result::~packetw2c_performance_child_result() {
  SharedDtor();
}

void packetw2c_performance_child_result::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void packetw2c_performance_child_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_performance_child_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_performance_child_result_descriptor_;
}

const packetw2c_performance_child_result& packetw2c_performance_child_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetw2c_performance_child_result* packetw2c_performance_child_result::default_instance_ = NULL;

packetw2c_performance_child_result* packetw2c_performance_child_result::New() const {
  return new packetw2c_performance_child_result;
}

void packetw2c_performance_child_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7633;
    if (has_info()) {
      if (info_ != NULL) info_->::client2world_protocols::msg_performance_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_performance_child_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_child_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .client2world_protocols.msg_performance_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_performance_child_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_child_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .client2world_protocols.msg_performance_info info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_performance_child_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_child_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .client2world_protocols.msg_performance_info info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_performance_child_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_child_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .client2world_protocols.msg_performance_info info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_performance_child_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_performance_child_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_performance_child_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_performance_child_result::MergeFrom(const packetw2c_performance_child_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_info()) {
      mutable_info()->::client2world_protocols::msg_performance_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_performance_child_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_performance_child_result::CopyFrom(const packetw2c_performance_child_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_performance_child_result::IsInitialized() const {

  return true;
}

void packetw2c_performance_child_result::Swap(packetw2c_performance_child_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_performance_child_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_performance_child_result_descriptor_;
  metadata.reflection = packetw2c_performance_child_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_performance_check_gain::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_performance_check_gain::packetc2w_performance_check_gain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_performance_check_gain::InitAsDefaultInstance() {
}

packetc2w_performance_check_gain::packetc2w_performance_check_gain(const packetc2w_performance_check_gain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_performance_check_gain::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5123;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_performance_check_gain::~packetc2w_performance_check_gain() {
  SharedDtor();
}

void packetc2w_performance_check_gain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_performance_check_gain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_performance_check_gain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_performance_check_gain_descriptor_;
}

const packetc2w_performance_check_gain& packetc2w_performance_check_gain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetc2w_performance_check_gain* packetc2w_performance_check_gain::default_instance_ = NULL;

packetc2w_performance_check_gain* packetc2w_performance_check_gain::New() const {
  return new packetc2w_performance_check_gain;
}

void packetc2w_performance_check_gain::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5123;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_performance_check_gain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_check_gain];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_performance_check_gain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_check_gain];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_performance_check_gain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_check_gain];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_performance_check_gain::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_check_gain];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_performance_check_gain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_performance_check_gain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_performance_check_gain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_performance_check_gain::MergeFrom(const packetc2w_performance_check_gain& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_performance_check_gain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_performance_check_gain::CopyFrom(const packetc2w_performance_check_gain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_performance_check_gain::IsInitialized() const {

  return true;
}

void packetc2w_performance_check_gain::Swap(packetc2w_performance_check_gain* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_performance_check_gain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_performance_check_gain_descriptor_;
  metadata.reflection = packetc2w_performance_check_gain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_performance_check_gain_result::kPacketIdFieldNumber;
const int packetw2c_performance_check_gain_result::kGainFieldNumber;
#endif  // !_MSC_VER

packetw2c_performance_check_gain_result::packetw2c_performance_check_gain_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_performance_check_gain_result::InitAsDefaultInstance() {
}

packetw2c_performance_check_gain_result::packetw2c_performance_check_gain_result(const packetw2c_performance_check_gain_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_performance_check_gain_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7634;
  gain_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_performance_check_gain_result::~packetw2c_performance_check_gain_result() {
  SharedDtor();
}

void packetw2c_performance_check_gain_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_performance_check_gain_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_performance_check_gain_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_performance_check_gain_result_descriptor_;
}

const packetw2c_performance_check_gain_result& packetw2c_performance_check_gain_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetw2c_performance_check_gain_result* packetw2c_performance_check_gain_result::default_instance_ = NULL;

packetw2c_performance_check_gain_result* packetw2c_performance_check_gain_result::New() const {
  return new packetw2c_performance_check_gain_result;
}

void packetw2c_performance_check_gain_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7634;
    gain_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_performance_check_gain_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_check_gain_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gain;
        break;
      }

      // optional int64 gain = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_performance_check_gain_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_check_gain_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int64 gain = 2;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_performance_check_gain_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_check_gain_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int64 gain = 2;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_performance_check_gain_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_check_gain_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int64 gain = 2;
    if (has_gain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_performance_check_gain_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_performance_check_gain_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_performance_check_gain_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_performance_check_gain_result::MergeFrom(const packetw2c_performance_check_gain_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_performance_check_gain_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_performance_check_gain_result::CopyFrom(const packetw2c_performance_check_gain_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_performance_check_gain_result::IsInitialized() const {

  return true;
}

void packetw2c_performance_check_gain_result::Swap(packetw2c_performance_check_gain_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(gain_, other->gain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_performance_check_gain_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_performance_check_gain_result_descriptor_;
  metadata.reflection = packetw2c_performance_check_gain_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_performance_team_create::kPacketIdFieldNumber;
const int packetc2w_performance_team_create::kCountFieldNumber;
const int packetc2w_performance_team_create::kNickNameFieldNumber;
#endif  // !_MSC_VER

packetc2w_performance_team_create::packetc2w_performance_team_create()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_performance_team_create::InitAsDefaultInstance() {
}

packetc2w_performance_team_create::packetc2w_performance_team_create(const packetc2w_performance_team_create& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_performance_team_create::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5124;
  count_ = 0;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_performance_team_create::~packetc2w_performance_team_create() {
  SharedDtor();
}

void packetc2w_performance_team_create::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_performance_team_create::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_performance_team_create::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_performance_team_create_descriptor_;
}

const packetc2w_performance_team_create& packetc2w_performance_team_create::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetc2w_performance_team_create* packetc2w_performance_team_create::default_instance_ = NULL;

packetc2w_performance_team_create* packetc2w_performance_team_create::New() const {
  return new packetc2w_performance_team_create;
}

void packetc2w_performance_team_create::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5124;
    count_ = 0;
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_performance_team_create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_create];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_performance_team_create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_create];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional string nick_name = 3;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nick_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_performance_team_create::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_create];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional string nick_name = 3;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nick_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_performance_team_create::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_create];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional string nick_name = 3;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_performance_team_create::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_performance_team_create* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_performance_team_create*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_performance_team_create::MergeFrom(const packetc2w_performance_team_create& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_performance_team_create::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_performance_team_create::CopyFrom(const packetc2w_performance_team_create& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_performance_team_create::IsInitialized() const {

  return true;
}

void packetc2w_performance_team_create::Swap(packetc2w_performance_team_create* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(count_, other->count_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_performance_team_create::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_performance_team_create_descriptor_;
  metadata.reflection = packetc2w_performance_team_create_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_performance_team_create_result::kPacketIdFieldNumber;
const int packetw2c_performance_team_create_result::kResultFieldNumber;
const int packetw2c_performance_team_create_result::kTeamIdFieldNumber;
const int packetw2c_performance_team_create_result::kCountFieldNumber;
const int packetw2c_performance_team_create_result::kNickNameFieldNumber;
const int packetw2c_performance_team_create_result::kCodeTagFieldNumber;
#endif  // !_MSC_VER

packetw2c_performance_team_create_result::packetw2c_performance_team_create_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_performance_team_create_result::InitAsDefaultInstance() {
}

packetw2c_performance_team_create_result::packetw2c_performance_team_create_result(const packetw2c_performance_team_create_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_performance_team_create_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7635;
  result_ = 2;
  team_id_ = 0;
  count_ = 0;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_tag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_performance_team_create_result::~packetw2c_performance_team_create_result() {
  SharedDtor();
}

void packetw2c_performance_team_create_result::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_performance_team_create_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_performance_team_create_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_performance_team_create_result_descriptor_;
}

const packetw2c_performance_team_create_result& packetw2c_performance_team_create_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetw2c_performance_team_create_result* packetw2c_performance_team_create_result::default_instance_ = NULL;

packetw2c_performance_team_create_result* packetw2c_performance_team_create_result::New() const {
  return new packetw2c_performance_team_create_result;
}

void packetw2c_performance_team_create_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7635;
    result_ = 2;
    team_id_ = 0;
    count_ = 0;
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    code_tag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_performance_team_create_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_create_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_id;
        break;
      }

      // optional int32 team_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional int32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_code_tag;
        break;
      }

      // optional int32 code_tag = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_tag_)));
          set_has_code_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_performance_team_create_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_create_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 team_id = 3;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->team_id(), output);
  }

  // optional int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // optional string nick_name = 5;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nick_name(), output);
  }

  // optional int32 code_tag = 6;
  if (has_code_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->code_tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_performance_team_create_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_create_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 team_id = 3;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->team_id(), target);
  }

  // optional int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  // optional string nick_name = 5;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nick_name(), target);
  }

  // optional int32 code_tag = 6;
  if (has_code_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->code_tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_performance_team_create_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_create_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 team_id = 3;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }

    // optional int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional string nick_name = 5;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional int32 code_tag = 6;
    if (has_code_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code_tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_performance_team_create_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_performance_team_create_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_performance_team_create_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_performance_team_create_result::MergeFrom(const packetw2c_performance_team_create_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_code_tag()) {
      set_code_tag(from.code_tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_performance_team_create_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_performance_team_create_result::CopyFrom(const packetw2c_performance_team_create_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_performance_team_create_result::IsInitialized() const {

  return true;
}

void packetw2c_performance_team_create_result::Swap(packetw2c_performance_team_create_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(team_id_, other->team_id_);
    std::swap(count_, other->count_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(code_tag_, other->code_tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_performance_team_create_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_performance_team_create_result_descriptor_;
  metadata.reflection = packetw2c_performance_team_create_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_performance_team_list::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_performance_team_list::packetc2w_performance_team_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_performance_team_list::InitAsDefaultInstance() {
}

packetc2w_performance_team_list::packetc2w_performance_team_list(const packetc2w_performance_team_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_performance_team_list::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5125;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_performance_team_list::~packetc2w_performance_team_list() {
  SharedDtor();
}

void packetc2w_performance_team_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_performance_team_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_performance_team_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_performance_team_list_descriptor_;
}

const packetc2w_performance_team_list& packetc2w_performance_team_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetc2w_performance_team_list* packetc2w_performance_team_list::default_instance_ = NULL;

packetc2w_performance_team_list* packetc2w_performance_team_list::New() const {
  return new packetc2w_performance_team_list;
}

void packetc2w_performance_team_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5125;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_performance_team_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_list];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_performance_team_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_list];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_performance_team_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_list];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_performance_team_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_list];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_performance_team_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_performance_team_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_performance_team_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_performance_team_list::MergeFrom(const packetc2w_performance_team_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_performance_team_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_performance_team_list::CopyFrom(const packetc2w_performance_team_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_performance_team_list::IsInitialized() const {

  return true;
}

void packetc2w_performance_team_list::Swap(packetc2w_performance_team_list* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_performance_team_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_performance_team_list_descriptor_;
  metadata.reflection = packetc2w_performance_team_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_performance_team_list_result::kPacketIdFieldNumber;
const int packetw2c_performance_team_list_result::kTeamsFieldNumber;
#endif  // !_MSC_VER

packetw2c_performance_team_list_result::packetw2c_performance_team_list_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_performance_team_list_result::InitAsDefaultInstance() {
}

packetw2c_performance_team_list_result::packetw2c_performance_team_list_result(const packetw2c_performance_team_list_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_performance_team_list_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7636;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_performance_team_list_result::~packetw2c_performance_team_list_result() {
  SharedDtor();
}

void packetw2c_performance_team_list_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_performance_team_list_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_performance_team_list_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_performance_team_list_result_descriptor_;
}

const packetw2c_performance_team_list_result& packetw2c_performance_team_list_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetw2c_performance_team_list_result* packetw2c_performance_team_list_result::default_instance_ = NULL;

packetw2c_performance_team_list_result* packetw2c_performance_team_list_result::New() const {
  return new packetw2c_performance_team_list_result;
}

void packetw2c_performance_team_list_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7636;
  }
  teams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_performance_team_list_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_list_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_teams;
        break;
      }

      // repeated .client2world_protocols.msg_performance_team teams = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_teams;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_performance_team_list_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_list_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_performance_team teams = 2;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teams(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_performance_team_list_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_list_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_performance_team teams = 2;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teams(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_performance_team_list_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_list_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client2world_protocols.msg_performance_team teams = 2;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_performance_team_list_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_performance_team_list_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_performance_team_list_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_performance_team_list_result::MergeFrom(const packetw2c_performance_team_list_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  teams_.MergeFrom(from.teams_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_performance_team_list_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_performance_team_list_result::CopyFrom(const packetw2c_performance_team_list_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_performance_team_list_result::IsInitialized() const {

  return true;
}

void packetw2c_performance_team_list_result::Swap(packetw2c_performance_team_list_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    teams_.Swap(&other->teams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_performance_team_list_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_performance_team_list_result_descriptor_;
  metadata.reflection = packetw2c_performance_team_list_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_performance_team_info::kPacketIdFieldNumber;
const int packetc2w_performance_team_info::kTeamIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_performance_team_info::packetc2w_performance_team_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_performance_team_info::InitAsDefaultInstance() {
}

packetc2w_performance_team_info::packetc2w_performance_team_info(const packetc2w_performance_team_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_performance_team_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5126;
  team_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_performance_team_info::~packetc2w_performance_team_info() {
  SharedDtor();
}

void packetc2w_performance_team_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_performance_team_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_performance_team_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_performance_team_info_descriptor_;
}

const packetc2w_performance_team_info& packetc2w_performance_team_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetc2w_performance_team_info* packetc2w_performance_team_info::default_instance_ = NULL;

packetc2w_performance_team_info* packetc2w_performance_team_info::New() const {
  return new packetc2w_performance_team_info;
}

void packetc2w_performance_team_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5126;
    team_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_performance_team_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_id;
        break;
      }

      // optional int32 team_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_performance_team_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 team_id = 3;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->team_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_performance_team_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 team_id = 3;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->team_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_performance_team_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 team_id = 3;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_performance_team_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_performance_team_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_performance_team_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_performance_team_info::MergeFrom(const packetc2w_performance_team_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_performance_team_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_performance_team_info::CopyFrom(const packetc2w_performance_team_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_performance_team_info::IsInitialized() const {

  return true;
}

void packetc2w_performance_team_info::Swap(packetc2w_performance_team_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_performance_team_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_performance_team_info_descriptor_;
  metadata.reflection = packetc2w_performance_team_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_performance_team_info_result::kPacketIdFieldNumber;
const int packetw2c_performance_team_info_result::kTeamFieldNumber;
#endif  // !_MSC_VER

packetw2c_performance_team_info_result::packetw2c_performance_team_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_performance_team_info_result::InitAsDefaultInstance() {
  team_ = const_cast< ::client2world_protocols::msg_performance_team*>(&::client2world_protocols::msg_performance_team::default_instance());
}

packetw2c_performance_team_info_result::packetw2c_performance_team_info_result(const packetw2c_performance_team_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_performance_team_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7637;
  team_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_performance_team_info_result::~packetw2c_performance_team_info_result() {
  SharedDtor();
}

void packetw2c_performance_team_info_result::SharedDtor() {
  if (this != default_instance_) {
    delete team_;
  }
}

void packetw2c_performance_team_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_performance_team_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_performance_team_info_result_descriptor_;
}

const packetw2c_performance_team_info_result& packetw2c_performance_team_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetw2c_performance_team_info_result* packetw2c_performance_team_info_result::default_instance_ = NULL;

packetw2c_performance_team_info_result* packetw2c_performance_team_info_result::New() const {
  return new packetw2c_performance_team_info_result;
}

void packetw2c_performance_team_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7637;
    if (has_team()) {
      if (team_ != NULL) team_->::client2world_protocols::msg_performance_team::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_performance_team_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_team;
        break;
      }

      // optional .client2world_protocols.msg_performance_team team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_performance_team_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .client2world_protocols.msg_performance_team team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_performance_team_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .client2world_protocols.msg_performance_team team = 2;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_performance_team_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .client2world_protocols.msg_performance_team team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_performance_team_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_performance_team_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_performance_team_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_performance_team_info_result::MergeFrom(const packetw2c_performance_team_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_team()) {
      mutable_team()->::client2world_protocols::msg_performance_team::MergeFrom(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_performance_team_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_performance_team_info_result::CopyFrom(const packetw2c_performance_team_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_performance_team_info_result::IsInitialized() const {

  return true;
}

void packetw2c_performance_team_info_result::Swap(packetw2c_performance_team_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_performance_team_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_performance_team_info_result_descriptor_;
  metadata.reflection = packetw2c_performance_team_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_performance_team_update::kPacketIdFieldNumber;
const int packetc2w_performance_team_update::kOptypeFieldNumber;
const int packetc2w_performance_team_update::kTeamIdFieldNumber;
const int packetc2w_performance_team_update::kLimitFieldNumber;
const int packetc2w_performance_team_update::kNickNameFieldNumber;
#endif  // !_MSC_VER

packetc2w_performance_team_update::packetc2w_performance_team_update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_performance_team_update::InitAsDefaultInstance() {
}

packetc2w_performance_team_update::packetc2w_performance_team_update(const packetc2w_performance_team_update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_performance_team_update::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5127;
  optype_ = 0;
  team_id_ = 0;
  limit_ = 0;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_performance_team_update::~packetc2w_performance_team_update() {
  SharedDtor();
}

void packetc2w_performance_team_update::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_performance_team_update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_performance_team_update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_performance_team_update_descriptor_;
}

const packetc2w_performance_team_update& packetc2w_performance_team_update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetc2w_performance_team_update* packetc2w_performance_team_update::default_instance_ = NULL;

packetc2w_performance_team_update* packetc2w_performance_team_update::New() const {
  return new packetc2w_performance_team_update;
}

void packetc2w_performance_team_update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5127;
    optype_ = 0;
    team_id_ = 0;
    limit_ = 0;
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_performance_team_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_update];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_optype;
        break;
      }

      // optional int32 optype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_id;
        break;
      }

      // optional int32 team_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_limit;
        break;
      }

      // optional int32 limit = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_performance_team_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_update];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 optype = 2;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->optype(), output);
  }

  // optional int32 team_id = 3;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->team_id(), output);
  }

  // optional int32 limit = 4 [default = 0];
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->limit(), output);
  }

  // optional string nick_name = 5;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nick_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_performance_team_update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_update];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 optype = 2;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->optype(), target);
  }

  // optional int32 team_id = 3;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->team_id(), target);
  }

  // optional int32 limit = 4 [default = 0];
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->limit(), target);
  }

  // optional string nick_name = 5;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nick_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_performance_team_update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_update];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 optype = 2;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

    // optional int32 team_id = 3;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }

    // optional int32 limit = 4 [default = 0];
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

    // optional string nick_name = 5;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_performance_team_update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_performance_team_update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_performance_team_update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_performance_team_update::MergeFrom(const packetc2w_performance_team_update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_performance_team_update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_performance_team_update::CopyFrom(const packetc2w_performance_team_update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_performance_team_update::IsInitialized() const {

  return true;
}

void packetc2w_performance_team_update::Swap(packetc2w_performance_team_update* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(optype_, other->optype_);
    std::swap(team_id_, other->team_id_);
    std::swap(limit_, other->limit_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_performance_team_update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_performance_team_update_descriptor_;
  metadata.reflection = packetc2w_performance_team_update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_performance_team_update_result::kPacketIdFieldNumber;
const int packetw2c_performance_team_update_result::kResultFieldNumber;
const int packetw2c_performance_team_update_result::kOptypeFieldNumber;
const int packetw2c_performance_team_update_result::kTeamIdFieldNumber;
const int packetw2c_performance_team_update_result::kLimitFieldNumber;
const int packetw2c_performance_team_update_result::kNickNameFieldNumber;
const int packetw2c_performance_team_update_result::kCodeTagFieldNumber;
#endif  // !_MSC_VER

packetw2c_performance_team_update_result::packetw2c_performance_team_update_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_performance_team_update_result::InitAsDefaultInstance() {
}

packetw2c_performance_team_update_result::packetw2c_performance_team_update_result(const packetw2c_performance_team_update_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_performance_team_update_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7638;
  result_ = 2;
  optype_ = 0;
  team_id_ = 0;
  limit_ = 0;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_tag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_performance_team_update_result::~packetw2c_performance_team_update_result() {
  SharedDtor();
}

void packetw2c_performance_team_update_result::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_performance_team_update_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_performance_team_update_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_performance_team_update_result_descriptor_;
}

const packetw2c_performance_team_update_result& packetw2c_performance_team_update_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetw2c_performance_team_update_result* packetw2c_performance_team_update_result::default_instance_ = NULL;

packetw2c_performance_team_update_result* packetw2c_performance_team_update_result::New() const {
  return new packetw2c_performance_team_update_result;
}

void packetw2c_performance_team_update_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7638;
    result_ = 2;
    optype_ = 0;
    team_id_ = 0;
    limit_ = 0;
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    code_tag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_performance_team_update_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_update_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_optype;
        break;
      }

      // optional int32 optype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team_id;
        break;
      }

      // optional int32 team_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_limit;
        break;
      }

      // optional int32 limit = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_code_tag;
        break;
      }

      // optional int32 code_tag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_tag_)));
          set_has_code_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_performance_team_update_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_update_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 optype = 3;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->optype(), output);
  }

  // optional int32 team_id = 4;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->team_id(), output);
  }

  // optional int32 limit = 5 [default = 0];
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->limit(), output);
  }

  // optional string nick_name = 6;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->nick_name(), output);
  }

  // optional int32 code_tag = 7;
  if (has_code_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->code_tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_performance_team_update_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_update_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 optype = 3;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->optype(), target);
  }

  // optional int32 team_id = 4;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->team_id(), target);
  }

  // optional int32 limit = 5 [default = 0];
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->limit(), target);
  }

  // optional string nick_name = 6;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->nick_name(), target);
  }

  // optional int32 code_tag = 7;
  if (has_code_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->code_tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_performance_team_update_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_update_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 optype = 3;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

    // optional int32 team_id = 4;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }

    // optional int32 limit = 5 [default = 0];
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

    // optional string nick_name = 6;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional int32 code_tag = 7;
    if (has_code_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code_tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_performance_team_update_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_performance_team_update_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_performance_team_update_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_performance_team_update_result::MergeFrom(const packetw2c_performance_team_update_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_code_tag()) {
      set_code_tag(from.code_tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_performance_team_update_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_performance_team_update_result::CopyFrom(const packetw2c_performance_team_update_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_performance_team_update_result::IsInitialized() const {

  return true;
}

void packetw2c_performance_team_update_result::Swap(packetw2c_performance_team_update_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(optype_, other->optype_);
    std::swap(team_id_, other->team_id_);
    std::swap(limit_, other->limit_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(code_tag_, other->code_tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_performance_team_update_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_performance_team_update_result_descriptor_;
  metadata.reflection = packetw2c_performance_team_update_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_performance_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_performance_info::packetc2w_performance_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_performance_info::InitAsDefaultInstance() {
}

packetc2w_performance_info::packetc2w_performance_info(const packetc2w_performance_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_performance_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5128;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_performance_info::~packetc2w_performance_info() {
  SharedDtor();
}

void packetc2w_performance_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_performance_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_performance_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_performance_info_descriptor_;
}

const packetc2w_performance_info& packetc2w_performance_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetc2w_performance_info* packetc2w_performance_info::default_instance_ = NULL;

packetc2w_performance_info* packetc2w_performance_info::New() const {
  return new packetc2w_performance_info;
}

void packetc2w_performance_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5128;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_performance_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_performance_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_performance_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_performance_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_performance_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_performance_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_performance_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_performance_info::MergeFrom(const packetc2w_performance_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_performance_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_performance_info::CopyFrom(const packetc2w_performance_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_performance_info::IsInitialized() const {

  return true;
}

void packetc2w_performance_info::Swap(packetc2w_performance_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_performance_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_performance_info_descriptor_;
  metadata.reflection = packetc2w_performance_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_performance_info_result::kPacketIdFieldNumber;
const int packetw2c_performance_info_result::kCommissionTodayTeamFieldNumber;
const int packetw2c_performance_info_result::kCommissionTodaySelfFieldNumber;
const int packetw2c_performance_info_result::kCommissionTodayAgentFieldNumber;
const int packetw2c_performance_info_result::kCommissionYesterdayTeamFieldNumber;
const int packetw2c_performance_info_result::kCommissionYesterdaySelfFieldNumber;
const int packetw2c_performance_info_result::kCommissionYesterdayAgentFieldNumber;
const int packetw2c_performance_info_result::kPerTodayTeamFieldNumber;
const int packetw2c_performance_info_result::kPerTodaySelfFieldNumber;
const int packetw2c_performance_info_result::kPerTodayAgentFieldNumber;
const int packetw2c_performance_info_result::kPerYesterdayTeamFieldNumber;
const int packetw2c_performance_info_result::kPerYesterdaySelfFieldNumber;
const int packetw2c_performance_info_result::kPerYesterdayAgentFieldNumber;
const int packetw2c_performance_info_result::kPerTodayFieldNumber;
const int packetw2c_performance_info_result::kPerThisWeekFieldNumber;
const int packetw2c_performance_info_result::kRebateTodayFieldNumber;
const int packetw2c_performance_info_result::kRebateThisWeekFieldNumber;
const int packetw2c_performance_info_result::kPerBSelfTodayFieldNumber;
const int packetw2c_performance_info_result::kPerBChildTodayFieldNumber;
const int packetw2c_performance_info_result::kPerBSelfYesterdayFieldNumber;
const int packetw2c_performance_info_result::kPerBChildYesterdayFieldNumber;
const int packetw2c_performance_info_result::kAcFieldNumber;
const int packetw2c_performance_info_result::kAcIncFieldNumber;
const int packetw2c_performance_info_result::kAcIncYdFieldNumber;
const int packetw2c_performance_info_result::kAcIncTwFieldNumber;
const int packetw2c_performance_info_result::kAcIncLwFieldNumber;
const int packetw2c_performance_info_result::kAcIncTmFieldNumber;
const int packetw2c_performance_info_result::kAcIncLmFieldNumber;
#endif  // !_MSC_VER

packetw2c_performance_info_result::packetw2c_performance_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_performance_info_result::InitAsDefaultInstance() {
}

packetw2c_performance_info_result::packetw2c_performance_info_result(const packetw2c_performance_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_performance_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7639;
  commission_today_team_ = GOOGLE_LONGLONG(0);
  commission_today_self_ = GOOGLE_LONGLONG(0);
  commission_today_agent_ = GOOGLE_LONGLONG(0);
  commission_yesterday_team_ = GOOGLE_LONGLONG(0);
  commission_yesterday_self_ = GOOGLE_LONGLONG(0);
  commission_yesterday_agent_ = GOOGLE_LONGLONG(0);
  per_today_team_ = GOOGLE_LONGLONG(0);
  per_today_self_ = GOOGLE_LONGLONG(0);
  per_today_agent_ = GOOGLE_LONGLONG(0);
  per_yesterday_team_ = GOOGLE_LONGLONG(0);
  per_yesterday_self_ = GOOGLE_LONGLONG(0);
  per_yesterday_agent_ = GOOGLE_LONGLONG(0);
  per_today_ = GOOGLE_LONGLONG(0);
  per_this_week_ = GOOGLE_LONGLONG(0);
  rebate_today_ = GOOGLE_LONGLONG(0);
  rebate_this_week_ = GOOGLE_LONGLONG(0);
  per_b_self_today_ = GOOGLE_LONGLONG(0);
  per_b_child_today_ = GOOGLE_LONGLONG(0);
  per_b_self_yesterday_ = GOOGLE_LONGLONG(0);
  per_b_child_yesterday_ = GOOGLE_LONGLONG(0);
  ac_ = 0;
  ac_inc_ = 0;
  ac_inc_yd_ = 0;
  ac_inc_tw_ = 0;
  ac_inc_lw_ = 0;
  ac_inc_tm_ = 0;
  ac_inc_lm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_performance_info_result::~packetw2c_performance_info_result() {
  SharedDtor();
}

void packetw2c_performance_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_performance_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_performance_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_performance_info_result_descriptor_;
}

const packetw2c_performance_info_result& packetw2c_performance_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetw2c_performance_info_result* packetw2c_performance_info_result::default_instance_ = NULL;

packetw2c_performance_info_result* packetw2c_performance_info_result::New() const {
  return new packetw2c_performance_info_result;
}

void packetw2c_performance_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7639;
    commission_today_team_ = GOOGLE_LONGLONG(0);
    commission_today_self_ = GOOGLE_LONGLONG(0);
    commission_today_agent_ = GOOGLE_LONGLONG(0);
    commission_yesterday_team_ = GOOGLE_LONGLONG(0);
    commission_yesterday_self_ = GOOGLE_LONGLONG(0);
    commission_yesterday_agent_ = GOOGLE_LONGLONG(0);
    per_today_team_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    per_today_self_ = GOOGLE_LONGLONG(0);
    per_today_agent_ = GOOGLE_LONGLONG(0);
    per_yesterday_team_ = GOOGLE_LONGLONG(0);
    per_yesterday_self_ = GOOGLE_LONGLONG(0);
    per_yesterday_agent_ = GOOGLE_LONGLONG(0);
    per_today_ = GOOGLE_LONGLONG(0);
    per_this_week_ = GOOGLE_LONGLONG(0);
    rebate_today_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    rebate_this_week_ = GOOGLE_LONGLONG(0);
    per_b_self_today_ = GOOGLE_LONGLONG(0);
    per_b_child_today_ = GOOGLE_LONGLONG(0);
    per_b_self_yesterday_ = GOOGLE_LONGLONG(0);
    per_b_child_yesterday_ = GOOGLE_LONGLONG(0);
    ac_ = 0;
    ac_inc_ = 0;
    ac_inc_yd_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ac_inc_tw_ = 0;
    ac_inc_lw_ = 0;
    ac_inc_tm_ = 0;
    ac_inc_lm_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_performance_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_commission_today_team;
        break;
      }

      // optional int64 commission_today_team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commission_today_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &commission_today_team_)));
          set_has_commission_today_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_commission_today_self;
        break;
      }

      // optional int64 commission_today_self = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commission_today_self:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &commission_today_self_)));
          set_has_commission_today_self();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_commission_today_agent;
        break;
      }

      // optional int64 commission_today_agent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commission_today_agent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &commission_today_agent_)));
          set_has_commission_today_agent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_commission_yesterday_team;
        break;
      }

      // optional int64 commission_yesterday_team = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commission_yesterday_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &commission_yesterday_team_)));
          set_has_commission_yesterday_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_commission_yesterday_self;
        break;
      }

      // optional int64 commission_yesterday_self = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commission_yesterday_self:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &commission_yesterday_self_)));
          set_has_commission_yesterday_self();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_commission_yesterday_agent;
        break;
      }

      // optional int64 commission_yesterday_agent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commission_yesterday_agent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &commission_yesterday_agent_)));
          set_has_commission_yesterday_agent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_per_today_team;
        break;
      }

      // optional int64 per_today_team = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_per_today_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &per_today_team_)));
          set_has_per_today_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_per_today_self;
        break;
      }

      // optional int64 per_today_self = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_per_today_self:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &per_today_self_)));
          set_has_per_today_self();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_per_today_agent;
        break;
      }

      // optional int64 per_today_agent = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_per_today_agent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &per_today_agent_)));
          set_has_per_today_agent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_per_yesterday_team;
        break;
      }

      // optional int64 per_yesterday_team = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_per_yesterday_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &per_yesterday_team_)));
          set_has_per_yesterday_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_per_yesterday_self;
        break;
      }

      // optional int64 per_yesterday_self = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_per_yesterday_self:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &per_yesterday_self_)));
          set_has_per_yesterday_self();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_per_yesterday_agent;
        break;
      }

      // optional int64 per_yesterday_agent = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_per_yesterday_agent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &per_yesterday_agent_)));
          set_has_per_yesterday_agent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_per_today;
        break;
      }

      // optional int64 per_today = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_per_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &per_today_)));
          set_has_per_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_per_this_week;
        break;
      }

      // optional int64 per_this_week = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_per_this_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &per_this_week_)));
          set_has_per_this_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_rebate_today;
        break;
      }

      // optional int64 rebate_today = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rebate_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rebate_today_)));
          set_has_rebate_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_rebate_this_week;
        break;
      }

      // optional int64 rebate_this_week = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rebate_this_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rebate_this_week_)));
          set_has_rebate_this_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_per_b_self_today;
        break;
      }

      // optional int64 per_b_self_today = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_per_b_self_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &per_b_self_today_)));
          set_has_per_b_self_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_per_b_child_today;
        break;
      }

      // optional int64 per_b_child_today = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_per_b_child_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &per_b_child_today_)));
          set_has_per_b_child_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_per_b_self_yesterday;
        break;
      }

      // optional int64 per_b_self_yesterday = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_per_b_self_yesterday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &per_b_self_yesterday_)));
          set_has_per_b_self_yesterday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_per_b_child_yesterday;
        break;
      }

      // optional int64 per_b_child_yesterday = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_per_b_child_yesterday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &per_b_child_yesterday_)));
          set_has_per_b_child_yesterday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_ac;
        break;
      }

      // optional int32 ac = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ac_)));
          set_has_ac();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_ac_inc;
        break;
      }

      // optional int32 ac_inc = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ac_inc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ac_inc_)));
          set_has_ac_inc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_ac_inc_yd;
        break;
      }

      // optional int32 ac_inc_yd = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ac_inc_yd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ac_inc_yd_)));
          set_has_ac_inc_yd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_ac_inc_tw;
        break;
      }

      // optional int32 ac_inc_tw = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ac_inc_tw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ac_inc_tw_)));
          set_has_ac_inc_tw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_ac_inc_lw;
        break;
      }

      // optional int32 ac_inc_lw = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ac_inc_lw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ac_inc_lw_)));
          set_has_ac_inc_lw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_ac_inc_tm;
        break;
      }

      // optional int32 ac_inc_tm = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ac_inc_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ac_inc_tm_)));
          set_has_ac_inc_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_ac_inc_lm;
        break;
      }

      // optional int32 ac_inc_lm = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ac_inc_lm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ac_inc_lm_)));
          set_has_ac_inc_lm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_performance_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int64 commission_today_team = 2;
  if (has_commission_today_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->commission_today_team(), output);
  }

  // optional int64 commission_today_self = 3;
  if (has_commission_today_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->commission_today_self(), output);
  }

  // optional int64 commission_today_agent = 4;
  if (has_commission_today_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->commission_today_agent(), output);
  }

  // optional int64 commission_yesterday_team = 5;
  if (has_commission_yesterday_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->commission_yesterday_team(), output);
  }

  // optional int64 commission_yesterday_self = 6;
  if (has_commission_yesterday_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->commission_yesterday_self(), output);
  }

  // optional int64 commission_yesterday_agent = 7;
  if (has_commission_yesterday_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->commission_yesterday_agent(), output);
  }

  // optional int64 per_today_team = 8;
  if (has_per_today_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->per_today_team(), output);
  }

  // optional int64 per_today_self = 9;
  if (has_per_today_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->per_today_self(), output);
  }

  // optional int64 per_today_agent = 10;
  if (has_per_today_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->per_today_agent(), output);
  }

  // optional int64 per_yesterday_team = 11;
  if (has_per_yesterday_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->per_yesterday_team(), output);
  }

  // optional int64 per_yesterday_self = 12;
  if (has_per_yesterday_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->per_yesterday_self(), output);
  }

  // optional int64 per_yesterday_agent = 13;
  if (has_per_yesterday_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->per_yesterday_agent(), output);
  }

  // optional int64 per_today = 14;
  if (has_per_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->per_today(), output);
  }

  // optional int64 per_this_week = 15;
  if (has_per_this_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->per_this_week(), output);
  }

  // optional int64 rebate_today = 16;
  if (has_rebate_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->rebate_today(), output);
  }

  // optional int64 rebate_this_week = 17;
  if (has_rebate_this_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->rebate_this_week(), output);
  }

  // optional int64 per_b_self_today = 18;
  if (has_per_b_self_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->per_b_self_today(), output);
  }

  // optional int64 per_b_child_today = 19;
  if (has_per_b_child_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->per_b_child_today(), output);
  }

  // optional int64 per_b_self_yesterday = 20;
  if (has_per_b_self_yesterday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->per_b_self_yesterday(), output);
  }

  // optional int64 per_b_child_yesterday = 21;
  if (has_per_b_child_yesterday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->per_b_child_yesterday(), output);
  }

  // optional int32 ac = 22;
  if (has_ac()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->ac(), output);
  }

  // optional int32 ac_inc = 23;
  if (has_ac_inc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->ac_inc(), output);
  }

  // optional int32 ac_inc_yd = 24;
  if (has_ac_inc_yd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->ac_inc_yd(), output);
  }

  // optional int32 ac_inc_tw = 25;
  if (has_ac_inc_tw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->ac_inc_tw(), output);
  }

  // optional int32 ac_inc_lw = 26;
  if (has_ac_inc_lw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->ac_inc_lw(), output);
  }

  // optional int32 ac_inc_tm = 27;
  if (has_ac_inc_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->ac_inc_tm(), output);
  }

  // optional int32 ac_inc_lm = 28;
  if (has_ac_inc_lm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->ac_inc_lm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_performance_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int64 commission_today_team = 2;
  if (has_commission_today_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->commission_today_team(), target);
  }

  // optional int64 commission_today_self = 3;
  if (has_commission_today_self()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->commission_today_self(), target);
  }

  // optional int64 commission_today_agent = 4;
  if (has_commission_today_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->commission_today_agent(), target);
  }

  // optional int64 commission_yesterday_team = 5;
  if (has_commission_yesterday_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->commission_yesterday_team(), target);
  }

  // optional int64 commission_yesterday_self = 6;
  if (has_commission_yesterday_self()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->commission_yesterday_self(), target);
  }

  // optional int64 commission_yesterday_agent = 7;
  if (has_commission_yesterday_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->commission_yesterday_agent(), target);
  }

  // optional int64 per_today_team = 8;
  if (has_per_today_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->per_today_team(), target);
  }

  // optional int64 per_today_self = 9;
  if (has_per_today_self()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->per_today_self(), target);
  }

  // optional int64 per_today_agent = 10;
  if (has_per_today_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->per_today_agent(), target);
  }

  // optional int64 per_yesterday_team = 11;
  if (has_per_yesterday_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->per_yesterday_team(), target);
  }

  // optional int64 per_yesterday_self = 12;
  if (has_per_yesterday_self()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->per_yesterday_self(), target);
  }

  // optional int64 per_yesterday_agent = 13;
  if (has_per_yesterday_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->per_yesterday_agent(), target);
  }

  // optional int64 per_today = 14;
  if (has_per_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->per_today(), target);
  }

  // optional int64 per_this_week = 15;
  if (has_per_this_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->per_this_week(), target);
  }

  // optional int64 rebate_today = 16;
  if (has_rebate_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->rebate_today(), target);
  }

  // optional int64 rebate_this_week = 17;
  if (has_rebate_this_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->rebate_this_week(), target);
  }

  // optional int64 per_b_self_today = 18;
  if (has_per_b_self_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->per_b_self_today(), target);
  }

  // optional int64 per_b_child_today = 19;
  if (has_per_b_child_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->per_b_child_today(), target);
  }

  // optional int64 per_b_self_yesterday = 20;
  if (has_per_b_self_yesterday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->per_b_self_yesterday(), target);
  }

  // optional int64 per_b_child_yesterday = 21;
  if (has_per_b_child_yesterday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->per_b_child_yesterday(), target);
  }

  // optional int32 ac = 22;
  if (has_ac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->ac(), target);
  }

  // optional int32 ac_inc = 23;
  if (has_ac_inc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->ac_inc(), target);
  }

  // optional int32 ac_inc_yd = 24;
  if (has_ac_inc_yd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->ac_inc_yd(), target);
  }

  // optional int32 ac_inc_tw = 25;
  if (has_ac_inc_tw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->ac_inc_tw(), target);
  }

  // optional int32 ac_inc_lw = 26;
  if (has_ac_inc_lw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->ac_inc_lw(), target);
  }

  // optional int32 ac_inc_tm = 27;
  if (has_ac_inc_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->ac_inc_tm(), target);
  }

  // optional int32 ac_inc_lm = 28;
  if (has_ac_inc_lm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->ac_inc_lm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_performance_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int64 commission_today_team = 2;
    if (has_commission_today_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->commission_today_team());
    }

    // optional int64 commission_today_self = 3;
    if (has_commission_today_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->commission_today_self());
    }

    // optional int64 commission_today_agent = 4;
    if (has_commission_today_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->commission_today_agent());
    }

    // optional int64 commission_yesterday_team = 5;
    if (has_commission_yesterday_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->commission_yesterday_team());
    }

    // optional int64 commission_yesterday_self = 6;
    if (has_commission_yesterday_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->commission_yesterday_self());
    }

    // optional int64 commission_yesterday_agent = 7;
    if (has_commission_yesterday_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->commission_yesterday_agent());
    }

    // optional int64 per_today_team = 8;
    if (has_per_today_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->per_today_team());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 per_today_self = 9;
    if (has_per_today_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->per_today_self());
    }

    // optional int64 per_today_agent = 10;
    if (has_per_today_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->per_today_agent());
    }

    // optional int64 per_yesterday_team = 11;
    if (has_per_yesterday_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->per_yesterday_team());
    }

    // optional int64 per_yesterday_self = 12;
    if (has_per_yesterday_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->per_yesterday_self());
    }

    // optional int64 per_yesterday_agent = 13;
    if (has_per_yesterday_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->per_yesterday_agent());
    }

    // optional int64 per_today = 14;
    if (has_per_today()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->per_today());
    }

    // optional int64 per_this_week = 15;
    if (has_per_this_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->per_this_week());
    }

    // optional int64 rebate_today = 16;
    if (has_rebate_today()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rebate_today());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 rebate_this_week = 17;
    if (has_rebate_this_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rebate_this_week());
    }

    // optional int64 per_b_self_today = 18;
    if (has_per_b_self_today()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->per_b_self_today());
    }

    // optional int64 per_b_child_today = 19;
    if (has_per_b_child_today()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->per_b_child_today());
    }

    // optional int64 per_b_self_yesterday = 20;
    if (has_per_b_self_yesterday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->per_b_self_yesterday());
    }

    // optional int64 per_b_child_yesterday = 21;
    if (has_per_b_child_yesterday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->per_b_child_yesterday());
    }

    // optional int32 ac = 22;
    if (has_ac()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ac());
    }

    // optional int32 ac_inc = 23;
    if (has_ac_inc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ac_inc());
    }

    // optional int32 ac_inc_yd = 24;
    if (has_ac_inc_yd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ac_inc_yd());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 ac_inc_tw = 25;
    if (has_ac_inc_tw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ac_inc_tw());
    }

    // optional int32 ac_inc_lw = 26;
    if (has_ac_inc_lw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ac_inc_lw());
    }

    // optional int32 ac_inc_tm = 27;
    if (has_ac_inc_tm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ac_inc_tm());
    }

    // optional int32 ac_inc_lm = 28;
    if (has_ac_inc_lm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ac_inc_lm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_performance_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_performance_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_performance_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_performance_info_result::MergeFrom(const packetw2c_performance_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_commission_today_team()) {
      set_commission_today_team(from.commission_today_team());
    }
    if (from.has_commission_today_self()) {
      set_commission_today_self(from.commission_today_self());
    }
    if (from.has_commission_today_agent()) {
      set_commission_today_agent(from.commission_today_agent());
    }
    if (from.has_commission_yesterday_team()) {
      set_commission_yesterday_team(from.commission_yesterday_team());
    }
    if (from.has_commission_yesterday_self()) {
      set_commission_yesterday_self(from.commission_yesterday_self());
    }
    if (from.has_commission_yesterday_agent()) {
      set_commission_yesterday_agent(from.commission_yesterday_agent());
    }
    if (from.has_per_today_team()) {
      set_per_today_team(from.per_today_team());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_per_today_self()) {
      set_per_today_self(from.per_today_self());
    }
    if (from.has_per_today_agent()) {
      set_per_today_agent(from.per_today_agent());
    }
    if (from.has_per_yesterday_team()) {
      set_per_yesterday_team(from.per_yesterday_team());
    }
    if (from.has_per_yesterday_self()) {
      set_per_yesterday_self(from.per_yesterday_self());
    }
    if (from.has_per_yesterday_agent()) {
      set_per_yesterday_agent(from.per_yesterday_agent());
    }
    if (from.has_per_today()) {
      set_per_today(from.per_today());
    }
    if (from.has_per_this_week()) {
      set_per_this_week(from.per_this_week());
    }
    if (from.has_rebate_today()) {
      set_rebate_today(from.rebate_today());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_rebate_this_week()) {
      set_rebate_this_week(from.rebate_this_week());
    }
    if (from.has_per_b_self_today()) {
      set_per_b_self_today(from.per_b_self_today());
    }
    if (from.has_per_b_child_today()) {
      set_per_b_child_today(from.per_b_child_today());
    }
    if (from.has_per_b_self_yesterday()) {
      set_per_b_self_yesterday(from.per_b_self_yesterday());
    }
    if (from.has_per_b_child_yesterday()) {
      set_per_b_child_yesterday(from.per_b_child_yesterday());
    }
    if (from.has_ac()) {
      set_ac(from.ac());
    }
    if (from.has_ac_inc()) {
      set_ac_inc(from.ac_inc());
    }
    if (from.has_ac_inc_yd()) {
      set_ac_inc_yd(from.ac_inc_yd());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ac_inc_tw()) {
      set_ac_inc_tw(from.ac_inc_tw());
    }
    if (from.has_ac_inc_lw()) {
      set_ac_inc_lw(from.ac_inc_lw());
    }
    if (from.has_ac_inc_tm()) {
      set_ac_inc_tm(from.ac_inc_tm());
    }
    if (from.has_ac_inc_lm()) {
      set_ac_inc_lm(from.ac_inc_lm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_performance_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_performance_info_result::CopyFrom(const packetw2c_performance_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_performance_info_result::IsInitialized() const {

  return true;
}

void packetw2c_performance_info_result::Swap(packetw2c_performance_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(commission_today_team_, other->commission_today_team_);
    std::swap(commission_today_self_, other->commission_today_self_);
    std::swap(commission_today_agent_, other->commission_today_agent_);
    std::swap(commission_yesterday_team_, other->commission_yesterday_team_);
    std::swap(commission_yesterday_self_, other->commission_yesterday_self_);
    std::swap(commission_yesterday_agent_, other->commission_yesterday_agent_);
    std::swap(per_today_team_, other->per_today_team_);
    std::swap(per_today_self_, other->per_today_self_);
    std::swap(per_today_agent_, other->per_today_agent_);
    std::swap(per_yesterday_team_, other->per_yesterday_team_);
    std::swap(per_yesterday_self_, other->per_yesterday_self_);
    std::swap(per_yesterday_agent_, other->per_yesterday_agent_);
    std::swap(per_today_, other->per_today_);
    std::swap(per_this_week_, other->per_this_week_);
    std::swap(rebate_today_, other->rebate_today_);
    std::swap(rebate_this_week_, other->rebate_this_week_);
    std::swap(per_b_self_today_, other->per_b_self_today_);
    std::swap(per_b_child_today_, other->per_b_child_today_);
    std::swap(per_b_self_yesterday_, other->per_b_self_yesterday_);
    std::swap(per_b_child_yesterday_, other->per_b_child_yesterday_);
    std::swap(ac_, other->ac_);
    std::swap(ac_inc_, other->ac_inc_);
    std::swap(ac_inc_yd_, other->ac_inc_yd_);
    std::swap(ac_inc_tw_, other->ac_inc_tw_);
    std::swap(ac_inc_lw_, other->ac_inc_lw_);
    std::swap(ac_inc_tm_, other->ac_inc_tm_);
    std::swap(ac_inc_lm_, other->ac_inc_lm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_performance_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_performance_info_result_descriptor_;
  metadata.reflection = packetw2c_performance_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_performance_info_self_today::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_performance_info_self_today::packetc2w_performance_info_self_today()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_performance_info_self_today::InitAsDefaultInstance() {
}

packetc2w_performance_info_self_today::packetc2w_performance_info_self_today(const packetc2w_performance_info_self_today& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_performance_info_self_today::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5129;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_performance_info_self_today::~packetc2w_performance_info_self_today() {
  SharedDtor();
}

void packetc2w_performance_info_self_today::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_performance_info_self_today::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_performance_info_self_today::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_performance_info_self_today_descriptor_;
}

const packetc2w_performance_info_self_today& packetc2w_performance_info_self_today::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetc2w_performance_info_self_today* packetc2w_performance_info_self_today::default_instance_ = NULL;

packetc2w_performance_info_self_today* packetc2w_performance_info_self_today::New() const {
  return new packetc2w_performance_info_self_today;
}

void packetc2w_performance_info_self_today::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5129;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_performance_info_self_today::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_self_today];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_performance_info_self_today::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_self_today];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_performance_info_self_today::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_self_today];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_performance_info_self_today::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_self_today];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_performance_info_self_today::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_performance_info_self_today* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_performance_info_self_today*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_performance_info_self_today::MergeFrom(const packetc2w_performance_info_self_today& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_performance_info_self_today::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_performance_info_self_today::CopyFrom(const packetc2w_performance_info_self_today& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_performance_info_self_today::IsInitialized() const {

  return true;
}

void packetc2w_performance_info_self_today::Swap(packetc2w_performance_info_self_today* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_performance_info_self_today::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_performance_info_self_today_descriptor_;
  metadata.reflection = packetc2w_performance_info_self_today_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_performance_info_self_today_result::kPacketIdFieldNumber;
const int packetw2c_performance_info_self_today_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_performance_info_self_today_result::packetw2c_performance_info_self_today_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_performance_info_self_today_result::InitAsDefaultInstance() {
}

packetw2c_performance_info_self_today_result::packetw2c_performance_info_self_today_result(const packetw2c_performance_info_self_today_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_performance_info_self_today_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7640;
  result_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_performance_info_self_today_result::~packetw2c_performance_info_self_today_result() {
  SharedDtor();
}

void packetw2c_performance_info_self_today_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_performance_info_self_today_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_performance_info_self_today_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_performance_info_self_today_result_descriptor_;
}

const packetw2c_performance_info_self_today_result& packetw2c_performance_info_self_today_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetw2c_performance_info_self_today_result* packetw2c_performance_info_self_today_result::default_instance_ = NULL;

packetw2c_performance_info_self_today_result* packetw2c_performance_info_self_today_result::New() const {
  return new packetw2c_performance_info_self_today_result;
}

void packetw2c_performance_info_self_today_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7640;
    result_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_performance_info_self_today_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_self_today_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_performance_info_self_today_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_self_today_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_performance_info_self_today_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_self_today_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_performance_info_self_today_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_self_today_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_performance_info_self_today_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_performance_info_self_today_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_performance_info_self_today_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_performance_info_self_today_result::MergeFrom(const packetw2c_performance_info_self_today_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_performance_info_self_today_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_performance_info_self_today_result::CopyFrom(const packetw2c_performance_info_self_today_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_performance_info_self_today_result::IsInitialized() const {

  return true;
}

void packetw2c_performance_info_self_today_result::Swap(packetw2c_performance_info_self_today_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_performance_info_self_today_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_performance_info_self_today_result_descriptor_;
  metadata.reflection = packetw2c_performance_info_self_today_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_performance_info_self_yesterday::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_performance_info_self_yesterday::packetc2w_performance_info_self_yesterday()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_performance_info_self_yesterday::InitAsDefaultInstance() {
}

packetc2w_performance_info_self_yesterday::packetc2w_performance_info_self_yesterday(const packetc2w_performance_info_self_yesterday& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_performance_info_self_yesterday::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5130;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_performance_info_self_yesterday::~packetc2w_performance_info_self_yesterday() {
  SharedDtor();
}

void packetc2w_performance_info_self_yesterday::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_performance_info_self_yesterday::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_performance_info_self_yesterday::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_performance_info_self_yesterday_descriptor_;
}

const packetc2w_performance_info_self_yesterday& packetc2w_performance_info_self_yesterday::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetc2w_performance_info_self_yesterday* packetc2w_performance_info_self_yesterday::default_instance_ = NULL;

packetc2w_performance_info_self_yesterday* packetc2w_performance_info_self_yesterday::New() const {
  return new packetc2w_performance_info_self_yesterday;
}

void packetc2w_performance_info_self_yesterday::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5130;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_performance_info_self_yesterday::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_self_yesterday];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_performance_info_self_yesterday::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_self_yesterday];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_performance_info_self_yesterday::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_self_yesterday];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_performance_info_self_yesterday::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_self_yesterday];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_performance_info_self_yesterday::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_performance_info_self_yesterday* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_performance_info_self_yesterday*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_performance_info_self_yesterday::MergeFrom(const packetc2w_performance_info_self_yesterday& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_performance_info_self_yesterday::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_performance_info_self_yesterday::CopyFrom(const packetc2w_performance_info_self_yesterday& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_performance_info_self_yesterday::IsInitialized() const {

  return true;
}

void packetc2w_performance_info_self_yesterday::Swap(packetc2w_performance_info_self_yesterday* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_performance_info_self_yesterday::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_performance_info_self_yesterday_descriptor_;
  metadata.reflection = packetc2w_performance_info_self_yesterday_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_performance_info_self_yesterday_result::kPacketIdFieldNumber;
const int packetw2c_performance_info_self_yesterday_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_performance_info_self_yesterday_result::packetw2c_performance_info_self_yesterday_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_performance_info_self_yesterday_result::InitAsDefaultInstance() {
}

packetw2c_performance_info_self_yesterday_result::packetw2c_performance_info_self_yesterday_result(const packetw2c_performance_info_self_yesterday_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_performance_info_self_yesterday_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7641;
  result_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_performance_info_self_yesterday_result::~packetw2c_performance_info_self_yesterday_result() {
  SharedDtor();
}

void packetw2c_performance_info_self_yesterday_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_performance_info_self_yesterday_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_performance_info_self_yesterday_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_performance_info_self_yesterday_result_descriptor_;
}

const packetw2c_performance_info_self_yesterday_result& packetw2c_performance_info_self_yesterday_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetw2c_performance_info_self_yesterday_result* packetw2c_performance_info_self_yesterday_result::default_instance_ = NULL;

packetw2c_performance_info_self_yesterday_result* packetw2c_performance_info_self_yesterday_result::New() const {
  return new packetw2c_performance_info_self_yesterday_result;
}

void packetw2c_performance_info_self_yesterday_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7641;
    result_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_performance_info_self_yesterday_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_self_yesterday_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_performance_info_self_yesterday_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_self_yesterday_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_performance_info_self_yesterday_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_self_yesterday_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_performance_info_self_yesterday_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_self_yesterday_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_performance_info_self_yesterday_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_performance_info_self_yesterday_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_performance_info_self_yesterday_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_performance_info_self_yesterday_result::MergeFrom(const packetw2c_performance_info_self_yesterday_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_performance_info_self_yesterday_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_performance_info_self_yesterday_result::CopyFrom(const packetw2c_performance_info_self_yesterday_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_performance_info_self_yesterday_result::IsInitialized() const {

  return true;
}

void packetw2c_performance_info_self_yesterday_result::Swap(packetw2c_performance_info_self_yesterday_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_performance_info_self_yesterday_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_performance_info_self_yesterday_result_descriptor_;
  metadata.reflection = packetw2c_performance_info_self_yesterday_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_performance_info_agent_today::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_performance_info_agent_today::packetc2w_performance_info_agent_today()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_performance_info_agent_today::InitAsDefaultInstance() {
}

packetc2w_performance_info_agent_today::packetc2w_performance_info_agent_today(const packetc2w_performance_info_agent_today& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_performance_info_agent_today::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5131;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_performance_info_agent_today::~packetc2w_performance_info_agent_today() {
  SharedDtor();
}

void packetc2w_performance_info_agent_today::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_performance_info_agent_today::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_performance_info_agent_today::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_performance_info_agent_today_descriptor_;
}

const packetc2w_performance_info_agent_today& packetc2w_performance_info_agent_today::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetc2w_performance_info_agent_today* packetc2w_performance_info_agent_today::default_instance_ = NULL;

packetc2w_performance_info_agent_today* packetc2w_performance_info_agent_today::New() const {
  return new packetc2w_performance_info_agent_today;
}

void packetc2w_performance_info_agent_today::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5131;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_performance_info_agent_today::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_agent_today];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_performance_info_agent_today::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_agent_today];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_performance_info_agent_today::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_agent_today];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_performance_info_agent_today::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_agent_today];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_performance_info_agent_today::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_performance_info_agent_today* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_performance_info_agent_today*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_performance_info_agent_today::MergeFrom(const packetc2w_performance_info_agent_today& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_performance_info_agent_today::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_performance_info_agent_today::CopyFrom(const packetc2w_performance_info_agent_today& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_performance_info_agent_today::IsInitialized() const {

  return true;
}

void packetc2w_performance_info_agent_today::Swap(packetc2w_performance_info_agent_today* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_performance_info_agent_today::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_performance_info_agent_today_descriptor_;
  metadata.reflection = packetc2w_performance_info_agent_today_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_performance_info_agent_today_result::kPacketIdFieldNumber;
const int packetw2c_performance_info_agent_today_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_performance_info_agent_today_result::packetw2c_performance_info_agent_today_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_performance_info_agent_today_result::InitAsDefaultInstance() {
}

packetw2c_performance_info_agent_today_result::packetw2c_performance_info_agent_today_result(const packetw2c_performance_info_agent_today_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_performance_info_agent_today_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7642;
  result_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_performance_info_agent_today_result::~packetw2c_performance_info_agent_today_result() {
  SharedDtor();
}

void packetw2c_performance_info_agent_today_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_performance_info_agent_today_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_performance_info_agent_today_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_performance_info_agent_today_result_descriptor_;
}

const packetw2c_performance_info_agent_today_result& packetw2c_performance_info_agent_today_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetw2c_performance_info_agent_today_result* packetw2c_performance_info_agent_today_result::default_instance_ = NULL;

packetw2c_performance_info_agent_today_result* packetw2c_performance_info_agent_today_result::New() const {
  return new packetw2c_performance_info_agent_today_result;
}

void packetw2c_performance_info_agent_today_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7642;
    result_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_performance_info_agent_today_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_agent_today_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_performance_info_agent_today_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_agent_today_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_performance_info_agent_today_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_agent_today_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_performance_info_agent_today_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_agent_today_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_performance_info_agent_today_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_performance_info_agent_today_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_performance_info_agent_today_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_performance_info_agent_today_result::MergeFrom(const packetw2c_performance_info_agent_today_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_performance_info_agent_today_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_performance_info_agent_today_result::CopyFrom(const packetw2c_performance_info_agent_today_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_performance_info_agent_today_result::IsInitialized() const {

  return true;
}

void packetw2c_performance_info_agent_today_result::Swap(packetw2c_performance_info_agent_today_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_performance_info_agent_today_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_performance_info_agent_today_result_descriptor_;
  metadata.reflection = packetw2c_performance_info_agent_today_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_performance_info_agent_yesterday::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_performance_info_agent_yesterday::packetc2w_performance_info_agent_yesterday()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_performance_info_agent_yesterday::InitAsDefaultInstance() {
}

packetc2w_performance_info_agent_yesterday::packetc2w_performance_info_agent_yesterday(const packetc2w_performance_info_agent_yesterday& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_performance_info_agent_yesterday::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5132;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_performance_info_agent_yesterday::~packetc2w_performance_info_agent_yesterday() {
  SharedDtor();
}

void packetc2w_performance_info_agent_yesterday::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_performance_info_agent_yesterday::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_performance_info_agent_yesterday::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_performance_info_agent_yesterday_descriptor_;
}

const packetc2w_performance_info_agent_yesterday& packetc2w_performance_info_agent_yesterday::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetc2w_performance_info_agent_yesterday* packetc2w_performance_info_agent_yesterday::default_instance_ = NULL;

packetc2w_performance_info_agent_yesterday* packetc2w_performance_info_agent_yesterday::New() const {
  return new packetc2w_performance_info_agent_yesterday;
}

void packetc2w_performance_info_agent_yesterday::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5132;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_performance_info_agent_yesterday::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_agent_yesterday];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_performance_info_agent_yesterday::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_agent_yesterday];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_performance_info_agent_yesterday::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_agent_yesterday];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_performance_info_agent_yesterday::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_agent_yesterday];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_performance_info_agent_yesterday::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_performance_info_agent_yesterday* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_performance_info_agent_yesterday*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_performance_info_agent_yesterday::MergeFrom(const packetc2w_performance_info_agent_yesterday& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_performance_info_agent_yesterday::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_performance_info_agent_yesterday::CopyFrom(const packetc2w_performance_info_agent_yesterday& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_performance_info_agent_yesterday::IsInitialized() const {

  return true;
}

void packetc2w_performance_info_agent_yesterday::Swap(packetc2w_performance_info_agent_yesterday* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_performance_info_agent_yesterday::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_performance_info_agent_yesterday_descriptor_;
  metadata.reflection = packetc2w_performance_info_agent_yesterday_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_performance_info_agent_yesterday_result::kPacketIdFieldNumber;
const int packetw2c_performance_info_agent_yesterday_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_performance_info_agent_yesterday_result::packetw2c_performance_info_agent_yesterday_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_performance_info_agent_yesterday_result::InitAsDefaultInstance() {
}

packetw2c_performance_info_agent_yesterday_result::packetw2c_performance_info_agent_yesterday_result(const packetw2c_performance_info_agent_yesterday_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_performance_info_agent_yesterday_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7643;
  result_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_performance_info_agent_yesterday_result::~packetw2c_performance_info_agent_yesterday_result() {
  SharedDtor();
}

void packetw2c_performance_info_agent_yesterday_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_performance_info_agent_yesterday_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_performance_info_agent_yesterday_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_performance_info_agent_yesterday_result_descriptor_;
}

const packetw2c_performance_info_agent_yesterday_result& packetw2c_performance_info_agent_yesterday_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fperformance_2eproto();
  return *default_instance_;
}

packetw2c_performance_info_agent_yesterday_result* packetw2c_performance_info_agent_yesterday_result::default_instance_ = NULL;

packetw2c_performance_info_agent_yesterday_result* packetw2c_performance_info_agent_yesterday_result::New() const {
  return new packetw2c_performance_info_agent_yesterday_result;
}

void packetw2c_performance_info_agent_yesterday_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7643;
    result_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_performance_info_agent_yesterday_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_agent_yesterday_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_performance_info_agent_yesterday_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_agent_yesterday_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_performance_info_agent_yesterday_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_agent_yesterday_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_performance_info_agent_yesterday_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_agent_yesterday_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_performance_info_agent_yesterday_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_performance_info_agent_yesterday_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_performance_info_agent_yesterday_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_performance_info_agent_yesterday_result::MergeFrom(const packetw2c_performance_info_agent_yesterday_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_performance_info_agent_yesterday_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_performance_info_agent_yesterday_result::CopyFrom(const packetw2c_performance_info_agent_yesterday_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_performance_info_agent_yesterday_result::IsInitialized() const {

  return true;
}

void packetw2c_performance_info_agent_yesterday_result::Swap(packetw2c_performance_info_agent_yesterday_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_performance_info_agent_yesterday_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_performance_info_agent_yesterday_result_descriptor_;
  metadata.reflection = packetw2c_performance_info_agent_yesterday_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

// @@protoc_insertion_point(global_scope)
