// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_dice_def.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_dice_def.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dice_protocols {

namespace {

const ::google::protobuf::EnumDescriptor* e_dice_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_server_msg_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_msg_gamestate_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fdice_5fdef_2eproto() {
  protobuf_AddDesc_game_5fdice_5fdef_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_dice_def.proto");
  GOOGLE_CHECK(file != NULL);
  e_dice_type_descriptor_ = file->enum_type(0);
  e_server_msg_type_descriptor_ = file->enum_type(1);
  e_msg_gamestate_type_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fdice_5fdef_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_game_5fdice_5fdef_2eproto() {
}

void protobuf_AddDesc_game_5fdice_5fdef_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023game_dice_def.proto\022\016dice_protocols*\241\005"
    "\n\013e_dice_type\022\026\n\022e_dice_type_unknow\020\000\022\023\n"
    "\017e_dice_type_big\020\001\022\030\n\024e_dice_type_Leopar"
    "d1\020\002\022\030\n\024e_dice_type_Leopard2\020\003\022\030\n\024e_dice"
    "_type_Leopard3\020\004\022\030\n\024e_dice_type_Leopard4"
    "\020\005\022\030\n\024e_dice_type_Leopard5\020\006\022\030\n\024e_dice_t"
    "ype_Leopard6\020\007\022\032\n\026e_dice_type_LeopardAny"
    "\020\010\022\025\n\021e_dice_type_small\020\t\022\022\n\016e_dice_type"
    "_p4\020\n\022\022\n\016e_dice_type_p5\020\013\022\022\n\016e_dice_type"
    "_p6\020\014\022\022\n\016e_dice_type_p7\020\r\022\022\n\016e_dice_type"
    "_p8\020\016\022\022\n\016e_dice_type_p9\020\017\022\023\n\017e_dice_type"
    "_p10\020\020\022\023\n\017e_dice_type_p11\020\021\022\023\n\017e_dice_ty"
    "pe_p12\020\022\022\023\n\017e_dice_type_p13\020\023\022\023\n\017e_dice_"
    "type_p14\020\024\022\023\n\017e_dice_type_p15\020\025\022\023\n\017e_dic"
    "e_type_p16\020\026\022\023\n\017e_dice_type_p17\020\027\022\022\n\016e_d"
    "ice_type_d1\020\030\022\022\n\016e_dice_type_d2\020\031\022\022\n\016e_d"
    "ice_type_d3\020\032\022\022\n\016e_dice_type_d4\020\033\022\022\n\016e_d"
    "ice_type_d5\020\034\022\022\n\016e_dice_type_d6\020\035*\360\010\n\021e_"
    "server_msg_type\022\024\n\017e_mst_start_c2l\020\220N\022\032\n"
    "\025e_mst_c2l_check_state\020\221N\022\034\n\027e_mst_c2l_g"
    "et_room_info\020\222N\022\035\n\030e_mst_c2l_get_table_i"
    "nfo\020\223N\022\032\n\025e_mst_c2l_enter_table\020\224N\022\032\n\025e_"
    "mst_c2l_leave_table\020\225N\022\022\n\re_mst_c2l_bet\020"
    "\226N\022\024\n\017e_mst_c2l_unbet\020\227N\022\030\n\023e_mst_c2l_be"
    "t_again\020\230N\022\025\n\020e_mst_gm_command\020\231N\022\026\n\021e_m"
    "st_chang_table\020\232N\022\033\n\026e_mst_player_list_i"
    "nfo\020\233N\022\033\n\026e_mst_c2l_game_control\020\234N\022\035\n\030e"
    "_mst_c2l_ask_playerlist\020\235N\022\024\n\017e_mst_star"
    "t_l2c\020\230u\022!\n\034e_mst_l2c_check_state_result"
    "\020\231u\022#\n\036e_mst_l2c_get_room_info_result\020\232u"
    "\022$\n\037e_mst_l2c_get_table_info_result\020\233u\022!"
    "\n\034e_mst_l2c_enter_table_result\020\234u\022!\n\034e_m"
    "st_l2c_leave_table_result\020\235u\022\023\n\016e_mst_bc"
    "_shake\020\236u\022\026\n\021e_mst_bc_beginbet\020\237u\022\024\n\017e_m"
    "st_bc_endbet\020\240u\022\022\n\re_mst_bc_dice\020\241u\022\031\n\024e"
    "_mst_l2c_bet_result\020\242u\022\033\n\026e_mst_l2c_unbe"
    "t_result\020\243u\022\021\n\014e_mst_bc_bet\020\244u\022\023\n\016e_mst_"
    "bc_unbet\020\245u\022\030\n\023e_mst_bc_table_info\020\246u\022\031\n"
    "\024e_mst_bc_gold_change\020\247u\022\035\n\030e_mst_chang_"
    "table_result\020\250u\022\031\n\024e_mst_balance_result\020"
    "\251u\022\"\n\035e_mst_player_list_info_result\020\252u\022\027"
    "\n\022e_mst_bc_other_bet\020\253u\022\030\n\023e_mst_l2c_deb"
    "uginfo\020\254u\022%\n e_mst_l2c_notice_gm_all_bet"
    "_info\020\255u\022\"\n\035e_mst_l2c_game_control_resul"
    "t\020\256u\022\033\n\026e_mst_l2c_bc_debuginfo\020\257u\022 \n\033e_m"
    "st_l2c_playerlist_result\020\260u\022\027\n\021e_mst_cle"
    "nd_index\020\240\234\001*y\n\024e_msg_gamestate_type\022\021\n\r"
    "e_state_shake\020\000\022\024\n\020e_state_beginbet\020\001\022\022\n"
    "\016e_state_endbet\020\002\022\020\n\014e_state_dice\020\003\022\022\n\016e"
    "_state_result\020\004", 1975);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_dice_def.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fdice_5fdef_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fdice_5fdef_2eproto {
  StaticDescriptorInitializer_game_5fdice_5fdef_2eproto() {
    protobuf_AddDesc_game_5fdice_5fdef_2eproto();
  }
} static_descriptor_initializer_game_5fdice_5fdef_2eproto_;
const ::google::protobuf::EnumDescriptor* e_dice_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_dice_type_descriptor_;
}
bool e_dice_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_server_msg_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_server_msg_type_descriptor_;
}
bool e_server_msg_type_IsValid(int value) {
  switch(value) {
    case 10000:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
    case 10007:
    case 10008:
    case 10009:
    case 10010:
    case 10011:
    case 10012:
    case 10013:
    case 15000:
    case 15001:
    case 15002:
    case 15003:
    case 15004:
    case 15005:
    case 15006:
    case 15007:
    case 15008:
    case 15009:
    case 15010:
    case 15011:
    case 15012:
    case 15013:
    case 15014:
    case 15015:
    case 15016:
    case 15017:
    case 15018:
    case 15019:
    case 15020:
    case 15021:
    case 15022:
    case 15023:
    case 15024:
    case 20000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_msg_gamestate_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_msg_gamestate_type_descriptor_;
}
bool e_msg_gamestate_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dice_protocols

// @@protoc_insertion_point(global_scope)
