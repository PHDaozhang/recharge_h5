// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_slothch_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_slothch_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game_slothch_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2l_check_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_check_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_check_state_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_check_state_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_enter_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_enter_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_enter_game_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_enter_game_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_leave_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_leave_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_leave_game_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_leave_game_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_star_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_star_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* IconInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IconInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FreeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FreeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_star_game_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_star_game_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_req_game_lottery_count_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_req_game_lottery_count_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_req_game_lottery_count_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_req_game_lottery_count_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_req_game_lottery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_req_game_lottery_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_req_game_lottery_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_req_game_lottery_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_lottery_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_lottery_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_lottery_update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_lottery_update_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_get_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_room_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_room_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_enter_player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_enter_player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_leave_player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_leave_player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_player_change_money_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_player_change_money_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_change_attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_change_attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_supply_chip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_supply_chip_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_supply_chip_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_supply_chip_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_get_room_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_room_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_room_scene_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_room_scene_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_scene_sync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_scene_sync_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_settlement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_settlement_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_settlement_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_settlement_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* replay_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  replay_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_replay_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_replay_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_replay_list_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_replay_list_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_replay_detail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_replay_detail_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_replay_detail_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_replay_detail_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* room_player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  room_player_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_gm_get_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_gm_get_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_gm_get_room_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_gm_get_room_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_gm_do_kill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_gm_do_kill_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_gm_do_kill_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_gm_do_kill_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto() {
  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_slothch_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2l_check_state_descriptor_ = file->message_type(0);
  static const int packetc2l_check_state_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, packet_id_),
  };
  packetc2l_check_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_check_state_descriptor_,
      packetc2l_check_state::default_instance_,
      packetc2l_check_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_check_state));
  packetc2l_check_state_result_descriptor_ = file->message_type(1);
  static const int packetc2l_check_state_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state_result, room_id_),
  };
  packetc2l_check_state_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_check_state_result_descriptor_,
      packetc2l_check_state_result::default_instance_,
      packetc2l_check_state_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_check_state_result));
  packetc2l_enter_game_descriptor_ = file->message_type(2);
  static const int packetc2l_enter_game_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game, room_id_),
  };
  packetc2l_enter_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_enter_game_descriptor_,
      packetc2l_enter_game::default_instance_,
      packetc2l_enter_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_enter_game));
  packetc2l_enter_game_result_descriptor_ = file->message_type(3);
  static const int packetc2l_enter_game_result_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game_result, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game_result, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game_result, free_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game_result, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game_result, last_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game_result, gold_),
  };
  packetc2l_enter_game_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_enter_game_result_descriptor_,
      packetc2l_enter_game_result::default_instance_,
      packetc2l_enter_game_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_game_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_enter_game_result));
  packetc2l_leave_game_descriptor_ = file->message_type(4);
  static const int packetc2l_leave_game_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_game, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_game, room_id_),
  };
  packetc2l_leave_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_leave_game_descriptor_,
      packetc2l_leave_game::default_instance_,
      packetc2l_leave_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_leave_game));
  packetc2l_leave_game_result_descriptor_ = file->message_type(5);
  static const int packetc2l_leave_game_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_game_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_game_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_game_result, gold_),
  };
  packetc2l_leave_game_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_leave_game_result_descriptor_,
      packetc2l_leave_game_result::default_instance_,
      packetc2l_leave_game_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_game_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_game_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_leave_game_result));
  packetc2l_star_game_descriptor_ = file->message_type(6);
  static const int packetc2l_star_game_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game, rateindex_),
  };
  packetc2l_star_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_star_game_descriptor_,
      packetc2l_star_game::default_instance_,
      packetc2l_star_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_star_game));
  IconInfo_descriptor_ = file->message_type(7);
  static const int IconInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IconInfo, iconid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IconInfo, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IconInfo, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IconInfo, iconpos_),
  };
  IconInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IconInfo_descriptor_,
      IconInfo::default_instance_,
      IconInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IconInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IconInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IconInfo));
  FreeInfo_descriptor_ = file->message_type(8);
  static const int FreeInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeInfo, imagearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeInfo, winmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeInfo, icons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeInfo, freecol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeInfo, freeadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeInfo, freeendgold_),
  };
  FreeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FreeInfo_descriptor_,
      FreeInfo::default_instance_,
      FreeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FreeInfo));
  packetc2l_star_game_result_descriptor_ = file->message_type(9);
  static const int packetc2l_star_game_result_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, moneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, imagearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, winmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, deductmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, curmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, icons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, freecol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, freeadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, lottery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, freeendgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, freeinfos_),
  };
  packetc2l_star_game_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_star_game_result_descriptor_,
      packetc2l_star_game_result::default_instance_,
      packetc2l_star_game_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_star_game_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_star_game_result));
  packetc2l_req_game_lottery_count_descriptor_ = file->message_type(10);
  static const int packetc2l_req_game_lottery_count_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_game_lottery_count, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_game_lottery_count, pos_),
  };
  packetc2l_req_game_lottery_count_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_req_game_lottery_count_descriptor_,
      packetc2l_req_game_lottery_count::default_instance_,
      packetc2l_req_game_lottery_count_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_game_lottery_count, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_game_lottery_count, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_req_game_lottery_count));
  packetl2c_req_game_lottery_count_result_descriptor_ = file->message_type(11);
  static const int packetl2c_req_game_lottery_count_result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_game_lottery_count_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_game_lottery_count_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_game_lottery_count_result, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_game_lottery_count_result, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_game_lottery_count_result, count_),
  };
  packetl2c_req_game_lottery_count_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_req_game_lottery_count_result_descriptor_,
      packetl2c_req_game_lottery_count_result::default_instance_,
      packetl2c_req_game_lottery_count_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_game_lottery_count_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_game_lottery_count_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_req_game_lottery_count_result));
  packetc2l_req_game_lottery_descriptor_ = file->message_type(12);
  static const int packetc2l_req_game_lottery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_game_lottery, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_game_lottery, pos_),
  };
  packetc2l_req_game_lottery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_req_game_lottery_descriptor_,
      packetc2l_req_game_lottery::default_instance_,
      packetc2l_req_game_lottery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_game_lottery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_req_game_lottery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_req_game_lottery));
  packetl2c_req_game_lottery_result_descriptor_ = file->message_type(13);
  static const int packetl2c_req_game_lottery_result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_game_lottery_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_game_lottery_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_game_lottery_result, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_game_lottery_result, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_game_lottery_result, reward_),
  };
  packetl2c_req_game_lottery_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_req_game_lottery_result_descriptor_,
      packetl2c_req_game_lottery_result::default_instance_,
      packetl2c_req_game_lottery_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_game_lottery_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_req_game_lottery_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_req_game_lottery_result));
  msg_lottery_info_descriptor_ = file->message_type(14);
  static const int msg_lottery_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_lottery_info, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_lottery_info, gold_),
  };
  msg_lottery_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_lottery_info_descriptor_,
      msg_lottery_info::default_instance_,
      msg_lottery_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_lottery_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_lottery_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_lottery_info));
  packetl2c_lottery_update_descriptor_ = file->message_type(15);
  static const int packetl2c_lottery_update_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_lottery_update, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_lottery_update, infos_),
  };
  packetl2c_lottery_update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_lottery_update_descriptor_,
      packetl2c_lottery_update::default_instance_,
      packetl2c_lottery_update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_lottery_update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_lottery_update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_lottery_update));
  packetc2l_get_room_info_descriptor_ = file->message_type(16);
  static const int packetc2l_get_room_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, packet_id_),
  };
  packetc2l_get_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_room_info_descriptor_,
      packetc2l_get_room_info::default_instance_,
      packetc2l_get_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_room_info));
  msg_room_info_descriptor_ = file->message_type(17);
  static const int msg_room_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_info, roomid_),
  };
  msg_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_room_info_descriptor_,
      msg_room_info::default_instance_,
      msg_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_room_info));
  packetl2c_get_room_info_result_descriptor_ = file->message_type(18);
  static const int packetl2c_get_room_info_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, rooms_),
  };
  packetl2c_get_room_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_room_info_result_descriptor_,
      packetl2c_get_room_info_result::default_instance_,
      packetl2c_get_room_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_room_info_result));
  packetl2c_enter_player_info_descriptor_ = file->message_type(19);
  static const int packetl2c_enter_player_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_player_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_player_info, player_info_),
  };
  packetl2c_enter_player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_enter_player_info_descriptor_,
      packetl2c_enter_player_info::default_instance_,
      packetl2c_enter_player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_enter_player_info));
  packetl2c_leave_player_info_descriptor_ = file->message_type(20);
  static const int packetl2c_leave_player_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_player_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_player_info, player_id_),
  };
  packetl2c_leave_player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_leave_player_info_descriptor_,
      packetl2c_leave_player_info::default_instance_,
      packetl2c_leave_player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_leave_player_info));
  packetl2c_player_change_money_descriptor_ = file->message_type(21);
  static const int packetl2c_player_change_money_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_change_money, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_change_money, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_change_money, cur_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_change_money, change_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_change_money, b_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_change_money, b_lottery_),
  };
  packetl2c_player_change_money_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_player_change_money_descriptor_,
      packetl2c_player_change_money::default_instance_,
      packetl2c_player_change_money_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_change_money, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_player_change_money, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_player_change_money));
  packetl2c_bc_change_attr_descriptor_ = file->message_type(22);
  static const int packetl2c_bc_change_attr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, change_value_),
  };
  packetl2c_bc_change_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_change_attr_descriptor_,
      packetl2c_bc_change_attr::default_instance_,
      packetl2c_bc_change_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_change_attr));
  packetc2l_supply_chip_descriptor_ = file->message_type(23);
  static const int packetc2l_supply_chip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_supply_chip, packet_id_),
  };
  packetc2l_supply_chip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_supply_chip_descriptor_,
      packetc2l_supply_chip::default_instance_,
      packetc2l_supply_chip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_supply_chip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_supply_chip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_supply_chip));
  packetl2c_supply_chip_result_descriptor_ = file->message_type(24);
  static const int packetl2c_supply_chip_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_supply_chip_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_supply_chip_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_supply_chip_result, gold_),
  };
  packetl2c_supply_chip_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_supply_chip_result_descriptor_,
      packetl2c_supply_chip_result::default_instance_,
      packetl2c_supply_chip_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_supply_chip_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_supply_chip_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_supply_chip_result));
  packetc2l_get_room_scene_info_descriptor_ = file->message_type(25);
  static const int packetc2l_get_room_scene_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_scene_info, packet_id_),
  };
  packetc2l_get_room_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_room_scene_info_descriptor_,
      packetc2l_get_room_scene_info::default_instance_,
      packetc2l_get_room_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_room_scene_info));
  packetl2c_get_room_scene_info_result_descriptor_ = file->message_type(26);
  static const int packetl2c_get_room_scene_info_result_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, free_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, last_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, freeendgold_),
  };
  packetl2c_get_room_scene_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_room_scene_info_result_descriptor_,
      packetl2c_get_room_scene_info_result::default_instance_,
      packetl2c_get_room_scene_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_room_scene_info_result));
  packetl2c_scene_sync_descriptor_ = file->message_type(27);
  static const int packetl2c_scene_sync_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_sync, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_sync, last_name_),
  };
  packetl2c_scene_sync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_scene_sync_descriptor_,
      packetl2c_scene_sync::default_instance_,
      packetl2c_scene_sync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_sync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_sync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_scene_sync));
  packetc2l_settlement_descriptor_ = file->message_type(28);
  static const int packetc2l_settlement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_settlement, packet_id_),
  };
  packetc2l_settlement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_settlement_descriptor_,
      packetc2l_settlement::default_instance_,
      packetc2l_settlement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_settlement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_settlement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_settlement));
  packetl2c_settlement_result_descriptor_ = file->message_type(29);
  static const int packetl2c_settlement_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_settlement_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_settlement_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_settlement_result, gold_),
  };
  packetl2c_settlement_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_settlement_result_descriptor_,
      packetl2c_settlement_result::default_instance_,
      packetl2c_settlement_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_settlement_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_settlement_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_settlement_result));
  replay_info_descriptor_ = file->message_type(30);
  static const int replay_info_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, winmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, deductmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, curmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, imagearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, icons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, freecol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, freecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, freeadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, freeendgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, lotteryresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, lotteryreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, lotteryicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, lotterypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, playercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, freeinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, viplv_),
  };
  replay_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      replay_info_descriptor_,
      replay_info::default_instance_,
      replay_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replay_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(replay_info));
  packetl2c_replay_list_descriptor_ = file->message_type(31);
  static const int packetl2c_replay_list_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_replay_list, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_replay_list, rtype_),
  };
  packetl2c_replay_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_replay_list_descriptor_,
      packetl2c_replay_list::default_instance_,
      packetl2c_replay_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_replay_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_replay_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_replay_list));
  packetl2c_replay_list_result_descriptor_ = file->message_type(32);
  static const int packetl2c_replay_list_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_replay_list_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_replay_list_result, rtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_replay_list_result, replay_list_),
  };
  packetl2c_replay_list_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_replay_list_result_descriptor_,
      packetl2c_replay_list_result::default_instance_,
      packetl2c_replay_list_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_replay_list_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_replay_list_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_replay_list_result));
  packetl2c_replay_detail_descriptor_ = file->message_type(33);
  static const int packetl2c_replay_detail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_replay_detail, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_replay_detail, rtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_replay_detail, rid_),
  };
  packetl2c_replay_detail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_replay_detail_descriptor_,
      packetl2c_replay_detail::default_instance_,
      packetl2c_replay_detail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_replay_detail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_replay_detail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_replay_detail));
  packetl2c_replay_detail_result_descriptor_ = file->message_type(34);
  static const int packetl2c_replay_detail_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_replay_detail_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_replay_detail_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_replay_detail_result, rtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_replay_detail_result, replay_),
  };
  packetl2c_replay_detail_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_replay_detail_result_descriptor_,
      packetl2c_replay_detail_result::default_instance_,
      packetl2c_replay_detail_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_replay_detail_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_replay_detail_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_replay_detail_result));
  room_player_descriptor_ = file->message_type(35);
  static const int room_player_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_player, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_player, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_player, bet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_player, profit_today_),
  };
  room_player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      room_player_descriptor_,
      room_player::default_instance_,
      room_player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(room_player));
  packetl2c_gm_get_room_info_descriptor_ = file->message_type(36);
  static const int packetl2c_gm_get_room_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info, packet_id_),
  };
  packetl2c_gm_get_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_gm_get_room_info_descriptor_,
      packetl2c_gm_get_room_info::default_instance_,
      packetl2c_gm_get_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_gm_get_room_info));
  packetl2c_gm_get_room_info_result_descriptor_ = file->message_type(37);
  static const int packetl2c_gm_get_room_info_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info_result, killcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info_result, players_),
  };
  packetl2c_gm_get_room_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_gm_get_room_info_result_descriptor_,
      packetl2c_gm_get_room_info_result::default_instance_,
      packetl2c_gm_get_room_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_gm_get_room_info_result));
  packetl2c_gm_do_kill_descriptor_ = file->message_type(38);
  static const int packetl2c_gm_do_kill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_do_kill, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_do_kill, killcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_do_kill, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_do_kill, free_),
  };
  packetl2c_gm_do_kill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_gm_do_kill_descriptor_,
      packetl2c_gm_do_kill::default_instance_,
      packetl2c_gm_do_kill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_do_kill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_do_kill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_gm_do_kill));
  packetl2c_gm_do_kill_result_descriptor_ = file->message_type(39);
  static const int packetl2c_gm_do_kill_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_do_kill_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_do_kill_result, result_),
  };
  packetl2c_gm_do_kill_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_gm_do_kill_result_descriptor_,
      packetl2c_gm_do_kill_result::default_instance_,
      packetl2c_gm_do_kill_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_do_kill_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_do_kill_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_gm_do_kill_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_check_state_descriptor_, &packetc2l_check_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_check_state_result_descriptor_, &packetc2l_check_state_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_enter_game_descriptor_, &packetc2l_enter_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_enter_game_result_descriptor_, &packetc2l_enter_game_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_leave_game_descriptor_, &packetc2l_leave_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_leave_game_result_descriptor_, &packetc2l_leave_game_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_star_game_descriptor_, &packetc2l_star_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IconInfo_descriptor_, &IconInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FreeInfo_descriptor_, &FreeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_star_game_result_descriptor_, &packetc2l_star_game_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_req_game_lottery_count_descriptor_, &packetc2l_req_game_lottery_count::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_req_game_lottery_count_result_descriptor_, &packetl2c_req_game_lottery_count_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_req_game_lottery_descriptor_, &packetc2l_req_game_lottery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_req_game_lottery_result_descriptor_, &packetl2c_req_game_lottery_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_lottery_info_descriptor_, &msg_lottery_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_lottery_update_descriptor_, &packetl2c_lottery_update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_room_info_descriptor_, &packetc2l_get_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_room_info_descriptor_, &msg_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_room_info_result_descriptor_, &packetl2c_get_room_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_enter_player_info_descriptor_, &packetl2c_enter_player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_leave_player_info_descriptor_, &packetl2c_leave_player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_player_change_money_descriptor_, &packetl2c_player_change_money::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_change_attr_descriptor_, &packetl2c_bc_change_attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_supply_chip_descriptor_, &packetc2l_supply_chip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_supply_chip_result_descriptor_, &packetl2c_supply_chip_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_room_scene_info_descriptor_, &packetc2l_get_room_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_room_scene_info_result_descriptor_, &packetl2c_get_room_scene_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_scene_sync_descriptor_, &packetl2c_scene_sync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_settlement_descriptor_, &packetc2l_settlement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_settlement_result_descriptor_, &packetl2c_settlement_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    replay_info_descriptor_, &replay_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_replay_list_descriptor_, &packetl2c_replay_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_replay_list_result_descriptor_, &packetl2c_replay_list_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_replay_detail_descriptor_, &packetl2c_replay_detail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_replay_detail_result_descriptor_, &packetl2c_replay_detail_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    room_player_descriptor_, &room_player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_gm_get_room_info_descriptor_, &packetl2c_gm_get_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_gm_get_room_info_result_descriptor_, &packetl2c_gm_get_room_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_gm_do_kill_descriptor_, &packetl2c_gm_do_kill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_gm_do_kill_result_descriptor_, &packetl2c_gm_do_kill_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto() {
  delete packetc2l_check_state::default_instance_;
  delete packetc2l_check_state_reflection_;
  delete packetc2l_check_state_result::default_instance_;
  delete packetc2l_check_state_result_reflection_;
  delete packetc2l_enter_game::default_instance_;
  delete packetc2l_enter_game_reflection_;
  delete packetc2l_enter_game_result::default_instance_;
  delete packetc2l_enter_game_result_reflection_;
  delete packetc2l_leave_game::default_instance_;
  delete packetc2l_leave_game_reflection_;
  delete packetc2l_leave_game_result::default_instance_;
  delete packetc2l_leave_game_result_reflection_;
  delete packetc2l_star_game::default_instance_;
  delete packetc2l_star_game_reflection_;
  delete IconInfo::default_instance_;
  delete IconInfo_reflection_;
  delete FreeInfo::default_instance_;
  delete FreeInfo_reflection_;
  delete packetc2l_star_game_result::default_instance_;
  delete packetc2l_star_game_result_reflection_;
  delete packetc2l_req_game_lottery_count::default_instance_;
  delete packetc2l_req_game_lottery_count_reflection_;
  delete packetl2c_req_game_lottery_count_result::default_instance_;
  delete packetl2c_req_game_lottery_count_result_reflection_;
  delete packetc2l_req_game_lottery::default_instance_;
  delete packetc2l_req_game_lottery_reflection_;
  delete packetl2c_req_game_lottery_result::default_instance_;
  delete packetl2c_req_game_lottery_result_reflection_;
  delete msg_lottery_info::default_instance_;
  delete msg_lottery_info_reflection_;
  delete packetl2c_lottery_update::default_instance_;
  delete packetl2c_lottery_update_reflection_;
  delete packetc2l_get_room_info::default_instance_;
  delete packetc2l_get_room_info_reflection_;
  delete msg_room_info::default_instance_;
  delete msg_room_info_reflection_;
  delete packetl2c_get_room_info_result::default_instance_;
  delete packetl2c_get_room_info_result_reflection_;
  delete packetl2c_enter_player_info::default_instance_;
  delete packetl2c_enter_player_info_reflection_;
  delete packetl2c_leave_player_info::default_instance_;
  delete packetl2c_leave_player_info_reflection_;
  delete packetl2c_player_change_money::default_instance_;
  delete packetl2c_player_change_money_reflection_;
  delete packetl2c_bc_change_attr::default_instance_;
  delete packetl2c_bc_change_attr_reflection_;
  delete packetc2l_supply_chip::default_instance_;
  delete packetc2l_supply_chip_reflection_;
  delete packetl2c_supply_chip_result::default_instance_;
  delete packetl2c_supply_chip_result_reflection_;
  delete packetc2l_get_room_scene_info::default_instance_;
  delete packetc2l_get_room_scene_info_reflection_;
  delete packetl2c_get_room_scene_info_result::default_instance_;
  delete packetl2c_get_room_scene_info_result_reflection_;
  delete packetl2c_scene_sync::default_instance_;
  delete packetl2c_scene_sync_reflection_;
  delete packetc2l_settlement::default_instance_;
  delete packetc2l_settlement_reflection_;
  delete packetl2c_settlement_result::default_instance_;
  delete packetl2c_settlement_result_reflection_;
  delete replay_info::default_instance_;
  delete replay_info_reflection_;
  delete packetl2c_replay_list::default_instance_;
  delete packetl2c_replay_list_reflection_;
  delete packetl2c_replay_list_result::default_instance_;
  delete packetl2c_replay_list_result_reflection_;
  delete packetl2c_replay_detail::default_instance_;
  delete packetl2c_replay_detail_reflection_;
  delete packetl2c_replay_detail_result::default_instance_;
  delete packetl2c_replay_detail_result_reflection_;
  delete room_player::default_instance_;
  delete room_player_reflection_;
  delete packetl2c_gm_get_room_info::default_instance_;
  delete packetl2c_gm_get_room_info_reflection_;
  delete packetl2c_gm_get_room_info_result::default_instance_;
  delete packetl2c_gm_get_room_info_result_reflection_;
  delete packetl2c_gm_do_kill::default_instance_;
  delete packetl2c_gm_do_kill_reflection_;
  delete packetl2c_gm_do_kill_result::default_instance_;
  delete packetl2c_gm_do_kill_result_reflection_;
}

void protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::game_slothch_protocols::protobuf_AddDesc_game_5fslothch_5fdef_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033game_slothch_protocol.proto\022\026game_slot"
    "hch_protocols\032\026game_slothch_def.proto\032\022m"
    "sg_type_def.proto\"l\n\025packetc2l_check_sta"
    "te\022S\n\tpacket_id\030\001 \001(\0162).game_slothch_pro"
    "tocols.e_server_msg_type:\025e_mst_c2l_chec"
    "k_state\"\213\001\n\034packetc2l_check_state_result"
    "\022Z\n\tpacket_id\030\001 \001(\0162).game_slothch_proto"
    "cols.e_server_msg_type:\034e_mst_l2c_check_"
    "state_result\022\017\n\007room_id\030\002 \001(\005\"{\n\024packetc"
    "2l_enter_game\022R\n\tpacket_id\030\001 \001(\0162).game_"
    "slothch_protocols.e_server_msg_type:\024e_m"
    "st_c2l_enter_game\022\017\n\007room_id\030\002 \001(\005\"\305\002\n\033p"
    "acketc2l_enter_game_result\022Y\n\tpacket_id\030"
    "\001 \001(\0162).game_slothch_protocols.e_server_"
    "msg_type:\033e_mst_l2c_enter_game_result\022\016\n"
    "\006result\030\002 \001(\005\022\017\n\007room_id\030\003 \001(\005\022<\n\013player"
    "_list\030\004 \003(\0132\'.game_slothch_protocols.msg"
    "_player_info\022\022\n\nfree_count\030\005 \001(\005\0227\n\005info"
    "s\030\006 \003(\0132(.game_slothch_protocols.msg_lot"
    "tery_info\022\021\n\tlast_name\030\007 \001(\t\022\014\n\004gold\030\010 \001"
    "(\003\"{\n\024packetc2l_leave_game\022R\n\tpacket_id\030"
    "\001 \001(\0162).game_slothch_protocols.e_server_"
    "msg_type:\024e_mst_c2l_leave_game\022\017\n\007room_i"
    "d\030\002 \001(\005\"\226\001\n\033packetc2l_leave_game_result\022"
    "Y\n\tpacket_id\030\001 \001(\0162).game_slothch_protoc"
    "ols.e_server_msg_type:\033e_mst_l2c_leave_g"
    "ame_result\022\016\n\006result\030\002 \001(\005\022\014\n\004gold\030\003 \001(\003"
    "\"{\n\023packetc2l_star_game\022Q\n\tpacket_id\030\001 \001"
    "(\0162).game_slothch_protocols.e_server_msg"
    "_type:\023e_mst_c2l_star_game\022\021\n\trateIndex\030"
    "\002 \001(\005\"F\n\010IconInfo\022\016\n\006iconId\030\001 \001(\005\022\013\n\003len"
    "\030\002 \001(\005\022\014\n\004rate\030\003 \001(\005\022\017\n\007iconpos\030\004 \003(\005\"\226\001"
    "\n\010FreeInfo\022\020\n\010imageArr\030\001 \001(\t\022\020\n\010winMoney"
    "\030\002 \001(\005\022/\n\005icons\030\003 \003(\0132 .game_slothch_pro"
    "tocols.IconInfo\022\017\n\007freeCol\030\004 \001(\010\022\017\n\007free"
    "Add\030\005 \001(\005\022\023\n\013freeEndGold\030\006 \001(\003\"\222\003\n\032packe"
    "tc2l_star_game_result\022X\n\tpacket_id\030\001 \001(\016"
    "2).game_slothch_protocols.e_server_msg_t"
    "ype:\032e_mst_l2c_star_game_result\022\021\n\tmoney"
    "Type\030\002 \001(\005\022\020\n\010imageArr\030\003 \001(\t\022\020\n\010winMoney"
    "\030\004 \001(\005\022\023\n\013deductMoney\030\005 \001(\005\022\016\n\006result\030\006 "
    "\001(\005\022\020\n\010curMoney\030\007 \001(\005\022/\n\005icons\030\010 \003(\0132 .g"
    "ame_slothch_protocols.IconInfo\022\017\n\007freeCo"
    "l\030\t \001(\010\022\017\n\007freeAdd\030\n \001(\005\022\017\n\007lottery\030\013 \001("
    "\010\022\023\n\013freeEndGold\030\014 \001(\003\0223\n\tfreeInfos\030\r \003("
    "\0132 .game_slothch_protocols.FreeInfo\"\217\001\n "
    "packetc2l_req_game_lottery_count\022^\n\tpack"
    "et_id\030\001 \001(\0162).game_slothch_protocols.e_s"
    "erver_msg_type: e_mst_c2l_req_game_lotte"
    "ry_count\022\013\n\003pos\030\002 \001(\005\"\366\001\n\'packetl2c_req_"
    "game_lottery_count_result\022e\n\tpacket_id\030\001"
    " \001(\0162).game_slothch_protocols.e_server_m"
    "sg_type:\'e_mst_l2c_req_game_lottery_coun"
    "t_result\022:\n\006result\030\002 \001(\0162\036.msg_type_def."
    "e_msg_result_def:\ne_rmt_fail\022\013\n\003pos\030\003 \001("
    "\005\022\014\n\004icon\030\004 \001(\005\022\r\n\005count\030\005 \001(\005\"\203\001\n\032packe"
    "tc2l_req_game_lottery\022X\n\tpacket_id\030\001 \001(\016"
    "2).game_slothch_protocols.e_server_msg_t"
    "ype:\032e_mst_c2l_req_game_lottery\022\013\n\003pos\030\002"
    " \001(\005\"\356\001\n!packetl2c_req_game_lottery_resu"
    "lt\022_\n\tpacket_id\030\001 \001(\0162).game_slothch_pro"
    "tocols.e_server_msg_type:!e_mst_l2c_req_"
    "game_lottery_result\022:\n\006result\030\002 \001(\0162\036.ms"
    "g_type_def.e_msg_result_def:\ne_rmt_fail\022"
    "\013\n\003pos\030\003 \001(\005\022\014\n\004icon\030\004 \001(\005\022\021\n\006reward\030\005 \001"
    "(\003:\0010\"/\n\020msg_lottery_info\022\r\n\005index\030\001 \001(\005"
    "\022\014\n\004gold\030\002 \001(\005\"\253\001\n\030packetl2c_lottery_upd"
    "ate\022V\n\tpacket_id\030\001 \001(\0162).game_slothch_pr"
    "otocols.e_server_msg_type:\030e_mst_l2c_lot"
    "tery_update\0227\n\005infos\030\002 \003(\0132(.game_slothc"
    "h_protocols.msg_lottery_info\"p\n\027packetc2"
    "l_get_room_info\022U\n\tpacket_id\030\001 \001(\0162).gam"
    "e_slothch_protocols.e_server_msg_type:\027e"
    "_mst_c2l_get_room_info\"\037\n\rmsg_room_info\022"
    "\016\n\006roomid\030\001 \001(\005\"\264\001\n\036packetl2c_get_room_i"
    "nfo_result\022\\\n\tpacket_id\030\001 \001(\0162).game_slo"
    "thch_protocols.e_server_msg_type:\036e_mst_"
    "l2c_get_room_info_result\0224\n\005rooms\030\002 \003(\0132"
    "%.game_slothch_protocols.msg_room_info\"\266"
    "\001\n\033packetl2c_enter_player_info\022Y\n\tpacket"
    "_id\030\001 \001(\0162).game_slothch_protocols.e_ser"
    "ver_msg_type:\033e_mst_l2c_enter_player_inf"
    "o\022<\n\013player_info\030\002 \001(\0132\'.game_slothch_pr"
    "otocols.msg_player_info\"\213\001\n\033packetl2c_le"
    "ave_player_info\022Y\n\tpacket_id\030\001 \001(\0162).gam"
    "e_slothch_protocols.e_server_msg_type:\033e"
    "_mst_l2c_leave_player_info\022\021\n\tplayer_id\030"
    "\002 \001(\005\"\333\001\n\035packetl2c_player_change_money\022"
    "[\n\tpacket_id\030\001 \001(\0162).game_slothch_protoc"
    "ols.e_server_msg_type:\035e_mst_l2c_player_"
    "change_money\022\021\n\tplayer_id\030\002 \001(\005\022\021\n\tcur_m"
    "oney\030\003 \001(\003\022\024\n\014change_money\030\004 \001(\003\022\016\n\006b_fr"
    "ee\030\005 \001(\010\022\021\n\tb_lottery\030\006 \001(\010\"\256\001\n\030packetl2"
    "c_bc_change_attr\022V\n\tpacket_id\030\001 \001(\0162).ga"
    "me_slothch_protocols.e_server_msg_type:\030"
    "e_mst_l2c_bc_change_attr\022\021\n\tplayer_id\030\002 "
    "\001(\005\022\021\n\titem_type\030\003 \001(\005\022\024\n\014change_value\030\004"
    " \001(\003\"l\n\025packetc2l_supply_chip\022S\n\tpacket_"
    "id\030\001 \001(\0162).game_slothch_protocols.e_serv"
    "er_msg_type:\025e_mst_c2l_supply_chip\"\304\001\n\034p"
    "acketl2c_supply_chip_result\022Z\n\tpacket_id"
    "\030\001 \001(\0162).game_slothch_protocols.e_server"
    "_msg_type:\034e_mst_l2c_supply_chip_result\022"
    ":\n\006result\030\002 \001(\0162\036.msg_type_def.e_msg_res"
    "ult_def:\ne_rmt_fail\022\014\n\004gold\030\003 \001(\003\"|\n\035pac"
    "ketc2l_get_room_scene_info\022[\n\tpacket_id\030"
    "\001 \001(\0162).game_slothch_protocols.e_server_"
    "msg_type:\035e_mst_c2l_get_room_scene_info\""
    "\325\002\n$packetl2c_get_room_scene_info_result"
    "\022[\n\tpacket_id\030\001 \001(\0162).game_slothch_proto"
    "cols.e_server_msg_type:\035e_mst_l2c_get_ro"
    "om_scene_info\022\017\n\007room_id\030\002 \001(\005\022<\n\013player"
    "_list\030\003 \003(\0132\'.game_slothch_protocols.msg"
    "_player_info\022\022\n\nfree_count\030\004 \001(\005\0227\n\005info"
    "s\030\005 \003(\0132(.game_slothch_protocols.msg_lot"
    "tery_info\022\021\n\tlast_name\030\006 \001(\t\022\014\n\004gold\030\007 \001"
    "(\003\022\023\n\013freeEndGold\030\010 \001(\003\"}\n\024packetl2c_sce"
    "ne_sync\022R\n\tpacket_id\030\001 \001(\0162).game_slothc"
    "h_protocols.e_server_msg_type:\024e_mst_l2c"
    "_scene_sync\022\021\n\tlast_name\030\002 \001(\t\"j\n\024packet"
    "c2l_settlement\022R\n\tpacket_id\030\001 \001(\0162).game"
    "_slothch_protocols.e_server_msg_type:\024e_"
    "mst_c2l_settlement\"\226\001\n\033packetl2c_settlem"
    "ent_result\022Y\n\tpacket_id\030\001 \001(\0162).game_slo"
    "thch_protocols.e_server_msg_type:\033e_mst_"
    "l2c_settlement_result\022\016\n\006result\030\002 \001(\005\022\014\n"
    "\004gold\030\003 \001(\003\"\350\003\n\013replay_info\022\013\n\003rid\030\001 \001(\t"
    "\022\013\n\003pid\030\002 \001(\005\022\014\n\004nick\030\003 \001(\t\022\r\n\005frame\030\004 \001"
    "(\005\022\020\n\010winMoney\030\005 \001(\003\022\023\n\013deductMoney\030\006 \001("
    "\003\022\020\n\010curMoney\030\007 \001(\003\022\013\n\003win\030\010 \001(\003\022\014\n\004rate"
    "\030\t \001(\003\022\020\n\010imageArr\030\n \001(\t\022/\n\005icons\030\013 \003(\0132"
    " .game_slothch_protocols.IconInfo\022\017\n\007fre"
    "eCol\030\014 \001(\010\022\021\n\tfreeCount\030\r \001(\005\022\017\n\007freeAdd"
    "\030\016 \001(\005\022\023\n\013freeEndGold\030\017 \001(\003\022\031\n\rlotteryRe"
    "sult\030\020 \001(\005:\002-1\022\030\n\rlotteryReward\030\021 \001(\003:\0010"
    "\022\023\n\013lotteryIcon\030\022 \003(\005\022\022\n\nlotteryPos\030\023 \003("
    "\005\022\023\n\013playerCount\030\024 \001(\005\022\n\n\002ts\030\025 \001(\005\0223\n\tfr"
    "eeInfos\030\026 \003(\0132 .game_slothch_protocols.F"
    "reeInfo\022\r\n\005viplv\030\027 \001(\005\"{\n\025packetl2c_repl"
    "ay_list\022S\n\tpacket_id\030\001 \001(\0162).game_slothc"
    "h_protocols.e_server_msg_type:\025e_mst_c2l"
    "_replay_list\022\r\n\005rtype\030\002 \001(\005\"\303\001\n\034packetl2"
    "c_replay_list_result\022Z\n\tpacket_id\030\001 \001(\0162"
    ").game_slothch_protocols.e_server_msg_ty"
    "pe:\034e_mst_l2c_replay_list_result\022\r\n\005rtyp"
    "e\030\002 \001(\005\0228\n\013replay_list\030\003 \003(\0132#.game_slot"
    "hch_protocols.replay_info\"\214\001\n\027packetl2c_"
    "replay_detail\022U\n\tpacket_id\030\001 \001(\0162).game_"
    "slothch_protocols.e_server_msg_type:\027e_m"
    "st_c2l_replay_detail\022\r\n\005rtype\030\002 \001(\005\022\013\n\003r"
    "id\030\003 \001(\t\"\322\001\n\036packetl2c_replay_detail_res"
    "ult\022\\\n\tpacket_id\030\001 \001(\0162).game_slothch_pr"
    "otocols.e_server_msg_type:\036e_mst_l2c_rep"
    "lay_detail_result\022\016\n\006result\030\002 \001(\005\022\r\n\005rty"
    "pe\030\003 \001(\005\0223\n\006replay\030\004 \001(\0132#.game_slothch_"
    "protocols.replay_info\"Q\n\013room_player\022\021\n\t"
    "player_id\030\001 \001(\005\022\014\n\004gold\030\002 \001(\003\022\013\n\003bet\030\003 \001"
    "(\003\022\024\n\014profit_today\030\004 \001(\003\"v\n\032packetl2c_gm"
    "_get_room_info\022X\n\tpacket_id\030\001 \001(\0162).game"
    "_slothch_protocols.e_server_msg_type:\032e_"
    "mst_c2l_gm_get_room_info\"\335\001\n!packetl2c_g"
    "m_get_room_info_result\022_\n\tpacket_id\030\001 \001("
    "\0162).game_slothch_protocols.e_server_msg_"
    "type:!e_mst_l2c_gm_get_room_info_result\022"
    "\016\n\006result\030\002 \001(\005\022\021\n\tkillcount\030\003 \001(\005\0224\n\007pl"
    "ayers\030\004 \003(\0132#.game_slothch_protocols.roo"
    "m_player\"\230\001\n\024packetl2c_gm_do_kill\022R\n\tpac"
    "ket_id\030\001 \001(\0162).game_slothch_protocols.e_"
    "server_msg_type:\024e_mst_c2l_gm_do_kill\022\021\n"
    "\tkillcount\030\002 \001(\005\022\013\n\003pid\030\003 \001(\005\022\014\n\004free\030\004 "
    "\001(\005\"\210\001\n\033packetl2c_gm_do_kill_result\022Y\n\tp"
    "acket_id\030\001 \001(\0162).game_slothch_protocols."
    "e_server_msg_type:\033e_mst_l2c_gm_do_kill_"
    "result\022\016\n\006result\030\002 \001(\005", 6942);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_slothch_protocol.proto", &protobuf_RegisterTypes);
  packetc2l_check_state::default_instance_ = new packetc2l_check_state();
  packetc2l_check_state_result::default_instance_ = new packetc2l_check_state_result();
  packetc2l_enter_game::default_instance_ = new packetc2l_enter_game();
  packetc2l_enter_game_result::default_instance_ = new packetc2l_enter_game_result();
  packetc2l_leave_game::default_instance_ = new packetc2l_leave_game();
  packetc2l_leave_game_result::default_instance_ = new packetc2l_leave_game_result();
  packetc2l_star_game::default_instance_ = new packetc2l_star_game();
  IconInfo::default_instance_ = new IconInfo();
  FreeInfo::default_instance_ = new FreeInfo();
  packetc2l_star_game_result::default_instance_ = new packetc2l_star_game_result();
  packetc2l_req_game_lottery_count::default_instance_ = new packetc2l_req_game_lottery_count();
  packetl2c_req_game_lottery_count_result::default_instance_ = new packetl2c_req_game_lottery_count_result();
  packetc2l_req_game_lottery::default_instance_ = new packetc2l_req_game_lottery();
  packetl2c_req_game_lottery_result::default_instance_ = new packetl2c_req_game_lottery_result();
  msg_lottery_info::default_instance_ = new msg_lottery_info();
  packetl2c_lottery_update::default_instance_ = new packetl2c_lottery_update();
  packetc2l_get_room_info::default_instance_ = new packetc2l_get_room_info();
  msg_room_info::default_instance_ = new msg_room_info();
  packetl2c_get_room_info_result::default_instance_ = new packetl2c_get_room_info_result();
  packetl2c_enter_player_info::default_instance_ = new packetl2c_enter_player_info();
  packetl2c_leave_player_info::default_instance_ = new packetl2c_leave_player_info();
  packetl2c_player_change_money::default_instance_ = new packetl2c_player_change_money();
  packetl2c_bc_change_attr::default_instance_ = new packetl2c_bc_change_attr();
  packetc2l_supply_chip::default_instance_ = new packetc2l_supply_chip();
  packetl2c_supply_chip_result::default_instance_ = new packetl2c_supply_chip_result();
  packetc2l_get_room_scene_info::default_instance_ = new packetc2l_get_room_scene_info();
  packetl2c_get_room_scene_info_result::default_instance_ = new packetl2c_get_room_scene_info_result();
  packetl2c_scene_sync::default_instance_ = new packetl2c_scene_sync();
  packetc2l_settlement::default_instance_ = new packetc2l_settlement();
  packetl2c_settlement_result::default_instance_ = new packetl2c_settlement_result();
  replay_info::default_instance_ = new replay_info();
  packetl2c_replay_list::default_instance_ = new packetl2c_replay_list();
  packetl2c_replay_list_result::default_instance_ = new packetl2c_replay_list_result();
  packetl2c_replay_detail::default_instance_ = new packetl2c_replay_detail();
  packetl2c_replay_detail_result::default_instance_ = new packetl2c_replay_detail_result();
  room_player::default_instance_ = new room_player();
  packetl2c_gm_get_room_info::default_instance_ = new packetl2c_gm_get_room_info();
  packetl2c_gm_get_room_info_result::default_instance_ = new packetl2c_gm_get_room_info_result();
  packetl2c_gm_do_kill::default_instance_ = new packetl2c_gm_do_kill();
  packetl2c_gm_do_kill_result::default_instance_ = new packetl2c_gm_do_kill_result();
  packetc2l_check_state::default_instance_->InitAsDefaultInstance();
  packetc2l_check_state_result::default_instance_->InitAsDefaultInstance();
  packetc2l_enter_game::default_instance_->InitAsDefaultInstance();
  packetc2l_enter_game_result::default_instance_->InitAsDefaultInstance();
  packetc2l_leave_game::default_instance_->InitAsDefaultInstance();
  packetc2l_leave_game_result::default_instance_->InitAsDefaultInstance();
  packetc2l_star_game::default_instance_->InitAsDefaultInstance();
  IconInfo::default_instance_->InitAsDefaultInstance();
  FreeInfo::default_instance_->InitAsDefaultInstance();
  packetc2l_star_game_result::default_instance_->InitAsDefaultInstance();
  packetc2l_req_game_lottery_count::default_instance_->InitAsDefaultInstance();
  packetl2c_req_game_lottery_count_result::default_instance_->InitAsDefaultInstance();
  packetc2l_req_game_lottery::default_instance_->InitAsDefaultInstance();
  packetl2c_req_game_lottery_result::default_instance_->InitAsDefaultInstance();
  msg_lottery_info::default_instance_->InitAsDefaultInstance();
  packetl2c_lottery_update::default_instance_->InitAsDefaultInstance();
  packetc2l_get_room_info::default_instance_->InitAsDefaultInstance();
  msg_room_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_room_info_result::default_instance_->InitAsDefaultInstance();
  packetl2c_enter_player_info::default_instance_->InitAsDefaultInstance();
  packetl2c_leave_player_info::default_instance_->InitAsDefaultInstance();
  packetl2c_player_change_money::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_change_attr::default_instance_->InitAsDefaultInstance();
  packetc2l_supply_chip::default_instance_->InitAsDefaultInstance();
  packetl2c_supply_chip_result::default_instance_->InitAsDefaultInstance();
  packetc2l_get_room_scene_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_room_scene_info_result::default_instance_->InitAsDefaultInstance();
  packetl2c_scene_sync::default_instance_->InitAsDefaultInstance();
  packetc2l_settlement::default_instance_->InitAsDefaultInstance();
  packetl2c_settlement_result::default_instance_->InitAsDefaultInstance();
  replay_info::default_instance_->InitAsDefaultInstance();
  packetl2c_replay_list::default_instance_->InitAsDefaultInstance();
  packetl2c_replay_list_result::default_instance_->InitAsDefaultInstance();
  packetl2c_replay_detail::default_instance_->InitAsDefaultInstance();
  packetl2c_replay_detail_result::default_instance_->InitAsDefaultInstance();
  room_player::default_instance_->InitAsDefaultInstance();
  packetl2c_gm_get_room_info::default_instance_->InitAsDefaultInstance();
  packetl2c_gm_get_room_info_result::default_instance_->InitAsDefaultInstance();
  packetl2c_gm_do_kill::default_instance_->InitAsDefaultInstance();
  packetl2c_gm_do_kill_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fslothch_5fprotocol_2eproto {
  StaticDescriptorInitializer_game_5fslothch_5fprotocol_2eproto() {
    protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  }
} static_descriptor_initializer_game_5fslothch_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2l_check_state::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_check_state::packetc2l_check_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_check_state::InitAsDefaultInstance() {
}

packetc2l_check_state::packetc2l_check_state(const packetc2l_check_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_check_state::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10001;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_check_state::~packetc2l_check_state() {
  SharedDtor();
}

void packetc2l_check_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_check_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_check_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_check_state_descriptor_;
}

const packetc2l_check_state& packetc2l_check_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_check_state* packetc2l_check_state::default_instance_ = NULL;

packetc2l_check_state* packetc2l_check_state::New() const {
  return new packetc2l_check_state;
}

void packetc2l_check_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10001;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_check_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_check_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_check_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_check_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_check_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_check_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_check_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_check_state::MergeFrom(const packetc2l_check_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_check_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_check_state::CopyFrom(const packetc2l_check_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_check_state::IsInitialized() const {

  return true;
}

void packetc2l_check_state::Swap(packetc2l_check_state* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_check_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_check_state_descriptor_;
  metadata.reflection = packetc2l_check_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_check_state_result::kPacketIdFieldNumber;
const int packetc2l_check_state_result::kRoomIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_check_state_result::packetc2l_check_state_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_check_state_result::InitAsDefaultInstance() {
}

packetc2l_check_state_result::packetc2l_check_state_result(const packetc2l_check_state_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_check_state_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15001;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_check_state_result::~packetc2l_check_state_result() {
  SharedDtor();
}

void packetc2l_check_state_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_check_state_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_check_state_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_check_state_result_descriptor_;
}

const packetc2l_check_state_result& packetc2l_check_state_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_check_state_result* packetc2l_check_state_result::default_instance_ = NULL;

packetc2l_check_state_result* packetc2l_check_state_result::New() const {
  return new packetc2l_check_state_result;
}

void packetc2l_check_state_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15001;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_check_state_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_check_state_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_check_state_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_check_state_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_check_state_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_check_state_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_check_state_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_check_state_result::MergeFrom(const packetc2l_check_state_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_check_state_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_check_state_result::CopyFrom(const packetc2l_check_state_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_check_state_result::IsInitialized() const {

  return true;
}

void packetc2l_check_state_result::Swap(packetc2l_check_state_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_check_state_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_check_state_result_descriptor_;
  metadata.reflection = packetc2l_check_state_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_enter_game::kPacketIdFieldNumber;
const int packetc2l_enter_game::kRoomIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_enter_game::packetc2l_enter_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_enter_game::InitAsDefaultInstance() {
}

packetc2l_enter_game::packetc2l_enter_game(const packetc2l_enter_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_enter_game::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10002;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_enter_game::~packetc2l_enter_game() {
  SharedDtor();
}

void packetc2l_enter_game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_enter_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_enter_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_enter_game_descriptor_;
}

const packetc2l_enter_game& packetc2l_enter_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_enter_game* packetc2l_enter_game::default_instance_ = NULL;

packetc2l_enter_game* packetc2l_enter_game::New() const {
  return new packetc2l_enter_game;
}

void packetc2l_enter_game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10002;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_enter_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_game];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_enter_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_game];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_enter_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_game];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_enter_game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_game];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_enter_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_enter_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_enter_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_enter_game::MergeFrom(const packetc2l_enter_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_enter_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_enter_game::CopyFrom(const packetc2l_enter_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_enter_game::IsInitialized() const {

  return true;
}

void packetc2l_enter_game::Swap(packetc2l_enter_game* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_enter_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_enter_game_descriptor_;
  metadata.reflection = packetc2l_enter_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_enter_game_result::kPacketIdFieldNumber;
const int packetc2l_enter_game_result::kResultFieldNumber;
const int packetc2l_enter_game_result::kRoomIdFieldNumber;
const int packetc2l_enter_game_result::kPlayerListFieldNumber;
const int packetc2l_enter_game_result::kFreeCountFieldNumber;
const int packetc2l_enter_game_result::kInfosFieldNumber;
const int packetc2l_enter_game_result::kLastNameFieldNumber;
const int packetc2l_enter_game_result::kGoldFieldNumber;
#endif  // !_MSC_VER

packetc2l_enter_game_result::packetc2l_enter_game_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_enter_game_result::InitAsDefaultInstance() {
}

packetc2l_enter_game_result::packetc2l_enter_game_result(const packetc2l_enter_game_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_enter_game_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15002;
  result_ = 0;
  room_id_ = 0;
  free_count_ = 0;
  last_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_enter_game_result::~packetc2l_enter_game_result() {
  SharedDtor();
}

void packetc2l_enter_game_result::SharedDtor() {
  if (last_name_ != &::google::protobuf::internal::kEmptyString) {
    delete last_name_;
  }
  if (this != default_instance_) {
  }
}

void packetc2l_enter_game_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_enter_game_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_enter_game_result_descriptor_;
}

const packetc2l_enter_game_result& packetc2l_enter_game_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_enter_game_result* packetc2l_enter_game_result::default_instance_ = NULL;

packetc2l_enter_game_result* packetc2l_enter_game_result::New() const {
  return new packetc2l_enter_game_result;
}

void packetc2l_enter_game_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15002;
    result_ = 0;
    room_id_ = 0;
    free_count_ = 0;
    if (has_last_name()) {
      if (last_name_ != &::google::protobuf::internal::kEmptyString) {
        last_name_->clear();
      }
    }
    gold_ = GOOGLE_LONGLONG(0);
  }
  player_list_.Clear();
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_enter_game_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_game_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_list;
        break;
      }

      // repeated .game_slothch_protocols.msg_player_info player_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_list;
        if (input->ExpectTag(40)) goto parse_free_count;
        break;
      }

      // optional int32 free_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_count_)));
          set_has_free_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_infos;
        break;
      }

      // repeated .game_slothch_protocols.msg_lottery_info infos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_infos;
        if (input->ExpectTag(58)) goto parse_last_name;
        break;
      }

      // optional string last_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->last_name().data(), this->last_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gold;
        break;
      }

      // optional int64 gold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_enter_game_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_game_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  // repeated .game_slothch_protocols.msg_player_info player_list = 4;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_list(i), output);
  }

  // optional int32 free_count = 5;
  if (has_free_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->free_count(), output);
  }

  // repeated .game_slothch_protocols.msg_lottery_info infos = 6;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->infos(i), output);
  }

  // optional string last_name = 7;
  if (has_last_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_name().data(), this->last_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->last_name(), output);
  }

  // optional int64 gold = 8;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_enter_game_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_game_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  // repeated .game_slothch_protocols.msg_player_info player_list = 4;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player_list(i), target);
  }

  // optional int32 free_count = 5;
  if (has_free_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->free_count(), target);
  }

  // repeated .game_slothch_protocols.msg_lottery_info infos = 6;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->infos(i), target);
  }

  // optional string last_name = 7;
  if (has_last_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_name().data(), this->last_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->last_name(), target);
  }

  // optional int64 gold = 8;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_enter_game_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_game_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int32 free_count = 5;
    if (has_free_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free_count());
    }

    // optional string last_name = 7;
    if (has_last_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_name());
    }

    // optional int64 gold = 8;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

  }
  // repeated .game_slothch_protocols.msg_player_info player_list = 4;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  // repeated .game_slothch_protocols.msg_lottery_info infos = 6;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_enter_game_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_enter_game_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_enter_game_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_enter_game_result::MergeFrom(const packetc2l_enter_game_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_free_count()) {
      set_free_count(from.free_count());
    }
    if (from.has_last_name()) {
      set_last_name(from.last_name());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_enter_game_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_enter_game_result::CopyFrom(const packetc2l_enter_game_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_enter_game_result::IsInitialized() const {

  return true;
}

void packetc2l_enter_game_result::Swap(packetc2l_enter_game_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(room_id_, other->room_id_);
    player_list_.Swap(&other->player_list_);
    std::swap(free_count_, other->free_count_);
    infos_.Swap(&other->infos_);
    std::swap(last_name_, other->last_name_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_enter_game_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_enter_game_result_descriptor_;
  metadata.reflection = packetc2l_enter_game_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_leave_game::kPacketIdFieldNumber;
const int packetc2l_leave_game::kRoomIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_leave_game::packetc2l_leave_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_leave_game::InitAsDefaultInstance() {
}

packetc2l_leave_game::packetc2l_leave_game(const packetc2l_leave_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_leave_game::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10003;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_leave_game::~packetc2l_leave_game() {
  SharedDtor();
}

void packetc2l_leave_game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_leave_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_leave_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_leave_game_descriptor_;
}

const packetc2l_leave_game& packetc2l_leave_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_leave_game* packetc2l_leave_game::default_instance_ = NULL;

packetc2l_leave_game* packetc2l_leave_game::New() const {
  return new packetc2l_leave_game;
}

void packetc2l_leave_game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10003;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_leave_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_game];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_leave_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_game];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_leave_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_game];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_leave_game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_game];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_leave_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_leave_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_leave_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_leave_game::MergeFrom(const packetc2l_leave_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_leave_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_leave_game::CopyFrom(const packetc2l_leave_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_leave_game::IsInitialized() const {

  return true;
}

void packetc2l_leave_game::Swap(packetc2l_leave_game* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_leave_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_leave_game_descriptor_;
  metadata.reflection = packetc2l_leave_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_leave_game_result::kPacketIdFieldNumber;
const int packetc2l_leave_game_result::kResultFieldNumber;
const int packetc2l_leave_game_result::kGoldFieldNumber;
#endif  // !_MSC_VER

packetc2l_leave_game_result::packetc2l_leave_game_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_leave_game_result::InitAsDefaultInstance() {
}

packetc2l_leave_game_result::packetc2l_leave_game_result(const packetc2l_leave_game_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_leave_game_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15003;
  result_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_leave_game_result::~packetc2l_leave_game_result() {
  SharedDtor();
}

void packetc2l_leave_game_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_leave_game_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_leave_game_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_leave_game_result_descriptor_;
}

const packetc2l_leave_game_result& packetc2l_leave_game_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_leave_game_result* packetc2l_leave_game_result::default_instance_ = NULL;

packetc2l_leave_game_result* packetc2l_leave_game_result::New() const {
  return new packetc2l_leave_game_result;
}

void packetc2l_leave_game_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15003;
    result_ = 0;
    gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_leave_game_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_game_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // optional int64 gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_leave_game_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_game_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int64 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_leave_game_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_game_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int64 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_leave_game_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_game_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_leave_game_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_leave_game_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_leave_game_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_leave_game_result::MergeFrom(const packetc2l_leave_game_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_leave_game_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_leave_game_result::CopyFrom(const packetc2l_leave_game_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_leave_game_result::IsInitialized() const {

  return true;
}

void packetc2l_leave_game_result::Swap(packetc2l_leave_game_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_leave_game_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_leave_game_result_descriptor_;
  metadata.reflection = packetc2l_leave_game_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_star_game::kPacketIdFieldNumber;
const int packetc2l_star_game::kRateIndexFieldNumber;
#endif  // !_MSC_VER

packetc2l_star_game::packetc2l_star_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_star_game::InitAsDefaultInstance() {
}

packetc2l_star_game::packetc2l_star_game(const packetc2l_star_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_star_game::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10004;
  rateindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_star_game::~packetc2l_star_game() {
  SharedDtor();
}

void packetc2l_star_game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_star_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_star_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_star_game_descriptor_;
}

const packetc2l_star_game& packetc2l_star_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_star_game* packetc2l_star_game::default_instance_ = NULL;

packetc2l_star_game* packetc2l_star_game::New() const {
  return new packetc2l_star_game;
}

void packetc2l_star_game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10004;
    rateindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_star_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_star_game];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rateIndex;
        break;
      }

      // optional int32 rateIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rateIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rateindex_)));
          set_has_rateindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_star_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_star_game];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 rateIndex = 2;
  if (has_rateindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rateindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_star_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_star_game];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 rateIndex = 2;
  if (has_rateindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rateindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_star_game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_star_game];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 rateIndex = 2;
    if (has_rateindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rateindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_star_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_star_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_star_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_star_game::MergeFrom(const packetc2l_star_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_rateindex()) {
      set_rateindex(from.rateindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_star_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_star_game::CopyFrom(const packetc2l_star_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_star_game::IsInitialized() const {

  return true;
}

void packetc2l_star_game::Swap(packetc2l_star_game* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(rateindex_, other->rateindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_star_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_star_game_descriptor_;
  metadata.reflection = packetc2l_star_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IconInfo::kIconIdFieldNumber;
const int IconInfo::kLenFieldNumber;
const int IconInfo::kRateFieldNumber;
const int IconInfo::kIconposFieldNumber;
#endif  // !_MSC_VER

IconInfo::IconInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IconInfo::InitAsDefaultInstance() {
}

IconInfo::IconInfo(const IconInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IconInfo::SharedCtor() {
  _cached_size_ = 0;
  iconid_ = 0;
  len_ = 0;
  rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IconInfo::~IconInfo() {
  SharedDtor();
}

void IconInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IconInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IconInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IconInfo_descriptor_;
}

const IconInfo& IconInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

IconInfo* IconInfo::default_instance_ = NULL;

IconInfo* IconInfo::New() const {
  return new IconInfo;
}

void IconInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iconid_ = 0;
    len_ = 0;
    rate_ = 0;
  }
  iconpos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IconInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iconId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iconid_)));
          set_has_iconid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_len;
        break;
      }

      // optional int32 len = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rate;
        break;
      }

      // optional int32 rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iconpos;
        break;
      }

      // repeated int32 iconpos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iconpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_iconpos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_iconpos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iconpos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IconInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iconId = 1;
  if (has_iconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iconid(), output);
  }

  // optional int32 len = 2;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->len(), output);
  }

  // optional int32 rate = 3;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rate(), output);
  }

  // repeated int32 iconpos = 4;
  for (int i = 0; i < this->iconpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->iconpos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IconInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iconId = 1;
  if (has_iconid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iconid(), target);
  }

  // optional int32 len = 2;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->len(), target);
  }

  // optional int32 rate = 3;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rate(), target);
  }

  // repeated int32 iconpos = 4;
  for (int i = 0; i < this->iconpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->iconpos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IconInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iconId = 1;
    if (has_iconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iconid());
    }

    // optional int32 len = 2;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }

    // optional int32 rate = 3;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

  }
  // repeated int32 iconpos = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->iconpos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->iconpos(i));
    }
    total_size += 1 * this->iconpos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IconInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IconInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IconInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IconInfo::MergeFrom(const IconInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  iconpos_.MergeFrom(from.iconpos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iconid()) {
      set_iconid(from.iconid());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IconInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IconInfo::CopyFrom(const IconInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IconInfo::IsInitialized() const {

  return true;
}

void IconInfo::Swap(IconInfo* other) {
  if (other != this) {
    std::swap(iconid_, other->iconid_);
    std::swap(len_, other->len_);
    std::swap(rate_, other->rate_);
    iconpos_.Swap(&other->iconpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IconInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IconInfo_descriptor_;
  metadata.reflection = IconInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FreeInfo::kImageArrFieldNumber;
const int FreeInfo::kWinMoneyFieldNumber;
const int FreeInfo::kIconsFieldNumber;
const int FreeInfo::kFreeColFieldNumber;
const int FreeInfo::kFreeAddFieldNumber;
const int FreeInfo::kFreeEndGoldFieldNumber;
#endif  // !_MSC_VER

FreeInfo::FreeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FreeInfo::InitAsDefaultInstance() {
}

FreeInfo::FreeInfo(const FreeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FreeInfo::SharedCtor() {
  _cached_size_ = 0;
  imagearr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  winmoney_ = 0;
  freecol_ = false;
  freeadd_ = 0;
  freeendgold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FreeInfo::~FreeInfo() {
  SharedDtor();
}

void FreeInfo::SharedDtor() {
  if (imagearr_ != &::google::protobuf::internal::kEmptyString) {
    delete imagearr_;
  }
  if (this != default_instance_) {
  }
}

void FreeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreeInfo_descriptor_;
}

const FreeInfo& FreeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

FreeInfo* FreeInfo::default_instance_ = NULL;

FreeInfo* FreeInfo::New() const {
  return new FreeInfo;
}

void FreeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_imagearr()) {
      if (imagearr_ != &::google::protobuf::internal::kEmptyString) {
        imagearr_->clear();
      }
    }
    winmoney_ = 0;
    freecol_ = false;
    freeadd_ = 0;
    freeendgold_ = GOOGLE_LONGLONG(0);
  }
  icons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FreeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string imageArr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagearr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imagearr().data(), this->imagearr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winMoney;
        break;
      }

      // optional int32 winMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winmoney_)));
          set_has_winmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_icons;
        break;
      }

      // repeated .game_slothch_protocols.IconInfo icons = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_icons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_icons;
        if (input->ExpectTag(32)) goto parse_freeCol;
        break;
      }

      // optional bool freeCol = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeCol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &freecol_)));
          set_has_freecol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_freeAdd;
        break;
      }

      // optional int32 freeAdd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freeadd_)));
          set_has_freeadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_freeEndGold;
        break;
      }

      // optional int64 freeEndGold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeEndGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &freeendgold_)));
          set_has_freeendgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FreeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string imageArr = 1;
  if (has_imagearr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imagearr().data(), this->imagearr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->imagearr(), output);
  }

  // optional int32 winMoney = 2;
  if (has_winmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winmoney(), output);
  }

  // repeated .game_slothch_protocols.IconInfo icons = 3;
  for (int i = 0; i < this->icons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->icons(i), output);
  }

  // optional bool freeCol = 4;
  if (has_freecol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->freecol(), output);
  }

  // optional int32 freeAdd = 5;
  if (has_freeadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->freeadd(), output);
  }

  // optional int64 freeEndGold = 6;
  if (has_freeendgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->freeendgold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FreeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string imageArr = 1;
  if (has_imagearr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imagearr().data(), this->imagearr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->imagearr(), target);
  }

  // optional int32 winMoney = 2;
  if (has_winmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winmoney(), target);
  }

  // repeated .game_slothch_protocols.IconInfo icons = 3;
  for (int i = 0; i < this->icons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->icons(i), target);
  }

  // optional bool freeCol = 4;
  if (has_freecol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->freecol(), target);
  }

  // optional int32 freeAdd = 5;
  if (has_freeadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->freeadd(), target);
  }

  // optional int64 freeEndGold = 6;
  if (has_freeendgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->freeendgold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FreeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string imageArr = 1;
    if (has_imagearr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imagearr());
    }

    // optional int32 winMoney = 2;
    if (has_winmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winmoney());
    }

    // optional bool freeCol = 4;
    if (has_freecol()) {
      total_size += 1 + 1;
    }

    // optional int32 freeAdd = 5;
    if (has_freeadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freeadd());
    }

    // optional int64 freeEndGold = 6;
    if (has_freeendgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->freeendgold());
    }

  }
  // repeated .game_slothch_protocols.IconInfo icons = 3;
  total_size += 1 * this->icons_size();
  for (int i = 0; i < this->icons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->icons(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FreeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FreeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FreeInfo::MergeFrom(const FreeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  icons_.MergeFrom(from.icons_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imagearr()) {
      set_imagearr(from.imagearr());
    }
    if (from.has_winmoney()) {
      set_winmoney(from.winmoney());
    }
    if (from.has_freecol()) {
      set_freecol(from.freecol());
    }
    if (from.has_freeadd()) {
      set_freeadd(from.freeadd());
    }
    if (from.has_freeendgold()) {
      set_freeendgold(from.freeendgold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FreeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreeInfo::CopyFrom(const FreeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreeInfo::IsInitialized() const {

  return true;
}

void FreeInfo::Swap(FreeInfo* other) {
  if (other != this) {
    std::swap(imagearr_, other->imagearr_);
    std::swap(winmoney_, other->winmoney_);
    icons_.Swap(&other->icons_);
    std::swap(freecol_, other->freecol_);
    std::swap(freeadd_, other->freeadd_);
    std::swap(freeendgold_, other->freeendgold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FreeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FreeInfo_descriptor_;
  metadata.reflection = FreeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_star_game_result::kPacketIdFieldNumber;
const int packetc2l_star_game_result::kMoneyTypeFieldNumber;
const int packetc2l_star_game_result::kImageArrFieldNumber;
const int packetc2l_star_game_result::kWinMoneyFieldNumber;
const int packetc2l_star_game_result::kDeductMoneyFieldNumber;
const int packetc2l_star_game_result::kResultFieldNumber;
const int packetc2l_star_game_result::kCurMoneyFieldNumber;
const int packetc2l_star_game_result::kIconsFieldNumber;
const int packetc2l_star_game_result::kFreeColFieldNumber;
const int packetc2l_star_game_result::kFreeAddFieldNumber;
const int packetc2l_star_game_result::kLotteryFieldNumber;
const int packetc2l_star_game_result::kFreeEndGoldFieldNumber;
const int packetc2l_star_game_result::kFreeInfosFieldNumber;
#endif  // !_MSC_VER

packetc2l_star_game_result::packetc2l_star_game_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_star_game_result::InitAsDefaultInstance() {
}

packetc2l_star_game_result::packetc2l_star_game_result(const packetc2l_star_game_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_star_game_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15004;
  moneytype_ = 0;
  imagearr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  winmoney_ = 0;
  deductmoney_ = 0;
  result_ = 0;
  curmoney_ = 0;
  freecol_ = false;
  freeadd_ = 0;
  lottery_ = false;
  freeendgold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_star_game_result::~packetc2l_star_game_result() {
  SharedDtor();
}

void packetc2l_star_game_result::SharedDtor() {
  if (imagearr_ != &::google::protobuf::internal::kEmptyString) {
    delete imagearr_;
  }
  if (this != default_instance_) {
  }
}

void packetc2l_star_game_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_star_game_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_star_game_result_descriptor_;
}

const packetc2l_star_game_result& packetc2l_star_game_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_star_game_result* packetc2l_star_game_result::default_instance_ = NULL;

packetc2l_star_game_result* packetc2l_star_game_result::New() const {
  return new packetc2l_star_game_result;
}

void packetc2l_star_game_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15004;
    moneytype_ = 0;
    if (has_imagearr()) {
      if (imagearr_ != &::google::protobuf::internal::kEmptyString) {
        imagearr_->clear();
      }
    }
    winmoney_ = 0;
    deductmoney_ = 0;
    result_ = 0;
    curmoney_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    freecol_ = false;
    freeadd_ = 0;
    lottery_ = false;
    freeendgold_ = GOOGLE_LONGLONG(0);
  }
  icons_.Clear();
  freeinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_star_game_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_star_game_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moneyType;
        break;
      }

      // optional int32 moneyType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_imageArr;
        break;
      }

      // optional string imageArr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagearr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imagearr().data(), this->imagearr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_winMoney;
        break;
      }

      // optional int32 winMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winmoney_)));
          set_has_winmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_deductMoney;
        break;
      }

      // optional int32 deductMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deductMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deductmoney_)));
          set_has_deductmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_result;
        break;
      }

      // optional int32 result = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_curMoney;
        break;
      }

      // optional int32 curMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curmoney_)));
          set_has_curmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_icons;
        break;
      }

      // repeated .game_slothch_protocols.IconInfo icons = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_icons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_icons;
        if (input->ExpectTag(72)) goto parse_freeCol;
        break;
      }

      // optional bool freeCol = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeCol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &freecol_)));
          set_has_freecol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_freeAdd;
        break;
      }

      // optional int32 freeAdd = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freeadd_)));
          set_has_freeadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lottery;
        break;
      }

      // optional bool lottery = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lottery:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lottery_)));
          set_has_lottery();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_freeEndGold;
        break;
      }

      // optional int64 freeEndGold = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeEndGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &freeendgold_)));
          set_has_freeendgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_freeInfos;
        break;
      }

      // repeated .game_slothch_protocols.FreeInfo freeInfos = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_freeInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_freeinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_freeInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_star_game_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_star_game_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 moneyType = 2;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->moneytype(), output);
  }

  // optional string imageArr = 3;
  if (has_imagearr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imagearr().data(), this->imagearr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->imagearr(), output);
  }

  // optional int32 winMoney = 4;
  if (has_winmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->winmoney(), output);
  }

  // optional int32 deductMoney = 5;
  if (has_deductmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->deductmoney(), output);
  }

  // optional int32 result = 6;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->result(), output);
  }

  // optional int32 curMoney = 7;
  if (has_curmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->curmoney(), output);
  }

  // repeated .game_slothch_protocols.IconInfo icons = 8;
  for (int i = 0; i < this->icons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->icons(i), output);
  }

  // optional bool freeCol = 9;
  if (has_freecol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->freecol(), output);
  }

  // optional int32 freeAdd = 10;
  if (has_freeadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->freeadd(), output);
  }

  // optional bool lottery = 11;
  if (has_lottery()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->lottery(), output);
  }

  // optional int64 freeEndGold = 12;
  if (has_freeendgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->freeendgold(), output);
  }

  // repeated .game_slothch_protocols.FreeInfo freeInfos = 13;
  for (int i = 0; i < this->freeinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->freeinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_star_game_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_star_game_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 moneyType = 2;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->moneytype(), target);
  }

  // optional string imageArr = 3;
  if (has_imagearr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imagearr().data(), this->imagearr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->imagearr(), target);
  }

  // optional int32 winMoney = 4;
  if (has_winmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->winmoney(), target);
  }

  // optional int32 deductMoney = 5;
  if (has_deductmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->deductmoney(), target);
  }

  // optional int32 result = 6;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->result(), target);
  }

  // optional int32 curMoney = 7;
  if (has_curmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->curmoney(), target);
  }

  // repeated .game_slothch_protocols.IconInfo icons = 8;
  for (int i = 0; i < this->icons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->icons(i), target);
  }

  // optional bool freeCol = 9;
  if (has_freecol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->freecol(), target);
  }

  // optional int32 freeAdd = 10;
  if (has_freeadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->freeadd(), target);
  }

  // optional bool lottery = 11;
  if (has_lottery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->lottery(), target);
  }

  // optional int64 freeEndGold = 12;
  if (has_freeendgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->freeendgold(), target);
  }

  // repeated .game_slothch_protocols.FreeInfo freeInfos = 13;
  for (int i = 0; i < this->freeinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->freeinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_star_game_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_star_game_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 moneyType = 2;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moneytype());
    }

    // optional string imageArr = 3;
    if (has_imagearr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imagearr());
    }

    // optional int32 winMoney = 4;
    if (has_winmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winmoney());
    }

    // optional int32 deductMoney = 5;
    if (has_deductmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deductmoney());
    }

    // optional int32 result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 curMoney = 7;
    if (has_curmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curmoney());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool freeCol = 9;
    if (has_freecol()) {
      total_size += 1 + 1;
    }

    // optional int32 freeAdd = 10;
    if (has_freeadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freeadd());
    }

    // optional bool lottery = 11;
    if (has_lottery()) {
      total_size += 1 + 1;
    }

    // optional int64 freeEndGold = 12;
    if (has_freeendgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->freeendgold());
    }

  }
  // repeated .game_slothch_protocols.IconInfo icons = 8;
  total_size += 1 * this->icons_size();
  for (int i = 0; i < this->icons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->icons(i));
  }

  // repeated .game_slothch_protocols.FreeInfo freeInfos = 13;
  total_size += 1 * this->freeinfos_size();
  for (int i = 0; i < this->freeinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->freeinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_star_game_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_star_game_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_star_game_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_star_game_result::MergeFrom(const packetc2l_star_game_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  icons_.MergeFrom(from.icons_);
  freeinfos_.MergeFrom(from.freeinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
    if (from.has_imagearr()) {
      set_imagearr(from.imagearr());
    }
    if (from.has_winmoney()) {
      set_winmoney(from.winmoney());
    }
    if (from.has_deductmoney()) {
      set_deductmoney(from.deductmoney());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_curmoney()) {
      set_curmoney(from.curmoney());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_freecol()) {
      set_freecol(from.freecol());
    }
    if (from.has_freeadd()) {
      set_freeadd(from.freeadd());
    }
    if (from.has_lottery()) {
      set_lottery(from.lottery());
    }
    if (from.has_freeendgold()) {
      set_freeendgold(from.freeendgold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_star_game_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_star_game_result::CopyFrom(const packetc2l_star_game_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_star_game_result::IsInitialized() const {

  return true;
}

void packetc2l_star_game_result::Swap(packetc2l_star_game_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(imagearr_, other->imagearr_);
    std::swap(winmoney_, other->winmoney_);
    std::swap(deductmoney_, other->deductmoney_);
    std::swap(result_, other->result_);
    std::swap(curmoney_, other->curmoney_);
    icons_.Swap(&other->icons_);
    std::swap(freecol_, other->freecol_);
    std::swap(freeadd_, other->freeadd_);
    std::swap(lottery_, other->lottery_);
    std::swap(freeendgold_, other->freeendgold_);
    freeinfos_.Swap(&other->freeinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_star_game_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_star_game_result_descriptor_;
  metadata.reflection = packetc2l_star_game_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_req_game_lottery_count::kPacketIdFieldNumber;
const int packetc2l_req_game_lottery_count::kPosFieldNumber;
#endif  // !_MSC_VER

packetc2l_req_game_lottery_count::packetc2l_req_game_lottery_count()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_req_game_lottery_count::InitAsDefaultInstance() {
}

packetc2l_req_game_lottery_count::packetc2l_req_game_lottery_count(const packetc2l_req_game_lottery_count& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_req_game_lottery_count::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10009;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_req_game_lottery_count::~packetc2l_req_game_lottery_count() {
  SharedDtor();
}

void packetc2l_req_game_lottery_count::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_req_game_lottery_count::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_req_game_lottery_count::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_req_game_lottery_count_descriptor_;
}

const packetc2l_req_game_lottery_count& packetc2l_req_game_lottery_count::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_req_game_lottery_count* packetc2l_req_game_lottery_count::default_instance_ = NULL;

packetc2l_req_game_lottery_count* packetc2l_req_game_lottery_count::New() const {
  return new packetc2l_req_game_lottery_count;
}

void packetc2l_req_game_lottery_count::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10009;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_req_game_lottery_count::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_game_lottery_count];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_req_game_lottery_count::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_game_lottery_count];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_req_game_lottery_count::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_game_lottery_count];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_req_game_lottery_count::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_game_lottery_count];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_req_game_lottery_count::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_req_game_lottery_count* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_req_game_lottery_count*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_req_game_lottery_count::MergeFrom(const packetc2l_req_game_lottery_count& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_req_game_lottery_count::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_req_game_lottery_count::CopyFrom(const packetc2l_req_game_lottery_count& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_req_game_lottery_count::IsInitialized() const {

  return true;
}

void packetc2l_req_game_lottery_count::Swap(packetc2l_req_game_lottery_count* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_req_game_lottery_count::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_req_game_lottery_count_descriptor_;
  metadata.reflection = packetc2l_req_game_lottery_count_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_req_game_lottery_count_result::kPacketIdFieldNumber;
const int packetl2c_req_game_lottery_count_result::kResultFieldNumber;
const int packetl2c_req_game_lottery_count_result::kPosFieldNumber;
const int packetl2c_req_game_lottery_count_result::kIconFieldNumber;
const int packetl2c_req_game_lottery_count_result::kCountFieldNumber;
#endif  // !_MSC_VER

packetl2c_req_game_lottery_count_result::packetl2c_req_game_lottery_count_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_req_game_lottery_count_result::InitAsDefaultInstance() {
}

packetl2c_req_game_lottery_count_result::packetl2c_req_game_lottery_count_result(const packetl2c_req_game_lottery_count_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_req_game_lottery_count_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15013;
  result_ = 2;
  pos_ = 0;
  icon_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_req_game_lottery_count_result::~packetl2c_req_game_lottery_count_result() {
  SharedDtor();
}

void packetl2c_req_game_lottery_count_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_req_game_lottery_count_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_req_game_lottery_count_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_req_game_lottery_count_result_descriptor_;
}

const packetl2c_req_game_lottery_count_result& packetl2c_req_game_lottery_count_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_req_game_lottery_count_result* packetl2c_req_game_lottery_count_result::default_instance_ = NULL;

packetl2c_req_game_lottery_count_result* packetl2c_req_game_lottery_count_result::New() const {
  return new packetl2c_req_game_lottery_count_result;
}

void packetl2c_req_game_lottery_count_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15013;
    result_ = 2;
    pos_ = 0;
    icon_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_req_game_lottery_count_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_game_lottery_count_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional int32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_icon;
        break;
      }

      // optional int32 icon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_)));
          set_has_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional int32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_req_game_lottery_count_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_game_lottery_count_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }

  // optional int32 icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->icon(), output);
  }

  // optional int32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_req_game_lottery_count_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_game_lottery_count_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }

  // optional int32 icon = 4;
  if (has_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->icon(), target);
  }

  // optional int32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_req_game_lottery_count_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_game_lottery_count_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional int32 icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon());
    }

    // optional int32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_req_game_lottery_count_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_req_game_lottery_count_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_req_game_lottery_count_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_req_game_lottery_count_result::MergeFrom(const packetl2c_req_game_lottery_count_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_req_game_lottery_count_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_req_game_lottery_count_result::CopyFrom(const packetl2c_req_game_lottery_count_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_req_game_lottery_count_result::IsInitialized() const {

  return true;
}

void packetl2c_req_game_lottery_count_result::Swap(packetl2c_req_game_lottery_count_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(pos_, other->pos_);
    std::swap(icon_, other->icon_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_req_game_lottery_count_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_req_game_lottery_count_result_descriptor_;
  metadata.reflection = packetl2c_req_game_lottery_count_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_req_game_lottery::kPacketIdFieldNumber;
const int packetc2l_req_game_lottery::kPosFieldNumber;
#endif  // !_MSC_VER

packetc2l_req_game_lottery::packetc2l_req_game_lottery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_req_game_lottery::InitAsDefaultInstance() {
}

packetc2l_req_game_lottery::packetc2l_req_game_lottery(const packetc2l_req_game_lottery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_req_game_lottery::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10008;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_req_game_lottery::~packetc2l_req_game_lottery() {
  SharedDtor();
}

void packetc2l_req_game_lottery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_req_game_lottery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_req_game_lottery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_req_game_lottery_descriptor_;
}

const packetc2l_req_game_lottery& packetc2l_req_game_lottery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_req_game_lottery* packetc2l_req_game_lottery::default_instance_ = NULL;

packetc2l_req_game_lottery* packetc2l_req_game_lottery::New() const {
  return new packetc2l_req_game_lottery;
}

void packetc2l_req_game_lottery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10008;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_req_game_lottery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_game_lottery];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_req_game_lottery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_game_lottery];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_req_game_lottery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_game_lottery];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_req_game_lottery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_game_lottery];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_req_game_lottery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_req_game_lottery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_req_game_lottery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_req_game_lottery::MergeFrom(const packetc2l_req_game_lottery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_req_game_lottery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_req_game_lottery::CopyFrom(const packetc2l_req_game_lottery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_req_game_lottery::IsInitialized() const {

  return true;
}

void packetc2l_req_game_lottery::Swap(packetc2l_req_game_lottery* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_req_game_lottery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_req_game_lottery_descriptor_;
  metadata.reflection = packetc2l_req_game_lottery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_req_game_lottery_result::kPacketIdFieldNumber;
const int packetl2c_req_game_lottery_result::kResultFieldNumber;
const int packetl2c_req_game_lottery_result::kPosFieldNumber;
const int packetl2c_req_game_lottery_result::kIconFieldNumber;
const int packetl2c_req_game_lottery_result::kRewardFieldNumber;
#endif  // !_MSC_VER

packetl2c_req_game_lottery_result::packetl2c_req_game_lottery_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_req_game_lottery_result::InitAsDefaultInstance() {
}

packetl2c_req_game_lottery_result::packetl2c_req_game_lottery_result(const packetl2c_req_game_lottery_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_req_game_lottery_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15012;
  result_ = 2;
  pos_ = 0;
  icon_ = 0;
  reward_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_req_game_lottery_result::~packetl2c_req_game_lottery_result() {
  SharedDtor();
}

void packetl2c_req_game_lottery_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_req_game_lottery_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_req_game_lottery_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_req_game_lottery_result_descriptor_;
}

const packetl2c_req_game_lottery_result& packetl2c_req_game_lottery_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_req_game_lottery_result* packetl2c_req_game_lottery_result::default_instance_ = NULL;

packetl2c_req_game_lottery_result* packetl2c_req_game_lottery_result::New() const {
  return new packetl2c_req_game_lottery_result;
}

void packetl2c_req_game_lottery_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15012;
    result_ = 2;
    pos_ = 0;
    icon_ = 0;
    reward_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_req_game_lottery_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_game_lottery_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional int32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_icon;
        break;
      }

      // optional int32 icon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_)));
          set_has_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reward;
        break;
      }

      // optional int64 reward = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_req_game_lottery_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_game_lottery_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }

  // optional int32 icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->icon(), output);
  }

  // optional int64 reward = 5 [default = 0];
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_req_game_lottery_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_game_lottery_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }

  // optional int32 icon = 4;
  if (has_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->icon(), target);
  }

  // optional int64 reward = 5 [default = 0];
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_req_game_lottery_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_game_lottery_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional int32 icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon());
    }

    // optional int64 reward = 5 [default = 0];
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_req_game_lottery_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_req_game_lottery_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_req_game_lottery_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_req_game_lottery_result::MergeFrom(const packetl2c_req_game_lottery_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_req_game_lottery_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_req_game_lottery_result::CopyFrom(const packetl2c_req_game_lottery_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_req_game_lottery_result::IsInitialized() const {

  return true;
}

void packetl2c_req_game_lottery_result::Swap(packetl2c_req_game_lottery_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(pos_, other->pos_);
    std::swap(icon_, other->icon_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_req_game_lottery_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_req_game_lottery_result_descriptor_;
  metadata.reflection = packetl2c_req_game_lottery_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_lottery_info::kIndexFieldNumber;
const int msg_lottery_info::kGoldFieldNumber;
#endif  // !_MSC_VER

msg_lottery_info::msg_lottery_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_lottery_info::InitAsDefaultInstance() {
}

msg_lottery_info::msg_lottery_info(const msg_lottery_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_lottery_info::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_lottery_info::~msg_lottery_info() {
  SharedDtor();
}

void msg_lottery_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_lottery_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_lottery_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_lottery_info_descriptor_;
}

const msg_lottery_info& msg_lottery_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

msg_lottery_info* msg_lottery_info::default_instance_ = NULL;

msg_lottery_info* msg_lottery_info::New() const {
  return new msg_lottery_info;
}

void msg_lottery_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    gold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_lottery_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional int32 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_lottery_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_lottery_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_lottery_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_lottery_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_lottery_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_lottery_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_lottery_info::MergeFrom(const msg_lottery_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_lottery_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_lottery_info::CopyFrom(const msg_lottery_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_lottery_info::IsInitialized() const {

  return true;
}

void msg_lottery_info::Swap(msg_lottery_info* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_lottery_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_lottery_info_descriptor_;
  metadata.reflection = msg_lottery_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_lottery_update::kPacketIdFieldNumber;
const int packetl2c_lottery_update::kInfosFieldNumber;
#endif  // !_MSC_VER

packetl2c_lottery_update::packetl2c_lottery_update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_lottery_update::InitAsDefaultInstance() {
}

packetl2c_lottery_update::packetl2c_lottery_update(const packetl2c_lottery_update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_lottery_update::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15026;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_lottery_update::~packetl2c_lottery_update() {
  SharedDtor();
}

void packetl2c_lottery_update::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_lottery_update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_lottery_update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_lottery_update_descriptor_;
}

const packetl2c_lottery_update& packetl2c_lottery_update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_lottery_update* packetl2c_lottery_update::default_instance_ = NULL;

packetl2c_lottery_update* packetl2c_lottery_update::New() const {
  return new packetl2c_lottery_update;
}

void packetl2c_lottery_update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15026;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_lottery_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_lottery_update];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .game_slothch_protocols.msg_lottery_info infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_lottery_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_lottery_update];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_slothch_protocols.msg_lottery_info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_lottery_update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_lottery_update];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_slothch_protocols.msg_lottery_info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_lottery_update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_lottery_update];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_slothch_protocols.msg_lottery_info infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_lottery_update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_lottery_update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_lottery_update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_lottery_update::MergeFrom(const packetl2c_lottery_update& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_lottery_update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_lottery_update::CopyFrom(const packetl2c_lottery_update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_lottery_update::IsInitialized() const {

  return true;
}

void packetl2c_lottery_update::Swap(packetl2c_lottery_update* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_lottery_update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_lottery_update_descriptor_;
  metadata.reflection = packetl2c_lottery_update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_room_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_room_info::packetc2l_get_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_room_info::InitAsDefaultInstance() {
}

packetc2l_get_room_info::packetc2l_get_room_info(const packetc2l_get_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_room_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10007;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_room_info::~packetc2l_get_room_info() {
  SharedDtor();
}

void packetc2l_get_room_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_room_info_descriptor_;
}

const packetc2l_get_room_info& packetc2l_get_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_room_info* packetc2l_get_room_info::default_instance_ = NULL;

packetc2l_get_room_info* packetc2l_get_room_info::New() const {
  return new packetc2l_get_room_info;
}

void packetc2l_get_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10007;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_room_info::MergeFrom(const packetc2l_get_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_room_info::CopyFrom(const packetc2l_get_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_room_info::IsInitialized() const {

  return true;
}

void packetc2l_get_room_info::Swap(packetc2l_get_room_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_room_info_descriptor_;
  metadata.reflection = packetc2l_get_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_room_info::kRoomidFieldNumber;
#endif  // !_MSC_VER

msg_room_info::msg_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_room_info::InitAsDefaultInstance() {
}

msg_room_info::msg_room_info(const msg_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_room_info::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_room_info::~msg_room_info() {
  SharedDtor();
}

void msg_room_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_room_info_descriptor_;
}

const msg_room_info& msg_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

msg_room_info* msg_room_info::default_instance_ = NULL;

msg_room_info* msg_room_info::New() const {
  return new msg_room_info;
}

void msg_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_room_info::MergeFrom(const msg_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_room_info::CopyFrom(const msg_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_room_info::IsInitialized() const {

  return true;
}

void msg_room_info::Swap(msg_room_info* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_room_info_descriptor_;
  metadata.reflection = msg_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_room_info_result::kPacketIdFieldNumber;
const int packetl2c_get_room_info_result::kRoomsFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_room_info_result::packetl2c_get_room_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_get_room_info_result::InitAsDefaultInstance() {
}

packetl2c_get_room_info_result::packetl2c_get_room_info_result(const packetl2c_get_room_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_get_room_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15007;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_room_info_result::~packetl2c_get_room_info_result() {
  SharedDtor();
}

void packetl2c_get_room_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_get_room_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_room_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_room_info_result_descriptor_;
}

const packetl2c_get_room_info_result& packetl2c_get_room_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_get_room_info_result* packetl2c_get_room_info_result::default_instance_ = NULL;

packetl2c_get_room_info_result* packetl2c_get_room_info_result::New() const {
  return new packetl2c_get_room_info_result;
}

void packetl2c_get_room_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15007;
  }
  rooms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_room_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rooms;
        break;
      }

      // repeated .game_slothch_protocols.msg_room_info rooms = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rooms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rooms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rooms;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_get_room_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_slothch_protocols.msg_room_info rooms = 2;
  for (int i = 0; i < this->rooms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rooms(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_get_room_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_slothch_protocols.msg_room_info rooms = 2;
  for (int i = 0; i < this->rooms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rooms(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_get_room_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_slothch_protocols.msg_room_info rooms = 2;
  total_size += 1 * this->rooms_size();
  for (int i = 0; i < this->rooms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rooms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_room_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_room_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_room_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_room_info_result::MergeFrom(const packetl2c_get_room_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  rooms_.MergeFrom(from.rooms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_room_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_room_info_result::CopyFrom(const packetl2c_get_room_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_room_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_room_info_result::Swap(packetl2c_get_room_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    rooms_.Swap(&other->rooms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_room_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_room_info_result_descriptor_;
  metadata.reflection = packetl2c_get_room_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_enter_player_info::kPacketIdFieldNumber;
const int packetl2c_enter_player_info::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_enter_player_info::packetl2c_enter_player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_enter_player_info::InitAsDefaultInstance() {
  player_info_ = const_cast< ::game_slothch_protocols::msg_player_info*>(&::game_slothch_protocols::msg_player_info::default_instance());
}

packetl2c_enter_player_info::packetl2c_enter_player_info(const packetl2c_enter_player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_enter_player_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15008;
  player_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_enter_player_info::~packetl2c_enter_player_info() {
  SharedDtor();
}

void packetl2c_enter_player_info::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
  }
}

void packetl2c_enter_player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_enter_player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_enter_player_info_descriptor_;
}

const packetl2c_enter_player_info& packetl2c_enter_player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_enter_player_info* packetl2c_enter_player_info::default_instance_ = NULL;

packetl2c_enter_player_info* packetl2c_enter_player_info::New() const {
  return new packetl2c_enter_player_info;
}

void packetl2c_enter_player_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15008;
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::game_slothch_protocols::msg_player_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_enter_player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_player_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_info;
        break;
      }

      // optional .game_slothch_protocols.msg_player_info player_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_enter_player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_player_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_slothch_protocols.msg_player_info player_info = 2;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_enter_player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_player_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_slothch_protocols.msg_player_info player_info = 2;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_enter_player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_player_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_slothch_protocols.msg_player_info player_info = 2;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_enter_player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_enter_player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_enter_player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_enter_player_info::MergeFrom(const packetl2c_enter_player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_info()) {
      mutable_player_info()->::game_slothch_protocols::msg_player_info::MergeFrom(from.player_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_enter_player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_enter_player_info::CopyFrom(const packetl2c_enter_player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_enter_player_info::IsInitialized() const {

  return true;
}

void packetl2c_enter_player_info::Swap(packetl2c_enter_player_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_info_, other->player_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_enter_player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_enter_player_info_descriptor_;
  metadata.reflection = packetl2c_enter_player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_leave_player_info::kPacketIdFieldNumber;
const int packetl2c_leave_player_info::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_leave_player_info::packetl2c_leave_player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_leave_player_info::InitAsDefaultInstance() {
}

packetl2c_leave_player_info::packetl2c_leave_player_info(const packetl2c_leave_player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_leave_player_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15009;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_leave_player_info::~packetl2c_leave_player_info() {
  SharedDtor();
}

void packetl2c_leave_player_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_leave_player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_leave_player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_leave_player_info_descriptor_;
}

const packetl2c_leave_player_info& packetl2c_leave_player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_leave_player_info* packetl2c_leave_player_info::default_instance_ = NULL;

packetl2c_leave_player_info* packetl2c_leave_player_info::New() const {
  return new packetl2c_leave_player_info;
}

void packetl2c_leave_player_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15009;
    player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_leave_player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_player_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_leave_player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_player_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_leave_player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_player_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_leave_player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_player_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_leave_player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_leave_player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_leave_player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_leave_player_info::MergeFrom(const packetl2c_leave_player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_leave_player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_leave_player_info::CopyFrom(const packetl2c_leave_player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_leave_player_info::IsInitialized() const {

  return true;
}

void packetl2c_leave_player_info::Swap(packetl2c_leave_player_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_leave_player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_leave_player_info_descriptor_;
  metadata.reflection = packetl2c_leave_player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_player_change_money::kPacketIdFieldNumber;
const int packetl2c_player_change_money::kPlayerIdFieldNumber;
const int packetl2c_player_change_money::kCurMoneyFieldNumber;
const int packetl2c_player_change_money::kChangeMoneyFieldNumber;
const int packetl2c_player_change_money::kBFreeFieldNumber;
const int packetl2c_player_change_money::kBLotteryFieldNumber;
#endif  // !_MSC_VER

packetl2c_player_change_money::packetl2c_player_change_money()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_player_change_money::InitAsDefaultInstance() {
}

packetl2c_player_change_money::packetl2c_player_change_money(const packetl2c_player_change_money& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_player_change_money::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15010;
  player_id_ = 0;
  cur_money_ = GOOGLE_LONGLONG(0);
  change_money_ = GOOGLE_LONGLONG(0);
  b_free_ = false;
  b_lottery_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_player_change_money::~packetl2c_player_change_money() {
  SharedDtor();
}

void packetl2c_player_change_money::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_player_change_money::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_player_change_money::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_player_change_money_descriptor_;
}

const packetl2c_player_change_money& packetl2c_player_change_money::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_player_change_money* packetl2c_player_change_money::default_instance_ = NULL;

packetl2c_player_change_money* packetl2c_player_change_money::New() const {
  return new packetl2c_player_change_money;
}

void packetl2c_player_change_money::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15010;
    player_id_ = 0;
    cur_money_ = GOOGLE_LONGLONG(0);
    change_money_ = GOOGLE_LONGLONG(0);
    b_free_ = false;
    b_lottery_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_player_change_money::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_change_money];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_money;
        break;
      }

      // optional int64 cur_money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_money_)));
          set_has_cur_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_change_money;
        break;
      }

      // optional int64 change_money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &change_money_)));
          set_has_change_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_b_free;
        break;
      }

      // optional bool b_free = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_free_)));
          set_has_b_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_b_lottery;
        break;
      }

      // optional bool b_lottery = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b_lottery:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_lottery_)));
          set_has_b_lottery();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_player_change_money::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_change_money];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int64 cur_money = 3;
  if (has_cur_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cur_money(), output);
  }

  // optional int64 change_money = 4;
  if (has_change_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->change_money(), output);
  }

  // optional bool b_free = 5;
  if (has_b_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->b_free(), output);
  }

  // optional bool b_lottery = 6;
  if (has_b_lottery()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->b_lottery(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_player_change_money::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_change_money];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int64 cur_money = 3;
  if (has_cur_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->cur_money(), target);
  }

  // optional int64 change_money = 4;
  if (has_change_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->change_money(), target);
  }

  // optional bool b_free = 5;
  if (has_b_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->b_free(), target);
  }

  // optional bool b_lottery = 6;
  if (has_b_lottery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->b_lottery(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_player_change_money::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_change_money];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int64 cur_money = 3;
    if (has_cur_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_money());
    }

    // optional int64 change_money = 4;
    if (has_change_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->change_money());
    }

    // optional bool b_free = 5;
    if (has_b_free()) {
      total_size += 1 + 1;
    }

    // optional bool b_lottery = 6;
    if (has_b_lottery()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_player_change_money::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_player_change_money* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_player_change_money*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_player_change_money::MergeFrom(const packetl2c_player_change_money& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_cur_money()) {
      set_cur_money(from.cur_money());
    }
    if (from.has_change_money()) {
      set_change_money(from.change_money());
    }
    if (from.has_b_free()) {
      set_b_free(from.b_free());
    }
    if (from.has_b_lottery()) {
      set_b_lottery(from.b_lottery());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_player_change_money::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_player_change_money::CopyFrom(const packetl2c_player_change_money& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_player_change_money::IsInitialized() const {

  return true;
}

void packetl2c_player_change_money::Swap(packetl2c_player_change_money* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(cur_money_, other->cur_money_);
    std::swap(change_money_, other->change_money_);
    std::swap(b_free_, other->b_free_);
    std::swap(b_lottery_, other->b_lottery_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_player_change_money::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_player_change_money_descriptor_;
  metadata.reflection = packetl2c_player_change_money_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_change_attr::kPacketIdFieldNumber;
const int packetl2c_bc_change_attr::kPlayerIdFieldNumber;
const int packetl2c_bc_change_attr::kItemTypeFieldNumber;
const int packetl2c_bc_change_attr::kChangeValueFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_change_attr::packetl2c_bc_change_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_change_attr::InitAsDefaultInstance() {
}

packetl2c_bc_change_attr::packetl2c_bc_change_attr(const packetl2c_bc_change_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_change_attr::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15011;
  player_id_ = 0;
  item_type_ = 0;
  change_value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_change_attr::~packetl2c_bc_change_attr() {
  SharedDtor();
}

void packetl2c_bc_change_attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_change_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_change_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_change_attr_descriptor_;
}

const packetl2c_bc_change_attr& packetl2c_bc_change_attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_change_attr* packetl2c_bc_change_attr::default_instance_ = NULL;

packetl2c_bc_change_attr* packetl2c_bc_change_attr::New() const {
  return new packetl2c_bc_change_attr;
}

void packetl2c_bc_change_attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15011;
    player_id_ = 0;
    item_type_ = 0;
    change_value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_change_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_type;
        break;
      }

      // optional int32 item_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_type_)));
          set_has_item_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_change_value;
        break;
      }

      // optional int64 change_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &change_value_)));
          set_has_change_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_change_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 item_type = 3;
  if (has_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_type(), output);
  }

  // optional int64 change_value = 4;
  if (has_change_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->change_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_change_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 item_type = 3;
  if (has_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_type(), target);
  }

  // optional int64 change_value = 4;
  if (has_change_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->change_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_change_attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 item_type = 3;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_type());
    }

    // optional int64 change_value = 4;
    if (has_change_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->change_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_change_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_change_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_change_attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_change_attr::MergeFrom(const packetl2c_bc_change_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_item_type()) {
      set_item_type(from.item_type());
    }
    if (from.has_change_value()) {
      set_change_value(from.change_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_change_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_change_attr::CopyFrom(const packetl2c_bc_change_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_change_attr::IsInitialized() const {

  return true;
}

void packetl2c_bc_change_attr::Swap(packetl2c_bc_change_attr* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(item_type_, other->item_type_);
    std::swap(change_value_, other->change_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_change_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_change_attr_descriptor_;
  metadata.reflection = packetl2c_bc_change_attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_supply_chip::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_supply_chip::packetc2l_supply_chip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_supply_chip::InitAsDefaultInstance() {
}

packetc2l_supply_chip::packetc2l_supply_chip(const packetc2l_supply_chip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_supply_chip::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10021;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_supply_chip::~packetc2l_supply_chip() {
  SharedDtor();
}

void packetc2l_supply_chip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_supply_chip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_supply_chip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_supply_chip_descriptor_;
}

const packetc2l_supply_chip& packetc2l_supply_chip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_supply_chip* packetc2l_supply_chip::default_instance_ = NULL;

packetc2l_supply_chip* packetc2l_supply_chip::New() const {
  return new packetc2l_supply_chip;
}

void packetc2l_supply_chip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10021;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_supply_chip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_supply_chip];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_supply_chip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_supply_chip];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_supply_chip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_supply_chip];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_supply_chip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_supply_chip];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_supply_chip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_supply_chip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_supply_chip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_supply_chip::MergeFrom(const packetc2l_supply_chip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_supply_chip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_supply_chip::CopyFrom(const packetc2l_supply_chip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_supply_chip::IsInitialized() const {

  return true;
}

void packetc2l_supply_chip::Swap(packetc2l_supply_chip* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_supply_chip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_supply_chip_descriptor_;
  metadata.reflection = packetc2l_supply_chip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_supply_chip_result::kPacketIdFieldNumber;
const int packetl2c_supply_chip_result::kResultFieldNumber;
const int packetl2c_supply_chip_result::kGoldFieldNumber;
#endif  // !_MSC_VER

packetl2c_supply_chip_result::packetl2c_supply_chip_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_supply_chip_result::InitAsDefaultInstance() {
}

packetl2c_supply_chip_result::packetl2c_supply_chip_result(const packetl2c_supply_chip_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_supply_chip_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15021;
  result_ = 2;
  gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_supply_chip_result::~packetl2c_supply_chip_result() {
  SharedDtor();
}

void packetl2c_supply_chip_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_supply_chip_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_supply_chip_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_supply_chip_result_descriptor_;
}

const packetl2c_supply_chip_result& packetl2c_supply_chip_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_supply_chip_result* packetl2c_supply_chip_result::default_instance_ = NULL;

packetl2c_supply_chip_result* packetl2c_supply_chip_result::New() const {
  return new packetl2c_supply_chip_result;
}

void packetl2c_supply_chip_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15021;
    result_ = 2;
    gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_supply_chip_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_supply_chip_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // optional int64 gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_supply_chip_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_supply_chip_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int64 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_supply_chip_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_supply_chip_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int64 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_supply_chip_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_supply_chip_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int64 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_supply_chip_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_supply_chip_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_supply_chip_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_supply_chip_result::MergeFrom(const packetl2c_supply_chip_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_supply_chip_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_supply_chip_result::CopyFrom(const packetl2c_supply_chip_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_supply_chip_result::IsInitialized() const {

  return true;
}

void packetl2c_supply_chip_result::Swap(packetl2c_supply_chip_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_supply_chip_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_supply_chip_result_descriptor_;
  metadata.reflection = packetl2c_supply_chip_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_room_scene_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_room_scene_info::packetc2l_get_room_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_room_scene_info::InitAsDefaultInstance() {
}

packetc2l_get_room_scene_info::packetc2l_get_room_scene_info(const packetc2l_get_room_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_room_scene_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10022;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_room_scene_info::~packetc2l_get_room_scene_info() {
  SharedDtor();
}

void packetc2l_get_room_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_room_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_room_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_room_scene_info_descriptor_;
}

const packetc2l_get_room_scene_info& packetc2l_get_room_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_room_scene_info* packetc2l_get_room_scene_info::default_instance_ = NULL;

packetc2l_get_room_scene_info* packetc2l_get_room_scene_info::New() const {
  return new packetc2l_get_room_scene_info;
}

void packetc2l_get_room_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10022;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_room_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_room_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_room_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_room_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_room_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_room_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_room_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_room_scene_info::MergeFrom(const packetc2l_get_room_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_room_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_room_scene_info::CopyFrom(const packetc2l_get_room_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_room_scene_info::IsInitialized() const {

  return true;
}

void packetc2l_get_room_scene_info::Swap(packetc2l_get_room_scene_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_room_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_room_scene_info_descriptor_;
  metadata.reflection = packetc2l_get_room_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_room_scene_info_result::kPacketIdFieldNumber;
const int packetl2c_get_room_scene_info_result::kRoomIdFieldNumber;
const int packetl2c_get_room_scene_info_result::kPlayerListFieldNumber;
const int packetl2c_get_room_scene_info_result::kFreeCountFieldNumber;
const int packetl2c_get_room_scene_info_result::kInfosFieldNumber;
const int packetl2c_get_room_scene_info_result::kLastNameFieldNumber;
const int packetl2c_get_room_scene_info_result::kGoldFieldNumber;
const int packetl2c_get_room_scene_info_result::kFreeEndGoldFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_room_scene_info_result::packetl2c_get_room_scene_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_get_room_scene_info_result::InitAsDefaultInstance() {
}

packetl2c_get_room_scene_info_result::packetl2c_get_room_scene_info_result(const packetl2c_get_room_scene_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_get_room_scene_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15022;
  room_id_ = 0;
  free_count_ = 0;
  last_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gold_ = GOOGLE_LONGLONG(0);
  freeendgold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_room_scene_info_result::~packetl2c_get_room_scene_info_result() {
  SharedDtor();
}

void packetl2c_get_room_scene_info_result::SharedDtor() {
  if (last_name_ != &::google::protobuf::internal::kEmptyString) {
    delete last_name_;
  }
  if (this != default_instance_) {
  }
}

void packetl2c_get_room_scene_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_room_scene_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_room_scene_info_result_descriptor_;
}

const packetl2c_get_room_scene_info_result& packetl2c_get_room_scene_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_get_room_scene_info_result* packetl2c_get_room_scene_info_result::default_instance_ = NULL;

packetl2c_get_room_scene_info_result* packetl2c_get_room_scene_info_result::New() const {
  return new packetl2c_get_room_scene_info_result;
}

void packetl2c_get_room_scene_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15022;
    room_id_ = 0;
    free_count_ = 0;
    if (has_last_name()) {
      if (last_name_ != &::google::protobuf::internal::kEmptyString) {
        last_name_->clear();
      }
    }
    gold_ = GOOGLE_LONGLONG(0);
    freeendgold_ = GOOGLE_LONGLONG(0);
  }
  player_list_.Clear();
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_room_scene_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        break;
      }

      // repeated .game_slothch_protocols.msg_player_info player_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        if (input->ExpectTag(32)) goto parse_free_count;
        break;
      }

      // optional int32 free_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_count_)));
          set_has_free_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_infos;
        break;
      }

      // repeated .game_slothch_protocols.msg_lottery_info infos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_infos;
        if (input->ExpectTag(50)) goto parse_last_name;
        break;
      }

      // optional string last_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->last_name().data(), this->last_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gold;
        break;
      }

      // optional int64 gold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_freeEndGold;
        break;
      }

      // optional int64 freeEndGold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeEndGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &freeendgold_)));
          set_has_freeendgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_get_room_scene_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  // repeated .game_slothch_protocols.msg_player_info player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_list(i), output);
  }

  // optional int32 free_count = 4;
  if (has_free_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->free_count(), output);
  }

  // repeated .game_slothch_protocols.msg_lottery_info infos = 5;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->infos(i), output);
  }

  // optional string last_name = 6;
  if (has_last_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_name().data(), this->last_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->last_name(), output);
  }

  // optional int64 gold = 7;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->gold(), output);
  }

  // optional int64 freeEndGold = 8;
  if (has_freeendgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->freeendgold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_get_room_scene_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  // repeated .game_slothch_protocols.msg_player_info player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_list(i), target);
  }

  // optional int32 free_count = 4;
  if (has_free_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->free_count(), target);
  }

  // repeated .game_slothch_protocols.msg_lottery_info infos = 5;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->infos(i), target);
  }

  // optional string last_name = 6;
  if (has_last_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_name().data(), this->last_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->last_name(), target);
  }

  // optional int64 gold = 7;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->gold(), target);
  }

  // optional int64 freeEndGold = 8;
  if (has_freeendgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->freeendgold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_get_room_scene_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int32 free_count = 4;
    if (has_free_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free_count());
    }

    // optional string last_name = 6;
    if (has_last_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_name());
    }

    // optional int64 gold = 7;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int64 freeEndGold = 8;
    if (has_freeendgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->freeendgold());
    }

  }
  // repeated .game_slothch_protocols.msg_player_info player_list = 3;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  // repeated .game_slothch_protocols.msg_lottery_info infos = 5;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_room_scene_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_room_scene_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_room_scene_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_room_scene_info_result::MergeFrom(const packetl2c_get_room_scene_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_free_count()) {
      set_free_count(from.free_count());
    }
    if (from.has_last_name()) {
      set_last_name(from.last_name());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_freeendgold()) {
      set_freeendgold(from.freeendgold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_room_scene_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_room_scene_info_result::CopyFrom(const packetl2c_get_room_scene_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_room_scene_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_room_scene_info_result::Swap(packetl2c_get_room_scene_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_id_, other->room_id_);
    player_list_.Swap(&other->player_list_);
    std::swap(free_count_, other->free_count_);
    infos_.Swap(&other->infos_);
    std::swap(last_name_, other->last_name_);
    std::swap(gold_, other->gold_);
    std::swap(freeendgold_, other->freeendgold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_room_scene_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_room_scene_info_result_descriptor_;
  metadata.reflection = packetl2c_get_room_scene_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_scene_sync::kPacketIdFieldNumber;
const int packetl2c_scene_sync::kLastNameFieldNumber;
#endif  // !_MSC_VER

packetl2c_scene_sync::packetl2c_scene_sync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_scene_sync::InitAsDefaultInstance() {
}

packetl2c_scene_sync::packetl2c_scene_sync(const packetl2c_scene_sync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_scene_sync::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15027;
  last_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_scene_sync::~packetl2c_scene_sync() {
  SharedDtor();
}

void packetl2c_scene_sync::SharedDtor() {
  if (last_name_ != &::google::protobuf::internal::kEmptyString) {
    delete last_name_;
  }
  if (this != default_instance_) {
  }
}

void packetl2c_scene_sync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_scene_sync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_scene_sync_descriptor_;
}

const packetl2c_scene_sync& packetl2c_scene_sync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_scene_sync* packetl2c_scene_sync::default_instance_ = NULL;

packetl2c_scene_sync* packetl2c_scene_sync::New() const {
  return new packetl2c_scene_sync;
}

void packetl2c_scene_sync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15027;
    if (has_last_name()) {
      if (last_name_ != &::google::protobuf::internal::kEmptyString) {
        last_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_scene_sync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_sync];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_last_name;
        break;
      }

      // optional string last_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->last_name().data(), this->last_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_scene_sync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_sync];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string last_name = 2;
  if (has_last_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_name().data(), this->last_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->last_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_scene_sync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_sync];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string last_name = 2;
  if (has_last_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_name().data(), this->last_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->last_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_scene_sync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_sync];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string last_name = 2;
    if (has_last_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_scene_sync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_scene_sync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_scene_sync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_scene_sync::MergeFrom(const packetl2c_scene_sync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_last_name()) {
      set_last_name(from.last_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_scene_sync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_scene_sync::CopyFrom(const packetl2c_scene_sync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_scene_sync::IsInitialized() const {

  return true;
}

void packetl2c_scene_sync::Swap(packetl2c_scene_sync* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(last_name_, other->last_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_scene_sync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_scene_sync_descriptor_;
  metadata.reflection = packetl2c_scene_sync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_settlement::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_settlement::packetc2l_settlement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_settlement::InitAsDefaultInstance() {
}

packetc2l_settlement::packetc2l_settlement(const packetc2l_settlement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_settlement::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10023;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_settlement::~packetc2l_settlement() {
  SharedDtor();
}

void packetc2l_settlement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_settlement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_settlement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_settlement_descriptor_;
}

const packetc2l_settlement& packetc2l_settlement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_settlement* packetc2l_settlement::default_instance_ = NULL;

packetc2l_settlement* packetc2l_settlement::New() const {
  return new packetc2l_settlement;
}

void packetc2l_settlement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10023;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_settlement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_settlement];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_settlement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_settlement];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_settlement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_settlement];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_settlement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_settlement];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_settlement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_settlement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_settlement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_settlement::MergeFrom(const packetc2l_settlement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_settlement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_settlement::CopyFrom(const packetc2l_settlement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_settlement::IsInitialized() const {

  return true;
}

void packetc2l_settlement::Swap(packetc2l_settlement* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_settlement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_settlement_descriptor_;
  metadata.reflection = packetc2l_settlement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_settlement_result::kPacketIdFieldNumber;
const int packetl2c_settlement_result::kResultFieldNumber;
const int packetl2c_settlement_result::kGoldFieldNumber;
#endif  // !_MSC_VER

packetl2c_settlement_result::packetl2c_settlement_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_settlement_result::InitAsDefaultInstance() {
}

packetl2c_settlement_result::packetl2c_settlement_result(const packetl2c_settlement_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_settlement_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15023;
  result_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_settlement_result::~packetl2c_settlement_result() {
  SharedDtor();
}

void packetl2c_settlement_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_settlement_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_settlement_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_settlement_result_descriptor_;
}

const packetl2c_settlement_result& packetl2c_settlement_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_settlement_result* packetl2c_settlement_result::default_instance_ = NULL;

packetl2c_settlement_result* packetl2c_settlement_result::New() const {
  return new packetl2c_settlement_result;
}

void packetl2c_settlement_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15023;
    result_ = 0;
    gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_settlement_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_settlement_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // optional int64 gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_settlement_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_settlement_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int64 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_settlement_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_settlement_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int64 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_settlement_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_settlement_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_settlement_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_settlement_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_settlement_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_settlement_result::MergeFrom(const packetl2c_settlement_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_settlement_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_settlement_result::CopyFrom(const packetl2c_settlement_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_settlement_result::IsInitialized() const {

  return true;
}

void packetl2c_settlement_result::Swap(packetl2c_settlement_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_settlement_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_settlement_result_descriptor_;
  metadata.reflection = packetl2c_settlement_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int replay_info::kRidFieldNumber;
const int replay_info::kPidFieldNumber;
const int replay_info::kNickFieldNumber;
const int replay_info::kFrameFieldNumber;
const int replay_info::kWinMoneyFieldNumber;
const int replay_info::kDeductMoneyFieldNumber;
const int replay_info::kCurMoneyFieldNumber;
const int replay_info::kWinFieldNumber;
const int replay_info::kRateFieldNumber;
const int replay_info::kImageArrFieldNumber;
const int replay_info::kIconsFieldNumber;
const int replay_info::kFreeColFieldNumber;
const int replay_info::kFreeCountFieldNumber;
const int replay_info::kFreeAddFieldNumber;
const int replay_info::kFreeEndGoldFieldNumber;
const int replay_info::kLotteryResultFieldNumber;
const int replay_info::kLotteryRewardFieldNumber;
const int replay_info::kLotteryIconFieldNumber;
const int replay_info::kLotteryPosFieldNumber;
const int replay_info::kPlayerCountFieldNumber;
const int replay_info::kTsFieldNumber;
const int replay_info::kFreeInfosFieldNumber;
const int replay_info::kViplvFieldNumber;
#endif  // !_MSC_VER

replay_info::replay_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void replay_info::InitAsDefaultInstance() {
}

replay_info::replay_info(const replay_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void replay_info::SharedCtor() {
  _cached_size_ = 0;
  rid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pid_ = 0;
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frame_ = 0;
  winmoney_ = GOOGLE_LONGLONG(0);
  deductmoney_ = GOOGLE_LONGLONG(0);
  curmoney_ = GOOGLE_LONGLONG(0);
  win_ = GOOGLE_LONGLONG(0);
  rate_ = GOOGLE_LONGLONG(0);
  imagearr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  freecol_ = false;
  freecount_ = 0;
  freeadd_ = 0;
  freeendgold_ = GOOGLE_LONGLONG(0);
  lotteryresult_ = -1;
  lotteryreward_ = GOOGLE_LONGLONG(0);
  playercount_ = 0;
  ts_ = 0;
  viplv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

replay_info::~replay_info() {
  SharedDtor();
}

void replay_info::SharedDtor() {
  if (rid_ != &::google::protobuf::internal::kEmptyString) {
    delete rid_;
  }
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (imagearr_ != &::google::protobuf::internal::kEmptyString) {
    delete imagearr_;
  }
  if (this != default_instance_) {
  }
}

void replay_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* replay_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return replay_info_descriptor_;
}

const replay_info& replay_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

replay_info* replay_info::default_instance_ = NULL;

replay_info* replay_info::New() const {
  return new replay_info;
}

void replay_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rid()) {
      if (rid_ != &::google::protobuf::internal::kEmptyString) {
        rid_->clear();
      }
    }
    pid_ = 0;
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
    frame_ = 0;
    winmoney_ = GOOGLE_LONGLONG(0);
    deductmoney_ = GOOGLE_LONGLONG(0);
    curmoney_ = GOOGLE_LONGLONG(0);
    win_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rate_ = GOOGLE_LONGLONG(0);
    if (has_imagearr()) {
      if (imagearr_ != &::google::protobuf::internal::kEmptyString) {
        imagearr_->clear();
      }
    }
    freecol_ = false;
    freecount_ = 0;
    freeadd_ = 0;
    freeendgold_ = GOOGLE_LONGLONG(0);
    lotteryresult_ = -1;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    lotteryreward_ = GOOGLE_LONGLONG(0);
    playercount_ = 0;
    ts_ = 0;
    viplv_ = 0;
  }
  icons_.Clear();
  lotteryicon_.Clear();
  lotterypos_.Clear();
  freeinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool replay_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string rid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rid().data(), this->rid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // optional int32 pid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nick;
        break;
      }

      // optional string nick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_frame;
        break;
      }

      // optional int32 frame = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_)));
          set_has_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_winMoney;
        break;
      }

      // optional int64 winMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winmoney_)));
          set_has_winmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_deductMoney;
        break;
      }

      // optional int64 deductMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deductMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deductmoney_)));
          set_has_deductmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_curMoney;
        break;
      }

      // optional int64 curMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curmoney_)));
          set_has_curmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_win;
        break;
      }

      // optional int64 win = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rate;
        break;
      }

      // optional int64 rate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_imageArr;
        break;
      }

      // optional string imageArr = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagearr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imagearr().data(), this->imagearr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_icons;
        break;
      }

      // repeated .game_slothch_protocols.IconInfo icons = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_icons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_icons;
        if (input->ExpectTag(96)) goto parse_freeCol;
        break;
      }

      // optional bool freeCol = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeCol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &freecol_)));
          set_has_freecol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_freeCount;
        break;
      }

      // optional int32 freeCount = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freecount_)));
          set_has_freecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_freeAdd;
        break;
      }

      // optional int32 freeAdd = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freeadd_)));
          set_has_freeadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_freeEndGold;
        break;
      }

      // optional int64 freeEndGold = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeEndGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &freeendgold_)));
          set_has_freeendgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_lotteryResult;
        break;
      }

      // optional int32 lotteryResult = 16 [default = -1];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lotteryResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lotteryresult_)));
          set_has_lotteryresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_lotteryReward;
        break;
      }

      // optional int64 lotteryReward = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lotteryReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lotteryreward_)));
          set_has_lotteryreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_lotteryIcon;
        break;
      }

      // repeated int32 lotteryIcon = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lotteryIcon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144, input, this->mutable_lotteryicon())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lotteryicon())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_lotteryIcon;
        if (input->ExpectTag(152)) goto parse_lotteryPos;
        break;
      }

      // repeated int32 lotteryPos = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lotteryPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_lotterypos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lotterypos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_lotteryPos;
        if (input->ExpectTag(160)) goto parse_playerCount;
        break;
      }

      // optional int32 playerCount = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playercount_)));
          set_has_playercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_ts;
        break;
      }

      // optional int32 ts = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_freeInfos;
        break;
      }

      // repeated .game_slothch_protocols.FreeInfo freeInfos = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_freeInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_freeinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_freeInfos;
        if (input->ExpectTag(184)) goto parse_viplv;
        break;
      }

      // optional int32 viplv = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void replay_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string rid = 1;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rid(), output);
  }

  // optional int32 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pid(), output);
  }

  // optional string nick = 3;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nick(), output);
  }

  // optional int32 frame = 4;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->frame(), output);
  }

  // optional int64 winMoney = 5;
  if (has_winmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->winmoney(), output);
  }

  // optional int64 deductMoney = 6;
  if (has_deductmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->deductmoney(), output);
  }

  // optional int64 curMoney = 7;
  if (has_curmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->curmoney(), output);
  }

  // optional int64 win = 8;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->win(), output);
  }

  // optional int64 rate = 9;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->rate(), output);
  }

  // optional string imageArr = 10;
  if (has_imagearr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imagearr().data(), this->imagearr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->imagearr(), output);
  }

  // repeated .game_slothch_protocols.IconInfo icons = 11;
  for (int i = 0; i < this->icons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->icons(i), output);
  }

  // optional bool freeCol = 12;
  if (has_freecol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->freecol(), output);
  }

  // optional int32 freeCount = 13;
  if (has_freecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->freecount(), output);
  }

  // optional int32 freeAdd = 14;
  if (has_freeadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->freeadd(), output);
  }

  // optional int64 freeEndGold = 15;
  if (has_freeendgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->freeendgold(), output);
  }

  // optional int32 lotteryResult = 16 [default = -1];
  if (has_lotteryresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->lotteryresult(), output);
  }

  // optional int64 lotteryReward = 17 [default = 0];
  if (has_lotteryreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->lotteryreward(), output);
  }

  // repeated int32 lotteryIcon = 18;
  for (int i = 0; i < this->lotteryicon_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->lotteryicon(i), output);
  }

  // repeated int32 lotteryPos = 19;
  for (int i = 0; i < this->lotterypos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->lotterypos(i), output);
  }

  // optional int32 playerCount = 20;
  if (has_playercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->playercount(), output);
  }

  // optional int32 ts = 21;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->ts(), output);
  }

  // repeated .game_slothch_protocols.FreeInfo freeInfos = 22;
  for (int i = 0; i < this->freeinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->freeinfos(i), output);
  }

  // optional int32 viplv = 23;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->viplv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* replay_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string rid = 1;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rid(), target);
  }

  // optional int32 pid = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pid(), target);
  }

  // optional string nick = 3;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nick(), target);
  }

  // optional int32 frame = 4;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->frame(), target);
  }

  // optional int64 winMoney = 5;
  if (has_winmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->winmoney(), target);
  }

  // optional int64 deductMoney = 6;
  if (has_deductmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->deductmoney(), target);
  }

  // optional int64 curMoney = 7;
  if (has_curmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->curmoney(), target);
  }

  // optional int64 win = 8;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->win(), target);
  }

  // optional int64 rate = 9;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->rate(), target);
  }

  // optional string imageArr = 10;
  if (has_imagearr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imagearr().data(), this->imagearr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->imagearr(), target);
  }

  // repeated .game_slothch_protocols.IconInfo icons = 11;
  for (int i = 0; i < this->icons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->icons(i), target);
  }

  // optional bool freeCol = 12;
  if (has_freecol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->freecol(), target);
  }

  // optional int32 freeCount = 13;
  if (has_freecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->freecount(), target);
  }

  // optional int32 freeAdd = 14;
  if (has_freeadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->freeadd(), target);
  }

  // optional int64 freeEndGold = 15;
  if (has_freeendgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->freeendgold(), target);
  }

  // optional int32 lotteryResult = 16 [default = -1];
  if (has_lotteryresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->lotteryresult(), target);
  }

  // optional int64 lotteryReward = 17 [default = 0];
  if (has_lotteryreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->lotteryreward(), target);
  }

  // repeated int32 lotteryIcon = 18;
  for (int i = 0; i < this->lotteryicon_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(18, this->lotteryicon(i), target);
  }

  // repeated int32 lotteryPos = 19;
  for (int i = 0; i < this->lotterypos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->lotterypos(i), target);
  }

  // optional int32 playerCount = 20;
  if (has_playercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->playercount(), target);
  }

  // optional int32 ts = 21;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->ts(), target);
  }

  // repeated .game_slothch_protocols.FreeInfo freeInfos = 22;
  for (int i = 0; i < this->freeinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->freeinfos(i), target);
  }

  // optional int32 viplv = 23;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->viplv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int replay_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string rid = 1;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rid());
    }

    // optional int32 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional string nick = 3;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

    // optional int32 frame = 4;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame());
    }

    // optional int64 winMoney = 5;
    if (has_winmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->winmoney());
    }

    // optional int64 deductMoney = 6;
    if (has_deductmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deductmoney());
    }

    // optional int64 curMoney = 7;
    if (has_curmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curmoney());
    }

    // optional int64 win = 8;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 rate = 9;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rate());
    }

    // optional string imageArr = 10;
    if (has_imagearr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imagearr());
    }

    // optional bool freeCol = 12;
    if (has_freecol()) {
      total_size += 1 + 1;
    }

    // optional int32 freeCount = 13;
    if (has_freecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freecount());
    }

    // optional int32 freeAdd = 14;
    if (has_freeadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freeadd());
    }

    // optional int64 freeEndGold = 15;
    if (has_freeendgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->freeendgold());
    }

    // optional int32 lotteryResult = 16 [default = -1];
    if (has_lotteryresult()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lotteryresult());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 lotteryReward = 17 [default = 0];
    if (has_lotteryreward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lotteryreward());
    }

    // optional int32 playerCount = 20;
    if (has_playercount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playercount());
    }

    // optional int32 ts = 21;
    if (has_ts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ts());
    }

    // optional int32 viplv = 23;
    if (has_viplv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplv());
    }

  }
  // repeated .game_slothch_protocols.IconInfo icons = 11;
  total_size += 1 * this->icons_size();
  for (int i = 0; i < this->icons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->icons(i));
  }

  // repeated int32 lotteryIcon = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->lotteryicon_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lotteryicon(i));
    }
    total_size += 2 * this->lotteryicon_size() + data_size;
  }

  // repeated int32 lotteryPos = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->lotterypos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lotterypos(i));
    }
    total_size += 2 * this->lotterypos_size() + data_size;
  }

  // repeated .game_slothch_protocols.FreeInfo freeInfos = 22;
  total_size += 2 * this->freeinfos_size();
  for (int i = 0; i < this->freeinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->freeinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void replay_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const replay_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const replay_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void replay_info::MergeFrom(const replay_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  icons_.MergeFrom(from.icons_);
  lotteryicon_.MergeFrom(from.lotteryicon_);
  lotterypos_.MergeFrom(from.lotterypos_);
  freeinfos_.MergeFrom(from.freeinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
    if (from.has_frame()) {
      set_frame(from.frame());
    }
    if (from.has_winmoney()) {
      set_winmoney(from.winmoney());
    }
    if (from.has_deductmoney()) {
      set_deductmoney(from.deductmoney());
    }
    if (from.has_curmoney()) {
      set_curmoney(from.curmoney());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_imagearr()) {
      set_imagearr(from.imagearr());
    }
    if (from.has_freecol()) {
      set_freecol(from.freecol());
    }
    if (from.has_freecount()) {
      set_freecount(from.freecount());
    }
    if (from.has_freeadd()) {
      set_freeadd(from.freeadd());
    }
    if (from.has_freeendgold()) {
      set_freeendgold(from.freeendgold());
    }
    if (from.has_lotteryresult()) {
      set_lotteryresult(from.lotteryresult());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lotteryreward()) {
      set_lotteryreward(from.lotteryreward());
    }
    if (from.has_playercount()) {
      set_playercount(from.playercount());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void replay_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void replay_info::CopyFrom(const replay_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool replay_info::IsInitialized() const {

  return true;
}

void replay_info::Swap(replay_info* other) {
  if (other != this) {
    std::swap(rid_, other->rid_);
    std::swap(pid_, other->pid_);
    std::swap(nick_, other->nick_);
    std::swap(frame_, other->frame_);
    std::swap(winmoney_, other->winmoney_);
    std::swap(deductmoney_, other->deductmoney_);
    std::swap(curmoney_, other->curmoney_);
    std::swap(win_, other->win_);
    std::swap(rate_, other->rate_);
    std::swap(imagearr_, other->imagearr_);
    icons_.Swap(&other->icons_);
    std::swap(freecol_, other->freecol_);
    std::swap(freecount_, other->freecount_);
    std::swap(freeadd_, other->freeadd_);
    std::swap(freeendgold_, other->freeendgold_);
    std::swap(lotteryresult_, other->lotteryresult_);
    std::swap(lotteryreward_, other->lotteryreward_);
    lotteryicon_.Swap(&other->lotteryicon_);
    lotterypos_.Swap(&other->lotterypos_);
    std::swap(playercount_, other->playercount_);
    std::swap(ts_, other->ts_);
    freeinfos_.Swap(&other->freeinfos_);
    std::swap(viplv_, other->viplv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata replay_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = replay_info_descriptor_;
  metadata.reflection = replay_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_replay_list::kPacketIdFieldNumber;
const int packetl2c_replay_list::kRtypeFieldNumber;
#endif  // !_MSC_VER

packetl2c_replay_list::packetl2c_replay_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_replay_list::InitAsDefaultInstance() {
}

packetl2c_replay_list::packetl2c_replay_list(const packetl2c_replay_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_replay_list::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10024;
  rtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_replay_list::~packetl2c_replay_list() {
  SharedDtor();
}

void packetl2c_replay_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_replay_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_replay_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_replay_list_descriptor_;
}

const packetl2c_replay_list& packetl2c_replay_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_replay_list* packetl2c_replay_list::default_instance_ = NULL;

packetl2c_replay_list* packetl2c_replay_list::New() const {
  return new packetl2c_replay_list;
}

void packetl2c_replay_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10024;
    rtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_replay_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_replay_list];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rtype;
        break;
      }

      // optional int32 rtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rtype_)));
          set_has_rtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_replay_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_replay_list];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 rtype = 2;
  if (has_rtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_replay_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_replay_list];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 rtype = 2;
  if (has_rtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_replay_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_replay_list];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 rtype = 2;
    if (has_rtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_replay_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_replay_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_replay_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_replay_list::MergeFrom(const packetl2c_replay_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_rtype()) {
      set_rtype(from.rtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_replay_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_replay_list::CopyFrom(const packetl2c_replay_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_replay_list::IsInitialized() const {

  return true;
}

void packetl2c_replay_list::Swap(packetl2c_replay_list* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(rtype_, other->rtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_replay_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_replay_list_descriptor_;
  metadata.reflection = packetl2c_replay_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_replay_list_result::kPacketIdFieldNumber;
const int packetl2c_replay_list_result::kRtypeFieldNumber;
const int packetl2c_replay_list_result::kReplayListFieldNumber;
#endif  // !_MSC_VER

packetl2c_replay_list_result::packetl2c_replay_list_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_replay_list_result::InitAsDefaultInstance() {
}

packetl2c_replay_list_result::packetl2c_replay_list_result(const packetl2c_replay_list_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_replay_list_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15024;
  rtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_replay_list_result::~packetl2c_replay_list_result() {
  SharedDtor();
}

void packetl2c_replay_list_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_replay_list_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_replay_list_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_replay_list_result_descriptor_;
}

const packetl2c_replay_list_result& packetl2c_replay_list_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_replay_list_result* packetl2c_replay_list_result::default_instance_ = NULL;

packetl2c_replay_list_result* packetl2c_replay_list_result::New() const {
  return new packetl2c_replay_list_result;
}

void packetl2c_replay_list_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15024;
    rtype_ = 0;
  }
  replay_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_replay_list_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_replay_list_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rtype;
        break;
      }

      // optional int32 rtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rtype_)));
          set_has_rtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_replay_list;
        break;
      }

      // repeated .game_slothch_protocols.replay_info replay_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replay_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_replay_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_replay_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_replay_list_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_replay_list_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 rtype = 2;
  if (has_rtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rtype(), output);
  }

  // repeated .game_slothch_protocols.replay_info replay_list = 3;
  for (int i = 0; i < this->replay_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->replay_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_replay_list_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_replay_list_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 rtype = 2;
  if (has_rtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rtype(), target);
  }

  // repeated .game_slothch_protocols.replay_info replay_list = 3;
  for (int i = 0; i < this->replay_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->replay_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_replay_list_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_replay_list_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 rtype = 2;
    if (has_rtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rtype());
    }

  }
  // repeated .game_slothch_protocols.replay_info replay_list = 3;
  total_size += 1 * this->replay_list_size();
  for (int i = 0; i < this->replay_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->replay_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_replay_list_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_replay_list_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_replay_list_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_replay_list_result::MergeFrom(const packetl2c_replay_list_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  replay_list_.MergeFrom(from.replay_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_rtype()) {
      set_rtype(from.rtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_replay_list_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_replay_list_result::CopyFrom(const packetl2c_replay_list_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_replay_list_result::IsInitialized() const {

  return true;
}

void packetl2c_replay_list_result::Swap(packetl2c_replay_list_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(rtype_, other->rtype_);
    replay_list_.Swap(&other->replay_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_replay_list_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_replay_list_result_descriptor_;
  metadata.reflection = packetl2c_replay_list_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_replay_detail::kPacketIdFieldNumber;
const int packetl2c_replay_detail::kRtypeFieldNumber;
const int packetl2c_replay_detail::kRidFieldNumber;
#endif  // !_MSC_VER

packetl2c_replay_detail::packetl2c_replay_detail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_replay_detail::InitAsDefaultInstance() {
}

packetl2c_replay_detail::packetl2c_replay_detail(const packetl2c_replay_detail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_replay_detail::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10025;
  rtype_ = 0;
  rid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_replay_detail::~packetl2c_replay_detail() {
  SharedDtor();
}

void packetl2c_replay_detail::SharedDtor() {
  if (rid_ != &::google::protobuf::internal::kEmptyString) {
    delete rid_;
  }
  if (this != default_instance_) {
  }
}

void packetl2c_replay_detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_replay_detail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_replay_detail_descriptor_;
}

const packetl2c_replay_detail& packetl2c_replay_detail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_replay_detail* packetl2c_replay_detail::default_instance_ = NULL;

packetl2c_replay_detail* packetl2c_replay_detail::New() const {
  return new packetl2c_replay_detail;
}

void packetl2c_replay_detail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10025;
    rtype_ = 0;
    if (has_rid()) {
      if (rid_ != &::google::protobuf::internal::kEmptyString) {
        rid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_replay_detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_replay_detail];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rtype;
        break;
      }

      // optional int32 rtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rtype_)));
          set_has_rtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rid;
        break;
      }

      // optional string rid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rid().data(), this->rid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_replay_detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_replay_detail];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 rtype = 2;
  if (has_rtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rtype(), output);
  }

  // optional string rid = 3;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_replay_detail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_replay_detail];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 rtype = 2;
  if (has_rtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rtype(), target);
  }

  // optional string rid = 3;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_replay_detail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_replay_detail];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 rtype = 2;
    if (has_rtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rtype());
    }

    // optional string rid = 3;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_replay_detail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_replay_detail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_replay_detail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_replay_detail::MergeFrom(const packetl2c_replay_detail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_rtype()) {
      set_rtype(from.rtype());
    }
    if (from.has_rid()) {
      set_rid(from.rid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_replay_detail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_replay_detail::CopyFrom(const packetl2c_replay_detail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_replay_detail::IsInitialized() const {

  return true;
}

void packetl2c_replay_detail::Swap(packetl2c_replay_detail* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(rtype_, other->rtype_);
    std::swap(rid_, other->rid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_replay_detail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_replay_detail_descriptor_;
  metadata.reflection = packetl2c_replay_detail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_replay_detail_result::kPacketIdFieldNumber;
const int packetl2c_replay_detail_result::kResultFieldNumber;
const int packetl2c_replay_detail_result::kRtypeFieldNumber;
const int packetl2c_replay_detail_result::kReplayFieldNumber;
#endif  // !_MSC_VER

packetl2c_replay_detail_result::packetl2c_replay_detail_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_replay_detail_result::InitAsDefaultInstance() {
  replay_ = const_cast< ::game_slothch_protocols::replay_info*>(&::game_slothch_protocols::replay_info::default_instance());
}

packetl2c_replay_detail_result::packetl2c_replay_detail_result(const packetl2c_replay_detail_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_replay_detail_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15025;
  result_ = 0;
  rtype_ = 0;
  replay_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_replay_detail_result::~packetl2c_replay_detail_result() {
  SharedDtor();
}

void packetl2c_replay_detail_result::SharedDtor() {
  if (this != default_instance_) {
    delete replay_;
  }
}

void packetl2c_replay_detail_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_replay_detail_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_replay_detail_result_descriptor_;
}

const packetl2c_replay_detail_result& packetl2c_replay_detail_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_replay_detail_result* packetl2c_replay_detail_result::default_instance_ = NULL;

packetl2c_replay_detail_result* packetl2c_replay_detail_result::New() const {
  return new packetl2c_replay_detail_result;
}

void packetl2c_replay_detail_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15025;
    result_ = 0;
    rtype_ = 0;
    if (has_replay()) {
      if (replay_ != NULL) replay_->::game_slothch_protocols::replay_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_replay_detail_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_replay_detail_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rtype;
        break;
      }

      // optional int32 rtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rtype_)));
          set_has_rtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_replay;
        break;
      }

      // optional .game_slothch_protocols.replay_info replay = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_replay_detail_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_replay_detail_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 rtype = 3;
  if (has_rtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rtype(), output);
  }

  // optional .game_slothch_protocols.replay_info replay = 4;
  if (has_replay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->replay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_replay_detail_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_replay_detail_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 rtype = 3;
  if (has_rtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rtype(), target);
  }

  // optional .game_slothch_protocols.replay_info replay = 4;
  if (has_replay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->replay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_replay_detail_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_replay_detail_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 rtype = 3;
    if (has_rtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rtype());
    }

    // optional .game_slothch_protocols.replay_info replay = 4;
    if (has_replay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replay());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_replay_detail_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_replay_detail_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_replay_detail_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_replay_detail_result::MergeFrom(const packetl2c_replay_detail_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rtype()) {
      set_rtype(from.rtype());
    }
    if (from.has_replay()) {
      mutable_replay()->::game_slothch_protocols::replay_info::MergeFrom(from.replay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_replay_detail_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_replay_detail_result::CopyFrom(const packetl2c_replay_detail_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_replay_detail_result::IsInitialized() const {

  return true;
}

void packetl2c_replay_detail_result::Swap(packetl2c_replay_detail_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(rtype_, other->rtype_);
    std::swap(replay_, other->replay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_replay_detail_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_replay_detail_result_descriptor_;
  metadata.reflection = packetl2c_replay_detail_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int room_player::kPlayerIdFieldNumber;
const int room_player::kGoldFieldNumber;
const int room_player::kBetFieldNumber;
const int room_player::kProfitTodayFieldNumber;
#endif  // !_MSC_VER

room_player::room_player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void room_player::InitAsDefaultInstance() {
}

room_player::room_player(const room_player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void room_player::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  bet_ = GOOGLE_LONGLONG(0);
  profit_today_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

room_player::~room_player() {
  SharedDtor();
}

void room_player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void room_player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* room_player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return room_player_descriptor_;
}

const room_player& room_player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

room_player* room_player::default_instance_ = NULL;

room_player* room_player::New() const {
  return new room_player;
}

void room_player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    gold_ = GOOGLE_LONGLONG(0);
    bet_ = GOOGLE_LONGLONG(0);
    profit_today_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool room_player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional int64 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bet;
        break;
      }

      // optional int64 bet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_)));
          set_has_bet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_profit_today;
        break;
      }

      // optional int64 profit_today = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profit_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &profit_today_)));
          set_has_profit_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void room_player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gold(), output);
  }

  // optional int64 bet = 3;
  if (has_bet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bet(), output);
  }

  // optional int64 profit_today = 4;
  if (has_profit_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->profit_today(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* room_player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gold(), target);
  }

  // optional int64 bet = 3;
  if (has_bet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bet(), target);
  }

  // optional int64 profit_today = 4;
  if (has_profit_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->profit_today(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int room_player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int64 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int64 bet = 3;
    if (has_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet());
    }

    // optional int64 profit_today = 4;
    if (has_profit_today()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->profit_today());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void room_player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const room_player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const room_player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void room_player::MergeFrom(const room_player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_bet()) {
      set_bet(from.bet());
    }
    if (from.has_profit_today()) {
      set_profit_today(from.profit_today());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void room_player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void room_player::CopyFrom(const room_player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool room_player::IsInitialized() const {

  return true;
}

void room_player::Swap(room_player* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(gold_, other->gold_);
    std::swap(bet_, other->bet_);
    std::swap(profit_today_, other->profit_today_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata room_player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = room_player_descriptor_;
  metadata.reflection = room_player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_gm_get_room_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_gm_get_room_info::packetl2c_gm_get_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_gm_get_room_info::InitAsDefaultInstance() {
}

packetl2c_gm_get_room_info::packetl2c_gm_get_room_info(const packetl2c_gm_get_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_gm_get_room_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10101;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_gm_get_room_info::~packetl2c_gm_get_room_info() {
  SharedDtor();
}

void packetl2c_gm_get_room_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_gm_get_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_gm_get_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_gm_get_room_info_descriptor_;
}

const packetl2c_gm_get_room_info& packetl2c_gm_get_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_gm_get_room_info* packetl2c_gm_get_room_info::default_instance_ = NULL;

packetl2c_gm_get_room_info* packetl2c_gm_get_room_info::New() const {
  return new packetl2c_gm_get_room_info;
}

void packetl2c_gm_get_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10101;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_gm_get_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_get_room_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_gm_get_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_get_room_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_gm_get_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_get_room_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_gm_get_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_get_room_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_gm_get_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_gm_get_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_gm_get_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_gm_get_room_info::MergeFrom(const packetl2c_gm_get_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_gm_get_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_gm_get_room_info::CopyFrom(const packetl2c_gm_get_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_gm_get_room_info::IsInitialized() const {

  return true;
}

void packetl2c_gm_get_room_info::Swap(packetl2c_gm_get_room_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_gm_get_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_gm_get_room_info_descriptor_;
  metadata.reflection = packetl2c_gm_get_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_gm_get_room_info_result::kPacketIdFieldNumber;
const int packetl2c_gm_get_room_info_result::kResultFieldNumber;
const int packetl2c_gm_get_room_info_result::kKillcountFieldNumber;
const int packetl2c_gm_get_room_info_result::kPlayersFieldNumber;
#endif  // !_MSC_VER

packetl2c_gm_get_room_info_result::packetl2c_gm_get_room_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_gm_get_room_info_result::InitAsDefaultInstance() {
}

packetl2c_gm_get_room_info_result::packetl2c_gm_get_room_info_result(const packetl2c_gm_get_room_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_gm_get_room_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15101;
  result_ = 0;
  killcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_gm_get_room_info_result::~packetl2c_gm_get_room_info_result() {
  SharedDtor();
}

void packetl2c_gm_get_room_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_gm_get_room_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_gm_get_room_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_gm_get_room_info_result_descriptor_;
}

const packetl2c_gm_get_room_info_result& packetl2c_gm_get_room_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_gm_get_room_info_result* packetl2c_gm_get_room_info_result::default_instance_ = NULL;

packetl2c_gm_get_room_info_result* packetl2c_gm_get_room_info_result::New() const {
  return new packetl2c_gm_get_room_info_result;
}

void packetl2c_gm_get_room_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15101;
    result_ = 0;
    killcount_ = 0;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_gm_get_room_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_get_room_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_killcount;
        break;
      }

      // optional int32 killcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killcount_)));
          set_has_killcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_players;
        break;
      }

      // repeated .game_slothch_protocols.room_player players = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_gm_get_room_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_get_room_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 killcount = 3;
  if (has_killcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->killcount(), output);
  }

  // repeated .game_slothch_protocols.room_player players = 4;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_gm_get_room_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_get_room_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 killcount = 3;
  if (has_killcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->killcount(), target);
  }

  // repeated .game_slothch_protocols.room_player players = 4;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_gm_get_room_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_get_room_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 killcount = 3;
    if (has_killcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killcount());
    }

  }
  // repeated .game_slothch_protocols.room_player players = 4;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_gm_get_room_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_gm_get_room_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_gm_get_room_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_gm_get_room_info_result::MergeFrom(const packetl2c_gm_get_room_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_killcount()) {
      set_killcount(from.killcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_gm_get_room_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_gm_get_room_info_result::CopyFrom(const packetl2c_gm_get_room_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_gm_get_room_info_result::IsInitialized() const {

  return true;
}

void packetl2c_gm_get_room_info_result::Swap(packetl2c_gm_get_room_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(killcount_, other->killcount_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_gm_get_room_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_gm_get_room_info_result_descriptor_;
  metadata.reflection = packetl2c_gm_get_room_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_gm_do_kill::kPacketIdFieldNumber;
const int packetl2c_gm_do_kill::kKillcountFieldNumber;
const int packetl2c_gm_do_kill::kPidFieldNumber;
const int packetl2c_gm_do_kill::kFreeFieldNumber;
#endif  // !_MSC_VER

packetl2c_gm_do_kill::packetl2c_gm_do_kill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_gm_do_kill::InitAsDefaultInstance() {
}

packetl2c_gm_do_kill::packetl2c_gm_do_kill(const packetl2c_gm_do_kill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_gm_do_kill::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10102;
  killcount_ = 0;
  pid_ = 0;
  free_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_gm_do_kill::~packetl2c_gm_do_kill() {
  SharedDtor();
}

void packetl2c_gm_do_kill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_gm_do_kill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_gm_do_kill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_gm_do_kill_descriptor_;
}

const packetl2c_gm_do_kill& packetl2c_gm_do_kill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_gm_do_kill* packetl2c_gm_do_kill::default_instance_ = NULL;

packetl2c_gm_do_kill* packetl2c_gm_do_kill::New() const {
  return new packetl2c_gm_do_kill;
}

void packetl2c_gm_do_kill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10102;
    killcount_ = 0;
    pid_ = 0;
    free_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_gm_do_kill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_do_kill];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_killcount;
        break;
      }

      // optional int32 killcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killcount_)));
          set_has_killcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pid;
        break;
      }

      // optional int32 pid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_free;
        break;
      }

      // optional int32 free = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_)));
          set_has_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_gm_do_kill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_do_kill];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 killcount = 2;
  if (has_killcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->killcount(), output);
  }

  // optional int32 pid = 3;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pid(), output);
  }

  // optional int32 free = 4;
  if (has_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->free(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_gm_do_kill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_do_kill];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 killcount = 2;
  if (has_killcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->killcount(), target);
  }

  // optional int32 pid = 3;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pid(), target);
  }

  // optional int32 free = 4;
  if (has_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->free(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_gm_do_kill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_do_kill];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 killcount = 2;
    if (has_killcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killcount());
    }

    // optional int32 pid = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional int32 free = 4;
    if (has_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_gm_do_kill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_gm_do_kill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_gm_do_kill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_gm_do_kill::MergeFrom(const packetl2c_gm_do_kill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_killcount()) {
      set_killcount(from.killcount());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_free()) {
      set_free(from.free());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_gm_do_kill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_gm_do_kill::CopyFrom(const packetl2c_gm_do_kill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_gm_do_kill::IsInitialized() const {

  return true;
}

void packetl2c_gm_do_kill::Swap(packetl2c_gm_do_kill* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(killcount_, other->killcount_);
    std::swap(pid_, other->pid_);
    std::swap(free_, other->free_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_gm_do_kill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_gm_do_kill_descriptor_;
  metadata.reflection = packetl2c_gm_do_kill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_gm_do_kill_result::kPacketIdFieldNumber;
const int packetl2c_gm_do_kill_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_gm_do_kill_result::packetl2c_gm_do_kill_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_gm_do_kill_result::InitAsDefaultInstance() {
}

packetl2c_gm_do_kill_result::packetl2c_gm_do_kill_result(const packetl2c_gm_do_kill_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_gm_do_kill_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15102;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_gm_do_kill_result::~packetl2c_gm_do_kill_result() {
  SharedDtor();
}

void packetl2c_gm_do_kill_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_gm_do_kill_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_gm_do_kill_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_gm_do_kill_result_descriptor_;
}

const packetl2c_gm_do_kill_result& packetl2c_gm_do_kill_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_gm_do_kill_result* packetl2c_gm_do_kill_result::default_instance_ = NULL;

packetl2c_gm_do_kill_result* packetl2c_gm_do_kill_result::New() const {
  return new packetl2c_gm_do_kill_result;
}

void packetl2c_gm_do_kill_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15102;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_gm_do_kill_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_do_kill_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_slothch_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_slothch_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_gm_do_kill_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_do_kill_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_gm_do_kill_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_do_kill_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_gm_do_kill_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_do_kill_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_gm_do_kill_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_gm_do_kill_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_gm_do_kill_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_gm_do_kill_result::MergeFrom(const packetl2c_gm_do_kill_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_gm_do_kill_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_gm_do_kill_result::CopyFrom(const packetl2c_gm_do_kill_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_gm_do_kill_result::IsInitialized() const {

  return true;
}

void packetl2c_gm_do_kill_result::Swap(packetl2c_gm_do_kill_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_gm_do_kill_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_gm_do_kill_result_descriptor_;
  metadata.reflection = packetl2c_gm_do_kill_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_slothch_protocols

// @@protoc_insertion_point(global_scope)
