// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client2world_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2w_player_connect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_player_connect_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_player_connect_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_player_connect_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_c2w_timesync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_c2w_timesync_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_w2c_timesync_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_w2c_timesync_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_ask_login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_ask_login_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_game_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_game_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_ask_login_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_ask_login_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_enter_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_enter_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_enter_game_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_enter_game_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_gm_command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_gm_command_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_gm_command_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_gm_command_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_leave_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_leave_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_leave_game_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_leave_game_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_player_kick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_player_kick_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_get_gamelist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_get_gamelist_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_get_gamelist_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_get_gamelist_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_bind_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_bind_reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_some_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_some_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_ask_message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_ask_message_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_ask_message_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_ask_message_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_delete_message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_delete_message_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_delete_message_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_delete_message_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_read_message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_read_message_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_read_message_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_read_message_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_picture_verify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_picture_verify_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_picture_verify_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_picture_verify_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_ask_report_account_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_ask_report_account_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_ask_report_account_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_ask_report_account_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_faq_def_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_faq_def_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_req_faq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_faq_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_req_faq_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_req_faq_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_req_faq_detail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_faq_detail_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_req_faq_detail_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_req_faq_detail_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_req_cs_contact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_cs_contact_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_req_cs_contact_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_req_cs_contact_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_suggest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_suggest_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_suggestion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_suggestion_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_suggestion_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_suggestion_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_req_suggest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_suggest_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_req_suggest_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_req_suggest_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_req_sync_gold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_sync_gold_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_req_sync_gold_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_req_sync_gold_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_notice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_notice_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client2world_5fprotocol_2eproto() {
  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client2world_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2w_player_connect_descriptor_ = file->message_type(0);
  static const int packetc2w_player_connect_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_connect, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_connect, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_connect, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_connect, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_connect, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_connect, login_platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_connect, machine_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_connect, machine_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_connect, channelid_),
  };
  packetc2w_player_connect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_player_connect_descriptor_,
      packetc2w_player_connect::default_instance_,
      packetc2w_player_connect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_connect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_connect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_player_connect));
  packetw2c_player_connect_result_descriptor_ = file->message_type(1);
  static const int packetw2c_player_connect_result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_connect_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_connect_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_connect_result, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_connect_result, gaming_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_connect_result, ver_),
  };
  packetw2c_player_connect_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_player_connect_result_descriptor_,
      packetw2c_player_connect_result::default_instance_,
      packetw2c_player_connect_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_connect_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_connect_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_player_connect_result));
  packet_c2w_timesync_descriptor_ = file->message_type(2);
  static const int packet_c2w_timesync_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_c2w_timesync, packet_id_),
  };
  packet_c2w_timesync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_c2w_timesync_descriptor_,
      packet_c2w_timesync::default_instance_,
      packet_c2w_timesync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_c2w_timesync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_c2w_timesync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_c2w_timesync));
  packet_w2c_timesync_result_descriptor_ = file->message_type(3);
  static const int packet_w2c_timesync_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_w2c_timesync_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_w2c_timesync_result, server_time_),
  };
  packet_w2c_timesync_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_w2c_timesync_result_descriptor_,
      packet_w2c_timesync_result::default_instance_,
      packet_w2c_timesync_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_w2c_timesync_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_w2c_timesync_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_w2c_timesync_result));
  packetc2w_ask_login_descriptor_ = file->message_type(4);
  static const int packetc2w_ask_login_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_login, packet_id_),
  };
  packetc2w_ask_login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_ask_login_descriptor_,
      packetc2w_ask_login::default_instance_,
      packetc2w_ask_login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_ask_login));
  msg_game_info_descriptor_ = file->message_type(5);
  static const int msg_game_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_info, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_info, gamever_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_info, curonlinenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_info, ishot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_info, sort_),
  };
  msg_game_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_game_info_descriptor_,
      msg_game_info::default_instance_,
      msg_game_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_game_info));
  packetw2c_ask_login_result_descriptor_ = file->message_type(6);
  static const int packetw2c_ask_login_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_login_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_login_result, account_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_login_result, game_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_login_result, gaming_),
  };
  packetw2c_ask_login_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_ask_login_result_descriptor_,
      packetw2c_ask_login_result::default_instance_,
      packetw2c_ask_login_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_login_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_login_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_ask_login_result));
  packetc2w_enter_game_descriptor_ = file->message_type(7);
  static const int packetc2w_enter_game_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_enter_game, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_enter_game, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_enter_game, gamever_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_enter_game, roomid_),
  };
  packetc2w_enter_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_enter_game_descriptor_,
      packetc2w_enter_game::default_instance_,
      packetc2w_enter_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_enter_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_enter_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_enter_game));
  packetw2c_enter_game_result_descriptor_ = file->message_type(8);
  static const int packetw2c_enter_game_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_enter_game_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_enter_game_result, result_),
  };
  packetw2c_enter_game_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_enter_game_result_descriptor_,
      packetw2c_enter_game_result::default_instance_,
      packetw2c_enter_game_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_enter_game_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_enter_game_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_enter_game_result));
  packetc2w_gm_command_descriptor_ = file->message_type(9);
  static const int packetc2w_gm_command_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_gm_command, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_gm_command, command_),
  };
  packetc2w_gm_command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_gm_command_descriptor_,
      packetc2w_gm_command::default_instance_,
      packetc2w_gm_command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_gm_command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_gm_command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_gm_command));
  packetw2c_gm_command_result_descriptor_ = file->message_type(10);
  static const int packetw2c_gm_command_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_gm_command_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_gm_command_result, result_),
  };
  packetw2c_gm_command_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_gm_command_result_descriptor_,
      packetw2c_gm_command_result::default_instance_,
      packetw2c_gm_command_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_gm_command_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_gm_command_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_gm_command_result));
  packetc2w_leave_game_descriptor_ = file->message_type(11);
  static const int packetc2w_leave_game_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_leave_game, packet_id_),
  };
  packetc2w_leave_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_leave_game_descriptor_,
      packetc2w_leave_game::default_instance_,
      packetc2w_leave_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_leave_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_leave_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_leave_game));
  packetw2c_leave_game_result_descriptor_ = file->message_type(12);
  static const int packetw2c_leave_game_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_leave_game_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_leave_game_result, shutdown_),
  };
  packetw2c_leave_game_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_leave_game_result_descriptor_,
      packetw2c_leave_game_result::default_instance_,
      packetw2c_leave_game_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_leave_game_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_leave_game_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_leave_game_result));
  packetw2c_player_kick_descriptor_ = file->message_type(13);
  static const int packetw2c_player_kick_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_kick, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_kick, kick_type_),
  };
  packetw2c_player_kick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_player_kick_descriptor_,
      packetw2c_player_kick::default_instance_,
      packetw2c_player_kick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_kick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_kick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_player_kick));
  packetc2w_get_gamelist_descriptor_ = file->message_type(14);
  static const int packetc2w_get_gamelist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_get_gamelist, packet_id_),
  };
  packetc2w_get_gamelist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_get_gamelist_descriptor_,
      packetc2w_get_gamelist::default_instance_,
      packetc2w_get_gamelist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_get_gamelist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_get_gamelist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_get_gamelist));
  packetw2c_get_gamelist_result_descriptor_ = file->message_type(15);
  static const int packetw2c_get_gamelist_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_gamelist_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_gamelist_result, game_list_),
  };
  packetw2c_get_gamelist_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_get_gamelist_result_descriptor_,
      packetw2c_get_gamelist_result::default_instance_,
      packetw2c_get_gamelist_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_gamelist_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_gamelist_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_get_gamelist_result));
  packetw2c_bind_reward_descriptor_ = file->message_type(16);
  static const int packetw2c_bind_reward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_bind_reward, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_bind_reward, reward_gold_),
  };
  packetw2c_bind_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_bind_reward_descriptor_,
      packetw2c_bind_reward::default_instance_,
      packetw2c_bind_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_bind_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_bind_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_bind_reward));
  msg_some_info_descriptor_ = file->message_type(17);
  static const int msg_some_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_some_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_some_info, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_some_info, timevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_some_info, msginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_some_info, read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_some_info, items_),
  };
  msg_some_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_some_info_descriptor_,
      msg_some_info::default_instance_,
      msg_some_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_some_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_some_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_some_info));
  packetc2w_ask_message_descriptor_ = file->message_type(18);
  static const int packetc2w_ask_message_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_message, packet_id_),
  };
  packetc2w_ask_message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_ask_message_descriptor_,
      packetc2w_ask_message::default_instance_,
      packetc2w_ask_message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_ask_message));
  packetw2c_ask_message_result_descriptor_ = file->message_type(19);
  static const int packetw2c_ask_message_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_message_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_message_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_message_result, msg_list_),
  };
  packetw2c_ask_message_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_ask_message_result_descriptor_,
      packetw2c_ask_message_result::default_instance_,
      packetw2c_ask_message_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_message_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_message_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_ask_message_result));
  packetc2w_delete_message_descriptor_ = file->message_type(20);
  static const int packetc2w_delete_message_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_delete_message, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_delete_message, delete_list_),
  };
  packetc2w_delete_message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_delete_message_descriptor_,
      packetc2w_delete_message::default_instance_,
      packetc2w_delete_message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_delete_message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_delete_message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_delete_message));
  packetw2c_delete_message_result_descriptor_ = file->message_type(21);
  static const int packetw2c_delete_message_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_delete_message_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_delete_message_result, result_),
  };
  packetw2c_delete_message_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_delete_message_result_descriptor_,
      packetw2c_delete_message_result::default_instance_,
      packetw2c_delete_message_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_delete_message_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_delete_message_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_delete_message_result));
  packetc2w_read_message_descriptor_ = file->message_type(22);
  static const int packetc2w_read_message_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_read_message, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_read_message, id_),
  };
  packetc2w_read_message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_read_message_descriptor_,
      packetc2w_read_message::default_instance_,
      packetc2w_read_message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_read_message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_read_message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_read_message));
  packetw2c_read_message_result_descriptor_ = file->message_type(23);
  static const int packetw2c_read_message_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_read_message_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_read_message_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_read_message_result, id_),
  };
  packetw2c_read_message_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_read_message_result_descriptor_,
      packetw2c_read_message_result::default_instance_,
      packetw2c_read_message_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_read_message_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_read_message_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_read_message_result));
  packetw2c_picture_verify_descriptor_ = file->message_type(24);
  static const int packetw2c_picture_verify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_picture_verify, packet_id_),
  };
  packetw2c_picture_verify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_picture_verify_descriptor_,
      packetw2c_picture_verify::default_instance_,
      packetw2c_picture_verify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_picture_verify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_picture_verify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_picture_verify));
  packetc2w_picture_verify_result_descriptor_ = file->message_type(25);
  static const int packetc2w_picture_verify_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_picture_verify_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_picture_verify_result, validate_),
  };
  packetc2w_picture_verify_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_picture_verify_result_descriptor_,
      packetc2w_picture_verify_result::default_instance_,
      packetc2w_picture_verify_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_picture_verify_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_picture_verify_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_picture_verify_result));
  packetc2w_ask_report_account_descriptor_ = file->message_type(26);
  static const int packetc2w_ask_report_account_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_report_account, packet_id_),
  };
  packetc2w_ask_report_account_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_ask_report_account_descriptor_,
      packetc2w_ask_report_account::default_instance_,
      packetc2w_ask_report_account_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_report_account, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_report_account, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_ask_report_account));
  packetw2c_ask_report_account_result_descriptor_ = file->message_type(27);
  static const int packetw2c_ask_report_account_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_report_account_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_report_account_result, account_),
  };
  packetw2c_ask_report_account_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_ask_report_account_result_descriptor_,
      packetw2c_ask_report_account_result::default_instance_,
      packetw2c_ask_report_account_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_report_account_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_report_account_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_ask_report_account_result));
  msg_faq_def_descriptor_ = file->message_type(28);
  static const int msg_faq_def_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_faq_def, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_faq_def, text_),
  };
  msg_faq_def_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_faq_def_descriptor_,
      msg_faq_def::default_instance_,
      msg_faq_def_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_faq_def, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_faq_def, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_faq_def));
  packetc2w_req_faq_descriptor_ = file->message_type(29);
  static const int packetc2w_req_faq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_faq, packet_id_),
  };
  packetc2w_req_faq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_faq_descriptor_,
      packetc2w_req_faq::default_instance_,
      packetc2w_req_faq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_faq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_faq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_faq));
  packetw2c_req_faq_result_descriptor_ = file->message_type(30);
  static const int packetw2c_req_faq_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_faq_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_faq_result, faq_list_),
  };
  packetw2c_req_faq_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_req_faq_result_descriptor_,
      packetw2c_req_faq_result::default_instance_,
      packetw2c_req_faq_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_faq_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_faq_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_req_faq_result));
  packetc2w_req_faq_detail_descriptor_ = file->message_type(31);
  static const int packetc2w_req_faq_detail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_faq_detail, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_faq_detail, index_),
  };
  packetc2w_req_faq_detail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_faq_detail_descriptor_,
      packetc2w_req_faq_detail::default_instance_,
      packetc2w_req_faq_detail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_faq_detail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_faq_detail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_faq_detail));
  packetw2c_req_faq_detail_result_descriptor_ = file->message_type(32);
  static const int packetw2c_req_faq_detail_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_faq_detail_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_faq_detail_result, faq_),
  };
  packetw2c_req_faq_detail_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_req_faq_detail_result_descriptor_,
      packetw2c_req_faq_detail_result::default_instance_,
      packetw2c_req_faq_detail_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_faq_detail_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_faq_detail_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_req_faq_detail_result));
  packetc2w_req_cs_contact_descriptor_ = file->message_type(33);
  static const int packetc2w_req_cs_contact_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_cs_contact, packet_id_),
  };
  packetc2w_req_cs_contact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_cs_contact_descriptor_,
      packetc2w_req_cs_contact::default_instance_,
      packetc2w_req_cs_contact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_cs_contact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_cs_contact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_cs_contact));
  packetw2c_req_cs_contact_result_descriptor_ = file->message_type(34);
  static const int packetw2c_req_cs_contact_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_cs_contact_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_cs_contact_result, qq_),
  };
  packetw2c_req_cs_contact_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_req_cs_contact_result_descriptor_,
      packetw2c_req_cs_contact_result::default_instance_,
      packetw2c_req_cs_contact_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_cs_contact_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_cs_contact_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_req_cs_contact_result));
  msg_suggest_descriptor_ = file->message_type(35);
  static const int msg_suggest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_suggest, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_suggest, time_),
  };
  msg_suggest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_suggest_descriptor_,
      msg_suggest::default_instance_,
      msg_suggest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_suggest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_suggest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_suggest));
  packetc2w_suggestion_descriptor_ = file->message_type(36);
  static const int packetc2w_suggestion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_suggestion, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_suggestion, text_),
  };
  packetc2w_suggestion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_suggestion_descriptor_,
      packetc2w_suggestion::default_instance_,
      packetc2w_suggestion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_suggestion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_suggestion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_suggestion));
  packetw2c_suggestion_result_descriptor_ = file->message_type(37);
  static const int packetw2c_suggestion_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_suggestion_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_suggestion_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_suggestion_result, suggest_),
  };
  packetw2c_suggestion_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_suggestion_result_descriptor_,
      packetw2c_suggestion_result::default_instance_,
      packetw2c_suggestion_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_suggestion_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_suggestion_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_suggestion_result));
  packetc2w_req_suggest_descriptor_ = file->message_type(38);
  static const int packetc2w_req_suggest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_suggest, packet_id_),
  };
  packetc2w_req_suggest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_suggest_descriptor_,
      packetc2w_req_suggest::default_instance_,
      packetc2w_req_suggest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_suggest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_suggest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_suggest));
  packetw2c_req_suggest_result_descriptor_ = file->message_type(39);
  static const int packetw2c_req_suggest_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_suggest_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_suggest_result, list_),
  };
  packetw2c_req_suggest_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_req_suggest_result_descriptor_,
      packetw2c_req_suggest_result::default_instance_,
      packetw2c_req_suggest_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_suggest_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_suggest_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_req_suggest_result));
  packetc2w_req_sync_gold_descriptor_ = file->message_type(40);
  static const int packetc2w_req_sync_gold_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_sync_gold, packet_id_),
  };
  packetc2w_req_sync_gold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_sync_gold_descriptor_,
      packetc2w_req_sync_gold::default_instance_,
      packetc2w_req_sync_gold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_sync_gold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_sync_gold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_sync_gold));
  packetw2c_req_sync_gold_result_descriptor_ = file->message_type(41);
  static const int packetw2c_req_sync_gold_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_sync_gold_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_sync_gold_result, gold_),
  };
  packetw2c_req_sync_gold_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_req_sync_gold_result_descriptor_,
      packetw2c_req_sync_gold_result::default_instance_,
      packetw2c_req_sync_gold_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_sync_gold_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_sync_gold_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_req_sync_gold_result));
  packetw2c_notice_descriptor_ = file->message_type(42);
  static const int packetw2c_notice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notice, packet_id_),
  };
  packetw2c_notice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_notice_descriptor_,
      packetw2c_notice::default_instance_,
      packetw2c_notice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_notice));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client2world_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_player_connect_descriptor_, &packetc2w_player_connect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_player_connect_result_descriptor_, &packetw2c_player_connect_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_c2w_timesync_descriptor_, &packet_c2w_timesync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_w2c_timesync_result_descriptor_, &packet_w2c_timesync_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_ask_login_descriptor_, &packetc2w_ask_login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_game_info_descriptor_, &msg_game_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_ask_login_result_descriptor_, &packetw2c_ask_login_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_enter_game_descriptor_, &packetc2w_enter_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_enter_game_result_descriptor_, &packetw2c_enter_game_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_gm_command_descriptor_, &packetc2w_gm_command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_gm_command_result_descriptor_, &packetw2c_gm_command_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_leave_game_descriptor_, &packetc2w_leave_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_leave_game_result_descriptor_, &packetw2c_leave_game_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_player_kick_descriptor_, &packetw2c_player_kick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_get_gamelist_descriptor_, &packetc2w_get_gamelist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_get_gamelist_result_descriptor_, &packetw2c_get_gamelist_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_bind_reward_descriptor_, &packetw2c_bind_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_some_info_descriptor_, &msg_some_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_ask_message_descriptor_, &packetc2w_ask_message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_ask_message_result_descriptor_, &packetw2c_ask_message_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_delete_message_descriptor_, &packetc2w_delete_message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_delete_message_result_descriptor_, &packetw2c_delete_message_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_read_message_descriptor_, &packetc2w_read_message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_read_message_result_descriptor_, &packetw2c_read_message_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_picture_verify_descriptor_, &packetw2c_picture_verify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_picture_verify_result_descriptor_, &packetc2w_picture_verify_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_ask_report_account_descriptor_, &packetc2w_ask_report_account::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_ask_report_account_result_descriptor_, &packetw2c_ask_report_account_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_faq_def_descriptor_, &msg_faq_def::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_faq_descriptor_, &packetc2w_req_faq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_req_faq_result_descriptor_, &packetw2c_req_faq_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_faq_detail_descriptor_, &packetc2w_req_faq_detail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_req_faq_detail_result_descriptor_, &packetw2c_req_faq_detail_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_cs_contact_descriptor_, &packetc2w_req_cs_contact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_req_cs_contact_result_descriptor_, &packetw2c_req_cs_contact_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_suggest_descriptor_, &msg_suggest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_suggestion_descriptor_, &packetc2w_suggestion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_suggestion_result_descriptor_, &packetw2c_suggestion_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_suggest_descriptor_, &packetc2w_req_suggest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_req_suggest_result_descriptor_, &packetw2c_req_suggest_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_sync_gold_descriptor_, &packetc2w_req_sync_gold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_req_sync_gold_result_descriptor_, &packetw2c_req_sync_gold_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_notice_descriptor_, &packetw2c_notice::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client2world_5fprotocol_2eproto() {
  delete packetc2w_player_connect::default_instance_;
  delete packetc2w_player_connect_reflection_;
  delete packetw2c_player_connect_result::default_instance_;
  delete packetw2c_player_connect_result_reflection_;
  delete packet_c2w_timesync::default_instance_;
  delete packet_c2w_timesync_reflection_;
  delete packet_w2c_timesync_result::default_instance_;
  delete packet_w2c_timesync_result_reflection_;
  delete packetc2w_ask_login::default_instance_;
  delete packetc2w_ask_login_reflection_;
  delete msg_game_info::default_instance_;
  delete msg_game_info_reflection_;
  delete packetw2c_ask_login_result::default_instance_;
  delete packetw2c_ask_login_result_reflection_;
  delete packetc2w_enter_game::default_instance_;
  delete packetc2w_enter_game_reflection_;
  delete packetw2c_enter_game_result::default_instance_;
  delete packetw2c_enter_game_result_reflection_;
  delete packetc2w_gm_command::default_instance_;
  delete packetc2w_gm_command_reflection_;
  delete packetw2c_gm_command_result::default_instance_;
  delete packetw2c_gm_command_result_reflection_;
  delete packetc2w_leave_game::default_instance_;
  delete packetc2w_leave_game_reflection_;
  delete packetw2c_leave_game_result::default_instance_;
  delete packetw2c_leave_game_result_reflection_;
  delete packetw2c_player_kick::default_instance_;
  delete packetw2c_player_kick_reflection_;
  delete packetc2w_get_gamelist::default_instance_;
  delete packetc2w_get_gamelist_reflection_;
  delete packetw2c_get_gamelist_result::default_instance_;
  delete packetw2c_get_gamelist_result_reflection_;
  delete packetw2c_bind_reward::default_instance_;
  delete packetw2c_bind_reward_reflection_;
  delete msg_some_info::default_instance_;
  delete msg_some_info_reflection_;
  delete packetc2w_ask_message::default_instance_;
  delete packetc2w_ask_message_reflection_;
  delete packetw2c_ask_message_result::default_instance_;
  delete packetw2c_ask_message_result_reflection_;
  delete packetc2w_delete_message::default_instance_;
  delete packetc2w_delete_message_reflection_;
  delete packetw2c_delete_message_result::default_instance_;
  delete packetw2c_delete_message_result_reflection_;
  delete packetc2w_read_message::default_instance_;
  delete packetc2w_read_message_reflection_;
  delete packetw2c_read_message_result::default_instance_;
  delete packetw2c_read_message_result_reflection_;
  delete packetw2c_picture_verify::default_instance_;
  delete packetw2c_picture_verify_reflection_;
  delete packetc2w_picture_verify_result::default_instance_;
  delete packetc2w_picture_verify_result_reflection_;
  delete packetc2w_ask_report_account::default_instance_;
  delete packetc2w_ask_report_account_reflection_;
  delete packetw2c_ask_report_account_result::default_instance_;
  delete packetw2c_ask_report_account_result_reflection_;
  delete msg_faq_def::default_instance_;
  delete msg_faq_def_reflection_;
  delete packetc2w_req_faq::default_instance_;
  delete packetc2w_req_faq_reflection_;
  delete packetw2c_req_faq_result::default_instance_;
  delete packetw2c_req_faq_result_reflection_;
  delete packetc2w_req_faq_detail::default_instance_;
  delete packetc2w_req_faq_detail_reflection_;
  delete packetw2c_req_faq_detail_result::default_instance_;
  delete packetw2c_req_faq_detail_result_reflection_;
  delete packetc2w_req_cs_contact::default_instance_;
  delete packetc2w_req_cs_contact_reflection_;
  delete packetw2c_req_cs_contact_result::default_instance_;
  delete packetw2c_req_cs_contact_result_reflection_;
  delete msg_suggest::default_instance_;
  delete msg_suggest_reflection_;
  delete packetc2w_suggestion::default_instance_;
  delete packetc2w_suggestion_reflection_;
  delete packetw2c_suggestion_result::default_instance_;
  delete packetw2c_suggestion_result_reflection_;
  delete packetc2w_req_suggest::default_instance_;
  delete packetc2w_req_suggest_reflection_;
  delete packetw2c_req_suggest_result::default_instance_;
  delete packetw2c_req_suggest_result_reflection_;
  delete packetc2w_req_sync_gold::default_instance_;
  delete packetc2w_req_sync_gold_reflection_;
  delete packetw2c_req_sync_gold_result::default_instance_;
  delete packetw2c_req_sync_gold_result_reflection_;
  delete packetw2c_notice::default_instance_;
  delete packetw2c_notice_reflection_;
}

void protobuf_AddDesc_client2world_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client2world_protocols::protobuf_AddDesc_client2world_5fmsg_5ftype_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033client2world_protocol.proto\022\026client2wo"
    "rld_protocols\032\033client2world_msg_type.pro"
    "to\032\022msg_type_def.proto\032\022msg_info_def.pro"
    "to\"\211\002\n\030packetc2w_player_connect\022V\n\tpacke"
    "t_id\030\001 \001(\0162).client2world_protocols.e_se"
    "rver_msg_type:\030e_mst_c2w_player_connect\022"
    "\017\n\007account\030\002 \001(\t\022\r\n\005token\030\003 \001(\t\022\014\n\004sign\030"
    "\004 \001(\t\022\020\n\010platform\030\005 \001(\t\022\026\n\016login_platfor"
    "m\030\006 \001(\t\022\024\n\014machine_code\030\007 \001(\t\022\024\n\014machine"
    "_type\030\010 \001(\t\022\021\n\tchannelid\030\t \001(\005\"\307\001\n\037packe"
    "tw2c_player_connect_result\022]\n\tpacket_id\030"
    "\001 \001(\0162).client2world_protocols.e_server_"
    "msg_type:\037e_mst_w2c_player_connect_resul"
    "t\022\021\n\006result\030\002 \001(\005:\0012\022\022\n\nservertime\030\003 \001(\005"
    "\022\021\n\006gaming\030\004 \001(\005:\0010\022\013\n\003ver\030\005 \001(\t\"g\n\023pack"
    "et_c2w_timesync\022P\n\tpacket_id\030\001 \001(\0162).cli"
    "ent2world_protocols.e_server_msg_type:\022e"
    "_mst_c2w_timesync\"\212\001\n\032packet_w2c_timesyn"
    "c_result\022W\n\tpacket_id\030\001 \001(\0162).client2wor"
    "ld_protocols.e_server_msg_type:\031e_mst_w2"
    "c_timesync_result\022\023\n\013server_time\030\002 \001(\005\"g"
    "\n\023packetc2w_ask_login\022P\n\tpacket_id\030\001 \001(\016"
    "2).client2world_protocols.e_server_msg_t"
    "ype:\022e_mst_c2w_asklogin\"c\n\rmsg_game_info"
    "\022\016\n\006gameid\030\001 \001(\005\022\017\n\007gamever\030\002 \001(\005\022\024\n\014cur"
    "OnlineNum\030\003 \001(\005\022\r\n\005isHot\030\004 \001(\010\022\014\n\004sort\030\005"
    " \001(\005\"\370\001\n\032packetw2c_ask_login_result\022W\n\tp"
    "acket_id\030\001 \001(\0162).client2world_protocols."
    "e_server_msg_type:\031e_mst_w2c_asklogin_re"
    "sult\0224\n\014account_info\030\002 \001(\0132\036.msg_info_de"
    "f.msg_account_info\0228\n\tgame_list\030\003 \003(\0132%."
    "client2world_protocols.msg_game_info\022\021\n\006"
    "gaming\030\004 \001(\005:\0010\"\237\001\n\024packetc2w_enter_game"
    "\022R\n\tpacket_id\030\001 \001(\0162).client2world_proto"
    "cols.e_server_msg_type:\024e_mst_c2w_enter_"
    "game\022\016\n\006gameid\030\002 \001(\005\022\017\n\007gamever\030\003 \001(\005\022\022\n"
    "\006roomid\030\004 \001(\005:\002-1\"\264\001\n\033packetw2c_enter_ga"
    "me_result\022Y\n\tpacket_id\030\001 \001(\0162).client2wo"
    "rld_protocols.e_server_msg_type:\033e_mst_w"
    "2c_enter_game_result\022:\n\006result\030\002 \001(\0162\036.m"
    "sg_type_def.e_msg_result_def:\ne_rmt_fail"
    "\"x\n\024packetc2w_gm_command\022O\n\tpacket_id\030\001 "
    "\001(\0162).client2world_protocols.e_server_ms"
    "g_type:\021e_mst_c2w_command\022\017\n\007command\030\002 \001"
    "(\t\"\261\001\n\033packetw2c_gm_command_result\022V\n\tpa"
    "cket_id\030\001 \001(\0162).client2world_protocols.e"
    "_server_msg_type:\030e_mst_w2c_command_resu"
    "lt\022:\n\006result\030\002 \001(\0162\036.msg_type_def.e_msg_"
    "result_def:\ne_rmt_fail\"j\n\024packetc2w_leav"
    "e_game\022R\n\tpacket_id\030\001 \001(\0162).client2world"
    "_protocols.e_server_msg_type:\024e_mst_c2w_"
    "leave_game\"\221\001\n\033packetw2c_leave_game_resu"
    "lt\022Y\n\tpacket_id\030\001 \001(\0162).client2world_pro"
    "tocols.e_server_msg_type:\033e_mst_w2c_leav"
    "e_game_result\022\027\n\010shutdown\030\002 \001(\010:\005false\"\202"
    "\001\n\025packetw2c_player_kick\022S\n\tpacket_id\030\001 "
    "\001(\0162).client2world_protocols.e_server_ms"
    "g_type:\025e_mst_w2c_player_kick\022\024\n\tkick_ty"
    "pe\030\002 \001(\005:\0010\"n\n\026packetc2w_get_gamelist\022T\n"
    "\tpacket_id\030\001 \001(\0162).client2world_protocol"
    "s.e_server_msg_type:\026e_mst_c2w_get_gamel"
    "ist\"\266\001\n\035packetw2c_get_gamelist_result\022[\n"
    "\tpacket_id\030\001 \001(\0162).client2world_protocol"
    "s.e_server_msg_type:\035e_mst_w2c_get_gamel"
    "ist_result\0228\n\tgame_list\030\002 \003(\0132%.client2w"
    "orld_protocols.msg_game_info\"\201\001\n\025packetw"
    "2c_bind_reward\022S\n\tpacket_id\030\001 \001(\0162).clie"
    "nt2world_protocols.e_server_msg_type:\025e_"
    "mst_w2c_bind_reward\022\023\n\013reward_gold\030\002 \001(\005"
    "\"\204\001\n\rmsg_some_info\022\n\n\002id\030\001 \001(\t\022\016\n\006userId"
    "\030\002 \001(\005\022\021\n\ttimeValue\030\003 \001(\003\022\017\n\007msgInfo\030\004 \001"
    "(\t\022\014\n\004read\030\005 \001(\005\022%\n\005items\030\006 \003(\0132\026.msg_in"
    "fo_def.msg_item\"l\n\025packetc2w_ask_message"
    "\022S\n\tpacket_id\030\001 \001(\0162).client2world_proto"
    "cols.e_server_msg_type:\025e_mst_c2w_ask_me"
    "ssage\"\312\001\n\034packetw2c_ask_message_result\022Z"
    "\n\tpacket_id\030\001 \001(\0162).client2world_protoco"
    "ls.e_server_msg_type:\034e_mst_w2c_ask_mess"
    "age_result\022\025\n\006result\030\002 \001(\010:\005false\0227\n\010msg"
    "_list\030\003 \003(\0132%.client2world_protocols.msg"
    "_some_info\"\207\001\n\030packetc2w_delete_message\022"
    "V\n\tpacket_id\030\001 \001(\0162).client2world_protoc"
    "ols.e_server_msg_type:\030e_mst_c2w_delete_"
    "message\022\023\n\013delete_list\030\002 \003(\t\"\227\001\n\037packetw"
    "2c_delete_message_result\022]\n\tpacket_id\030\001 "
    "\001(\0162).client2world_protocols.e_server_ms"
    "g_type:\037e_mst_w2c_delete_message_result\022"
    "\025\n\006result\030\002 \001(\010:\005false\"z\n\026packetc2w_read"
    "_message\022T\n\tpacket_id\030\001 \001(\0162).client2wor"
    "ld_protocols.e_server_msg_type:\026e_mst_c2"
    "w_read_message\022\n\n\002id\030\002 \001(\t\"\304\001\n\035packetw2c"
    "_read_message_result\022[\n\tpacket_id\030\001 \001(\0162"
    ").client2world_protocols.e_server_msg_ty"
    "pe:\035e_mst_w2c_read_message_result\022:\n\006res"
    "ult\030\002 \001(\0162\036.msg_type_def.e_msg_result_de"
    "f:\ne_rmt_fail\022\n\n\002id\030\003 \001(\t\"r\n\030packetw2c_p"
    "icture_verify\022V\n\tpacket_id\030\001 \001(\0162).clien"
    "t2world_protocols.e_server_msg_type:\030e_m"
    "st_w2c_picture_verify\"\222\001\n\037packetc2w_pict"
    "ure_verify_result\022]\n\tpacket_id\030\001 \001(\0162).c"
    "lient2world_protocols.e_server_msg_type:"
    "\037e_mst_c2w_picture_verify_result\022\020\n\010vali"
    "date\030\002 \001(\t\"z\n\034packetc2w_ask_report_accou"
    "nt\022Z\n\tpacket_id\030\001 \001(\0162).client2world_pro"
    "tocols.e_server_msg_type:\034e_mst_c2w_ask_"
    "report_account\"\231\001\n#packetw2c_ask_report_"
    "account_result\022a\n\tpacket_id\030\001 \001(\0162).clie"
    "nt2world_protocols.e_server_msg_type:#e_"
    "mst_w2c_ask_report_account_result\022\017\n\007acc"
    "ount\030\002 \001(\t\"*\n\013msg_faq_def\022\r\n\005index\030\001 \001(\005"
    "\022\014\n\004text\030\002 \001(\t\"d\n\021packetc2w_req_faq\022O\n\tp"
    "acket_id\030\001 \001(\0162).client2world_protocols."
    "e_server_msg_type:\021e_mst_c2w_req_faq\"\251\001\n"
    "\030packetw2c_req_faq_result\022V\n\tpacket_id\030\001"
    " \001(\0162).client2world_protocols.e_server_m"
    "sg_type:\030e_mst_w2c_req_faq_result\0225\n\010faq"
    "_list\030\002 \003(\0132#.client2world_protocols.msg"
    "_faq_def\"\201\001\n\030packetc2w_req_faq_detail\022V\n"
    "\tpacket_id\030\001 \001(\0162).client2world_protocol"
    "s.e_server_msg_type:\030e_mst_c2w_req_faq_d"
    "etail\022\r\n\005index\030\002 \001(\005\"\262\001\n\037packetw2c_req_f"
    "aq_detail_result\022]\n\tpacket_id\030\001 \001(\0162).cl"
    "ient2world_protocols.e_server_msg_type:\037"
    "e_mst_w2c_req_faq_detail_result\0220\n\003faq\030\002"
    " \001(\0132#.client2world_protocols.msg_faq_de"
    "f\"r\n\030packetc2w_req_cs_contact\022V\n\tpacket_"
    "id\030\001 \001(\0162).client2world_protocols.e_serv"
    "er_msg_type:\030e_mst_c2w_req_cs_contact\"\214\001"
    "\n\037packetw2c_req_cs_contact_result\022]\n\tpac"
    "ket_id\030\001 \001(\0162).client2world_protocols.e_"
    "server_msg_type:\037e_mst_w2c_req_cs_contac"
    "t_result\022\n\n\002qq\030\002 \001(\t\")\n\013msg_suggest\022\014\n\004t"
    "ext\030\001 \001(\t\022\014\n\004time\030\002 \001(\003\"x\n\024packetc2w_sug"
    "gestion\022R\n\tpacket_id\030\001 \001(\0162).client2worl"
    "d_protocols.e_server_msg_type:\024e_mst_c2w"
    "_suggestion\022\014\n\004text\030\002 \001(\t\"\352\001\n\033packetw2c_"
    "suggestion_result\022Y\n\tpacket_id\030\001 \001(\0162).c"
    "lient2world_protocols.e_server_msg_type:"
    "\033e_mst_w2c_suggestion_result\022:\n\006result\030\002"
    " \001(\0162\036.msg_type_def.e_msg_result_def:\ne_"
    "rmt_fail\0224\n\007suggest\030\003 \001(\0132#.client2world"
    "_protocols.msg_suggest\"l\n\025packetc2w_req_"
    "suggest\022S\n\tpacket_id\030\001 \001(\0162).client2worl"
    "d_protocols.e_server_msg_type:\025e_mst_c2w"
    "_req_suggest\"\255\001\n\034packetw2c_req_suggest_r"
    "esult\022Z\n\tpacket_id\030\001 \001(\0162).client2world_"
    "protocols.e_server_msg_type:\034e_mst_w2c_r"
    "eq_suggest_result\0221\n\004list\030\002 \003(\0132#.client"
    "2world_protocols.msg_suggest\"p\n\027packetc2"
    "w_req_sync_gold\022U\n\tpacket_id\030\001 \001(\0162).cli"
    "ent2world_protocols.e_server_msg_type:\027e"
    "_mst_c2w_req_sync_gold\"\214\001\n\036packetw2c_req"
    "_sync_gold_result\022\\\n\tpacket_id\030\001 \001(\0162).c"
    "lient2world_protocols.e_server_msg_type:"
    "\036e_mst_w2c_req_sync_gold_result\022\014\n\004gold\030"
    "\002 \001(\003\"b\n\020packetw2c_notice\022N\n\tpacket_id\030\001"
    " \001(\0162).client2world_protocols.e_server_m"
    "sg_type:\020e_mst_w2c_notice", 6305);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client2world_protocol.proto", &protobuf_RegisterTypes);
  packetc2w_player_connect::default_instance_ = new packetc2w_player_connect();
  packetw2c_player_connect_result::default_instance_ = new packetw2c_player_connect_result();
  packet_c2w_timesync::default_instance_ = new packet_c2w_timesync();
  packet_w2c_timesync_result::default_instance_ = new packet_w2c_timesync_result();
  packetc2w_ask_login::default_instance_ = new packetc2w_ask_login();
  msg_game_info::default_instance_ = new msg_game_info();
  packetw2c_ask_login_result::default_instance_ = new packetw2c_ask_login_result();
  packetc2w_enter_game::default_instance_ = new packetc2w_enter_game();
  packetw2c_enter_game_result::default_instance_ = new packetw2c_enter_game_result();
  packetc2w_gm_command::default_instance_ = new packetc2w_gm_command();
  packetw2c_gm_command_result::default_instance_ = new packetw2c_gm_command_result();
  packetc2w_leave_game::default_instance_ = new packetc2w_leave_game();
  packetw2c_leave_game_result::default_instance_ = new packetw2c_leave_game_result();
  packetw2c_player_kick::default_instance_ = new packetw2c_player_kick();
  packetc2w_get_gamelist::default_instance_ = new packetc2w_get_gamelist();
  packetw2c_get_gamelist_result::default_instance_ = new packetw2c_get_gamelist_result();
  packetw2c_bind_reward::default_instance_ = new packetw2c_bind_reward();
  msg_some_info::default_instance_ = new msg_some_info();
  packetc2w_ask_message::default_instance_ = new packetc2w_ask_message();
  packetw2c_ask_message_result::default_instance_ = new packetw2c_ask_message_result();
  packetc2w_delete_message::default_instance_ = new packetc2w_delete_message();
  packetw2c_delete_message_result::default_instance_ = new packetw2c_delete_message_result();
  packetc2w_read_message::default_instance_ = new packetc2w_read_message();
  packetw2c_read_message_result::default_instance_ = new packetw2c_read_message_result();
  packetw2c_picture_verify::default_instance_ = new packetw2c_picture_verify();
  packetc2w_picture_verify_result::default_instance_ = new packetc2w_picture_verify_result();
  packetc2w_ask_report_account::default_instance_ = new packetc2w_ask_report_account();
  packetw2c_ask_report_account_result::default_instance_ = new packetw2c_ask_report_account_result();
  msg_faq_def::default_instance_ = new msg_faq_def();
  packetc2w_req_faq::default_instance_ = new packetc2w_req_faq();
  packetw2c_req_faq_result::default_instance_ = new packetw2c_req_faq_result();
  packetc2w_req_faq_detail::default_instance_ = new packetc2w_req_faq_detail();
  packetw2c_req_faq_detail_result::default_instance_ = new packetw2c_req_faq_detail_result();
  packetc2w_req_cs_contact::default_instance_ = new packetc2w_req_cs_contact();
  packetw2c_req_cs_contact_result::default_instance_ = new packetw2c_req_cs_contact_result();
  msg_suggest::default_instance_ = new msg_suggest();
  packetc2w_suggestion::default_instance_ = new packetc2w_suggestion();
  packetw2c_suggestion_result::default_instance_ = new packetw2c_suggestion_result();
  packetc2w_req_suggest::default_instance_ = new packetc2w_req_suggest();
  packetw2c_req_suggest_result::default_instance_ = new packetw2c_req_suggest_result();
  packetc2w_req_sync_gold::default_instance_ = new packetc2w_req_sync_gold();
  packetw2c_req_sync_gold_result::default_instance_ = new packetw2c_req_sync_gold_result();
  packetw2c_notice::default_instance_ = new packetw2c_notice();
  packetc2w_player_connect::default_instance_->InitAsDefaultInstance();
  packetw2c_player_connect_result::default_instance_->InitAsDefaultInstance();
  packet_c2w_timesync::default_instance_->InitAsDefaultInstance();
  packet_w2c_timesync_result::default_instance_->InitAsDefaultInstance();
  packetc2w_ask_login::default_instance_->InitAsDefaultInstance();
  msg_game_info::default_instance_->InitAsDefaultInstance();
  packetw2c_ask_login_result::default_instance_->InitAsDefaultInstance();
  packetc2w_enter_game::default_instance_->InitAsDefaultInstance();
  packetw2c_enter_game_result::default_instance_->InitAsDefaultInstance();
  packetc2w_gm_command::default_instance_->InitAsDefaultInstance();
  packetw2c_gm_command_result::default_instance_->InitAsDefaultInstance();
  packetc2w_leave_game::default_instance_->InitAsDefaultInstance();
  packetw2c_leave_game_result::default_instance_->InitAsDefaultInstance();
  packetw2c_player_kick::default_instance_->InitAsDefaultInstance();
  packetc2w_get_gamelist::default_instance_->InitAsDefaultInstance();
  packetw2c_get_gamelist_result::default_instance_->InitAsDefaultInstance();
  packetw2c_bind_reward::default_instance_->InitAsDefaultInstance();
  msg_some_info::default_instance_->InitAsDefaultInstance();
  packetc2w_ask_message::default_instance_->InitAsDefaultInstance();
  packetw2c_ask_message_result::default_instance_->InitAsDefaultInstance();
  packetc2w_delete_message::default_instance_->InitAsDefaultInstance();
  packetw2c_delete_message_result::default_instance_->InitAsDefaultInstance();
  packetc2w_read_message::default_instance_->InitAsDefaultInstance();
  packetw2c_read_message_result::default_instance_->InitAsDefaultInstance();
  packetw2c_picture_verify::default_instance_->InitAsDefaultInstance();
  packetc2w_picture_verify_result::default_instance_->InitAsDefaultInstance();
  packetc2w_ask_report_account::default_instance_->InitAsDefaultInstance();
  packetw2c_ask_report_account_result::default_instance_->InitAsDefaultInstance();
  msg_faq_def::default_instance_->InitAsDefaultInstance();
  packetc2w_req_faq::default_instance_->InitAsDefaultInstance();
  packetw2c_req_faq_result::default_instance_->InitAsDefaultInstance();
  packetc2w_req_faq_detail::default_instance_->InitAsDefaultInstance();
  packetw2c_req_faq_detail_result::default_instance_->InitAsDefaultInstance();
  packetc2w_req_cs_contact::default_instance_->InitAsDefaultInstance();
  packetw2c_req_cs_contact_result::default_instance_->InitAsDefaultInstance();
  msg_suggest::default_instance_->InitAsDefaultInstance();
  packetc2w_suggestion::default_instance_->InitAsDefaultInstance();
  packetw2c_suggestion_result::default_instance_->InitAsDefaultInstance();
  packetc2w_req_suggest::default_instance_->InitAsDefaultInstance();
  packetw2c_req_suggest_result::default_instance_->InitAsDefaultInstance();
  packetc2w_req_sync_gold::default_instance_->InitAsDefaultInstance();
  packetw2c_req_sync_gold_result::default_instance_->InitAsDefaultInstance();
  packetw2c_notice::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client2world_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client2world_5fprotocol_2eproto {
  StaticDescriptorInitializer_client2world_5fprotocol_2eproto() {
    protobuf_AddDesc_client2world_5fprotocol_2eproto();
  }
} static_descriptor_initializer_client2world_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2w_player_connect::kPacketIdFieldNumber;
const int packetc2w_player_connect::kAccountFieldNumber;
const int packetc2w_player_connect::kTokenFieldNumber;
const int packetc2w_player_connect::kSignFieldNumber;
const int packetc2w_player_connect::kPlatformFieldNumber;
const int packetc2w_player_connect::kLoginPlatformFieldNumber;
const int packetc2w_player_connect::kMachineCodeFieldNumber;
const int packetc2w_player_connect::kMachineTypeFieldNumber;
const int packetc2w_player_connect::kChannelidFieldNumber;
#endif  // !_MSC_VER

packetc2w_player_connect::packetc2w_player_connect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_player_connect::InitAsDefaultInstance() {
}

packetc2w_player_connect::packetc2w_player_connect(const packetc2w_player_connect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_player_connect::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5001;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machine_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machine_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channelid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_player_connect::~packetc2w_player_connect() {
  SharedDtor();
}

void packetc2w_player_connect::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (login_platform_ != &::google::protobuf::internal::kEmptyString) {
    delete login_platform_;
  }
  if (machine_code_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_code_;
  }
  if (machine_type_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_type_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_player_connect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_player_connect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_player_connect_descriptor_;
}

const packetc2w_player_connect& packetc2w_player_connect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_player_connect* packetc2w_player_connect::default_instance_ = NULL;

packetc2w_player_connect* packetc2w_player_connect::New() const {
  return new packetc2w_player_connect;
}

void packetc2w_player_connect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5001;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_login_platform()) {
      if (login_platform_ != &::google::protobuf::internal::kEmptyString) {
        login_platform_->clear();
      }
    }
    if (has_machine_code()) {
      if (machine_code_ != &::google::protobuf::internal::kEmptyString) {
        machine_code_->clear();
      }
    }
    if (has_machine_type()) {
      if (machine_type_ != &::google::protobuf::internal::kEmptyString) {
        machine_type_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    channelid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_player_connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_connect];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sign;
        break;
      }

      // optional string sign = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_platform;
        break;
      }

      // optional string platform = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_login_platform;
        break;
      }

      // optional string login_platform = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login_platform().data(), this->login_platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_machine_code;
        break;
      }

      // optional string machine_code = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_code().data(), this->machine_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_machine_type;
        break;
      }

      // optional string machine_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_type().data(), this->machine_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_channelid;
        break;
      }

      // optional int32 channelid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_player_connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_connect];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(), output);
  }

  // optional string sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sign(), output);
  }

  // optional string platform = 5;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->platform(), output);
  }

  // optional string login_platform = 6;
  if (has_login_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_platform().data(), this->login_platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->login_platform(), output);
  }

  // optional string machine_code = 7;
  if (has_machine_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_code().data(), this->machine_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->machine_code(), output);
  }

  // optional string machine_type = 8;
  if (has_machine_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_type().data(), this->machine_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->machine_type(), output);
  }

  // optional int32 channelid = 9;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->channelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_player_connect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_connect];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // optional string sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sign(), target);
  }

  // optional string platform = 5;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->platform(), target);
  }

  // optional string login_platform = 6;
  if (has_login_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_platform().data(), this->login_platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->login_platform(), target);
  }

  // optional string machine_code = 7;
  if (has_machine_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_code().data(), this->machine_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->machine_code(), target);
  }

  // optional string machine_type = 8;
  if (has_machine_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_type().data(), this->machine_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->machine_type(), target);
  }

  // optional int32 channelid = 9;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->channelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_player_connect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_connect];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string sign = 4;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional string platform = 5;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string login_platform = 6;
    if (has_login_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_platform());
    }

    // optional string machine_code = 7;
    if (has_machine_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_code());
    }

    // optional string machine_type = 8;
    if (has_machine_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 channelid = 9;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_player_connect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_player_connect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_player_connect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_player_connect::MergeFrom(const packetc2w_player_connect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_login_platform()) {
      set_login_platform(from.login_platform());
    }
    if (from.has_machine_code()) {
      set_machine_code(from.machine_code());
    }
    if (from.has_machine_type()) {
      set_machine_type(from.machine_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_player_connect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_player_connect::CopyFrom(const packetc2w_player_connect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_player_connect::IsInitialized() const {

  return true;
}

void packetc2w_player_connect::Swap(packetc2w_player_connect* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(account_, other->account_);
    std::swap(token_, other->token_);
    std::swap(sign_, other->sign_);
    std::swap(platform_, other->platform_);
    std::swap(login_platform_, other->login_platform_);
    std::swap(machine_code_, other->machine_code_);
    std::swap(machine_type_, other->machine_type_);
    std::swap(channelid_, other->channelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_player_connect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_player_connect_descriptor_;
  metadata.reflection = packetc2w_player_connect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_player_connect_result::kPacketIdFieldNumber;
const int packetw2c_player_connect_result::kResultFieldNumber;
const int packetw2c_player_connect_result::kServertimeFieldNumber;
const int packetw2c_player_connect_result::kGamingFieldNumber;
const int packetw2c_player_connect_result::kVerFieldNumber;
#endif  // !_MSC_VER

packetw2c_player_connect_result::packetw2c_player_connect_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_player_connect_result::InitAsDefaultInstance() {
}

packetw2c_player_connect_result::packetw2c_player_connect_result(const packetw2c_player_connect_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_player_connect_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7501;
  result_ = 2;
  servertime_ = 0;
  gaming_ = 0;
  ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_player_connect_result::~packetw2c_player_connect_result() {
  SharedDtor();
}

void packetw2c_player_connect_result::SharedDtor() {
  if (ver_ != &::google::protobuf::internal::kEmptyString) {
    delete ver_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_player_connect_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_player_connect_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_player_connect_result_descriptor_;
}

const packetw2c_player_connect_result& packetw2c_player_connect_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_player_connect_result* packetw2c_player_connect_result::default_instance_ = NULL;

packetw2c_player_connect_result* packetw2c_player_connect_result::New() const {
  return new packetw2c_player_connect_result;
}

void packetw2c_player_connect_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7501;
    result_ = 2;
    servertime_ = 0;
    gaming_ = 0;
    if (has_ver()) {
      if (ver_ != &::google::protobuf::internal::kEmptyString) {
        ver_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_player_connect_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_connect_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = 2];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_servertime;
        break;
      }

      // optional int32 servertime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gaming;
        break;
      }

      // optional int32 gaming = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gaming:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gaming_)));
          set_has_gaming();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ver;
        break;
      }

      // optional string ver = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ver().data(), this->ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_player_connect_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_connect_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2 [default = 2];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 servertime = 3;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->servertime(), output);
  }

  // optional int32 gaming = 4 [default = 0];
  if (has_gaming()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gaming(), output);
  }

  // optional string ver = 5;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_player_connect_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_connect_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2 [default = 2];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 servertime = 3;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->servertime(), target);
  }

  // optional int32 gaming = 4 [default = 0];
  if (has_gaming()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gaming(), target);
  }

  // optional string ver = 5;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_player_connect_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_connect_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2 [default = 2];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 servertime = 3;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertime());
    }

    // optional int32 gaming = 4 [default = 0];
    if (has_gaming()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gaming());
    }

    // optional string ver = 5;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_player_connect_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_player_connect_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_player_connect_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_player_connect_result::MergeFrom(const packetw2c_player_connect_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
    if (from.has_gaming()) {
      set_gaming(from.gaming());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_player_connect_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_player_connect_result::CopyFrom(const packetw2c_player_connect_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_player_connect_result::IsInitialized() const {

  return true;
}

void packetw2c_player_connect_result::Swap(packetw2c_player_connect_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(servertime_, other->servertime_);
    std::swap(gaming_, other->gaming_);
    std::swap(ver_, other->ver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_player_connect_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_player_connect_result_descriptor_;
  metadata.reflection = packetw2c_player_connect_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_c2w_timesync::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packet_c2w_timesync::packet_c2w_timesync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_c2w_timesync::InitAsDefaultInstance() {
}

packet_c2w_timesync::packet_c2w_timesync(const packet_c2w_timesync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_c2w_timesync::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5002;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_c2w_timesync::~packet_c2w_timesync() {
  SharedDtor();
}

void packet_c2w_timesync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet_c2w_timesync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_c2w_timesync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_c2w_timesync_descriptor_;
}

const packet_c2w_timesync& packet_c2w_timesync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packet_c2w_timesync* packet_c2w_timesync::default_instance_ = NULL;

packet_c2w_timesync* packet_c2w_timesync::New() const {
  return new packet_c2w_timesync;
}

void packet_c2w_timesync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5002;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_c2w_timesync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_timesync];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_c2w_timesync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_timesync];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_c2w_timesync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_timesync];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_c2w_timesync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_timesync];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_c2w_timesync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_c2w_timesync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_c2w_timesync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_c2w_timesync::MergeFrom(const packet_c2w_timesync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_c2w_timesync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_c2w_timesync::CopyFrom(const packet_c2w_timesync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_c2w_timesync::IsInitialized() const {

  return true;
}

void packet_c2w_timesync::Swap(packet_c2w_timesync* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_c2w_timesync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_c2w_timesync_descriptor_;
  metadata.reflection = packet_c2w_timesync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_w2c_timesync_result::kPacketIdFieldNumber;
const int packet_w2c_timesync_result::kServerTimeFieldNumber;
#endif  // !_MSC_VER

packet_w2c_timesync_result::packet_w2c_timesync_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_w2c_timesync_result::InitAsDefaultInstance() {
}

packet_w2c_timesync_result::packet_w2c_timesync_result(const packet_w2c_timesync_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_w2c_timesync_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7502;
  server_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_w2c_timesync_result::~packet_w2c_timesync_result() {
  SharedDtor();
}

void packet_w2c_timesync_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet_w2c_timesync_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_w2c_timesync_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_w2c_timesync_result_descriptor_;
}

const packet_w2c_timesync_result& packet_w2c_timesync_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packet_w2c_timesync_result* packet_w2c_timesync_result::default_instance_ = NULL;

packet_w2c_timesync_result* packet_w2c_timesync_result::New() const {
  return new packet_w2c_timesync_result;
}

void packet_w2c_timesync_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7502;
    server_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_w2c_timesync_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_timesync_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_time;
        break;
      }

      // optional int32 server_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_w2c_timesync_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_timesync_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 server_time = 2;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_w2c_timesync_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_timesync_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 server_time = 2;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_w2c_timesync_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_timesync_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 server_time = 2;
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_w2c_timesync_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_w2c_timesync_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_w2c_timesync_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_w2c_timesync_result::MergeFrom(const packet_w2c_timesync_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_w2c_timesync_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_w2c_timesync_result::CopyFrom(const packet_w2c_timesync_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_w2c_timesync_result::IsInitialized() const {

  return true;
}

void packet_w2c_timesync_result::Swap(packet_w2c_timesync_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(server_time_, other->server_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_w2c_timesync_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_w2c_timesync_result_descriptor_;
  metadata.reflection = packet_w2c_timesync_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_ask_login::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_ask_login::packetc2w_ask_login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_ask_login::InitAsDefaultInstance() {
}

packetc2w_ask_login::packetc2w_ask_login(const packetc2w_ask_login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_ask_login::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5003;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_ask_login::~packetc2w_ask_login() {
  SharedDtor();
}

void packetc2w_ask_login::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_ask_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_ask_login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_ask_login_descriptor_;
}

const packetc2w_ask_login& packetc2w_ask_login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_ask_login* packetc2w_ask_login::default_instance_ = NULL;

packetc2w_ask_login* packetc2w_ask_login::New() const {
  return new packetc2w_ask_login;
}

void packetc2w_ask_login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5003;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_ask_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_asklogin];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_ask_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_asklogin];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_ask_login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_asklogin];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_ask_login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_asklogin];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_ask_login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_ask_login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_ask_login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_ask_login::MergeFrom(const packetc2w_ask_login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_ask_login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_ask_login::CopyFrom(const packetc2w_ask_login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_ask_login::IsInitialized() const {

  return true;
}

void packetc2w_ask_login::Swap(packetc2w_ask_login* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_ask_login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_ask_login_descriptor_;
  metadata.reflection = packetc2w_ask_login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_game_info::kGameidFieldNumber;
const int msg_game_info::kGameverFieldNumber;
const int msg_game_info::kCurOnlineNumFieldNumber;
const int msg_game_info::kIsHotFieldNumber;
const int msg_game_info::kSortFieldNumber;
#endif  // !_MSC_VER

msg_game_info::msg_game_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_game_info::InitAsDefaultInstance() {
}

msg_game_info::msg_game_info(const msg_game_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_game_info::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gamever_ = 0;
  curonlinenum_ = 0;
  ishot_ = false;
  sort_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_game_info::~msg_game_info() {
  SharedDtor();
}

void msg_game_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_game_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_game_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_game_info_descriptor_;
}

const msg_game_info& msg_game_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

msg_game_info* msg_game_info::default_instance_ = NULL;

msg_game_info* msg_game_info::New() const {
  return new msg_game_info;
}

void msg_game_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gamever_ = 0;
    curonlinenum_ = 0;
    ishot_ = false;
    sort_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_game_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gamever;
        break;
      }

      // optional int32 gamever = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamever:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamever_)));
          set_has_gamever();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curOnlineNum;
        break;
      }

      // optional int32 curOnlineNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curOnlineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curonlinenum_)));
          set_has_curonlinenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isHot;
        break;
      }

      // optional bool isHot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishot_)));
          set_has_ishot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sort;
        break;
      }

      // optional int32 sort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_)));
          set_has_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_game_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // optional int32 gamever = 2;
  if (has_gamever()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gamever(), output);
  }

  // optional int32 curOnlineNum = 3;
  if (has_curonlinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curonlinenum(), output);
  }

  // optional bool isHot = 4;
  if (has_ishot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ishot(), output);
  }

  // optional int32 sort = 5;
  if (has_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sort(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_game_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // optional int32 gamever = 2;
  if (has_gamever()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gamever(), target);
  }

  // optional int32 curOnlineNum = 3;
  if (has_curonlinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curonlinenum(), target);
  }

  // optional bool isHot = 4;
  if (has_ishot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ishot(), target);
  }

  // optional int32 sort = 5;
  if (has_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sort(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_game_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional int32 gamever = 2;
    if (has_gamever()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamever());
    }

    // optional int32 curOnlineNum = 3;
    if (has_curonlinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curonlinenum());
    }

    // optional bool isHot = 4;
    if (has_ishot()) {
      total_size += 1 + 1;
    }

    // optional int32 sort = 5;
    if (has_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sort());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_game_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_game_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_game_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_game_info::MergeFrom(const msg_game_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gamever()) {
      set_gamever(from.gamever());
    }
    if (from.has_curonlinenum()) {
      set_curonlinenum(from.curonlinenum());
    }
    if (from.has_ishot()) {
      set_ishot(from.ishot());
    }
    if (from.has_sort()) {
      set_sort(from.sort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_game_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_game_info::CopyFrom(const msg_game_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_game_info::IsInitialized() const {

  return true;
}

void msg_game_info::Swap(msg_game_info* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gamever_, other->gamever_);
    std::swap(curonlinenum_, other->curonlinenum_);
    std::swap(ishot_, other->ishot_);
    std::swap(sort_, other->sort_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_game_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_game_info_descriptor_;
  metadata.reflection = msg_game_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_ask_login_result::kPacketIdFieldNumber;
const int packetw2c_ask_login_result::kAccountInfoFieldNumber;
const int packetw2c_ask_login_result::kGameListFieldNumber;
const int packetw2c_ask_login_result::kGamingFieldNumber;
#endif  // !_MSC_VER

packetw2c_ask_login_result::packetw2c_ask_login_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_ask_login_result::InitAsDefaultInstance() {
  account_info_ = const_cast< ::msg_info_def::msg_account_info*>(&::msg_info_def::msg_account_info::default_instance());
}

packetw2c_ask_login_result::packetw2c_ask_login_result(const packetw2c_ask_login_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_ask_login_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7503;
  account_info_ = NULL;
  gaming_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_ask_login_result::~packetw2c_ask_login_result() {
  SharedDtor();
}

void packetw2c_ask_login_result::SharedDtor() {
  if (this != default_instance_) {
    delete account_info_;
  }
}

void packetw2c_ask_login_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_ask_login_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_ask_login_result_descriptor_;
}

const packetw2c_ask_login_result& packetw2c_ask_login_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_ask_login_result* packetw2c_ask_login_result::default_instance_ = NULL;

packetw2c_ask_login_result* packetw2c_ask_login_result::New() const {
  return new packetw2c_ask_login_result;
}

void packetw2c_ask_login_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7503;
    if (has_account_info()) {
      if (account_info_ != NULL) account_info_->::msg_info_def::msg_account_info::Clear();
    }
    gaming_ = 0;
  }
  game_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_ask_login_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_asklogin_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account_info;
        break;
      }

      // optional .msg_info_def.msg_account_info account_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_game_list;
        break;
      }

      // repeated .client2world_protocols.msg_game_info game_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_game_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_game_list;
        if (input->ExpectTag(32)) goto parse_gaming;
        break;
      }

      // optional int32 gaming = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gaming:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gaming_)));
          set_has_gaming();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_ask_login_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_asklogin_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_info_def.msg_account_info account_info = 2;
  if (has_account_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account_info(), output);
  }

  // repeated .client2world_protocols.msg_game_info game_list = 3;
  for (int i = 0; i < this->game_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->game_list(i), output);
  }

  // optional int32 gaming = 4 [default = 0];
  if (has_gaming()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gaming(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_ask_login_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_asklogin_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_info_def.msg_account_info account_info = 2;
  if (has_account_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account_info(), target);
  }

  // repeated .client2world_protocols.msg_game_info game_list = 3;
  for (int i = 0; i < this->game_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->game_list(i), target);
  }

  // optional int32 gaming = 4 [default = 0];
  if (has_gaming()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gaming(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_ask_login_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_asklogin_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_info_def.msg_account_info account_info = 2;
    if (has_account_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_info());
    }

    // optional int32 gaming = 4 [default = 0];
    if (has_gaming()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gaming());
    }

  }
  // repeated .client2world_protocols.msg_game_info game_list = 3;
  total_size += 1 * this->game_list_size();
  for (int i = 0; i < this->game_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->game_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_ask_login_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_ask_login_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_ask_login_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_ask_login_result::MergeFrom(const packetw2c_ask_login_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  game_list_.MergeFrom(from.game_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_account_info()) {
      mutable_account_info()->::msg_info_def::msg_account_info::MergeFrom(from.account_info());
    }
    if (from.has_gaming()) {
      set_gaming(from.gaming());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_ask_login_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_ask_login_result::CopyFrom(const packetw2c_ask_login_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_ask_login_result::IsInitialized() const {

  return true;
}

void packetw2c_ask_login_result::Swap(packetw2c_ask_login_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(account_info_, other->account_info_);
    game_list_.Swap(&other->game_list_);
    std::swap(gaming_, other->gaming_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_ask_login_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_ask_login_result_descriptor_;
  metadata.reflection = packetw2c_ask_login_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_enter_game::kPacketIdFieldNumber;
const int packetc2w_enter_game::kGameidFieldNumber;
const int packetc2w_enter_game::kGameverFieldNumber;
const int packetc2w_enter_game::kRoomidFieldNumber;
#endif  // !_MSC_VER

packetc2w_enter_game::packetc2w_enter_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_enter_game::InitAsDefaultInstance() {
}

packetc2w_enter_game::packetc2w_enter_game(const packetc2w_enter_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_enter_game::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5004;
  gameid_ = 0;
  gamever_ = 0;
  roomid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_enter_game::~packetc2w_enter_game() {
  SharedDtor();
}

void packetc2w_enter_game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_enter_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_enter_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_enter_game_descriptor_;
}

const packetc2w_enter_game& packetc2w_enter_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_enter_game* packetc2w_enter_game::default_instance_ = NULL;

packetc2w_enter_game* packetc2w_enter_game::New() const {
  return new packetc2w_enter_game;
}

void packetc2w_enter_game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5004;
    gameid_ = 0;
    gamever_ = 0;
    roomid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_enter_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_enter_game];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // optional int32 gameid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gamever;
        break;
      }

      // optional int32 gamever = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamever:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamever_)));
          set_has_gamever();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roomid;
        break;
      }

      // optional int32 roomid = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_enter_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_enter_game];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }

  // optional int32 gamever = 3;
  if (has_gamever()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gamever(), output);
  }

  // optional int32 roomid = 4 [default = -1];
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_enter_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_enter_game];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }

  // optional int32 gamever = 3;
  if (has_gamever()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gamever(), target);
  }

  // optional int32 roomid = 4 [default = -1];
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_enter_game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_enter_game];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional int32 gamever = 3;
    if (has_gamever()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamever());
    }

    // optional int32 roomid = 4 [default = -1];
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_enter_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_enter_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_enter_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_enter_game::MergeFrom(const packetc2w_enter_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gamever()) {
      set_gamever(from.gamever());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_enter_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_enter_game::CopyFrom(const packetc2w_enter_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_enter_game::IsInitialized() const {

  return true;
}

void packetc2w_enter_game::Swap(packetc2w_enter_game* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(gameid_, other->gameid_);
    std::swap(gamever_, other->gamever_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_enter_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_enter_game_descriptor_;
  metadata.reflection = packetc2w_enter_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_enter_game_result::kPacketIdFieldNumber;
const int packetw2c_enter_game_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_enter_game_result::packetw2c_enter_game_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_enter_game_result::InitAsDefaultInstance() {
}

packetw2c_enter_game_result::packetw2c_enter_game_result(const packetw2c_enter_game_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_enter_game_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7504;
  result_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_enter_game_result::~packetw2c_enter_game_result() {
  SharedDtor();
}

void packetw2c_enter_game_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_enter_game_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_enter_game_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_enter_game_result_descriptor_;
}

const packetw2c_enter_game_result& packetw2c_enter_game_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_enter_game_result* packetw2c_enter_game_result::default_instance_ = NULL;

packetw2c_enter_game_result* packetw2c_enter_game_result::New() const {
  return new packetw2c_enter_game_result;
}

void packetw2c_enter_game_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7504;
    result_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_enter_game_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_enter_game_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_enter_game_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_enter_game_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_enter_game_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_enter_game_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_enter_game_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_enter_game_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_enter_game_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_enter_game_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_enter_game_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_enter_game_result::MergeFrom(const packetw2c_enter_game_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_enter_game_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_enter_game_result::CopyFrom(const packetw2c_enter_game_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_enter_game_result::IsInitialized() const {

  return true;
}

void packetw2c_enter_game_result::Swap(packetw2c_enter_game_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_enter_game_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_enter_game_result_descriptor_;
  metadata.reflection = packetw2c_enter_game_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_gm_command::kPacketIdFieldNumber;
const int packetc2w_gm_command::kCommandFieldNumber;
#endif  // !_MSC_VER

packetc2w_gm_command::packetc2w_gm_command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_gm_command::InitAsDefaultInstance() {
}

packetc2w_gm_command::packetc2w_gm_command(const packetc2w_gm_command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_gm_command::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5005;
  command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_gm_command::~packetc2w_gm_command() {
  SharedDtor();
}

void packetc2w_gm_command::SharedDtor() {
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    delete command_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_gm_command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_gm_command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_gm_command_descriptor_;
}

const packetc2w_gm_command& packetc2w_gm_command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_gm_command* packetc2w_gm_command::default_instance_ = NULL;

packetc2w_gm_command* packetc2w_gm_command::New() const {
  return new packetc2w_gm_command;
}

void packetc2w_gm_command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5005;
    if (has_command()) {
      if (command_ != &::google::protobuf::internal::kEmptyString) {
        command_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_gm_command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_command];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_command;
        break;
      }

      // optional string command = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_gm_command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_command];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string command = 2;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_gm_command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_command];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string command = 2;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_gm_command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_command];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string command = 2;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_gm_command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_gm_command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_gm_command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_gm_command::MergeFrom(const packetc2w_gm_command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_gm_command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_gm_command::CopyFrom(const packetc2w_gm_command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_gm_command::IsInitialized() const {

  return true;
}

void packetc2w_gm_command::Swap(packetc2w_gm_command* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_gm_command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_gm_command_descriptor_;
  metadata.reflection = packetc2w_gm_command_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_gm_command_result::kPacketIdFieldNumber;
const int packetw2c_gm_command_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_gm_command_result::packetw2c_gm_command_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_gm_command_result::InitAsDefaultInstance() {
}

packetw2c_gm_command_result::packetw2c_gm_command_result(const packetw2c_gm_command_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_gm_command_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7505;
  result_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_gm_command_result::~packetw2c_gm_command_result() {
  SharedDtor();
}

void packetw2c_gm_command_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_gm_command_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_gm_command_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_gm_command_result_descriptor_;
}

const packetw2c_gm_command_result& packetw2c_gm_command_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_gm_command_result* packetw2c_gm_command_result::default_instance_ = NULL;

packetw2c_gm_command_result* packetw2c_gm_command_result::New() const {
  return new packetw2c_gm_command_result;
}

void packetw2c_gm_command_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7505;
    result_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_gm_command_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_command_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_gm_command_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_command_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_gm_command_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_command_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_gm_command_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_command_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_gm_command_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_gm_command_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_gm_command_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_gm_command_result::MergeFrom(const packetw2c_gm_command_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_gm_command_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_gm_command_result::CopyFrom(const packetw2c_gm_command_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_gm_command_result::IsInitialized() const {

  return true;
}

void packetw2c_gm_command_result::Swap(packetw2c_gm_command_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_gm_command_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_gm_command_result_descriptor_;
  metadata.reflection = packetw2c_gm_command_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_leave_game::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_leave_game::packetc2w_leave_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_leave_game::InitAsDefaultInstance() {
}

packetc2w_leave_game::packetc2w_leave_game(const packetc2w_leave_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_leave_game::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5008;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_leave_game::~packetc2w_leave_game() {
  SharedDtor();
}

void packetc2w_leave_game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_leave_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_leave_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_leave_game_descriptor_;
}

const packetc2w_leave_game& packetc2w_leave_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_leave_game* packetc2w_leave_game::default_instance_ = NULL;

packetc2w_leave_game* packetc2w_leave_game::New() const {
  return new packetc2w_leave_game;
}

void packetc2w_leave_game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5008;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_leave_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_leave_game];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_leave_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_leave_game];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_leave_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_leave_game];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_leave_game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_leave_game];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_leave_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_leave_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_leave_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_leave_game::MergeFrom(const packetc2w_leave_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_leave_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_leave_game::CopyFrom(const packetc2w_leave_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_leave_game::IsInitialized() const {

  return true;
}

void packetc2w_leave_game::Swap(packetc2w_leave_game* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_leave_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_leave_game_descriptor_;
  metadata.reflection = packetc2w_leave_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_leave_game_result::kPacketIdFieldNumber;
const int packetw2c_leave_game_result::kShutdownFieldNumber;
#endif  // !_MSC_VER

packetw2c_leave_game_result::packetw2c_leave_game_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_leave_game_result::InitAsDefaultInstance() {
}

packetw2c_leave_game_result::packetw2c_leave_game_result(const packetw2c_leave_game_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_leave_game_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7507;
  shutdown_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_leave_game_result::~packetw2c_leave_game_result() {
  SharedDtor();
}

void packetw2c_leave_game_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_leave_game_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_leave_game_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_leave_game_result_descriptor_;
}

const packetw2c_leave_game_result& packetw2c_leave_game_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_leave_game_result* packetw2c_leave_game_result::default_instance_ = NULL;

packetw2c_leave_game_result* packetw2c_leave_game_result::New() const {
  return new packetw2c_leave_game_result;
}

void packetw2c_leave_game_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7507;
    shutdown_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_leave_game_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_leave_game_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shutdown;
        break;
      }

      // optional bool shutdown = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shutdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shutdown_)));
          set_has_shutdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_leave_game_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_leave_game_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional bool shutdown = 2 [default = false];
  if (has_shutdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->shutdown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_leave_game_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_leave_game_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional bool shutdown = 2 [default = false];
  if (has_shutdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->shutdown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_leave_game_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_leave_game_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool shutdown = 2 [default = false];
    if (has_shutdown()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_leave_game_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_leave_game_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_leave_game_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_leave_game_result::MergeFrom(const packetw2c_leave_game_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_shutdown()) {
      set_shutdown(from.shutdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_leave_game_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_leave_game_result::CopyFrom(const packetw2c_leave_game_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_leave_game_result::IsInitialized() const {

  return true;
}

void packetw2c_leave_game_result::Swap(packetw2c_leave_game_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(shutdown_, other->shutdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_leave_game_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_leave_game_result_descriptor_;
  metadata.reflection = packetw2c_leave_game_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_player_kick::kPacketIdFieldNumber;
const int packetw2c_player_kick::kKickTypeFieldNumber;
#endif  // !_MSC_VER

packetw2c_player_kick::packetw2c_player_kick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_player_kick::InitAsDefaultInstance() {
}

packetw2c_player_kick::packetw2c_player_kick(const packetw2c_player_kick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_player_kick::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7541;
  kick_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_player_kick::~packetw2c_player_kick() {
  SharedDtor();
}

void packetw2c_player_kick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_player_kick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_player_kick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_player_kick_descriptor_;
}

const packetw2c_player_kick& packetw2c_player_kick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_player_kick* packetw2c_player_kick::default_instance_ = NULL;

packetw2c_player_kick* packetw2c_player_kick::New() const {
  return new packetw2c_player_kick;
}

void packetw2c_player_kick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7541;
    kick_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_player_kick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_kick];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kick_type;
        break;
      }

      // optional int32 kick_type = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kick_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kick_type_)));
          set_has_kick_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_player_kick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_kick];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 kick_type = 2 [default = 0];
  if (has_kick_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kick_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_player_kick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_kick];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 kick_type = 2 [default = 0];
  if (has_kick_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kick_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_player_kick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_kick];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 kick_type = 2 [default = 0];
    if (has_kick_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kick_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_player_kick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_player_kick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_player_kick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_player_kick::MergeFrom(const packetw2c_player_kick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_kick_type()) {
      set_kick_type(from.kick_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_player_kick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_player_kick::CopyFrom(const packetw2c_player_kick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_player_kick::IsInitialized() const {

  return true;
}

void packetw2c_player_kick::Swap(packetw2c_player_kick* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(kick_type_, other->kick_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_player_kick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_player_kick_descriptor_;
  metadata.reflection = packetw2c_player_kick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_get_gamelist::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_get_gamelist::packetc2w_get_gamelist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_get_gamelist::InitAsDefaultInstance() {
}

packetc2w_get_gamelist::packetc2w_get_gamelist(const packetc2w_get_gamelist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_get_gamelist::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5048;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_get_gamelist::~packetc2w_get_gamelist() {
  SharedDtor();
}

void packetc2w_get_gamelist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_get_gamelist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_get_gamelist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_get_gamelist_descriptor_;
}

const packetc2w_get_gamelist& packetc2w_get_gamelist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_get_gamelist* packetc2w_get_gamelist::default_instance_ = NULL;

packetc2w_get_gamelist* packetc2w_get_gamelist::New() const {
  return new packetc2w_get_gamelist;
}

void packetc2w_get_gamelist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5048;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_get_gamelist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_gamelist];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_get_gamelist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_gamelist];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_get_gamelist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_gamelist];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_get_gamelist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_gamelist];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_get_gamelist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_get_gamelist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_get_gamelist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_get_gamelist::MergeFrom(const packetc2w_get_gamelist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_get_gamelist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_get_gamelist::CopyFrom(const packetc2w_get_gamelist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_get_gamelist::IsInitialized() const {

  return true;
}

void packetc2w_get_gamelist::Swap(packetc2w_get_gamelist* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_get_gamelist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_get_gamelist_descriptor_;
  metadata.reflection = packetc2w_get_gamelist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_get_gamelist_result::kPacketIdFieldNumber;
const int packetw2c_get_gamelist_result::kGameListFieldNumber;
#endif  // !_MSC_VER

packetw2c_get_gamelist_result::packetw2c_get_gamelist_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_get_gamelist_result::InitAsDefaultInstance() {
}

packetw2c_get_gamelist_result::packetw2c_get_gamelist_result(const packetw2c_get_gamelist_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_get_gamelist_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7552;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_get_gamelist_result::~packetw2c_get_gamelist_result() {
  SharedDtor();
}

void packetw2c_get_gamelist_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_get_gamelist_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_get_gamelist_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_get_gamelist_result_descriptor_;
}

const packetw2c_get_gamelist_result& packetw2c_get_gamelist_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_get_gamelist_result* packetw2c_get_gamelist_result::default_instance_ = NULL;

packetw2c_get_gamelist_result* packetw2c_get_gamelist_result::New() const {
  return new packetw2c_get_gamelist_result;
}

void packetw2c_get_gamelist_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7552;
  }
  game_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_get_gamelist_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_gamelist_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_game_list;
        break;
      }

      // repeated .client2world_protocols.msg_game_info game_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_game_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_game_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_get_gamelist_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_gamelist_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_game_info game_list = 2;
  for (int i = 0; i < this->game_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->game_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_get_gamelist_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_gamelist_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_game_info game_list = 2;
  for (int i = 0; i < this->game_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->game_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_get_gamelist_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_gamelist_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client2world_protocols.msg_game_info game_list = 2;
  total_size += 1 * this->game_list_size();
  for (int i = 0; i < this->game_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->game_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_get_gamelist_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_get_gamelist_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_get_gamelist_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_get_gamelist_result::MergeFrom(const packetw2c_get_gamelist_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  game_list_.MergeFrom(from.game_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_get_gamelist_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_get_gamelist_result::CopyFrom(const packetw2c_get_gamelist_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_get_gamelist_result::IsInitialized() const {

  return true;
}

void packetw2c_get_gamelist_result::Swap(packetw2c_get_gamelist_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    game_list_.Swap(&other->game_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_get_gamelist_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_get_gamelist_result_descriptor_;
  metadata.reflection = packetw2c_get_gamelist_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_bind_reward::kPacketIdFieldNumber;
const int packetw2c_bind_reward::kRewardGoldFieldNumber;
#endif  // !_MSC_VER

packetw2c_bind_reward::packetw2c_bind_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_bind_reward::InitAsDefaultInstance() {
}

packetw2c_bind_reward::packetw2c_bind_reward(const packetw2c_bind_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_bind_reward::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7589;
  reward_gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_bind_reward::~packetw2c_bind_reward() {
  SharedDtor();
}

void packetw2c_bind_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_bind_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_bind_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_bind_reward_descriptor_;
}

const packetw2c_bind_reward& packetw2c_bind_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_bind_reward* packetw2c_bind_reward::default_instance_ = NULL;

packetw2c_bind_reward* packetw2c_bind_reward::New() const {
  return new packetw2c_bind_reward;
}

void packetw2c_bind_reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7589;
    reward_gold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_bind_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_bind_reward];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_gold;
        break;
      }

      // optional int32 reward_gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_gold_)));
          set_has_reward_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_bind_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_bind_reward];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 reward_gold = 2;
  if (has_reward_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_bind_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_bind_reward];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 reward_gold = 2;
  if (has_reward_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_bind_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_bind_reward];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 reward_gold = 2;
    if (has_reward_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_bind_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_bind_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_bind_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_bind_reward::MergeFrom(const packetw2c_bind_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_reward_gold()) {
      set_reward_gold(from.reward_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_bind_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_bind_reward::CopyFrom(const packetw2c_bind_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_bind_reward::IsInitialized() const {

  return true;
}

void packetw2c_bind_reward::Swap(packetw2c_bind_reward* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(reward_gold_, other->reward_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_bind_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_bind_reward_descriptor_;
  metadata.reflection = packetw2c_bind_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_some_info::kIdFieldNumber;
const int msg_some_info::kUserIdFieldNumber;
const int msg_some_info::kTimeValueFieldNumber;
const int msg_some_info::kMsgInfoFieldNumber;
const int msg_some_info::kReadFieldNumber;
const int msg_some_info::kItemsFieldNumber;
#endif  // !_MSC_VER

msg_some_info::msg_some_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_some_info::InitAsDefaultInstance() {
}

msg_some_info::msg_some_info(const msg_some_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_some_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = 0;
  timevalue_ = GOOGLE_LONGLONG(0);
  msginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  read_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_some_info::~msg_some_info() {
  SharedDtor();
}

void msg_some_info::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
    delete msginfo_;
  }
  if (this != default_instance_) {
  }
}

void msg_some_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_some_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_some_info_descriptor_;
}

const msg_some_info& msg_some_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

msg_some_info* msg_some_info::default_instance_ = NULL;

msg_some_info* msg_some_info::New() const {
  return new msg_some_info;
}

void msg_some_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    userid_ = 0;
    timevalue_ = GOOGLE_LONGLONG(0);
    if (has_msginfo()) {
      if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
        msginfo_->clear();
      }
    }
    read_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_some_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userId;
        break;
      }

      // optional int32 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timeValue;
        break;
      }

      // optional int64 timeValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timevalue_)));
          set_has_timevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msgInfo;
        break;
      }

      // optional string msgInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msginfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msginfo().data(), this->msginfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_read;
        break;
      }

      // optional int32 read = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &read_)));
          set_has_read();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_items;
        break;
      }

      // repeated .msg_info_def.msg_item items = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_some_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional int32 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional int64 timeValue = 3;
  if (has_timevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timevalue(), output);
  }

  // optional string msgInfo = 4;
  if (has_msginfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msginfo().data(), this->msginfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->msginfo(), output);
  }

  // optional int32 read = 5;
  if (has_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->read(), output);
  }

  // repeated .msg_info_def.msg_item items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_some_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // optional int64 timeValue = 3;
  if (has_timevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timevalue(), target);
  }

  // optional string msgInfo = 4;
  if (has_msginfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msginfo().data(), this->msginfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msginfo(), target);
  }

  // optional int32 read = 5;
  if (has_read()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->read(), target);
  }

  // repeated .msg_info_def.msg_item items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_some_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 userId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int64 timeValue = 3;
    if (has_timevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timevalue());
    }

    // optional string msgInfo = 4;
    if (has_msginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msginfo());
    }

    // optional int32 read = 5;
    if (has_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->read());
    }

  }
  // repeated .msg_info_def.msg_item items = 6;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_some_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_some_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_some_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_some_info::MergeFrom(const msg_some_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_timevalue()) {
      set_timevalue(from.timevalue());
    }
    if (from.has_msginfo()) {
      set_msginfo(from.msginfo());
    }
    if (from.has_read()) {
      set_read(from.read());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_some_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_some_info::CopyFrom(const msg_some_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_some_info::IsInitialized() const {

  return true;
}

void msg_some_info::Swap(msg_some_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(timevalue_, other->timevalue_);
    std::swap(msginfo_, other->msginfo_);
    std::swap(read_, other->read_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_some_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_some_info_descriptor_;
  metadata.reflection = msg_some_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_ask_message::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_ask_message::packetc2w_ask_message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_ask_message::InitAsDefaultInstance() {
}

packetc2w_ask_message::packetc2w_ask_message(const packetc2w_ask_message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_ask_message::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5080;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_ask_message::~packetc2w_ask_message() {
  SharedDtor();
}

void packetc2w_ask_message::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_ask_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_ask_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_ask_message_descriptor_;
}

const packetc2w_ask_message& packetc2w_ask_message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_ask_message* packetc2w_ask_message::default_instance_ = NULL;

packetc2w_ask_message* packetc2w_ask_message::New() const {
  return new packetc2w_ask_message;
}

void packetc2w_ask_message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5080;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_ask_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_message];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_ask_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_message];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_ask_message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_message];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_ask_message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_message];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_ask_message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_ask_message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_ask_message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_ask_message::MergeFrom(const packetc2w_ask_message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_ask_message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_ask_message::CopyFrom(const packetc2w_ask_message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_ask_message::IsInitialized() const {

  return true;
}

void packetc2w_ask_message::Swap(packetc2w_ask_message* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_ask_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_ask_message_descriptor_;
  metadata.reflection = packetc2w_ask_message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_ask_message_result::kPacketIdFieldNumber;
const int packetw2c_ask_message_result::kResultFieldNumber;
const int packetw2c_ask_message_result::kMsgListFieldNumber;
#endif  // !_MSC_VER

packetw2c_ask_message_result::packetw2c_ask_message_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_ask_message_result::InitAsDefaultInstance() {
}

packetw2c_ask_message_result::packetw2c_ask_message_result(const packetw2c_ask_message_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_ask_message_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7586;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_ask_message_result::~packetw2c_ask_message_result() {
  SharedDtor();
}

void packetw2c_ask_message_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_ask_message_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_ask_message_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_ask_message_result_descriptor_;
}

const packetw2c_ask_message_result& packetw2c_ask_message_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_ask_message_result* packetw2c_ask_message_result::default_instance_ = NULL;

packetw2c_ask_message_result* packetw2c_ask_message_result::New() const {
  return new packetw2c_ask_message_result;
}

void packetw2c_ask_message_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7586;
    result_ = false;
  }
  msg_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_ask_message_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_message_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional bool result = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg_list;
        break;
      }

      // repeated .client2world_protocols.msg_some_info msg_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_ask_message_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_message_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional bool result = 2 [default = false];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }

  // repeated .client2world_protocols.msg_some_info msg_list = 3;
  for (int i = 0; i < this->msg_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msg_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_ask_message_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_message_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional bool result = 2 [default = false];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }

  // repeated .client2world_protocols.msg_some_info msg_list = 3;
  for (int i = 0; i < this->msg_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->msg_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_ask_message_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_message_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool result = 2 [default = false];
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  // repeated .client2world_protocols.msg_some_info msg_list = 3;
  total_size += 1 * this->msg_list_size();
  for (int i = 0; i < this->msg_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_ask_message_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_ask_message_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_ask_message_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_ask_message_result::MergeFrom(const packetw2c_ask_message_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_list_.MergeFrom(from.msg_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_ask_message_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_ask_message_result::CopyFrom(const packetw2c_ask_message_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_ask_message_result::IsInitialized() const {

  return true;
}

void packetw2c_ask_message_result::Swap(packetw2c_ask_message_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    msg_list_.Swap(&other->msg_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_ask_message_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_ask_message_result_descriptor_;
  metadata.reflection = packetw2c_ask_message_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_delete_message::kPacketIdFieldNumber;
const int packetc2w_delete_message::kDeleteListFieldNumber;
#endif  // !_MSC_VER

packetc2w_delete_message::packetc2w_delete_message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_delete_message::InitAsDefaultInstance() {
}

packetc2w_delete_message::packetc2w_delete_message(const packetc2w_delete_message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_delete_message::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5081;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_delete_message::~packetc2w_delete_message() {
  SharedDtor();
}

void packetc2w_delete_message::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_delete_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_delete_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_delete_message_descriptor_;
}

const packetc2w_delete_message& packetc2w_delete_message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_delete_message* packetc2w_delete_message::default_instance_ = NULL;

packetc2w_delete_message* packetc2w_delete_message::New() const {
  return new packetc2w_delete_message;
}

void packetc2w_delete_message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5081;
  }
  delete_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_delete_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_delete_message];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_delete_list;
        break;
      }

      // repeated string delete_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delete_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_delete_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->delete_list(this->delete_list_size() - 1).data(),
            this->delete_list(this->delete_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_delete_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_delete_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_delete_message];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated string delete_list = 2;
  for (int i = 0; i < this->delete_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->delete_list(i).data(), this->delete_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->delete_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_delete_message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_delete_message];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated string delete_list = 2;
  for (int i = 0; i < this->delete_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->delete_list(i).data(), this->delete_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->delete_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_delete_message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_delete_message];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated string delete_list = 2;
  total_size += 1 * this->delete_list_size();
  for (int i = 0; i < this->delete_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->delete_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_delete_message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_delete_message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_delete_message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_delete_message::MergeFrom(const packetc2w_delete_message& from) {
  GOOGLE_CHECK_NE(&from, this);
  delete_list_.MergeFrom(from.delete_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_delete_message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_delete_message::CopyFrom(const packetc2w_delete_message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_delete_message::IsInitialized() const {

  return true;
}

void packetc2w_delete_message::Swap(packetc2w_delete_message* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    delete_list_.Swap(&other->delete_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_delete_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_delete_message_descriptor_;
  metadata.reflection = packetc2w_delete_message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_delete_message_result::kPacketIdFieldNumber;
const int packetw2c_delete_message_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_delete_message_result::packetw2c_delete_message_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_delete_message_result::InitAsDefaultInstance() {
}

packetw2c_delete_message_result::packetw2c_delete_message_result(const packetw2c_delete_message_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_delete_message_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7587;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_delete_message_result::~packetw2c_delete_message_result() {
  SharedDtor();
}

void packetw2c_delete_message_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_delete_message_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_delete_message_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_delete_message_result_descriptor_;
}

const packetw2c_delete_message_result& packetw2c_delete_message_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_delete_message_result* packetw2c_delete_message_result::default_instance_ = NULL;

packetw2c_delete_message_result* packetw2c_delete_message_result::New() const {
  return new packetw2c_delete_message_result;
}

void packetw2c_delete_message_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7587;
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_delete_message_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_delete_message_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional bool result = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_delete_message_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_delete_message_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional bool result = 2 [default = false];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_delete_message_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_delete_message_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional bool result = 2 [default = false];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_delete_message_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_delete_message_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool result = 2 [default = false];
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_delete_message_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_delete_message_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_delete_message_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_delete_message_result::MergeFrom(const packetw2c_delete_message_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_delete_message_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_delete_message_result::CopyFrom(const packetw2c_delete_message_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_delete_message_result::IsInitialized() const {

  return true;
}

void packetw2c_delete_message_result::Swap(packetw2c_delete_message_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_delete_message_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_delete_message_result_descriptor_;
  metadata.reflection = packetw2c_delete_message_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_read_message::kPacketIdFieldNumber;
const int packetc2w_read_message::kIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_read_message::packetc2w_read_message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_read_message::InitAsDefaultInstance() {
}

packetc2w_read_message::packetc2w_read_message(const packetc2w_read_message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_read_message::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5082;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_read_message::~packetc2w_read_message() {
  SharedDtor();
}

void packetc2w_read_message::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_read_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_read_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_read_message_descriptor_;
}

const packetc2w_read_message& packetc2w_read_message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_read_message* packetc2w_read_message::default_instance_ = NULL;

packetc2w_read_message* packetc2w_read_message::New() const {
  return new packetc2w_read_message;
}

void packetc2w_read_message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5082;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_read_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_read_message];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_read_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_read_message];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_read_message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_read_message];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_read_message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_read_message];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_read_message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_read_message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_read_message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_read_message::MergeFrom(const packetc2w_read_message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_read_message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_read_message::CopyFrom(const packetc2w_read_message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_read_message::IsInitialized() const {

  return true;
}

void packetc2w_read_message::Swap(packetc2w_read_message* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_read_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_read_message_descriptor_;
  metadata.reflection = packetc2w_read_message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_read_message_result::kPacketIdFieldNumber;
const int packetw2c_read_message_result::kResultFieldNumber;
const int packetw2c_read_message_result::kIdFieldNumber;
#endif  // !_MSC_VER

packetw2c_read_message_result::packetw2c_read_message_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_read_message_result::InitAsDefaultInstance() {
}

packetw2c_read_message_result::packetw2c_read_message_result(const packetw2c_read_message_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_read_message_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7588;
  result_ = 2;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_read_message_result::~packetw2c_read_message_result() {
  SharedDtor();
}

void packetw2c_read_message_result::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_read_message_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_read_message_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_read_message_result_descriptor_;
}

const packetw2c_read_message_result& packetw2c_read_message_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_read_message_result* packetw2c_read_message_result::default_instance_ = NULL;

packetw2c_read_message_result* packetw2c_read_message_result::New() const {
  return new packetw2c_read_message_result;
}

void packetw2c_read_message_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7588;
    result_ = 2;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_read_message_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_read_message_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // optional string id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_read_message_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_read_message_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_read_message_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_read_message_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_read_message_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_read_message_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_read_message_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_read_message_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_read_message_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_read_message_result::MergeFrom(const packetw2c_read_message_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_read_message_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_read_message_result::CopyFrom(const packetw2c_read_message_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_read_message_result::IsInitialized() const {

  return true;
}

void packetw2c_read_message_result::Swap(packetw2c_read_message_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_read_message_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_read_message_result_descriptor_;
  metadata.reflection = packetw2c_read_message_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_picture_verify::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetw2c_picture_verify::packetw2c_picture_verify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_picture_verify::InitAsDefaultInstance() {
}

packetw2c_picture_verify::packetw2c_picture_verify(const packetw2c_picture_verify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_picture_verify::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7593;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_picture_verify::~packetw2c_picture_verify() {
  SharedDtor();
}

void packetw2c_picture_verify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_picture_verify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_picture_verify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_picture_verify_descriptor_;
}

const packetw2c_picture_verify& packetw2c_picture_verify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_picture_verify* packetw2c_picture_verify::default_instance_ = NULL;

packetw2c_picture_verify* packetw2c_picture_verify::New() const {
  return new packetw2c_picture_verify;
}

void packetw2c_picture_verify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7593;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_picture_verify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_picture_verify];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_picture_verify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_picture_verify];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_picture_verify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_picture_verify];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_picture_verify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_picture_verify];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_picture_verify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_picture_verify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_picture_verify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_picture_verify::MergeFrom(const packetw2c_picture_verify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_picture_verify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_picture_verify::CopyFrom(const packetw2c_picture_verify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_picture_verify::IsInitialized() const {

  return true;
}

void packetw2c_picture_verify::Swap(packetw2c_picture_verify* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_picture_verify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_picture_verify_descriptor_;
  metadata.reflection = packetw2c_picture_verify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_picture_verify_result::kPacketIdFieldNumber;
const int packetc2w_picture_verify_result::kValidateFieldNumber;
#endif  // !_MSC_VER

packetc2w_picture_verify_result::packetc2w_picture_verify_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_picture_verify_result::InitAsDefaultInstance() {
}

packetc2w_picture_verify_result::packetc2w_picture_verify_result(const packetc2w_picture_verify_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_picture_verify_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5085;
  validate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_picture_verify_result::~packetc2w_picture_verify_result() {
  SharedDtor();
}

void packetc2w_picture_verify_result::SharedDtor() {
  if (validate_ != &::google::protobuf::internal::kEmptyString) {
    delete validate_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_picture_verify_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_picture_verify_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_picture_verify_result_descriptor_;
}

const packetc2w_picture_verify_result& packetc2w_picture_verify_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_picture_verify_result* packetc2w_picture_verify_result::default_instance_ = NULL;

packetc2w_picture_verify_result* packetc2w_picture_verify_result::New() const {
  return new packetc2w_picture_verify_result;
}

void packetc2w_picture_verify_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5085;
    if (has_validate()) {
      if (validate_ != &::google::protobuf::internal::kEmptyString) {
        validate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_picture_verify_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_picture_verify_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_validate;
        break;
      }

      // optional string validate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_validate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_validate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->validate().data(), this->validate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_picture_verify_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_picture_verify_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string validate = 2;
  if (has_validate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->validate().data(), this->validate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->validate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_picture_verify_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_picture_verify_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string validate = 2;
  if (has_validate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->validate().data(), this->validate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->validate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_picture_verify_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_picture_verify_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string validate = 2;
    if (has_validate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->validate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_picture_verify_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_picture_verify_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_picture_verify_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_picture_verify_result::MergeFrom(const packetc2w_picture_verify_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_validate()) {
      set_validate(from.validate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_picture_verify_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_picture_verify_result::CopyFrom(const packetc2w_picture_verify_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_picture_verify_result::IsInitialized() const {

  return true;
}

void packetc2w_picture_verify_result::Swap(packetc2w_picture_verify_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(validate_, other->validate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_picture_verify_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_picture_verify_result_descriptor_;
  metadata.reflection = packetc2w_picture_verify_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_ask_report_account::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_ask_report_account::packetc2w_ask_report_account()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_ask_report_account::InitAsDefaultInstance() {
}

packetc2w_ask_report_account::packetc2w_ask_report_account(const packetc2w_ask_report_account& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_ask_report_account::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5086;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_ask_report_account::~packetc2w_ask_report_account() {
  SharedDtor();
}

void packetc2w_ask_report_account::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_ask_report_account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_ask_report_account::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_ask_report_account_descriptor_;
}

const packetc2w_ask_report_account& packetc2w_ask_report_account::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_ask_report_account* packetc2w_ask_report_account::default_instance_ = NULL;

packetc2w_ask_report_account* packetc2w_ask_report_account::New() const {
  return new packetc2w_ask_report_account;
}

void packetc2w_ask_report_account::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5086;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_ask_report_account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_report_account];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_ask_report_account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_report_account];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_ask_report_account::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_report_account];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_ask_report_account::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_report_account];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_ask_report_account::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_ask_report_account* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_ask_report_account*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_ask_report_account::MergeFrom(const packetc2w_ask_report_account& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_ask_report_account::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_ask_report_account::CopyFrom(const packetc2w_ask_report_account& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_ask_report_account::IsInitialized() const {

  return true;
}

void packetc2w_ask_report_account::Swap(packetc2w_ask_report_account* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_ask_report_account::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_ask_report_account_descriptor_;
  metadata.reflection = packetc2w_ask_report_account_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_ask_report_account_result::kPacketIdFieldNumber;
const int packetw2c_ask_report_account_result::kAccountFieldNumber;
#endif  // !_MSC_VER

packetw2c_ask_report_account_result::packetw2c_ask_report_account_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_ask_report_account_result::InitAsDefaultInstance() {
}

packetw2c_ask_report_account_result::packetw2c_ask_report_account_result(const packetw2c_ask_report_account_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_ask_report_account_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7594;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_ask_report_account_result::~packetw2c_ask_report_account_result() {
  SharedDtor();
}

void packetw2c_ask_report_account_result::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_ask_report_account_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_ask_report_account_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_ask_report_account_result_descriptor_;
}

const packetw2c_ask_report_account_result& packetw2c_ask_report_account_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_ask_report_account_result* packetw2c_ask_report_account_result::default_instance_ = NULL;

packetw2c_ask_report_account_result* packetw2c_ask_report_account_result::New() const {
  return new packetw2c_ask_report_account_result;
}

void packetw2c_ask_report_account_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7594;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_ask_report_account_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_report_account_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_ask_report_account_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_report_account_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_ask_report_account_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_report_account_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_ask_report_account_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_report_account_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_ask_report_account_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_ask_report_account_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_ask_report_account_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_ask_report_account_result::MergeFrom(const packetw2c_ask_report_account_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_ask_report_account_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_ask_report_account_result::CopyFrom(const packetw2c_ask_report_account_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_ask_report_account_result::IsInitialized() const {

  return true;
}

void packetw2c_ask_report_account_result::Swap(packetw2c_ask_report_account_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_ask_report_account_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_ask_report_account_result_descriptor_;
  metadata.reflection = packetw2c_ask_report_account_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_faq_def::kIndexFieldNumber;
const int msg_faq_def::kTextFieldNumber;
#endif  // !_MSC_VER

msg_faq_def::msg_faq_def()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_faq_def::InitAsDefaultInstance() {
}

msg_faq_def::msg_faq_def(const msg_faq_def& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_faq_def::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_faq_def::~msg_faq_def() {
  SharedDtor();
}

void msg_faq_def::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void msg_faq_def::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_faq_def::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_faq_def_descriptor_;
}

const msg_faq_def& msg_faq_def::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

msg_faq_def* msg_faq_def::default_instance_ = NULL;

msg_faq_def* msg_faq_def::New() const {
  return new msg_faq_def;
}

void msg_faq_def::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_faq_def::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_faq_def::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_faq_def::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_faq_def::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_faq_def::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_faq_def* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_faq_def*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_faq_def::MergeFrom(const msg_faq_def& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_faq_def::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_faq_def::CopyFrom(const msg_faq_def& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_faq_def::IsInitialized() const {

  return true;
}

void msg_faq_def::Swap(msg_faq_def* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_faq_def::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_faq_def_descriptor_;
  metadata.reflection = msg_faq_def_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_faq::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_faq::packetc2w_req_faq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_req_faq::InitAsDefaultInstance() {
}

packetc2w_req_faq::packetc2w_req_faq(const packetc2w_req_faq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_req_faq::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5092;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_faq::~packetc2w_req_faq() {
  SharedDtor();
}

void packetc2w_req_faq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_req_faq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_faq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_faq_descriptor_;
}

const packetc2w_req_faq& packetc2w_req_faq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_req_faq* packetc2w_req_faq::default_instance_ = NULL;

packetc2w_req_faq* packetc2w_req_faq::New() const {
  return new packetc2w_req_faq;
}

void packetc2w_req_faq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5092;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_faq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_faq];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_req_faq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_faq];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_req_faq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_faq];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_req_faq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_faq];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_faq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_faq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_faq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_faq::MergeFrom(const packetc2w_req_faq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_faq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_faq::CopyFrom(const packetc2w_req_faq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_faq::IsInitialized() const {

  return true;
}

void packetc2w_req_faq::Swap(packetc2w_req_faq* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_faq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_faq_descriptor_;
  metadata.reflection = packetc2w_req_faq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_req_faq_result::kPacketIdFieldNumber;
const int packetw2c_req_faq_result::kFaqListFieldNumber;
#endif  // !_MSC_VER

packetw2c_req_faq_result::packetw2c_req_faq_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_req_faq_result::InitAsDefaultInstance() {
}

packetw2c_req_faq_result::packetw2c_req_faq_result(const packetw2c_req_faq_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_req_faq_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7601;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_req_faq_result::~packetw2c_req_faq_result() {
  SharedDtor();
}

void packetw2c_req_faq_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_req_faq_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_req_faq_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_req_faq_result_descriptor_;
}

const packetw2c_req_faq_result& packetw2c_req_faq_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_req_faq_result* packetw2c_req_faq_result::default_instance_ = NULL;

packetw2c_req_faq_result* packetw2c_req_faq_result::New() const {
  return new packetw2c_req_faq_result;
}

void packetw2c_req_faq_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7601;
  }
  faq_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_req_faq_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_faq_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_faq_list;
        break;
      }

      // repeated .client2world_protocols.msg_faq_def faq_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faq_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_faq_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_faq_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_req_faq_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_faq_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_faq_def faq_list = 2;
  for (int i = 0; i < this->faq_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->faq_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_req_faq_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_faq_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_faq_def faq_list = 2;
  for (int i = 0; i < this->faq_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->faq_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_req_faq_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_faq_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client2world_protocols.msg_faq_def faq_list = 2;
  total_size += 1 * this->faq_list_size();
  for (int i = 0; i < this->faq_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faq_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_req_faq_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_req_faq_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_req_faq_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_req_faq_result::MergeFrom(const packetw2c_req_faq_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  faq_list_.MergeFrom(from.faq_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_req_faq_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_req_faq_result::CopyFrom(const packetw2c_req_faq_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_req_faq_result::IsInitialized() const {

  return true;
}

void packetw2c_req_faq_result::Swap(packetw2c_req_faq_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    faq_list_.Swap(&other->faq_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_req_faq_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_req_faq_result_descriptor_;
  metadata.reflection = packetw2c_req_faq_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_faq_detail::kPacketIdFieldNumber;
const int packetc2w_req_faq_detail::kIndexFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_faq_detail::packetc2w_req_faq_detail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_req_faq_detail::InitAsDefaultInstance() {
}

packetc2w_req_faq_detail::packetc2w_req_faq_detail(const packetc2w_req_faq_detail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_req_faq_detail::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5093;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_faq_detail::~packetc2w_req_faq_detail() {
  SharedDtor();
}

void packetc2w_req_faq_detail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_req_faq_detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_faq_detail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_faq_detail_descriptor_;
}

const packetc2w_req_faq_detail& packetc2w_req_faq_detail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_req_faq_detail* packetc2w_req_faq_detail::default_instance_ = NULL;

packetc2w_req_faq_detail* packetc2w_req_faq_detail::New() const {
  return new packetc2w_req_faq_detail;
}

void packetc2w_req_faq_detail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5093;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_faq_detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_faq_detail];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_req_faq_detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_faq_detail];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_req_faq_detail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_faq_detail];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_req_faq_detail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_faq_detail];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_faq_detail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_faq_detail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_faq_detail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_faq_detail::MergeFrom(const packetc2w_req_faq_detail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_faq_detail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_faq_detail::CopyFrom(const packetc2w_req_faq_detail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_faq_detail::IsInitialized() const {

  return true;
}

void packetc2w_req_faq_detail::Swap(packetc2w_req_faq_detail* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_faq_detail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_faq_detail_descriptor_;
  metadata.reflection = packetc2w_req_faq_detail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_req_faq_detail_result::kPacketIdFieldNumber;
const int packetw2c_req_faq_detail_result::kFaqFieldNumber;
#endif  // !_MSC_VER

packetw2c_req_faq_detail_result::packetw2c_req_faq_detail_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_req_faq_detail_result::InitAsDefaultInstance() {
  faq_ = const_cast< ::client2world_protocols::msg_faq_def*>(&::client2world_protocols::msg_faq_def::default_instance());
}

packetw2c_req_faq_detail_result::packetw2c_req_faq_detail_result(const packetw2c_req_faq_detail_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_req_faq_detail_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7602;
  faq_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_req_faq_detail_result::~packetw2c_req_faq_detail_result() {
  SharedDtor();
}

void packetw2c_req_faq_detail_result::SharedDtor() {
  if (this != default_instance_) {
    delete faq_;
  }
}

void packetw2c_req_faq_detail_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_req_faq_detail_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_req_faq_detail_result_descriptor_;
}

const packetw2c_req_faq_detail_result& packetw2c_req_faq_detail_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_req_faq_detail_result* packetw2c_req_faq_detail_result::default_instance_ = NULL;

packetw2c_req_faq_detail_result* packetw2c_req_faq_detail_result::New() const {
  return new packetw2c_req_faq_detail_result;
}

void packetw2c_req_faq_detail_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7602;
    if (has_faq()) {
      if (faq_ != NULL) faq_->::client2world_protocols::msg_faq_def::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_req_faq_detail_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_faq_detail_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_faq;
        break;
      }

      // optional .client2world_protocols.msg_faq_def faq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_faq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_req_faq_detail_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_faq_detail_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .client2world_protocols.msg_faq_def faq = 2;
  if (has_faq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->faq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_req_faq_detail_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_faq_detail_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .client2world_protocols.msg_faq_def faq = 2;
  if (has_faq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->faq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_req_faq_detail_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_faq_detail_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .client2world_protocols.msg_faq_def faq = 2;
    if (has_faq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->faq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_req_faq_detail_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_req_faq_detail_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_req_faq_detail_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_req_faq_detail_result::MergeFrom(const packetw2c_req_faq_detail_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_faq()) {
      mutable_faq()->::client2world_protocols::msg_faq_def::MergeFrom(from.faq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_req_faq_detail_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_req_faq_detail_result::CopyFrom(const packetw2c_req_faq_detail_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_req_faq_detail_result::IsInitialized() const {

  return true;
}

void packetw2c_req_faq_detail_result::Swap(packetw2c_req_faq_detail_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(faq_, other->faq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_req_faq_detail_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_req_faq_detail_result_descriptor_;
  metadata.reflection = packetw2c_req_faq_detail_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_cs_contact::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_cs_contact::packetc2w_req_cs_contact()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_req_cs_contact::InitAsDefaultInstance() {
}

packetc2w_req_cs_contact::packetc2w_req_cs_contact(const packetc2w_req_cs_contact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_req_cs_contact::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5094;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_cs_contact::~packetc2w_req_cs_contact() {
  SharedDtor();
}

void packetc2w_req_cs_contact::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_req_cs_contact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_cs_contact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_cs_contact_descriptor_;
}

const packetc2w_req_cs_contact& packetc2w_req_cs_contact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_req_cs_contact* packetc2w_req_cs_contact::default_instance_ = NULL;

packetc2w_req_cs_contact* packetc2w_req_cs_contact::New() const {
  return new packetc2w_req_cs_contact;
}

void packetc2w_req_cs_contact::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5094;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_cs_contact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_cs_contact];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_req_cs_contact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_cs_contact];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_req_cs_contact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_cs_contact];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_req_cs_contact::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_cs_contact];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_cs_contact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_cs_contact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_cs_contact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_cs_contact::MergeFrom(const packetc2w_req_cs_contact& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_cs_contact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_cs_contact::CopyFrom(const packetc2w_req_cs_contact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_cs_contact::IsInitialized() const {

  return true;
}

void packetc2w_req_cs_contact::Swap(packetc2w_req_cs_contact* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_cs_contact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_cs_contact_descriptor_;
  metadata.reflection = packetc2w_req_cs_contact_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_req_cs_contact_result::kPacketIdFieldNumber;
const int packetw2c_req_cs_contact_result::kQqFieldNumber;
#endif  // !_MSC_VER

packetw2c_req_cs_contact_result::packetw2c_req_cs_contact_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_req_cs_contact_result::InitAsDefaultInstance() {
}

packetw2c_req_cs_contact_result::packetw2c_req_cs_contact_result(const packetw2c_req_cs_contact_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_req_cs_contact_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7603;
  qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_req_cs_contact_result::~packetw2c_req_cs_contact_result() {
  SharedDtor();
}

void packetw2c_req_cs_contact_result::SharedDtor() {
  if (qq_ != &::google::protobuf::internal::kEmptyString) {
    delete qq_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_req_cs_contact_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_req_cs_contact_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_req_cs_contact_result_descriptor_;
}

const packetw2c_req_cs_contact_result& packetw2c_req_cs_contact_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_req_cs_contact_result* packetw2c_req_cs_contact_result::default_instance_ = NULL;

packetw2c_req_cs_contact_result* packetw2c_req_cs_contact_result::New() const {
  return new packetw2c_req_cs_contact_result;
}

void packetw2c_req_cs_contact_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7603;
    if (has_qq()) {
      if (qq_ != &::google::protobuf::internal::kEmptyString) {
        qq_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_req_cs_contact_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_cs_contact_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_qq;
        break;
      }

      // optional string qq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qq()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qq().data(), this->qq().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_req_cs_contact_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_cs_contact_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string qq = 2;
  if (has_qq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qq().data(), this->qq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->qq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_req_cs_contact_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_cs_contact_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string qq = 2;
  if (has_qq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qq().data(), this->qq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->qq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_req_cs_contact_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_cs_contact_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string qq = 2;
    if (has_qq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_req_cs_contact_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_req_cs_contact_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_req_cs_contact_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_req_cs_contact_result::MergeFrom(const packetw2c_req_cs_contact_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_qq()) {
      set_qq(from.qq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_req_cs_contact_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_req_cs_contact_result::CopyFrom(const packetw2c_req_cs_contact_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_req_cs_contact_result::IsInitialized() const {

  return true;
}

void packetw2c_req_cs_contact_result::Swap(packetw2c_req_cs_contact_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(qq_, other->qq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_req_cs_contact_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_req_cs_contact_result_descriptor_;
  metadata.reflection = packetw2c_req_cs_contact_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_suggest::kTextFieldNumber;
const int msg_suggest::kTimeFieldNumber;
#endif  // !_MSC_VER

msg_suggest::msg_suggest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_suggest::InitAsDefaultInstance() {
}

msg_suggest::msg_suggest(const msg_suggest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_suggest::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_suggest::~msg_suggest() {
  SharedDtor();
}

void msg_suggest::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void msg_suggest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_suggest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_suggest_descriptor_;
}

const msg_suggest& msg_suggest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

msg_suggest* msg_suggest::default_instance_ = NULL;

msg_suggest* msg_suggest::New() const {
  return new msg_suggest;
}

void msg_suggest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_suggest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_suggest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  // optional int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_suggest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_suggest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_suggest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_suggest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_suggest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_suggest::MergeFrom(const msg_suggest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_suggest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_suggest::CopyFrom(const msg_suggest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_suggest::IsInitialized() const {

  return true;
}

void msg_suggest::Swap(msg_suggest* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_suggest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_suggest_descriptor_;
  metadata.reflection = msg_suggest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_suggestion::kPacketIdFieldNumber;
const int packetc2w_suggestion::kTextFieldNumber;
#endif  // !_MSC_VER

packetc2w_suggestion::packetc2w_suggestion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_suggestion::InitAsDefaultInstance() {
}

packetc2w_suggestion::packetc2w_suggestion(const packetc2w_suggestion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_suggestion::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5097;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_suggestion::~packetc2w_suggestion() {
  SharedDtor();
}

void packetc2w_suggestion::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_suggestion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_suggestion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_suggestion_descriptor_;
}

const packetc2w_suggestion& packetc2w_suggestion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_suggestion* packetc2w_suggestion::default_instance_ = NULL;

packetc2w_suggestion* packetc2w_suggestion::New() const {
  return new packetc2w_suggestion;
}

void packetc2w_suggestion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5097;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_suggestion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_suggestion];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_suggestion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_suggestion];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_suggestion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_suggestion];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_suggestion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_suggestion];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_suggestion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_suggestion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_suggestion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_suggestion::MergeFrom(const packetc2w_suggestion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_suggestion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_suggestion::CopyFrom(const packetc2w_suggestion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_suggestion::IsInitialized() const {

  return true;
}

void packetc2w_suggestion::Swap(packetc2w_suggestion* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_suggestion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_suggestion_descriptor_;
  metadata.reflection = packetc2w_suggestion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_suggestion_result::kPacketIdFieldNumber;
const int packetw2c_suggestion_result::kResultFieldNumber;
const int packetw2c_suggestion_result::kSuggestFieldNumber;
#endif  // !_MSC_VER

packetw2c_suggestion_result::packetw2c_suggestion_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_suggestion_result::InitAsDefaultInstance() {
  suggest_ = const_cast< ::client2world_protocols::msg_suggest*>(&::client2world_protocols::msg_suggest::default_instance());
}

packetw2c_suggestion_result::packetw2c_suggestion_result(const packetw2c_suggestion_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_suggestion_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7606;
  result_ = 2;
  suggest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_suggestion_result::~packetw2c_suggestion_result() {
  SharedDtor();
}

void packetw2c_suggestion_result::SharedDtor() {
  if (this != default_instance_) {
    delete suggest_;
  }
}

void packetw2c_suggestion_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_suggestion_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_suggestion_result_descriptor_;
}

const packetw2c_suggestion_result& packetw2c_suggestion_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_suggestion_result* packetw2c_suggestion_result::default_instance_ = NULL;

packetw2c_suggestion_result* packetw2c_suggestion_result::New() const {
  return new packetw2c_suggestion_result;
}

void packetw2c_suggestion_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7606;
    result_ = 2;
    if (has_suggest()) {
      if (suggest_ != NULL) suggest_->::client2world_protocols::msg_suggest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_suggestion_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_suggestion_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_suggest;
        break;
      }

      // optional .client2world_protocols.msg_suggest suggest = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suggest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_suggest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_suggestion_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_suggestion_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional .client2world_protocols.msg_suggest suggest = 3;
  if (has_suggest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->suggest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_suggestion_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_suggestion_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional .client2world_protocols.msg_suggest suggest = 3;
  if (has_suggest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->suggest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_suggestion_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_suggestion_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .client2world_protocols.msg_suggest suggest = 3;
    if (has_suggest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->suggest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_suggestion_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_suggestion_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_suggestion_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_suggestion_result::MergeFrom(const packetw2c_suggestion_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_suggest()) {
      mutable_suggest()->::client2world_protocols::msg_suggest::MergeFrom(from.suggest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_suggestion_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_suggestion_result::CopyFrom(const packetw2c_suggestion_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_suggestion_result::IsInitialized() const {

  return true;
}

void packetw2c_suggestion_result::Swap(packetw2c_suggestion_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(suggest_, other->suggest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_suggestion_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_suggestion_result_descriptor_;
  metadata.reflection = packetw2c_suggestion_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_suggest::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_suggest::packetc2w_req_suggest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_req_suggest::InitAsDefaultInstance() {
}

packetc2w_req_suggest::packetc2w_req_suggest(const packetc2w_req_suggest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_req_suggest::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5098;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_suggest::~packetc2w_req_suggest() {
  SharedDtor();
}

void packetc2w_req_suggest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_req_suggest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_suggest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_suggest_descriptor_;
}

const packetc2w_req_suggest& packetc2w_req_suggest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_req_suggest* packetc2w_req_suggest::default_instance_ = NULL;

packetc2w_req_suggest* packetc2w_req_suggest::New() const {
  return new packetc2w_req_suggest;
}

void packetc2w_req_suggest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5098;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_suggest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_suggest];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_req_suggest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_suggest];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_req_suggest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_suggest];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_req_suggest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_suggest];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_suggest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_suggest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_suggest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_suggest::MergeFrom(const packetc2w_req_suggest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_suggest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_suggest::CopyFrom(const packetc2w_req_suggest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_suggest::IsInitialized() const {

  return true;
}

void packetc2w_req_suggest::Swap(packetc2w_req_suggest* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_suggest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_suggest_descriptor_;
  metadata.reflection = packetc2w_req_suggest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_req_suggest_result::kPacketIdFieldNumber;
const int packetw2c_req_suggest_result::kListFieldNumber;
#endif  // !_MSC_VER

packetw2c_req_suggest_result::packetw2c_req_suggest_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_req_suggest_result::InitAsDefaultInstance() {
}

packetw2c_req_suggest_result::packetw2c_req_suggest_result(const packetw2c_req_suggest_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_req_suggest_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7607;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_req_suggest_result::~packetw2c_req_suggest_result() {
  SharedDtor();
}

void packetw2c_req_suggest_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_req_suggest_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_req_suggest_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_req_suggest_result_descriptor_;
}

const packetw2c_req_suggest_result& packetw2c_req_suggest_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_req_suggest_result* packetw2c_req_suggest_result::default_instance_ = NULL;

packetw2c_req_suggest_result* packetw2c_req_suggest_result::New() const {
  return new packetw2c_req_suggest_result;
}

void packetw2c_req_suggest_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7607;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_req_suggest_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_suggest_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .client2world_protocols.msg_suggest list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_req_suggest_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_suggest_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_suggest list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_req_suggest_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_suggest_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_suggest list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_req_suggest_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_suggest_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client2world_protocols.msg_suggest list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_req_suggest_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_req_suggest_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_req_suggest_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_req_suggest_result::MergeFrom(const packetw2c_req_suggest_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_req_suggest_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_req_suggest_result::CopyFrom(const packetw2c_req_suggest_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_req_suggest_result::IsInitialized() const {

  return true;
}

void packetw2c_req_suggest_result::Swap(packetw2c_req_suggest_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_req_suggest_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_req_suggest_result_descriptor_;
  metadata.reflection = packetw2c_req_suggest_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_sync_gold::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_sync_gold::packetc2w_req_sync_gold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_req_sync_gold::InitAsDefaultInstance() {
}

packetc2w_req_sync_gold::packetc2w_req_sync_gold(const packetc2w_req_sync_gold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_req_sync_gold::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5111;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_sync_gold::~packetc2w_req_sync_gold() {
  SharedDtor();
}

void packetc2w_req_sync_gold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_req_sync_gold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_sync_gold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_sync_gold_descriptor_;
}

const packetc2w_req_sync_gold& packetc2w_req_sync_gold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_req_sync_gold* packetc2w_req_sync_gold::default_instance_ = NULL;

packetc2w_req_sync_gold* packetc2w_req_sync_gold::New() const {
  return new packetc2w_req_sync_gold;
}

void packetc2w_req_sync_gold::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5111;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_sync_gold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_sync_gold];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_req_sync_gold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_sync_gold];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_req_sync_gold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_sync_gold];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_req_sync_gold::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_sync_gold];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_sync_gold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_sync_gold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_sync_gold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_sync_gold::MergeFrom(const packetc2w_req_sync_gold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_sync_gold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_sync_gold::CopyFrom(const packetc2w_req_sync_gold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_sync_gold::IsInitialized() const {

  return true;
}

void packetc2w_req_sync_gold::Swap(packetc2w_req_sync_gold* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_sync_gold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_sync_gold_descriptor_;
  metadata.reflection = packetc2w_req_sync_gold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_req_sync_gold_result::kPacketIdFieldNumber;
const int packetw2c_req_sync_gold_result::kGoldFieldNumber;
#endif  // !_MSC_VER

packetw2c_req_sync_gold_result::packetw2c_req_sync_gold_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_req_sync_gold_result::InitAsDefaultInstance() {
}

packetw2c_req_sync_gold_result::packetw2c_req_sync_gold_result(const packetw2c_req_sync_gold_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_req_sync_gold_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7622;
  gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_req_sync_gold_result::~packetw2c_req_sync_gold_result() {
  SharedDtor();
}

void packetw2c_req_sync_gold_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_req_sync_gold_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_req_sync_gold_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_req_sync_gold_result_descriptor_;
}

const packetw2c_req_sync_gold_result& packetw2c_req_sync_gold_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_req_sync_gold_result* packetw2c_req_sync_gold_result::default_instance_ = NULL;

packetw2c_req_sync_gold_result* packetw2c_req_sync_gold_result::New() const {
  return new packetw2c_req_sync_gold_result;
}

void packetw2c_req_sync_gold_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7622;
    gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_req_sync_gold_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_sync_gold_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional int64 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_req_sync_gold_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_sync_gold_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_req_sync_gold_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_sync_gold_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_req_sync_gold_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_sync_gold_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int64 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_req_sync_gold_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_req_sync_gold_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_req_sync_gold_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_req_sync_gold_result::MergeFrom(const packetw2c_req_sync_gold_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_req_sync_gold_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_req_sync_gold_result::CopyFrom(const packetw2c_req_sync_gold_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_req_sync_gold_result::IsInitialized() const {

  return true;
}

void packetw2c_req_sync_gold_result::Swap(packetw2c_req_sync_gold_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_req_sync_gold_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_req_sync_gold_result_descriptor_;
  metadata.reflection = packetw2c_req_sync_gold_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_notice::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetw2c_notice::packetw2c_notice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_notice::InitAsDefaultInstance() {
}

packetw2c_notice::packetw2c_notice(const packetw2c_notice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_notice::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7644;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_notice::~packetw2c_notice() {
  SharedDtor();
}

void packetw2c_notice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_notice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_notice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_notice_descriptor_;
}

const packetw2c_notice& packetw2c_notice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_notice* packetw2c_notice::default_instance_ = NULL;

packetw2c_notice* packetw2c_notice::New() const {
  return new packetw2c_notice;
}

void packetw2c_notice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7644;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_notice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_notice];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_notice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_notice];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_notice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_notice];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_notice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_notice];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_notice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_notice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_notice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_notice::MergeFrom(const packetw2c_notice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_notice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_notice::CopyFrom(const packetw2c_notice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_notice::IsInitialized() const {

  return true;
}

void packetw2c_notice::Swap(packetw2c_notice* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_notice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_notice_descriptor_;
  metadata.reflection = packetw2c_notice_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

// @@protoc_insertion_point(global_scope)
