// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_multiredblack_logic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_multiredblack_logic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game_multiredblack_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2l_get_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_result_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_result_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_scene_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_scene_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_ask_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_ask_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bet_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bet_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_ask_continue_bet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_ask_continue_bet_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_continue_bet_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_continue_bet_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_ask_clear_bet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_ask_clear_bet_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_clear_bet_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_clear_bet_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_ask_playerlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_ask_playerlist_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_playerlist_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_playerlist_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_ask_history_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_ask_history_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_history_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_history_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_scene_prepare_into_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_scene_prepare_into_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_scene_bet_into_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_scene_bet_into_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_master_bets_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_master_bets_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_betinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_betinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_sync_scene_bet_into_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_sync_scene_bet_into_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_scene_deal_into_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_scene_deal_into_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_player_award_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_player_award_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_scene_result_into_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_scene_result_into_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_debug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_debug_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_debug_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_debug_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_player_betinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_player_betinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notify_sceneinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notify_sceneinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_online_cnt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_online_cnt_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fmultiredblack_5flogic_2eproto() {
  protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_multiredblack_logic.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2l_get_scene_info_descriptor_ = file->message_type(0);
  static const int packetc2l_get_scene_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_scene_info, packet_id_),
  };
  packetc2l_get_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_scene_info_descriptor_,
      packetc2l_get_scene_info::default_instance_,
      packetc2l_get_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_scene_info));
  msg_player_info_descriptor_ = file->message_type(1);
  static const int msg_player_info_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, head_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, head_custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, win_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, bets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, play_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, other_bets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, other_win_),
  };
  msg_player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_player_info_descriptor_,
      msg_player_info::default_instance_,
      msg_player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_player_info));
  msg_bet_info_descriptor_ = file->message_type(2);
  static const int msg_bet_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, self_bet_golds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, bets_),
  };
  msg_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_bet_info_descriptor_,
      msg_bet_info::default_instance_,
      msg_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_bet_info));
  msg_result_info_descriptor_ = file->message_type(3);
  static const int msg_result_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_info, other_win_golds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_info, self_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_info, self_is_bet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_info, self_pure_win_gold_),
  };
  msg_result_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_result_info_descriptor_,
      msg_result_info::default_instance_,
      msg_result_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_result_info));
  msg_scene_info_descriptor_ = file->message_type(4);
  static const int msg_scene_info_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, scene_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, count_down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, bet_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, cards_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, cards_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, winner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, result_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, main_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, online_cnt_),
  };
  msg_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_scene_info_descriptor_,
      msg_scene_info::default_instance_,
      msg_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_scene_info));
  packetl2c_get_scene_info_result_descriptor_ = file->message_type(5);
  static const int packetl2c_get_scene_info_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_scene_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_scene_info_result, scene_info_),
  };
  packetl2c_get_scene_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_scene_info_result_descriptor_,
      packetl2c_get_scene_info_result::default_instance_,
      packetl2c_get_scene_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_scene_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_scene_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_scene_info_result));
  packetc2l_ask_bet_info_descriptor_ = file->message_type(6);
  static const int packetc2l_ask_bet_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_bet_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_bet_info, bet_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_bet_info, bet_gold_),
  };
  packetc2l_ask_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_ask_bet_info_descriptor_,
      packetc2l_ask_bet_info::default_instance_,
      packetc2l_ask_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_ask_bet_info));
  packetl2c_bet_info_result_descriptor_ = file->message_type(7);
  static const int packetl2c_bet_info_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, bet_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, bet_gold_),
  };
  packetl2c_bet_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bet_info_result_descriptor_,
      packetl2c_bet_info_result::default_instance_,
      packetl2c_bet_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bet_info_result));
  packetc2l_ask_continue_bet_descriptor_ = file->message_type(8);
  static const int packetc2l_ask_continue_bet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_continue_bet, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_continue_bet, bet_golds_),
  };
  packetc2l_ask_continue_bet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_ask_continue_bet_descriptor_,
      packetc2l_ask_continue_bet::default_instance_,
      packetc2l_ask_continue_bet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_continue_bet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_continue_bet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_ask_continue_bet));
  packetl2c_continue_bet_result_descriptor_ = file->message_type(9);
  static const int packetl2c_continue_bet_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_continue_bet_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_continue_bet_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_continue_bet_result, bet_golds_),
  };
  packetl2c_continue_bet_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_continue_bet_result_descriptor_,
      packetl2c_continue_bet_result::default_instance_,
      packetl2c_continue_bet_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_continue_bet_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_continue_bet_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_continue_bet_result));
  packetc2l_ask_clear_bet_descriptor_ = file->message_type(10);
  static const int packetc2l_ask_clear_bet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_clear_bet, packet_id_),
  };
  packetc2l_ask_clear_bet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_ask_clear_bet_descriptor_,
      packetc2l_ask_clear_bet::default_instance_,
      packetc2l_ask_clear_bet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_clear_bet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_clear_bet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_ask_clear_bet));
  packetl2c_clear_bet_result_descriptor_ = file->message_type(11);
  static const int packetl2c_clear_bet_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_clear_bet_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_clear_bet_result, result_),
  };
  packetl2c_clear_bet_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_clear_bet_result_descriptor_,
      packetl2c_clear_bet_result::default_instance_,
      packetl2c_clear_bet_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_clear_bet_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_clear_bet_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_clear_bet_result));
  packetc2l_ask_playerlist_descriptor_ = file->message_type(12);
  static const int packetc2l_ask_playerlist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_playerlist, packet_id_),
  };
  packetc2l_ask_playerlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_ask_playerlist_descriptor_,
      packetc2l_ask_playerlist::default_instance_,
      packetc2l_ask_playerlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_playerlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_playerlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_ask_playerlist));
  packetl2c_playerlist_result_descriptor_ = file->message_type(13);
  static const int packetl2c_playerlist_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_playerlist_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_playerlist_result, player_infos_),
  };
  packetl2c_playerlist_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_playerlist_result_descriptor_,
      packetl2c_playerlist_result::default_instance_,
      packetl2c_playerlist_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_playerlist_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_playerlist_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_playerlist_result));
  packetc2l_ask_history_info_descriptor_ = file->message_type(14);
  static const int packetc2l_ask_history_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_history_info, packet_id_),
  };
  packetc2l_ask_history_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_ask_history_info_descriptor_,
      packetc2l_ask_history_info::default_instance_,
      packetc2l_ask_history_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_history_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_history_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_ask_history_info));
  packetl2c_history_info_descriptor_ = file->message_type(15);
  static const int packetl2c_history_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_history_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_history_info, history_infos_),
  };
  packetl2c_history_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_history_info_descriptor_,
      packetl2c_history_info::default_instance_,
      packetl2c_history_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_history_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_history_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_history_info));
  packetl2c_bc_scene_prepare_into_descriptor_ = file->message_type(16);
  static const int packetl2c_bc_scene_prepare_into_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_prepare_into, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_prepare_into, count_down_),
  };
  packetl2c_bc_scene_prepare_into_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_scene_prepare_into_descriptor_,
      packetl2c_bc_scene_prepare_into::default_instance_,
      packetl2c_bc_scene_prepare_into_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_prepare_into, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_prepare_into, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_scene_prepare_into));
  packetl2c_bc_scene_bet_into_descriptor_ = file->message_type(17);
  static const int packetl2c_bc_scene_bet_into_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_bet_into, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_bet_into, count_down_),
  };
  packetl2c_bc_scene_bet_into_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_scene_bet_into_descriptor_,
      packetl2c_bc_scene_bet_into::default_instance_,
      packetl2c_bc_scene_bet_into_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_bet_into, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_bet_into, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_scene_bet_into));
  msg_master_bets_descriptor_ = file->message_type(18);
  static const int msg_master_bets_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_master_bets, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_master_bets, player_bets_),
  };
  msg_master_bets_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_master_bets_descriptor_,
      msg_master_bets::default_instance_,
      msg_master_bets_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_master_bets, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_master_bets, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_master_bets));
  msg_betinfo_descriptor_ = file->message_type(19);
  static const int msg_betinfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_betinfo, bet_golds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_betinfo, master_bets_),
  };
  msg_betinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_betinfo_descriptor_,
      msg_betinfo::default_instance_,
      msg_betinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_betinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_betinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_betinfo));
  packetl2c_bc_sync_scene_bet_into_descriptor_ = file->message_type(20);
  static const int packetl2c_bc_sync_scene_bet_into_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_sync_scene_bet_into, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_sync_scene_bet_into, bets_),
  };
  packetl2c_bc_sync_scene_bet_into_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_sync_scene_bet_into_descriptor_,
      packetl2c_bc_sync_scene_bet_into::default_instance_,
      packetl2c_bc_sync_scene_bet_into_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_sync_scene_bet_into, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_sync_scene_bet_into, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_sync_scene_bet_into));
  packetl2c_bc_scene_deal_into_descriptor_ = file->message_type(21);
  static const int packetl2c_bc_scene_deal_into_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_deal_into, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_deal_into, count_down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_deal_into, cards_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_deal_into, cards_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_deal_into, winner_),
  };
  packetl2c_bc_scene_deal_into_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_scene_deal_into_descriptor_,
      packetl2c_bc_scene_deal_into::default_instance_,
      packetl2c_bc_scene_deal_into_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_deal_into, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_deal_into, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_scene_deal_into));
  msg_player_award_descriptor_ = file->message_type(22);
  static const int msg_player_award_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_award, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_award, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_award, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_award, pure_gold_),
  };
  msg_player_award_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_player_award_descriptor_,
      msg_player_award::default_instance_,
      msg_player_award_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_award, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_award, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_player_award));
  packetl2c_bc_scene_result_into_descriptor_ = file->message_type(23);
  static const int packetl2c_bc_scene_result_into_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_result_into, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_result_into, count_down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_result_into, result_info_),
  };
  packetl2c_bc_scene_result_into_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_scene_result_into_descriptor_,
      packetl2c_bc_scene_result_into::default_instance_,
      packetl2c_bc_scene_result_into_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_result_into, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_result_into, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_scene_result_into));
  packetl2c_debug_descriptor_ = file->message_type(24);
  static const int packetl2c_debug_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_debug, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_debug, kill_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_debug, kill_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_debug, custom_cards_),
  };
  packetl2c_debug_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_debug_descriptor_,
      packetl2c_debug::default_instance_,
      packetl2c_debug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_debug, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_debug, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_debug));
  packetl2c_debug_result_descriptor_ = file->message_type(25);
  static const int packetl2c_debug_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_debug_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_debug_result, result_),
  };
  packetl2c_debug_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_debug_result_descriptor_,
      packetl2c_debug_result::default_instance_,
      packetl2c_debug_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_debug_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_debug_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_debug_result));
  msg_player_betinfo_descriptor_ = file->message_type(26);
  static const int msg_player_betinfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_betinfo, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_betinfo, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_betinfo, bet_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_betinfo, player_gold_),
  };
  msg_player_betinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_player_betinfo_descriptor_,
      msg_player_betinfo::default_instance_,
      msg_player_betinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_betinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_betinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_player_betinfo));
  packetl2c_notify_sceneinfo_descriptor_ = file->message_type(27);
  static const int packetl2c_notify_sceneinfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_sceneinfo, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_sceneinfo, main_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_sceneinfo, banker_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_sceneinfo, banker_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_sceneinfo, player_betinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_sceneinfo, earn_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_sceneinfo, stock_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_sceneinfo, banker_gold_),
  };
  packetl2c_notify_sceneinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notify_sceneinfo_descriptor_,
      packetl2c_notify_sceneinfo::default_instance_,
      packetl2c_notify_sceneinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_sceneinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_sceneinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notify_sceneinfo));
  packetl2c_online_cnt_descriptor_ = file->message_type(28);
  static const int packetl2c_online_cnt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_online_cnt, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_online_cnt, cnt_),
  };
  packetl2c_online_cnt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_online_cnt_descriptor_,
      packetl2c_online_cnt::default_instance_,
      packetl2c_online_cnt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_online_cnt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_online_cnt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_online_cnt));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fmultiredblack_5flogic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_scene_info_descriptor_, &packetc2l_get_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_player_info_descriptor_, &msg_player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_bet_info_descriptor_, &msg_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_result_info_descriptor_, &msg_result_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_scene_info_descriptor_, &msg_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_scene_info_result_descriptor_, &packetl2c_get_scene_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_ask_bet_info_descriptor_, &packetc2l_ask_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bet_info_result_descriptor_, &packetl2c_bet_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_ask_continue_bet_descriptor_, &packetc2l_ask_continue_bet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_continue_bet_result_descriptor_, &packetl2c_continue_bet_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_ask_clear_bet_descriptor_, &packetc2l_ask_clear_bet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_clear_bet_result_descriptor_, &packetl2c_clear_bet_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_ask_playerlist_descriptor_, &packetc2l_ask_playerlist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_playerlist_result_descriptor_, &packetl2c_playerlist_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_ask_history_info_descriptor_, &packetc2l_ask_history_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_history_info_descriptor_, &packetl2c_history_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_scene_prepare_into_descriptor_, &packetl2c_bc_scene_prepare_into::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_scene_bet_into_descriptor_, &packetl2c_bc_scene_bet_into::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_master_bets_descriptor_, &msg_master_bets::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_betinfo_descriptor_, &msg_betinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_sync_scene_bet_into_descriptor_, &packetl2c_bc_sync_scene_bet_into::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_scene_deal_into_descriptor_, &packetl2c_bc_scene_deal_into::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_player_award_descriptor_, &msg_player_award::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_scene_result_into_descriptor_, &packetl2c_bc_scene_result_into::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_debug_descriptor_, &packetl2c_debug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_debug_result_descriptor_, &packetl2c_debug_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_player_betinfo_descriptor_, &msg_player_betinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notify_sceneinfo_descriptor_, &packetl2c_notify_sceneinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_online_cnt_descriptor_, &packetl2c_online_cnt::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fmultiredblack_5flogic_2eproto() {
  delete packetc2l_get_scene_info::default_instance_;
  delete packetc2l_get_scene_info_reflection_;
  delete msg_player_info::default_instance_;
  delete msg_player_info_reflection_;
  delete msg_bet_info::default_instance_;
  delete msg_bet_info_reflection_;
  delete msg_result_info::default_instance_;
  delete msg_result_info_reflection_;
  delete msg_scene_info::default_instance_;
  delete msg_scene_info_reflection_;
  delete packetl2c_get_scene_info_result::default_instance_;
  delete packetl2c_get_scene_info_result_reflection_;
  delete packetc2l_ask_bet_info::default_instance_;
  delete packetc2l_ask_bet_info_reflection_;
  delete packetl2c_bet_info_result::default_instance_;
  delete packetl2c_bet_info_result_reflection_;
  delete packetc2l_ask_continue_bet::default_instance_;
  delete packetc2l_ask_continue_bet_reflection_;
  delete packetl2c_continue_bet_result::default_instance_;
  delete packetl2c_continue_bet_result_reflection_;
  delete packetc2l_ask_clear_bet::default_instance_;
  delete packetc2l_ask_clear_bet_reflection_;
  delete packetl2c_clear_bet_result::default_instance_;
  delete packetl2c_clear_bet_result_reflection_;
  delete packetc2l_ask_playerlist::default_instance_;
  delete packetc2l_ask_playerlist_reflection_;
  delete packetl2c_playerlist_result::default_instance_;
  delete packetl2c_playerlist_result_reflection_;
  delete packetc2l_ask_history_info::default_instance_;
  delete packetc2l_ask_history_info_reflection_;
  delete packetl2c_history_info::default_instance_;
  delete packetl2c_history_info_reflection_;
  delete packetl2c_bc_scene_prepare_into::default_instance_;
  delete packetl2c_bc_scene_prepare_into_reflection_;
  delete packetl2c_bc_scene_bet_into::default_instance_;
  delete packetl2c_bc_scene_bet_into_reflection_;
  delete msg_master_bets::default_instance_;
  delete msg_master_bets_reflection_;
  delete msg_betinfo::default_instance_;
  delete msg_betinfo_reflection_;
  delete packetl2c_bc_sync_scene_bet_into::default_instance_;
  delete packetl2c_bc_sync_scene_bet_into_reflection_;
  delete packetl2c_bc_scene_deal_into::default_instance_;
  delete packetl2c_bc_scene_deal_into_reflection_;
  delete msg_player_award::default_instance_;
  delete msg_player_award_reflection_;
  delete packetl2c_bc_scene_result_into::default_instance_;
  delete packetl2c_bc_scene_result_into_reflection_;
  delete packetl2c_debug::default_instance_;
  delete packetl2c_debug_reflection_;
  delete packetl2c_debug_result::default_instance_;
  delete packetl2c_debug_result_reflection_;
  delete msg_player_betinfo::default_instance_;
  delete msg_player_betinfo_reflection_;
  delete packetl2c_notify_sceneinfo::default_instance_;
  delete packetl2c_notify_sceneinfo_reflection_;
  delete packetl2c_online_cnt::default_instance_;
  delete packetl2c_online_cnt_reflection_;
}

void protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::game_multiredblack_protocols::protobuf_AddDesc_game_5fmultiredblack_5fdef_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036game_multiredblack_logic.proto\022\034game_m"
    "ultiredblack_protocols\032\034game_multiredbla"
    "ck_def.proto\032\022msg_type_def.proto\"x\n\030pack"
    "etc2l_get_scene_info\022\\\n\tpacket_id\030\001 \001(\0162"
    "/.game_multiredblack_protocols.e_server_"
    "msg_type:\030e_mst_c2l_get_scene_info\"\370\001\n\017m"
    "sg_player_info\022\021\n\tplayer_id\030\001 \001(\005\022\023\n\013pla"
    "yer_name\030\002 \001(\t\022\022\n\nhead_frame\030\003 \001(\005\022\023\n\013he"
    "ad_custom\030\004 \001(\t\022\023\n\013player_gold\030\005 \001(\003\022\022\n\n"
    "player_sex\030\006 \001(\005\022\021\n\tvip_level\030\007 \001(\005\022\021\n\tw"
    "in_count\030\010 \001(\005\022\014\n\004bets\030\t \001(\005\022\020\n\010play_cnt"
    "\030\n \001(\005\022\022\n\nother_bets\030\013 \003(\005\022\021\n\tother_win\030"
    "\014 \003(\005\"_\n\014msg_bet_info\022\026\n\016self_bet_golds\030"
    "\001 \003(\003\0227\n\004bets\030\002 \003(\0132).game_multiredblack"
    "_protocols.msg_betinfo\"n\n\017msg_result_inf"
    "o\022\027\n\017other_win_golds\030\001 \003(\003\022\021\n\tself_gold\030"
    "\002 \001(\003\022\023\n\013self_is_bet\030\003 \001(\010\022\032\n\022self_pure_"
    "win_gold\030\004 \001(\003\"\251\002\n\016msg_scene_info\022\016\n\006roo"
    "mid\030\001 \001(\005\022\023\n\013scene_state\030\002 \001(\005\022\022\n\ncount_"
    "down\030\003 \001(\005\022<\n\010bet_info\030\005 \001(\0132*.game_mult"
    "iredblack_protocols.msg_bet_info\022\023\n\013card"
    "s_infos\030\006 \003(\005\022\022\n\ncards_type\030\007 \003(\005\022\016\n\006win"
    "ner\030\010 \001(\005\022B\n\013result_info\030\t \001(\0132-.game_mu"
    "ltiredblack_protocols.msg_result_info\022\017\n"
    "\007main_id\030\n \001(\005\022\022\n\nonline_cnt\030\013 \001(\005\"\310\001\n\037p"
    "acketl2c_get_scene_info_result\022c\n\tpacket"
    "_id\030\001 \001(\0162/.game_multiredblack_protocols"
    ".e_server_msg_type:\037e_mst_l2c_get_scene_"
    "info_result\022@\n\nscene_info\030\002 \001(\0132,.game_m"
    "ultiredblack_protocols.msg_scene_info\"\231\001"
    "\n\026packetc2l_ask_bet_info\022Z\n\tpacket_id\030\001 "
    "\001(\0162/.game_multiredblack_protocols.e_ser"
    "ver_msg_type:\026e_mst_c2l_ask_bet_info\022\021\n\t"
    "bet_index\030\002 \001(\005\022\020\n\010bet_gold\030\003 \001(\003\"\333\001\n\031pa"
    "cketl2c_bet_info_result\022]\n\tpacket_id\030\001 \001"
    "(\0162/.game_multiredblack_protocols.e_serv"
    "er_msg_type:\031e_mst_l2c_bet_info_result\022:"
    "\n\006result\030\002 \001(\0162\036.msg_type_def.e_msg_resu"
    "lt_def:\ne_rmt_fail\022\021\n\tbet_index\030\003 \001(\005\022\020\n"
    "\010bet_gold\030\004 \001(\003\"\217\001\n\032packetc2l_ask_contin"
    "ue_bet\022^\n\tpacket_id\030\001 \001(\0162/.game_multire"
    "dblack_protocols.e_server_msg_type:\032e_ms"
    "t_c2l_ask_continue_bet\022\021\n\tbet_golds\030\002 \003("
    "\003\"\321\001\n\035packetl2c_continue_bet_result\022a\n\tp"
    "acket_id\030\001 \001(\0162/.game_multiredblack_prot"
    "ocols.e_server_msg_type:\035e_mst_l2c_conti"
    "nue_bet_result\022:\n\006result\030\002 \001(\0162\036.msg_typ"
    "e_def.e_msg_result_def:\ne_rmt_fail\022\021\n\tbe"
    "t_golds\030\003 \003(\003\"v\n\027packetc2l_ask_clear_bet"
    "\022[\n\tpacket_id\030\001 \001(\0162/.game_multiredblack"
    "_protocols.e_server_msg_type:\027e_mst_c2l_"
    "ask_clear_bet\"\270\001\n\032packetl2c_clear_bet_re"
    "sult\022^\n\tpacket_id\030\001 \001(\0162/.game_multiredb"
    "lack_protocols.e_server_msg_type:\032e_mst_"
    "l2c_clear_bet_result\022:\n\006result\030\002 \001(\0162\036.m"
    "sg_type_def.e_msg_result_def:\ne_rmt_fail"
    "\"x\n\030packetc2l_ask_playerlist\022\\\n\tpacket_i"
    "d\030\001 \001(\0162/.game_multiredblack_protocols.e"
    "_server_msg_type:\030e_mst_c2l_ask_playerli"
    "st\"\303\001\n\033packetl2c_playerlist_result\022_\n\tpa"
    "cket_id\030\001 \001(\0162/.game_multiredblack_proto"
    "cols.e_server_msg_type:\033e_mst_l2c_player"
    "list_result\022C\n\014player_infos\030\002 \003(\0132-.game"
    "_multiredblack_protocols.msg_player_info"
    "\"|\n\032packetc2l_ask_history_info\022^\n\tpacket"
    "_id\030\001 \001(\0162/.game_multiredblack_protocols"
    ".e_server_msg_type:\032e_mst_c2l_ask_histor"
    "y_info\"\213\001\n\026packetl2c_history_info\022Z\n\tpac"
    "ket_id\030\001 \001(\0162/.game_multiredblack_protoc"
    "ols.e_server_msg_type:\026e_mst_l2c_history"
    "_info\022\025\n\rhistory_infos\030\002 \003(\005\"\232\001\n\037packetl"
    "2c_bc_scene_prepare_into\022c\n\tpacket_id\030\001 "
    "\001(\0162/.game_multiredblack_protocols.e_ser"
    "ver_msg_type:\037e_mst_l2c_bc_scene_prepare"
    "_into\022\022\n\ncount_down\030\002 \001(\005\"\222\001\n\033packetl2c_"
    "bc_scene_bet_into\022_\n\tpacket_id\030\001 \001(\0162/.g"
    "ame_multiredblack_protocols.e_server_msg"
    "_type:\033e_mst_l2c_bc_scene_bet_into\022\022\n\nco"
    "unt_down\030\002 \001(\005\"9\n\017msg_master_bets\022\021\n\tpla"
    "yer_id\030\001 \001(\005\022\023\n\013player_bets\030\002 \001(\003\"d\n\013msg"
    "_betinfo\022\021\n\tbet_golds\030\001 \001(\003\022B\n\013master_be"
    "ts\030\002 \003(\0132-.game_multiredblack_protocols."
    "msg_master_bets\"\301\001\n packetl2c_bc_sync_sc"
    "ene_bet_into\022d\n\tpacket_id\030\001 \001(\0162/.game_m"
    "ultiredblack_protocols.e_server_msg_type"
    ": e_mst_l2c_bc_sync_scene_bet_into\0227\n\004be"
    "ts\030\002 \003(\0132).game_multiredblack_protocols."
    "msg_betinfo\"\315\001\n\034packetl2c_bc_scene_deal_"
    "into\022`\n\tpacket_id\030\001 \001(\0162/.game_multiredb"
    "lack_protocols.e_server_msg_type:\034e_mst_"
    "l2c_bc_scene_deal_into\022\022\n\ncount_down\030\002 \001"
    "(\005\022\023\n\013cards_infos\030\003 \003(\005\022\022\n\ncards_type\030\004 "
    "\003(\005\022\016\n\006winner\030\005 \001(\005\"T\n\020msg_player_award\022"
    "\021\n\tplayer_id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\014\n\004gold"
    "\030\003 \001(\003\022\021\n\tpure_gold\030\004 \001(\003\"\334\001\n\036packetl2c_"
    "bc_scene_result_into\022b\n\tpacket_id\030\001 \001(\0162"
    "/.game_multiredblack_protocols.e_server_"
    "msg_type:\036e_mst_l2c_bc_scene_result_into"
    "\022\022\n\ncount_down\030\002 \001(\005\022B\n\013result_info\030\003 \001("
    "\0132-.game_multiredblack_protocols.msg_res"
    "ult_info\"\247\001\n\017packetl2c_debug\022S\n\tpacket_i"
    "d\030\001 \001(\0162/.game_multiredblack_protocols.e"
    "_server_msg_type:\017e_mst_c2l_debug\022\023\n\010kil"
    "l_cnt\030\002 \001(\005:\0010\022\024\n\tkill_type\030\003 \001(\005:\0010\022\024\n\014"
    "custom_cards\030\004 \003(\005\"\260\001\n\026packetl2c_debug_r"
    "esult\022Z\n\tpacket_id\030\001 \001(\0162/.game_multired"
    "black_protocols.e_server_msg_type:\026e_mst"
    "_l2c_debug_result\022:\n\006result\030\002 \001(\0162\036.msg_"
    "type_def.e_msg_result_def:\ne_rmt_fail\"c\n"
    "\022msg_player_betinfo\022\021\n\tplayer_id\030\001 \001(\005\022\023"
    "\n\013player_name\030\002 \001(\t\022\020\n\010bet_gold\030\003 \003(\005\022\023\n"
    "\013player_gold\030\004 \001(\003\"\276\002\n\032packetl2c_notify_"
    "sceneinfo\022^\n\tpacket_id\030\001 \001(\0162/.game_mult"
    "iredblack_protocols.e_server_msg_type:\032e"
    "_mst_l2c_notify_sceneinfo\022\017\n\007main_id\030\002 \001"
    "(\005\022\023\n\013banker_type\030\003 \001(\005\022\023\n\013banker_name\030\004"
    " \001(\t\022I\n\017player_betinfos\030\005 \003(\01320.game_mul"
    "tiredblack_protocols.msg_player_betinfo\022"
    "\021\n\tearn_gold\030\006 \001(\003\022\022\n\nstock_gold\030\007 \001(\003\022\023"
    "\n\013banker_gold\030\010 \001(\005\"}\n\024packetl2c_online_"
    "cnt\022X\n\tpacket_id\030\001 \001(\0162/.game_multiredbl"
    "ack_protocols.e_server_msg_type:\024e_mst_l"
    "2c_online_cnt\022\013\n\003cnt\030\002 \001(\005", 4906);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_multiredblack_logic.proto", &protobuf_RegisterTypes);
  packetc2l_get_scene_info::default_instance_ = new packetc2l_get_scene_info();
  msg_player_info::default_instance_ = new msg_player_info();
  msg_bet_info::default_instance_ = new msg_bet_info();
  msg_result_info::default_instance_ = new msg_result_info();
  msg_scene_info::default_instance_ = new msg_scene_info();
  packetl2c_get_scene_info_result::default_instance_ = new packetl2c_get_scene_info_result();
  packetc2l_ask_bet_info::default_instance_ = new packetc2l_ask_bet_info();
  packetl2c_bet_info_result::default_instance_ = new packetl2c_bet_info_result();
  packetc2l_ask_continue_bet::default_instance_ = new packetc2l_ask_continue_bet();
  packetl2c_continue_bet_result::default_instance_ = new packetl2c_continue_bet_result();
  packetc2l_ask_clear_bet::default_instance_ = new packetc2l_ask_clear_bet();
  packetl2c_clear_bet_result::default_instance_ = new packetl2c_clear_bet_result();
  packetc2l_ask_playerlist::default_instance_ = new packetc2l_ask_playerlist();
  packetl2c_playerlist_result::default_instance_ = new packetl2c_playerlist_result();
  packetc2l_ask_history_info::default_instance_ = new packetc2l_ask_history_info();
  packetl2c_history_info::default_instance_ = new packetl2c_history_info();
  packetl2c_bc_scene_prepare_into::default_instance_ = new packetl2c_bc_scene_prepare_into();
  packetl2c_bc_scene_bet_into::default_instance_ = new packetl2c_bc_scene_bet_into();
  msg_master_bets::default_instance_ = new msg_master_bets();
  msg_betinfo::default_instance_ = new msg_betinfo();
  packetl2c_bc_sync_scene_bet_into::default_instance_ = new packetl2c_bc_sync_scene_bet_into();
  packetl2c_bc_scene_deal_into::default_instance_ = new packetl2c_bc_scene_deal_into();
  msg_player_award::default_instance_ = new msg_player_award();
  packetl2c_bc_scene_result_into::default_instance_ = new packetl2c_bc_scene_result_into();
  packetl2c_debug::default_instance_ = new packetl2c_debug();
  packetl2c_debug_result::default_instance_ = new packetl2c_debug_result();
  msg_player_betinfo::default_instance_ = new msg_player_betinfo();
  packetl2c_notify_sceneinfo::default_instance_ = new packetl2c_notify_sceneinfo();
  packetl2c_online_cnt::default_instance_ = new packetl2c_online_cnt();
  packetc2l_get_scene_info::default_instance_->InitAsDefaultInstance();
  msg_player_info::default_instance_->InitAsDefaultInstance();
  msg_bet_info::default_instance_->InitAsDefaultInstance();
  msg_result_info::default_instance_->InitAsDefaultInstance();
  msg_scene_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_scene_info_result::default_instance_->InitAsDefaultInstance();
  packetc2l_ask_bet_info::default_instance_->InitAsDefaultInstance();
  packetl2c_bet_info_result::default_instance_->InitAsDefaultInstance();
  packetc2l_ask_continue_bet::default_instance_->InitAsDefaultInstance();
  packetl2c_continue_bet_result::default_instance_->InitAsDefaultInstance();
  packetc2l_ask_clear_bet::default_instance_->InitAsDefaultInstance();
  packetl2c_clear_bet_result::default_instance_->InitAsDefaultInstance();
  packetc2l_ask_playerlist::default_instance_->InitAsDefaultInstance();
  packetl2c_playerlist_result::default_instance_->InitAsDefaultInstance();
  packetc2l_ask_history_info::default_instance_->InitAsDefaultInstance();
  packetl2c_history_info::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_scene_prepare_into::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_scene_bet_into::default_instance_->InitAsDefaultInstance();
  msg_master_bets::default_instance_->InitAsDefaultInstance();
  msg_betinfo::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_sync_scene_bet_into::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_scene_deal_into::default_instance_->InitAsDefaultInstance();
  msg_player_award::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_scene_result_into::default_instance_->InitAsDefaultInstance();
  packetl2c_debug::default_instance_->InitAsDefaultInstance();
  packetl2c_debug_result::default_instance_->InitAsDefaultInstance();
  msg_player_betinfo::default_instance_->InitAsDefaultInstance();
  packetl2c_notify_sceneinfo::default_instance_->InitAsDefaultInstance();
  packetl2c_online_cnt::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fmultiredblack_5flogic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fmultiredblack_5flogic_2eproto {
  StaticDescriptorInitializer_game_5fmultiredblack_5flogic_2eproto() {
    protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  }
} static_descriptor_initializer_game_5fmultiredblack_5flogic_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_scene_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_scene_info::packetc2l_get_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_scene_info::InitAsDefaultInstance() {
}

packetc2l_get_scene_info::packetc2l_get_scene_info(const packetc2l_get_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_scene_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10010;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_scene_info::~packetc2l_get_scene_info() {
  SharedDtor();
}

void packetc2l_get_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_scene_info_descriptor_;
}

const packetc2l_get_scene_info& packetc2l_get_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_get_scene_info* packetc2l_get_scene_info::default_instance_ = NULL;

packetc2l_get_scene_info* packetc2l_get_scene_info::New() const {
  return new packetc2l_get_scene_info;
}

void packetc2l_get_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10010;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_multiredblack_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_multiredblack_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_scene_info::MergeFrom(const packetc2l_get_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_scene_info::CopyFrom(const packetc2l_get_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_scene_info::IsInitialized() const {

  return true;
}

void packetc2l_get_scene_info::Swap(packetc2l_get_scene_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_scene_info_descriptor_;
  metadata.reflection = packetc2l_get_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_player_info::kPlayerIdFieldNumber;
const int msg_player_info::kPlayerNameFieldNumber;
const int msg_player_info::kHeadFrameFieldNumber;
const int msg_player_info::kHeadCustomFieldNumber;
const int msg_player_info::kPlayerGoldFieldNumber;
const int msg_player_info::kPlayerSexFieldNumber;
const int msg_player_info::kVipLevelFieldNumber;
const int msg_player_info::kWinCountFieldNumber;
const int msg_player_info::kBetsFieldNumber;
const int msg_player_info::kPlayCntFieldNumber;
const int msg_player_info::kOtherBetsFieldNumber;
const int msg_player_info::kOtherWinFieldNumber;
#endif  // !_MSC_VER

msg_player_info::msg_player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_player_info::InitAsDefaultInstance() {
}

msg_player_info::msg_player_info(const msg_player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_player_info::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_frame_ = 0;
  head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_gold_ = GOOGLE_LONGLONG(0);
  player_sex_ = 0;
  vip_level_ = 0;
  win_count_ = 0;
  bets_ = 0;
  play_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_player_info::~msg_player_info() {
  SharedDtor();
}

void msg_player_info::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete head_custom_;
  }
  if (this != default_instance_) {
  }
}

void msg_player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_player_info_descriptor_;
}

const msg_player_info& msg_player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

msg_player_info* msg_player_info::default_instance_ = NULL;

msg_player_info* msg_player_info::New() const {
  return new msg_player_info;
}

void msg_player_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    head_frame_ = 0;
    if (has_head_custom()) {
      if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
        head_custom_->clear();
      }
    }
    player_gold_ = GOOGLE_LONGLONG(0);
    player_sex_ = 0;
    vip_level_ = 0;
    win_count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bets_ = 0;
    play_cnt_ = 0;
  }
  other_bets_.Clear();
  other_win_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_frame;
        break;
      }

      // optional int32 head_frame = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_frame_)));
          set_has_head_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_head_custom;
        break;
      }

      // optional string head_custom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head_custom().data(), this->head_custom().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_player_sex;
        break;
      }

      // optional int32 player_sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_sex_)));
          set_has_player_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vip_level;
        break;
      }

      // optional int32 vip_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_win_count;
        break;
      }

      // optional int32 win_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_count_)));
          set_has_win_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bets;
        break;
      }

      // optional int32 bets = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bets_)));
          set_has_bets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_play_cnt;
        break;
      }

      // optional int32 play_cnt = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_play_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &play_cnt_)));
          set_has_play_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_other_bets;
        break;
      }

      // repeated int32 other_bets = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_bets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_other_bets())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_other_bets())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_other_bets;
        if (input->ExpectTag(96)) goto parse_other_win;
        break;
      }

      // repeated int32 other_win = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_other_win())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_other_win())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_other_win;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  // optional int32 head_frame = 3;
  if (has_head_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->head_frame(), output);
  }

  // optional string head_custom = 4;
  if (has_head_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head_custom().data(), this->head_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->head_custom(), output);
  }

  // optional int64 player_gold = 5;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->player_gold(), output);
  }

  // optional int32 player_sex = 6;
  if (has_player_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->player_sex(), output);
  }

  // optional int32 vip_level = 7;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vip_level(), output);
  }

  // optional int32 win_count = 8;
  if (has_win_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->win_count(), output);
  }

  // optional int32 bets = 9;
  if (has_bets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bets(), output);
  }

  // optional int32 play_cnt = 10;
  if (has_play_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->play_cnt(), output);
  }

  // repeated int32 other_bets = 11;
  for (int i = 0; i < this->other_bets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->other_bets(i), output);
  }

  // repeated int32 other_win = 12;
  for (int i = 0; i < this->other_win_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->other_win(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional int32 head_frame = 3;
  if (has_head_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->head_frame(), target);
  }

  // optional string head_custom = 4;
  if (has_head_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head_custom().data(), this->head_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->head_custom(), target);
  }

  // optional int64 player_gold = 5;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->player_gold(), target);
  }

  // optional int32 player_sex = 6;
  if (has_player_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->player_sex(), target);
  }

  // optional int32 vip_level = 7;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vip_level(), target);
  }

  // optional int32 win_count = 8;
  if (has_win_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->win_count(), target);
  }

  // optional int32 bets = 9;
  if (has_bets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bets(), target);
  }

  // optional int32 play_cnt = 10;
  if (has_play_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->play_cnt(), target);
  }

  // repeated int32 other_bets = 11;
  for (int i = 0; i < this->other_bets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->other_bets(i), target);
  }

  // repeated int32 other_win = 12;
  for (int i = 0; i < this->other_win_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->other_win(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional int32 head_frame = 3;
    if (has_head_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head_frame());
    }

    // optional string head_custom = 4;
    if (has_head_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head_custom());
    }

    // optional int64 player_gold = 5;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

    // optional int32 player_sex = 6;
    if (has_player_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_sex());
    }

    // optional int32 vip_level = 7;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

    // optional int32 win_count = 8;
    if (has_win_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 bets = 9;
    if (has_bets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bets());
    }

    // optional int32 play_cnt = 10;
    if (has_play_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->play_cnt());
    }

  }
  // repeated int32 other_bets = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->other_bets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->other_bets(i));
    }
    total_size += 1 * this->other_bets_size() + data_size;
  }

  // repeated int32 other_win = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->other_win_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->other_win(i));
    }
    total_size += 1 * this->other_win_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_player_info::MergeFrom(const msg_player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  other_bets_.MergeFrom(from.other_bets_);
  other_win_.MergeFrom(from.other_win_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_head_frame()) {
      set_head_frame(from.head_frame());
    }
    if (from.has_head_custom()) {
      set_head_custom(from.head_custom());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
    if (from.has_player_sex()) {
      set_player_sex(from.player_sex());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_win_count()) {
      set_win_count(from.win_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bets()) {
      set_bets(from.bets());
    }
    if (from.has_play_cnt()) {
      set_play_cnt(from.play_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_player_info::CopyFrom(const msg_player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_player_info::IsInitialized() const {

  return true;
}

void msg_player_info::Swap(msg_player_info* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_name_, other->player_name_);
    std::swap(head_frame_, other->head_frame_);
    std::swap(head_custom_, other->head_custom_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(player_sex_, other->player_sex_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(win_count_, other->win_count_);
    std::swap(bets_, other->bets_);
    std::swap(play_cnt_, other->play_cnt_);
    other_bets_.Swap(&other->other_bets_);
    other_win_.Swap(&other->other_win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_player_info_descriptor_;
  metadata.reflection = msg_player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_bet_info::kSelfBetGoldsFieldNumber;
const int msg_bet_info::kBetsFieldNumber;
#endif  // !_MSC_VER

msg_bet_info::msg_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_bet_info::InitAsDefaultInstance() {
}

msg_bet_info::msg_bet_info(const msg_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_bet_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_bet_info::~msg_bet_info() {
  SharedDtor();
}

void msg_bet_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_bet_info_descriptor_;
}

const msg_bet_info& msg_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

msg_bet_info* msg_bet_info::default_instance_ = NULL;

msg_bet_info* msg_bet_info::New() const {
  return new msg_bet_info;
}

void msg_bet_info::Clear() {
  self_bet_golds_.Clear();
  bets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 self_bet_golds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_bet_golds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_self_bet_golds())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_self_bet_golds())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_self_bet_golds;
        if (input->ExpectTag(18)) goto parse_bets;
        break;
      }

      // repeated .game_multiredblack_protocols.msg_betinfo bets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 self_bet_golds = 1;
  for (int i = 0; i < this->self_bet_golds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->self_bet_golds(i), output);
  }

  // repeated .game_multiredblack_protocols.msg_betinfo bets = 2;
  for (int i = 0; i < this->bets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 self_bet_golds = 1;
  for (int i = 0; i < this->self_bet_golds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->self_bet_golds(i), target);
  }

  // repeated .game_multiredblack_protocols.msg_betinfo bets = 2;
  for (int i = 0; i < this->bets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_bet_info::ByteSize() const {
  int total_size = 0;

  // repeated int64 self_bet_golds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->self_bet_golds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->self_bet_golds(i));
    }
    total_size += 1 * this->self_bet_golds_size() + data_size;
  }

  // repeated .game_multiredblack_protocols.msg_betinfo bets = 2;
  total_size += 1 * this->bets_size();
  for (int i = 0; i < this->bets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_bet_info::MergeFrom(const msg_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  self_bet_golds_.MergeFrom(from.self_bet_golds_);
  bets_.MergeFrom(from.bets_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_bet_info::CopyFrom(const msg_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_bet_info::IsInitialized() const {

  return true;
}

void msg_bet_info::Swap(msg_bet_info* other) {
  if (other != this) {
    self_bet_golds_.Swap(&other->self_bet_golds_);
    bets_.Swap(&other->bets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_bet_info_descriptor_;
  metadata.reflection = msg_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_result_info::kOtherWinGoldsFieldNumber;
const int msg_result_info::kSelfGoldFieldNumber;
const int msg_result_info::kSelfIsBetFieldNumber;
const int msg_result_info::kSelfPureWinGoldFieldNumber;
#endif  // !_MSC_VER

msg_result_info::msg_result_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_result_info::InitAsDefaultInstance() {
}

msg_result_info::msg_result_info(const msg_result_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_result_info::SharedCtor() {
  _cached_size_ = 0;
  self_gold_ = GOOGLE_LONGLONG(0);
  self_is_bet_ = false;
  self_pure_win_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_result_info::~msg_result_info() {
  SharedDtor();
}

void msg_result_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_result_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_result_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_result_info_descriptor_;
}

const msg_result_info& msg_result_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

msg_result_info* msg_result_info::default_instance_ = NULL;

msg_result_info* msg_result_info::New() const {
  return new msg_result_info;
}

void msg_result_info::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    self_gold_ = GOOGLE_LONGLONG(0);
    self_is_bet_ = false;
    self_pure_win_gold_ = GOOGLE_LONGLONG(0);
  }
  other_win_golds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_result_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 other_win_golds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_win_golds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_other_win_golds())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_other_win_golds())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_other_win_golds;
        if (input->ExpectTag(16)) goto parse_self_gold;
        break;
      }

      // optional int64 self_gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &self_gold_)));
          set_has_self_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_self_is_bet;
        break;
      }

      // optional bool self_is_bet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_is_bet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &self_is_bet_)));
          set_has_self_is_bet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_self_pure_win_gold;
        break;
      }

      // optional int64 self_pure_win_gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_pure_win_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &self_pure_win_gold_)));
          set_has_self_pure_win_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_result_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 other_win_golds = 1;
  for (int i = 0; i < this->other_win_golds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->other_win_golds(i), output);
  }

  // optional int64 self_gold = 2;
  if (has_self_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->self_gold(), output);
  }

  // optional bool self_is_bet = 3;
  if (has_self_is_bet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->self_is_bet(), output);
  }

  // optional int64 self_pure_win_gold = 4;
  if (has_self_pure_win_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->self_pure_win_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_result_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 other_win_golds = 1;
  for (int i = 0; i < this->other_win_golds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->other_win_golds(i), target);
  }

  // optional int64 self_gold = 2;
  if (has_self_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->self_gold(), target);
  }

  // optional bool self_is_bet = 3;
  if (has_self_is_bet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->self_is_bet(), target);
  }

  // optional int64 self_pure_win_gold = 4;
  if (has_self_pure_win_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->self_pure_win_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_result_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 self_gold = 2;
    if (has_self_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->self_gold());
    }

    // optional bool self_is_bet = 3;
    if (has_self_is_bet()) {
      total_size += 1 + 1;
    }

    // optional int64 self_pure_win_gold = 4;
    if (has_self_pure_win_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->self_pure_win_gold());
    }

  }
  // repeated int64 other_win_golds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->other_win_golds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->other_win_golds(i));
    }
    total_size += 1 * this->other_win_golds_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_result_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_result_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_result_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_result_info::MergeFrom(const msg_result_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  other_win_golds_.MergeFrom(from.other_win_golds_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_self_gold()) {
      set_self_gold(from.self_gold());
    }
    if (from.has_self_is_bet()) {
      set_self_is_bet(from.self_is_bet());
    }
    if (from.has_self_pure_win_gold()) {
      set_self_pure_win_gold(from.self_pure_win_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_result_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_result_info::CopyFrom(const msg_result_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_result_info::IsInitialized() const {

  return true;
}

void msg_result_info::Swap(msg_result_info* other) {
  if (other != this) {
    other_win_golds_.Swap(&other->other_win_golds_);
    std::swap(self_gold_, other->self_gold_);
    std::swap(self_is_bet_, other->self_is_bet_);
    std::swap(self_pure_win_gold_, other->self_pure_win_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_result_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_result_info_descriptor_;
  metadata.reflection = msg_result_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_scene_info::kRoomidFieldNumber;
const int msg_scene_info::kSceneStateFieldNumber;
const int msg_scene_info::kCountDownFieldNumber;
const int msg_scene_info::kBetInfoFieldNumber;
const int msg_scene_info::kCardsInfosFieldNumber;
const int msg_scene_info::kCardsTypeFieldNumber;
const int msg_scene_info::kWinnerFieldNumber;
const int msg_scene_info::kResultInfoFieldNumber;
const int msg_scene_info::kMainIdFieldNumber;
const int msg_scene_info::kOnlineCntFieldNumber;
#endif  // !_MSC_VER

msg_scene_info::msg_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_scene_info::InitAsDefaultInstance() {
  bet_info_ = const_cast< ::game_multiredblack_protocols::msg_bet_info*>(&::game_multiredblack_protocols::msg_bet_info::default_instance());
  result_info_ = const_cast< ::game_multiredblack_protocols::msg_result_info*>(&::game_multiredblack_protocols::msg_result_info::default_instance());
}

msg_scene_info::msg_scene_info(const msg_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_scene_info::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  scene_state_ = 0;
  count_down_ = 0;
  bet_info_ = NULL;
  winner_ = 0;
  result_info_ = NULL;
  main_id_ = 0;
  online_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_scene_info::~msg_scene_info() {
  SharedDtor();
}

void msg_scene_info::SharedDtor() {
  if (this != default_instance_) {
    delete bet_info_;
    delete result_info_;
  }
}

void msg_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_scene_info_descriptor_;
}

const msg_scene_info& msg_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

msg_scene_info* msg_scene_info::default_instance_ = NULL;

msg_scene_info* msg_scene_info::New() const {
  return new msg_scene_info;
}

void msg_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    scene_state_ = 0;
    count_down_ = 0;
    if (has_bet_info()) {
      if (bet_info_ != NULL) bet_info_->::game_multiredblack_protocols::msg_bet_info::Clear();
    }
    winner_ = 0;
    if (has_result_info()) {
      if (result_info_ != NULL) result_info_->::game_multiredblack_protocols::msg_result_info::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    main_id_ = 0;
    online_cnt_ = 0;
  }
  cards_infos_.Clear();
  cards_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_state;
        break;
      }

      // optional int32 scene_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_state_)));
          set_has_scene_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count_down;
        break;
      }

      // optional int32 count_down = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_down_)));
          set_has_count_down();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bet_info;
        break;
      }

      // optional .game_multiredblack_protocols.msg_bet_info bet_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bet_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bet_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cards_infos;
        break;
      }

      // repeated int32 cards_infos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards_infos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_cards_infos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards_infos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cards_infos;
        if (input->ExpectTag(56)) goto parse_cards_type;
        break;
      }

      // repeated int32 cards_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_cards_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cards_type;
        if (input->ExpectTag(64)) goto parse_winner;
        break;
      }

      // optional int32 winner = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_)));
          set_has_winner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_result_info;
        break;
      }

      // optional .game_multiredblack_protocols.msg_result_info result_info = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_main_id;
        break;
      }

      // optional int32 main_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_id_)));
          set_has_main_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_online_cnt;
        break;
      }

      // optional int32 online_cnt = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_cnt_)));
          set_has_online_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional int32 scene_state = 2;
  if (has_scene_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene_state(), output);
  }

  // optional int32 count_down = 3;
  if (has_count_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count_down(), output);
  }

  // optional .game_multiredblack_protocols.msg_bet_info bet_info = 5;
  if (has_bet_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bet_info(), output);
  }

  // repeated int32 cards_infos = 6;
  for (int i = 0; i < this->cards_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->cards_infos(i), output);
  }

  // repeated int32 cards_type = 7;
  for (int i = 0; i < this->cards_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->cards_type(i), output);
  }

  // optional int32 winner = 8;
  if (has_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->winner(), output);
  }

  // optional .game_multiredblack_protocols.msg_result_info result_info = 9;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->result_info(), output);
  }

  // optional int32 main_id = 10;
  if (has_main_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->main_id(), output);
  }

  // optional int32 online_cnt = 11;
  if (has_online_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->online_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional int32 scene_state = 2;
  if (has_scene_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene_state(), target);
  }

  // optional int32 count_down = 3;
  if (has_count_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count_down(), target);
  }

  // optional .game_multiredblack_protocols.msg_bet_info bet_info = 5;
  if (has_bet_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bet_info(), target);
  }

  // repeated int32 cards_infos = 6;
  for (int i = 0; i < this->cards_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->cards_infos(i), target);
  }

  // repeated int32 cards_type = 7;
  for (int i = 0; i < this->cards_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->cards_type(i), target);
  }

  // optional int32 winner = 8;
  if (has_winner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->winner(), target);
  }

  // optional .game_multiredblack_protocols.msg_result_info result_info = 9;
  if (has_result_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->result_info(), target);
  }

  // optional int32 main_id = 10;
  if (has_main_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->main_id(), target);
  }

  // optional int32 online_cnt = 11;
  if (has_online_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->online_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 scene_state = 2;
    if (has_scene_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_state());
    }

    // optional int32 count_down = 3;
    if (has_count_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_down());
    }

    // optional .game_multiredblack_protocols.msg_bet_info bet_info = 5;
    if (has_bet_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bet_info());
    }

    // optional int32 winner = 8;
    if (has_winner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner());
    }

    // optional .game_multiredblack_protocols.msg_result_info result_info = 9;
    if (has_result_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result_info());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 main_id = 10;
    if (has_main_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_id());
    }

    // optional int32 online_cnt = 11;
    if (has_online_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online_cnt());
    }

  }
  // repeated int32 cards_infos = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_infos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards_infos(i));
    }
    total_size += 1 * this->cards_infos_size() + data_size;
  }

  // repeated int32 cards_type = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards_type(i));
    }
    total_size += 1 * this->cards_type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_scene_info::MergeFrom(const msg_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_infos_.MergeFrom(from.cards_infos_);
  cards_type_.MergeFrom(from.cards_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_scene_state()) {
      set_scene_state(from.scene_state());
    }
    if (from.has_count_down()) {
      set_count_down(from.count_down());
    }
    if (from.has_bet_info()) {
      mutable_bet_info()->::game_multiredblack_protocols::msg_bet_info::MergeFrom(from.bet_info());
    }
    if (from.has_winner()) {
      set_winner(from.winner());
    }
    if (from.has_result_info()) {
      mutable_result_info()->::game_multiredblack_protocols::msg_result_info::MergeFrom(from.result_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_main_id()) {
      set_main_id(from.main_id());
    }
    if (from.has_online_cnt()) {
      set_online_cnt(from.online_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_scene_info::CopyFrom(const msg_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_scene_info::IsInitialized() const {

  return true;
}

void msg_scene_info::Swap(msg_scene_info* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(scene_state_, other->scene_state_);
    std::swap(count_down_, other->count_down_);
    std::swap(bet_info_, other->bet_info_);
    cards_infos_.Swap(&other->cards_infos_);
    cards_type_.Swap(&other->cards_type_);
    std::swap(winner_, other->winner_);
    std::swap(result_info_, other->result_info_);
    std::swap(main_id_, other->main_id_);
    std::swap(online_cnt_, other->online_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_scene_info_descriptor_;
  metadata.reflection = msg_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_scene_info_result::kPacketIdFieldNumber;
const int packetl2c_get_scene_info_result::kSceneInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_scene_info_result::packetl2c_get_scene_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_get_scene_info_result::InitAsDefaultInstance() {
  scene_info_ = const_cast< ::game_multiredblack_protocols::msg_scene_info*>(&::game_multiredblack_protocols::msg_scene_info::default_instance());
}

packetl2c_get_scene_info_result::packetl2c_get_scene_info_result(const packetl2c_get_scene_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_get_scene_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15010;
  scene_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_scene_info_result::~packetl2c_get_scene_info_result() {
  SharedDtor();
}

void packetl2c_get_scene_info_result::SharedDtor() {
  if (this != default_instance_) {
    delete scene_info_;
  }
}

void packetl2c_get_scene_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_scene_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_scene_info_result_descriptor_;
}

const packetl2c_get_scene_info_result& packetl2c_get_scene_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_get_scene_info_result* packetl2c_get_scene_info_result::default_instance_ = NULL;

packetl2c_get_scene_info_result* packetl2c_get_scene_info_result::New() const {
  return new packetl2c_get_scene_info_result;
}

void packetl2c_get_scene_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15010;
    if (has_scene_info()) {
      if (scene_info_ != NULL) scene_info_->::game_multiredblack_protocols::msg_scene_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_scene_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_multiredblack_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_multiredblack_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scene_info;
        break;
      }

      // optional .game_multiredblack_protocols.msg_scene_info scene_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_get_scene_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_multiredblack_protocols.msg_scene_info scene_info = 2;
  if (has_scene_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scene_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_get_scene_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_multiredblack_protocols.msg_scene_info scene_info = 2;
  if (has_scene_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scene_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_get_scene_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_multiredblack_protocols.msg_scene_info scene_info = 2;
    if (has_scene_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scene_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_scene_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_scene_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_scene_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_scene_info_result::MergeFrom(const packetl2c_get_scene_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_scene_info()) {
      mutable_scene_info()->::game_multiredblack_protocols::msg_scene_info::MergeFrom(from.scene_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_scene_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_scene_info_result::CopyFrom(const packetl2c_get_scene_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_scene_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_scene_info_result::Swap(packetl2c_get_scene_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(scene_info_, other->scene_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_scene_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_scene_info_result_descriptor_;
  metadata.reflection = packetl2c_get_scene_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_ask_bet_info::kPacketIdFieldNumber;
const int packetc2l_ask_bet_info::kBetIndexFieldNumber;
const int packetc2l_ask_bet_info::kBetGoldFieldNumber;
#endif  // !_MSC_VER

packetc2l_ask_bet_info::packetc2l_ask_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_ask_bet_info::InitAsDefaultInstance() {
}

packetc2l_ask_bet_info::packetc2l_ask_bet_info(const packetc2l_ask_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_ask_bet_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10011;
  bet_index_ = 0;
  bet_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_ask_bet_info::~packetc2l_ask_bet_info() {
  SharedDtor();
}

void packetc2l_ask_bet_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_ask_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_ask_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_ask_bet_info_descriptor_;
}

const packetc2l_ask_bet_info& packetc2l_ask_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_ask_bet_info* packetc2l_ask_bet_info::default_instance_ = NULL;

packetc2l_ask_bet_info* packetc2l_ask_bet_info::New() const {
  return new packetc2l_ask_bet_info;
}

void packetc2l_ask_bet_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10011;
    bet_index_ = 0;
    bet_gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_ask_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_bet_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_multiredblack_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_multiredblack_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bet_index;
        break;
      }

      // optional int32 bet_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_index_)));
          set_has_bet_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bet_gold;
        break;
      }

      // optional int64 bet_gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_gold_)));
          set_has_bet_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_ask_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_bet_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 bet_index = 2;
  if (has_bet_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bet_index(), output);
  }

  // optional int64 bet_gold = 3;
  if (has_bet_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bet_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_ask_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_bet_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 bet_index = 2;
  if (has_bet_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bet_index(), target);
  }

  // optional int64 bet_gold = 3;
  if (has_bet_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bet_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_ask_bet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_bet_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 bet_index = 2;
    if (has_bet_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_index());
    }

    // optional int64 bet_gold = 3;
    if (has_bet_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_ask_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_ask_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_ask_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_ask_bet_info::MergeFrom(const packetc2l_ask_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_bet_index()) {
      set_bet_index(from.bet_index());
    }
    if (from.has_bet_gold()) {
      set_bet_gold(from.bet_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_ask_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_ask_bet_info::CopyFrom(const packetc2l_ask_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_ask_bet_info::IsInitialized() const {

  return true;
}

void packetc2l_ask_bet_info::Swap(packetc2l_ask_bet_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(bet_index_, other->bet_index_);
    std::swap(bet_gold_, other->bet_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_ask_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_ask_bet_info_descriptor_;
  metadata.reflection = packetc2l_ask_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bet_info_result::kPacketIdFieldNumber;
const int packetl2c_bet_info_result::kResultFieldNumber;
const int packetl2c_bet_info_result::kBetIndexFieldNumber;
const int packetl2c_bet_info_result::kBetGoldFieldNumber;
#endif  // !_MSC_VER

packetl2c_bet_info_result::packetl2c_bet_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bet_info_result::InitAsDefaultInstance() {
}

packetl2c_bet_info_result::packetl2c_bet_info_result(const packetl2c_bet_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bet_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15011;
  result_ = 2;
  bet_index_ = 0;
  bet_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bet_info_result::~packetl2c_bet_info_result() {
  SharedDtor();
}

void packetl2c_bet_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bet_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bet_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bet_info_result_descriptor_;
}

const packetl2c_bet_info_result& packetl2c_bet_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bet_info_result* packetl2c_bet_info_result::default_instance_ = NULL;

packetl2c_bet_info_result* packetl2c_bet_info_result::New() const {
  return new packetl2c_bet_info_result;
}

void packetl2c_bet_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15011;
    result_ = 2;
    bet_index_ = 0;
    bet_gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bet_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_multiredblack_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_multiredblack_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bet_index;
        break;
      }

      // optional int32 bet_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_index_)));
          set_has_bet_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bet_gold;
        break;
      }

      // optional int64 bet_gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_gold_)));
          set_has_bet_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bet_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 bet_index = 3;
  if (has_bet_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bet_index(), output);
  }

  // optional int64 bet_gold = 4;
  if (has_bet_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->bet_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bet_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 bet_index = 3;
  if (has_bet_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bet_index(), target);
  }

  // optional int64 bet_gold = 4;
  if (has_bet_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->bet_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bet_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 bet_index = 3;
    if (has_bet_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_index());
    }

    // optional int64 bet_gold = 4;
    if (has_bet_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bet_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bet_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bet_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bet_info_result::MergeFrom(const packetl2c_bet_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_bet_index()) {
      set_bet_index(from.bet_index());
    }
    if (from.has_bet_gold()) {
      set_bet_gold(from.bet_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bet_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bet_info_result::CopyFrom(const packetl2c_bet_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bet_info_result::IsInitialized() const {

  return true;
}

void packetl2c_bet_info_result::Swap(packetl2c_bet_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(bet_index_, other->bet_index_);
    std::swap(bet_gold_, other->bet_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bet_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bet_info_result_descriptor_;
  metadata.reflection = packetl2c_bet_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_ask_continue_bet::kPacketIdFieldNumber;
const int packetc2l_ask_continue_bet::kBetGoldsFieldNumber;
#endif  // !_MSC_VER

packetc2l_ask_continue_bet::packetc2l_ask_continue_bet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_ask_continue_bet::InitAsDefaultInstance() {
}

packetc2l_ask_continue_bet::packetc2l_ask_continue_bet(const packetc2l_ask_continue_bet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_ask_continue_bet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10016;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_ask_continue_bet::~packetc2l_ask_continue_bet() {
  SharedDtor();
}

void packetc2l_ask_continue_bet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_ask_continue_bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_ask_continue_bet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_ask_continue_bet_descriptor_;
}

const packetc2l_ask_continue_bet& packetc2l_ask_continue_bet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_ask_continue_bet* packetc2l_ask_continue_bet::default_instance_ = NULL;

packetc2l_ask_continue_bet* packetc2l_ask_continue_bet::New() const {
  return new packetc2l_ask_continue_bet;
}

void packetc2l_ask_continue_bet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10016;
  }
  bet_golds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_ask_continue_bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_continue_bet];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_multiredblack_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_multiredblack_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bet_golds;
        break;
      }

      // repeated int64 bet_golds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_golds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_bet_golds())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_bet_golds())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bet_golds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_ask_continue_bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_continue_bet];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated int64 bet_golds = 2;
  for (int i = 0; i < this->bet_golds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->bet_golds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_ask_continue_bet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_continue_bet];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated int64 bet_golds = 2;
  for (int i = 0; i < this->bet_golds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->bet_golds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_ask_continue_bet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_continue_bet];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated int64 bet_golds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->bet_golds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->bet_golds(i));
    }
    total_size += 1 * this->bet_golds_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_ask_continue_bet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_ask_continue_bet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_ask_continue_bet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_ask_continue_bet::MergeFrom(const packetc2l_ask_continue_bet& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_golds_.MergeFrom(from.bet_golds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_ask_continue_bet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_ask_continue_bet::CopyFrom(const packetc2l_ask_continue_bet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_ask_continue_bet::IsInitialized() const {

  return true;
}

void packetc2l_ask_continue_bet::Swap(packetc2l_ask_continue_bet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    bet_golds_.Swap(&other->bet_golds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_ask_continue_bet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_ask_continue_bet_descriptor_;
  metadata.reflection = packetc2l_ask_continue_bet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_continue_bet_result::kPacketIdFieldNumber;
const int packetl2c_continue_bet_result::kResultFieldNumber;
const int packetl2c_continue_bet_result::kBetGoldsFieldNumber;
#endif  // !_MSC_VER

packetl2c_continue_bet_result::packetl2c_continue_bet_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_continue_bet_result::InitAsDefaultInstance() {
}

packetl2c_continue_bet_result::packetl2c_continue_bet_result(const packetl2c_continue_bet_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_continue_bet_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15017;
  result_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_continue_bet_result::~packetl2c_continue_bet_result() {
  SharedDtor();
}

void packetl2c_continue_bet_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_continue_bet_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_continue_bet_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_continue_bet_result_descriptor_;
}

const packetl2c_continue_bet_result& packetl2c_continue_bet_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_continue_bet_result* packetl2c_continue_bet_result::default_instance_ = NULL;

packetl2c_continue_bet_result* packetl2c_continue_bet_result::New() const {
  return new packetl2c_continue_bet_result;
}

void packetl2c_continue_bet_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15017;
    result_ = 2;
  }
  bet_golds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_continue_bet_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_continue_bet_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_multiredblack_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_multiredblack_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bet_golds;
        break;
      }

      // repeated int64 bet_golds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_golds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_bet_golds())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_bet_golds())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bet_golds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_continue_bet_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_continue_bet_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // repeated int64 bet_golds = 3;
  for (int i = 0; i < this->bet_golds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->bet_golds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_continue_bet_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_continue_bet_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // repeated int64 bet_golds = 3;
  for (int i = 0; i < this->bet_golds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->bet_golds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_continue_bet_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_continue_bet_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated int64 bet_golds = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->bet_golds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->bet_golds(i));
    }
    total_size += 1 * this->bet_golds_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_continue_bet_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_continue_bet_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_continue_bet_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_continue_bet_result::MergeFrom(const packetl2c_continue_bet_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_golds_.MergeFrom(from.bet_golds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_continue_bet_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_continue_bet_result::CopyFrom(const packetl2c_continue_bet_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_continue_bet_result::IsInitialized() const {

  return true;
}

void packetl2c_continue_bet_result::Swap(packetl2c_continue_bet_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    bet_golds_.Swap(&other->bet_golds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_continue_bet_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_continue_bet_result_descriptor_;
  metadata.reflection = packetl2c_continue_bet_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_ask_clear_bet::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_ask_clear_bet::packetc2l_ask_clear_bet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_ask_clear_bet::InitAsDefaultInstance() {
}

packetc2l_ask_clear_bet::packetc2l_ask_clear_bet(const packetc2l_ask_clear_bet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_ask_clear_bet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10017;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_ask_clear_bet::~packetc2l_ask_clear_bet() {
  SharedDtor();
}

void packetc2l_ask_clear_bet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_ask_clear_bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_ask_clear_bet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_ask_clear_bet_descriptor_;
}

const packetc2l_ask_clear_bet& packetc2l_ask_clear_bet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_ask_clear_bet* packetc2l_ask_clear_bet::default_instance_ = NULL;

packetc2l_ask_clear_bet* packetc2l_ask_clear_bet::New() const {
  return new packetc2l_ask_clear_bet;
}

void packetc2l_ask_clear_bet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10017;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_ask_clear_bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_clear_bet];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_multiredblack_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_multiredblack_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_ask_clear_bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_clear_bet];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_ask_clear_bet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_clear_bet];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_ask_clear_bet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_clear_bet];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_ask_clear_bet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_ask_clear_bet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_ask_clear_bet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_ask_clear_bet::MergeFrom(const packetc2l_ask_clear_bet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_ask_clear_bet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_ask_clear_bet::CopyFrom(const packetc2l_ask_clear_bet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_ask_clear_bet::IsInitialized() const {

  return true;
}

void packetc2l_ask_clear_bet::Swap(packetc2l_ask_clear_bet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_ask_clear_bet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_ask_clear_bet_descriptor_;
  metadata.reflection = packetc2l_ask_clear_bet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_clear_bet_result::kPacketIdFieldNumber;
const int packetl2c_clear_bet_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_clear_bet_result::packetl2c_clear_bet_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_clear_bet_result::InitAsDefaultInstance() {
}

packetl2c_clear_bet_result::packetl2c_clear_bet_result(const packetl2c_clear_bet_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_clear_bet_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15018;
  result_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_clear_bet_result::~packetl2c_clear_bet_result() {
  SharedDtor();
}

void packetl2c_clear_bet_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_clear_bet_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_clear_bet_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_clear_bet_result_descriptor_;
}

const packetl2c_clear_bet_result& packetl2c_clear_bet_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_clear_bet_result* packetl2c_clear_bet_result::default_instance_ = NULL;

packetl2c_clear_bet_result* packetl2c_clear_bet_result::New() const {
  return new packetl2c_clear_bet_result;
}

void packetl2c_clear_bet_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15018;
    result_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_clear_bet_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_clear_bet_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_multiredblack_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_multiredblack_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_clear_bet_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_clear_bet_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_clear_bet_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_clear_bet_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_clear_bet_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_clear_bet_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_clear_bet_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_clear_bet_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_clear_bet_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_clear_bet_result::MergeFrom(const packetl2c_clear_bet_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_clear_bet_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_clear_bet_result::CopyFrom(const packetl2c_clear_bet_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_clear_bet_result::IsInitialized() const {

  return true;
}

void packetl2c_clear_bet_result::Swap(packetl2c_clear_bet_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_clear_bet_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_clear_bet_result_descriptor_;
  metadata.reflection = packetl2c_clear_bet_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_ask_playerlist::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_ask_playerlist::packetc2l_ask_playerlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_ask_playerlist::InitAsDefaultInstance() {
}

packetc2l_ask_playerlist::packetc2l_ask_playerlist(const packetc2l_ask_playerlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_ask_playerlist::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10018;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_ask_playerlist::~packetc2l_ask_playerlist() {
  SharedDtor();
}

void packetc2l_ask_playerlist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_ask_playerlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_ask_playerlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_ask_playerlist_descriptor_;
}

const packetc2l_ask_playerlist& packetc2l_ask_playerlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_ask_playerlist* packetc2l_ask_playerlist::default_instance_ = NULL;

packetc2l_ask_playerlist* packetc2l_ask_playerlist::New() const {
  return new packetc2l_ask_playerlist;
}

void packetc2l_ask_playerlist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10018;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_ask_playerlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_playerlist];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_multiredblack_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_multiredblack_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_ask_playerlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_playerlist];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_ask_playerlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_playerlist];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_ask_playerlist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_playerlist];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_ask_playerlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_ask_playerlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_ask_playerlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_ask_playerlist::MergeFrom(const packetc2l_ask_playerlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_ask_playerlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_ask_playerlist::CopyFrom(const packetc2l_ask_playerlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_ask_playerlist::IsInitialized() const {

  return true;
}

void packetc2l_ask_playerlist::Swap(packetc2l_ask_playerlist* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_ask_playerlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_ask_playerlist_descriptor_;
  metadata.reflection = packetc2l_ask_playerlist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_playerlist_result::kPacketIdFieldNumber;
const int packetl2c_playerlist_result::kPlayerInfosFieldNumber;
#endif  // !_MSC_VER

packetl2c_playerlist_result::packetl2c_playerlist_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_playerlist_result::InitAsDefaultInstance() {
}

packetl2c_playerlist_result::packetl2c_playerlist_result(const packetl2c_playerlist_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_playerlist_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15019;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_playerlist_result::~packetl2c_playerlist_result() {
  SharedDtor();
}

void packetl2c_playerlist_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_playerlist_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_playerlist_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_playerlist_result_descriptor_;
}

const packetl2c_playerlist_result& packetl2c_playerlist_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_playerlist_result* packetl2c_playerlist_result::default_instance_ = NULL;

packetl2c_playerlist_result* packetl2c_playerlist_result::New() const {
  return new packetl2c_playerlist_result;
}

void packetl2c_playerlist_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15019;
  }
  player_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_playerlist_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_playerlist_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_multiredblack_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_multiredblack_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_infos;
        break;
      }

      // repeated .game_multiredblack_protocols.msg_player_info player_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_playerlist_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_playerlist_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_multiredblack_protocols.msg_player_info player_infos = 2;
  for (int i = 0; i < this->player_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_playerlist_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_playerlist_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_multiredblack_protocols.msg_player_info player_infos = 2;
  for (int i = 0; i < this->player_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_playerlist_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_playerlist_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_multiredblack_protocols.msg_player_info player_infos = 2;
  total_size += 1 * this->player_infos_size();
  for (int i = 0; i < this->player_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_playerlist_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_playerlist_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_playerlist_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_playerlist_result::MergeFrom(const packetl2c_playerlist_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_infos_.MergeFrom(from.player_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_playerlist_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_playerlist_result::CopyFrom(const packetl2c_playerlist_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_playerlist_result::IsInitialized() const {

  return true;
}

void packetl2c_playerlist_result::Swap(packetl2c_playerlist_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    player_infos_.Swap(&other->player_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_playerlist_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_playerlist_result_descriptor_;
  metadata.reflection = packetl2c_playerlist_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_ask_history_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_ask_history_info::packetc2l_ask_history_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_ask_history_info::InitAsDefaultInstance() {
}

packetc2l_ask_history_info::packetc2l_ask_history_info(const packetc2l_ask_history_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_ask_history_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10015;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_ask_history_info::~packetc2l_ask_history_info() {
  SharedDtor();
}

void packetc2l_ask_history_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_ask_history_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_ask_history_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_ask_history_info_descriptor_;
}

const packetc2l_ask_history_info& packetc2l_ask_history_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

packetc2l_ask_history_info* packetc2l_ask_history_info::default_instance_ = NULL;

packetc2l_ask_history_info* packetc2l_ask_history_info::New() const {
  return new packetc2l_ask_history_info;
}

void packetc2l_ask_history_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10015;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_ask_history_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_history_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_multiredblack_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_multiredblack_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_ask_history_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_history_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_ask_history_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_history_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_ask_history_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_history_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_ask_history_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_ask_history_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_ask_history_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_ask_history_info::MergeFrom(const packetc2l_ask_history_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_ask_history_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_ask_history_info::CopyFrom(const packetc2l_ask_history_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_ask_history_info::IsInitialized() const {

  return true;
}

void packetc2l_ask_history_info::Swap(packetc2l_ask_history_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_ask_history_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_ask_history_info_descriptor_;
  metadata.reflection = packetc2l_ask_history_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_history_info::kPacketIdFieldNumber;
const int packetl2c_history_info::kHistoryInfosFieldNumber;
#endif  // !_MSC_VER

packetl2c_history_info::packetl2c_history_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_history_info::InitAsDefaultInstance() {
}

packetl2c_history_info::packetl2c_history_info(const packetl2c_history_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_history_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15015;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_history_info::~packetl2c_history_info() {
  SharedDtor();
}

void packetl2c_history_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_history_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_history_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_history_info_descriptor_;
}

const packetl2c_history_info& packetl2c_history_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_history_info* packetl2c_history_info::default_instance_ = NULL;

packetl2c_history_info* packetl2c_history_info::New() const {
  return new packetl2c_history_info;
}

void packetl2c_history_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15015;
  }
  history_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_history_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_history_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_multiredblack_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_multiredblack_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_history_infos;
        break;
      }

      // repeated int32 history_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_infos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_history_infos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_history_infos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_history_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_history_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_history_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated int32 history_infos = 2;
  for (int i = 0; i < this->history_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->history_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_history_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_history_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated int32 history_infos = 2;
  for (int i = 0; i < this->history_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->history_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_history_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_history_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated int32 history_infos = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->history_infos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->history_infos(i));
    }
    total_size += 1 * this->history_infos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_history_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_history_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_history_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_history_info::MergeFrom(const packetl2c_history_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_infos_.MergeFrom(from.history_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_history_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_history_info::CopyFrom(const packetl2c_history_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_history_info::IsInitialized() const {

  return true;
}

void packetl2c_history_info::Swap(packetl2c_history_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    history_infos_.Swap(&other->history_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_history_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_history_info_descriptor_;
  metadata.reflection = packetl2c_history_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_scene_prepare_into::kPacketIdFieldNumber;
const int packetl2c_bc_scene_prepare_into::kCountDownFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_scene_prepare_into::packetl2c_bc_scene_prepare_into()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_scene_prepare_into::InitAsDefaultInstance() {
}

packetl2c_bc_scene_prepare_into::packetl2c_bc_scene_prepare_into(const packetl2c_bc_scene_prepare_into& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_scene_prepare_into::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15050;
  count_down_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_scene_prepare_into::~packetl2c_bc_scene_prepare_into() {
  SharedDtor();
}

void packetl2c_bc_scene_prepare_into::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_scene_prepare_into::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_scene_prepare_into::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_scene_prepare_into_descriptor_;
}

const packetl2c_bc_scene_prepare_into& packetl2c_bc_scene_prepare_into::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_scene_prepare_into* packetl2c_bc_scene_prepare_into::default_instance_ = NULL;

packetl2c_bc_scene_prepare_into* packetl2c_bc_scene_prepare_into::New() const {
  return new packetl2c_bc_scene_prepare_into;
}

void packetl2c_bc_scene_prepare_into::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15050;
    count_down_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_scene_prepare_into::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_prepare_into];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_multiredblack_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_multiredblack_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count_down;
        break;
      }

      // optional int32 count_down = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_down_)));
          set_has_count_down();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_scene_prepare_into::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_prepare_into];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 count_down = 2;
  if (has_count_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count_down(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_scene_prepare_into::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_prepare_into];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 count_down = 2;
  if (has_count_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count_down(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_scene_prepare_into::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_prepare_into];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 count_down = 2;
    if (has_count_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_down());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_scene_prepare_into::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_scene_prepare_into* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_scene_prepare_into*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_scene_prepare_into::MergeFrom(const packetl2c_bc_scene_prepare_into& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_count_down()) {
      set_count_down(from.count_down());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_scene_prepare_into::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_scene_prepare_into::CopyFrom(const packetl2c_bc_scene_prepare_into& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_scene_prepare_into::IsInitialized() const {

  return true;
}

void packetl2c_bc_scene_prepare_into::Swap(packetl2c_bc_scene_prepare_into* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(count_down_, other->count_down_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_scene_prepare_into::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_scene_prepare_into_descriptor_;
  metadata.reflection = packetl2c_bc_scene_prepare_into_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_scene_bet_into::kPacketIdFieldNumber;
const int packetl2c_bc_scene_bet_into::kCountDownFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_scene_bet_into::packetl2c_bc_scene_bet_into()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_scene_bet_into::InitAsDefaultInstance() {
}

packetl2c_bc_scene_bet_into::packetl2c_bc_scene_bet_into(const packetl2c_bc_scene_bet_into& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_scene_bet_into::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15051;
  count_down_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_scene_bet_into::~packetl2c_bc_scene_bet_into() {
  SharedDtor();
}

void packetl2c_bc_scene_bet_into::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_scene_bet_into::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_scene_bet_into::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_scene_bet_into_descriptor_;
}

const packetl2c_bc_scene_bet_into& packetl2c_bc_scene_bet_into::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_scene_bet_into* packetl2c_bc_scene_bet_into::default_instance_ = NULL;

packetl2c_bc_scene_bet_into* packetl2c_bc_scene_bet_into::New() const {
  return new packetl2c_bc_scene_bet_into;
}

void packetl2c_bc_scene_bet_into::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15051;
    count_down_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_scene_bet_into::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_bet_into];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_multiredblack_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_multiredblack_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count_down;
        break;
      }

      // optional int32 count_down = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_down_)));
          set_has_count_down();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_scene_bet_into::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_bet_into];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 count_down = 2;
  if (has_count_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count_down(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_scene_bet_into::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_bet_into];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 count_down = 2;
  if (has_count_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count_down(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_scene_bet_into::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_bet_into];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 count_down = 2;
    if (has_count_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_down());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_scene_bet_into::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_scene_bet_into* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_scene_bet_into*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_scene_bet_into::MergeFrom(const packetl2c_bc_scene_bet_into& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_count_down()) {
      set_count_down(from.count_down());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_scene_bet_into::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_scene_bet_into::CopyFrom(const packetl2c_bc_scene_bet_into& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_scene_bet_into::IsInitialized() const {

  return true;
}

void packetl2c_bc_scene_bet_into::Swap(packetl2c_bc_scene_bet_into* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(count_down_, other->count_down_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_scene_bet_into::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_scene_bet_into_descriptor_;
  metadata.reflection = packetl2c_bc_scene_bet_into_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_master_bets::kPlayerIdFieldNumber;
const int msg_master_bets::kPlayerBetsFieldNumber;
#endif  // !_MSC_VER

msg_master_bets::msg_master_bets()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_master_bets::InitAsDefaultInstance() {
}

msg_master_bets::msg_master_bets(const msg_master_bets& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_master_bets::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  player_bets_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_master_bets::~msg_master_bets() {
  SharedDtor();
}

void msg_master_bets::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_master_bets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_master_bets::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_master_bets_descriptor_;
}

const msg_master_bets& msg_master_bets::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

msg_master_bets* msg_master_bets::default_instance_ = NULL;

msg_master_bets* msg_master_bets::New() const {
  return new msg_master_bets;
}

void msg_master_bets::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    player_bets_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_master_bets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_bets;
        break;
      }

      // optional int64 player_bets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_bets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_bets_)));
          set_has_player_bets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_master_bets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional int64 player_bets = 2;
  if (has_player_bets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->player_bets(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_master_bets::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional int64 player_bets = 2;
  if (has_player_bets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->player_bets(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_master_bets::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int64 player_bets = 2;
    if (has_player_bets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_bets());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_master_bets::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_master_bets* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_master_bets*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_master_bets::MergeFrom(const msg_master_bets& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_bets()) {
      set_player_bets(from.player_bets());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_master_bets::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_master_bets::CopyFrom(const msg_master_bets& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_master_bets::IsInitialized() const {

  return true;
}

void msg_master_bets::Swap(msg_master_bets* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_bets_, other->player_bets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_master_bets::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_master_bets_descriptor_;
  metadata.reflection = msg_master_bets_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_betinfo::kBetGoldsFieldNumber;
const int msg_betinfo::kMasterBetsFieldNumber;
#endif  // !_MSC_VER

msg_betinfo::msg_betinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_betinfo::InitAsDefaultInstance() {
}

msg_betinfo::msg_betinfo(const msg_betinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_betinfo::SharedCtor() {
  _cached_size_ = 0;
  bet_golds_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_betinfo::~msg_betinfo() {
  SharedDtor();
}

void msg_betinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_betinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_betinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_betinfo_descriptor_;
}

const msg_betinfo& msg_betinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

msg_betinfo* msg_betinfo::default_instance_ = NULL;

msg_betinfo* msg_betinfo::New() const {
  return new msg_betinfo;
}

void msg_betinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bet_golds_ = GOOGLE_LONGLONG(0);
  }
  master_bets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_betinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 bet_golds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_golds_)));
          set_has_bet_golds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_master_bets;
        break;
      }

      // repeated .game_multiredblack_protocols.msg_master_bets master_bets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master_bets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_master_bets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_master_bets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_betinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 bet_golds = 1;
  if (has_bet_golds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->bet_golds(), output);
  }

  // repeated .game_multiredblack_protocols.msg_master_bets master_bets = 2;
  for (int i = 0; i < this->master_bets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->master_bets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_betinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 bet_golds = 1;
  if (has_bet_golds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->bet_golds(), target);
  }

  // repeated .game_multiredblack_protocols.msg_master_bets master_bets = 2;
  for (int i = 0; i < this->master_bets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->master_bets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_betinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 bet_golds = 1;
    if (has_bet_golds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_golds());
    }

  }
  // repeated .game_multiredblack_protocols.msg_master_bets master_bets = 2;
  total_size += 1 * this->master_bets_size();
  for (int i = 0; i < this->master_bets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->master_bets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_betinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_betinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_betinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_betinfo::MergeFrom(const msg_betinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  master_bets_.MergeFrom(from.master_bets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bet_golds()) {
      set_bet_golds(from.bet_golds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_betinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_betinfo::CopyFrom(const msg_betinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_betinfo::IsInitialized() const {

  return true;
}

void msg_betinfo::Swap(msg_betinfo* other) {
  if (other != this) {
    std::swap(bet_golds_, other->bet_golds_);
    master_bets_.Swap(&other->master_bets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_betinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_betinfo_descriptor_;
  metadata.reflection = msg_betinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_sync_scene_bet_into::kPacketIdFieldNumber;
const int packetl2c_bc_sync_scene_bet_into::kBetsFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_sync_scene_bet_into::packetl2c_bc_sync_scene_bet_into()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_sync_scene_bet_into::InitAsDefaultInstance() {
}

packetl2c_bc_sync_scene_bet_into::packetl2c_bc_sync_scene_bet_into(const packetl2c_bc_sync_scene_bet_into& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_sync_scene_bet_into::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15052;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_sync_scene_bet_into::~packetl2c_bc_sync_scene_bet_into() {
  SharedDtor();
}

void packetl2c_bc_sync_scene_bet_into::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_sync_scene_bet_into::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_sync_scene_bet_into::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_sync_scene_bet_into_descriptor_;
}

const packetl2c_bc_sync_scene_bet_into& packetl2c_bc_sync_scene_bet_into::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_sync_scene_bet_into* packetl2c_bc_sync_scene_bet_into::default_instance_ = NULL;

packetl2c_bc_sync_scene_bet_into* packetl2c_bc_sync_scene_bet_into::New() const {
  return new packetl2c_bc_sync_scene_bet_into;
}

void packetl2c_bc_sync_scene_bet_into::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15052;
  }
  bets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_sync_scene_bet_into::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_scene_bet_into];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_multiredblack_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_multiredblack_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bets;
        break;
      }

      // repeated .game_multiredblack_protocols.msg_betinfo bets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_sync_scene_bet_into::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_scene_bet_into];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_multiredblack_protocols.msg_betinfo bets = 2;
  for (int i = 0; i < this->bets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_sync_scene_bet_into::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_scene_bet_into];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_multiredblack_protocols.msg_betinfo bets = 2;
  for (int i = 0; i < this->bets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_sync_scene_bet_into::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_scene_bet_into];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_multiredblack_protocols.msg_betinfo bets = 2;
  total_size += 1 * this->bets_size();
  for (int i = 0; i < this->bets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_sync_scene_bet_into::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_sync_scene_bet_into* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_sync_scene_bet_into*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_sync_scene_bet_into::MergeFrom(const packetl2c_bc_sync_scene_bet_into& from) {
  GOOGLE_CHECK_NE(&from, this);
  bets_.MergeFrom(from.bets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_sync_scene_bet_into::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_sync_scene_bet_into::CopyFrom(const packetl2c_bc_sync_scene_bet_into& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_sync_scene_bet_into::IsInitialized() const {

  return true;
}

void packetl2c_bc_sync_scene_bet_into::Swap(packetl2c_bc_sync_scene_bet_into* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    bets_.Swap(&other->bets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_sync_scene_bet_into::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_sync_scene_bet_into_descriptor_;
  metadata.reflection = packetl2c_bc_sync_scene_bet_into_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_scene_deal_into::kPacketIdFieldNumber;
const int packetl2c_bc_scene_deal_into::kCountDownFieldNumber;
const int packetl2c_bc_scene_deal_into::kCardsInfosFieldNumber;
const int packetl2c_bc_scene_deal_into::kCardsTypeFieldNumber;
const int packetl2c_bc_scene_deal_into::kWinnerFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_scene_deal_into::packetl2c_bc_scene_deal_into()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_scene_deal_into::InitAsDefaultInstance() {
}

packetl2c_bc_scene_deal_into::packetl2c_bc_scene_deal_into(const packetl2c_bc_scene_deal_into& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_scene_deal_into::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15053;
  count_down_ = 0;
  winner_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_scene_deal_into::~packetl2c_bc_scene_deal_into() {
  SharedDtor();
}

void packetl2c_bc_scene_deal_into::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_scene_deal_into::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_scene_deal_into::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_scene_deal_into_descriptor_;
}

const packetl2c_bc_scene_deal_into& packetl2c_bc_scene_deal_into::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_scene_deal_into* packetl2c_bc_scene_deal_into::default_instance_ = NULL;

packetl2c_bc_scene_deal_into* packetl2c_bc_scene_deal_into::New() const {
  return new packetl2c_bc_scene_deal_into;
}

void packetl2c_bc_scene_deal_into::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15053;
    count_down_ = 0;
    winner_ = 0;
  }
  cards_infos_.Clear();
  cards_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_scene_deal_into::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_deal_into];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_multiredblack_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_multiredblack_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count_down;
        break;
      }

      // optional int32 count_down = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_down_)));
          set_has_count_down();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cards_infos;
        break;
      }

      // repeated int32 cards_infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards_infos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_cards_infos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards_infos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cards_infos;
        if (input->ExpectTag(32)) goto parse_cards_type;
        break;
      }

      // repeated int32 cards_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_cards_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cards_type;
        if (input->ExpectTag(40)) goto parse_winner;
        break;
      }

      // optional int32 winner = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_)));
          set_has_winner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_scene_deal_into::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_deal_into];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 count_down = 2;
  if (has_count_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count_down(), output);
  }

  // repeated int32 cards_infos = 3;
  for (int i = 0; i < this->cards_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cards_infos(i), output);
  }

  // repeated int32 cards_type = 4;
  for (int i = 0; i < this->cards_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->cards_type(i), output);
  }

  // optional int32 winner = 5;
  if (has_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->winner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_scene_deal_into::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_deal_into];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 count_down = 2;
  if (has_count_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count_down(), target);
  }

  // repeated int32 cards_infos = 3;
  for (int i = 0; i < this->cards_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->cards_infos(i), target);
  }

  // repeated int32 cards_type = 4;
  for (int i = 0; i < this->cards_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->cards_type(i), target);
  }

  // optional int32 winner = 5;
  if (has_winner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->winner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_scene_deal_into::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_deal_into];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 count_down = 2;
    if (has_count_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_down());
    }

    // optional int32 winner = 5;
    if (has_winner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner());
    }

  }
  // repeated int32 cards_infos = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_infos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards_infos(i));
    }
    total_size += 1 * this->cards_infos_size() + data_size;
  }

  // repeated int32 cards_type = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards_type(i));
    }
    total_size += 1 * this->cards_type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_scene_deal_into::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_scene_deal_into* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_scene_deal_into*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_scene_deal_into::MergeFrom(const packetl2c_bc_scene_deal_into& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_infos_.MergeFrom(from.cards_infos_);
  cards_type_.MergeFrom(from.cards_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_count_down()) {
      set_count_down(from.count_down());
    }
    if (from.has_winner()) {
      set_winner(from.winner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_scene_deal_into::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_scene_deal_into::CopyFrom(const packetl2c_bc_scene_deal_into& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_scene_deal_into::IsInitialized() const {

  return true;
}

void packetl2c_bc_scene_deal_into::Swap(packetl2c_bc_scene_deal_into* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(count_down_, other->count_down_);
    cards_infos_.Swap(&other->cards_infos_);
    cards_type_.Swap(&other->cards_type_);
    std::swap(winner_, other->winner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_scene_deal_into::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_scene_deal_into_descriptor_;
  metadata.reflection = packetl2c_bc_scene_deal_into_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_player_award::kPlayerIdFieldNumber;
const int msg_player_award::kNameFieldNumber;
const int msg_player_award::kGoldFieldNumber;
const int msg_player_award::kPureGoldFieldNumber;
#endif  // !_MSC_VER

msg_player_award::msg_player_award()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_player_award::InitAsDefaultInstance() {
}

msg_player_award::msg_player_award(const msg_player_award& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_player_award::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gold_ = GOOGLE_LONGLONG(0);
  pure_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_player_award::~msg_player_award() {
  SharedDtor();
}

void msg_player_award::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void msg_player_award::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_player_award::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_player_award_descriptor_;
}

const msg_player_award& msg_player_award::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

msg_player_award* msg_player_award::default_instance_ = NULL;

msg_player_award* msg_player_award::New() const {
  return new msg_player_award;
}

void msg_player_award::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    gold_ = GOOGLE_LONGLONG(0);
    pure_gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_player_award::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // optional int64 gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pure_gold;
        break;
      }

      // optional int64 pure_gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pure_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pure_gold_)));
          set_has_pure_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_player_award::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int64 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->gold(), output);
  }

  // optional int64 pure_gold = 4;
  if (has_pure_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->pure_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_player_award::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int64 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->gold(), target);
  }

  // optional int64 pure_gold = 4;
  if (has_pure_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->pure_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_player_award::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int64 pure_gold = 4;
    if (has_pure_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pure_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_player_award::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_player_award* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_player_award*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_player_award::MergeFrom(const msg_player_award& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_pure_gold()) {
      set_pure_gold(from.pure_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_player_award::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_player_award::CopyFrom(const msg_player_award& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_player_award::IsInitialized() const {

  return true;
}

void msg_player_award::Swap(msg_player_award* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(name_, other->name_);
    std::swap(gold_, other->gold_);
    std::swap(pure_gold_, other->pure_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_player_award::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_player_award_descriptor_;
  metadata.reflection = msg_player_award_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_scene_result_into::kPacketIdFieldNumber;
const int packetl2c_bc_scene_result_into::kCountDownFieldNumber;
const int packetl2c_bc_scene_result_into::kResultInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_scene_result_into::packetl2c_bc_scene_result_into()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_scene_result_into::InitAsDefaultInstance() {
  result_info_ = const_cast< ::game_multiredblack_protocols::msg_result_info*>(&::game_multiredblack_protocols::msg_result_info::default_instance());
}

packetl2c_bc_scene_result_into::packetl2c_bc_scene_result_into(const packetl2c_bc_scene_result_into& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_scene_result_into::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15054;
  count_down_ = 0;
  result_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_scene_result_into::~packetl2c_bc_scene_result_into() {
  SharedDtor();
}

void packetl2c_bc_scene_result_into::SharedDtor() {
  if (this != default_instance_) {
    delete result_info_;
  }
}

void packetl2c_bc_scene_result_into::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_scene_result_into::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_scene_result_into_descriptor_;
}

const packetl2c_bc_scene_result_into& packetl2c_bc_scene_result_into::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_bc_scene_result_into* packetl2c_bc_scene_result_into::default_instance_ = NULL;

packetl2c_bc_scene_result_into* packetl2c_bc_scene_result_into::New() const {
  return new packetl2c_bc_scene_result_into;
}

void packetl2c_bc_scene_result_into::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15054;
    count_down_ = 0;
    if (has_result_info()) {
      if (result_info_ != NULL) result_info_->::game_multiredblack_protocols::msg_result_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_scene_result_into::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_result_into];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_multiredblack_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_multiredblack_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count_down;
        break;
      }

      // optional int32 count_down = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_down_)));
          set_has_count_down();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result_info;
        break;
      }

      // optional .game_multiredblack_protocols.msg_result_info result_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_scene_result_into::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_result_into];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 count_down = 2;
  if (has_count_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count_down(), output);
  }

  // optional .game_multiredblack_protocols.msg_result_info result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_scene_result_into::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_result_into];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 count_down = 2;
  if (has_count_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count_down(), target);
  }

  // optional .game_multiredblack_protocols.msg_result_info result_info = 3;
  if (has_result_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_scene_result_into::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_result_into];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 count_down = 2;
    if (has_count_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_down());
    }

    // optional .game_multiredblack_protocols.msg_result_info result_info = 3;
    if (has_result_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_scene_result_into::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_scene_result_into* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_scene_result_into*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_scene_result_into::MergeFrom(const packetl2c_bc_scene_result_into& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_count_down()) {
      set_count_down(from.count_down());
    }
    if (from.has_result_info()) {
      mutable_result_info()->::game_multiredblack_protocols::msg_result_info::MergeFrom(from.result_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_scene_result_into::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_scene_result_into::CopyFrom(const packetl2c_bc_scene_result_into& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_scene_result_into::IsInitialized() const {

  return true;
}

void packetl2c_bc_scene_result_into::Swap(packetl2c_bc_scene_result_into* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(count_down_, other->count_down_);
    std::swap(result_info_, other->result_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_scene_result_into::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_scene_result_into_descriptor_;
  metadata.reflection = packetl2c_bc_scene_result_into_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_debug::kPacketIdFieldNumber;
const int packetl2c_debug::kKillCntFieldNumber;
const int packetl2c_debug::kKillTypeFieldNumber;
const int packetl2c_debug::kCustomCardsFieldNumber;
#endif  // !_MSC_VER

packetl2c_debug::packetl2c_debug()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_debug::InitAsDefaultInstance() {
}

packetl2c_debug::packetl2c_debug(const packetl2c_debug& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_debug::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10100;
  kill_cnt_ = 0;
  kill_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_debug::~packetl2c_debug() {
  SharedDtor();
}

void packetl2c_debug::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_debug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_debug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_debug_descriptor_;
}

const packetl2c_debug& packetl2c_debug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_debug* packetl2c_debug::default_instance_ = NULL;

packetl2c_debug* packetl2c_debug::New() const {
  return new packetl2c_debug;
}

void packetl2c_debug::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10100;
    kill_cnt_ = 0;
    kill_type_ = 0;
  }
  custom_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_debug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_debug];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_multiredblack_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_multiredblack_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kill_cnt;
        break;
      }

      // optional int32 kill_cnt = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_cnt_)));
          set_has_kill_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kill_type;
        break;
      }

      // optional int32 kill_type = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_type_)));
          set_has_kill_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_custom_cards;
        break;
      }

      // repeated int32 custom_cards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_custom_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_custom_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_custom_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_debug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_debug];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 kill_cnt = 2 [default = 0];
  if (has_kill_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kill_cnt(), output);
  }

  // optional int32 kill_type = 3 [default = 0];
  if (has_kill_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kill_type(), output);
  }

  // repeated int32 custom_cards = 4;
  for (int i = 0; i < this->custom_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->custom_cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_debug::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_debug];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 kill_cnt = 2 [default = 0];
  if (has_kill_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kill_cnt(), target);
  }

  // optional int32 kill_type = 3 [default = 0];
  if (has_kill_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kill_type(), target);
  }

  // repeated int32 custom_cards = 4;
  for (int i = 0; i < this->custom_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->custom_cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_debug::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_debug];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 kill_cnt = 2 [default = 0];
    if (has_kill_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_cnt());
    }

    // optional int32 kill_type = 3 [default = 0];
    if (has_kill_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_type());
    }

  }
  // repeated int32 custom_cards = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->custom_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->custom_cards(i));
    }
    total_size += 1 * this->custom_cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_debug::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_debug* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_debug*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_debug::MergeFrom(const packetl2c_debug& from) {
  GOOGLE_CHECK_NE(&from, this);
  custom_cards_.MergeFrom(from.custom_cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_kill_cnt()) {
      set_kill_cnt(from.kill_cnt());
    }
    if (from.has_kill_type()) {
      set_kill_type(from.kill_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_debug::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_debug::CopyFrom(const packetl2c_debug& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_debug::IsInitialized() const {

  return true;
}

void packetl2c_debug::Swap(packetl2c_debug* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(kill_cnt_, other->kill_cnt_);
    std::swap(kill_type_, other->kill_type_);
    custom_cards_.Swap(&other->custom_cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_debug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_debug_descriptor_;
  metadata.reflection = packetl2c_debug_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_debug_result::kPacketIdFieldNumber;
const int packetl2c_debug_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_debug_result::packetl2c_debug_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_debug_result::InitAsDefaultInstance() {
}

packetl2c_debug_result::packetl2c_debug_result(const packetl2c_debug_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_debug_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15102;
  result_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_debug_result::~packetl2c_debug_result() {
  SharedDtor();
}

void packetl2c_debug_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_debug_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_debug_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_debug_result_descriptor_;
}

const packetl2c_debug_result& packetl2c_debug_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_debug_result* packetl2c_debug_result::default_instance_ = NULL;

packetl2c_debug_result* packetl2c_debug_result::New() const {
  return new packetl2c_debug_result;
}

void packetl2c_debug_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15102;
    result_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_debug_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_debug_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_multiredblack_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_multiredblack_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_debug_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_debug_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_debug_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_debug_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_debug_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_debug_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_debug_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_debug_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_debug_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_debug_result::MergeFrom(const packetl2c_debug_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_debug_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_debug_result::CopyFrom(const packetl2c_debug_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_debug_result::IsInitialized() const {

  return true;
}

void packetl2c_debug_result::Swap(packetl2c_debug_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_debug_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_debug_result_descriptor_;
  metadata.reflection = packetl2c_debug_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_player_betinfo::kPlayerIdFieldNumber;
const int msg_player_betinfo::kPlayerNameFieldNumber;
const int msg_player_betinfo::kBetGoldFieldNumber;
const int msg_player_betinfo::kPlayerGoldFieldNumber;
#endif  // !_MSC_VER

msg_player_betinfo::msg_player_betinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_player_betinfo::InitAsDefaultInstance() {
}

msg_player_betinfo::msg_player_betinfo(const msg_player_betinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_player_betinfo::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_player_betinfo::~msg_player_betinfo() {
  SharedDtor();
}

void msg_player_betinfo::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void msg_player_betinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_player_betinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_player_betinfo_descriptor_;
}

const msg_player_betinfo& msg_player_betinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

msg_player_betinfo* msg_player_betinfo::default_instance_ = NULL;

msg_player_betinfo* msg_player_betinfo::New() const {
  return new msg_player_betinfo;
}

void msg_player_betinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    player_gold_ = GOOGLE_LONGLONG(0);
  }
  bet_gold_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_player_betinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bet_gold;
        break;
      }

      // repeated int32 bet_gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_bet_gold())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bet_gold())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bet_gold;
        if (input->ExpectTag(32)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_player_betinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  // repeated int32 bet_gold = 3;
  for (int i = 0; i < this->bet_gold_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->bet_gold(i), output);
  }

  // optional int64 player_gold = 4;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->player_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_player_betinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // repeated int32 bet_gold = 3;
  for (int i = 0; i < this->bet_gold_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->bet_gold(i), target);
  }

  // optional int64 player_gold = 4;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->player_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_player_betinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional int64 player_gold = 4;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

  }
  // repeated int32 bet_gold = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->bet_gold_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bet_gold(i));
    }
    total_size += 1 * this->bet_gold_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_player_betinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_player_betinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_player_betinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_player_betinfo::MergeFrom(const msg_player_betinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_gold_.MergeFrom(from.bet_gold_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_player_betinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_player_betinfo::CopyFrom(const msg_player_betinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_player_betinfo::IsInitialized() const {

  return true;
}

void msg_player_betinfo::Swap(msg_player_betinfo* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_name_, other->player_name_);
    bet_gold_.Swap(&other->bet_gold_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_player_betinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_player_betinfo_descriptor_;
  metadata.reflection = msg_player_betinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notify_sceneinfo::kPacketIdFieldNumber;
const int packetl2c_notify_sceneinfo::kMainIdFieldNumber;
const int packetl2c_notify_sceneinfo::kBankerTypeFieldNumber;
const int packetl2c_notify_sceneinfo::kBankerNameFieldNumber;
const int packetl2c_notify_sceneinfo::kPlayerBetinfosFieldNumber;
const int packetl2c_notify_sceneinfo::kEarnGoldFieldNumber;
const int packetl2c_notify_sceneinfo::kStockGoldFieldNumber;
const int packetl2c_notify_sceneinfo::kBankerGoldFieldNumber;
#endif  // !_MSC_VER

packetl2c_notify_sceneinfo::packetl2c_notify_sceneinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_notify_sceneinfo::InitAsDefaultInstance() {
}

packetl2c_notify_sceneinfo::packetl2c_notify_sceneinfo(const packetl2c_notify_sceneinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_notify_sceneinfo::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15101;
  main_id_ = 0;
  banker_type_ = 0;
  banker_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  earn_gold_ = GOOGLE_LONGLONG(0);
  stock_gold_ = GOOGLE_LONGLONG(0);
  banker_gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notify_sceneinfo::~packetl2c_notify_sceneinfo() {
  SharedDtor();
}

void packetl2c_notify_sceneinfo::SharedDtor() {
  if (banker_name_ != &::google::protobuf::internal::kEmptyString) {
    delete banker_name_;
  }
  if (this != default_instance_) {
  }
}

void packetl2c_notify_sceneinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notify_sceneinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notify_sceneinfo_descriptor_;
}

const packetl2c_notify_sceneinfo& packetl2c_notify_sceneinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_notify_sceneinfo* packetl2c_notify_sceneinfo::default_instance_ = NULL;

packetl2c_notify_sceneinfo* packetl2c_notify_sceneinfo::New() const {
  return new packetl2c_notify_sceneinfo;
}

void packetl2c_notify_sceneinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15101;
    main_id_ = 0;
    banker_type_ = 0;
    if (has_banker_name()) {
      if (banker_name_ != &::google::protobuf::internal::kEmptyString) {
        banker_name_->clear();
      }
    }
    earn_gold_ = GOOGLE_LONGLONG(0);
    stock_gold_ = GOOGLE_LONGLONG(0);
    banker_gold_ = 0;
  }
  player_betinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notify_sceneinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notify_sceneinfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_multiredblack_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_multiredblack_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_main_id;
        break;
      }

      // optional int32 main_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_id_)));
          set_has_main_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_banker_type;
        break;
      }

      // optional int32 banker_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_type_)));
          set_has_banker_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_banker_name;
        break;
      }

      // optional string banker_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_banker_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_banker_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->banker_name().data(), this->banker_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_player_betinfos;
        break;
      }

      // repeated .game_multiredblack_protocols.msg_player_betinfo player_betinfos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_betinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_betinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_player_betinfos;
        if (input->ExpectTag(48)) goto parse_earn_gold;
        break;
      }

      // optional int64 earn_gold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_earn_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &earn_gold_)));
          set_has_earn_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_stock_gold;
        break;
      }

      // optional int64 stock_gold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stock_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stock_gold_)));
          set_has_stock_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_banker_gold;
        break;
      }

      // optional int32 banker_gold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_gold_)));
          set_has_banker_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_notify_sceneinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notify_sceneinfo];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 main_id = 2;
  if (has_main_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->main_id(), output);
  }

  // optional int32 banker_type = 3;
  if (has_banker_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->banker_type(), output);
  }

  // optional string banker_name = 4;
  if (has_banker_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->banker_name().data(), this->banker_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->banker_name(), output);
  }

  // repeated .game_multiredblack_protocols.msg_player_betinfo player_betinfos = 5;
  for (int i = 0; i < this->player_betinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->player_betinfos(i), output);
  }

  // optional int64 earn_gold = 6;
  if (has_earn_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->earn_gold(), output);
  }

  // optional int64 stock_gold = 7;
  if (has_stock_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->stock_gold(), output);
  }

  // optional int32 banker_gold = 8;
  if (has_banker_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->banker_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_notify_sceneinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notify_sceneinfo];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 main_id = 2;
  if (has_main_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->main_id(), target);
  }

  // optional int32 banker_type = 3;
  if (has_banker_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->banker_type(), target);
  }

  // optional string banker_name = 4;
  if (has_banker_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->banker_name().data(), this->banker_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->banker_name(), target);
  }

  // repeated .game_multiredblack_protocols.msg_player_betinfo player_betinfos = 5;
  for (int i = 0; i < this->player_betinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->player_betinfos(i), target);
  }

  // optional int64 earn_gold = 6;
  if (has_earn_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->earn_gold(), target);
  }

  // optional int64 stock_gold = 7;
  if (has_stock_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->stock_gold(), target);
  }

  // optional int32 banker_gold = 8;
  if (has_banker_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->banker_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_notify_sceneinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notify_sceneinfo];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 main_id = 2;
    if (has_main_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_id());
    }

    // optional int32 banker_type = 3;
    if (has_banker_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_type());
    }

    // optional string banker_name = 4;
    if (has_banker_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->banker_name());
    }

    // optional int64 earn_gold = 6;
    if (has_earn_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->earn_gold());
    }

    // optional int64 stock_gold = 7;
    if (has_stock_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stock_gold());
    }

    // optional int32 banker_gold = 8;
    if (has_banker_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_gold());
    }

  }
  // repeated .game_multiredblack_protocols.msg_player_betinfo player_betinfos = 5;
  total_size += 1 * this->player_betinfos_size();
  for (int i = 0; i < this->player_betinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_betinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notify_sceneinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notify_sceneinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notify_sceneinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notify_sceneinfo::MergeFrom(const packetl2c_notify_sceneinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_betinfos_.MergeFrom(from.player_betinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_main_id()) {
      set_main_id(from.main_id());
    }
    if (from.has_banker_type()) {
      set_banker_type(from.banker_type());
    }
    if (from.has_banker_name()) {
      set_banker_name(from.banker_name());
    }
    if (from.has_earn_gold()) {
      set_earn_gold(from.earn_gold());
    }
    if (from.has_stock_gold()) {
      set_stock_gold(from.stock_gold());
    }
    if (from.has_banker_gold()) {
      set_banker_gold(from.banker_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notify_sceneinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notify_sceneinfo::CopyFrom(const packetl2c_notify_sceneinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notify_sceneinfo::IsInitialized() const {

  return true;
}

void packetl2c_notify_sceneinfo::Swap(packetl2c_notify_sceneinfo* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(main_id_, other->main_id_);
    std::swap(banker_type_, other->banker_type_);
    std::swap(banker_name_, other->banker_name_);
    player_betinfos_.Swap(&other->player_betinfos_);
    std::swap(earn_gold_, other->earn_gold_);
    std::swap(stock_gold_, other->stock_gold_);
    std::swap(banker_gold_, other->banker_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notify_sceneinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notify_sceneinfo_descriptor_;
  metadata.reflection = packetl2c_notify_sceneinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_online_cnt::kPacketIdFieldNumber;
const int packetl2c_online_cnt::kCntFieldNumber;
#endif  // !_MSC_VER

packetl2c_online_cnt::packetl2c_online_cnt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_online_cnt::InitAsDefaultInstance() {
}

packetl2c_online_cnt::packetl2c_online_cnt(const packetl2c_online_cnt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_online_cnt::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15104;
  cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_online_cnt::~packetl2c_online_cnt() {
  SharedDtor();
}

void packetl2c_online_cnt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_online_cnt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_online_cnt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_online_cnt_descriptor_;
}

const packetl2c_online_cnt& packetl2c_online_cnt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fmultiredblack_5flogic_2eproto();
  return *default_instance_;
}

packetl2c_online_cnt* packetl2c_online_cnt::default_instance_ = NULL;

packetl2c_online_cnt* packetl2c_online_cnt::New() const {
  return new packetl2c_online_cnt;
}

void packetl2c_online_cnt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15104;
    cnt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_online_cnt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_online_cnt];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_multiredblack_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_multiredblack_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cnt;
        break;
      }

      // optional int32 cnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cnt_)));
          set_has_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_online_cnt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_online_cnt];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 cnt = 2;
  if (has_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_online_cnt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_online_cnt];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 cnt = 2;
  if (has_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_online_cnt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_multiredblack_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_online_cnt];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 cnt = 2;
    if (has_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_online_cnt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_online_cnt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_online_cnt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_online_cnt::MergeFrom(const packetl2c_online_cnt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_cnt()) {
      set_cnt(from.cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_online_cnt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_online_cnt::CopyFrom(const packetl2c_online_cnt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_online_cnt::IsInitialized() const {

  return true;
}

void packetl2c_online_cnt::Swap(packetl2c_online_cnt* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(cnt_, other->cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_online_cnt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_online_cnt_descriptor_;
  metadata.reflection = packetl2c_online_cnt_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_multiredblack_protocols

// @@protoc_insertion_point(global_scope)
