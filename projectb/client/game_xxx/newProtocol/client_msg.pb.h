// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_msg.proto

#ifndef PROTOBUF_client_5fmsg_2eproto__INCLUDED
#define PROTOBUF_client_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace client_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_5fmsg_2eproto();
void protobuf_AssignDesc_client_5fmsg_2eproto();
void protobuf_ShutdownFile_client_5fmsg_2eproto();

class msg_c2s_heartbeat;
class msg_s2c_heartbeat;
class msg_list;
class msg_s2c_send_msglist;
class msg_s2c_net_param;
class msg_c2s_net_param;
class msg_s2c_shutdown;
class msg_t2t_start;
class msg_c2s_connect;
class msg_s2c_connect_result;

enum client_msg_type {
  c2s_heartbeat = 301,
  c2s_net_param = 302,
  s2c_send_msglist = 401,
  s2c_net_param = 402,
  s2c_shutdown = 403,
  s2c_heartbeat = 404,
  t2t_start = 444,
  c2s_connect = 5001,
  s2c_connect_result = 7501
};
bool client_msg_type_IsValid(int value);
const client_msg_type client_msg_type_MIN = c2s_heartbeat;
const client_msg_type client_msg_type_MAX = s2c_connect_result;
const int client_msg_type_ARRAYSIZE = client_msg_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* client_msg_type_descriptor();
inline const ::std::string& client_msg_type_Name(client_msg_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    client_msg_type_descriptor(), value);
}
inline bool client_msg_type_Parse(
    const ::std::string& name, client_msg_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<client_msg_type>(
    client_msg_type_descriptor(), name, value);
}
// ===================================================================

class msg_c2s_heartbeat : public ::google::protobuf::Message {
 public:
  msg_c2s_heartbeat();
  virtual ~msg_c2s_heartbeat();

  msg_c2s_heartbeat(const msg_c2s_heartbeat& from);

  inline msg_c2s_heartbeat& operator=(const msg_c2s_heartbeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_c2s_heartbeat& default_instance();

  void Swap(msg_c2s_heartbeat* other);

  // implements Message ----------------------------------------------

  msg_c2s_heartbeat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_c2s_heartbeat& from);
  void MergeFrom(const msg_c2s_heartbeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client_protocols.client_msg_type packet_id = 1 [default = c2s_heartbeat];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client_protocols::client_msg_type packet_id() const;
  inline void set_packet_id(::client_protocols::client_msg_type value);

  // @@protoc_insertion_point(class_scope:client_protocols.msg_c2s_heartbeat)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_c2s_heartbeat* default_instance_;
};
// -------------------------------------------------------------------

class msg_s2c_heartbeat : public ::google::protobuf::Message {
 public:
  msg_s2c_heartbeat();
  virtual ~msg_s2c_heartbeat();

  msg_s2c_heartbeat(const msg_s2c_heartbeat& from);

  inline msg_s2c_heartbeat& operator=(const msg_s2c_heartbeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_s2c_heartbeat& default_instance();

  void Swap(msg_s2c_heartbeat* other);

  // implements Message ----------------------------------------------

  msg_s2c_heartbeat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_s2c_heartbeat& from);
  void MergeFrom(const msg_s2c_heartbeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_heartbeat];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client_protocols::client_msg_type packet_id() const;
  inline void set_packet_id(::client_protocols::client_msg_type value);

  // @@protoc_insertion_point(class_scope:client_protocols.msg_s2c_heartbeat)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_s2c_heartbeat* default_instance_;
};
// -------------------------------------------------------------------

class msg_list : public ::google::protobuf::Message {
 public:
  msg_list();
  virtual ~msg_list();

  msg_list(const msg_list& from);

  inline msg_list& operator=(const msg_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_list& default_instance();

  void Swap(msg_list* other);

  // implements Message ----------------------------------------------

  msg_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_list& from);
  void MergeFrom(const msg_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 msgid = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);

  // optional bytes msginfo = 2;
  inline bool has_msginfo() const;
  inline void clear_msginfo();
  static const int kMsginfoFieldNumber = 2;
  inline const ::std::string& msginfo() const;
  inline void set_msginfo(const ::std::string& value);
  inline void set_msginfo(const char* value);
  inline void set_msginfo(const void* value, size_t size);
  inline ::std::string* mutable_msginfo();
  inline ::std::string* release_msginfo();
  inline void set_allocated_msginfo(::std::string* msginfo);

  // @@protoc_insertion_point(class_scope:client_protocols.msg_list)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_msginfo();
  inline void clear_has_msginfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msginfo_;
  ::google::protobuf::int32 msgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_list* default_instance_;
};
// -------------------------------------------------------------------

class msg_s2c_send_msglist : public ::google::protobuf::Message {
 public:
  msg_s2c_send_msglist();
  virtual ~msg_s2c_send_msglist();

  msg_s2c_send_msglist(const msg_s2c_send_msglist& from);

  inline msg_s2c_send_msglist& operator=(const msg_s2c_send_msglist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_s2c_send_msglist& default_instance();

  void Swap(msg_s2c_send_msglist* other);

  // implements Message ----------------------------------------------

  msg_s2c_send_msglist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_s2c_send_msglist& from);
  void MergeFrom(const msg_s2c_send_msglist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_send_msglist];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client_protocols::client_msg_type packet_id() const;
  inline void set_packet_id(::client_protocols::client_msg_type value);

  // repeated .client_protocols.msg_list msgpaks = 3;
  inline int msgpaks_size() const;
  inline void clear_msgpaks();
  static const int kMsgpaksFieldNumber = 3;
  inline const ::client_protocols::msg_list& msgpaks(int index) const;
  inline ::client_protocols::msg_list* mutable_msgpaks(int index);
  inline ::client_protocols::msg_list* add_msgpaks();
  inline const ::google::protobuf::RepeatedPtrField< ::client_protocols::msg_list >&
      msgpaks() const;
  inline ::google::protobuf::RepeatedPtrField< ::client_protocols::msg_list >*
      mutable_msgpaks();

  // @@protoc_insertion_point(class_scope:client_protocols.msg_s2c_send_msglist)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client_protocols::msg_list > msgpaks_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_s2c_send_msglist* default_instance_;
};
// -------------------------------------------------------------------

class msg_s2c_net_param : public ::google::protobuf::Message {
 public:
  msg_s2c_net_param();
  virtual ~msg_s2c_net_param();

  msg_s2c_net_param(const msg_s2c_net_param& from);

  inline msg_s2c_net_param& operator=(const msg_s2c_net_param& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_s2c_net_param& default_instance();

  void Swap(msg_s2c_net_param* other);

  // implements Message ----------------------------------------------

  msg_s2c_net_param* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_s2c_net_param& from);
  void MergeFrom(const msg_s2c_net_param& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_net_param];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client_protocols::client_msg_type packet_id() const;
  inline void set_packet_id(::client_protocols::client_msg_type value);

  // optional int32 param_type = 2;
  inline bool has_param_type() const;
  inline void clear_param_type();
  static const int kParamTypeFieldNumber = 2;
  inline ::google::protobuf::int32 param_type() const;
  inline void set_param_type(::google::protobuf::int32 value);

  // optional bytes param1 = 3;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 3;
  inline const ::std::string& param1() const;
  inline void set_param1(const ::std::string& value);
  inline void set_param1(const char* value);
  inline void set_param1(const void* value, size_t size);
  inline ::std::string* mutable_param1();
  inline ::std::string* release_param1();
  inline void set_allocated_param1(::std::string* param1);

  // optional bytes param2 = 4;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 4;
  inline const ::std::string& param2() const;
  inline void set_param2(const ::std::string& value);
  inline void set_param2(const char* value);
  inline void set_param2(const void* value, size_t size);
  inline ::std::string* mutable_param2();
  inline ::std::string* release_param2();
  inline void set_allocated_param2(::std::string* param2);

  // optional bool shutdown = 5;
  inline bool has_shutdown() const;
  inline void clear_shutdown();
  static const int kShutdownFieldNumber = 5;
  inline bool shutdown() const;
  inline void set_shutdown(bool value);

  // @@protoc_insertion_point(class_scope:client_protocols.msg_s2c_net_param)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_param_type();
  inline void clear_has_param_type();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_shutdown();
  inline void clear_has_shutdown();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 param_type_;
  ::std::string* param1_;
  ::std::string* param2_;
  bool shutdown_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_s2c_net_param* default_instance_;
};
// -------------------------------------------------------------------

class msg_c2s_net_param : public ::google::protobuf::Message {
 public:
  msg_c2s_net_param();
  virtual ~msg_c2s_net_param();

  msg_c2s_net_param(const msg_c2s_net_param& from);

  inline msg_c2s_net_param& operator=(const msg_c2s_net_param& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_c2s_net_param& default_instance();

  void Swap(msg_c2s_net_param* other);

  // implements Message ----------------------------------------------

  msg_c2s_net_param* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_c2s_net_param& from);
  void MergeFrom(const msg_c2s_net_param& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client_protocols.client_msg_type packet_id = 1 [default = c2s_net_param];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client_protocols::client_msg_type packet_id() const;
  inline void set_packet_id(::client_protocols::client_msg_type value);

  // optional int32 param_type = 2;
  inline bool has_param_type() const;
  inline void clear_param_type();
  static const int kParamTypeFieldNumber = 2;
  inline ::google::protobuf::int32 param_type() const;
  inline void set_param_type(::google::protobuf::int32 value);

  // optional bytes param1 = 3;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 3;
  inline const ::std::string& param1() const;
  inline void set_param1(const ::std::string& value);
  inline void set_param1(const char* value);
  inline void set_param1(const void* value, size_t size);
  inline ::std::string* mutable_param1();
  inline ::std::string* release_param1();
  inline void set_allocated_param1(::std::string* param1);

  // optional bytes param2 = 4;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 4;
  inline const ::std::string& param2() const;
  inline void set_param2(const ::std::string& value);
  inline void set_param2(const char* value);
  inline void set_param2(const void* value, size_t size);
  inline ::std::string* mutable_param2();
  inline ::std::string* release_param2();
  inline void set_allocated_param2(::std::string* param2);

  // @@protoc_insertion_point(class_scope:client_protocols.msg_c2s_net_param)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_param_type();
  inline void clear_has_param_type();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 param_type_;
  ::std::string* param1_;
  ::std::string* param2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_c2s_net_param* default_instance_;
};
// -------------------------------------------------------------------

class msg_s2c_shutdown : public ::google::protobuf::Message {
 public:
  msg_s2c_shutdown();
  virtual ~msg_s2c_shutdown();

  msg_s2c_shutdown(const msg_s2c_shutdown& from);

  inline msg_s2c_shutdown& operator=(const msg_s2c_shutdown& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_s2c_shutdown& default_instance();

  void Swap(msg_s2c_shutdown* other);

  // implements Message ----------------------------------------------

  msg_s2c_shutdown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_s2c_shutdown& from);
  void MergeFrom(const msg_s2c_shutdown& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_shutdown];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client_protocols::client_msg_type packet_id() const;
  inline void set_packet_id(::client_protocols::client_msg_type value);

  // @@protoc_insertion_point(class_scope:client_protocols.msg_s2c_shutdown)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_s2c_shutdown* default_instance_;
};
// -------------------------------------------------------------------

class msg_t2t_start : public ::google::protobuf::Message {
 public:
  msg_t2t_start();
  virtual ~msg_t2t_start();

  msg_t2t_start(const msg_t2t_start& from);

  inline msg_t2t_start& operator=(const msg_t2t_start& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_t2t_start& default_instance();

  void Swap(msg_t2t_start* other);

  // implements Message ----------------------------------------------

  msg_t2t_start* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_t2t_start& from);
  void MergeFrom(const msg_t2t_start& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client_protocols.client_msg_type packet_id = 1 [default = t2t_start];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client_protocols::client_msg_type packet_id() const;
  inline void set_packet_id(::client_protocols::client_msg_type value);

  // @@protoc_insertion_point(class_scope:client_protocols.msg_t2t_start)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_t2t_start* default_instance_;
};
// -------------------------------------------------------------------

class msg_c2s_connect : public ::google::protobuf::Message {
 public:
  msg_c2s_connect();
  virtual ~msg_c2s_connect();

  msg_c2s_connect(const msg_c2s_connect& from);

  inline msg_c2s_connect& operator=(const msg_c2s_connect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_c2s_connect& default_instance();

  void Swap(msg_c2s_connect* other);

  // implements Message ----------------------------------------------

  msg_c2s_connect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_c2s_connect& from);
  void MergeFrom(const msg_c2s_connect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client_protocols.client_msg_type packet_id = 1 [default = c2s_connect];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client_protocols::client_msg_type packet_id() const;
  inline void set_packet_id(::client_protocols::client_msg_type value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional string sign = 4;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 4;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional string platform = 5;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 5;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // optional string login_platform = 6;
  inline bool has_login_platform() const;
  inline void clear_login_platform();
  static const int kLoginPlatformFieldNumber = 6;
  inline const ::std::string& login_platform() const;
  inline void set_login_platform(const ::std::string& value);
  inline void set_login_platform(const char* value);
  inline void set_login_platform(const char* value, size_t size);
  inline ::std::string* mutable_login_platform();
  inline ::std::string* release_login_platform();
  inline void set_allocated_login_platform(::std::string* login_platform);

  // optional string machine_code = 7;
  inline bool has_machine_code() const;
  inline void clear_machine_code();
  static const int kMachineCodeFieldNumber = 7;
  inline const ::std::string& machine_code() const;
  inline void set_machine_code(const ::std::string& value);
  inline void set_machine_code(const char* value);
  inline void set_machine_code(const char* value, size_t size);
  inline ::std::string* mutable_machine_code();
  inline ::std::string* release_machine_code();
  inline void set_allocated_machine_code(::std::string* machine_code);

  // optional string machine_type = 8;
  inline bool has_machine_type() const;
  inline void clear_machine_type();
  static const int kMachineTypeFieldNumber = 8;
  inline const ::std::string& machine_type() const;
  inline void set_machine_type(const ::std::string& value);
  inline void set_machine_type(const char* value);
  inline void set_machine_type(const char* value, size_t size);
  inline ::std::string* mutable_machine_type();
  inline ::std::string* release_machine_type();
  inline void set_allocated_machine_type(::std::string* machine_type);

  // optional int32 channelid = 9;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 9;
  inline ::google::protobuf::int32 channelid() const;
  inline void set_channelid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client_protocols.msg_c2s_connect)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_login_platform();
  inline void clear_has_login_platform();
  inline void set_has_machine_code();
  inline void clear_has_machine_code();
  inline void set_has_machine_type();
  inline void clear_has_machine_type();
  inline void set_has_channelid();
  inline void clear_has_channelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* token_;
  ::std::string* sign_;
  ::std::string* platform_;
  int packet_id_;
  ::google::protobuf::int32 channelid_;
  ::std::string* login_platform_;
  ::std::string* machine_code_;
  ::std::string* machine_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_client_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_c2s_connect* default_instance_;
};
// -------------------------------------------------------------------

class msg_s2c_connect_result : public ::google::protobuf::Message {
 public:
  msg_s2c_connect_result();
  virtual ~msg_s2c_connect_result();

  msg_s2c_connect_result(const msg_s2c_connect_result& from);

  inline msg_s2c_connect_result& operator=(const msg_s2c_connect_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_s2c_connect_result& default_instance();

  void Swap(msg_s2c_connect_result* other);

  // implements Message ----------------------------------------------

  msg_s2c_connect_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_s2c_connect_result& from);
  void MergeFrom(const msg_s2c_connect_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_connect_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client_protocols::client_msg_type packet_id() const;
  inline void set_packet_id(::client_protocols::client_msg_type value);

  // optional int32 result = 2 [default = 2];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 servertime = 3;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServertimeFieldNumber = 3;
  inline ::google::protobuf::int32 servertime() const;
  inline void set_servertime(::google::protobuf::int32 value);

  // optional int32 gaming = 4 [default = 0];
  inline bool has_gaming() const;
  inline void clear_gaming();
  static const int kGamingFieldNumber = 4;
  inline ::google::protobuf::int32 gaming() const;
  inline void set_gaming(::google::protobuf::int32 value);

  // optional string ver = 5;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 5;
  inline const ::std::string& ver() const;
  inline void set_ver(const ::std::string& value);
  inline void set_ver(const char* value);
  inline void set_ver(const char* value, size_t size);
  inline ::std::string* mutable_ver();
  inline ::std::string* release_ver();
  inline void set_allocated_ver(::std::string* ver);

  // @@protoc_insertion_point(class_scope:client_protocols.msg_s2c_connect_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_servertime();
  inline void clear_has_servertime();
  inline void set_has_gaming();
  inline void clear_has_gaming();
  inline void set_has_ver();
  inline void clear_has_ver();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 servertime_;
  ::google::protobuf::int32 gaming_;
  ::std::string* ver_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_s2c_connect_result* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_c2s_heartbeat

// optional .client_protocols.client_msg_type packet_id = 1 [default = c2s_heartbeat];
inline bool msg_c2s_heartbeat::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_c2s_heartbeat::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_c2s_heartbeat::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_c2s_heartbeat::clear_packet_id() {
  packet_id_ = 301;
  clear_has_packet_id();
}
inline ::client_protocols::client_msg_type msg_c2s_heartbeat::packet_id() const {
  return static_cast< ::client_protocols::client_msg_type >(packet_id_);
}
inline void msg_c2s_heartbeat::set_packet_id(::client_protocols::client_msg_type value) {
  assert(::client_protocols::client_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// msg_s2c_heartbeat

// optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_heartbeat];
inline bool msg_s2c_heartbeat::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_s2c_heartbeat::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_s2c_heartbeat::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_s2c_heartbeat::clear_packet_id() {
  packet_id_ = 404;
  clear_has_packet_id();
}
inline ::client_protocols::client_msg_type msg_s2c_heartbeat::packet_id() const {
  return static_cast< ::client_protocols::client_msg_type >(packet_id_);
}
inline void msg_s2c_heartbeat::set_packet_id(::client_protocols::client_msg_type value) {
  assert(::client_protocols::client_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// msg_list

// optional int32 msgid = 1;
inline bool msg_list::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_list::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_list::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_list::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::google::protobuf::int32 msg_list::msgid() const {
  return msgid_;
}
inline void msg_list::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
}

// optional bytes msginfo = 2;
inline bool msg_list::has_msginfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_list::set_has_msginfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_list::clear_has_msginfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_list::clear_msginfo() {
  if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
    msginfo_->clear();
  }
  clear_has_msginfo();
}
inline const ::std::string& msg_list::msginfo() const {
  return *msginfo_;
}
inline void msg_list::set_msginfo(const ::std::string& value) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(value);
}
inline void msg_list::set_msginfo(const char* value) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(value);
}
inline void msg_list::set_msginfo(const void* value, size_t size) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_list::mutable_msginfo() {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  return msginfo_;
}
inline ::std::string* msg_list::release_msginfo() {
  clear_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msginfo_;
    msginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_list::set_allocated_msginfo(::std::string* msginfo) {
  if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
    delete msginfo_;
  }
  if (msginfo) {
    set_has_msginfo();
    msginfo_ = msginfo;
  } else {
    clear_has_msginfo();
    msginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_s2c_send_msglist

// optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_send_msglist];
inline bool msg_s2c_send_msglist::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_s2c_send_msglist::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_s2c_send_msglist::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_s2c_send_msglist::clear_packet_id() {
  packet_id_ = 401;
  clear_has_packet_id();
}
inline ::client_protocols::client_msg_type msg_s2c_send_msglist::packet_id() const {
  return static_cast< ::client_protocols::client_msg_type >(packet_id_);
}
inline void msg_s2c_send_msglist::set_packet_id(::client_protocols::client_msg_type value) {
  assert(::client_protocols::client_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .client_protocols.msg_list msgpaks = 3;
inline int msg_s2c_send_msglist::msgpaks_size() const {
  return msgpaks_.size();
}
inline void msg_s2c_send_msglist::clear_msgpaks() {
  msgpaks_.Clear();
}
inline const ::client_protocols::msg_list& msg_s2c_send_msglist::msgpaks(int index) const {
  return msgpaks_.Get(index);
}
inline ::client_protocols::msg_list* msg_s2c_send_msglist::mutable_msgpaks(int index) {
  return msgpaks_.Mutable(index);
}
inline ::client_protocols::msg_list* msg_s2c_send_msglist::add_msgpaks() {
  return msgpaks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client_protocols::msg_list >&
msg_s2c_send_msglist::msgpaks() const {
  return msgpaks_;
}
inline ::google::protobuf::RepeatedPtrField< ::client_protocols::msg_list >*
msg_s2c_send_msglist::mutable_msgpaks() {
  return &msgpaks_;
}

// -------------------------------------------------------------------

// msg_s2c_net_param

// optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_net_param];
inline bool msg_s2c_net_param::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_s2c_net_param::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_s2c_net_param::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_s2c_net_param::clear_packet_id() {
  packet_id_ = 402;
  clear_has_packet_id();
}
inline ::client_protocols::client_msg_type msg_s2c_net_param::packet_id() const {
  return static_cast< ::client_protocols::client_msg_type >(packet_id_);
}
inline void msg_s2c_net_param::set_packet_id(::client_protocols::client_msg_type value) {
  assert(::client_protocols::client_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 param_type = 2;
inline bool msg_s2c_net_param::has_param_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_s2c_net_param::set_has_param_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_s2c_net_param::clear_has_param_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_s2c_net_param::clear_param_type() {
  param_type_ = 0;
  clear_has_param_type();
}
inline ::google::protobuf::int32 msg_s2c_net_param::param_type() const {
  return param_type_;
}
inline void msg_s2c_net_param::set_param_type(::google::protobuf::int32 value) {
  set_has_param_type();
  param_type_ = value;
}

// optional bytes param1 = 3;
inline bool msg_s2c_net_param::has_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_s2c_net_param::set_has_param1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_s2c_net_param::clear_has_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_s2c_net_param::clear_param1() {
  if (param1_ != &::google::protobuf::internal::kEmptyString) {
    param1_->clear();
  }
  clear_has_param1();
}
inline const ::std::string& msg_s2c_net_param::param1() const {
  return *param1_;
}
inline void msg_s2c_net_param::set_param1(const ::std::string& value) {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    param1_ = new ::std::string;
  }
  param1_->assign(value);
}
inline void msg_s2c_net_param::set_param1(const char* value) {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    param1_ = new ::std::string;
  }
  param1_->assign(value);
}
inline void msg_s2c_net_param::set_param1(const void* value, size_t size) {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    param1_ = new ::std::string;
  }
  param1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_s2c_net_param::mutable_param1() {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    param1_ = new ::std::string;
  }
  return param1_;
}
inline ::std::string* msg_s2c_net_param::release_param1() {
  clear_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param1_;
    param1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_s2c_net_param::set_allocated_param1(::std::string* param1) {
  if (param1_ != &::google::protobuf::internal::kEmptyString) {
    delete param1_;
  }
  if (param1) {
    set_has_param1();
    param1_ = param1;
  } else {
    clear_has_param1();
    param1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes param2 = 4;
inline bool msg_s2c_net_param::has_param2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_s2c_net_param::set_has_param2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_s2c_net_param::clear_has_param2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_s2c_net_param::clear_param2() {
  if (param2_ != &::google::protobuf::internal::kEmptyString) {
    param2_->clear();
  }
  clear_has_param2();
}
inline const ::std::string& msg_s2c_net_param::param2() const {
  return *param2_;
}
inline void msg_s2c_net_param::set_param2(const ::std::string& value) {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    param2_ = new ::std::string;
  }
  param2_->assign(value);
}
inline void msg_s2c_net_param::set_param2(const char* value) {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    param2_ = new ::std::string;
  }
  param2_->assign(value);
}
inline void msg_s2c_net_param::set_param2(const void* value, size_t size) {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    param2_ = new ::std::string;
  }
  param2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_s2c_net_param::mutable_param2() {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    param2_ = new ::std::string;
  }
  return param2_;
}
inline ::std::string* msg_s2c_net_param::release_param2() {
  clear_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param2_;
    param2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_s2c_net_param::set_allocated_param2(::std::string* param2) {
  if (param2_ != &::google::protobuf::internal::kEmptyString) {
    delete param2_;
  }
  if (param2) {
    set_has_param2();
    param2_ = param2;
  } else {
    clear_has_param2();
    param2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool shutdown = 5;
inline bool msg_s2c_net_param::has_shutdown() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_s2c_net_param::set_has_shutdown() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_s2c_net_param::clear_has_shutdown() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_s2c_net_param::clear_shutdown() {
  shutdown_ = false;
  clear_has_shutdown();
}
inline bool msg_s2c_net_param::shutdown() const {
  return shutdown_;
}
inline void msg_s2c_net_param::set_shutdown(bool value) {
  set_has_shutdown();
  shutdown_ = value;
}

// -------------------------------------------------------------------

// msg_c2s_net_param

// optional .client_protocols.client_msg_type packet_id = 1 [default = c2s_net_param];
inline bool msg_c2s_net_param::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_c2s_net_param::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_c2s_net_param::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_c2s_net_param::clear_packet_id() {
  packet_id_ = 302;
  clear_has_packet_id();
}
inline ::client_protocols::client_msg_type msg_c2s_net_param::packet_id() const {
  return static_cast< ::client_protocols::client_msg_type >(packet_id_);
}
inline void msg_c2s_net_param::set_packet_id(::client_protocols::client_msg_type value) {
  assert(::client_protocols::client_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 param_type = 2;
inline bool msg_c2s_net_param::has_param_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_c2s_net_param::set_has_param_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_c2s_net_param::clear_has_param_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_c2s_net_param::clear_param_type() {
  param_type_ = 0;
  clear_has_param_type();
}
inline ::google::protobuf::int32 msg_c2s_net_param::param_type() const {
  return param_type_;
}
inline void msg_c2s_net_param::set_param_type(::google::protobuf::int32 value) {
  set_has_param_type();
  param_type_ = value;
}

// optional bytes param1 = 3;
inline bool msg_c2s_net_param::has_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_c2s_net_param::set_has_param1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_c2s_net_param::clear_has_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_c2s_net_param::clear_param1() {
  if (param1_ != &::google::protobuf::internal::kEmptyString) {
    param1_->clear();
  }
  clear_has_param1();
}
inline const ::std::string& msg_c2s_net_param::param1() const {
  return *param1_;
}
inline void msg_c2s_net_param::set_param1(const ::std::string& value) {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    param1_ = new ::std::string;
  }
  param1_->assign(value);
}
inline void msg_c2s_net_param::set_param1(const char* value) {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    param1_ = new ::std::string;
  }
  param1_->assign(value);
}
inline void msg_c2s_net_param::set_param1(const void* value, size_t size) {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    param1_ = new ::std::string;
  }
  param1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_c2s_net_param::mutable_param1() {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    param1_ = new ::std::string;
  }
  return param1_;
}
inline ::std::string* msg_c2s_net_param::release_param1() {
  clear_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param1_;
    param1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_c2s_net_param::set_allocated_param1(::std::string* param1) {
  if (param1_ != &::google::protobuf::internal::kEmptyString) {
    delete param1_;
  }
  if (param1) {
    set_has_param1();
    param1_ = param1;
  } else {
    clear_has_param1();
    param1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes param2 = 4;
inline bool msg_c2s_net_param::has_param2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_c2s_net_param::set_has_param2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_c2s_net_param::clear_has_param2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_c2s_net_param::clear_param2() {
  if (param2_ != &::google::protobuf::internal::kEmptyString) {
    param2_->clear();
  }
  clear_has_param2();
}
inline const ::std::string& msg_c2s_net_param::param2() const {
  return *param2_;
}
inline void msg_c2s_net_param::set_param2(const ::std::string& value) {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    param2_ = new ::std::string;
  }
  param2_->assign(value);
}
inline void msg_c2s_net_param::set_param2(const char* value) {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    param2_ = new ::std::string;
  }
  param2_->assign(value);
}
inline void msg_c2s_net_param::set_param2(const void* value, size_t size) {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    param2_ = new ::std::string;
  }
  param2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_c2s_net_param::mutable_param2() {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    param2_ = new ::std::string;
  }
  return param2_;
}
inline ::std::string* msg_c2s_net_param::release_param2() {
  clear_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param2_;
    param2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_c2s_net_param::set_allocated_param2(::std::string* param2) {
  if (param2_ != &::google::protobuf::internal::kEmptyString) {
    delete param2_;
  }
  if (param2) {
    set_has_param2();
    param2_ = param2;
  } else {
    clear_has_param2();
    param2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_s2c_shutdown

// optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_shutdown];
inline bool msg_s2c_shutdown::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_s2c_shutdown::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_s2c_shutdown::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_s2c_shutdown::clear_packet_id() {
  packet_id_ = 403;
  clear_has_packet_id();
}
inline ::client_protocols::client_msg_type msg_s2c_shutdown::packet_id() const {
  return static_cast< ::client_protocols::client_msg_type >(packet_id_);
}
inline void msg_s2c_shutdown::set_packet_id(::client_protocols::client_msg_type value) {
  assert(::client_protocols::client_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// msg_t2t_start

// optional .client_protocols.client_msg_type packet_id = 1 [default = t2t_start];
inline bool msg_t2t_start::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_t2t_start::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_t2t_start::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_t2t_start::clear_packet_id() {
  packet_id_ = 444;
  clear_has_packet_id();
}
inline ::client_protocols::client_msg_type msg_t2t_start::packet_id() const {
  return static_cast< ::client_protocols::client_msg_type >(packet_id_);
}
inline void msg_t2t_start::set_packet_id(::client_protocols::client_msg_type value) {
  assert(::client_protocols::client_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// msg_c2s_connect

// optional .client_protocols.client_msg_type packet_id = 1 [default = c2s_connect];
inline bool msg_c2s_connect::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_c2s_connect::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_c2s_connect::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_c2s_connect::clear_packet_id() {
  packet_id_ = 5001;
  clear_has_packet_id();
}
inline ::client_protocols::client_msg_type msg_c2s_connect::packet_id() const {
  return static_cast< ::client_protocols::client_msg_type >(packet_id_);
}
inline void msg_c2s_connect::set_packet_id(::client_protocols::client_msg_type value) {
  assert(::client_protocols::client_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional string account = 2;
inline bool msg_c2s_connect::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_c2s_connect::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_c2s_connect::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_c2s_connect::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& msg_c2s_connect::account() const {
  return *account_;
}
inline void msg_c2s_connect::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void msg_c2s_connect::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void msg_c2s_connect::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_c2s_connect::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* msg_c2s_connect::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_c2s_connect::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string token = 3;
inline bool msg_c2s_connect::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_c2s_connect::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_c2s_connect::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_c2s_connect::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& msg_c2s_connect::token() const {
  return *token_;
}
inline void msg_c2s_connect::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void msg_c2s_connect::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void msg_c2s_connect::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_c2s_connect::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* msg_c2s_connect::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_c2s_connect::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sign = 4;
inline bool msg_c2s_connect::has_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_c2s_connect::set_has_sign() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_c2s_connect::clear_has_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_c2s_connect::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& msg_c2s_connect::sign() const {
  return *sign_;
}
inline void msg_c2s_connect::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void msg_c2s_connect::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void msg_c2s_connect::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_c2s_connect::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* msg_c2s_connect::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_c2s_connect::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string platform = 5;
inline bool msg_c2s_connect::has_platform() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_c2s_connect::set_has_platform() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_c2s_connect::clear_has_platform() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_c2s_connect::clear_platform() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& msg_c2s_connect::platform() const {
  return *platform_;
}
inline void msg_c2s_connect::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void msg_c2s_connect::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void msg_c2s_connect::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_c2s_connect::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  return platform_;
}
inline ::std::string* msg_c2s_connect::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_c2s_connect::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string login_platform = 6;
inline bool msg_c2s_connect::has_login_platform() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_c2s_connect::set_has_login_platform() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_c2s_connect::clear_has_login_platform() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_c2s_connect::clear_login_platform() {
  if (login_platform_ != &::google::protobuf::internal::kEmptyString) {
    login_platform_->clear();
  }
  clear_has_login_platform();
}
inline const ::std::string& msg_c2s_connect::login_platform() const {
  return *login_platform_;
}
inline void msg_c2s_connect::set_login_platform(const ::std::string& value) {
  set_has_login_platform();
  if (login_platform_ == &::google::protobuf::internal::kEmptyString) {
    login_platform_ = new ::std::string;
  }
  login_platform_->assign(value);
}
inline void msg_c2s_connect::set_login_platform(const char* value) {
  set_has_login_platform();
  if (login_platform_ == &::google::protobuf::internal::kEmptyString) {
    login_platform_ = new ::std::string;
  }
  login_platform_->assign(value);
}
inline void msg_c2s_connect::set_login_platform(const char* value, size_t size) {
  set_has_login_platform();
  if (login_platform_ == &::google::protobuf::internal::kEmptyString) {
    login_platform_ = new ::std::string;
  }
  login_platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_c2s_connect::mutable_login_platform() {
  set_has_login_platform();
  if (login_platform_ == &::google::protobuf::internal::kEmptyString) {
    login_platform_ = new ::std::string;
  }
  return login_platform_;
}
inline ::std::string* msg_c2s_connect::release_login_platform() {
  clear_has_login_platform();
  if (login_platform_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = login_platform_;
    login_platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_c2s_connect::set_allocated_login_platform(::std::string* login_platform) {
  if (login_platform_ != &::google::protobuf::internal::kEmptyString) {
    delete login_platform_;
  }
  if (login_platform) {
    set_has_login_platform();
    login_platform_ = login_platform;
  } else {
    clear_has_login_platform();
    login_platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string machine_code = 7;
inline bool msg_c2s_connect::has_machine_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_c2s_connect::set_has_machine_code() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_c2s_connect::clear_has_machine_code() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_c2s_connect::clear_machine_code() {
  if (machine_code_ != &::google::protobuf::internal::kEmptyString) {
    machine_code_->clear();
  }
  clear_has_machine_code();
}
inline const ::std::string& msg_c2s_connect::machine_code() const {
  return *machine_code_;
}
inline void msg_c2s_connect::set_machine_code(const ::std::string& value) {
  set_has_machine_code();
  if (machine_code_ == &::google::protobuf::internal::kEmptyString) {
    machine_code_ = new ::std::string;
  }
  machine_code_->assign(value);
}
inline void msg_c2s_connect::set_machine_code(const char* value) {
  set_has_machine_code();
  if (machine_code_ == &::google::protobuf::internal::kEmptyString) {
    machine_code_ = new ::std::string;
  }
  machine_code_->assign(value);
}
inline void msg_c2s_connect::set_machine_code(const char* value, size_t size) {
  set_has_machine_code();
  if (machine_code_ == &::google::protobuf::internal::kEmptyString) {
    machine_code_ = new ::std::string;
  }
  machine_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_c2s_connect::mutable_machine_code() {
  set_has_machine_code();
  if (machine_code_ == &::google::protobuf::internal::kEmptyString) {
    machine_code_ = new ::std::string;
  }
  return machine_code_;
}
inline ::std::string* msg_c2s_connect::release_machine_code() {
  clear_has_machine_code();
  if (machine_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = machine_code_;
    machine_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_c2s_connect::set_allocated_machine_code(::std::string* machine_code) {
  if (machine_code_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_code_;
  }
  if (machine_code) {
    set_has_machine_code();
    machine_code_ = machine_code;
  } else {
    clear_has_machine_code();
    machine_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string machine_type = 8;
inline bool msg_c2s_connect::has_machine_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_c2s_connect::set_has_machine_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_c2s_connect::clear_has_machine_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_c2s_connect::clear_machine_type() {
  if (machine_type_ != &::google::protobuf::internal::kEmptyString) {
    machine_type_->clear();
  }
  clear_has_machine_type();
}
inline const ::std::string& msg_c2s_connect::machine_type() const {
  return *machine_type_;
}
inline void msg_c2s_connect::set_machine_type(const ::std::string& value) {
  set_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::kEmptyString) {
    machine_type_ = new ::std::string;
  }
  machine_type_->assign(value);
}
inline void msg_c2s_connect::set_machine_type(const char* value) {
  set_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::kEmptyString) {
    machine_type_ = new ::std::string;
  }
  machine_type_->assign(value);
}
inline void msg_c2s_connect::set_machine_type(const char* value, size_t size) {
  set_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::kEmptyString) {
    machine_type_ = new ::std::string;
  }
  machine_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_c2s_connect::mutable_machine_type() {
  set_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::kEmptyString) {
    machine_type_ = new ::std::string;
  }
  return machine_type_;
}
inline ::std::string* msg_c2s_connect::release_machine_type() {
  clear_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = machine_type_;
    machine_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_c2s_connect::set_allocated_machine_type(::std::string* machine_type) {
  if (machine_type_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_type_;
  }
  if (machine_type) {
    set_has_machine_type();
    machine_type_ = machine_type;
  } else {
    clear_has_machine_type();
    machine_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 channelid = 9;
inline bool msg_c2s_connect::has_channelid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msg_c2s_connect::set_has_channelid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msg_c2s_connect::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msg_c2s_connect::clear_channelid() {
  channelid_ = 0;
  clear_has_channelid();
}
inline ::google::protobuf::int32 msg_c2s_connect::channelid() const {
  return channelid_;
}
inline void msg_c2s_connect::set_channelid(::google::protobuf::int32 value) {
  set_has_channelid();
  channelid_ = value;
}

// -------------------------------------------------------------------

// msg_s2c_connect_result

// optional .client_protocols.client_msg_type packet_id = 1 [default = s2c_connect_result];
inline bool msg_s2c_connect_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_s2c_connect_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_s2c_connect_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_s2c_connect_result::clear_packet_id() {
  packet_id_ = 7501;
  clear_has_packet_id();
}
inline ::client_protocols::client_msg_type msg_s2c_connect_result::packet_id() const {
  return static_cast< ::client_protocols::client_msg_type >(packet_id_);
}
inline void msg_s2c_connect_result::set_packet_id(::client_protocols::client_msg_type value) {
  assert(::client_protocols::client_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 result = 2 [default = 2];
inline bool msg_s2c_connect_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_s2c_connect_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_s2c_connect_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_s2c_connect_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::google::protobuf::int32 msg_s2c_connect_result::result() const {
  return result_;
}
inline void msg_s2c_connect_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 servertime = 3;
inline bool msg_s2c_connect_result::has_servertime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_s2c_connect_result::set_has_servertime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_s2c_connect_result::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_s2c_connect_result::clear_servertime() {
  servertime_ = 0;
  clear_has_servertime();
}
inline ::google::protobuf::int32 msg_s2c_connect_result::servertime() const {
  return servertime_;
}
inline void msg_s2c_connect_result::set_servertime(::google::protobuf::int32 value) {
  set_has_servertime();
  servertime_ = value;
}

// optional int32 gaming = 4 [default = 0];
inline bool msg_s2c_connect_result::has_gaming() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_s2c_connect_result::set_has_gaming() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_s2c_connect_result::clear_has_gaming() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_s2c_connect_result::clear_gaming() {
  gaming_ = 0;
  clear_has_gaming();
}
inline ::google::protobuf::int32 msg_s2c_connect_result::gaming() const {
  return gaming_;
}
inline void msg_s2c_connect_result::set_gaming(::google::protobuf::int32 value) {
  set_has_gaming();
  gaming_ = value;
}

// optional string ver = 5;
inline bool msg_s2c_connect_result::has_ver() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_s2c_connect_result::set_has_ver() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_s2c_connect_result::clear_has_ver() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_s2c_connect_result::clear_ver() {
  if (ver_ != &::google::protobuf::internal::kEmptyString) {
    ver_->clear();
  }
  clear_has_ver();
}
inline const ::std::string& msg_s2c_connect_result::ver() const {
  return *ver_;
}
inline void msg_s2c_connect_result::set_ver(const ::std::string& value) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::kEmptyString) {
    ver_ = new ::std::string;
  }
  ver_->assign(value);
}
inline void msg_s2c_connect_result::set_ver(const char* value) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::kEmptyString) {
    ver_ = new ::std::string;
  }
  ver_->assign(value);
}
inline void msg_s2c_connect_result::set_ver(const char* value, size_t size) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::kEmptyString) {
    ver_ = new ::std::string;
  }
  ver_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_s2c_connect_result::mutable_ver() {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::kEmptyString) {
    ver_ = new ::std::string;
  }
  return ver_;
}
inline ::std::string* msg_s2c_connect_result::release_ver() {
  clear_has_ver();
  if (ver_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ver_;
    ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_s2c_connect_result::set_allocated_ver(::std::string* ver) {
  if (ver_ != &::google::protobuf::internal::kEmptyString) {
    delete ver_;
  }
  if (ver) {
    set_has_ver();
    ver_ = ver;
  } else {
    clear_has_ver();
    ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client_protocols

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client_protocols::client_msg_type>() {
  return ::client_protocols::client_msg_type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_5fmsg_2eproto__INCLUDED
