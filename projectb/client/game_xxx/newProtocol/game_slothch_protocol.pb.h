// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_slothch_protocol.proto

#ifndef PROTOBUF_game_5fslothch_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_game_5fslothch_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "game_slothch_def.pb.h"
#include "msg_type_def.pb.h"
// @@protoc_insertion_point(includes)

namespace game_slothch_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

class packetc2l_check_state;
class packetc2l_check_state_result;
class packetc2l_enter_game;
class packetc2l_enter_game_result;
class packetc2l_leave_game;
class packetc2l_leave_game_result;
class packetc2l_star_game;
class IconInfo;
class FreeInfo;
class packetc2l_star_game_result;
class packetc2l_req_game_lottery_count;
class packetl2c_req_game_lottery_count_result;
class packetc2l_req_game_lottery;
class packetl2c_req_game_lottery_result;
class msg_lottery_info;
class packetl2c_lottery_update;
class packetc2l_get_room_info;
class msg_room_info;
class packetl2c_get_room_info_result;
class packetl2c_enter_player_info;
class packetl2c_leave_player_info;
class packetl2c_player_change_money;
class packetl2c_bc_change_attr;
class packetc2l_supply_chip;
class packetl2c_supply_chip_result;
class packetc2l_get_room_scene_info;
class packetl2c_get_room_scene_info_result;
class packetl2c_scene_sync;
class packetc2l_settlement;
class packetl2c_settlement_result;
class replay_info;
class packetl2c_replay_list;
class packetl2c_replay_list_result;
class packetl2c_replay_detail;
class packetl2c_replay_detail_result;
class room_player;
class packetl2c_gm_get_room_info;
class packetl2c_gm_get_room_info_result;
class packetl2c_gm_do_kill;
class packetl2c_gm_do_kill_result;

// ===================================================================

class packetc2l_check_state : public ::google::protobuf::Message {
 public:
  packetc2l_check_state();
  virtual ~packetc2l_check_state();

  packetc2l_check_state(const packetc2l_check_state& from);

  inline packetc2l_check_state& operator=(const packetc2l_check_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_check_state& default_instance();

  void Swap(packetc2l_check_state* other);

  // implements Message ----------------------------------------------

  packetc2l_check_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_check_state& from);
  void MergeFrom(const packetc2l_check_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetc2l_check_state)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_check_state* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_check_state_result : public ::google::protobuf::Message {
 public:
  packetc2l_check_state_result();
  virtual ~packetc2l_check_state_result();

  packetc2l_check_state_result(const packetc2l_check_state_result& from);

  inline packetc2l_check_state_result& operator=(const packetc2l_check_state_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_check_state_result& default_instance();

  void Swap(packetc2l_check_state_result* other);

  // implements Message ----------------------------------------------

  packetc2l_check_state_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_check_state_result& from);
  void MergeFrom(const packetc2l_check_state_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetc2l_check_state_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_check_state_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_enter_game : public ::google::protobuf::Message {
 public:
  packetc2l_enter_game();
  virtual ~packetc2l_enter_game();

  packetc2l_enter_game(const packetc2l_enter_game& from);

  inline packetc2l_enter_game& operator=(const packetc2l_enter_game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_enter_game& default_instance();

  void Swap(packetc2l_enter_game* other);

  // implements Message ----------------------------------------------

  packetc2l_enter_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_enter_game& from);
  void MergeFrom(const packetc2l_enter_game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_game];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetc2l_enter_game)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_enter_game* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_enter_game_result : public ::google::protobuf::Message {
 public:
  packetc2l_enter_game_result();
  virtual ~packetc2l_enter_game_result();

  packetc2l_enter_game_result(const packetc2l_enter_game_result& from);

  inline packetc2l_enter_game_result& operator=(const packetc2l_enter_game_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_enter_game_result& default_instance();

  void Swap(packetc2l_enter_game_result* other);

  // implements Message ----------------------------------------------

  packetc2l_enter_game_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_enter_game_result& from);
  void MergeFrom(const packetc2l_enter_game_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_game_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // repeated .game_slothch_protocols.msg_player_info player_list = 4;
  inline int player_list_size() const;
  inline void clear_player_list();
  static const int kPlayerListFieldNumber = 4;
  inline const ::game_slothch_protocols::msg_player_info& player_list(int index) const;
  inline ::game_slothch_protocols::msg_player_info* mutable_player_list(int index);
  inline ::game_slothch_protocols::msg_player_info* add_player_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_player_info >&
      player_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_player_info >*
      mutable_player_list();

  // optional int32 free_count = 5;
  inline bool has_free_count() const;
  inline void clear_free_count();
  static const int kFreeCountFieldNumber = 5;
  inline ::google::protobuf::int32 free_count() const;
  inline void set_free_count(::google::protobuf::int32 value);

  // repeated .game_slothch_protocols.msg_lottery_info infos = 6;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 6;
  inline const ::game_slothch_protocols::msg_lottery_info& infos(int index) const;
  inline ::game_slothch_protocols::msg_lottery_info* mutable_infos(int index);
  inline ::game_slothch_protocols::msg_lottery_info* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_lottery_info >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_lottery_info >*
      mutable_infos();

  // optional string last_name = 7;
  inline bool has_last_name() const;
  inline void clear_last_name();
  static const int kLastNameFieldNumber = 7;
  inline const ::std::string& last_name() const;
  inline void set_last_name(const ::std::string& value);
  inline void set_last_name(const char* value);
  inline void set_last_name(const char* value, size_t size);
  inline ::std::string* mutable_last_name();
  inline ::std::string* release_last_name();
  inline void set_allocated_last_name(::std::string* last_name);

  // optional int64 gold = 8;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 8;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetc2l_enter_game_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_free_count();
  inline void clear_has_free_count();
  inline void set_has_last_name();
  inline void clear_has_last_name();
  inline void set_has_gold();
  inline void clear_has_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_player_info > player_list_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 free_count_;
  ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_lottery_info > infos_;
  ::std::string* last_name_;
  ::google::protobuf::int64 gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_enter_game_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_leave_game : public ::google::protobuf::Message {
 public:
  packetc2l_leave_game();
  virtual ~packetc2l_leave_game();

  packetc2l_leave_game(const packetc2l_leave_game& from);

  inline packetc2l_leave_game& operator=(const packetc2l_leave_game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_leave_game& default_instance();

  void Swap(packetc2l_leave_game* other);

  // implements Message ----------------------------------------------

  packetc2l_leave_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_leave_game& from);
  void MergeFrom(const packetc2l_leave_game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_game];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetc2l_leave_game)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_leave_game* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_leave_game_result : public ::google::protobuf::Message {
 public:
  packetc2l_leave_game_result();
  virtual ~packetc2l_leave_game_result();

  packetc2l_leave_game_result(const packetc2l_leave_game_result& from);

  inline packetc2l_leave_game_result& operator=(const packetc2l_leave_game_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_leave_game_result& default_instance();

  void Swap(packetc2l_leave_game_result* other);

  // implements Message ----------------------------------------------

  packetc2l_leave_game_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_leave_game_result& from);
  void MergeFrom(const packetc2l_leave_game_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_game_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int64 gold = 3;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 3;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetc2l_leave_game_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gold();
  inline void clear_has_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int64 gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_leave_game_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_star_game : public ::google::protobuf::Message {
 public:
  packetc2l_star_game();
  virtual ~packetc2l_star_game();

  packetc2l_star_game(const packetc2l_star_game& from);

  inline packetc2l_star_game& operator=(const packetc2l_star_game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_star_game& default_instance();

  void Swap(packetc2l_star_game* other);

  // implements Message ----------------------------------------------

  packetc2l_star_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_star_game& from);
  void MergeFrom(const packetc2l_star_game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_star_game];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional int32 rateIndex = 2;
  inline bool has_rateindex() const;
  inline void clear_rateindex();
  static const int kRateIndexFieldNumber = 2;
  inline ::google::protobuf::int32 rateindex() const;
  inline void set_rateindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetc2l_star_game)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_rateindex();
  inline void clear_has_rateindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 rateindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_star_game* default_instance_;
};
// -------------------------------------------------------------------

class IconInfo : public ::google::protobuf::Message {
 public:
  IconInfo();
  virtual ~IconInfo();

  IconInfo(const IconInfo& from);

  inline IconInfo& operator=(const IconInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IconInfo& default_instance();

  void Swap(IconInfo* other);

  // implements Message ----------------------------------------------

  IconInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IconInfo& from);
  void MergeFrom(const IconInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iconId = 1;
  inline bool has_iconid() const;
  inline void clear_iconid();
  static const int kIconIdFieldNumber = 1;
  inline ::google::protobuf::int32 iconid() const;
  inline void set_iconid(::google::protobuf::int32 value);

  // optional int32 len = 2;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 2;
  inline ::google::protobuf::int32 len() const;
  inline void set_len(::google::protobuf::int32 value);

  // optional int32 rate = 3;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 3;
  inline ::google::protobuf::int32 rate() const;
  inline void set_rate(::google::protobuf::int32 value);

  // repeated int32 iconpos = 4;
  inline int iconpos_size() const;
  inline void clear_iconpos();
  static const int kIconposFieldNumber = 4;
  inline ::google::protobuf::int32 iconpos(int index) const;
  inline void set_iconpos(int index, ::google::protobuf::int32 value);
  inline void add_iconpos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      iconpos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_iconpos();

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.IconInfo)
 private:
  inline void set_has_iconid();
  inline void clear_has_iconid();
  inline void set_has_len();
  inline void clear_has_len();
  inline void set_has_rate();
  inline void clear_has_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 iconid_;
  ::google::protobuf::int32 len_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > iconpos_;
  ::google::protobuf::int32 rate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static IconInfo* default_instance_;
};
// -------------------------------------------------------------------

class FreeInfo : public ::google::protobuf::Message {
 public:
  FreeInfo();
  virtual ~FreeInfo();

  FreeInfo(const FreeInfo& from);

  inline FreeInfo& operator=(const FreeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FreeInfo& default_instance();

  void Swap(FreeInfo* other);

  // implements Message ----------------------------------------------

  FreeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FreeInfo& from);
  void MergeFrom(const FreeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string imageArr = 1;
  inline bool has_imagearr() const;
  inline void clear_imagearr();
  static const int kImageArrFieldNumber = 1;
  inline const ::std::string& imagearr() const;
  inline void set_imagearr(const ::std::string& value);
  inline void set_imagearr(const char* value);
  inline void set_imagearr(const char* value, size_t size);
  inline ::std::string* mutable_imagearr();
  inline ::std::string* release_imagearr();
  inline void set_allocated_imagearr(::std::string* imagearr);

  // optional int32 winMoney = 2;
  inline bool has_winmoney() const;
  inline void clear_winmoney();
  static const int kWinMoneyFieldNumber = 2;
  inline ::google::protobuf::int32 winmoney() const;
  inline void set_winmoney(::google::protobuf::int32 value);

  // repeated .game_slothch_protocols.IconInfo icons = 3;
  inline int icons_size() const;
  inline void clear_icons();
  static const int kIconsFieldNumber = 3;
  inline const ::game_slothch_protocols::IconInfo& icons(int index) const;
  inline ::game_slothch_protocols::IconInfo* mutable_icons(int index);
  inline ::game_slothch_protocols::IconInfo* add_icons();
  inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::IconInfo >&
      icons() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::IconInfo >*
      mutable_icons();

  // optional bool freeCol = 4;
  inline bool has_freecol() const;
  inline void clear_freecol();
  static const int kFreeColFieldNumber = 4;
  inline bool freecol() const;
  inline void set_freecol(bool value);

  // optional int32 freeAdd = 5;
  inline bool has_freeadd() const;
  inline void clear_freeadd();
  static const int kFreeAddFieldNumber = 5;
  inline ::google::protobuf::int32 freeadd() const;
  inline void set_freeadd(::google::protobuf::int32 value);

  // optional int64 freeEndGold = 6;
  inline bool has_freeendgold() const;
  inline void clear_freeendgold();
  static const int kFreeEndGoldFieldNumber = 6;
  inline ::google::protobuf::int64 freeendgold() const;
  inline void set_freeendgold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.FreeInfo)
 private:
  inline void set_has_imagearr();
  inline void clear_has_imagearr();
  inline void set_has_winmoney();
  inline void clear_has_winmoney();
  inline void set_has_freecol();
  inline void clear_has_freecol();
  inline void set_has_freeadd();
  inline void clear_has_freeadd();
  inline void set_has_freeendgold();
  inline void clear_has_freeendgold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* imagearr_;
  ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::IconInfo > icons_;
  ::google::protobuf::int32 winmoney_;
  bool freecol_;
  ::google::protobuf::int64 freeendgold_;
  ::google::protobuf::int32 freeadd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static FreeInfo* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_star_game_result : public ::google::protobuf::Message {
 public:
  packetc2l_star_game_result();
  virtual ~packetc2l_star_game_result();

  packetc2l_star_game_result(const packetc2l_star_game_result& from);

  inline packetc2l_star_game_result& operator=(const packetc2l_star_game_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_star_game_result& default_instance();

  void Swap(packetc2l_star_game_result* other);

  // implements Message ----------------------------------------------

  packetc2l_star_game_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_star_game_result& from);
  void MergeFrom(const packetc2l_star_game_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_star_game_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional int32 moneyType = 2;
  inline bool has_moneytype() const;
  inline void clear_moneytype();
  static const int kMoneyTypeFieldNumber = 2;
  inline ::google::protobuf::int32 moneytype() const;
  inline void set_moneytype(::google::protobuf::int32 value);

  // optional string imageArr = 3;
  inline bool has_imagearr() const;
  inline void clear_imagearr();
  static const int kImageArrFieldNumber = 3;
  inline const ::std::string& imagearr() const;
  inline void set_imagearr(const ::std::string& value);
  inline void set_imagearr(const char* value);
  inline void set_imagearr(const char* value, size_t size);
  inline ::std::string* mutable_imagearr();
  inline ::std::string* release_imagearr();
  inline void set_allocated_imagearr(::std::string* imagearr);

  // optional int32 winMoney = 4;
  inline bool has_winmoney() const;
  inline void clear_winmoney();
  static const int kWinMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 winmoney() const;
  inline void set_winmoney(::google::protobuf::int32 value);

  // optional int32 deductMoney = 5;
  inline bool has_deductmoney() const;
  inline void clear_deductmoney();
  static const int kDeductMoneyFieldNumber = 5;
  inline ::google::protobuf::int32 deductmoney() const;
  inline void set_deductmoney(::google::protobuf::int32 value);

  // optional int32 result = 6;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 6;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 curMoney = 7;
  inline bool has_curmoney() const;
  inline void clear_curmoney();
  static const int kCurMoneyFieldNumber = 7;
  inline ::google::protobuf::int32 curmoney() const;
  inline void set_curmoney(::google::protobuf::int32 value);

  // repeated .game_slothch_protocols.IconInfo icons = 8;
  inline int icons_size() const;
  inline void clear_icons();
  static const int kIconsFieldNumber = 8;
  inline const ::game_slothch_protocols::IconInfo& icons(int index) const;
  inline ::game_slothch_protocols::IconInfo* mutable_icons(int index);
  inline ::game_slothch_protocols::IconInfo* add_icons();
  inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::IconInfo >&
      icons() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::IconInfo >*
      mutable_icons();

  // optional bool freeCol = 9;
  inline bool has_freecol() const;
  inline void clear_freecol();
  static const int kFreeColFieldNumber = 9;
  inline bool freecol() const;
  inline void set_freecol(bool value);

  // optional int32 freeAdd = 10;
  inline bool has_freeadd() const;
  inline void clear_freeadd();
  static const int kFreeAddFieldNumber = 10;
  inline ::google::protobuf::int32 freeadd() const;
  inline void set_freeadd(::google::protobuf::int32 value);

  // optional bool lottery = 11;
  inline bool has_lottery() const;
  inline void clear_lottery();
  static const int kLotteryFieldNumber = 11;
  inline bool lottery() const;
  inline void set_lottery(bool value);

  // optional int64 freeEndGold = 12;
  inline bool has_freeendgold() const;
  inline void clear_freeendgold();
  static const int kFreeEndGoldFieldNumber = 12;
  inline ::google::protobuf::int64 freeendgold() const;
  inline void set_freeendgold(::google::protobuf::int64 value);

  // repeated .game_slothch_protocols.FreeInfo freeInfos = 13;
  inline int freeinfos_size() const;
  inline void clear_freeinfos();
  static const int kFreeInfosFieldNumber = 13;
  inline const ::game_slothch_protocols::FreeInfo& freeinfos(int index) const;
  inline ::game_slothch_protocols::FreeInfo* mutable_freeinfos(int index);
  inline ::game_slothch_protocols::FreeInfo* add_freeinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::FreeInfo >&
      freeinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::FreeInfo >*
      mutable_freeinfos();

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetc2l_star_game_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_moneytype();
  inline void clear_has_moneytype();
  inline void set_has_imagearr();
  inline void clear_has_imagearr();
  inline void set_has_winmoney();
  inline void clear_has_winmoney();
  inline void set_has_deductmoney();
  inline void clear_has_deductmoney();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_curmoney();
  inline void clear_has_curmoney();
  inline void set_has_freecol();
  inline void clear_has_freecol();
  inline void set_has_freeadd();
  inline void clear_has_freeadd();
  inline void set_has_lottery();
  inline void clear_has_lottery();
  inline void set_has_freeendgold();
  inline void clear_has_freeendgold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 moneytype_;
  ::std::string* imagearr_;
  ::google::protobuf::int32 winmoney_;
  ::google::protobuf::int32 deductmoney_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 curmoney_;
  ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::IconInfo > icons_;
  ::google::protobuf::int32 freeadd_;
  bool freecol_;
  bool lottery_;
  ::google::protobuf::int64 freeendgold_;
  ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::FreeInfo > freeinfos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_star_game_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_req_game_lottery_count : public ::google::protobuf::Message {
 public:
  packetc2l_req_game_lottery_count();
  virtual ~packetc2l_req_game_lottery_count();

  packetc2l_req_game_lottery_count(const packetc2l_req_game_lottery_count& from);

  inline packetc2l_req_game_lottery_count& operator=(const packetc2l_req_game_lottery_count& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_req_game_lottery_count& default_instance();

  void Swap(packetc2l_req_game_lottery_count* other);

  // implements Message ----------------------------------------------

  packetc2l_req_game_lottery_count* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_req_game_lottery_count& from);
  void MergeFrom(const packetc2l_req_game_lottery_count& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_game_lottery_count];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional int32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetc2l_req_game_lottery_count)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_req_game_lottery_count* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_req_game_lottery_count_result : public ::google::protobuf::Message {
 public:
  packetl2c_req_game_lottery_count_result();
  virtual ~packetl2c_req_game_lottery_count_result();

  packetl2c_req_game_lottery_count_result(const packetl2c_req_game_lottery_count_result& from);

  inline packetl2c_req_game_lottery_count_result& operator=(const packetl2c_req_game_lottery_count_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_req_game_lottery_count_result& default_instance();

  void Swap(packetl2c_req_game_lottery_count_result* other);

  // implements Message ----------------------------------------------

  packetl2c_req_game_lottery_count_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_req_game_lottery_count_result& from);
  void MergeFrom(const packetl2c_req_game_lottery_count_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_game_lottery_count_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional int32 icon = 4;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 4;
  inline ::google::protobuf::int32 icon() const;
  inline void set_icon(::google::protobuf::int32 value);

  // optional int32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetl2c_req_game_lottery_count_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 icon_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_req_game_lottery_count_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_req_game_lottery : public ::google::protobuf::Message {
 public:
  packetc2l_req_game_lottery();
  virtual ~packetc2l_req_game_lottery();

  packetc2l_req_game_lottery(const packetc2l_req_game_lottery& from);

  inline packetc2l_req_game_lottery& operator=(const packetc2l_req_game_lottery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_req_game_lottery& default_instance();

  void Swap(packetc2l_req_game_lottery* other);

  // implements Message ----------------------------------------------

  packetc2l_req_game_lottery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_req_game_lottery& from);
  void MergeFrom(const packetc2l_req_game_lottery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_game_lottery];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional int32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetc2l_req_game_lottery)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_req_game_lottery* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_req_game_lottery_result : public ::google::protobuf::Message {
 public:
  packetl2c_req_game_lottery_result();
  virtual ~packetl2c_req_game_lottery_result();

  packetl2c_req_game_lottery_result(const packetl2c_req_game_lottery_result& from);

  inline packetl2c_req_game_lottery_result& operator=(const packetl2c_req_game_lottery_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_req_game_lottery_result& default_instance();

  void Swap(packetl2c_req_game_lottery_result* other);

  // implements Message ----------------------------------------------

  packetl2c_req_game_lottery_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_req_game_lottery_result& from);
  void MergeFrom(const packetl2c_req_game_lottery_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_game_lottery_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional int32 icon = 4;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 4;
  inline ::google::protobuf::int32 icon() const;
  inline void set_icon(::google::protobuf::int32 value);

  // optional int64 reward = 5 [default = 0];
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 5;
  inline ::google::protobuf::int64 reward() const;
  inline void set_reward(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetl2c_req_game_lottery_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 icon_;
  ::google::protobuf::int64 reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_req_game_lottery_result* default_instance_;
};
// -------------------------------------------------------------------

class msg_lottery_info : public ::google::protobuf::Message {
 public:
  msg_lottery_info();
  virtual ~msg_lottery_info();

  msg_lottery_info(const msg_lottery_info& from);

  inline msg_lottery_info& operator=(const msg_lottery_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_lottery_info& default_instance();

  void Swap(msg_lottery_info* other);

  // implements Message ----------------------------------------------

  msg_lottery_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_lottery_info& from);
  void MergeFrom(const msg_lottery_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.msg_lottery_info)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_gold();
  inline void clear_has_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_lottery_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_lottery_update : public ::google::protobuf::Message {
 public:
  packetl2c_lottery_update();
  virtual ~packetl2c_lottery_update();

  packetl2c_lottery_update(const packetl2c_lottery_update& from);

  inline packetl2c_lottery_update& operator=(const packetl2c_lottery_update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_lottery_update& default_instance();

  void Swap(packetl2c_lottery_update* other);

  // implements Message ----------------------------------------------

  packetl2c_lottery_update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_lottery_update& from);
  void MergeFrom(const packetl2c_lottery_update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_lottery_update];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // repeated .game_slothch_protocols.msg_lottery_info infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::game_slothch_protocols::msg_lottery_info& infos(int index) const;
  inline ::game_slothch_protocols::msg_lottery_info* mutable_infos(int index);
  inline ::game_slothch_protocols::msg_lottery_info* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_lottery_info >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_lottery_info >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetl2c_lottery_update)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_lottery_info > infos_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_lottery_update* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_room_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_room_info();
  virtual ~packetc2l_get_room_info();

  packetc2l_get_room_info(const packetc2l_get_room_info& from);

  inline packetc2l_get_room_info& operator=(const packetc2l_get_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_room_info& default_instance();

  void Swap(packetc2l_get_room_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_room_info& from);
  void MergeFrom(const packetc2l_get_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetc2l_get_room_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_room_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_room_info : public ::google::protobuf::Message {
 public:
  msg_room_info();
  virtual ~msg_room_info();

  msg_room_info(const msg_room_info& from);

  inline msg_room_info& operator=(const msg_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_room_info& default_instance();

  void Swap(msg_room_info* other);

  // implements Message ----------------------------------------------

  msg_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_room_info& from);
  void MergeFrom(const msg_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.msg_room_info)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_get_room_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_get_room_info_result();
  virtual ~packetl2c_get_room_info_result();

  packetl2c_get_room_info_result(const packetl2c_get_room_info_result& from);

  inline packetl2c_get_room_info_result& operator=(const packetl2c_get_room_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_get_room_info_result& default_instance();

  void Swap(packetl2c_get_room_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_get_room_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_get_room_info_result& from);
  void MergeFrom(const packetl2c_get_room_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // repeated .game_slothch_protocols.msg_room_info rooms = 2;
  inline int rooms_size() const;
  inline void clear_rooms();
  static const int kRoomsFieldNumber = 2;
  inline const ::game_slothch_protocols::msg_room_info& rooms(int index) const;
  inline ::game_slothch_protocols::msg_room_info* mutable_rooms(int index);
  inline ::game_slothch_protocols::msg_room_info* add_rooms();
  inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_room_info >&
      rooms() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_room_info >*
      mutable_rooms();

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetl2c_get_room_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_room_info > rooms_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_get_room_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_enter_player_info : public ::google::protobuf::Message {
 public:
  packetl2c_enter_player_info();
  virtual ~packetl2c_enter_player_info();

  packetl2c_enter_player_info(const packetl2c_enter_player_info& from);

  inline packetl2c_enter_player_info& operator=(const packetl2c_enter_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_enter_player_info& default_instance();

  void Swap(packetl2c_enter_player_info* other);

  // implements Message ----------------------------------------------

  packetl2c_enter_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_enter_player_info& from);
  void MergeFrom(const packetl2c_enter_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_player_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional .game_slothch_protocols.msg_player_info player_info = 2;
  inline bool has_player_info() const;
  inline void clear_player_info();
  static const int kPlayerInfoFieldNumber = 2;
  inline const ::game_slothch_protocols::msg_player_info& player_info() const;
  inline ::game_slothch_protocols::msg_player_info* mutable_player_info();
  inline ::game_slothch_protocols::msg_player_info* release_player_info();
  inline void set_allocated_player_info(::game_slothch_protocols::msg_player_info* player_info);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetl2c_enter_player_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_info();
  inline void clear_has_player_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game_slothch_protocols::msg_player_info* player_info_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_enter_player_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_leave_player_info : public ::google::protobuf::Message {
 public:
  packetl2c_leave_player_info();
  virtual ~packetl2c_leave_player_info();

  packetl2c_leave_player_info(const packetl2c_leave_player_info& from);

  inline packetl2c_leave_player_info& operator=(const packetl2c_leave_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_leave_player_info& default_instance();

  void Swap(packetl2c_leave_player_info* other);

  // implements Message ----------------------------------------------

  packetl2c_leave_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_leave_player_info& from);
  void MergeFrom(const packetl2c_leave_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_player_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetl2c_leave_player_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_leave_player_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_player_change_money : public ::google::protobuf::Message {
 public:
  packetl2c_player_change_money();
  virtual ~packetl2c_player_change_money();

  packetl2c_player_change_money(const packetl2c_player_change_money& from);

  inline packetl2c_player_change_money& operator=(const packetl2c_player_change_money& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_player_change_money& default_instance();

  void Swap(packetl2c_player_change_money* other);

  // implements Message ----------------------------------------------

  packetl2c_player_change_money* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_player_change_money& from);
  void MergeFrom(const packetl2c_player_change_money& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_change_money];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int64 cur_money = 3;
  inline bool has_cur_money() const;
  inline void clear_cur_money();
  static const int kCurMoneyFieldNumber = 3;
  inline ::google::protobuf::int64 cur_money() const;
  inline void set_cur_money(::google::protobuf::int64 value);

  // optional int64 change_money = 4;
  inline bool has_change_money() const;
  inline void clear_change_money();
  static const int kChangeMoneyFieldNumber = 4;
  inline ::google::protobuf::int64 change_money() const;
  inline void set_change_money(::google::protobuf::int64 value);

  // optional bool b_free = 5;
  inline bool has_b_free() const;
  inline void clear_b_free();
  static const int kBFreeFieldNumber = 5;
  inline bool b_free() const;
  inline void set_b_free(bool value);

  // optional bool b_lottery = 6;
  inline bool has_b_lottery() const;
  inline void clear_b_lottery();
  static const int kBLotteryFieldNumber = 6;
  inline bool b_lottery() const;
  inline void set_b_lottery(bool value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetl2c_player_change_money)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_cur_money();
  inline void clear_has_cur_money();
  inline void set_has_change_money();
  inline void clear_has_change_money();
  inline void set_has_b_free();
  inline void clear_has_b_free();
  inline void set_has_b_lottery();
  inline void clear_has_b_lottery();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int64 cur_money_;
  ::google::protobuf::int64 change_money_;
  bool b_free_;
  bool b_lottery_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_player_change_money* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_change_attr : public ::google::protobuf::Message {
 public:
  packetl2c_bc_change_attr();
  virtual ~packetl2c_bc_change_attr();

  packetl2c_bc_change_attr(const packetl2c_bc_change_attr& from);

  inline packetl2c_bc_change_attr& operator=(const packetl2c_bc_change_attr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_change_attr& default_instance();

  void Swap(packetl2c_bc_change_attr* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_change_attr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_change_attr& from);
  void MergeFrom(const packetl2c_bc_change_attr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int32 item_type = 3;
  inline bool has_item_type() const;
  inline void clear_item_type();
  static const int kItemTypeFieldNumber = 3;
  inline ::google::protobuf::int32 item_type() const;
  inline void set_item_type(::google::protobuf::int32 value);

  // optional int64 change_value = 4;
  inline bool has_change_value() const;
  inline void clear_change_value();
  static const int kChangeValueFieldNumber = 4;
  inline ::google::protobuf::int64 change_value() const;
  inline void set_change_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetl2c_bc_change_attr)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_item_type();
  inline void clear_has_item_type();
  inline void set_has_change_value();
  inline void clear_has_change_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int64 change_value_;
  ::google::protobuf::int32 item_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_change_attr* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_supply_chip : public ::google::protobuf::Message {
 public:
  packetc2l_supply_chip();
  virtual ~packetc2l_supply_chip();

  packetc2l_supply_chip(const packetc2l_supply_chip& from);

  inline packetc2l_supply_chip& operator=(const packetc2l_supply_chip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_supply_chip& default_instance();

  void Swap(packetc2l_supply_chip* other);

  // implements Message ----------------------------------------------

  packetc2l_supply_chip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_supply_chip& from);
  void MergeFrom(const packetc2l_supply_chip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_supply_chip];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetc2l_supply_chip)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_supply_chip* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_supply_chip_result : public ::google::protobuf::Message {
 public:
  packetl2c_supply_chip_result();
  virtual ~packetl2c_supply_chip_result();

  packetl2c_supply_chip_result(const packetl2c_supply_chip_result& from);

  inline packetl2c_supply_chip_result& operator=(const packetl2c_supply_chip_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_supply_chip_result& default_instance();

  void Swap(packetl2c_supply_chip_result* other);

  // implements Message ----------------------------------------------

  packetl2c_supply_chip_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_supply_chip_result& from);
  void MergeFrom(const packetl2c_supply_chip_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_supply_chip_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int64 gold = 3;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 3;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetl2c_supply_chip_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gold();
  inline void clear_has_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int64 gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_supply_chip_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_room_scene_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_room_scene_info();
  virtual ~packetc2l_get_room_scene_info();

  packetc2l_get_room_scene_info(const packetc2l_get_room_scene_info& from);

  inline packetc2l_get_room_scene_info& operator=(const packetc2l_get_room_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_room_scene_info& default_instance();

  void Swap(packetc2l_get_room_scene_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_room_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_room_scene_info& from);
  void MergeFrom(const packetc2l_get_room_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetc2l_get_room_scene_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_room_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_get_room_scene_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_get_room_scene_info_result();
  virtual ~packetl2c_get_room_scene_info_result();

  packetl2c_get_room_scene_info_result(const packetl2c_get_room_scene_info_result& from);

  inline packetl2c_get_room_scene_info_result& operator=(const packetl2c_get_room_scene_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_get_room_scene_info_result& default_instance();

  void Swap(packetl2c_get_room_scene_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_get_room_scene_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_get_room_scene_info_result& from);
  void MergeFrom(const packetl2c_get_room_scene_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // repeated .game_slothch_protocols.msg_player_info player_list = 3;
  inline int player_list_size() const;
  inline void clear_player_list();
  static const int kPlayerListFieldNumber = 3;
  inline const ::game_slothch_protocols::msg_player_info& player_list(int index) const;
  inline ::game_slothch_protocols::msg_player_info* mutable_player_list(int index);
  inline ::game_slothch_protocols::msg_player_info* add_player_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_player_info >&
      player_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_player_info >*
      mutable_player_list();

  // optional int32 free_count = 4;
  inline bool has_free_count() const;
  inline void clear_free_count();
  static const int kFreeCountFieldNumber = 4;
  inline ::google::protobuf::int32 free_count() const;
  inline void set_free_count(::google::protobuf::int32 value);

  // repeated .game_slothch_protocols.msg_lottery_info infos = 5;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 5;
  inline const ::game_slothch_protocols::msg_lottery_info& infos(int index) const;
  inline ::game_slothch_protocols::msg_lottery_info* mutable_infos(int index);
  inline ::game_slothch_protocols::msg_lottery_info* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_lottery_info >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_lottery_info >*
      mutable_infos();

  // optional string last_name = 6;
  inline bool has_last_name() const;
  inline void clear_last_name();
  static const int kLastNameFieldNumber = 6;
  inline const ::std::string& last_name() const;
  inline void set_last_name(const ::std::string& value);
  inline void set_last_name(const char* value);
  inline void set_last_name(const char* value, size_t size);
  inline ::std::string* mutable_last_name();
  inline ::std::string* release_last_name();
  inline void set_allocated_last_name(::std::string* last_name);

  // optional int64 gold = 7;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 7;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int64 freeEndGold = 8;
  inline bool has_freeendgold() const;
  inline void clear_freeendgold();
  static const int kFreeEndGoldFieldNumber = 8;
  inline ::google::protobuf::int64 freeendgold() const;
  inline void set_freeendgold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetl2c_get_room_scene_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_free_count();
  inline void clear_has_free_count();
  inline void set_has_last_name();
  inline void clear_has_last_name();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_freeendgold();
  inline void clear_has_freeendgold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_player_info > player_list_;
  ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_lottery_info > infos_;
  ::std::string* last_name_;
  ::google::protobuf::int64 gold_;
  ::google::protobuf::int64 freeendgold_;
  ::google::protobuf::int32 free_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_get_room_scene_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_scene_sync : public ::google::protobuf::Message {
 public:
  packetl2c_scene_sync();
  virtual ~packetl2c_scene_sync();

  packetl2c_scene_sync(const packetl2c_scene_sync& from);

  inline packetl2c_scene_sync& operator=(const packetl2c_scene_sync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_scene_sync& default_instance();

  void Swap(packetl2c_scene_sync* other);

  // implements Message ----------------------------------------------

  packetl2c_scene_sync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_scene_sync& from);
  void MergeFrom(const packetl2c_scene_sync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_sync];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional string last_name = 2;
  inline bool has_last_name() const;
  inline void clear_last_name();
  static const int kLastNameFieldNumber = 2;
  inline const ::std::string& last_name() const;
  inline void set_last_name(const ::std::string& value);
  inline void set_last_name(const char* value);
  inline void set_last_name(const char* value, size_t size);
  inline ::std::string* mutable_last_name();
  inline ::std::string* release_last_name();
  inline void set_allocated_last_name(::std::string* last_name);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetl2c_scene_sync)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_last_name();
  inline void clear_has_last_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* last_name_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_scene_sync* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_settlement : public ::google::protobuf::Message {
 public:
  packetc2l_settlement();
  virtual ~packetc2l_settlement();

  packetc2l_settlement(const packetc2l_settlement& from);

  inline packetc2l_settlement& operator=(const packetc2l_settlement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_settlement& default_instance();

  void Swap(packetc2l_settlement* other);

  // implements Message ----------------------------------------------

  packetc2l_settlement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_settlement& from);
  void MergeFrom(const packetc2l_settlement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_settlement];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetc2l_settlement)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_settlement* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_settlement_result : public ::google::protobuf::Message {
 public:
  packetl2c_settlement_result();
  virtual ~packetl2c_settlement_result();

  packetl2c_settlement_result(const packetl2c_settlement_result& from);

  inline packetl2c_settlement_result& operator=(const packetl2c_settlement_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_settlement_result& default_instance();

  void Swap(packetl2c_settlement_result* other);

  // implements Message ----------------------------------------------

  packetl2c_settlement_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_settlement_result& from);
  void MergeFrom(const packetl2c_settlement_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_settlement_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int64 gold = 3;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 3;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetl2c_settlement_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gold();
  inline void clear_has_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int64 gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_settlement_result* default_instance_;
};
// -------------------------------------------------------------------

class replay_info : public ::google::protobuf::Message {
 public:
  replay_info();
  virtual ~replay_info();

  replay_info(const replay_info& from);

  inline replay_info& operator=(const replay_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const replay_info& default_instance();

  void Swap(replay_info* other);

  // implements Message ----------------------------------------------

  replay_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const replay_info& from);
  void MergeFrom(const replay_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string rid = 1;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 1;
  inline const ::std::string& rid() const;
  inline void set_rid(const ::std::string& value);
  inline void set_rid(const char* value);
  inline void set_rid(const char* value, size_t size);
  inline ::std::string* mutable_rid();
  inline ::std::string* release_rid();
  inline void set_allocated_rid(::std::string* rid);

  // optional int32 pid = 2;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 2;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);

  // optional string nick = 3;
  inline bool has_nick() const;
  inline void clear_nick();
  static const int kNickFieldNumber = 3;
  inline const ::std::string& nick() const;
  inline void set_nick(const ::std::string& value);
  inline void set_nick(const char* value);
  inline void set_nick(const char* value, size_t size);
  inline ::std::string* mutable_nick();
  inline ::std::string* release_nick();
  inline void set_allocated_nick(::std::string* nick);

  // optional int32 frame = 4;
  inline bool has_frame() const;
  inline void clear_frame();
  static const int kFrameFieldNumber = 4;
  inline ::google::protobuf::int32 frame() const;
  inline void set_frame(::google::protobuf::int32 value);

  // optional int64 winMoney = 5;
  inline bool has_winmoney() const;
  inline void clear_winmoney();
  static const int kWinMoneyFieldNumber = 5;
  inline ::google::protobuf::int64 winmoney() const;
  inline void set_winmoney(::google::protobuf::int64 value);

  // optional int64 deductMoney = 6;
  inline bool has_deductmoney() const;
  inline void clear_deductmoney();
  static const int kDeductMoneyFieldNumber = 6;
  inline ::google::protobuf::int64 deductmoney() const;
  inline void set_deductmoney(::google::protobuf::int64 value);

  // optional int64 curMoney = 7;
  inline bool has_curmoney() const;
  inline void clear_curmoney();
  static const int kCurMoneyFieldNumber = 7;
  inline ::google::protobuf::int64 curmoney() const;
  inline void set_curmoney(::google::protobuf::int64 value);

  // optional int64 win = 8;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 8;
  inline ::google::protobuf::int64 win() const;
  inline void set_win(::google::protobuf::int64 value);

  // optional int64 rate = 9;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 9;
  inline ::google::protobuf::int64 rate() const;
  inline void set_rate(::google::protobuf::int64 value);

  // optional string imageArr = 10;
  inline bool has_imagearr() const;
  inline void clear_imagearr();
  static const int kImageArrFieldNumber = 10;
  inline const ::std::string& imagearr() const;
  inline void set_imagearr(const ::std::string& value);
  inline void set_imagearr(const char* value);
  inline void set_imagearr(const char* value, size_t size);
  inline ::std::string* mutable_imagearr();
  inline ::std::string* release_imagearr();
  inline void set_allocated_imagearr(::std::string* imagearr);

  // repeated .game_slothch_protocols.IconInfo icons = 11;
  inline int icons_size() const;
  inline void clear_icons();
  static const int kIconsFieldNumber = 11;
  inline const ::game_slothch_protocols::IconInfo& icons(int index) const;
  inline ::game_slothch_protocols::IconInfo* mutable_icons(int index);
  inline ::game_slothch_protocols::IconInfo* add_icons();
  inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::IconInfo >&
      icons() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::IconInfo >*
      mutable_icons();

  // optional bool freeCol = 12;
  inline bool has_freecol() const;
  inline void clear_freecol();
  static const int kFreeColFieldNumber = 12;
  inline bool freecol() const;
  inline void set_freecol(bool value);

  // optional int32 freeCount = 13;
  inline bool has_freecount() const;
  inline void clear_freecount();
  static const int kFreeCountFieldNumber = 13;
  inline ::google::protobuf::int32 freecount() const;
  inline void set_freecount(::google::protobuf::int32 value);

  // optional int32 freeAdd = 14;
  inline bool has_freeadd() const;
  inline void clear_freeadd();
  static const int kFreeAddFieldNumber = 14;
  inline ::google::protobuf::int32 freeadd() const;
  inline void set_freeadd(::google::protobuf::int32 value);

  // optional int64 freeEndGold = 15;
  inline bool has_freeendgold() const;
  inline void clear_freeendgold();
  static const int kFreeEndGoldFieldNumber = 15;
  inline ::google::protobuf::int64 freeendgold() const;
  inline void set_freeendgold(::google::protobuf::int64 value);

  // optional int32 lotteryResult = 16 [default = -1];
  inline bool has_lotteryresult() const;
  inline void clear_lotteryresult();
  static const int kLotteryResultFieldNumber = 16;
  inline ::google::protobuf::int32 lotteryresult() const;
  inline void set_lotteryresult(::google::protobuf::int32 value);

  // optional int64 lotteryReward = 17 [default = 0];
  inline bool has_lotteryreward() const;
  inline void clear_lotteryreward();
  static const int kLotteryRewardFieldNumber = 17;
  inline ::google::protobuf::int64 lotteryreward() const;
  inline void set_lotteryreward(::google::protobuf::int64 value);

  // repeated int32 lotteryIcon = 18;
  inline int lotteryicon_size() const;
  inline void clear_lotteryicon();
  static const int kLotteryIconFieldNumber = 18;
  inline ::google::protobuf::int32 lotteryicon(int index) const;
  inline void set_lotteryicon(int index, ::google::protobuf::int32 value);
  inline void add_lotteryicon(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lotteryicon() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lotteryicon();

  // repeated int32 lotteryPos = 19;
  inline int lotterypos_size() const;
  inline void clear_lotterypos();
  static const int kLotteryPosFieldNumber = 19;
  inline ::google::protobuf::int32 lotterypos(int index) const;
  inline void set_lotterypos(int index, ::google::protobuf::int32 value);
  inline void add_lotterypos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lotterypos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lotterypos();

  // optional int32 playerCount = 20;
  inline bool has_playercount() const;
  inline void clear_playercount();
  static const int kPlayerCountFieldNumber = 20;
  inline ::google::protobuf::int32 playercount() const;
  inline void set_playercount(::google::protobuf::int32 value);

  // optional int32 ts = 21;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 21;
  inline ::google::protobuf::int32 ts() const;
  inline void set_ts(::google::protobuf::int32 value);

  // repeated .game_slothch_protocols.FreeInfo freeInfos = 22;
  inline int freeinfos_size() const;
  inline void clear_freeinfos();
  static const int kFreeInfosFieldNumber = 22;
  inline const ::game_slothch_protocols::FreeInfo& freeinfos(int index) const;
  inline ::game_slothch_protocols::FreeInfo* mutable_freeinfos(int index);
  inline ::game_slothch_protocols::FreeInfo* add_freeinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::FreeInfo >&
      freeinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::FreeInfo >*
      mutable_freeinfos();

  // optional int32 viplv = 23;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kViplvFieldNumber = 23;
  inline ::google::protobuf::int32 viplv() const;
  inline void set_viplv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.replay_info)
 private:
  inline void set_has_rid();
  inline void clear_has_rid();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_nick();
  inline void clear_has_nick();
  inline void set_has_frame();
  inline void clear_has_frame();
  inline void set_has_winmoney();
  inline void clear_has_winmoney();
  inline void set_has_deductmoney();
  inline void clear_has_deductmoney();
  inline void set_has_curmoney();
  inline void clear_has_curmoney();
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_imagearr();
  inline void clear_has_imagearr();
  inline void set_has_freecol();
  inline void clear_has_freecol();
  inline void set_has_freecount();
  inline void clear_has_freecount();
  inline void set_has_freeadd();
  inline void clear_has_freeadd();
  inline void set_has_freeendgold();
  inline void clear_has_freeendgold();
  inline void set_has_lotteryresult();
  inline void clear_has_lotteryresult();
  inline void set_has_lotteryreward();
  inline void clear_has_lotteryreward();
  inline void set_has_playercount();
  inline void clear_has_playercount();
  inline void set_has_ts();
  inline void clear_has_ts();
  inline void set_has_viplv();
  inline void clear_has_viplv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* rid_;
  ::std::string* nick_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 frame_;
  ::google::protobuf::int64 winmoney_;
  ::google::protobuf::int64 deductmoney_;
  ::google::protobuf::int64 curmoney_;
  ::google::protobuf::int64 win_;
  ::google::protobuf::int64 rate_;
  ::std::string* imagearr_;
  ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::IconInfo > icons_;
  bool freecol_;
  ::google::protobuf::int32 freecount_;
  ::google::protobuf::int64 freeendgold_;
  ::google::protobuf::int32 freeadd_;
  ::google::protobuf::int32 lotteryresult_;
  ::google::protobuf::int64 lotteryreward_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lotteryicon_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lotterypos_;
  ::google::protobuf::int32 playercount_;
  ::google::protobuf::int32 ts_;
  ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::FreeInfo > freeinfos_;
  ::google::protobuf::int32 viplv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static replay_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_replay_list : public ::google::protobuf::Message {
 public:
  packetl2c_replay_list();
  virtual ~packetl2c_replay_list();

  packetl2c_replay_list(const packetl2c_replay_list& from);

  inline packetl2c_replay_list& operator=(const packetl2c_replay_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_replay_list& default_instance();

  void Swap(packetl2c_replay_list* other);

  // implements Message ----------------------------------------------

  packetl2c_replay_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_replay_list& from);
  void MergeFrom(const packetl2c_replay_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_replay_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional int32 rtype = 2;
  inline bool has_rtype() const;
  inline void clear_rtype();
  static const int kRtypeFieldNumber = 2;
  inline ::google::protobuf::int32 rtype() const;
  inline void set_rtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetl2c_replay_list)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_rtype();
  inline void clear_has_rtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 rtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_replay_list* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_replay_list_result : public ::google::protobuf::Message {
 public:
  packetl2c_replay_list_result();
  virtual ~packetl2c_replay_list_result();

  packetl2c_replay_list_result(const packetl2c_replay_list_result& from);

  inline packetl2c_replay_list_result& operator=(const packetl2c_replay_list_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_replay_list_result& default_instance();

  void Swap(packetl2c_replay_list_result* other);

  // implements Message ----------------------------------------------

  packetl2c_replay_list_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_replay_list_result& from);
  void MergeFrom(const packetl2c_replay_list_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_replay_list_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional int32 rtype = 2;
  inline bool has_rtype() const;
  inline void clear_rtype();
  static const int kRtypeFieldNumber = 2;
  inline ::google::protobuf::int32 rtype() const;
  inline void set_rtype(::google::protobuf::int32 value);

  // repeated .game_slothch_protocols.replay_info replay_list = 3;
  inline int replay_list_size() const;
  inline void clear_replay_list();
  static const int kReplayListFieldNumber = 3;
  inline const ::game_slothch_protocols::replay_info& replay_list(int index) const;
  inline ::game_slothch_protocols::replay_info* mutable_replay_list(int index);
  inline ::game_slothch_protocols::replay_info* add_replay_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::replay_info >&
      replay_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::replay_info >*
      mutable_replay_list();

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetl2c_replay_list_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_rtype();
  inline void clear_has_rtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 rtype_;
  ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::replay_info > replay_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_replay_list_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_replay_detail : public ::google::protobuf::Message {
 public:
  packetl2c_replay_detail();
  virtual ~packetl2c_replay_detail();

  packetl2c_replay_detail(const packetl2c_replay_detail& from);

  inline packetl2c_replay_detail& operator=(const packetl2c_replay_detail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_replay_detail& default_instance();

  void Swap(packetl2c_replay_detail* other);

  // implements Message ----------------------------------------------

  packetl2c_replay_detail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_replay_detail& from);
  void MergeFrom(const packetl2c_replay_detail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_replay_detail];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional int32 rtype = 2;
  inline bool has_rtype() const;
  inline void clear_rtype();
  static const int kRtypeFieldNumber = 2;
  inline ::google::protobuf::int32 rtype() const;
  inline void set_rtype(::google::protobuf::int32 value);

  // optional string rid = 3;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 3;
  inline const ::std::string& rid() const;
  inline void set_rid(const ::std::string& value);
  inline void set_rid(const char* value);
  inline void set_rid(const char* value, size_t size);
  inline ::std::string* mutable_rid();
  inline ::std::string* release_rid();
  inline void set_allocated_rid(::std::string* rid);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetl2c_replay_detail)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_rtype();
  inline void clear_has_rtype();
  inline void set_has_rid();
  inline void clear_has_rid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 rtype_;
  ::std::string* rid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_replay_detail* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_replay_detail_result : public ::google::protobuf::Message {
 public:
  packetl2c_replay_detail_result();
  virtual ~packetl2c_replay_detail_result();

  packetl2c_replay_detail_result(const packetl2c_replay_detail_result& from);

  inline packetl2c_replay_detail_result& operator=(const packetl2c_replay_detail_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_replay_detail_result& default_instance();

  void Swap(packetl2c_replay_detail_result* other);

  // implements Message ----------------------------------------------

  packetl2c_replay_detail_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_replay_detail_result& from);
  void MergeFrom(const packetl2c_replay_detail_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_replay_detail_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 rtype = 3;
  inline bool has_rtype() const;
  inline void clear_rtype();
  static const int kRtypeFieldNumber = 3;
  inline ::google::protobuf::int32 rtype() const;
  inline void set_rtype(::google::protobuf::int32 value);

  // optional .game_slothch_protocols.replay_info replay = 4;
  inline bool has_replay() const;
  inline void clear_replay();
  static const int kReplayFieldNumber = 4;
  inline const ::game_slothch_protocols::replay_info& replay() const;
  inline ::game_slothch_protocols::replay_info* mutable_replay();
  inline ::game_slothch_protocols::replay_info* release_replay();
  inline void set_allocated_replay(::game_slothch_protocols::replay_info* replay);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetl2c_replay_detail_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_rtype();
  inline void clear_has_rtype();
  inline void set_has_replay();
  inline void clear_has_replay();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 result_;
  ::game_slothch_protocols::replay_info* replay_;
  ::google::protobuf::int32 rtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_replay_detail_result* default_instance_;
};
// -------------------------------------------------------------------

class room_player : public ::google::protobuf::Message {
 public:
  room_player();
  virtual ~room_player();

  room_player(const room_player& from);

  inline room_player& operator=(const room_player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const room_player& default_instance();

  void Swap(room_player* other);

  // implements Message ----------------------------------------------

  room_player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const room_player& from);
  void MergeFrom(const room_player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int64 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int64 bet = 3;
  inline bool has_bet() const;
  inline void clear_bet();
  static const int kBetFieldNumber = 3;
  inline ::google::protobuf::int64 bet() const;
  inline void set_bet(::google::protobuf::int64 value);

  // optional int64 profit_today = 4;
  inline bool has_profit_today() const;
  inline void clear_profit_today();
  static const int kProfitTodayFieldNumber = 4;
  inline ::google::protobuf::int64 profit_today() const;
  inline void set_profit_today(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.room_player)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_bet();
  inline void clear_has_bet();
  inline void set_has_profit_today();
  inline void clear_has_profit_today();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gold_;
  ::google::protobuf::int64 bet_;
  ::google::protobuf::int64 profit_today_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static room_player* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_gm_get_room_info : public ::google::protobuf::Message {
 public:
  packetl2c_gm_get_room_info();
  virtual ~packetl2c_gm_get_room_info();

  packetl2c_gm_get_room_info(const packetl2c_gm_get_room_info& from);

  inline packetl2c_gm_get_room_info& operator=(const packetl2c_gm_get_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_gm_get_room_info& default_instance();

  void Swap(packetl2c_gm_get_room_info* other);

  // implements Message ----------------------------------------------

  packetl2c_gm_get_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_gm_get_room_info& from);
  void MergeFrom(const packetl2c_gm_get_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_get_room_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetl2c_gm_get_room_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_gm_get_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_gm_get_room_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_gm_get_room_info_result();
  virtual ~packetl2c_gm_get_room_info_result();

  packetl2c_gm_get_room_info_result(const packetl2c_gm_get_room_info_result& from);

  inline packetl2c_gm_get_room_info_result& operator=(const packetl2c_gm_get_room_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_gm_get_room_info_result& default_instance();

  void Swap(packetl2c_gm_get_room_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_gm_get_room_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_gm_get_room_info_result& from);
  void MergeFrom(const packetl2c_gm_get_room_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_get_room_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 killcount = 3;
  inline bool has_killcount() const;
  inline void clear_killcount();
  static const int kKillcountFieldNumber = 3;
  inline ::google::protobuf::int32 killcount() const;
  inline void set_killcount(::google::protobuf::int32 value);

  // repeated .game_slothch_protocols.room_player players = 4;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 4;
  inline const ::game_slothch_protocols::room_player& players(int index) const;
  inline ::game_slothch_protocols::room_player* mutable_players(int index);
  inline ::game_slothch_protocols::room_player* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::room_player >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::room_player >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetl2c_gm_get_room_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_killcount();
  inline void clear_has_killcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::room_player > players_;
  ::google::protobuf::int32 killcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_gm_get_room_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_gm_do_kill : public ::google::protobuf::Message {
 public:
  packetl2c_gm_do_kill();
  virtual ~packetl2c_gm_do_kill();

  packetl2c_gm_do_kill(const packetl2c_gm_do_kill& from);

  inline packetl2c_gm_do_kill& operator=(const packetl2c_gm_do_kill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_gm_do_kill& default_instance();

  void Swap(packetl2c_gm_do_kill* other);

  // implements Message ----------------------------------------------

  packetl2c_gm_do_kill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_gm_do_kill& from);
  void MergeFrom(const packetl2c_gm_do_kill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_do_kill];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional int32 killcount = 2;
  inline bool has_killcount() const;
  inline void clear_killcount();
  static const int kKillcountFieldNumber = 2;
  inline ::google::protobuf::int32 killcount() const;
  inline void set_killcount(::google::protobuf::int32 value);

  // optional int32 pid = 3;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 3;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);

  // optional int32 free = 4;
  inline bool has_free() const;
  inline void clear_free();
  static const int kFreeFieldNumber = 4;
  inline ::google::protobuf::int32 free() const;
  inline void set_free(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetl2c_gm_do_kill)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_killcount();
  inline void clear_has_killcount();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_free();
  inline void clear_has_free();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 killcount_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 free_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_gm_do_kill* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_gm_do_kill_result : public ::google::protobuf::Message {
 public:
  packetl2c_gm_do_kill_result();
  virtual ~packetl2c_gm_do_kill_result();

  packetl2c_gm_do_kill_result(const packetl2c_gm_do_kill_result& from);

  inline packetl2c_gm_do_kill_result& operator=(const packetl2c_gm_do_kill_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_gm_do_kill_result& default_instance();

  void Swap(packetl2c_gm_do_kill_result* other);

  // implements Message ----------------------------------------------

  packetl2c_gm_do_kill_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_gm_do_kill_result& from);
  void MergeFrom(const packetl2c_gm_do_kill_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_do_kill_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_slothch_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_slothch_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_slothch_protocols.packetl2c_gm_do_kill_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fslothch_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fslothch_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_gm_do_kill_result* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2l_check_state

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
inline bool packetc2l_check_state::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_check_state::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_check_state::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_check_state::clear_packet_id() {
  packet_id_ = 10001;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetc2l_check_state::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_check_state::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_check_state_result

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
inline bool packetc2l_check_state_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_check_state_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_check_state_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_check_state_result::clear_packet_id() {
  packet_id_ = 15001;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetc2l_check_state_result::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_check_state_result::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 room_id = 2;
inline bool packetc2l_check_state_result::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_check_state_result::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_check_state_result::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_check_state_result::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetc2l_check_state_result::room_id() const {
  return room_id_;
}
inline void packetc2l_check_state_result::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_enter_game

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_game];
inline bool packetc2l_enter_game::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_enter_game::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_enter_game::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_enter_game::clear_packet_id() {
  packet_id_ = 10002;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetc2l_enter_game::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_enter_game::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 room_id = 2;
inline bool packetc2l_enter_game::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_enter_game::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_enter_game::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_enter_game::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetc2l_enter_game::room_id() const {
  return room_id_;
}
inline void packetc2l_enter_game::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_enter_game_result

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_game_result];
inline bool packetc2l_enter_game_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_enter_game_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_enter_game_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_enter_game_result::clear_packet_id() {
  packet_id_ = 15002;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetc2l_enter_game_result::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_enter_game_result::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 result = 2;
inline bool packetc2l_enter_game_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_enter_game_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_enter_game_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_enter_game_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetc2l_enter_game_result::result() const {
  return result_;
}
inline void packetc2l_enter_game_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 room_id = 3;
inline bool packetc2l_enter_game_result::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_enter_game_result::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_enter_game_result::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_enter_game_result::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetc2l_enter_game_result::room_id() const {
  return room_id_;
}
inline void packetc2l_enter_game_result::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// repeated .game_slothch_protocols.msg_player_info player_list = 4;
inline int packetc2l_enter_game_result::player_list_size() const {
  return player_list_.size();
}
inline void packetc2l_enter_game_result::clear_player_list() {
  player_list_.Clear();
}
inline const ::game_slothch_protocols::msg_player_info& packetc2l_enter_game_result::player_list(int index) const {
  return player_list_.Get(index);
}
inline ::game_slothch_protocols::msg_player_info* packetc2l_enter_game_result::mutable_player_list(int index) {
  return player_list_.Mutable(index);
}
inline ::game_slothch_protocols::msg_player_info* packetc2l_enter_game_result::add_player_list() {
  return player_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_player_info >&
packetc2l_enter_game_result::player_list() const {
  return player_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_player_info >*
packetc2l_enter_game_result::mutable_player_list() {
  return &player_list_;
}

// optional int32 free_count = 5;
inline bool packetc2l_enter_game_result::has_free_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetc2l_enter_game_result::set_has_free_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetc2l_enter_game_result::clear_has_free_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetc2l_enter_game_result::clear_free_count() {
  free_count_ = 0;
  clear_has_free_count();
}
inline ::google::protobuf::int32 packetc2l_enter_game_result::free_count() const {
  return free_count_;
}
inline void packetc2l_enter_game_result::set_free_count(::google::protobuf::int32 value) {
  set_has_free_count();
  free_count_ = value;
}

// repeated .game_slothch_protocols.msg_lottery_info infos = 6;
inline int packetc2l_enter_game_result::infos_size() const {
  return infos_.size();
}
inline void packetc2l_enter_game_result::clear_infos() {
  infos_.Clear();
}
inline const ::game_slothch_protocols::msg_lottery_info& packetc2l_enter_game_result::infos(int index) const {
  return infos_.Get(index);
}
inline ::game_slothch_protocols::msg_lottery_info* packetc2l_enter_game_result::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::game_slothch_protocols::msg_lottery_info* packetc2l_enter_game_result::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_lottery_info >&
packetc2l_enter_game_result::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_lottery_info >*
packetc2l_enter_game_result::mutable_infos() {
  return &infos_;
}

// optional string last_name = 7;
inline bool packetc2l_enter_game_result::has_last_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetc2l_enter_game_result::set_has_last_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetc2l_enter_game_result::clear_has_last_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetc2l_enter_game_result::clear_last_name() {
  if (last_name_ != &::google::protobuf::internal::kEmptyString) {
    last_name_->clear();
  }
  clear_has_last_name();
}
inline const ::std::string& packetc2l_enter_game_result::last_name() const {
  return *last_name_;
}
inline void packetc2l_enter_game_result::set_last_name(const ::std::string& value) {
  set_has_last_name();
  if (last_name_ == &::google::protobuf::internal::kEmptyString) {
    last_name_ = new ::std::string;
  }
  last_name_->assign(value);
}
inline void packetc2l_enter_game_result::set_last_name(const char* value) {
  set_has_last_name();
  if (last_name_ == &::google::protobuf::internal::kEmptyString) {
    last_name_ = new ::std::string;
  }
  last_name_->assign(value);
}
inline void packetc2l_enter_game_result::set_last_name(const char* value, size_t size) {
  set_has_last_name();
  if (last_name_ == &::google::protobuf::internal::kEmptyString) {
    last_name_ = new ::std::string;
  }
  last_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2l_enter_game_result::mutable_last_name() {
  set_has_last_name();
  if (last_name_ == &::google::protobuf::internal::kEmptyString) {
    last_name_ = new ::std::string;
  }
  return last_name_;
}
inline ::std::string* packetc2l_enter_game_result::release_last_name() {
  clear_has_last_name();
  if (last_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = last_name_;
    last_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2l_enter_game_result::set_allocated_last_name(::std::string* last_name) {
  if (last_name_ != &::google::protobuf::internal::kEmptyString) {
    delete last_name_;
  }
  if (last_name) {
    set_has_last_name();
    last_name_ = last_name;
  } else {
    clear_has_last_name();
    last_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 gold = 8;
inline bool packetc2l_enter_game_result::has_gold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void packetc2l_enter_game_result::set_has_gold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void packetc2l_enter_game_result::clear_has_gold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void packetc2l_enter_game_result::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 packetc2l_enter_game_result::gold() const {
  return gold_;
}
inline void packetc2l_enter_game_result::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// -------------------------------------------------------------------

// packetc2l_leave_game

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_game];
inline bool packetc2l_leave_game::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_leave_game::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_leave_game::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_leave_game::clear_packet_id() {
  packet_id_ = 10003;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetc2l_leave_game::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_leave_game::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 room_id = 2;
inline bool packetc2l_leave_game::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_leave_game::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_leave_game::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_leave_game::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetc2l_leave_game::room_id() const {
  return room_id_;
}
inline void packetc2l_leave_game::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_leave_game_result

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_game_result];
inline bool packetc2l_leave_game_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_leave_game_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_leave_game_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_leave_game_result::clear_packet_id() {
  packet_id_ = 15003;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetc2l_leave_game_result::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_leave_game_result::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 result = 2;
inline bool packetc2l_leave_game_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_leave_game_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_leave_game_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_leave_game_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetc2l_leave_game_result::result() const {
  return result_;
}
inline void packetc2l_leave_game_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int64 gold = 3;
inline bool packetc2l_leave_game_result::has_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_leave_game_result::set_has_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_leave_game_result::clear_has_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_leave_game_result::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 packetc2l_leave_game_result::gold() const {
  return gold_;
}
inline void packetc2l_leave_game_result::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// -------------------------------------------------------------------

// packetc2l_star_game

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_star_game];
inline bool packetc2l_star_game::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_star_game::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_star_game::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_star_game::clear_packet_id() {
  packet_id_ = 10004;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetc2l_star_game::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_star_game::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 rateIndex = 2;
inline bool packetc2l_star_game::has_rateindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_star_game::set_has_rateindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_star_game::clear_has_rateindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_star_game::clear_rateindex() {
  rateindex_ = 0;
  clear_has_rateindex();
}
inline ::google::protobuf::int32 packetc2l_star_game::rateindex() const {
  return rateindex_;
}
inline void packetc2l_star_game::set_rateindex(::google::protobuf::int32 value) {
  set_has_rateindex();
  rateindex_ = value;
}

// -------------------------------------------------------------------

// IconInfo

// optional int32 iconId = 1;
inline bool IconInfo::has_iconid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IconInfo::set_has_iconid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IconInfo::clear_has_iconid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IconInfo::clear_iconid() {
  iconid_ = 0;
  clear_has_iconid();
}
inline ::google::protobuf::int32 IconInfo::iconid() const {
  return iconid_;
}
inline void IconInfo::set_iconid(::google::protobuf::int32 value) {
  set_has_iconid();
  iconid_ = value;
}

// optional int32 len = 2;
inline bool IconInfo::has_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IconInfo::set_has_len() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IconInfo::clear_has_len() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IconInfo::clear_len() {
  len_ = 0;
  clear_has_len();
}
inline ::google::protobuf::int32 IconInfo::len() const {
  return len_;
}
inline void IconInfo::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
}

// optional int32 rate = 3;
inline bool IconInfo::has_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IconInfo::set_has_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IconInfo::clear_has_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IconInfo::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline ::google::protobuf::int32 IconInfo::rate() const {
  return rate_;
}
inline void IconInfo::set_rate(::google::protobuf::int32 value) {
  set_has_rate();
  rate_ = value;
}

// repeated int32 iconpos = 4;
inline int IconInfo::iconpos_size() const {
  return iconpos_.size();
}
inline void IconInfo::clear_iconpos() {
  iconpos_.Clear();
}
inline ::google::protobuf::int32 IconInfo::iconpos(int index) const {
  return iconpos_.Get(index);
}
inline void IconInfo::set_iconpos(int index, ::google::protobuf::int32 value) {
  iconpos_.Set(index, value);
}
inline void IconInfo::add_iconpos(::google::protobuf::int32 value) {
  iconpos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
IconInfo::iconpos() const {
  return iconpos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
IconInfo::mutable_iconpos() {
  return &iconpos_;
}

// -------------------------------------------------------------------

// FreeInfo

// optional string imageArr = 1;
inline bool FreeInfo::has_imagearr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FreeInfo::set_has_imagearr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FreeInfo::clear_has_imagearr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FreeInfo::clear_imagearr() {
  if (imagearr_ != &::google::protobuf::internal::kEmptyString) {
    imagearr_->clear();
  }
  clear_has_imagearr();
}
inline const ::std::string& FreeInfo::imagearr() const {
  return *imagearr_;
}
inline void FreeInfo::set_imagearr(const ::std::string& value) {
  set_has_imagearr();
  if (imagearr_ == &::google::protobuf::internal::kEmptyString) {
    imagearr_ = new ::std::string;
  }
  imagearr_->assign(value);
}
inline void FreeInfo::set_imagearr(const char* value) {
  set_has_imagearr();
  if (imagearr_ == &::google::protobuf::internal::kEmptyString) {
    imagearr_ = new ::std::string;
  }
  imagearr_->assign(value);
}
inline void FreeInfo::set_imagearr(const char* value, size_t size) {
  set_has_imagearr();
  if (imagearr_ == &::google::protobuf::internal::kEmptyString) {
    imagearr_ = new ::std::string;
  }
  imagearr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FreeInfo::mutable_imagearr() {
  set_has_imagearr();
  if (imagearr_ == &::google::protobuf::internal::kEmptyString) {
    imagearr_ = new ::std::string;
  }
  return imagearr_;
}
inline ::std::string* FreeInfo::release_imagearr() {
  clear_has_imagearr();
  if (imagearr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imagearr_;
    imagearr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FreeInfo::set_allocated_imagearr(::std::string* imagearr) {
  if (imagearr_ != &::google::protobuf::internal::kEmptyString) {
    delete imagearr_;
  }
  if (imagearr) {
    set_has_imagearr();
    imagearr_ = imagearr;
  } else {
    clear_has_imagearr();
    imagearr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 winMoney = 2;
inline bool FreeInfo::has_winmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FreeInfo::set_has_winmoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FreeInfo::clear_has_winmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FreeInfo::clear_winmoney() {
  winmoney_ = 0;
  clear_has_winmoney();
}
inline ::google::protobuf::int32 FreeInfo::winmoney() const {
  return winmoney_;
}
inline void FreeInfo::set_winmoney(::google::protobuf::int32 value) {
  set_has_winmoney();
  winmoney_ = value;
}

// repeated .game_slothch_protocols.IconInfo icons = 3;
inline int FreeInfo::icons_size() const {
  return icons_.size();
}
inline void FreeInfo::clear_icons() {
  icons_.Clear();
}
inline const ::game_slothch_protocols::IconInfo& FreeInfo::icons(int index) const {
  return icons_.Get(index);
}
inline ::game_slothch_protocols::IconInfo* FreeInfo::mutable_icons(int index) {
  return icons_.Mutable(index);
}
inline ::game_slothch_protocols::IconInfo* FreeInfo::add_icons() {
  return icons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::IconInfo >&
FreeInfo::icons() const {
  return icons_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::IconInfo >*
FreeInfo::mutable_icons() {
  return &icons_;
}

// optional bool freeCol = 4;
inline bool FreeInfo::has_freecol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FreeInfo::set_has_freecol() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FreeInfo::clear_has_freecol() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FreeInfo::clear_freecol() {
  freecol_ = false;
  clear_has_freecol();
}
inline bool FreeInfo::freecol() const {
  return freecol_;
}
inline void FreeInfo::set_freecol(bool value) {
  set_has_freecol();
  freecol_ = value;
}

// optional int32 freeAdd = 5;
inline bool FreeInfo::has_freeadd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FreeInfo::set_has_freeadd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FreeInfo::clear_has_freeadd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FreeInfo::clear_freeadd() {
  freeadd_ = 0;
  clear_has_freeadd();
}
inline ::google::protobuf::int32 FreeInfo::freeadd() const {
  return freeadd_;
}
inline void FreeInfo::set_freeadd(::google::protobuf::int32 value) {
  set_has_freeadd();
  freeadd_ = value;
}

// optional int64 freeEndGold = 6;
inline bool FreeInfo::has_freeendgold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FreeInfo::set_has_freeendgold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FreeInfo::clear_has_freeendgold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FreeInfo::clear_freeendgold() {
  freeendgold_ = GOOGLE_LONGLONG(0);
  clear_has_freeendgold();
}
inline ::google::protobuf::int64 FreeInfo::freeendgold() const {
  return freeendgold_;
}
inline void FreeInfo::set_freeendgold(::google::protobuf::int64 value) {
  set_has_freeendgold();
  freeendgold_ = value;
}

// -------------------------------------------------------------------

// packetc2l_star_game_result

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_star_game_result];
inline bool packetc2l_star_game_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_star_game_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_star_game_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_star_game_result::clear_packet_id() {
  packet_id_ = 15004;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetc2l_star_game_result::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_star_game_result::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 moneyType = 2;
inline bool packetc2l_star_game_result::has_moneytype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_star_game_result::set_has_moneytype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_star_game_result::clear_has_moneytype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_star_game_result::clear_moneytype() {
  moneytype_ = 0;
  clear_has_moneytype();
}
inline ::google::protobuf::int32 packetc2l_star_game_result::moneytype() const {
  return moneytype_;
}
inline void packetc2l_star_game_result::set_moneytype(::google::protobuf::int32 value) {
  set_has_moneytype();
  moneytype_ = value;
}

// optional string imageArr = 3;
inline bool packetc2l_star_game_result::has_imagearr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_star_game_result::set_has_imagearr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_star_game_result::clear_has_imagearr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_star_game_result::clear_imagearr() {
  if (imagearr_ != &::google::protobuf::internal::kEmptyString) {
    imagearr_->clear();
  }
  clear_has_imagearr();
}
inline const ::std::string& packetc2l_star_game_result::imagearr() const {
  return *imagearr_;
}
inline void packetc2l_star_game_result::set_imagearr(const ::std::string& value) {
  set_has_imagearr();
  if (imagearr_ == &::google::protobuf::internal::kEmptyString) {
    imagearr_ = new ::std::string;
  }
  imagearr_->assign(value);
}
inline void packetc2l_star_game_result::set_imagearr(const char* value) {
  set_has_imagearr();
  if (imagearr_ == &::google::protobuf::internal::kEmptyString) {
    imagearr_ = new ::std::string;
  }
  imagearr_->assign(value);
}
inline void packetc2l_star_game_result::set_imagearr(const char* value, size_t size) {
  set_has_imagearr();
  if (imagearr_ == &::google::protobuf::internal::kEmptyString) {
    imagearr_ = new ::std::string;
  }
  imagearr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2l_star_game_result::mutable_imagearr() {
  set_has_imagearr();
  if (imagearr_ == &::google::protobuf::internal::kEmptyString) {
    imagearr_ = new ::std::string;
  }
  return imagearr_;
}
inline ::std::string* packetc2l_star_game_result::release_imagearr() {
  clear_has_imagearr();
  if (imagearr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imagearr_;
    imagearr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2l_star_game_result::set_allocated_imagearr(::std::string* imagearr) {
  if (imagearr_ != &::google::protobuf::internal::kEmptyString) {
    delete imagearr_;
  }
  if (imagearr) {
    set_has_imagearr();
    imagearr_ = imagearr;
  } else {
    clear_has_imagearr();
    imagearr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 winMoney = 4;
inline bool packetc2l_star_game_result::has_winmoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetc2l_star_game_result::set_has_winmoney() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetc2l_star_game_result::clear_has_winmoney() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetc2l_star_game_result::clear_winmoney() {
  winmoney_ = 0;
  clear_has_winmoney();
}
inline ::google::protobuf::int32 packetc2l_star_game_result::winmoney() const {
  return winmoney_;
}
inline void packetc2l_star_game_result::set_winmoney(::google::protobuf::int32 value) {
  set_has_winmoney();
  winmoney_ = value;
}

// optional int32 deductMoney = 5;
inline bool packetc2l_star_game_result::has_deductmoney() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetc2l_star_game_result::set_has_deductmoney() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetc2l_star_game_result::clear_has_deductmoney() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetc2l_star_game_result::clear_deductmoney() {
  deductmoney_ = 0;
  clear_has_deductmoney();
}
inline ::google::protobuf::int32 packetc2l_star_game_result::deductmoney() const {
  return deductmoney_;
}
inline void packetc2l_star_game_result::set_deductmoney(::google::protobuf::int32 value) {
  set_has_deductmoney();
  deductmoney_ = value;
}

// optional int32 result = 6;
inline bool packetc2l_star_game_result::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetc2l_star_game_result::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetc2l_star_game_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetc2l_star_game_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetc2l_star_game_result::result() const {
  return result_;
}
inline void packetc2l_star_game_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 curMoney = 7;
inline bool packetc2l_star_game_result::has_curmoney() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetc2l_star_game_result::set_has_curmoney() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetc2l_star_game_result::clear_has_curmoney() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetc2l_star_game_result::clear_curmoney() {
  curmoney_ = 0;
  clear_has_curmoney();
}
inline ::google::protobuf::int32 packetc2l_star_game_result::curmoney() const {
  return curmoney_;
}
inline void packetc2l_star_game_result::set_curmoney(::google::protobuf::int32 value) {
  set_has_curmoney();
  curmoney_ = value;
}

// repeated .game_slothch_protocols.IconInfo icons = 8;
inline int packetc2l_star_game_result::icons_size() const {
  return icons_.size();
}
inline void packetc2l_star_game_result::clear_icons() {
  icons_.Clear();
}
inline const ::game_slothch_protocols::IconInfo& packetc2l_star_game_result::icons(int index) const {
  return icons_.Get(index);
}
inline ::game_slothch_protocols::IconInfo* packetc2l_star_game_result::mutable_icons(int index) {
  return icons_.Mutable(index);
}
inline ::game_slothch_protocols::IconInfo* packetc2l_star_game_result::add_icons() {
  return icons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::IconInfo >&
packetc2l_star_game_result::icons() const {
  return icons_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::IconInfo >*
packetc2l_star_game_result::mutable_icons() {
  return &icons_;
}

// optional bool freeCol = 9;
inline bool packetc2l_star_game_result::has_freecol() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void packetc2l_star_game_result::set_has_freecol() {
  _has_bits_[0] |= 0x00000100u;
}
inline void packetc2l_star_game_result::clear_has_freecol() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void packetc2l_star_game_result::clear_freecol() {
  freecol_ = false;
  clear_has_freecol();
}
inline bool packetc2l_star_game_result::freecol() const {
  return freecol_;
}
inline void packetc2l_star_game_result::set_freecol(bool value) {
  set_has_freecol();
  freecol_ = value;
}

// optional int32 freeAdd = 10;
inline bool packetc2l_star_game_result::has_freeadd() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void packetc2l_star_game_result::set_has_freeadd() {
  _has_bits_[0] |= 0x00000200u;
}
inline void packetc2l_star_game_result::clear_has_freeadd() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void packetc2l_star_game_result::clear_freeadd() {
  freeadd_ = 0;
  clear_has_freeadd();
}
inline ::google::protobuf::int32 packetc2l_star_game_result::freeadd() const {
  return freeadd_;
}
inline void packetc2l_star_game_result::set_freeadd(::google::protobuf::int32 value) {
  set_has_freeadd();
  freeadd_ = value;
}

// optional bool lottery = 11;
inline bool packetc2l_star_game_result::has_lottery() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void packetc2l_star_game_result::set_has_lottery() {
  _has_bits_[0] |= 0x00000400u;
}
inline void packetc2l_star_game_result::clear_has_lottery() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void packetc2l_star_game_result::clear_lottery() {
  lottery_ = false;
  clear_has_lottery();
}
inline bool packetc2l_star_game_result::lottery() const {
  return lottery_;
}
inline void packetc2l_star_game_result::set_lottery(bool value) {
  set_has_lottery();
  lottery_ = value;
}

// optional int64 freeEndGold = 12;
inline bool packetc2l_star_game_result::has_freeendgold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void packetc2l_star_game_result::set_has_freeendgold() {
  _has_bits_[0] |= 0x00000800u;
}
inline void packetc2l_star_game_result::clear_has_freeendgold() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void packetc2l_star_game_result::clear_freeendgold() {
  freeendgold_ = GOOGLE_LONGLONG(0);
  clear_has_freeendgold();
}
inline ::google::protobuf::int64 packetc2l_star_game_result::freeendgold() const {
  return freeendgold_;
}
inline void packetc2l_star_game_result::set_freeendgold(::google::protobuf::int64 value) {
  set_has_freeendgold();
  freeendgold_ = value;
}

// repeated .game_slothch_protocols.FreeInfo freeInfos = 13;
inline int packetc2l_star_game_result::freeinfos_size() const {
  return freeinfos_.size();
}
inline void packetc2l_star_game_result::clear_freeinfos() {
  freeinfos_.Clear();
}
inline const ::game_slothch_protocols::FreeInfo& packetc2l_star_game_result::freeinfos(int index) const {
  return freeinfos_.Get(index);
}
inline ::game_slothch_protocols::FreeInfo* packetc2l_star_game_result::mutable_freeinfos(int index) {
  return freeinfos_.Mutable(index);
}
inline ::game_slothch_protocols::FreeInfo* packetc2l_star_game_result::add_freeinfos() {
  return freeinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::FreeInfo >&
packetc2l_star_game_result::freeinfos() const {
  return freeinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::FreeInfo >*
packetc2l_star_game_result::mutable_freeinfos() {
  return &freeinfos_;
}

// -------------------------------------------------------------------

// packetc2l_req_game_lottery_count

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_game_lottery_count];
inline bool packetc2l_req_game_lottery_count::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_req_game_lottery_count::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_req_game_lottery_count::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_req_game_lottery_count::clear_packet_id() {
  packet_id_ = 10009;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetc2l_req_game_lottery_count::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_req_game_lottery_count::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 pos = 2;
inline bool packetc2l_req_game_lottery_count::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_req_game_lottery_count::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_req_game_lottery_count::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_req_game_lottery_count::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 packetc2l_req_game_lottery_count::pos() const {
  return pos_;
}
inline void packetc2l_req_game_lottery_count::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// packetl2c_req_game_lottery_count_result

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_game_lottery_count_result];
inline bool packetl2c_req_game_lottery_count_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_req_game_lottery_count_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_req_game_lottery_count_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_req_game_lottery_count_result::clear_packet_id() {
  packet_id_ = 15013;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetl2c_req_game_lottery_count_result::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_req_game_lottery_count_result::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_req_game_lottery_count_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_req_game_lottery_count_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_req_game_lottery_count_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_req_game_lottery_count_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_req_game_lottery_count_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_req_game_lottery_count_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 pos = 3;
inline bool packetl2c_req_game_lottery_count_result::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_req_game_lottery_count_result::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_req_game_lottery_count_result::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_req_game_lottery_count_result::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 packetl2c_req_game_lottery_count_result::pos() const {
  return pos_;
}
inline void packetl2c_req_game_lottery_count_result::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional int32 icon = 4;
inline bool packetl2c_req_game_lottery_count_result::has_icon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_req_game_lottery_count_result::set_has_icon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_req_game_lottery_count_result::clear_has_icon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_req_game_lottery_count_result::clear_icon() {
  icon_ = 0;
  clear_has_icon();
}
inline ::google::protobuf::int32 packetl2c_req_game_lottery_count_result::icon() const {
  return icon_;
}
inline void packetl2c_req_game_lottery_count_result::set_icon(::google::protobuf::int32 value) {
  set_has_icon();
  icon_ = value;
}

// optional int32 count = 5;
inline bool packetl2c_req_game_lottery_count_result::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_req_game_lottery_count_result::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_req_game_lottery_count_result::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_req_game_lottery_count_result::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 packetl2c_req_game_lottery_count_result::count() const {
  return count_;
}
inline void packetl2c_req_game_lottery_count_result::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// packetc2l_req_game_lottery

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_game_lottery];
inline bool packetc2l_req_game_lottery::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_req_game_lottery::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_req_game_lottery::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_req_game_lottery::clear_packet_id() {
  packet_id_ = 10008;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetc2l_req_game_lottery::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_req_game_lottery::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 pos = 2;
inline bool packetc2l_req_game_lottery::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_req_game_lottery::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_req_game_lottery::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_req_game_lottery::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 packetc2l_req_game_lottery::pos() const {
  return pos_;
}
inline void packetc2l_req_game_lottery::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// packetl2c_req_game_lottery_result

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_game_lottery_result];
inline bool packetl2c_req_game_lottery_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_req_game_lottery_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_req_game_lottery_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_req_game_lottery_result::clear_packet_id() {
  packet_id_ = 15012;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetl2c_req_game_lottery_result::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_req_game_lottery_result::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_req_game_lottery_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_req_game_lottery_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_req_game_lottery_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_req_game_lottery_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_req_game_lottery_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_req_game_lottery_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 pos = 3;
inline bool packetl2c_req_game_lottery_result::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_req_game_lottery_result::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_req_game_lottery_result::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_req_game_lottery_result::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 packetl2c_req_game_lottery_result::pos() const {
  return pos_;
}
inline void packetl2c_req_game_lottery_result::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional int32 icon = 4;
inline bool packetl2c_req_game_lottery_result::has_icon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_req_game_lottery_result::set_has_icon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_req_game_lottery_result::clear_has_icon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_req_game_lottery_result::clear_icon() {
  icon_ = 0;
  clear_has_icon();
}
inline ::google::protobuf::int32 packetl2c_req_game_lottery_result::icon() const {
  return icon_;
}
inline void packetl2c_req_game_lottery_result::set_icon(::google::protobuf::int32 value) {
  set_has_icon();
  icon_ = value;
}

// optional int64 reward = 5 [default = 0];
inline bool packetl2c_req_game_lottery_result::has_reward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_req_game_lottery_result::set_has_reward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_req_game_lottery_result::clear_has_reward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_req_game_lottery_result::clear_reward() {
  reward_ = GOOGLE_LONGLONG(0);
  clear_has_reward();
}
inline ::google::protobuf::int64 packetl2c_req_game_lottery_result::reward() const {
  return reward_;
}
inline void packetl2c_req_game_lottery_result::set_reward(::google::protobuf::int64 value) {
  set_has_reward();
  reward_ = value;
}

// -------------------------------------------------------------------

// msg_lottery_info

// optional int32 index = 1;
inline bool msg_lottery_info::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_lottery_info::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_lottery_info::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_lottery_info::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 msg_lottery_info::index() const {
  return index_;
}
inline void msg_lottery_info::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 gold = 2;
inline bool msg_lottery_info::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_lottery_info::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_lottery_info::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_lottery_info::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 msg_lottery_info::gold() const {
  return gold_;
}
inline void msg_lottery_info::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// -------------------------------------------------------------------

// packetl2c_lottery_update

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_lottery_update];
inline bool packetl2c_lottery_update::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_lottery_update::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_lottery_update::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_lottery_update::clear_packet_id() {
  packet_id_ = 15026;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetl2c_lottery_update::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_lottery_update::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_slothch_protocols.msg_lottery_info infos = 2;
inline int packetl2c_lottery_update::infos_size() const {
  return infos_.size();
}
inline void packetl2c_lottery_update::clear_infos() {
  infos_.Clear();
}
inline const ::game_slothch_protocols::msg_lottery_info& packetl2c_lottery_update::infos(int index) const {
  return infos_.Get(index);
}
inline ::game_slothch_protocols::msg_lottery_info* packetl2c_lottery_update::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::game_slothch_protocols::msg_lottery_info* packetl2c_lottery_update::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_lottery_info >&
packetl2c_lottery_update::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_lottery_info >*
packetl2c_lottery_update::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// packetc2l_get_room_info

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
inline bool packetc2l_get_room_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_room_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_room_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_room_info::clear_packet_id() {
  packet_id_ = 10007;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetc2l_get_room_info::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_room_info::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// msg_room_info

// optional int32 roomid = 1;
inline bool msg_room_info::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_room_info::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_room_info::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_room_info::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 msg_room_info::roomid() const {
  return roomid_;
}
inline void msg_room_info::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// packetl2c_get_room_info_result

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
inline bool packetl2c_get_room_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_get_room_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_get_room_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_get_room_info_result::clear_packet_id() {
  packet_id_ = 15007;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetl2c_get_room_info_result::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_get_room_info_result::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_slothch_protocols.msg_room_info rooms = 2;
inline int packetl2c_get_room_info_result::rooms_size() const {
  return rooms_.size();
}
inline void packetl2c_get_room_info_result::clear_rooms() {
  rooms_.Clear();
}
inline const ::game_slothch_protocols::msg_room_info& packetl2c_get_room_info_result::rooms(int index) const {
  return rooms_.Get(index);
}
inline ::game_slothch_protocols::msg_room_info* packetl2c_get_room_info_result::mutable_rooms(int index) {
  return rooms_.Mutable(index);
}
inline ::game_slothch_protocols::msg_room_info* packetl2c_get_room_info_result::add_rooms() {
  return rooms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_room_info >&
packetl2c_get_room_info_result::rooms() const {
  return rooms_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_room_info >*
packetl2c_get_room_info_result::mutable_rooms() {
  return &rooms_;
}

// -------------------------------------------------------------------

// packetl2c_enter_player_info

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_player_info];
inline bool packetl2c_enter_player_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_enter_player_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_enter_player_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_enter_player_info::clear_packet_id() {
  packet_id_ = 15008;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetl2c_enter_player_info::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_enter_player_info::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_slothch_protocols.msg_player_info player_info = 2;
inline bool packetl2c_enter_player_info::has_player_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_enter_player_info::set_has_player_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_enter_player_info::clear_has_player_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_enter_player_info::clear_player_info() {
  if (player_info_ != NULL) player_info_->::game_slothch_protocols::msg_player_info::Clear();
  clear_has_player_info();
}
inline const ::game_slothch_protocols::msg_player_info& packetl2c_enter_player_info::player_info() const {
  return player_info_ != NULL ? *player_info_ : *default_instance_->player_info_;
}
inline ::game_slothch_protocols::msg_player_info* packetl2c_enter_player_info::mutable_player_info() {
  set_has_player_info();
  if (player_info_ == NULL) player_info_ = new ::game_slothch_protocols::msg_player_info;
  return player_info_;
}
inline ::game_slothch_protocols::msg_player_info* packetl2c_enter_player_info::release_player_info() {
  clear_has_player_info();
  ::game_slothch_protocols::msg_player_info* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
inline void packetl2c_enter_player_info::set_allocated_player_info(::game_slothch_protocols::msg_player_info* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    set_has_player_info();
  } else {
    clear_has_player_info();
  }
}

// -------------------------------------------------------------------

// packetl2c_leave_player_info

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_player_info];
inline bool packetl2c_leave_player_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_leave_player_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_leave_player_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_leave_player_info::clear_packet_id() {
  packet_id_ = 15009;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetl2c_leave_player_info::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_leave_player_info::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_leave_player_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_leave_player_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_leave_player_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_leave_player_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_leave_player_info::player_id() const {
  return player_id_;
}
inline void packetl2c_leave_player_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_player_change_money

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_change_money];
inline bool packetl2c_player_change_money::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_player_change_money::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_player_change_money::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_player_change_money::clear_packet_id() {
  packet_id_ = 15010;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetl2c_player_change_money::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_player_change_money::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_player_change_money::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_player_change_money::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_player_change_money::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_player_change_money::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_player_change_money::player_id() const {
  return player_id_;
}
inline void packetl2c_player_change_money::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int64 cur_money = 3;
inline bool packetl2c_player_change_money::has_cur_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_player_change_money::set_has_cur_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_player_change_money::clear_has_cur_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_player_change_money::clear_cur_money() {
  cur_money_ = GOOGLE_LONGLONG(0);
  clear_has_cur_money();
}
inline ::google::protobuf::int64 packetl2c_player_change_money::cur_money() const {
  return cur_money_;
}
inline void packetl2c_player_change_money::set_cur_money(::google::protobuf::int64 value) {
  set_has_cur_money();
  cur_money_ = value;
}

// optional int64 change_money = 4;
inline bool packetl2c_player_change_money::has_change_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_player_change_money::set_has_change_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_player_change_money::clear_has_change_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_player_change_money::clear_change_money() {
  change_money_ = GOOGLE_LONGLONG(0);
  clear_has_change_money();
}
inline ::google::protobuf::int64 packetl2c_player_change_money::change_money() const {
  return change_money_;
}
inline void packetl2c_player_change_money::set_change_money(::google::protobuf::int64 value) {
  set_has_change_money();
  change_money_ = value;
}

// optional bool b_free = 5;
inline bool packetl2c_player_change_money::has_b_free() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_player_change_money::set_has_b_free() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_player_change_money::clear_has_b_free() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_player_change_money::clear_b_free() {
  b_free_ = false;
  clear_has_b_free();
}
inline bool packetl2c_player_change_money::b_free() const {
  return b_free_;
}
inline void packetl2c_player_change_money::set_b_free(bool value) {
  set_has_b_free();
  b_free_ = value;
}

// optional bool b_lottery = 6;
inline bool packetl2c_player_change_money::has_b_lottery() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_player_change_money::set_has_b_lottery() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_player_change_money::clear_has_b_lottery() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_player_change_money::clear_b_lottery() {
  b_lottery_ = false;
  clear_has_b_lottery();
}
inline bool packetl2c_player_change_money::b_lottery() const {
  return b_lottery_;
}
inline void packetl2c_player_change_money::set_b_lottery(bool value) {
  set_has_b_lottery();
  b_lottery_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_change_attr

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
inline bool packetl2c_bc_change_attr::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_change_attr::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_change_attr::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_change_attr::clear_packet_id() {
  packet_id_ = 15011;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetl2c_bc_change_attr::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_change_attr::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_bc_change_attr::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_change_attr::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_change_attr::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_change_attr::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_change_attr::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_change_attr::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 item_type = 3;
inline bool packetl2c_bc_change_attr::has_item_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_change_attr::set_has_item_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_change_attr::clear_has_item_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_change_attr::clear_item_type() {
  item_type_ = 0;
  clear_has_item_type();
}
inline ::google::protobuf::int32 packetl2c_bc_change_attr::item_type() const {
  return item_type_;
}
inline void packetl2c_bc_change_attr::set_item_type(::google::protobuf::int32 value) {
  set_has_item_type();
  item_type_ = value;
}

// optional int64 change_value = 4;
inline bool packetl2c_bc_change_attr::has_change_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_bc_change_attr::set_has_change_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_bc_change_attr::clear_has_change_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_bc_change_attr::clear_change_value() {
  change_value_ = GOOGLE_LONGLONG(0);
  clear_has_change_value();
}
inline ::google::protobuf::int64 packetl2c_bc_change_attr::change_value() const {
  return change_value_;
}
inline void packetl2c_bc_change_attr::set_change_value(::google::protobuf::int64 value) {
  set_has_change_value();
  change_value_ = value;
}

// -------------------------------------------------------------------

// packetc2l_supply_chip

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_supply_chip];
inline bool packetc2l_supply_chip::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_supply_chip::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_supply_chip::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_supply_chip::clear_packet_id() {
  packet_id_ = 10021;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetc2l_supply_chip::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_supply_chip::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_supply_chip_result

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_supply_chip_result];
inline bool packetl2c_supply_chip_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_supply_chip_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_supply_chip_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_supply_chip_result::clear_packet_id() {
  packet_id_ = 15021;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetl2c_supply_chip_result::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_supply_chip_result::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_supply_chip_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_supply_chip_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_supply_chip_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_supply_chip_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_supply_chip_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_supply_chip_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int64 gold = 3;
inline bool packetl2c_supply_chip_result::has_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_supply_chip_result::set_has_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_supply_chip_result::clear_has_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_supply_chip_result::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 packetl2c_supply_chip_result::gold() const {
  return gold_;
}
inline void packetl2c_supply_chip_result::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// -------------------------------------------------------------------

// packetc2l_get_room_scene_info

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
inline bool packetc2l_get_room_scene_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_room_scene_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_room_scene_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_room_scene_info::clear_packet_id() {
  packet_id_ = 10022;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetc2l_get_room_scene_info::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_room_scene_info::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_get_room_scene_info_result

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
inline bool packetl2c_get_room_scene_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_get_room_scene_info_result::clear_packet_id() {
  packet_id_ = 15022;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetl2c_get_room_scene_info_result::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_get_room_scene_info_result::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 room_id = 2;
inline bool packetl2c_get_room_scene_info_result::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_get_room_scene_info_result::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::room_id() const {
  return room_id_;
}
inline void packetl2c_get_room_scene_info_result::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// repeated .game_slothch_protocols.msg_player_info player_list = 3;
inline int packetl2c_get_room_scene_info_result::player_list_size() const {
  return player_list_.size();
}
inline void packetl2c_get_room_scene_info_result::clear_player_list() {
  player_list_.Clear();
}
inline const ::game_slothch_protocols::msg_player_info& packetl2c_get_room_scene_info_result::player_list(int index) const {
  return player_list_.Get(index);
}
inline ::game_slothch_protocols::msg_player_info* packetl2c_get_room_scene_info_result::mutable_player_list(int index) {
  return player_list_.Mutable(index);
}
inline ::game_slothch_protocols::msg_player_info* packetl2c_get_room_scene_info_result::add_player_list() {
  return player_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_player_info >&
packetl2c_get_room_scene_info_result::player_list() const {
  return player_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_player_info >*
packetl2c_get_room_scene_info_result::mutable_player_list() {
  return &player_list_;
}

// optional int32 free_count = 4;
inline bool packetl2c_get_room_scene_info_result::has_free_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_free_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_free_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_get_room_scene_info_result::clear_free_count() {
  free_count_ = 0;
  clear_has_free_count();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::free_count() const {
  return free_count_;
}
inline void packetl2c_get_room_scene_info_result::set_free_count(::google::protobuf::int32 value) {
  set_has_free_count();
  free_count_ = value;
}

// repeated .game_slothch_protocols.msg_lottery_info infos = 5;
inline int packetl2c_get_room_scene_info_result::infos_size() const {
  return infos_.size();
}
inline void packetl2c_get_room_scene_info_result::clear_infos() {
  infos_.Clear();
}
inline const ::game_slothch_protocols::msg_lottery_info& packetl2c_get_room_scene_info_result::infos(int index) const {
  return infos_.Get(index);
}
inline ::game_slothch_protocols::msg_lottery_info* packetl2c_get_room_scene_info_result::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::game_slothch_protocols::msg_lottery_info* packetl2c_get_room_scene_info_result::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_lottery_info >&
packetl2c_get_room_scene_info_result::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::msg_lottery_info >*
packetl2c_get_room_scene_info_result::mutable_infos() {
  return &infos_;
}

// optional string last_name = 6;
inline bool packetl2c_get_room_scene_info_result::has_last_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_last_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_last_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_get_room_scene_info_result::clear_last_name() {
  if (last_name_ != &::google::protobuf::internal::kEmptyString) {
    last_name_->clear();
  }
  clear_has_last_name();
}
inline const ::std::string& packetl2c_get_room_scene_info_result::last_name() const {
  return *last_name_;
}
inline void packetl2c_get_room_scene_info_result::set_last_name(const ::std::string& value) {
  set_has_last_name();
  if (last_name_ == &::google::protobuf::internal::kEmptyString) {
    last_name_ = new ::std::string;
  }
  last_name_->assign(value);
}
inline void packetl2c_get_room_scene_info_result::set_last_name(const char* value) {
  set_has_last_name();
  if (last_name_ == &::google::protobuf::internal::kEmptyString) {
    last_name_ = new ::std::string;
  }
  last_name_->assign(value);
}
inline void packetl2c_get_room_scene_info_result::set_last_name(const char* value, size_t size) {
  set_has_last_name();
  if (last_name_ == &::google::protobuf::internal::kEmptyString) {
    last_name_ = new ::std::string;
  }
  last_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetl2c_get_room_scene_info_result::mutable_last_name() {
  set_has_last_name();
  if (last_name_ == &::google::protobuf::internal::kEmptyString) {
    last_name_ = new ::std::string;
  }
  return last_name_;
}
inline ::std::string* packetl2c_get_room_scene_info_result::release_last_name() {
  clear_has_last_name();
  if (last_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = last_name_;
    last_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetl2c_get_room_scene_info_result::set_allocated_last_name(::std::string* last_name) {
  if (last_name_ != &::google::protobuf::internal::kEmptyString) {
    delete last_name_;
  }
  if (last_name) {
    set_has_last_name();
    last_name_ = last_name;
  } else {
    clear_has_last_name();
    last_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 gold = 7;
inline bool packetl2c_get_room_scene_info_result::has_gold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_gold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_gold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetl2c_get_room_scene_info_result::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 packetl2c_get_room_scene_info_result::gold() const {
  return gold_;
}
inline void packetl2c_get_room_scene_info_result::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional int64 freeEndGold = 8;
inline bool packetl2c_get_room_scene_info_result::has_freeendgold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_freeendgold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_freeendgold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void packetl2c_get_room_scene_info_result::clear_freeendgold() {
  freeendgold_ = GOOGLE_LONGLONG(0);
  clear_has_freeendgold();
}
inline ::google::protobuf::int64 packetl2c_get_room_scene_info_result::freeendgold() const {
  return freeendgold_;
}
inline void packetl2c_get_room_scene_info_result::set_freeendgold(::google::protobuf::int64 value) {
  set_has_freeendgold();
  freeendgold_ = value;
}

// -------------------------------------------------------------------

// packetl2c_scene_sync

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_sync];
inline bool packetl2c_scene_sync::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_scene_sync::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_scene_sync::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_scene_sync::clear_packet_id() {
  packet_id_ = 15027;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetl2c_scene_sync::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_scene_sync::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional string last_name = 2;
inline bool packetl2c_scene_sync::has_last_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_scene_sync::set_has_last_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_scene_sync::clear_has_last_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_scene_sync::clear_last_name() {
  if (last_name_ != &::google::protobuf::internal::kEmptyString) {
    last_name_->clear();
  }
  clear_has_last_name();
}
inline const ::std::string& packetl2c_scene_sync::last_name() const {
  return *last_name_;
}
inline void packetl2c_scene_sync::set_last_name(const ::std::string& value) {
  set_has_last_name();
  if (last_name_ == &::google::protobuf::internal::kEmptyString) {
    last_name_ = new ::std::string;
  }
  last_name_->assign(value);
}
inline void packetl2c_scene_sync::set_last_name(const char* value) {
  set_has_last_name();
  if (last_name_ == &::google::protobuf::internal::kEmptyString) {
    last_name_ = new ::std::string;
  }
  last_name_->assign(value);
}
inline void packetl2c_scene_sync::set_last_name(const char* value, size_t size) {
  set_has_last_name();
  if (last_name_ == &::google::protobuf::internal::kEmptyString) {
    last_name_ = new ::std::string;
  }
  last_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetl2c_scene_sync::mutable_last_name() {
  set_has_last_name();
  if (last_name_ == &::google::protobuf::internal::kEmptyString) {
    last_name_ = new ::std::string;
  }
  return last_name_;
}
inline ::std::string* packetl2c_scene_sync::release_last_name() {
  clear_has_last_name();
  if (last_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = last_name_;
    last_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetl2c_scene_sync::set_allocated_last_name(::std::string* last_name) {
  if (last_name_ != &::google::protobuf::internal::kEmptyString) {
    delete last_name_;
  }
  if (last_name) {
    set_has_last_name();
    last_name_ = last_name;
  } else {
    clear_has_last_name();
    last_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetc2l_settlement

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_settlement];
inline bool packetc2l_settlement::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_settlement::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_settlement::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_settlement::clear_packet_id() {
  packet_id_ = 10023;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetc2l_settlement::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_settlement::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_settlement_result

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_settlement_result];
inline bool packetl2c_settlement_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_settlement_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_settlement_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_settlement_result::clear_packet_id() {
  packet_id_ = 15023;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetl2c_settlement_result::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_settlement_result::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 result = 2;
inline bool packetl2c_settlement_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_settlement_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_settlement_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_settlement_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetl2c_settlement_result::result() const {
  return result_;
}
inline void packetl2c_settlement_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int64 gold = 3;
inline bool packetl2c_settlement_result::has_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_settlement_result::set_has_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_settlement_result::clear_has_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_settlement_result::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 packetl2c_settlement_result::gold() const {
  return gold_;
}
inline void packetl2c_settlement_result::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// -------------------------------------------------------------------

// replay_info

// optional string rid = 1;
inline bool replay_info::has_rid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void replay_info::set_has_rid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void replay_info::clear_has_rid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void replay_info::clear_rid() {
  if (rid_ != &::google::protobuf::internal::kEmptyString) {
    rid_->clear();
  }
  clear_has_rid();
}
inline const ::std::string& replay_info::rid() const {
  return *rid_;
}
inline void replay_info::set_rid(const ::std::string& value) {
  set_has_rid();
  if (rid_ == &::google::protobuf::internal::kEmptyString) {
    rid_ = new ::std::string;
  }
  rid_->assign(value);
}
inline void replay_info::set_rid(const char* value) {
  set_has_rid();
  if (rid_ == &::google::protobuf::internal::kEmptyString) {
    rid_ = new ::std::string;
  }
  rid_->assign(value);
}
inline void replay_info::set_rid(const char* value, size_t size) {
  set_has_rid();
  if (rid_ == &::google::protobuf::internal::kEmptyString) {
    rid_ = new ::std::string;
  }
  rid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* replay_info::mutable_rid() {
  set_has_rid();
  if (rid_ == &::google::protobuf::internal::kEmptyString) {
    rid_ = new ::std::string;
  }
  return rid_;
}
inline ::std::string* replay_info::release_rid() {
  clear_has_rid();
  if (rid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rid_;
    rid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void replay_info::set_allocated_rid(::std::string* rid) {
  if (rid_ != &::google::protobuf::internal::kEmptyString) {
    delete rid_;
  }
  if (rid) {
    set_has_rid();
    rid_ = rid;
  } else {
    clear_has_rid();
    rid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 pid = 2;
inline bool replay_info::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void replay_info::set_has_pid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void replay_info::clear_has_pid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void replay_info::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 replay_info::pid() const {
  return pid_;
}
inline void replay_info::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
}

// optional string nick = 3;
inline bool replay_info::has_nick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void replay_info::set_has_nick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void replay_info::clear_has_nick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void replay_info::clear_nick() {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    nick_->clear();
  }
  clear_has_nick();
}
inline const ::std::string& replay_info::nick() const {
  return *nick_;
}
inline void replay_info::set_nick(const ::std::string& value) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
}
inline void replay_info::set_nick(const char* value) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
}
inline void replay_info::set_nick(const char* value, size_t size) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  nick_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* replay_info::mutable_nick() {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  return nick_;
}
inline ::std::string* replay_info::release_nick() {
  clear_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_;
    nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void replay_info::set_allocated_nick(::std::string* nick) {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (nick) {
    set_has_nick();
    nick_ = nick;
  } else {
    clear_has_nick();
    nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 frame = 4;
inline bool replay_info::has_frame() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void replay_info::set_has_frame() {
  _has_bits_[0] |= 0x00000008u;
}
inline void replay_info::clear_has_frame() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void replay_info::clear_frame() {
  frame_ = 0;
  clear_has_frame();
}
inline ::google::protobuf::int32 replay_info::frame() const {
  return frame_;
}
inline void replay_info::set_frame(::google::protobuf::int32 value) {
  set_has_frame();
  frame_ = value;
}

// optional int64 winMoney = 5;
inline bool replay_info::has_winmoney() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void replay_info::set_has_winmoney() {
  _has_bits_[0] |= 0x00000010u;
}
inline void replay_info::clear_has_winmoney() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void replay_info::clear_winmoney() {
  winmoney_ = GOOGLE_LONGLONG(0);
  clear_has_winmoney();
}
inline ::google::protobuf::int64 replay_info::winmoney() const {
  return winmoney_;
}
inline void replay_info::set_winmoney(::google::protobuf::int64 value) {
  set_has_winmoney();
  winmoney_ = value;
}

// optional int64 deductMoney = 6;
inline bool replay_info::has_deductmoney() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void replay_info::set_has_deductmoney() {
  _has_bits_[0] |= 0x00000020u;
}
inline void replay_info::clear_has_deductmoney() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void replay_info::clear_deductmoney() {
  deductmoney_ = GOOGLE_LONGLONG(0);
  clear_has_deductmoney();
}
inline ::google::protobuf::int64 replay_info::deductmoney() const {
  return deductmoney_;
}
inline void replay_info::set_deductmoney(::google::protobuf::int64 value) {
  set_has_deductmoney();
  deductmoney_ = value;
}

// optional int64 curMoney = 7;
inline bool replay_info::has_curmoney() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void replay_info::set_has_curmoney() {
  _has_bits_[0] |= 0x00000040u;
}
inline void replay_info::clear_has_curmoney() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void replay_info::clear_curmoney() {
  curmoney_ = GOOGLE_LONGLONG(0);
  clear_has_curmoney();
}
inline ::google::protobuf::int64 replay_info::curmoney() const {
  return curmoney_;
}
inline void replay_info::set_curmoney(::google::protobuf::int64 value) {
  set_has_curmoney();
  curmoney_ = value;
}

// optional int64 win = 8;
inline bool replay_info::has_win() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void replay_info::set_has_win() {
  _has_bits_[0] |= 0x00000080u;
}
inline void replay_info::clear_has_win() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void replay_info::clear_win() {
  win_ = GOOGLE_LONGLONG(0);
  clear_has_win();
}
inline ::google::protobuf::int64 replay_info::win() const {
  return win_;
}
inline void replay_info::set_win(::google::protobuf::int64 value) {
  set_has_win();
  win_ = value;
}

// optional int64 rate = 9;
inline bool replay_info::has_rate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void replay_info::set_has_rate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void replay_info::clear_has_rate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void replay_info::clear_rate() {
  rate_ = GOOGLE_LONGLONG(0);
  clear_has_rate();
}
inline ::google::protobuf::int64 replay_info::rate() const {
  return rate_;
}
inline void replay_info::set_rate(::google::protobuf::int64 value) {
  set_has_rate();
  rate_ = value;
}

// optional string imageArr = 10;
inline bool replay_info::has_imagearr() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void replay_info::set_has_imagearr() {
  _has_bits_[0] |= 0x00000200u;
}
inline void replay_info::clear_has_imagearr() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void replay_info::clear_imagearr() {
  if (imagearr_ != &::google::protobuf::internal::kEmptyString) {
    imagearr_->clear();
  }
  clear_has_imagearr();
}
inline const ::std::string& replay_info::imagearr() const {
  return *imagearr_;
}
inline void replay_info::set_imagearr(const ::std::string& value) {
  set_has_imagearr();
  if (imagearr_ == &::google::protobuf::internal::kEmptyString) {
    imagearr_ = new ::std::string;
  }
  imagearr_->assign(value);
}
inline void replay_info::set_imagearr(const char* value) {
  set_has_imagearr();
  if (imagearr_ == &::google::protobuf::internal::kEmptyString) {
    imagearr_ = new ::std::string;
  }
  imagearr_->assign(value);
}
inline void replay_info::set_imagearr(const char* value, size_t size) {
  set_has_imagearr();
  if (imagearr_ == &::google::protobuf::internal::kEmptyString) {
    imagearr_ = new ::std::string;
  }
  imagearr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* replay_info::mutable_imagearr() {
  set_has_imagearr();
  if (imagearr_ == &::google::protobuf::internal::kEmptyString) {
    imagearr_ = new ::std::string;
  }
  return imagearr_;
}
inline ::std::string* replay_info::release_imagearr() {
  clear_has_imagearr();
  if (imagearr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imagearr_;
    imagearr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void replay_info::set_allocated_imagearr(::std::string* imagearr) {
  if (imagearr_ != &::google::protobuf::internal::kEmptyString) {
    delete imagearr_;
  }
  if (imagearr) {
    set_has_imagearr();
    imagearr_ = imagearr;
  } else {
    clear_has_imagearr();
    imagearr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .game_slothch_protocols.IconInfo icons = 11;
inline int replay_info::icons_size() const {
  return icons_.size();
}
inline void replay_info::clear_icons() {
  icons_.Clear();
}
inline const ::game_slothch_protocols::IconInfo& replay_info::icons(int index) const {
  return icons_.Get(index);
}
inline ::game_slothch_protocols::IconInfo* replay_info::mutable_icons(int index) {
  return icons_.Mutable(index);
}
inline ::game_slothch_protocols::IconInfo* replay_info::add_icons() {
  return icons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::IconInfo >&
replay_info::icons() const {
  return icons_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::IconInfo >*
replay_info::mutable_icons() {
  return &icons_;
}

// optional bool freeCol = 12;
inline bool replay_info::has_freecol() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void replay_info::set_has_freecol() {
  _has_bits_[0] |= 0x00000800u;
}
inline void replay_info::clear_has_freecol() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void replay_info::clear_freecol() {
  freecol_ = false;
  clear_has_freecol();
}
inline bool replay_info::freecol() const {
  return freecol_;
}
inline void replay_info::set_freecol(bool value) {
  set_has_freecol();
  freecol_ = value;
}

// optional int32 freeCount = 13;
inline bool replay_info::has_freecount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void replay_info::set_has_freecount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void replay_info::clear_has_freecount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void replay_info::clear_freecount() {
  freecount_ = 0;
  clear_has_freecount();
}
inline ::google::protobuf::int32 replay_info::freecount() const {
  return freecount_;
}
inline void replay_info::set_freecount(::google::protobuf::int32 value) {
  set_has_freecount();
  freecount_ = value;
}

// optional int32 freeAdd = 14;
inline bool replay_info::has_freeadd() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void replay_info::set_has_freeadd() {
  _has_bits_[0] |= 0x00002000u;
}
inline void replay_info::clear_has_freeadd() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void replay_info::clear_freeadd() {
  freeadd_ = 0;
  clear_has_freeadd();
}
inline ::google::protobuf::int32 replay_info::freeadd() const {
  return freeadd_;
}
inline void replay_info::set_freeadd(::google::protobuf::int32 value) {
  set_has_freeadd();
  freeadd_ = value;
}

// optional int64 freeEndGold = 15;
inline bool replay_info::has_freeendgold() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void replay_info::set_has_freeendgold() {
  _has_bits_[0] |= 0x00004000u;
}
inline void replay_info::clear_has_freeendgold() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void replay_info::clear_freeendgold() {
  freeendgold_ = GOOGLE_LONGLONG(0);
  clear_has_freeendgold();
}
inline ::google::protobuf::int64 replay_info::freeendgold() const {
  return freeendgold_;
}
inline void replay_info::set_freeendgold(::google::protobuf::int64 value) {
  set_has_freeendgold();
  freeendgold_ = value;
}

// optional int32 lotteryResult = 16 [default = -1];
inline bool replay_info::has_lotteryresult() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void replay_info::set_has_lotteryresult() {
  _has_bits_[0] |= 0x00008000u;
}
inline void replay_info::clear_has_lotteryresult() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void replay_info::clear_lotteryresult() {
  lotteryresult_ = -1;
  clear_has_lotteryresult();
}
inline ::google::protobuf::int32 replay_info::lotteryresult() const {
  return lotteryresult_;
}
inline void replay_info::set_lotteryresult(::google::protobuf::int32 value) {
  set_has_lotteryresult();
  lotteryresult_ = value;
}

// optional int64 lotteryReward = 17 [default = 0];
inline bool replay_info::has_lotteryreward() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void replay_info::set_has_lotteryreward() {
  _has_bits_[0] |= 0x00010000u;
}
inline void replay_info::clear_has_lotteryreward() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void replay_info::clear_lotteryreward() {
  lotteryreward_ = GOOGLE_LONGLONG(0);
  clear_has_lotteryreward();
}
inline ::google::protobuf::int64 replay_info::lotteryreward() const {
  return lotteryreward_;
}
inline void replay_info::set_lotteryreward(::google::protobuf::int64 value) {
  set_has_lotteryreward();
  lotteryreward_ = value;
}

// repeated int32 lotteryIcon = 18;
inline int replay_info::lotteryicon_size() const {
  return lotteryicon_.size();
}
inline void replay_info::clear_lotteryicon() {
  lotteryicon_.Clear();
}
inline ::google::protobuf::int32 replay_info::lotteryicon(int index) const {
  return lotteryicon_.Get(index);
}
inline void replay_info::set_lotteryicon(int index, ::google::protobuf::int32 value) {
  lotteryicon_.Set(index, value);
}
inline void replay_info::add_lotteryicon(::google::protobuf::int32 value) {
  lotteryicon_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
replay_info::lotteryicon() const {
  return lotteryicon_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
replay_info::mutable_lotteryicon() {
  return &lotteryicon_;
}

// repeated int32 lotteryPos = 19;
inline int replay_info::lotterypos_size() const {
  return lotterypos_.size();
}
inline void replay_info::clear_lotterypos() {
  lotterypos_.Clear();
}
inline ::google::protobuf::int32 replay_info::lotterypos(int index) const {
  return lotterypos_.Get(index);
}
inline void replay_info::set_lotterypos(int index, ::google::protobuf::int32 value) {
  lotterypos_.Set(index, value);
}
inline void replay_info::add_lotterypos(::google::protobuf::int32 value) {
  lotterypos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
replay_info::lotterypos() const {
  return lotterypos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
replay_info::mutable_lotterypos() {
  return &lotterypos_;
}

// optional int32 playerCount = 20;
inline bool replay_info::has_playercount() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void replay_info::set_has_playercount() {
  _has_bits_[0] |= 0x00080000u;
}
inline void replay_info::clear_has_playercount() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void replay_info::clear_playercount() {
  playercount_ = 0;
  clear_has_playercount();
}
inline ::google::protobuf::int32 replay_info::playercount() const {
  return playercount_;
}
inline void replay_info::set_playercount(::google::protobuf::int32 value) {
  set_has_playercount();
  playercount_ = value;
}

// optional int32 ts = 21;
inline bool replay_info::has_ts() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void replay_info::set_has_ts() {
  _has_bits_[0] |= 0x00100000u;
}
inline void replay_info::clear_has_ts() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void replay_info::clear_ts() {
  ts_ = 0;
  clear_has_ts();
}
inline ::google::protobuf::int32 replay_info::ts() const {
  return ts_;
}
inline void replay_info::set_ts(::google::protobuf::int32 value) {
  set_has_ts();
  ts_ = value;
}

// repeated .game_slothch_protocols.FreeInfo freeInfos = 22;
inline int replay_info::freeinfos_size() const {
  return freeinfos_.size();
}
inline void replay_info::clear_freeinfos() {
  freeinfos_.Clear();
}
inline const ::game_slothch_protocols::FreeInfo& replay_info::freeinfos(int index) const {
  return freeinfos_.Get(index);
}
inline ::game_slothch_protocols::FreeInfo* replay_info::mutable_freeinfos(int index) {
  return freeinfos_.Mutable(index);
}
inline ::game_slothch_protocols::FreeInfo* replay_info::add_freeinfos() {
  return freeinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::FreeInfo >&
replay_info::freeinfos() const {
  return freeinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::FreeInfo >*
replay_info::mutable_freeinfos() {
  return &freeinfos_;
}

// optional int32 viplv = 23;
inline bool replay_info::has_viplv() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void replay_info::set_has_viplv() {
  _has_bits_[0] |= 0x00400000u;
}
inline void replay_info::clear_has_viplv() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void replay_info::clear_viplv() {
  viplv_ = 0;
  clear_has_viplv();
}
inline ::google::protobuf::int32 replay_info::viplv() const {
  return viplv_;
}
inline void replay_info::set_viplv(::google::protobuf::int32 value) {
  set_has_viplv();
  viplv_ = value;
}

// -------------------------------------------------------------------

// packetl2c_replay_list

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_replay_list];
inline bool packetl2c_replay_list::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_replay_list::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_replay_list::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_replay_list::clear_packet_id() {
  packet_id_ = 10024;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetl2c_replay_list::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_replay_list::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 rtype = 2;
inline bool packetl2c_replay_list::has_rtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_replay_list::set_has_rtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_replay_list::clear_has_rtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_replay_list::clear_rtype() {
  rtype_ = 0;
  clear_has_rtype();
}
inline ::google::protobuf::int32 packetl2c_replay_list::rtype() const {
  return rtype_;
}
inline void packetl2c_replay_list::set_rtype(::google::protobuf::int32 value) {
  set_has_rtype();
  rtype_ = value;
}

// -------------------------------------------------------------------

// packetl2c_replay_list_result

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_replay_list_result];
inline bool packetl2c_replay_list_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_replay_list_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_replay_list_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_replay_list_result::clear_packet_id() {
  packet_id_ = 15024;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetl2c_replay_list_result::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_replay_list_result::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 rtype = 2;
inline bool packetl2c_replay_list_result::has_rtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_replay_list_result::set_has_rtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_replay_list_result::clear_has_rtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_replay_list_result::clear_rtype() {
  rtype_ = 0;
  clear_has_rtype();
}
inline ::google::protobuf::int32 packetl2c_replay_list_result::rtype() const {
  return rtype_;
}
inline void packetl2c_replay_list_result::set_rtype(::google::protobuf::int32 value) {
  set_has_rtype();
  rtype_ = value;
}

// repeated .game_slothch_protocols.replay_info replay_list = 3;
inline int packetl2c_replay_list_result::replay_list_size() const {
  return replay_list_.size();
}
inline void packetl2c_replay_list_result::clear_replay_list() {
  replay_list_.Clear();
}
inline const ::game_slothch_protocols::replay_info& packetl2c_replay_list_result::replay_list(int index) const {
  return replay_list_.Get(index);
}
inline ::game_slothch_protocols::replay_info* packetl2c_replay_list_result::mutable_replay_list(int index) {
  return replay_list_.Mutable(index);
}
inline ::game_slothch_protocols::replay_info* packetl2c_replay_list_result::add_replay_list() {
  return replay_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::replay_info >&
packetl2c_replay_list_result::replay_list() const {
  return replay_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::replay_info >*
packetl2c_replay_list_result::mutable_replay_list() {
  return &replay_list_;
}

// -------------------------------------------------------------------

// packetl2c_replay_detail

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_replay_detail];
inline bool packetl2c_replay_detail::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_replay_detail::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_replay_detail::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_replay_detail::clear_packet_id() {
  packet_id_ = 10025;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetl2c_replay_detail::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_replay_detail::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 rtype = 2;
inline bool packetl2c_replay_detail::has_rtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_replay_detail::set_has_rtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_replay_detail::clear_has_rtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_replay_detail::clear_rtype() {
  rtype_ = 0;
  clear_has_rtype();
}
inline ::google::protobuf::int32 packetl2c_replay_detail::rtype() const {
  return rtype_;
}
inline void packetl2c_replay_detail::set_rtype(::google::protobuf::int32 value) {
  set_has_rtype();
  rtype_ = value;
}

// optional string rid = 3;
inline bool packetl2c_replay_detail::has_rid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_replay_detail::set_has_rid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_replay_detail::clear_has_rid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_replay_detail::clear_rid() {
  if (rid_ != &::google::protobuf::internal::kEmptyString) {
    rid_->clear();
  }
  clear_has_rid();
}
inline const ::std::string& packetl2c_replay_detail::rid() const {
  return *rid_;
}
inline void packetl2c_replay_detail::set_rid(const ::std::string& value) {
  set_has_rid();
  if (rid_ == &::google::protobuf::internal::kEmptyString) {
    rid_ = new ::std::string;
  }
  rid_->assign(value);
}
inline void packetl2c_replay_detail::set_rid(const char* value) {
  set_has_rid();
  if (rid_ == &::google::protobuf::internal::kEmptyString) {
    rid_ = new ::std::string;
  }
  rid_->assign(value);
}
inline void packetl2c_replay_detail::set_rid(const char* value, size_t size) {
  set_has_rid();
  if (rid_ == &::google::protobuf::internal::kEmptyString) {
    rid_ = new ::std::string;
  }
  rid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetl2c_replay_detail::mutable_rid() {
  set_has_rid();
  if (rid_ == &::google::protobuf::internal::kEmptyString) {
    rid_ = new ::std::string;
  }
  return rid_;
}
inline ::std::string* packetl2c_replay_detail::release_rid() {
  clear_has_rid();
  if (rid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rid_;
    rid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetl2c_replay_detail::set_allocated_rid(::std::string* rid) {
  if (rid_ != &::google::protobuf::internal::kEmptyString) {
    delete rid_;
  }
  if (rid) {
    set_has_rid();
    rid_ = rid;
  } else {
    clear_has_rid();
    rid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetl2c_replay_detail_result

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_replay_detail_result];
inline bool packetl2c_replay_detail_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_replay_detail_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_replay_detail_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_replay_detail_result::clear_packet_id() {
  packet_id_ = 15025;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetl2c_replay_detail_result::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_replay_detail_result::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 result = 2;
inline bool packetl2c_replay_detail_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_replay_detail_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_replay_detail_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_replay_detail_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetl2c_replay_detail_result::result() const {
  return result_;
}
inline void packetl2c_replay_detail_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 rtype = 3;
inline bool packetl2c_replay_detail_result::has_rtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_replay_detail_result::set_has_rtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_replay_detail_result::clear_has_rtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_replay_detail_result::clear_rtype() {
  rtype_ = 0;
  clear_has_rtype();
}
inline ::google::protobuf::int32 packetl2c_replay_detail_result::rtype() const {
  return rtype_;
}
inline void packetl2c_replay_detail_result::set_rtype(::google::protobuf::int32 value) {
  set_has_rtype();
  rtype_ = value;
}

// optional .game_slothch_protocols.replay_info replay = 4;
inline bool packetl2c_replay_detail_result::has_replay() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_replay_detail_result::set_has_replay() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_replay_detail_result::clear_has_replay() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_replay_detail_result::clear_replay() {
  if (replay_ != NULL) replay_->::game_slothch_protocols::replay_info::Clear();
  clear_has_replay();
}
inline const ::game_slothch_protocols::replay_info& packetl2c_replay_detail_result::replay() const {
  return replay_ != NULL ? *replay_ : *default_instance_->replay_;
}
inline ::game_slothch_protocols::replay_info* packetl2c_replay_detail_result::mutable_replay() {
  set_has_replay();
  if (replay_ == NULL) replay_ = new ::game_slothch_protocols::replay_info;
  return replay_;
}
inline ::game_slothch_protocols::replay_info* packetl2c_replay_detail_result::release_replay() {
  clear_has_replay();
  ::game_slothch_protocols::replay_info* temp = replay_;
  replay_ = NULL;
  return temp;
}
inline void packetl2c_replay_detail_result::set_allocated_replay(::game_slothch_protocols::replay_info* replay) {
  delete replay_;
  replay_ = replay;
  if (replay) {
    set_has_replay();
  } else {
    clear_has_replay();
  }
}

// -------------------------------------------------------------------

// room_player

// optional int32 player_id = 1;
inline bool room_player::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void room_player::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void room_player::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void room_player::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 room_player::player_id() const {
  return player_id_;
}
inline void room_player::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int64 gold = 2;
inline bool room_player::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void room_player::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void room_player::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void room_player::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 room_player::gold() const {
  return gold_;
}
inline void room_player::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional int64 bet = 3;
inline bool room_player::has_bet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void room_player::set_has_bet() {
  _has_bits_[0] |= 0x00000004u;
}
inline void room_player::clear_has_bet() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void room_player::clear_bet() {
  bet_ = GOOGLE_LONGLONG(0);
  clear_has_bet();
}
inline ::google::protobuf::int64 room_player::bet() const {
  return bet_;
}
inline void room_player::set_bet(::google::protobuf::int64 value) {
  set_has_bet();
  bet_ = value;
}

// optional int64 profit_today = 4;
inline bool room_player::has_profit_today() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void room_player::set_has_profit_today() {
  _has_bits_[0] |= 0x00000008u;
}
inline void room_player::clear_has_profit_today() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void room_player::clear_profit_today() {
  profit_today_ = GOOGLE_LONGLONG(0);
  clear_has_profit_today();
}
inline ::google::protobuf::int64 room_player::profit_today() const {
  return profit_today_;
}
inline void room_player::set_profit_today(::google::protobuf::int64 value) {
  set_has_profit_today();
  profit_today_ = value;
}

// -------------------------------------------------------------------

// packetl2c_gm_get_room_info

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_get_room_info];
inline bool packetl2c_gm_get_room_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_gm_get_room_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_gm_get_room_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_gm_get_room_info::clear_packet_id() {
  packet_id_ = 10101;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetl2c_gm_get_room_info::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_gm_get_room_info::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_gm_get_room_info_result

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_get_room_info_result];
inline bool packetl2c_gm_get_room_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_gm_get_room_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_gm_get_room_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_gm_get_room_info_result::clear_packet_id() {
  packet_id_ = 15101;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetl2c_gm_get_room_info_result::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_gm_get_room_info_result::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 result = 2;
inline bool packetl2c_gm_get_room_info_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_gm_get_room_info_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_gm_get_room_info_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_gm_get_room_info_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetl2c_gm_get_room_info_result::result() const {
  return result_;
}
inline void packetl2c_gm_get_room_info_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 killcount = 3;
inline bool packetl2c_gm_get_room_info_result::has_killcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_gm_get_room_info_result::set_has_killcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_gm_get_room_info_result::clear_has_killcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_gm_get_room_info_result::clear_killcount() {
  killcount_ = 0;
  clear_has_killcount();
}
inline ::google::protobuf::int32 packetl2c_gm_get_room_info_result::killcount() const {
  return killcount_;
}
inline void packetl2c_gm_get_room_info_result::set_killcount(::google::protobuf::int32 value) {
  set_has_killcount();
  killcount_ = value;
}

// repeated .game_slothch_protocols.room_player players = 4;
inline int packetl2c_gm_get_room_info_result::players_size() const {
  return players_.size();
}
inline void packetl2c_gm_get_room_info_result::clear_players() {
  players_.Clear();
}
inline const ::game_slothch_protocols::room_player& packetl2c_gm_get_room_info_result::players(int index) const {
  return players_.Get(index);
}
inline ::game_slothch_protocols::room_player* packetl2c_gm_get_room_info_result::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::game_slothch_protocols::room_player* packetl2c_gm_get_room_info_result::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::room_player >&
packetl2c_gm_get_room_info_result::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_slothch_protocols::room_player >*
packetl2c_gm_get_room_info_result::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// packetl2c_gm_do_kill

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_do_kill];
inline bool packetl2c_gm_do_kill::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_gm_do_kill::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_gm_do_kill::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_gm_do_kill::clear_packet_id() {
  packet_id_ = 10102;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetl2c_gm_do_kill::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_gm_do_kill::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 killcount = 2;
inline bool packetl2c_gm_do_kill::has_killcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_gm_do_kill::set_has_killcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_gm_do_kill::clear_has_killcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_gm_do_kill::clear_killcount() {
  killcount_ = 0;
  clear_has_killcount();
}
inline ::google::protobuf::int32 packetl2c_gm_do_kill::killcount() const {
  return killcount_;
}
inline void packetl2c_gm_do_kill::set_killcount(::google::protobuf::int32 value) {
  set_has_killcount();
  killcount_ = value;
}

// optional int32 pid = 3;
inline bool packetl2c_gm_do_kill::has_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_gm_do_kill::set_has_pid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_gm_do_kill::clear_has_pid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_gm_do_kill::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 packetl2c_gm_do_kill::pid() const {
  return pid_;
}
inline void packetl2c_gm_do_kill::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
}

// optional int32 free = 4;
inline bool packetl2c_gm_do_kill::has_free() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_gm_do_kill::set_has_free() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_gm_do_kill::clear_has_free() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_gm_do_kill::clear_free() {
  free_ = 0;
  clear_has_free();
}
inline ::google::protobuf::int32 packetl2c_gm_do_kill::free() const {
  return free_;
}
inline void packetl2c_gm_do_kill::set_free(::google::protobuf::int32 value) {
  set_has_free();
  free_ = value;
}

// -------------------------------------------------------------------

// packetl2c_gm_do_kill_result

// optional .game_slothch_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_do_kill_result];
inline bool packetl2c_gm_do_kill_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_gm_do_kill_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_gm_do_kill_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_gm_do_kill_result::clear_packet_id() {
  packet_id_ = 15102;
  clear_has_packet_id();
}
inline ::game_slothch_protocols::e_server_msg_type packetl2c_gm_do_kill_result::packet_id() const {
  return static_cast< ::game_slothch_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_gm_do_kill_result::set_packet_id(::game_slothch_protocols::e_server_msg_type value) {
  assert(::game_slothch_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 result = 2;
inline bool packetl2c_gm_do_kill_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_gm_do_kill_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_gm_do_kill_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_gm_do_kill_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetl2c_gm_do_kill_result::result() const {
  return result_;
}
inline void packetl2c_gm_do_kill_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_slothch_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fslothch_5fprotocol_2eproto__INCLUDED
