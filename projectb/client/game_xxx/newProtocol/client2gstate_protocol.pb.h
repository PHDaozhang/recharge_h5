// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2gstate_protocol.proto

#ifndef PROTOBUF_client2gstate_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_client2gstate_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client2gstate_msg_type.pb.h"
#include "msg_type_def.pb.h"
#include "msg_info_def.pb.h"
// @@protoc_insertion_point(includes)

namespace client2gstate_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

class packetc2gs_player_connect;
class packetgs2c_player_connect_result;
class packetc2gs_player_disconnect;
class packetgs2c_player_disconnect_result;
class packetc2gs_game_history;
class gs_base_room_info;
class gs_msg_cows_history;
class gs_msg_cows_room_history;
class packetgs2c_cows_game_history_result;
class gs_msg_shcd_history;
class gs_msg_shcd_room_info;
class packetgs2c_shcd_game_history_result;
class gs_msg_baccarat_history;
class gs_msg_baccarat_room_info;
class packetgs2c_baccarat_game_history_result;
class gs_msg_goldshark_history;
class gs_msg_goldshark_room_info;
class packetgs2c_goldshark_game_history_result;
class gs_msg_lhd_history;
class gs_msg_lhd_room_info;
class packetgs2c_lhd_game_history_result;
class gs_msg_benzbmw_history;
class gs_msg_benzbmw_room_info;
class packetgs2c_benzbmw_game_history_result;
class gs_msg_multiredblack_history;
class gs_msg_multiredblack_room_info;
class packetgs2c_multiredblack_game_history_result;
class gs_msg_ebg_history;
class gs_msg_ebg_room_info;
class packetgs2c_ebg_game_history_result;
class gs_msg_dice_history;
class gs_msg_dice_room_info;
class packetgs2c_dice_game_history_result;
class gs_msg_qznn_room_info;
class packetgs2c_qznn_game_history_result;
class gs_msg_tbnn_room_info;
class packetgs2c_tbnn_game_history_result;
class gs_msg_carsmagnate_history;
class gs_msg_carsmagnate_room_info;
class packetgs2c_carsmagnate_game_history_result;
class gs_msg_multitexas_history;
class gs_msg_multitexas_room_info;
class packetgs2c_multitexas_game_history_result;
class gs_msg_fruits_history;
class gs_msg_fruits_room_info;
class packetgs2c_fruits_game_history_result;
class gs_msg_forest_history;
class gs_msg_forest_room_info;
class packetgs2c_forest_game_history_result;
class gs_msg_fourcolorball_history;
class gs_msg_fourcolorball_room_info;
class packetgs2c_fourcolorball_game_history_result;
class gs_msg_happySupremacy_history;
class gs_msg_happySupremacy_room_info;
class packetgs2c_happySupremacy_game_history_result;
class gs_msg_ttz_history;
class gs_msg_ttz_room_info;
class packetgs2c_ttz_game_history_result;

// ===================================================================

class packetc2gs_player_connect : public ::google::protobuf::Message {
 public:
  packetc2gs_player_connect();
  virtual ~packetc2gs_player_connect();

  packetc2gs_player_connect(const packetc2gs_player_connect& from);

  inline packetc2gs_player_connect& operator=(const packetc2gs_player_connect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2gs_player_connect& default_instance();

  void Swap(packetc2gs_player_connect* other);

  // implements Message ----------------------------------------------

  packetc2gs_player_connect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2gs_player_connect& from);
  void MergeFrom(const packetc2gs_player_connect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2gs_player_connect];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional int32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // optional int32 gameid = 3;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 3;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetc2gs_player_connect)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 gameid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2gs_player_connect* default_instance_;
};
// -------------------------------------------------------------------

class packetgs2c_player_connect_result : public ::google::protobuf::Message {
 public:
  packetgs2c_player_connect_result();
  virtual ~packetgs2c_player_connect_result();

  packetgs2c_player_connect_result(const packetgs2c_player_connect_result& from);

  inline packetgs2c_player_connect_result& operator=(const packetgs2c_player_connect_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetgs2c_player_connect_result& default_instance();

  void Swap(packetgs2c_player_connect_result* other);

  // implements Message ----------------------------------------------

  packetgs2c_player_connect_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetgs2c_player_connect_result& from);
  void MergeFrom(const packetgs2c_player_connect_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_player_connect_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_unknow];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetgs2c_player_connect_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetgs2c_player_connect_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2gs_player_disconnect : public ::google::protobuf::Message {
 public:
  packetc2gs_player_disconnect();
  virtual ~packetc2gs_player_disconnect();

  packetc2gs_player_disconnect(const packetc2gs_player_disconnect& from);

  inline packetc2gs_player_disconnect& operator=(const packetc2gs_player_disconnect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2gs_player_disconnect& default_instance();

  void Swap(packetc2gs_player_disconnect* other);

  // implements Message ----------------------------------------------

  packetc2gs_player_disconnect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2gs_player_disconnect& from);
  void MergeFrom(const packetc2gs_player_disconnect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2gs_player_disconnect];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional int32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetc2gs_player_disconnect)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2gs_player_disconnect* default_instance_;
};
// -------------------------------------------------------------------

class packetgs2c_player_disconnect_result : public ::google::protobuf::Message {
 public:
  packetgs2c_player_disconnect_result();
  virtual ~packetgs2c_player_disconnect_result();

  packetgs2c_player_disconnect_result(const packetgs2c_player_disconnect_result& from);

  inline packetgs2c_player_disconnect_result& operator=(const packetgs2c_player_disconnect_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetgs2c_player_disconnect_result& default_instance();

  void Swap(packetgs2c_player_disconnect_result* other);

  // implements Message ----------------------------------------------

  packetgs2c_player_disconnect_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetgs2c_player_disconnect_result& from);
  void MergeFrom(const packetgs2c_player_disconnect_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_player_disconnect_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_unknow];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetgs2c_player_disconnect_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetgs2c_player_disconnect_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2gs_game_history : public ::google::protobuf::Message {
 public:
  packetc2gs_game_history();
  virtual ~packetc2gs_game_history();

  packetc2gs_game_history(const packetc2gs_game_history& from);

  inline packetc2gs_game_history& operator=(const packetc2gs_game_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2gs_game_history& default_instance();

  void Swap(packetc2gs_game_history* other);

  // implements Message ----------------------------------------------

  packetc2gs_game_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2gs_game_history& from);
  void MergeFrom(const packetc2gs_game_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2gs_game_history];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional int32 gameid = 2;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 2;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetc2gs_game_history)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 gameid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2gs_game_history* default_instance_;
};
// -------------------------------------------------------------------

class gs_base_room_info : public ::google::protobuf::Message {
 public:
  gs_base_room_info();
  virtual ~gs_base_room_info();

  gs_base_room_info(const gs_base_room_info& from);

  inline gs_base_room_info& operator=(const gs_base_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_base_room_info& default_instance();

  void Swap(gs_base_room_info* other);

  // implements Message ----------------------------------------------

  gs_base_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_base_room_info& from);
  void MergeFrom(const gs_base_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 game_id = 1;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 1;
  inline ::google::protobuf::int32 game_id() const;
  inline void set_game_id(::google::protobuf::int32 value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional int32 game_state = 3;
  inline bool has_game_state() const;
  inline void clear_game_state();
  static const int kGameStateFieldNumber = 3;
  inline ::google::protobuf::int32 game_state() const;
  inline void set_game_state(::google::protobuf::int32 value);

  // optional int32 state_time = 4;
  inline bool has_state_time() const;
  inline void clear_state_time();
  static const int kStateTimeFieldNumber = 4;
  inline ::google::protobuf::int32 state_time() const;
  inline void set_state_time(::google::protobuf::int32 value);

  // optional int64 time_stamp = 5;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 5;
  inline ::google::protobuf::int64 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::int64 value);

  // optional int32 calc_time = 6;
  inline bool has_calc_time() const;
  inline void clear_calc_time();
  static const int kCalcTimeFieldNumber = 6;
  inline ::google::protobuf::int32 calc_time() const;
  inline void set_calc_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_base_room_info)
 private:
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_game_state();
  inline void clear_has_game_state();
  inline void set_has_state_time();
  inline void clear_has_state_time();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_calc_time();
  inline void clear_has_calc_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 game_id_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 game_state_;
  ::google::protobuf::int32 state_time_;
  ::google::protobuf::int64 time_stamp_;
  ::google::protobuf::int32 calc_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_base_room_info* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_cows_history : public ::google::protobuf::Message {
 public:
  gs_msg_cows_history();
  virtual ~gs_msg_cows_history();

  gs_msg_cows_history(const gs_msg_cows_history& from);

  inline gs_msg_cows_history& operator=(const gs_msg_cows_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_cows_history& default_instance();

  void Swap(gs_msg_cows_history* other);

  // implements Message ----------------------------------------------

  gs_msg_cows_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_cows_history& from);
  void MergeFrom(const gs_msg_cows_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool is_win = 1;
  inline int is_win_size() const;
  inline void clear_is_win();
  static const int kIsWinFieldNumber = 1;
  inline bool is_win(int index) const;
  inline void set_is_win(int index, bool value);
  inline void add_is_win(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      is_win() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_is_win();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_cows_history)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< bool > is_win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_cows_history* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_cows_room_history : public ::google::protobuf::Message {
 public:
  gs_msg_cows_room_history();
  virtual ~gs_msg_cows_room_history();

  gs_msg_cows_room_history(const gs_msg_cows_room_history& from);

  inline gs_msg_cows_room_history& operator=(const gs_msg_cows_room_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_cows_room_history& default_instance();

  void Swap(gs_msg_cows_room_history* other);

  // implements Message ----------------------------------------------

  gs_msg_cows_room_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_cows_room_history& from);
  void MergeFrom(const gs_msg_cows_room_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  inline bool has_base_room_info() const;
  inline void clear_base_room_info();
  static const int kBaseRoomInfoFieldNumber = 1;
  inline const ::client2gstate_protocols::gs_base_room_info& base_room_info() const;
  inline ::client2gstate_protocols::gs_base_room_info* mutable_base_room_info();
  inline ::client2gstate_protocols::gs_base_room_info* release_base_room_info();
  inline void set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info);

  // optional int32 total_count = 2;
  inline bool has_total_count() const;
  inline void clear_total_count();
  static const int kTotalCountFieldNumber = 2;
  inline ::google::protobuf::int32 total_count() const;
  inline void set_total_count(::google::protobuf::int32 value);

  // repeated int32 win_counts = 3;
  inline int win_counts_size() const;
  inline void clear_win_counts();
  static const int kWinCountsFieldNumber = 3;
  inline ::google::protobuf::int32 win_counts(int index) const;
  inline void set_win_counts(int index, ::google::protobuf::int32 value);
  inline void add_win_counts(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      win_counts() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_win_counts();

  // repeated int32 lose_counts = 4;
  inline int lose_counts_size() const;
  inline void clear_lose_counts();
  static const int kLoseCountsFieldNumber = 4;
  inline ::google::protobuf::int32 lose_counts(int index) const;
  inline void set_lose_counts(int index, ::google::protobuf::int32 value);
  inline void add_lose_counts(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lose_counts() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lose_counts();

  // repeated .client2gstate_protocols.gs_msg_cows_history history_list = 5;
  inline int history_list_size() const;
  inline void clear_history_list();
  static const int kHistoryListFieldNumber = 5;
  inline const ::client2gstate_protocols::gs_msg_cows_history& history_list(int index) const;
  inline ::client2gstate_protocols::gs_msg_cows_history* mutable_history_list(int index);
  inline ::client2gstate_protocols::gs_msg_cows_history* add_history_list();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_cows_history >&
      history_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_cows_history >*
      mutable_history_list();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_cows_room_history)
 private:
  inline void set_has_base_room_info();
  inline void clear_has_base_room_info();
  inline void set_has_total_count();
  inline void clear_has_total_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client2gstate_protocols::gs_base_room_info* base_room_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > win_counts_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lose_counts_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_cows_history > history_list_;
  ::google::protobuf::int32 total_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_cows_room_history* default_instance_;
};
// -------------------------------------------------------------------

class packetgs2c_cows_game_history_result : public ::google::protobuf::Message {
 public:
  packetgs2c_cows_game_history_result();
  virtual ~packetgs2c_cows_game_history_result();

  packetgs2c_cows_game_history_result(const packetgs2c_cows_game_history_result& from);

  inline packetgs2c_cows_game_history_result& operator=(const packetgs2c_cows_game_history_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetgs2c_cows_game_history_result& default_instance();

  void Swap(packetgs2c_cows_game_history_result* other);

  // implements Message ----------------------------------------------

  packetgs2c_cows_game_history_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetgs2c_cows_game_history_result& from);
  void MergeFrom(const packetgs2c_cows_game_history_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_cows_history_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional int32 all_data_flag = 2;
  inline bool has_all_data_flag() const;
  inline void clear_all_data_flag();
  static const int kAllDataFlagFieldNumber = 2;
  inline ::google::protobuf::int32 all_data_flag() const;
  inline void set_all_data_flag(::google::protobuf::int32 value);

  // repeated .client2gstate_protocols.gs_msg_cows_room_history room_history = 3;
  inline int room_history_size() const;
  inline void clear_room_history();
  static const int kRoomHistoryFieldNumber = 3;
  inline const ::client2gstate_protocols::gs_msg_cows_room_history& room_history(int index) const;
  inline ::client2gstate_protocols::gs_msg_cows_room_history* mutable_room_history(int index);
  inline ::client2gstate_protocols::gs_msg_cows_room_history* add_room_history();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_cows_room_history >&
      room_history() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_cows_room_history >*
      mutable_room_history();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetgs2c_cows_game_history_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_all_data_flag();
  inline void clear_has_all_data_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 all_data_flag_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_cows_room_history > room_history_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetgs2c_cows_game_history_result* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_shcd_history : public ::google::protobuf::Message {
 public:
  gs_msg_shcd_history();
  virtual ~gs_msg_shcd_history();

  gs_msg_shcd_history(const gs_msg_shcd_history& from);

  inline gs_msg_shcd_history& operator=(const gs_msg_shcd_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_shcd_history& default_instance();

  void Swap(gs_msg_shcd_history* other);

  // implements Message ----------------------------------------------

  gs_msg_shcd_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_shcd_history& from);
  void MergeFrom(const gs_msg_shcd_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 card_type = 1;
  inline bool has_card_type() const;
  inline void clear_card_type();
  static const int kCardTypeFieldNumber = 1;
  inline ::google::protobuf::int32 card_type() const;
  inline void set_card_type(::google::protobuf::int32 value);

  // optional int32 card_value = 2;
  inline bool has_card_value() const;
  inline void clear_card_value();
  static const int kCardValueFieldNumber = 2;
  inline ::google::protobuf::int32 card_value() const;
  inline void set_card_value(::google::protobuf::int32 value);

  // optional int32 open_type = 3;
  inline bool has_open_type() const;
  inline void clear_open_type();
  static const int kOpenTypeFieldNumber = 3;
  inline ::google::protobuf::int32 open_type() const;
  inline void set_open_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_shcd_history)
 private:
  inline void set_has_card_type();
  inline void clear_has_card_type();
  inline void set_has_card_value();
  inline void clear_has_card_value();
  inline void set_has_open_type();
  inline void clear_has_open_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 card_type_;
  ::google::protobuf::int32 card_value_;
  ::google::protobuf::int32 open_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_shcd_history* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_shcd_room_info : public ::google::protobuf::Message {
 public:
  gs_msg_shcd_room_info();
  virtual ~gs_msg_shcd_room_info();

  gs_msg_shcd_room_info(const gs_msg_shcd_room_info& from);

  inline gs_msg_shcd_room_info& operator=(const gs_msg_shcd_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_shcd_room_info& default_instance();

  void Swap(gs_msg_shcd_room_info* other);

  // implements Message ----------------------------------------------

  gs_msg_shcd_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_shcd_room_info& from);
  void MergeFrom(const gs_msg_shcd_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  inline bool has_base_room_info() const;
  inline void clear_base_room_info();
  static const int kBaseRoomInfoFieldNumber = 1;
  inline const ::client2gstate_protocols::gs_base_room_info& base_room_info() const;
  inline ::client2gstate_protocols::gs_base_room_info* mutable_base_room_info();
  inline ::client2gstate_protocols::gs_base_room_info* release_base_room_info();
  inline void set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info);

  // repeated .client2gstate_protocols.gs_msg_shcd_history shcd_info = 2;
  inline int shcd_info_size() const;
  inline void clear_shcd_info();
  static const int kShcdInfoFieldNumber = 2;
  inline const ::client2gstate_protocols::gs_msg_shcd_history& shcd_info(int index) const;
  inline ::client2gstate_protocols::gs_msg_shcd_history* mutable_shcd_info(int index);
  inline ::client2gstate_protocols::gs_msg_shcd_history* add_shcd_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_shcd_history >&
      shcd_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_shcd_history >*
      mutable_shcd_info();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_shcd_room_info)
 private:
  inline void set_has_base_room_info();
  inline void clear_has_base_room_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client2gstate_protocols::gs_base_room_info* base_room_info_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_shcd_history > shcd_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_shcd_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetgs2c_shcd_game_history_result : public ::google::protobuf::Message {
 public:
  packetgs2c_shcd_game_history_result();
  virtual ~packetgs2c_shcd_game_history_result();

  packetgs2c_shcd_game_history_result(const packetgs2c_shcd_game_history_result& from);

  inline packetgs2c_shcd_game_history_result& operator=(const packetgs2c_shcd_game_history_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetgs2c_shcd_game_history_result& default_instance();

  void Swap(packetgs2c_shcd_game_history_result* other);

  // implements Message ----------------------------------------------

  packetgs2c_shcd_game_history_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetgs2c_shcd_game_history_result& from);
  void MergeFrom(const packetgs2c_shcd_game_history_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_shcd_history_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional int32 all_data_flag = 2;
  inline bool has_all_data_flag() const;
  inline void clear_all_data_flag();
  static const int kAllDataFlagFieldNumber = 2;
  inline ::google::protobuf::int32 all_data_flag() const;
  inline void set_all_data_flag(::google::protobuf::int32 value);

  // repeated .client2gstate_protocols.gs_msg_shcd_room_info room_history = 3;
  inline int room_history_size() const;
  inline void clear_room_history();
  static const int kRoomHistoryFieldNumber = 3;
  inline const ::client2gstate_protocols::gs_msg_shcd_room_info& room_history(int index) const;
  inline ::client2gstate_protocols::gs_msg_shcd_room_info* mutable_room_history(int index);
  inline ::client2gstate_protocols::gs_msg_shcd_room_info* add_room_history();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_shcd_room_info >&
      room_history() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_shcd_room_info >*
      mutable_room_history();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetgs2c_shcd_game_history_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_all_data_flag();
  inline void clear_has_all_data_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 all_data_flag_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_shcd_room_info > room_history_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetgs2c_shcd_game_history_result* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_baccarat_history : public ::google::protobuf::Message {
 public:
  gs_msg_baccarat_history();
  virtual ~gs_msg_baccarat_history();

  gs_msg_baccarat_history(const gs_msg_baccarat_history& from);

  inline gs_msg_baccarat_history& operator=(const gs_msg_baccarat_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_baccarat_history& default_instance();

  void Swap(gs_msg_baccarat_history* other);

  // implements Message ----------------------------------------------

  gs_msg_baccarat_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_baccarat_history& from);
  void MergeFrom(const gs_msg_baccarat_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_tie = 1;
  inline bool has_is_tie() const;
  inline void clear_is_tie();
  static const int kIsTieFieldNumber = 1;
  inline bool is_tie() const;
  inline void set_is_tie(bool value);

  // optional bool is_player_win = 2;
  inline bool has_is_player_win() const;
  inline void clear_is_player_win();
  static const int kIsPlayerWinFieldNumber = 2;
  inline bool is_player_win() const;
  inline void set_is_player_win(bool value);

  // optional bool is_player_pair = 3;
  inline bool has_is_player_pair() const;
  inline void clear_is_player_pair();
  static const int kIsPlayerPairFieldNumber = 3;
  inline bool is_player_pair() const;
  inline void set_is_player_pair(bool value);

  // optional bool is_banker_pair = 4;
  inline bool has_is_banker_pair() const;
  inline void clear_is_banker_pair();
  static const int kIsBankerPairFieldNumber = 4;
  inline bool is_banker_pair() const;
  inline void set_is_banker_pair(bool value);

  // optional bool is_banker_win = 5;
  inline bool has_is_banker_win() const;
  inline void clear_is_banker_win();
  static const int kIsBankerWinFieldNumber = 5;
  inline bool is_banker_win() const;
  inline void set_is_banker_win(bool value);

  // optional int32 win_point = 6;
  inline bool has_win_point() const;
  inline void clear_win_point();
  static const int kWinPointFieldNumber = 6;
  inline ::google::protobuf::int32 win_point() const;
  inline void set_win_point(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_baccarat_history)
 private:
  inline void set_has_is_tie();
  inline void clear_has_is_tie();
  inline void set_has_is_player_win();
  inline void clear_has_is_player_win();
  inline void set_has_is_player_pair();
  inline void clear_has_is_player_pair();
  inline void set_has_is_banker_pair();
  inline void clear_has_is_banker_pair();
  inline void set_has_is_banker_win();
  inline void clear_has_is_banker_win();
  inline void set_has_win_point();
  inline void clear_has_win_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_tie_;
  bool is_player_win_;
  bool is_player_pair_;
  bool is_banker_pair_;
  bool is_banker_win_;
  ::google::protobuf::int32 win_point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_baccarat_history* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_baccarat_room_info : public ::google::protobuf::Message {
 public:
  gs_msg_baccarat_room_info();
  virtual ~gs_msg_baccarat_room_info();

  gs_msg_baccarat_room_info(const gs_msg_baccarat_room_info& from);

  inline gs_msg_baccarat_room_info& operator=(const gs_msg_baccarat_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_baccarat_room_info& default_instance();

  void Swap(gs_msg_baccarat_room_info* other);

  // implements Message ----------------------------------------------

  gs_msg_baccarat_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_baccarat_room_info& from);
  void MergeFrom(const gs_msg_baccarat_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  inline bool has_base_room_info() const;
  inline void clear_base_room_info();
  static const int kBaseRoomInfoFieldNumber = 1;
  inline const ::client2gstate_protocols::gs_base_room_info& base_room_info() const;
  inline ::client2gstate_protocols::gs_base_room_info* mutable_base_room_info();
  inline ::client2gstate_protocols::gs_base_room_info* release_base_room_info();
  inline void set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info);

  // repeated .client2gstate_protocols.gs_msg_baccarat_history baccarat_info = 2;
  inline int baccarat_info_size() const;
  inline void clear_baccarat_info();
  static const int kBaccaratInfoFieldNumber = 2;
  inline const ::client2gstate_protocols::gs_msg_baccarat_history& baccarat_info(int index) const;
  inline ::client2gstate_protocols::gs_msg_baccarat_history* mutable_baccarat_info(int index);
  inline ::client2gstate_protocols::gs_msg_baccarat_history* add_baccarat_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_baccarat_history >&
      baccarat_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_baccarat_history >*
      mutable_baccarat_info();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_baccarat_room_info)
 private:
  inline void set_has_base_room_info();
  inline void clear_has_base_room_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client2gstate_protocols::gs_base_room_info* base_room_info_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_baccarat_history > baccarat_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_baccarat_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetgs2c_baccarat_game_history_result : public ::google::protobuf::Message {
 public:
  packetgs2c_baccarat_game_history_result();
  virtual ~packetgs2c_baccarat_game_history_result();

  packetgs2c_baccarat_game_history_result(const packetgs2c_baccarat_game_history_result& from);

  inline packetgs2c_baccarat_game_history_result& operator=(const packetgs2c_baccarat_game_history_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetgs2c_baccarat_game_history_result& default_instance();

  void Swap(packetgs2c_baccarat_game_history_result* other);

  // implements Message ----------------------------------------------

  packetgs2c_baccarat_game_history_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetgs2c_baccarat_game_history_result& from);
  void MergeFrom(const packetgs2c_baccarat_game_history_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_baccarat_history_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional int32 all_data_flag = 2;
  inline bool has_all_data_flag() const;
  inline void clear_all_data_flag();
  static const int kAllDataFlagFieldNumber = 2;
  inline ::google::protobuf::int32 all_data_flag() const;
  inline void set_all_data_flag(::google::protobuf::int32 value);

  // repeated .client2gstate_protocols.gs_msg_baccarat_room_info room_history = 3;
  inline int room_history_size() const;
  inline void clear_room_history();
  static const int kRoomHistoryFieldNumber = 3;
  inline const ::client2gstate_protocols::gs_msg_baccarat_room_info& room_history(int index) const;
  inline ::client2gstate_protocols::gs_msg_baccarat_room_info* mutable_room_history(int index);
  inline ::client2gstate_protocols::gs_msg_baccarat_room_info* add_room_history();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_baccarat_room_info >&
      room_history() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_baccarat_room_info >*
      mutable_room_history();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetgs2c_baccarat_game_history_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_all_data_flag();
  inline void clear_has_all_data_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 all_data_flag_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_baccarat_room_info > room_history_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetgs2c_baccarat_game_history_result* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_goldshark_history : public ::google::protobuf::Message {
 public:
  gs_msg_goldshark_history();
  virtual ~gs_msg_goldshark_history();

  gs_msg_goldshark_history(const gs_msg_goldshark_history& from);

  inline gs_msg_goldshark_history& operator=(const gs_msg_goldshark_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_goldshark_history& default_instance();

  void Swap(gs_msg_goldshark_history* other);

  // implements Message ----------------------------------------------

  gs_msg_goldshark_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_goldshark_history& from);
  void MergeFrom(const gs_msg_goldshark_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_goldshark_history)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_goldshark_history* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_goldshark_room_info : public ::google::protobuf::Message {
 public:
  gs_msg_goldshark_room_info();
  virtual ~gs_msg_goldshark_room_info();

  gs_msg_goldshark_room_info(const gs_msg_goldshark_room_info& from);

  inline gs_msg_goldshark_room_info& operator=(const gs_msg_goldshark_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_goldshark_room_info& default_instance();

  void Swap(gs_msg_goldshark_room_info* other);

  // implements Message ----------------------------------------------

  gs_msg_goldshark_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_goldshark_room_info& from);
  void MergeFrom(const gs_msg_goldshark_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  inline bool has_base_room_info() const;
  inline void clear_base_room_info();
  static const int kBaseRoomInfoFieldNumber = 1;
  inline const ::client2gstate_protocols::gs_base_room_info& base_room_info() const;
  inline ::client2gstate_protocols::gs_base_room_info* mutable_base_room_info();
  inline ::client2gstate_protocols::gs_base_room_info* release_base_room_info();
  inline void set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info);

  // repeated .client2gstate_protocols.gs_msg_goldshark_history goldshark_info = 2;
  inline int goldshark_info_size() const;
  inline void clear_goldshark_info();
  static const int kGoldsharkInfoFieldNumber = 2;
  inline const ::client2gstate_protocols::gs_msg_goldshark_history& goldshark_info(int index) const;
  inline ::client2gstate_protocols::gs_msg_goldshark_history* mutable_goldshark_info(int index);
  inline ::client2gstate_protocols::gs_msg_goldshark_history* add_goldshark_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_goldshark_history >&
      goldshark_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_goldshark_history >*
      mutable_goldshark_info();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_goldshark_room_info)
 private:
  inline void set_has_base_room_info();
  inline void clear_has_base_room_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client2gstate_protocols::gs_base_room_info* base_room_info_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_goldshark_history > goldshark_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_goldshark_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetgs2c_goldshark_game_history_result : public ::google::protobuf::Message {
 public:
  packetgs2c_goldshark_game_history_result();
  virtual ~packetgs2c_goldshark_game_history_result();

  packetgs2c_goldshark_game_history_result(const packetgs2c_goldshark_game_history_result& from);

  inline packetgs2c_goldshark_game_history_result& operator=(const packetgs2c_goldshark_game_history_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetgs2c_goldshark_game_history_result& default_instance();

  void Swap(packetgs2c_goldshark_game_history_result* other);

  // implements Message ----------------------------------------------

  packetgs2c_goldshark_game_history_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetgs2c_goldshark_game_history_result& from);
  void MergeFrom(const packetgs2c_goldshark_game_history_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_goldshark_history_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional int32 all_data_flag = 2;
  inline bool has_all_data_flag() const;
  inline void clear_all_data_flag();
  static const int kAllDataFlagFieldNumber = 2;
  inline ::google::protobuf::int32 all_data_flag() const;
  inline void set_all_data_flag(::google::protobuf::int32 value);

  // repeated .client2gstate_protocols.gs_msg_goldshark_room_info room_history = 3;
  inline int room_history_size() const;
  inline void clear_room_history();
  static const int kRoomHistoryFieldNumber = 3;
  inline const ::client2gstate_protocols::gs_msg_goldshark_room_info& room_history(int index) const;
  inline ::client2gstate_protocols::gs_msg_goldshark_room_info* mutable_room_history(int index);
  inline ::client2gstate_protocols::gs_msg_goldshark_room_info* add_room_history();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_goldshark_room_info >&
      room_history() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_goldshark_room_info >*
      mutable_room_history();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetgs2c_goldshark_game_history_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_all_data_flag();
  inline void clear_has_all_data_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 all_data_flag_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_goldshark_room_info > room_history_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetgs2c_goldshark_game_history_result* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_lhd_history : public ::google::protobuf::Message {
 public:
  gs_msg_lhd_history();
  virtual ~gs_msg_lhd_history();

  gs_msg_lhd_history(const gs_msg_lhd_history& from);

  inline gs_msg_lhd_history& operator=(const gs_msg_lhd_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_lhd_history& default_instance();

  void Swap(gs_msg_lhd_history* other);

  // implements Message ----------------------------------------------

  gs_msg_lhd_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_lhd_history& from);
  void MergeFrom(const gs_msg_lhd_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cards_info = 1;
  inline bool has_cards_info() const;
  inline void clear_cards_info();
  static const int kCardsInfoFieldNumber = 1;
  inline ::google::protobuf::int32 cards_info() const;
  inline void set_cards_info(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_lhd_history)
 private:
  inline void set_has_cards_info();
  inline void clear_has_cards_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cards_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_lhd_history* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_lhd_room_info : public ::google::protobuf::Message {
 public:
  gs_msg_lhd_room_info();
  virtual ~gs_msg_lhd_room_info();

  gs_msg_lhd_room_info(const gs_msg_lhd_room_info& from);

  inline gs_msg_lhd_room_info& operator=(const gs_msg_lhd_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_lhd_room_info& default_instance();

  void Swap(gs_msg_lhd_room_info* other);

  // implements Message ----------------------------------------------

  gs_msg_lhd_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_lhd_room_info& from);
  void MergeFrom(const gs_msg_lhd_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  inline bool has_base_room_info() const;
  inline void clear_base_room_info();
  static const int kBaseRoomInfoFieldNumber = 1;
  inline const ::client2gstate_protocols::gs_base_room_info& base_room_info() const;
  inline ::client2gstate_protocols::gs_base_room_info* mutable_base_room_info();
  inline ::client2gstate_protocols::gs_base_room_info* release_base_room_info();
  inline void set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info);

  // repeated int32 total_win = 2;
  inline int total_win_size() const;
  inline void clear_total_win();
  static const int kTotalWinFieldNumber = 2;
  inline ::google::protobuf::int32 total_win(int index) const;
  inline void set_total_win(int index, ::google::protobuf::int32 value);
  inline void add_total_win(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      total_win() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_total_win();

  // repeated int32 total_lose = 3;
  inline int total_lose_size() const;
  inline void clear_total_lose();
  static const int kTotalLoseFieldNumber = 3;
  inline ::google::protobuf::int32 total_lose(int index) const;
  inline void set_total_lose(int index, ::google::protobuf::int32 value);
  inline void add_total_lose(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      total_lose() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_total_lose();

  // repeated .client2gstate_protocols.gs_msg_lhd_history lhd_info = 4;
  inline int lhd_info_size() const;
  inline void clear_lhd_info();
  static const int kLhdInfoFieldNumber = 4;
  inline const ::client2gstate_protocols::gs_msg_lhd_history& lhd_info(int index) const;
  inline ::client2gstate_protocols::gs_msg_lhd_history* mutable_lhd_info(int index);
  inline ::client2gstate_protocols::gs_msg_lhd_history* add_lhd_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_lhd_history >&
      lhd_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_lhd_history >*
      mutable_lhd_info();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_lhd_room_info)
 private:
  inline void set_has_base_room_info();
  inline void clear_has_base_room_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client2gstate_protocols::gs_base_room_info* base_room_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > total_win_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > total_lose_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_lhd_history > lhd_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_lhd_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetgs2c_lhd_game_history_result : public ::google::protobuf::Message {
 public:
  packetgs2c_lhd_game_history_result();
  virtual ~packetgs2c_lhd_game_history_result();

  packetgs2c_lhd_game_history_result(const packetgs2c_lhd_game_history_result& from);

  inline packetgs2c_lhd_game_history_result& operator=(const packetgs2c_lhd_game_history_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetgs2c_lhd_game_history_result& default_instance();

  void Swap(packetgs2c_lhd_game_history_result* other);

  // implements Message ----------------------------------------------

  packetgs2c_lhd_game_history_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetgs2c_lhd_game_history_result& from);
  void MergeFrom(const packetgs2c_lhd_game_history_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_lhd_history_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional int32 all_data_flag = 2;
  inline bool has_all_data_flag() const;
  inline void clear_all_data_flag();
  static const int kAllDataFlagFieldNumber = 2;
  inline ::google::protobuf::int32 all_data_flag() const;
  inline void set_all_data_flag(::google::protobuf::int32 value);

  // repeated .client2gstate_protocols.gs_msg_lhd_room_info room_history = 3;
  inline int room_history_size() const;
  inline void clear_room_history();
  static const int kRoomHistoryFieldNumber = 3;
  inline const ::client2gstate_protocols::gs_msg_lhd_room_info& room_history(int index) const;
  inline ::client2gstate_protocols::gs_msg_lhd_room_info* mutable_room_history(int index);
  inline ::client2gstate_protocols::gs_msg_lhd_room_info* add_room_history();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_lhd_room_info >&
      room_history() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_lhd_room_info >*
      mutable_room_history();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetgs2c_lhd_game_history_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_all_data_flag();
  inline void clear_has_all_data_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 all_data_flag_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_lhd_room_info > room_history_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetgs2c_lhd_game_history_result* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_benzbmw_history : public ::google::protobuf::Message {
 public:
  gs_msg_benzbmw_history();
  virtual ~gs_msg_benzbmw_history();

  gs_msg_benzbmw_history(const gs_msg_benzbmw_history& from);

  inline gs_msg_benzbmw_history& operator=(const gs_msg_benzbmw_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_benzbmw_history& default_instance();

  void Swap(gs_msg_benzbmw_history* other);

  // implements Message ----------------------------------------------

  gs_msg_benzbmw_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_benzbmw_history& from);
  void MergeFrom(const gs_msg_benzbmw_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_benzbmw_history)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_benzbmw_history* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_benzbmw_room_info : public ::google::protobuf::Message {
 public:
  gs_msg_benzbmw_room_info();
  virtual ~gs_msg_benzbmw_room_info();

  gs_msg_benzbmw_room_info(const gs_msg_benzbmw_room_info& from);

  inline gs_msg_benzbmw_room_info& operator=(const gs_msg_benzbmw_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_benzbmw_room_info& default_instance();

  void Swap(gs_msg_benzbmw_room_info* other);

  // implements Message ----------------------------------------------

  gs_msg_benzbmw_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_benzbmw_room_info& from);
  void MergeFrom(const gs_msg_benzbmw_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  inline bool has_base_room_info() const;
  inline void clear_base_room_info();
  static const int kBaseRoomInfoFieldNumber = 1;
  inline const ::client2gstate_protocols::gs_base_room_info& base_room_info() const;
  inline ::client2gstate_protocols::gs_base_room_info* mutable_base_room_info();
  inline ::client2gstate_protocols::gs_base_room_info* release_base_room_info();
  inline void set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info);

  // repeated .client2gstate_protocols.gs_msg_benzbmw_history card_road_info = 2;
  inline int card_road_info_size() const;
  inline void clear_card_road_info();
  static const int kCardRoadInfoFieldNumber = 2;
  inline const ::client2gstate_protocols::gs_msg_benzbmw_history& card_road_info(int index) const;
  inline ::client2gstate_protocols::gs_msg_benzbmw_history* mutable_card_road_info(int index);
  inline ::client2gstate_protocols::gs_msg_benzbmw_history* add_card_road_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_benzbmw_history >&
      card_road_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_benzbmw_history >*
      mutable_card_road_info();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_benzbmw_room_info)
 private:
  inline void set_has_base_room_info();
  inline void clear_has_base_room_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client2gstate_protocols::gs_base_room_info* base_room_info_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_benzbmw_history > card_road_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_benzbmw_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetgs2c_benzbmw_game_history_result : public ::google::protobuf::Message {
 public:
  packetgs2c_benzbmw_game_history_result();
  virtual ~packetgs2c_benzbmw_game_history_result();

  packetgs2c_benzbmw_game_history_result(const packetgs2c_benzbmw_game_history_result& from);

  inline packetgs2c_benzbmw_game_history_result& operator=(const packetgs2c_benzbmw_game_history_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetgs2c_benzbmw_game_history_result& default_instance();

  void Swap(packetgs2c_benzbmw_game_history_result* other);

  // implements Message ----------------------------------------------

  packetgs2c_benzbmw_game_history_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetgs2c_benzbmw_game_history_result& from);
  void MergeFrom(const packetgs2c_benzbmw_game_history_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_benzbmw_history_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional int32 all_data_flag = 2;
  inline bool has_all_data_flag() const;
  inline void clear_all_data_flag();
  static const int kAllDataFlagFieldNumber = 2;
  inline ::google::protobuf::int32 all_data_flag() const;
  inline void set_all_data_flag(::google::protobuf::int32 value);

  // repeated .client2gstate_protocols.gs_msg_benzbmw_room_info room_history = 3;
  inline int room_history_size() const;
  inline void clear_room_history();
  static const int kRoomHistoryFieldNumber = 3;
  inline const ::client2gstate_protocols::gs_msg_benzbmw_room_info& room_history(int index) const;
  inline ::client2gstate_protocols::gs_msg_benzbmw_room_info* mutable_room_history(int index);
  inline ::client2gstate_protocols::gs_msg_benzbmw_room_info* add_room_history();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_benzbmw_room_info >&
      room_history() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_benzbmw_room_info >*
      mutable_room_history();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetgs2c_benzbmw_game_history_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_all_data_flag();
  inline void clear_has_all_data_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 all_data_flag_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_benzbmw_room_info > room_history_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetgs2c_benzbmw_game_history_result* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_multiredblack_history : public ::google::protobuf::Message {
 public:
  gs_msg_multiredblack_history();
  virtual ~gs_msg_multiredblack_history();

  gs_msg_multiredblack_history(const gs_msg_multiredblack_history& from);

  inline gs_msg_multiredblack_history& operator=(const gs_msg_multiredblack_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_multiredblack_history& default_instance();

  void Swap(gs_msg_multiredblack_history* other);

  // implements Message ----------------------------------------------

  gs_msg_multiredblack_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_multiredblack_history& from);
  void MergeFrom(const gs_msg_multiredblack_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_multiredblack_history)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_multiredblack_history* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_multiredblack_room_info : public ::google::protobuf::Message {
 public:
  gs_msg_multiredblack_room_info();
  virtual ~gs_msg_multiredblack_room_info();

  gs_msg_multiredblack_room_info(const gs_msg_multiredblack_room_info& from);

  inline gs_msg_multiredblack_room_info& operator=(const gs_msg_multiredblack_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_multiredblack_room_info& default_instance();

  void Swap(gs_msg_multiredblack_room_info* other);

  // implements Message ----------------------------------------------

  gs_msg_multiredblack_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_multiredblack_room_info& from);
  void MergeFrom(const gs_msg_multiredblack_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  inline bool has_base_room_info() const;
  inline void clear_base_room_info();
  static const int kBaseRoomInfoFieldNumber = 1;
  inline const ::client2gstate_protocols::gs_base_room_info& base_room_info() const;
  inline ::client2gstate_protocols::gs_base_room_info* mutable_base_room_info();
  inline ::client2gstate_protocols::gs_base_room_info* release_base_room_info();
  inline void set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info);

  // repeated .client2gstate_protocols.gs_msg_multiredblack_history card_road_info = 2;
  inline int card_road_info_size() const;
  inline void clear_card_road_info();
  static const int kCardRoadInfoFieldNumber = 2;
  inline const ::client2gstate_protocols::gs_msg_multiredblack_history& card_road_info(int index) const;
  inline ::client2gstate_protocols::gs_msg_multiredblack_history* mutable_card_road_info(int index);
  inline ::client2gstate_protocols::gs_msg_multiredblack_history* add_card_road_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_multiredblack_history >&
      card_road_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_multiredblack_history >*
      mutable_card_road_info();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_multiredblack_room_info)
 private:
  inline void set_has_base_room_info();
  inline void clear_has_base_room_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client2gstate_protocols::gs_base_room_info* base_room_info_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_multiredblack_history > card_road_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_multiredblack_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetgs2c_multiredblack_game_history_result : public ::google::protobuf::Message {
 public:
  packetgs2c_multiredblack_game_history_result();
  virtual ~packetgs2c_multiredblack_game_history_result();

  packetgs2c_multiredblack_game_history_result(const packetgs2c_multiredblack_game_history_result& from);

  inline packetgs2c_multiredblack_game_history_result& operator=(const packetgs2c_multiredblack_game_history_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetgs2c_multiredblack_game_history_result& default_instance();

  void Swap(packetgs2c_multiredblack_game_history_result* other);

  // implements Message ----------------------------------------------

  packetgs2c_multiredblack_game_history_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetgs2c_multiredblack_game_history_result& from);
  void MergeFrom(const packetgs2c_multiredblack_game_history_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_multiredblack_history_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional int32 all_data_flag = 2;
  inline bool has_all_data_flag() const;
  inline void clear_all_data_flag();
  static const int kAllDataFlagFieldNumber = 2;
  inline ::google::protobuf::int32 all_data_flag() const;
  inline void set_all_data_flag(::google::protobuf::int32 value);

  // repeated .client2gstate_protocols.gs_msg_multiredblack_room_info room_history = 3;
  inline int room_history_size() const;
  inline void clear_room_history();
  static const int kRoomHistoryFieldNumber = 3;
  inline const ::client2gstate_protocols::gs_msg_multiredblack_room_info& room_history(int index) const;
  inline ::client2gstate_protocols::gs_msg_multiredblack_room_info* mutable_room_history(int index);
  inline ::client2gstate_protocols::gs_msg_multiredblack_room_info* add_room_history();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_multiredblack_room_info >&
      room_history() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_multiredblack_room_info >*
      mutable_room_history();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetgs2c_multiredblack_game_history_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_all_data_flag();
  inline void clear_has_all_data_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 all_data_flag_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_multiredblack_room_info > room_history_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetgs2c_multiredblack_game_history_result* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_ebg_history : public ::google::protobuf::Message {
 public:
  gs_msg_ebg_history();
  virtual ~gs_msg_ebg_history();

  gs_msg_ebg_history(const gs_msg_ebg_history& from);

  inline gs_msg_ebg_history& operator=(const gs_msg_ebg_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_ebg_history& default_instance();

  void Swap(gs_msg_ebg_history* other);

  // implements Message ----------------------------------------------

  gs_msg_ebg_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_ebg_history& from);
  void MergeFrom(const gs_msg_ebg_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool is_win = 1;
  inline int is_win_size() const;
  inline void clear_is_win();
  static const int kIsWinFieldNumber = 1;
  inline bool is_win(int index) const;
  inline void set_is_win(int index, bool value);
  inline void add_is_win(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      is_win() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_is_win();

  // repeated int32 cards_id = 2;
  inline int cards_id_size() const;
  inline void clear_cards_id();
  static const int kCardsIdFieldNumber = 2;
  inline ::google::protobuf::int32 cards_id(int index) const;
  inline void set_cards_id(int index, ::google::protobuf::int32 value);
  inline void add_cards_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards_id();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_ebg_history)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< bool > is_win_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_ebg_history* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_ebg_room_info : public ::google::protobuf::Message {
 public:
  gs_msg_ebg_room_info();
  virtual ~gs_msg_ebg_room_info();

  gs_msg_ebg_room_info(const gs_msg_ebg_room_info& from);

  inline gs_msg_ebg_room_info& operator=(const gs_msg_ebg_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_ebg_room_info& default_instance();

  void Swap(gs_msg_ebg_room_info* other);

  // implements Message ----------------------------------------------

  gs_msg_ebg_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_ebg_room_info& from);
  void MergeFrom(const gs_msg_ebg_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  inline bool has_base_room_info() const;
  inline void clear_base_room_info();
  static const int kBaseRoomInfoFieldNumber = 1;
  inline const ::client2gstate_protocols::gs_base_room_info& base_room_info() const;
  inline ::client2gstate_protocols::gs_base_room_info* mutable_base_room_info();
  inline ::client2gstate_protocols::gs_base_room_info* release_base_room_info();
  inline void set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info);

  // optional int32 total_count = 2;
  inline bool has_total_count() const;
  inline void clear_total_count();
  static const int kTotalCountFieldNumber = 2;
  inline ::google::protobuf::int32 total_count() const;
  inline void set_total_count(::google::protobuf::int32 value);

  // repeated int32 win_counts = 3;
  inline int win_counts_size() const;
  inline void clear_win_counts();
  static const int kWinCountsFieldNumber = 3;
  inline ::google::protobuf::int32 win_counts(int index) const;
  inline void set_win_counts(int index, ::google::protobuf::int32 value);
  inline void add_win_counts(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      win_counts() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_win_counts();

  // repeated int32 lose_counts = 4;
  inline int lose_counts_size() const;
  inline void clear_lose_counts();
  static const int kLoseCountsFieldNumber = 4;
  inline ::google::protobuf::int32 lose_counts(int index) const;
  inline void set_lose_counts(int index, ::google::protobuf::int32 value);
  inline void add_lose_counts(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lose_counts() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lose_counts();

  // repeated .client2gstate_protocols.gs_msg_ebg_history card_road_info = 5;
  inline int card_road_info_size() const;
  inline void clear_card_road_info();
  static const int kCardRoadInfoFieldNumber = 5;
  inline const ::client2gstate_protocols::gs_msg_ebg_history& card_road_info(int index) const;
  inline ::client2gstate_protocols::gs_msg_ebg_history* mutable_card_road_info(int index);
  inline ::client2gstate_protocols::gs_msg_ebg_history* add_card_road_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_ebg_history >&
      card_road_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_ebg_history >*
      mutable_card_road_info();

  // optional int32 banker_cnt = 6;
  inline bool has_banker_cnt() const;
  inline void clear_banker_cnt();
  static const int kBankerCntFieldNumber = 6;
  inline ::google::protobuf::int32 banker_cnt() const;
  inline void set_banker_cnt(::google::protobuf::int32 value);

  // repeated int32 out_cards = 7;
  inline int out_cards_size() const;
  inline void clear_out_cards();
  static const int kOutCardsFieldNumber = 7;
  inline ::google::protobuf::int32 out_cards(int index) const;
  inline void set_out_cards(int index, ::google::protobuf::int32 value);
  inline void add_out_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      out_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_out_cards();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_ebg_room_info)
 private:
  inline void set_has_base_room_info();
  inline void clear_has_base_room_info();
  inline void set_has_total_count();
  inline void clear_has_total_count();
  inline void set_has_banker_cnt();
  inline void clear_has_banker_cnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client2gstate_protocols::gs_base_room_info* base_room_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > win_counts_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lose_counts_;
  ::google::protobuf::int32 total_count_;
  ::google::protobuf::int32 banker_cnt_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_ebg_history > card_road_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > out_cards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_ebg_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetgs2c_ebg_game_history_result : public ::google::protobuf::Message {
 public:
  packetgs2c_ebg_game_history_result();
  virtual ~packetgs2c_ebg_game_history_result();

  packetgs2c_ebg_game_history_result(const packetgs2c_ebg_game_history_result& from);

  inline packetgs2c_ebg_game_history_result& operator=(const packetgs2c_ebg_game_history_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetgs2c_ebg_game_history_result& default_instance();

  void Swap(packetgs2c_ebg_game_history_result* other);

  // implements Message ----------------------------------------------

  packetgs2c_ebg_game_history_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetgs2c_ebg_game_history_result& from);
  void MergeFrom(const packetgs2c_ebg_game_history_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_ebg_history_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional int32 all_data_flag = 2;
  inline bool has_all_data_flag() const;
  inline void clear_all_data_flag();
  static const int kAllDataFlagFieldNumber = 2;
  inline ::google::protobuf::int32 all_data_flag() const;
  inline void set_all_data_flag(::google::protobuf::int32 value);

  // repeated .client2gstate_protocols.gs_msg_ebg_room_info room_history = 3;
  inline int room_history_size() const;
  inline void clear_room_history();
  static const int kRoomHistoryFieldNumber = 3;
  inline const ::client2gstate_protocols::gs_msg_ebg_room_info& room_history(int index) const;
  inline ::client2gstate_protocols::gs_msg_ebg_room_info* mutable_room_history(int index);
  inline ::client2gstate_protocols::gs_msg_ebg_room_info* add_room_history();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_ebg_room_info >&
      room_history() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_ebg_room_info >*
      mutable_room_history();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetgs2c_ebg_game_history_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_all_data_flag();
  inline void clear_has_all_data_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 all_data_flag_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_ebg_room_info > room_history_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetgs2c_ebg_game_history_result* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_dice_history : public ::google::protobuf::Message {
 public:
  gs_msg_dice_history();
  virtual ~gs_msg_dice_history();

  gs_msg_dice_history(const gs_msg_dice_history& from);

  inline gs_msg_dice_history& operator=(const gs_msg_dice_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_dice_history& default_instance();

  void Swap(gs_msg_dice_history* other);

  // implements Message ----------------------------------------------

  gs_msg_dice_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_dice_history& from);
  void MergeFrom(const gs_msg_dice_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 dice1 = 1;
  inline bool has_dice1() const;
  inline void clear_dice1();
  static const int kDice1FieldNumber = 1;
  inline ::google::protobuf::int32 dice1() const;
  inline void set_dice1(::google::protobuf::int32 value);

  // optional int32 dice2 = 2;
  inline bool has_dice2() const;
  inline void clear_dice2();
  static const int kDice2FieldNumber = 2;
  inline ::google::protobuf::int32 dice2() const;
  inline void set_dice2(::google::protobuf::int32 value);

  // optional int32 dice3 = 3;
  inline bool has_dice3() const;
  inline void clear_dice3();
  static const int kDice3FieldNumber = 3;
  inline ::google::protobuf::int32 dice3() const;
  inline void set_dice3(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_dice_history)
 private:
  inline void set_has_dice1();
  inline void clear_has_dice1();
  inline void set_has_dice2();
  inline void clear_has_dice2();
  inline void set_has_dice3();
  inline void clear_has_dice3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 dice1_;
  ::google::protobuf::int32 dice2_;
  ::google::protobuf::int32 dice3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_dice_history* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_dice_room_info : public ::google::protobuf::Message {
 public:
  gs_msg_dice_room_info();
  virtual ~gs_msg_dice_room_info();

  gs_msg_dice_room_info(const gs_msg_dice_room_info& from);

  inline gs_msg_dice_room_info& operator=(const gs_msg_dice_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_dice_room_info& default_instance();

  void Swap(gs_msg_dice_room_info* other);

  // implements Message ----------------------------------------------

  gs_msg_dice_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_dice_room_info& from);
  void MergeFrom(const gs_msg_dice_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  inline bool has_base_room_info() const;
  inline void clear_base_room_info();
  static const int kBaseRoomInfoFieldNumber = 1;
  inline const ::client2gstate_protocols::gs_base_room_info& base_room_info() const;
  inline ::client2gstate_protocols::gs_base_room_info* mutable_base_room_info();
  inline ::client2gstate_protocols::gs_base_room_info* release_base_room_info();
  inline void set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info);

  // repeated .client2gstate_protocols.gs_msg_dice_history card_road_info = 2;
  inline int card_road_info_size() const;
  inline void clear_card_road_info();
  static const int kCardRoadInfoFieldNumber = 2;
  inline const ::client2gstate_protocols::gs_msg_dice_history& card_road_info(int index) const;
  inline ::client2gstate_protocols::gs_msg_dice_history* mutable_card_road_info(int index);
  inline ::client2gstate_protocols::gs_msg_dice_history* add_card_road_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_dice_history >&
      card_road_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_dice_history >*
      mutable_card_road_info();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_dice_room_info)
 private:
  inline void set_has_base_room_info();
  inline void clear_has_base_room_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client2gstate_protocols::gs_base_room_info* base_room_info_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_dice_history > card_road_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_dice_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetgs2c_dice_game_history_result : public ::google::protobuf::Message {
 public:
  packetgs2c_dice_game_history_result();
  virtual ~packetgs2c_dice_game_history_result();

  packetgs2c_dice_game_history_result(const packetgs2c_dice_game_history_result& from);

  inline packetgs2c_dice_game_history_result& operator=(const packetgs2c_dice_game_history_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetgs2c_dice_game_history_result& default_instance();

  void Swap(packetgs2c_dice_game_history_result* other);

  // implements Message ----------------------------------------------

  packetgs2c_dice_game_history_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetgs2c_dice_game_history_result& from);
  void MergeFrom(const packetgs2c_dice_game_history_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_dice_history_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional int32 all_data_flag = 2;
  inline bool has_all_data_flag() const;
  inline void clear_all_data_flag();
  static const int kAllDataFlagFieldNumber = 2;
  inline ::google::protobuf::int32 all_data_flag() const;
  inline void set_all_data_flag(::google::protobuf::int32 value);

  // repeated .client2gstate_protocols.gs_msg_dice_room_info room_history = 3;
  inline int room_history_size() const;
  inline void clear_room_history();
  static const int kRoomHistoryFieldNumber = 3;
  inline const ::client2gstate_protocols::gs_msg_dice_room_info& room_history(int index) const;
  inline ::client2gstate_protocols::gs_msg_dice_room_info* mutable_room_history(int index);
  inline ::client2gstate_protocols::gs_msg_dice_room_info* add_room_history();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_dice_room_info >&
      room_history() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_dice_room_info >*
      mutable_room_history();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetgs2c_dice_game_history_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_all_data_flag();
  inline void clear_has_all_data_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 all_data_flag_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_dice_room_info > room_history_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetgs2c_dice_game_history_result* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_qznn_room_info : public ::google::protobuf::Message {
 public:
  gs_msg_qznn_room_info();
  virtual ~gs_msg_qznn_room_info();

  gs_msg_qznn_room_info(const gs_msg_qznn_room_info& from);

  inline gs_msg_qznn_room_info& operator=(const gs_msg_qznn_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_qznn_room_info& default_instance();

  void Swap(gs_msg_qznn_room_info* other);

  // implements Message ----------------------------------------------

  gs_msg_qznn_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_qznn_room_info& from);
  void MergeFrom(const gs_msg_qznn_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  inline bool has_base_room_info() const;
  inline void clear_base_room_info();
  static const int kBaseRoomInfoFieldNumber = 1;
  inline const ::client2gstate_protocols::gs_base_room_info& base_room_info() const;
  inline ::client2gstate_protocols::gs_base_room_info* mutable_base_room_info();
  inline ::client2gstate_protocols::gs_base_room_info* release_base_room_info();
  inline void set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info);

  // optional int64 total_award = 2;
  inline bool has_total_award() const;
  inline void clear_total_award();
  static const int kTotalAwardFieldNumber = 2;
  inline ::google::protobuf::int64 total_award() const;
  inline void set_total_award(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_qznn_room_info)
 private:
  inline void set_has_base_room_info();
  inline void clear_has_base_room_info();
  inline void set_has_total_award();
  inline void clear_has_total_award();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client2gstate_protocols::gs_base_room_info* base_room_info_;
  ::google::protobuf::int64 total_award_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_qznn_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetgs2c_qznn_game_history_result : public ::google::protobuf::Message {
 public:
  packetgs2c_qznn_game_history_result();
  virtual ~packetgs2c_qznn_game_history_result();

  packetgs2c_qznn_game_history_result(const packetgs2c_qznn_game_history_result& from);

  inline packetgs2c_qznn_game_history_result& operator=(const packetgs2c_qznn_game_history_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetgs2c_qznn_game_history_result& default_instance();

  void Swap(packetgs2c_qznn_game_history_result* other);

  // implements Message ----------------------------------------------

  packetgs2c_qznn_game_history_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetgs2c_qznn_game_history_result& from);
  void MergeFrom(const packetgs2c_qznn_game_history_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_qznn_history_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional int32 all_data_flag = 2;
  inline bool has_all_data_flag() const;
  inline void clear_all_data_flag();
  static const int kAllDataFlagFieldNumber = 2;
  inline ::google::protobuf::int32 all_data_flag() const;
  inline void set_all_data_flag(::google::protobuf::int32 value);

  // repeated .client2gstate_protocols.gs_msg_qznn_room_info room_history = 3;
  inline int room_history_size() const;
  inline void clear_room_history();
  static const int kRoomHistoryFieldNumber = 3;
  inline const ::client2gstate_protocols::gs_msg_qznn_room_info& room_history(int index) const;
  inline ::client2gstate_protocols::gs_msg_qznn_room_info* mutable_room_history(int index);
  inline ::client2gstate_protocols::gs_msg_qznn_room_info* add_room_history();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_qznn_room_info >&
      room_history() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_qznn_room_info >*
      mutable_room_history();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetgs2c_qznn_game_history_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_all_data_flag();
  inline void clear_has_all_data_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 all_data_flag_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_qznn_room_info > room_history_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetgs2c_qznn_game_history_result* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_tbnn_room_info : public ::google::protobuf::Message {
 public:
  gs_msg_tbnn_room_info();
  virtual ~gs_msg_tbnn_room_info();

  gs_msg_tbnn_room_info(const gs_msg_tbnn_room_info& from);

  inline gs_msg_tbnn_room_info& operator=(const gs_msg_tbnn_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_tbnn_room_info& default_instance();

  void Swap(gs_msg_tbnn_room_info* other);

  // implements Message ----------------------------------------------

  gs_msg_tbnn_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_tbnn_room_info& from);
  void MergeFrom(const gs_msg_tbnn_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  inline bool has_base_room_info() const;
  inline void clear_base_room_info();
  static const int kBaseRoomInfoFieldNumber = 1;
  inline const ::client2gstate_protocols::gs_base_room_info& base_room_info() const;
  inline ::client2gstate_protocols::gs_base_room_info* mutable_base_room_info();
  inline ::client2gstate_protocols::gs_base_room_info* release_base_room_info();
  inline void set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info);

  // optional int64 total_award = 2;
  inline bool has_total_award() const;
  inline void clear_total_award();
  static const int kTotalAwardFieldNumber = 2;
  inline ::google::protobuf::int64 total_award() const;
  inline void set_total_award(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_tbnn_room_info)
 private:
  inline void set_has_base_room_info();
  inline void clear_has_base_room_info();
  inline void set_has_total_award();
  inline void clear_has_total_award();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client2gstate_protocols::gs_base_room_info* base_room_info_;
  ::google::protobuf::int64 total_award_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_tbnn_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetgs2c_tbnn_game_history_result : public ::google::protobuf::Message {
 public:
  packetgs2c_tbnn_game_history_result();
  virtual ~packetgs2c_tbnn_game_history_result();

  packetgs2c_tbnn_game_history_result(const packetgs2c_tbnn_game_history_result& from);

  inline packetgs2c_tbnn_game_history_result& operator=(const packetgs2c_tbnn_game_history_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetgs2c_tbnn_game_history_result& default_instance();

  void Swap(packetgs2c_tbnn_game_history_result* other);

  // implements Message ----------------------------------------------

  packetgs2c_tbnn_game_history_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetgs2c_tbnn_game_history_result& from);
  void MergeFrom(const packetgs2c_tbnn_game_history_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_tbnn_history_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional int32 all_data_flag = 2;
  inline bool has_all_data_flag() const;
  inline void clear_all_data_flag();
  static const int kAllDataFlagFieldNumber = 2;
  inline ::google::protobuf::int32 all_data_flag() const;
  inline void set_all_data_flag(::google::protobuf::int32 value);

  // repeated .client2gstate_protocols.gs_msg_tbnn_room_info room_history = 3;
  inline int room_history_size() const;
  inline void clear_room_history();
  static const int kRoomHistoryFieldNumber = 3;
  inline const ::client2gstate_protocols::gs_msg_tbnn_room_info& room_history(int index) const;
  inline ::client2gstate_protocols::gs_msg_tbnn_room_info* mutable_room_history(int index);
  inline ::client2gstate_protocols::gs_msg_tbnn_room_info* add_room_history();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_tbnn_room_info >&
      room_history() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_tbnn_room_info >*
      mutable_room_history();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetgs2c_tbnn_game_history_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_all_data_flag();
  inline void clear_has_all_data_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 all_data_flag_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_tbnn_room_info > room_history_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetgs2c_tbnn_game_history_result* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_carsmagnate_history : public ::google::protobuf::Message {
 public:
  gs_msg_carsmagnate_history();
  virtual ~gs_msg_carsmagnate_history();

  gs_msg_carsmagnate_history(const gs_msg_carsmagnate_history& from);

  inline gs_msg_carsmagnate_history& operator=(const gs_msg_carsmagnate_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_carsmagnate_history& default_instance();

  void Swap(gs_msg_carsmagnate_history* other);

  // implements Message ----------------------------------------------

  gs_msg_carsmagnate_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_carsmagnate_history& from);
  void MergeFrom(const gs_msg_carsmagnate_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 history_val = 1;
  inline bool has_history_val() const;
  inline void clear_history_val();
  static const int kHistoryValFieldNumber = 1;
  inline ::google::protobuf::int32 history_val() const;
  inline void set_history_val(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_carsmagnate_history)
 private:
  inline void set_has_history_val();
  inline void clear_has_history_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 history_val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_carsmagnate_history* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_carsmagnate_room_info : public ::google::protobuf::Message {
 public:
  gs_msg_carsmagnate_room_info();
  virtual ~gs_msg_carsmagnate_room_info();

  gs_msg_carsmagnate_room_info(const gs_msg_carsmagnate_room_info& from);

  inline gs_msg_carsmagnate_room_info& operator=(const gs_msg_carsmagnate_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_carsmagnate_room_info& default_instance();

  void Swap(gs_msg_carsmagnate_room_info* other);

  // implements Message ----------------------------------------------

  gs_msg_carsmagnate_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_carsmagnate_room_info& from);
  void MergeFrom(const gs_msg_carsmagnate_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  inline bool has_base_room_info() const;
  inline void clear_base_room_info();
  static const int kBaseRoomInfoFieldNumber = 1;
  inline const ::client2gstate_protocols::gs_base_room_info& base_room_info() const;
  inline ::client2gstate_protocols::gs_base_room_info* mutable_base_room_info();
  inline ::client2gstate_protocols::gs_base_room_info* release_base_room_info();
  inline void set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info);

  // repeated .client2gstate_protocols.gs_msg_carsmagnate_history card_road_info = 2;
  inline int card_road_info_size() const;
  inline void clear_card_road_info();
  static const int kCardRoadInfoFieldNumber = 2;
  inline const ::client2gstate_protocols::gs_msg_carsmagnate_history& card_road_info(int index) const;
  inline ::client2gstate_protocols::gs_msg_carsmagnate_history* mutable_card_road_info(int index);
  inline ::client2gstate_protocols::gs_msg_carsmagnate_history* add_card_road_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_carsmagnate_history >&
      card_road_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_carsmagnate_history >*
      mutable_card_road_info();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_carsmagnate_room_info)
 private:
  inline void set_has_base_room_info();
  inline void clear_has_base_room_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client2gstate_protocols::gs_base_room_info* base_room_info_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_carsmagnate_history > card_road_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_carsmagnate_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetgs2c_carsmagnate_game_history_result : public ::google::protobuf::Message {
 public:
  packetgs2c_carsmagnate_game_history_result();
  virtual ~packetgs2c_carsmagnate_game_history_result();

  packetgs2c_carsmagnate_game_history_result(const packetgs2c_carsmagnate_game_history_result& from);

  inline packetgs2c_carsmagnate_game_history_result& operator=(const packetgs2c_carsmagnate_game_history_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetgs2c_carsmagnate_game_history_result& default_instance();

  void Swap(packetgs2c_carsmagnate_game_history_result* other);

  // implements Message ----------------------------------------------

  packetgs2c_carsmagnate_game_history_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetgs2c_carsmagnate_game_history_result& from);
  void MergeFrom(const packetgs2c_carsmagnate_game_history_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_carsmagnate_history_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional int32 all_data_flag = 2;
  inline bool has_all_data_flag() const;
  inline void clear_all_data_flag();
  static const int kAllDataFlagFieldNumber = 2;
  inline ::google::protobuf::int32 all_data_flag() const;
  inline void set_all_data_flag(::google::protobuf::int32 value);

  // repeated .client2gstate_protocols.gs_msg_carsmagnate_room_info room_history = 3;
  inline int room_history_size() const;
  inline void clear_room_history();
  static const int kRoomHistoryFieldNumber = 3;
  inline const ::client2gstate_protocols::gs_msg_carsmagnate_room_info& room_history(int index) const;
  inline ::client2gstate_protocols::gs_msg_carsmagnate_room_info* mutable_room_history(int index);
  inline ::client2gstate_protocols::gs_msg_carsmagnate_room_info* add_room_history();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_carsmagnate_room_info >&
      room_history() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_carsmagnate_room_info >*
      mutable_room_history();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetgs2c_carsmagnate_game_history_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_all_data_flag();
  inline void clear_has_all_data_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 all_data_flag_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_carsmagnate_room_info > room_history_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetgs2c_carsmagnate_game_history_result* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_multitexas_history : public ::google::protobuf::Message {
 public:
  gs_msg_multitexas_history();
  virtual ~gs_msg_multitexas_history();

  gs_msg_multitexas_history(const gs_msg_multitexas_history& from);

  inline gs_msg_multitexas_history& operator=(const gs_msg_multitexas_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_multitexas_history& default_instance();

  void Swap(gs_msg_multitexas_history* other);

  // implements Message ----------------------------------------------

  gs_msg_multitexas_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_multitexas_history& from);
  void MergeFrom(const gs_msg_multitexas_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 win = 1;
  inline int win_size() const;
  inline void clear_win();
  static const int kWinFieldNumber = 1;
  inline ::google::protobuf::int32 win(int index) const;
  inline void set_win(int index, ::google::protobuf::int32 value);
  inline void add_win(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      win() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_win();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_multitexas_history)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_multitexas_history* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_multitexas_room_info : public ::google::protobuf::Message {
 public:
  gs_msg_multitexas_room_info();
  virtual ~gs_msg_multitexas_room_info();

  gs_msg_multitexas_room_info(const gs_msg_multitexas_room_info& from);

  inline gs_msg_multitexas_room_info& operator=(const gs_msg_multitexas_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_multitexas_room_info& default_instance();

  void Swap(gs_msg_multitexas_room_info* other);

  // implements Message ----------------------------------------------

  gs_msg_multitexas_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_multitexas_room_info& from);
  void MergeFrom(const gs_msg_multitexas_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  inline bool has_base_room_info() const;
  inline void clear_base_room_info();
  static const int kBaseRoomInfoFieldNumber = 1;
  inline const ::client2gstate_protocols::gs_base_room_info& base_room_info() const;
  inline ::client2gstate_protocols::gs_base_room_info* mutable_base_room_info();
  inline ::client2gstate_protocols::gs_base_room_info* release_base_room_info();
  inline void set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info);

  // repeated .client2gstate_protocols.gs_msg_multitexas_history card_road_info = 2;
  inline int card_road_info_size() const;
  inline void clear_card_road_info();
  static const int kCardRoadInfoFieldNumber = 2;
  inline const ::client2gstate_protocols::gs_msg_multitexas_history& card_road_info(int index) const;
  inline ::client2gstate_protocols::gs_msg_multitexas_history* mutable_card_road_info(int index);
  inline ::client2gstate_protocols::gs_msg_multitexas_history* add_card_road_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_multitexas_history >&
      card_road_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_multitexas_history >*
      mutable_card_road_info();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_multitexas_room_info)
 private:
  inline void set_has_base_room_info();
  inline void clear_has_base_room_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client2gstate_protocols::gs_base_room_info* base_room_info_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_multitexas_history > card_road_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_multitexas_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetgs2c_multitexas_game_history_result : public ::google::protobuf::Message {
 public:
  packetgs2c_multitexas_game_history_result();
  virtual ~packetgs2c_multitexas_game_history_result();

  packetgs2c_multitexas_game_history_result(const packetgs2c_multitexas_game_history_result& from);

  inline packetgs2c_multitexas_game_history_result& operator=(const packetgs2c_multitexas_game_history_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetgs2c_multitexas_game_history_result& default_instance();

  void Swap(packetgs2c_multitexas_game_history_result* other);

  // implements Message ----------------------------------------------

  packetgs2c_multitexas_game_history_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetgs2c_multitexas_game_history_result& from);
  void MergeFrom(const packetgs2c_multitexas_game_history_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_multitexas_history_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional int32 all_data_flag = 2;
  inline bool has_all_data_flag() const;
  inline void clear_all_data_flag();
  static const int kAllDataFlagFieldNumber = 2;
  inline ::google::protobuf::int32 all_data_flag() const;
  inline void set_all_data_flag(::google::protobuf::int32 value);

  // repeated .client2gstate_protocols.gs_msg_multitexas_room_info room_history = 3;
  inline int room_history_size() const;
  inline void clear_room_history();
  static const int kRoomHistoryFieldNumber = 3;
  inline const ::client2gstate_protocols::gs_msg_multitexas_room_info& room_history(int index) const;
  inline ::client2gstate_protocols::gs_msg_multitexas_room_info* mutable_room_history(int index);
  inline ::client2gstate_protocols::gs_msg_multitexas_room_info* add_room_history();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_multitexas_room_info >&
      room_history() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_multitexas_room_info >*
      mutable_room_history();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetgs2c_multitexas_game_history_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_all_data_flag();
  inline void clear_has_all_data_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 all_data_flag_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_multitexas_room_info > room_history_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetgs2c_multitexas_game_history_result* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_fruits_history : public ::google::protobuf::Message {
 public:
  gs_msg_fruits_history();
  virtual ~gs_msg_fruits_history();

  gs_msg_fruits_history(const gs_msg_fruits_history& from);

  inline gs_msg_fruits_history& operator=(const gs_msg_fruits_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_fruits_history& default_instance();

  void Swap(gs_msg_fruits_history* other);

  // implements Message ----------------------------------------------

  gs_msg_fruits_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_fruits_history& from);
  void MergeFrom(const gs_msg_fruits_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 history_val = 1;
  inline bool has_history_val() const;
  inline void clear_history_val();
  static const int kHistoryValFieldNumber = 1;
  inline ::google::protobuf::int32 history_val() const;
  inline void set_history_val(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_fruits_history)
 private:
  inline void set_has_history_val();
  inline void clear_has_history_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 history_val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_fruits_history* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_fruits_room_info : public ::google::protobuf::Message {
 public:
  gs_msg_fruits_room_info();
  virtual ~gs_msg_fruits_room_info();

  gs_msg_fruits_room_info(const gs_msg_fruits_room_info& from);

  inline gs_msg_fruits_room_info& operator=(const gs_msg_fruits_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_fruits_room_info& default_instance();

  void Swap(gs_msg_fruits_room_info* other);

  // implements Message ----------------------------------------------

  gs_msg_fruits_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_fruits_room_info& from);
  void MergeFrom(const gs_msg_fruits_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  inline bool has_base_room_info() const;
  inline void clear_base_room_info();
  static const int kBaseRoomInfoFieldNumber = 1;
  inline const ::client2gstate_protocols::gs_base_room_info& base_room_info() const;
  inline ::client2gstate_protocols::gs_base_room_info* mutable_base_room_info();
  inline ::client2gstate_protocols::gs_base_room_info* release_base_room_info();
  inline void set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info);

  // repeated .client2gstate_protocols.gs_msg_fruits_history card_road_info = 2;
  inline int card_road_info_size() const;
  inline void clear_card_road_info();
  static const int kCardRoadInfoFieldNumber = 2;
  inline const ::client2gstate_protocols::gs_msg_fruits_history& card_road_info(int index) const;
  inline ::client2gstate_protocols::gs_msg_fruits_history* mutable_card_road_info(int index);
  inline ::client2gstate_protocols::gs_msg_fruits_history* add_card_road_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_fruits_history >&
      card_road_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_fruits_history >*
      mutable_card_road_info();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_fruits_room_info)
 private:
  inline void set_has_base_room_info();
  inline void clear_has_base_room_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client2gstate_protocols::gs_base_room_info* base_room_info_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_fruits_history > card_road_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_fruits_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetgs2c_fruits_game_history_result : public ::google::protobuf::Message {
 public:
  packetgs2c_fruits_game_history_result();
  virtual ~packetgs2c_fruits_game_history_result();

  packetgs2c_fruits_game_history_result(const packetgs2c_fruits_game_history_result& from);

  inline packetgs2c_fruits_game_history_result& operator=(const packetgs2c_fruits_game_history_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetgs2c_fruits_game_history_result& default_instance();

  void Swap(packetgs2c_fruits_game_history_result* other);

  // implements Message ----------------------------------------------

  packetgs2c_fruits_game_history_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetgs2c_fruits_game_history_result& from);
  void MergeFrom(const packetgs2c_fruits_game_history_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_fruits_history_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional int32 all_data_flag = 2;
  inline bool has_all_data_flag() const;
  inline void clear_all_data_flag();
  static const int kAllDataFlagFieldNumber = 2;
  inline ::google::protobuf::int32 all_data_flag() const;
  inline void set_all_data_flag(::google::protobuf::int32 value);

  // repeated .client2gstate_protocols.gs_msg_fruits_room_info room_history = 3;
  inline int room_history_size() const;
  inline void clear_room_history();
  static const int kRoomHistoryFieldNumber = 3;
  inline const ::client2gstate_protocols::gs_msg_fruits_room_info& room_history(int index) const;
  inline ::client2gstate_protocols::gs_msg_fruits_room_info* mutable_room_history(int index);
  inline ::client2gstate_protocols::gs_msg_fruits_room_info* add_room_history();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_fruits_room_info >&
      room_history() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_fruits_room_info >*
      mutable_room_history();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetgs2c_fruits_game_history_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_all_data_flag();
  inline void clear_has_all_data_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 all_data_flag_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_fruits_room_info > room_history_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetgs2c_fruits_game_history_result* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_forest_history : public ::google::protobuf::Message {
 public:
  gs_msg_forest_history();
  virtual ~gs_msg_forest_history();

  gs_msg_forest_history(const gs_msg_forest_history& from);

  inline gs_msg_forest_history& operator=(const gs_msg_forest_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_forest_history& default_instance();

  void Swap(gs_msg_forest_history* other);

  // implements Message ----------------------------------------------

  gs_msg_forest_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_forest_history& from);
  void MergeFrom(const gs_msg_forest_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 history_val = 1;
  inline bool has_history_val() const;
  inline void clear_history_val();
  static const int kHistoryValFieldNumber = 1;
  inline ::google::protobuf::int32 history_val() const;
  inline void set_history_val(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_forest_history)
 private:
  inline void set_has_history_val();
  inline void clear_has_history_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 history_val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_forest_history* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_forest_room_info : public ::google::protobuf::Message {
 public:
  gs_msg_forest_room_info();
  virtual ~gs_msg_forest_room_info();

  gs_msg_forest_room_info(const gs_msg_forest_room_info& from);

  inline gs_msg_forest_room_info& operator=(const gs_msg_forest_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_forest_room_info& default_instance();

  void Swap(gs_msg_forest_room_info* other);

  // implements Message ----------------------------------------------

  gs_msg_forest_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_forest_room_info& from);
  void MergeFrom(const gs_msg_forest_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  inline bool has_base_room_info() const;
  inline void clear_base_room_info();
  static const int kBaseRoomInfoFieldNumber = 1;
  inline const ::client2gstate_protocols::gs_base_room_info& base_room_info() const;
  inline ::client2gstate_protocols::gs_base_room_info* mutable_base_room_info();
  inline ::client2gstate_protocols::gs_base_room_info* release_base_room_info();
  inline void set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info);

  // repeated .client2gstate_protocols.gs_msg_forest_history card_road_info = 2;
  inline int card_road_info_size() const;
  inline void clear_card_road_info();
  static const int kCardRoadInfoFieldNumber = 2;
  inline const ::client2gstate_protocols::gs_msg_forest_history& card_road_info(int index) const;
  inline ::client2gstate_protocols::gs_msg_forest_history* mutable_card_road_info(int index);
  inline ::client2gstate_protocols::gs_msg_forest_history* add_card_road_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_forest_history >&
      card_road_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_forest_history >*
      mutable_card_road_info();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_forest_room_info)
 private:
  inline void set_has_base_room_info();
  inline void clear_has_base_room_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client2gstate_protocols::gs_base_room_info* base_room_info_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_forest_history > card_road_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_forest_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetgs2c_forest_game_history_result : public ::google::protobuf::Message {
 public:
  packetgs2c_forest_game_history_result();
  virtual ~packetgs2c_forest_game_history_result();

  packetgs2c_forest_game_history_result(const packetgs2c_forest_game_history_result& from);

  inline packetgs2c_forest_game_history_result& operator=(const packetgs2c_forest_game_history_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetgs2c_forest_game_history_result& default_instance();

  void Swap(packetgs2c_forest_game_history_result* other);

  // implements Message ----------------------------------------------

  packetgs2c_forest_game_history_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetgs2c_forest_game_history_result& from);
  void MergeFrom(const packetgs2c_forest_game_history_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_forest_history_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional int32 all_data_flag = 2;
  inline bool has_all_data_flag() const;
  inline void clear_all_data_flag();
  static const int kAllDataFlagFieldNumber = 2;
  inline ::google::protobuf::int32 all_data_flag() const;
  inline void set_all_data_flag(::google::protobuf::int32 value);

  // repeated .client2gstate_protocols.gs_msg_forest_room_info room_history = 3;
  inline int room_history_size() const;
  inline void clear_room_history();
  static const int kRoomHistoryFieldNumber = 3;
  inline const ::client2gstate_protocols::gs_msg_forest_room_info& room_history(int index) const;
  inline ::client2gstate_protocols::gs_msg_forest_room_info* mutable_room_history(int index);
  inline ::client2gstate_protocols::gs_msg_forest_room_info* add_room_history();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_forest_room_info >&
      room_history() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_forest_room_info >*
      mutable_room_history();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetgs2c_forest_game_history_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_all_data_flag();
  inline void clear_has_all_data_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 all_data_flag_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_forest_room_info > room_history_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetgs2c_forest_game_history_result* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_fourcolorball_history : public ::google::protobuf::Message {
 public:
  gs_msg_fourcolorball_history();
  virtual ~gs_msg_fourcolorball_history();

  gs_msg_fourcolorball_history(const gs_msg_fourcolorball_history& from);

  inline gs_msg_fourcolorball_history& operator=(const gs_msg_fourcolorball_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_fourcolorball_history& default_instance();

  void Swap(gs_msg_fourcolorball_history* other);

  // implements Message ----------------------------------------------

  gs_msg_fourcolorball_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_fourcolorball_history& from);
  void MergeFrom(const gs_msg_fourcolorball_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 history_val = 1;
  inline bool has_history_val() const;
  inline void clear_history_val();
  static const int kHistoryValFieldNumber = 1;
  inline ::google::protobuf::int32 history_val() const;
  inline void set_history_val(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_fourcolorball_history)
 private:
  inline void set_has_history_val();
  inline void clear_has_history_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 history_val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_fourcolorball_history* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_fourcolorball_room_info : public ::google::protobuf::Message {
 public:
  gs_msg_fourcolorball_room_info();
  virtual ~gs_msg_fourcolorball_room_info();

  gs_msg_fourcolorball_room_info(const gs_msg_fourcolorball_room_info& from);

  inline gs_msg_fourcolorball_room_info& operator=(const gs_msg_fourcolorball_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_fourcolorball_room_info& default_instance();

  void Swap(gs_msg_fourcolorball_room_info* other);

  // implements Message ----------------------------------------------

  gs_msg_fourcolorball_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_fourcolorball_room_info& from);
  void MergeFrom(const gs_msg_fourcolorball_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  inline bool has_base_room_info() const;
  inline void clear_base_room_info();
  static const int kBaseRoomInfoFieldNumber = 1;
  inline const ::client2gstate_protocols::gs_base_room_info& base_room_info() const;
  inline ::client2gstate_protocols::gs_base_room_info* mutable_base_room_info();
  inline ::client2gstate_protocols::gs_base_room_info* release_base_room_info();
  inline void set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info);

  // repeated .client2gstate_protocols.gs_msg_fourcolorball_history card_road_info = 2;
  inline int card_road_info_size() const;
  inline void clear_card_road_info();
  static const int kCardRoadInfoFieldNumber = 2;
  inline const ::client2gstate_protocols::gs_msg_fourcolorball_history& card_road_info(int index) const;
  inline ::client2gstate_protocols::gs_msg_fourcolorball_history* mutable_card_road_info(int index);
  inline ::client2gstate_protocols::gs_msg_fourcolorball_history* add_card_road_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_fourcolorball_history >&
      card_road_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_fourcolorball_history >*
      mutable_card_road_info();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_fourcolorball_room_info)
 private:
  inline void set_has_base_room_info();
  inline void clear_has_base_room_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client2gstate_protocols::gs_base_room_info* base_room_info_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_fourcolorball_history > card_road_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_fourcolorball_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetgs2c_fourcolorball_game_history_result : public ::google::protobuf::Message {
 public:
  packetgs2c_fourcolorball_game_history_result();
  virtual ~packetgs2c_fourcolorball_game_history_result();

  packetgs2c_fourcolorball_game_history_result(const packetgs2c_fourcolorball_game_history_result& from);

  inline packetgs2c_fourcolorball_game_history_result& operator=(const packetgs2c_fourcolorball_game_history_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetgs2c_fourcolorball_game_history_result& default_instance();

  void Swap(packetgs2c_fourcolorball_game_history_result* other);

  // implements Message ----------------------------------------------

  packetgs2c_fourcolorball_game_history_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetgs2c_fourcolorball_game_history_result& from);
  void MergeFrom(const packetgs2c_fourcolorball_game_history_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_fourcolorball_history_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional int32 all_data_flag = 2;
  inline bool has_all_data_flag() const;
  inline void clear_all_data_flag();
  static const int kAllDataFlagFieldNumber = 2;
  inline ::google::protobuf::int32 all_data_flag() const;
  inline void set_all_data_flag(::google::protobuf::int32 value);

  // repeated .client2gstate_protocols.gs_msg_fourcolorball_room_info room_history = 3;
  inline int room_history_size() const;
  inline void clear_room_history();
  static const int kRoomHistoryFieldNumber = 3;
  inline const ::client2gstate_protocols::gs_msg_fourcolorball_room_info& room_history(int index) const;
  inline ::client2gstate_protocols::gs_msg_fourcolorball_room_info* mutable_room_history(int index);
  inline ::client2gstate_protocols::gs_msg_fourcolorball_room_info* add_room_history();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_fourcolorball_room_info >&
      room_history() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_fourcolorball_room_info >*
      mutable_room_history();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetgs2c_fourcolorball_game_history_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_all_data_flag();
  inline void clear_has_all_data_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 all_data_flag_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_fourcolorball_room_info > room_history_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetgs2c_fourcolorball_game_history_result* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_happySupremacy_history : public ::google::protobuf::Message {
 public:
  gs_msg_happySupremacy_history();
  virtual ~gs_msg_happySupremacy_history();

  gs_msg_happySupremacy_history(const gs_msg_happySupremacy_history& from);

  inline gs_msg_happySupremacy_history& operator=(const gs_msg_happySupremacy_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_happySupremacy_history& default_instance();

  void Swap(gs_msg_happySupremacy_history* other);

  // implements Message ----------------------------------------------

  gs_msg_happySupremacy_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_happySupremacy_history& from);
  void MergeFrom(const gs_msg_happySupremacy_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_forward_win = 1;
  inline bool has_is_forward_win() const;
  inline void clear_is_forward_win();
  static const int kIsForwardWinFieldNumber = 1;
  inline bool is_forward_win() const;
  inline void set_is_forward_win(bool value);

  // optional bool is_reverse_win = 2;
  inline bool has_is_reverse_win() const;
  inline void clear_is_reverse_win();
  static const int kIsReverseWinFieldNumber = 2;
  inline bool is_reverse_win() const;
  inline void set_is_reverse_win(bool value);

  // optional bool is_opposite_win = 3;
  inline bool has_is_opposite_win() const;
  inline void clear_is_opposite_win();
  static const int kIsOppositeWinFieldNumber = 3;
  inline bool is_opposite_win() const;
  inline void set_is_opposite_win(bool value);

  // repeated int32 cards = 4;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 4;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // repeated int32 cards_type = 5;
  inline int cards_type_size() const;
  inline void clear_cards_type();
  static const int kCardsTypeFieldNumber = 5;
  inline ::google::protobuf::int32 cards_type(int index) const;
  inline void set_cards_type(int index, ::google::protobuf::int32 value);
  inline void add_cards_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards_type();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_happySupremacy_history)
 private:
  inline void set_has_is_forward_win();
  inline void clear_has_is_forward_win();
  inline void set_has_is_reverse_win();
  inline void clear_has_is_reverse_win();
  inline void set_has_is_opposite_win();
  inline void clear_has_is_opposite_win();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_type_;
  bool is_forward_win_;
  bool is_reverse_win_;
  bool is_opposite_win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_happySupremacy_history* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_happySupremacy_room_info : public ::google::protobuf::Message {
 public:
  gs_msg_happySupremacy_room_info();
  virtual ~gs_msg_happySupremacy_room_info();

  gs_msg_happySupremacy_room_info(const gs_msg_happySupremacy_room_info& from);

  inline gs_msg_happySupremacy_room_info& operator=(const gs_msg_happySupremacy_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_happySupremacy_room_info& default_instance();

  void Swap(gs_msg_happySupremacy_room_info* other);

  // implements Message ----------------------------------------------

  gs_msg_happySupremacy_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_happySupremacy_room_info& from);
  void MergeFrom(const gs_msg_happySupremacy_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  inline bool has_base_room_info() const;
  inline void clear_base_room_info();
  static const int kBaseRoomInfoFieldNumber = 1;
  inline const ::client2gstate_protocols::gs_base_room_info& base_room_info() const;
  inline ::client2gstate_protocols::gs_base_room_info* mutable_base_room_info();
  inline ::client2gstate_protocols::gs_base_room_info* release_base_room_info();
  inline void set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info);

  // repeated .client2gstate_protocols.gs_msg_happySupremacy_history card_road_info = 2;
  inline int card_road_info_size() const;
  inline void clear_card_road_info();
  static const int kCardRoadInfoFieldNumber = 2;
  inline const ::client2gstate_protocols::gs_msg_happySupremacy_history& card_road_info(int index) const;
  inline ::client2gstate_protocols::gs_msg_happySupremacy_history* mutable_card_road_info(int index);
  inline ::client2gstate_protocols::gs_msg_happySupremacy_history* add_card_road_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_happySupremacy_history >&
      card_road_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_happySupremacy_history >*
      mutable_card_road_info();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_happySupremacy_room_info)
 private:
  inline void set_has_base_room_info();
  inline void clear_has_base_room_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client2gstate_protocols::gs_base_room_info* base_room_info_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_happySupremacy_history > card_road_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_happySupremacy_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetgs2c_happySupremacy_game_history_result : public ::google::protobuf::Message {
 public:
  packetgs2c_happySupremacy_game_history_result();
  virtual ~packetgs2c_happySupremacy_game_history_result();

  packetgs2c_happySupremacy_game_history_result(const packetgs2c_happySupremacy_game_history_result& from);

  inline packetgs2c_happySupremacy_game_history_result& operator=(const packetgs2c_happySupremacy_game_history_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetgs2c_happySupremacy_game_history_result& default_instance();

  void Swap(packetgs2c_happySupremacy_game_history_result* other);

  // implements Message ----------------------------------------------

  packetgs2c_happySupremacy_game_history_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetgs2c_happySupremacy_game_history_result& from);
  void MergeFrom(const packetgs2c_happySupremacy_game_history_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_happySupremacy_history_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional int32 all_data_flag = 2;
  inline bool has_all_data_flag() const;
  inline void clear_all_data_flag();
  static const int kAllDataFlagFieldNumber = 2;
  inline ::google::protobuf::int32 all_data_flag() const;
  inline void set_all_data_flag(::google::protobuf::int32 value);

  // repeated .client2gstate_protocols.gs_msg_happySupremacy_room_info room_history = 3;
  inline int room_history_size() const;
  inline void clear_room_history();
  static const int kRoomHistoryFieldNumber = 3;
  inline const ::client2gstate_protocols::gs_msg_happySupremacy_room_info& room_history(int index) const;
  inline ::client2gstate_protocols::gs_msg_happySupremacy_room_info* mutable_room_history(int index);
  inline ::client2gstate_protocols::gs_msg_happySupremacy_room_info* add_room_history();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_happySupremacy_room_info >&
      room_history() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_happySupremacy_room_info >*
      mutable_room_history();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetgs2c_happySupremacy_game_history_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_all_data_flag();
  inline void clear_has_all_data_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 all_data_flag_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_happySupremacy_room_info > room_history_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetgs2c_happySupremacy_game_history_result* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_ttz_history : public ::google::protobuf::Message {
 public:
  gs_msg_ttz_history();
  virtual ~gs_msg_ttz_history();

  gs_msg_ttz_history(const gs_msg_ttz_history& from);

  inline gs_msg_ttz_history& operator=(const gs_msg_ttz_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_ttz_history& default_instance();

  void Swap(gs_msg_ttz_history* other);

  // implements Message ----------------------------------------------

  gs_msg_ttz_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_ttz_history& from);
  void MergeFrom(const gs_msg_ttz_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 cardid = 1;
  inline int cardid_size() const;
  inline void clear_cardid();
  static const int kCardidFieldNumber = 1;
  inline ::google::protobuf::int32 cardid(int index) const;
  inline void set_cardid(int index, ::google::protobuf::int32 value);
  inline void add_cardid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cardid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cardid();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_ttz_history)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cardid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_ttz_history* default_instance_;
};
// -------------------------------------------------------------------

class gs_msg_ttz_room_info : public ::google::protobuf::Message {
 public:
  gs_msg_ttz_room_info();
  virtual ~gs_msg_ttz_room_info();

  gs_msg_ttz_room_info(const gs_msg_ttz_room_info& from);

  inline gs_msg_ttz_room_info& operator=(const gs_msg_ttz_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_msg_ttz_room_info& default_instance();

  void Swap(gs_msg_ttz_room_info* other);

  // implements Message ----------------------------------------------

  gs_msg_ttz_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_msg_ttz_room_info& from);
  void MergeFrom(const gs_msg_ttz_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  inline bool has_base_room_info() const;
  inline void clear_base_room_info();
  static const int kBaseRoomInfoFieldNumber = 1;
  inline const ::client2gstate_protocols::gs_base_room_info& base_room_info() const;
  inline ::client2gstate_protocols::gs_base_room_info* mutable_base_room_info();
  inline ::client2gstate_protocols::gs_base_room_info* release_base_room_info();
  inline void set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info);

  // repeated .client2gstate_protocols.gs_msg_ttz_history card_road_info = 2;
  inline int card_road_info_size() const;
  inline void clear_card_road_info();
  static const int kCardRoadInfoFieldNumber = 2;
  inline const ::client2gstate_protocols::gs_msg_ttz_history& card_road_info(int index) const;
  inline ::client2gstate_protocols::gs_msg_ttz_history* mutable_card_road_info(int index);
  inline ::client2gstate_protocols::gs_msg_ttz_history* add_card_road_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_ttz_history >&
      card_road_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_ttz_history >*
      mutable_card_road_info();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.gs_msg_ttz_room_info)
 private:
  inline void set_has_base_room_info();
  inline void clear_has_base_room_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client2gstate_protocols::gs_base_room_info* base_room_info_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_ttz_history > card_road_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gs_msg_ttz_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetgs2c_ttz_game_history_result : public ::google::protobuf::Message {
 public:
  packetgs2c_ttz_game_history_result();
  virtual ~packetgs2c_ttz_game_history_result();

  packetgs2c_ttz_game_history_result(const packetgs2c_ttz_game_history_result& from);

  inline packetgs2c_ttz_game_history_result& operator=(const packetgs2c_ttz_game_history_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetgs2c_ttz_game_history_result& default_instance();

  void Swap(packetgs2c_ttz_game_history_result* other);

  // implements Message ----------------------------------------------

  packetgs2c_ttz_game_history_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetgs2c_ttz_game_history_result& from);
  void MergeFrom(const packetgs2c_ttz_game_history_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_ttz_history_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2gstate_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2gstate_protocols::e_server_msg_type value);

  // optional int32 all_data_flag = 2;
  inline bool has_all_data_flag() const;
  inline void clear_all_data_flag();
  static const int kAllDataFlagFieldNumber = 2;
  inline ::google::protobuf::int32 all_data_flag() const;
  inline void set_all_data_flag(::google::protobuf::int32 value);

  // repeated .client2gstate_protocols.gs_msg_ttz_room_info room_history = 3;
  inline int room_history_size() const;
  inline void clear_room_history();
  static const int kRoomHistoryFieldNumber = 3;
  inline const ::client2gstate_protocols::gs_msg_ttz_room_info& room_history(int index) const;
  inline ::client2gstate_protocols::gs_msg_ttz_room_info* mutable_room_history(int index);
  inline ::client2gstate_protocols::gs_msg_ttz_room_info* add_room_history();
  inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_ttz_room_info >&
      room_history() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_ttz_room_info >*
      mutable_room_history();

  // @@protoc_insertion_point(class_scope:client2gstate_protocols.packetgs2c_ttz_game_history_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_all_data_flag();
  inline void clear_has_all_data_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 all_data_flag_;
  ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_ttz_room_info > room_history_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetgs2c_ttz_game_history_result* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2gs_player_connect

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2gs_player_connect];
inline bool packetc2gs_player_connect::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2gs_player_connect::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2gs_player_connect::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2gs_player_connect::clear_packet_id() {
  packet_id_ = 30001;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetc2gs_player_connect::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2gs_player_connect::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 playerid = 2;
inline bool packetc2gs_player_connect::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2gs_player_connect::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2gs_player_connect::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2gs_player_connect::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 packetc2gs_player_connect::playerid() const {
  return playerid_;
}
inline void packetc2gs_player_connect::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional int32 gameid = 3;
inline bool packetc2gs_player_connect::has_gameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2gs_player_connect::set_has_gameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2gs_player_connect::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2gs_player_connect::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 packetc2gs_player_connect::gameid() const {
  return gameid_;
}
inline void packetc2gs_player_connect::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// -------------------------------------------------------------------

// packetgs2c_player_connect_result

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_player_connect_result];
inline bool packetgs2c_player_connect_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetgs2c_player_connect_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetgs2c_player_connect_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetgs2c_player_connect_result::clear_packet_id() {
  packet_id_ = 31001;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetgs2c_player_connect_result::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetgs2c_player_connect_result::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_unknow];
inline bool packetgs2c_player_connect_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetgs2c_player_connect_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetgs2c_player_connect_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetgs2c_player_connect_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetgs2c_player_connect_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetgs2c_player_connect_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2gs_player_disconnect

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2gs_player_disconnect];
inline bool packetc2gs_player_disconnect::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2gs_player_disconnect::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2gs_player_disconnect::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2gs_player_disconnect::clear_packet_id() {
  packet_id_ = 30002;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetc2gs_player_disconnect::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2gs_player_disconnect::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 playerid = 2;
inline bool packetc2gs_player_disconnect::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2gs_player_disconnect::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2gs_player_disconnect::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2gs_player_disconnect::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 packetc2gs_player_disconnect::playerid() const {
  return playerid_;
}
inline void packetc2gs_player_disconnect::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// packetgs2c_player_disconnect_result

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_player_disconnect_result];
inline bool packetgs2c_player_disconnect_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetgs2c_player_disconnect_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetgs2c_player_disconnect_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetgs2c_player_disconnect_result::clear_packet_id() {
  packet_id_ = 31002;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetgs2c_player_disconnect_result::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetgs2c_player_disconnect_result::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_unknow];
inline bool packetgs2c_player_disconnect_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetgs2c_player_disconnect_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetgs2c_player_disconnect_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetgs2c_player_disconnect_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetgs2c_player_disconnect_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetgs2c_player_disconnect_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2gs_game_history

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2gs_game_history];
inline bool packetc2gs_game_history::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2gs_game_history::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2gs_game_history::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2gs_game_history::clear_packet_id() {
  packet_id_ = 30003;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetc2gs_game_history::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2gs_game_history::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 gameid = 2;
inline bool packetc2gs_game_history::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2gs_game_history::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2gs_game_history::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2gs_game_history::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 packetc2gs_game_history::gameid() const {
  return gameid_;
}
inline void packetc2gs_game_history::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// -------------------------------------------------------------------

// gs_base_room_info

// optional int32 game_id = 1;
inline bool gs_base_room_info::has_game_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_base_room_info::set_has_game_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_base_room_info::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_base_room_info::clear_game_id() {
  game_id_ = 0;
  clear_has_game_id();
}
inline ::google::protobuf::int32 gs_base_room_info::game_id() const {
  return game_id_;
}
inline void gs_base_room_info::set_game_id(::google::protobuf::int32 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional int32 room_id = 2;
inline bool gs_base_room_info::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_base_room_info::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_base_room_info::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_base_room_info::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 gs_base_room_info::room_id() const {
  return room_id_;
}
inline void gs_base_room_info::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional int32 game_state = 3;
inline bool gs_base_room_info::has_game_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_base_room_info::set_has_game_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_base_room_info::clear_has_game_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_base_room_info::clear_game_state() {
  game_state_ = 0;
  clear_has_game_state();
}
inline ::google::protobuf::int32 gs_base_room_info::game_state() const {
  return game_state_;
}
inline void gs_base_room_info::set_game_state(::google::protobuf::int32 value) {
  set_has_game_state();
  game_state_ = value;
}

// optional int32 state_time = 4;
inline bool gs_base_room_info::has_state_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_base_room_info::set_has_state_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_base_room_info::clear_has_state_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_base_room_info::clear_state_time() {
  state_time_ = 0;
  clear_has_state_time();
}
inline ::google::protobuf::int32 gs_base_room_info::state_time() const {
  return state_time_;
}
inline void gs_base_room_info::set_state_time(::google::protobuf::int32 value) {
  set_has_state_time();
  state_time_ = value;
}

// optional int64 time_stamp = 5;
inline bool gs_base_room_info::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gs_base_room_info::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gs_base_room_info::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gs_base_room_info::clear_time_stamp() {
  time_stamp_ = GOOGLE_LONGLONG(0);
  clear_has_time_stamp();
}
inline ::google::protobuf::int64 gs_base_room_info::time_stamp() const {
  return time_stamp_;
}
inline void gs_base_room_info::set_time_stamp(::google::protobuf::int64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
}

// optional int32 calc_time = 6;
inline bool gs_base_room_info::has_calc_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gs_base_room_info::set_has_calc_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gs_base_room_info::clear_has_calc_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gs_base_room_info::clear_calc_time() {
  calc_time_ = 0;
  clear_has_calc_time();
}
inline ::google::protobuf::int32 gs_base_room_info::calc_time() const {
  return calc_time_;
}
inline void gs_base_room_info::set_calc_time(::google::protobuf::int32 value) {
  set_has_calc_time();
  calc_time_ = value;
}

// -------------------------------------------------------------------

// gs_msg_cows_history

// repeated bool is_win = 1;
inline int gs_msg_cows_history::is_win_size() const {
  return is_win_.size();
}
inline void gs_msg_cows_history::clear_is_win() {
  is_win_.Clear();
}
inline bool gs_msg_cows_history::is_win(int index) const {
  return is_win_.Get(index);
}
inline void gs_msg_cows_history::set_is_win(int index, bool value) {
  is_win_.Set(index, value);
}
inline void gs_msg_cows_history::add_is_win(bool value) {
  is_win_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
gs_msg_cows_history::is_win() const {
  return is_win_;
}
inline ::google::protobuf::RepeatedField< bool >*
gs_msg_cows_history::mutable_is_win() {
  return &is_win_;
}

// -------------------------------------------------------------------

// gs_msg_cows_room_history

// optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
inline bool gs_msg_cows_room_history::has_base_room_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_cows_room_history::set_has_base_room_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_cows_room_history::clear_has_base_room_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_cows_room_history::clear_base_room_info() {
  if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
  clear_has_base_room_info();
}
inline const ::client2gstate_protocols::gs_base_room_info& gs_msg_cows_room_history::base_room_info() const {
  return base_room_info_ != NULL ? *base_room_info_ : *default_instance_->base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_cows_room_history::mutable_base_room_info() {
  set_has_base_room_info();
  if (base_room_info_ == NULL) base_room_info_ = new ::client2gstate_protocols::gs_base_room_info;
  return base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_cows_room_history::release_base_room_info() {
  clear_has_base_room_info();
  ::client2gstate_protocols::gs_base_room_info* temp = base_room_info_;
  base_room_info_ = NULL;
  return temp;
}
inline void gs_msg_cows_room_history::set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info) {
  delete base_room_info_;
  base_room_info_ = base_room_info;
  if (base_room_info) {
    set_has_base_room_info();
  } else {
    clear_has_base_room_info();
  }
}

// optional int32 total_count = 2;
inline bool gs_msg_cows_room_history::has_total_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_msg_cows_room_history::set_has_total_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_msg_cows_room_history::clear_has_total_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_msg_cows_room_history::clear_total_count() {
  total_count_ = 0;
  clear_has_total_count();
}
inline ::google::protobuf::int32 gs_msg_cows_room_history::total_count() const {
  return total_count_;
}
inline void gs_msg_cows_room_history::set_total_count(::google::protobuf::int32 value) {
  set_has_total_count();
  total_count_ = value;
}

// repeated int32 win_counts = 3;
inline int gs_msg_cows_room_history::win_counts_size() const {
  return win_counts_.size();
}
inline void gs_msg_cows_room_history::clear_win_counts() {
  win_counts_.Clear();
}
inline ::google::protobuf::int32 gs_msg_cows_room_history::win_counts(int index) const {
  return win_counts_.Get(index);
}
inline void gs_msg_cows_room_history::set_win_counts(int index, ::google::protobuf::int32 value) {
  win_counts_.Set(index, value);
}
inline void gs_msg_cows_room_history::add_win_counts(::google::protobuf::int32 value) {
  win_counts_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gs_msg_cows_room_history::win_counts() const {
  return win_counts_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gs_msg_cows_room_history::mutable_win_counts() {
  return &win_counts_;
}

// repeated int32 lose_counts = 4;
inline int gs_msg_cows_room_history::lose_counts_size() const {
  return lose_counts_.size();
}
inline void gs_msg_cows_room_history::clear_lose_counts() {
  lose_counts_.Clear();
}
inline ::google::protobuf::int32 gs_msg_cows_room_history::lose_counts(int index) const {
  return lose_counts_.Get(index);
}
inline void gs_msg_cows_room_history::set_lose_counts(int index, ::google::protobuf::int32 value) {
  lose_counts_.Set(index, value);
}
inline void gs_msg_cows_room_history::add_lose_counts(::google::protobuf::int32 value) {
  lose_counts_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gs_msg_cows_room_history::lose_counts() const {
  return lose_counts_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gs_msg_cows_room_history::mutable_lose_counts() {
  return &lose_counts_;
}

// repeated .client2gstate_protocols.gs_msg_cows_history history_list = 5;
inline int gs_msg_cows_room_history::history_list_size() const {
  return history_list_.size();
}
inline void gs_msg_cows_room_history::clear_history_list() {
  history_list_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_cows_history& gs_msg_cows_room_history::history_list(int index) const {
  return history_list_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_cows_history* gs_msg_cows_room_history::mutable_history_list(int index) {
  return history_list_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_cows_history* gs_msg_cows_room_history::add_history_list() {
  return history_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_cows_history >&
gs_msg_cows_room_history::history_list() const {
  return history_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_cows_history >*
gs_msg_cows_room_history::mutable_history_list() {
  return &history_list_;
}

// -------------------------------------------------------------------

// packetgs2c_cows_game_history_result

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_cows_history_result];
inline bool packetgs2c_cows_game_history_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetgs2c_cows_game_history_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetgs2c_cows_game_history_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetgs2c_cows_game_history_result::clear_packet_id() {
  packet_id_ = 31005;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetgs2c_cows_game_history_result::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetgs2c_cows_game_history_result::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 all_data_flag = 2;
inline bool packetgs2c_cows_game_history_result::has_all_data_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetgs2c_cows_game_history_result::set_has_all_data_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetgs2c_cows_game_history_result::clear_has_all_data_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetgs2c_cows_game_history_result::clear_all_data_flag() {
  all_data_flag_ = 0;
  clear_has_all_data_flag();
}
inline ::google::protobuf::int32 packetgs2c_cows_game_history_result::all_data_flag() const {
  return all_data_flag_;
}
inline void packetgs2c_cows_game_history_result::set_all_data_flag(::google::protobuf::int32 value) {
  set_has_all_data_flag();
  all_data_flag_ = value;
}

// repeated .client2gstate_protocols.gs_msg_cows_room_history room_history = 3;
inline int packetgs2c_cows_game_history_result::room_history_size() const {
  return room_history_.size();
}
inline void packetgs2c_cows_game_history_result::clear_room_history() {
  room_history_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_cows_room_history& packetgs2c_cows_game_history_result::room_history(int index) const {
  return room_history_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_cows_room_history* packetgs2c_cows_game_history_result::mutable_room_history(int index) {
  return room_history_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_cows_room_history* packetgs2c_cows_game_history_result::add_room_history() {
  return room_history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_cows_room_history >&
packetgs2c_cows_game_history_result::room_history() const {
  return room_history_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_cows_room_history >*
packetgs2c_cows_game_history_result::mutable_room_history() {
  return &room_history_;
}

// -------------------------------------------------------------------

// gs_msg_shcd_history

// optional int32 card_type = 1;
inline bool gs_msg_shcd_history::has_card_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_shcd_history::set_has_card_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_shcd_history::clear_has_card_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_shcd_history::clear_card_type() {
  card_type_ = 0;
  clear_has_card_type();
}
inline ::google::protobuf::int32 gs_msg_shcd_history::card_type() const {
  return card_type_;
}
inline void gs_msg_shcd_history::set_card_type(::google::protobuf::int32 value) {
  set_has_card_type();
  card_type_ = value;
}

// optional int32 card_value = 2;
inline bool gs_msg_shcd_history::has_card_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_msg_shcd_history::set_has_card_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_msg_shcd_history::clear_has_card_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_msg_shcd_history::clear_card_value() {
  card_value_ = 0;
  clear_has_card_value();
}
inline ::google::protobuf::int32 gs_msg_shcd_history::card_value() const {
  return card_value_;
}
inline void gs_msg_shcd_history::set_card_value(::google::protobuf::int32 value) {
  set_has_card_value();
  card_value_ = value;
}

// optional int32 open_type = 3;
inline bool gs_msg_shcd_history::has_open_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_msg_shcd_history::set_has_open_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_msg_shcd_history::clear_has_open_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_msg_shcd_history::clear_open_type() {
  open_type_ = 0;
  clear_has_open_type();
}
inline ::google::protobuf::int32 gs_msg_shcd_history::open_type() const {
  return open_type_;
}
inline void gs_msg_shcd_history::set_open_type(::google::protobuf::int32 value) {
  set_has_open_type();
  open_type_ = value;
}

// -------------------------------------------------------------------

// gs_msg_shcd_room_info

// optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
inline bool gs_msg_shcd_room_info::has_base_room_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_shcd_room_info::set_has_base_room_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_shcd_room_info::clear_has_base_room_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_shcd_room_info::clear_base_room_info() {
  if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
  clear_has_base_room_info();
}
inline const ::client2gstate_protocols::gs_base_room_info& gs_msg_shcd_room_info::base_room_info() const {
  return base_room_info_ != NULL ? *base_room_info_ : *default_instance_->base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_shcd_room_info::mutable_base_room_info() {
  set_has_base_room_info();
  if (base_room_info_ == NULL) base_room_info_ = new ::client2gstate_protocols::gs_base_room_info;
  return base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_shcd_room_info::release_base_room_info() {
  clear_has_base_room_info();
  ::client2gstate_protocols::gs_base_room_info* temp = base_room_info_;
  base_room_info_ = NULL;
  return temp;
}
inline void gs_msg_shcd_room_info::set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info) {
  delete base_room_info_;
  base_room_info_ = base_room_info;
  if (base_room_info) {
    set_has_base_room_info();
  } else {
    clear_has_base_room_info();
  }
}

// repeated .client2gstate_protocols.gs_msg_shcd_history shcd_info = 2;
inline int gs_msg_shcd_room_info::shcd_info_size() const {
  return shcd_info_.size();
}
inline void gs_msg_shcd_room_info::clear_shcd_info() {
  shcd_info_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_shcd_history& gs_msg_shcd_room_info::shcd_info(int index) const {
  return shcd_info_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_shcd_history* gs_msg_shcd_room_info::mutable_shcd_info(int index) {
  return shcd_info_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_shcd_history* gs_msg_shcd_room_info::add_shcd_info() {
  return shcd_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_shcd_history >&
gs_msg_shcd_room_info::shcd_info() const {
  return shcd_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_shcd_history >*
gs_msg_shcd_room_info::mutable_shcd_info() {
  return &shcd_info_;
}

// -------------------------------------------------------------------

// packetgs2c_shcd_game_history_result

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_shcd_history_result];
inline bool packetgs2c_shcd_game_history_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetgs2c_shcd_game_history_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetgs2c_shcd_game_history_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetgs2c_shcd_game_history_result::clear_packet_id() {
  packet_id_ = 31004;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetgs2c_shcd_game_history_result::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetgs2c_shcd_game_history_result::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 all_data_flag = 2;
inline bool packetgs2c_shcd_game_history_result::has_all_data_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetgs2c_shcd_game_history_result::set_has_all_data_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetgs2c_shcd_game_history_result::clear_has_all_data_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetgs2c_shcd_game_history_result::clear_all_data_flag() {
  all_data_flag_ = 0;
  clear_has_all_data_flag();
}
inline ::google::protobuf::int32 packetgs2c_shcd_game_history_result::all_data_flag() const {
  return all_data_flag_;
}
inline void packetgs2c_shcd_game_history_result::set_all_data_flag(::google::protobuf::int32 value) {
  set_has_all_data_flag();
  all_data_flag_ = value;
}

// repeated .client2gstate_protocols.gs_msg_shcd_room_info room_history = 3;
inline int packetgs2c_shcd_game_history_result::room_history_size() const {
  return room_history_.size();
}
inline void packetgs2c_shcd_game_history_result::clear_room_history() {
  room_history_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_shcd_room_info& packetgs2c_shcd_game_history_result::room_history(int index) const {
  return room_history_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_shcd_room_info* packetgs2c_shcd_game_history_result::mutable_room_history(int index) {
  return room_history_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_shcd_room_info* packetgs2c_shcd_game_history_result::add_room_history() {
  return room_history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_shcd_room_info >&
packetgs2c_shcd_game_history_result::room_history() const {
  return room_history_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_shcd_room_info >*
packetgs2c_shcd_game_history_result::mutable_room_history() {
  return &room_history_;
}

// -------------------------------------------------------------------

// gs_msg_baccarat_history

// optional bool is_tie = 1;
inline bool gs_msg_baccarat_history::has_is_tie() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_baccarat_history::set_has_is_tie() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_baccarat_history::clear_has_is_tie() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_baccarat_history::clear_is_tie() {
  is_tie_ = false;
  clear_has_is_tie();
}
inline bool gs_msg_baccarat_history::is_tie() const {
  return is_tie_;
}
inline void gs_msg_baccarat_history::set_is_tie(bool value) {
  set_has_is_tie();
  is_tie_ = value;
}

// optional bool is_player_win = 2;
inline bool gs_msg_baccarat_history::has_is_player_win() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_msg_baccarat_history::set_has_is_player_win() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_msg_baccarat_history::clear_has_is_player_win() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_msg_baccarat_history::clear_is_player_win() {
  is_player_win_ = false;
  clear_has_is_player_win();
}
inline bool gs_msg_baccarat_history::is_player_win() const {
  return is_player_win_;
}
inline void gs_msg_baccarat_history::set_is_player_win(bool value) {
  set_has_is_player_win();
  is_player_win_ = value;
}

// optional bool is_player_pair = 3;
inline bool gs_msg_baccarat_history::has_is_player_pair() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_msg_baccarat_history::set_has_is_player_pair() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_msg_baccarat_history::clear_has_is_player_pair() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_msg_baccarat_history::clear_is_player_pair() {
  is_player_pair_ = false;
  clear_has_is_player_pair();
}
inline bool gs_msg_baccarat_history::is_player_pair() const {
  return is_player_pair_;
}
inline void gs_msg_baccarat_history::set_is_player_pair(bool value) {
  set_has_is_player_pair();
  is_player_pair_ = value;
}

// optional bool is_banker_pair = 4;
inline bool gs_msg_baccarat_history::has_is_banker_pair() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_msg_baccarat_history::set_has_is_banker_pair() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_msg_baccarat_history::clear_has_is_banker_pair() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_msg_baccarat_history::clear_is_banker_pair() {
  is_banker_pair_ = false;
  clear_has_is_banker_pair();
}
inline bool gs_msg_baccarat_history::is_banker_pair() const {
  return is_banker_pair_;
}
inline void gs_msg_baccarat_history::set_is_banker_pair(bool value) {
  set_has_is_banker_pair();
  is_banker_pair_ = value;
}

// optional bool is_banker_win = 5;
inline bool gs_msg_baccarat_history::has_is_banker_win() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gs_msg_baccarat_history::set_has_is_banker_win() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gs_msg_baccarat_history::clear_has_is_banker_win() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gs_msg_baccarat_history::clear_is_banker_win() {
  is_banker_win_ = false;
  clear_has_is_banker_win();
}
inline bool gs_msg_baccarat_history::is_banker_win() const {
  return is_banker_win_;
}
inline void gs_msg_baccarat_history::set_is_banker_win(bool value) {
  set_has_is_banker_win();
  is_banker_win_ = value;
}

// optional int32 win_point = 6;
inline bool gs_msg_baccarat_history::has_win_point() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gs_msg_baccarat_history::set_has_win_point() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gs_msg_baccarat_history::clear_has_win_point() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gs_msg_baccarat_history::clear_win_point() {
  win_point_ = 0;
  clear_has_win_point();
}
inline ::google::protobuf::int32 gs_msg_baccarat_history::win_point() const {
  return win_point_;
}
inline void gs_msg_baccarat_history::set_win_point(::google::protobuf::int32 value) {
  set_has_win_point();
  win_point_ = value;
}

// -------------------------------------------------------------------

// gs_msg_baccarat_room_info

// optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
inline bool gs_msg_baccarat_room_info::has_base_room_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_baccarat_room_info::set_has_base_room_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_baccarat_room_info::clear_has_base_room_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_baccarat_room_info::clear_base_room_info() {
  if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
  clear_has_base_room_info();
}
inline const ::client2gstate_protocols::gs_base_room_info& gs_msg_baccarat_room_info::base_room_info() const {
  return base_room_info_ != NULL ? *base_room_info_ : *default_instance_->base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_baccarat_room_info::mutable_base_room_info() {
  set_has_base_room_info();
  if (base_room_info_ == NULL) base_room_info_ = new ::client2gstate_protocols::gs_base_room_info;
  return base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_baccarat_room_info::release_base_room_info() {
  clear_has_base_room_info();
  ::client2gstate_protocols::gs_base_room_info* temp = base_room_info_;
  base_room_info_ = NULL;
  return temp;
}
inline void gs_msg_baccarat_room_info::set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info) {
  delete base_room_info_;
  base_room_info_ = base_room_info;
  if (base_room_info) {
    set_has_base_room_info();
  } else {
    clear_has_base_room_info();
  }
}

// repeated .client2gstate_protocols.gs_msg_baccarat_history baccarat_info = 2;
inline int gs_msg_baccarat_room_info::baccarat_info_size() const {
  return baccarat_info_.size();
}
inline void gs_msg_baccarat_room_info::clear_baccarat_info() {
  baccarat_info_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_baccarat_history& gs_msg_baccarat_room_info::baccarat_info(int index) const {
  return baccarat_info_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_baccarat_history* gs_msg_baccarat_room_info::mutable_baccarat_info(int index) {
  return baccarat_info_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_baccarat_history* gs_msg_baccarat_room_info::add_baccarat_info() {
  return baccarat_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_baccarat_history >&
gs_msg_baccarat_room_info::baccarat_info() const {
  return baccarat_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_baccarat_history >*
gs_msg_baccarat_room_info::mutable_baccarat_info() {
  return &baccarat_info_;
}

// -------------------------------------------------------------------

// packetgs2c_baccarat_game_history_result

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_baccarat_history_result];
inline bool packetgs2c_baccarat_game_history_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetgs2c_baccarat_game_history_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetgs2c_baccarat_game_history_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetgs2c_baccarat_game_history_result::clear_packet_id() {
  packet_id_ = 31006;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetgs2c_baccarat_game_history_result::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetgs2c_baccarat_game_history_result::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 all_data_flag = 2;
inline bool packetgs2c_baccarat_game_history_result::has_all_data_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetgs2c_baccarat_game_history_result::set_has_all_data_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetgs2c_baccarat_game_history_result::clear_has_all_data_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetgs2c_baccarat_game_history_result::clear_all_data_flag() {
  all_data_flag_ = 0;
  clear_has_all_data_flag();
}
inline ::google::protobuf::int32 packetgs2c_baccarat_game_history_result::all_data_flag() const {
  return all_data_flag_;
}
inline void packetgs2c_baccarat_game_history_result::set_all_data_flag(::google::protobuf::int32 value) {
  set_has_all_data_flag();
  all_data_flag_ = value;
}

// repeated .client2gstate_protocols.gs_msg_baccarat_room_info room_history = 3;
inline int packetgs2c_baccarat_game_history_result::room_history_size() const {
  return room_history_.size();
}
inline void packetgs2c_baccarat_game_history_result::clear_room_history() {
  room_history_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_baccarat_room_info& packetgs2c_baccarat_game_history_result::room_history(int index) const {
  return room_history_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_baccarat_room_info* packetgs2c_baccarat_game_history_result::mutable_room_history(int index) {
  return room_history_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_baccarat_room_info* packetgs2c_baccarat_game_history_result::add_room_history() {
  return room_history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_baccarat_room_info >&
packetgs2c_baccarat_game_history_result::room_history() const {
  return room_history_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_baccarat_room_info >*
packetgs2c_baccarat_game_history_result::mutable_room_history() {
  return &room_history_;
}

// -------------------------------------------------------------------

// gs_msg_goldshark_history

// optional int32 result = 1;
inline bool gs_msg_goldshark_history::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_goldshark_history::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_goldshark_history::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_goldshark_history::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gs_msg_goldshark_history::result() const {
  return result_;
}
inline void gs_msg_goldshark_history::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// gs_msg_goldshark_room_info

// optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
inline bool gs_msg_goldshark_room_info::has_base_room_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_goldshark_room_info::set_has_base_room_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_goldshark_room_info::clear_has_base_room_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_goldshark_room_info::clear_base_room_info() {
  if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
  clear_has_base_room_info();
}
inline const ::client2gstate_protocols::gs_base_room_info& gs_msg_goldshark_room_info::base_room_info() const {
  return base_room_info_ != NULL ? *base_room_info_ : *default_instance_->base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_goldshark_room_info::mutable_base_room_info() {
  set_has_base_room_info();
  if (base_room_info_ == NULL) base_room_info_ = new ::client2gstate_protocols::gs_base_room_info;
  return base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_goldshark_room_info::release_base_room_info() {
  clear_has_base_room_info();
  ::client2gstate_protocols::gs_base_room_info* temp = base_room_info_;
  base_room_info_ = NULL;
  return temp;
}
inline void gs_msg_goldshark_room_info::set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info) {
  delete base_room_info_;
  base_room_info_ = base_room_info;
  if (base_room_info) {
    set_has_base_room_info();
  } else {
    clear_has_base_room_info();
  }
}

// repeated .client2gstate_protocols.gs_msg_goldshark_history goldshark_info = 2;
inline int gs_msg_goldshark_room_info::goldshark_info_size() const {
  return goldshark_info_.size();
}
inline void gs_msg_goldshark_room_info::clear_goldshark_info() {
  goldshark_info_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_goldshark_history& gs_msg_goldshark_room_info::goldshark_info(int index) const {
  return goldshark_info_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_goldshark_history* gs_msg_goldshark_room_info::mutable_goldshark_info(int index) {
  return goldshark_info_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_goldshark_history* gs_msg_goldshark_room_info::add_goldshark_info() {
  return goldshark_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_goldshark_history >&
gs_msg_goldshark_room_info::goldshark_info() const {
  return goldshark_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_goldshark_history >*
gs_msg_goldshark_room_info::mutable_goldshark_info() {
  return &goldshark_info_;
}

// -------------------------------------------------------------------

// packetgs2c_goldshark_game_history_result

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_goldshark_history_result];
inline bool packetgs2c_goldshark_game_history_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetgs2c_goldshark_game_history_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetgs2c_goldshark_game_history_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetgs2c_goldshark_game_history_result::clear_packet_id() {
  packet_id_ = 31007;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetgs2c_goldshark_game_history_result::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetgs2c_goldshark_game_history_result::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 all_data_flag = 2;
inline bool packetgs2c_goldshark_game_history_result::has_all_data_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetgs2c_goldshark_game_history_result::set_has_all_data_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetgs2c_goldshark_game_history_result::clear_has_all_data_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetgs2c_goldshark_game_history_result::clear_all_data_flag() {
  all_data_flag_ = 0;
  clear_has_all_data_flag();
}
inline ::google::protobuf::int32 packetgs2c_goldshark_game_history_result::all_data_flag() const {
  return all_data_flag_;
}
inline void packetgs2c_goldshark_game_history_result::set_all_data_flag(::google::protobuf::int32 value) {
  set_has_all_data_flag();
  all_data_flag_ = value;
}

// repeated .client2gstate_protocols.gs_msg_goldshark_room_info room_history = 3;
inline int packetgs2c_goldshark_game_history_result::room_history_size() const {
  return room_history_.size();
}
inline void packetgs2c_goldshark_game_history_result::clear_room_history() {
  room_history_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_goldshark_room_info& packetgs2c_goldshark_game_history_result::room_history(int index) const {
  return room_history_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_goldshark_room_info* packetgs2c_goldshark_game_history_result::mutable_room_history(int index) {
  return room_history_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_goldshark_room_info* packetgs2c_goldshark_game_history_result::add_room_history() {
  return room_history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_goldshark_room_info >&
packetgs2c_goldshark_game_history_result::room_history() const {
  return room_history_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_goldshark_room_info >*
packetgs2c_goldshark_game_history_result::mutable_room_history() {
  return &room_history_;
}

// -------------------------------------------------------------------

// gs_msg_lhd_history

// optional int32 cards_info = 1;
inline bool gs_msg_lhd_history::has_cards_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_lhd_history::set_has_cards_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_lhd_history::clear_has_cards_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_lhd_history::clear_cards_info() {
  cards_info_ = 0;
  clear_has_cards_info();
}
inline ::google::protobuf::int32 gs_msg_lhd_history::cards_info() const {
  return cards_info_;
}
inline void gs_msg_lhd_history::set_cards_info(::google::protobuf::int32 value) {
  set_has_cards_info();
  cards_info_ = value;
}

// -------------------------------------------------------------------

// gs_msg_lhd_room_info

// optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
inline bool gs_msg_lhd_room_info::has_base_room_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_lhd_room_info::set_has_base_room_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_lhd_room_info::clear_has_base_room_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_lhd_room_info::clear_base_room_info() {
  if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
  clear_has_base_room_info();
}
inline const ::client2gstate_protocols::gs_base_room_info& gs_msg_lhd_room_info::base_room_info() const {
  return base_room_info_ != NULL ? *base_room_info_ : *default_instance_->base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_lhd_room_info::mutable_base_room_info() {
  set_has_base_room_info();
  if (base_room_info_ == NULL) base_room_info_ = new ::client2gstate_protocols::gs_base_room_info;
  return base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_lhd_room_info::release_base_room_info() {
  clear_has_base_room_info();
  ::client2gstate_protocols::gs_base_room_info* temp = base_room_info_;
  base_room_info_ = NULL;
  return temp;
}
inline void gs_msg_lhd_room_info::set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info) {
  delete base_room_info_;
  base_room_info_ = base_room_info;
  if (base_room_info) {
    set_has_base_room_info();
  } else {
    clear_has_base_room_info();
  }
}

// repeated int32 total_win = 2;
inline int gs_msg_lhd_room_info::total_win_size() const {
  return total_win_.size();
}
inline void gs_msg_lhd_room_info::clear_total_win() {
  total_win_.Clear();
}
inline ::google::protobuf::int32 gs_msg_lhd_room_info::total_win(int index) const {
  return total_win_.Get(index);
}
inline void gs_msg_lhd_room_info::set_total_win(int index, ::google::protobuf::int32 value) {
  total_win_.Set(index, value);
}
inline void gs_msg_lhd_room_info::add_total_win(::google::protobuf::int32 value) {
  total_win_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gs_msg_lhd_room_info::total_win() const {
  return total_win_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gs_msg_lhd_room_info::mutable_total_win() {
  return &total_win_;
}

// repeated int32 total_lose = 3;
inline int gs_msg_lhd_room_info::total_lose_size() const {
  return total_lose_.size();
}
inline void gs_msg_lhd_room_info::clear_total_lose() {
  total_lose_.Clear();
}
inline ::google::protobuf::int32 gs_msg_lhd_room_info::total_lose(int index) const {
  return total_lose_.Get(index);
}
inline void gs_msg_lhd_room_info::set_total_lose(int index, ::google::protobuf::int32 value) {
  total_lose_.Set(index, value);
}
inline void gs_msg_lhd_room_info::add_total_lose(::google::protobuf::int32 value) {
  total_lose_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gs_msg_lhd_room_info::total_lose() const {
  return total_lose_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gs_msg_lhd_room_info::mutable_total_lose() {
  return &total_lose_;
}

// repeated .client2gstate_protocols.gs_msg_lhd_history lhd_info = 4;
inline int gs_msg_lhd_room_info::lhd_info_size() const {
  return lhd_info_.size();
}
inline void gs_msg_lhd_room_info::clear_lhd_info() {
  lhd_info_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_lhd_history& gs_msg_lhd_room_info::lhd_info(int index) const {
  return lhd_info_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_lhd_history* gs_msg_lhd_room_info::mutable_lhd_info(int index) {
  return lhd_info_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_lhd_history* gs_msg_lhd_room_info::add_lhd_info() {
  return lhd_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_lhd_history >&
gs_msg_lhd_room_info::lhd_info() const {
  return lhd_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_lhd_history >*
gs_msg_lhd_room_info::mutable_lhd_info() {
  return &lhd_info_;
}

// -------------------------------------------------------------------

// packetgs2c_lhd_game_history_result

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_lhd_history_result];
inline bool packetgs2c_lhd_game_history_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetgs2c_lhd_game_history_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetgs2c_lhd_game_history_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetgs2c_lhd_game_history_result::clear_packet_id() {
  packet_id_ = 31008;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetgs2c_lhd_game_history_result::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetgs2c_lhd_game_history_result::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 all_data_flag = 2;
inline bool packetgs2c_lhd_game_history_result::has_all_data_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetgs2c_lhd_game_history_result::set_has_all_data_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetgs2c_lhd_game_history_result::clear_has_all_data_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetgs2c_lhd_game_history_result::clear_all_data_flag() {
  all_data_flag_ = 0;
  clear_has_all_data_flag();
}
inline ::google::protobuf::int32 packetgs2c_lhd_game_history_result::all_data_flag() const {
  return all_data_flag_;
}
inline void packetgs2c_lhd_game_history_result::set_all_data_flag(::google::protobuf::int32 value) {
  set_has_all_data_flag();
  all_data_flag_ = value;
}

// repeated .client2gstate_protocols.gs_msg_lhd_room_info room_history = 3;
inline int packetgs2c_lhd_game_history_result::room_history_size() const {
  return room_history_.size();
}
inline void packetgs2c_lhd_game_history_result::clear_room_history() {
  room_history_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_lhd_room_info& packetgs2c_lhd_game_history_result::room_history(int index) const {
  return room_history_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_lhd_room_info* packetgs2c_lhd_game_history_result::mutable_room_history(int index) {
  return room_history_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_lhd_room_info* packetgs2c_lhd_game_history_result::add_room_history() {
  return room_history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_lhd_room_info >&
packetgs2c_lhd_game_history_result::room_history() const {
  return room_history_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_lhd_room_info >*
packetgs2c_lhd_game_history_result::mutable_room_history() {
  return &room_history_;
}

// -------------------------------------------------------------------

// gs_msg_benzbmw_history

// optional int32 result = 1;
inline bool gs_msg_benzbmw_history::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_benzbmw_history::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_benzbmw_history::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_benzbmw_history::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gs_msg_benzbmw_history::result() const {
  return result_;
}
inline void gs_msg_benzbmw_history::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// gs_msg_benzbmw_room_info

// optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
inline bool gs_msg_benzbmw_room_info::has_base_room_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_benzbmw_room_info::set_has_base_room_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_benzbmw_room_info::clear_has_base_room_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_benzbmw_room_info::clear_base_room_info() {
  if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
  clear_has_base_room_info();
}
inline const ::client2gstate_protocols::gs_base_room_info& gs_msg_benzbmw_room_info::base_room_info() const {
  return base_room_info_ != NULL ? *base_room_info_ : *default_instance_->base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_benzbmw_room_info::mutable_base_room_info() {
  set_has_base_room_info();
  if (base_room_info_ == NULL) base_room_info_ = new ::client2gstate_protocols::gs_base_room_info;
  return base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_benzbmw_room_info::release_base_room_info() {
  clear_has_base_room_info();
  ::client2gstate_protocols::gs_base_room_info* temp = base_room_info_;
  base_room_info_ = NULL;
  return temp;
}
inline void gs_msg_benzbmw_room_info::set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info) {
  delete base_room_info_;
  base_room_info_ = base_room_info;
  if (base_room_info) {
    set_has_base_room_info();
  } else {
    clear_has_base_room_info();
  }
}

// repeated .client2gstate_protocols.gs_msg_benzbmw_history card_road_info = 2;
inline int gs_msg_benzbmw_room_info::card_road_info_size() const {
  return card_road_info_.size();
}
inline void gs_msg_benzbmw_room_info::clear_card_road_info() {
  card_road_info_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_benzbmw_history& gs_msg_benzbmw_room_info::card_road_info(int index) const {
  return card_road_info_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_benzbmw_history* gs_msg_benzbmw_room_info::mutable_card_road_info(int index) {
  return card_road_info_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_benzbmw_history* gs_msg_benzbmw_room_info::add_card_road_info() {
  return card_road_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_benzbmw_history >&
gs_msg_benzbmw_room_info::card_road_info() const {
  return card_road_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_benzbmw_history >*
gs_msg_benzbmw_room_info::mutable_card_road_info() {
  return &card_road_info_;
}

// -------------------------------------------------------------------

// packetgs2c_benzbmw_game_history_result

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_benzbmw_history_result];
inline bool packetgs2c_benzbmw_game_history_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetgs2c_benzbmw_game_history_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetgs2c_benzbmw_game_history_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetgs2c_benzbmw_game_history_result::clear_packet_id() {
  packet_id_ = 31009;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetgs2c_benzbmw_game_history_result::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetgs2c_benzbmw_game_history_result::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 all_data_flag = 2;
inline bool packetgs2c_benzbmw_game_history_result::has_all_data_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetgs2c_benzbmw_game_history_result::set_has_all_data_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetgs2c_benzbmw_game_history_result::clear_has_all_data_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetgs2c_benzbmw_game_history_result::clear_all_data_flag() {
  all_data_flag_ = 0;
  clear_has_all_data_flag();
}
inline ::google::protobuf::int32 packetgs2c_benzbmw_game_history_result::all_data_flag() const {
  return all_data_flag_;
}
inline void packetgs2c_benzbmw_game_history_result::set_all_data_flag(::google::protobuf::int32 value) {
  set_has_all_data_flag();
  all_data_flag_ = value;
}

// repeated .client2gstate_protocols.gs_msg_benzbmw_room_info room_history = 3;
inline int packetgs2c_benzbmw_game_history_result::room_history_size() const {
  return room_history_.size();
}
inline void packetgs2c_benzbmw_game_history_result::clear_room_history() {
  room_history_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_benzbmw_room_info& packetgs2c_benzbmw_game_history_result::room_history(int index) const {
  return room_history_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_benzbmw_room_info* packetgs2c_benzbmw_game_history_result::mutable_room_history(int index) {
  return room_history_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_benzbmw_room_info* packetgs2c_benzbmw_game_history_result::add_room_history() {
  return room_history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_benzbmw_room_info >&
packetgs2c_benzbmw_game_history_result::room_history() const {
  return room_history_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_benzbmw_room_info >*
packetgs2c_benzbmw_game_history_result::mutable_room_history() {
  return &room_history_;
}

// -------------------------------------------------------------------

// gs_msg_multiredblack_history

// optional int32 result = 1;
inline bool gs_msg_multiredblack_history::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_multiredblack_history::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_multiredblack_history::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_multiredblack_history::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gs_msg_multiredblack_history::result() const {
  return result_;
}
inline void gs_msg_multiredblack_history::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// gs_msg_multiredblack_room_info

// optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
inline bool gs_msg_multiredblack_room_info::has_base_room_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_multiredblack_room_info::set_has_base_room_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_multiredblack_room_info::clear_has_base_room_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_multiredblack_room_info::clear_base_room_info() {
  if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
  clear_has_base_room_info();
}
inline const ::client2gstate_protocols::gs_base_room_info& gs_msg_multiredblack_room_info::base_room_info() const {
  return base_room_info_ != NULL ? *base_room_info_ : *default_instance_->base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_multiredblack_room_info::mutable_base_room_info() {
  set_has_base_room_info();
  if (base_room_info_ == NULL) base_room_info_ = new ::client2gstate_protocols::gs_base_room_info;
  return base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_multiredblack_room_info::release_base_room_info() {
  clear_has_base_room_info();
  ::client2gstate_protocols::gs_base_room_info* temp = base_room_info_;
  base_room_info_ = NULL;
  return temp;
}
inline void gs_msg_multiredblack_room_info::set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info) {
  delete base_room_info_;
  base_room_info_ = base_room_info;
  if (base_room_info) {
    set_has_base_room_info();
  } else {
    clear_has_base_room_info();
  }
}

// repeated .client2gstate_protocols.gs_msg_multiredblack_history card_road_info = 2;
inline int gs_msg_multiredblack_room_info::card_road_info_size() const {
  return card_road_info_.size();
}
inline void gs_msg_multiredblack_room_info::clear_card_road_info() {
  card_road_info_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_multiredblack_history& gs_msg_multiredblack_room_info::card_road_info(int index) const {
  return card_road_info_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_multiredblack_history* gs_msg_multiredblack_room_info::mutable_card_road_info(int index) {
  return card_road_info_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_multiredblack_history* gs_msg_multiredblack_room_info::add_card_road_info() {
  return card_road_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_multiredblack_history >&
gs_msg_multiredblack_room_info::card_road_info() const {
  return card_road_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_multiredblack_history >*
gs_msg_multiredblack_room_info::mutable_card_road_info() {
  return &card_road_info_;
}

// -------------------------------------------------------------------

// packetgs2c_multiredblack_game_history_result

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_multiredblack_history_result];
inline bool packetgs2c_multiredblack_game_history_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetgs2c_multiredblack_game_history_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetgs2c_multiredblack_game_history_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetgs2c_multiredblack_game_history_result::clear_packet_id() {
  packet_id_ = 31010;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetgs2c_multiredblack_game_history_result::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetgs2c_multiredblack_game_history_result::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 all_data_flag = 2;
inline bool packetgs2c_multiredblack_game_history_result::has_all_data_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetgs2c_multiredblack_game_history_result::set_has_all_data_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetgs2c_multiredblack_game_history_result::clear_has_all_data_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetgs2c_multiredblack_game_history_result::clear_all_data_flag() {
  all_data_flag_ = 0;
  clear_has_all_data_flag();
}
inline ::google::protobuf::int32 packetgs2c_multiredblack_game_history_result::all_data_flag() const {
  return all_data_flag_;
}
inline void packetgs2c_multiredblack_game_history_result::set_all_data_flag(::google::protobuf::int32 value) {
  set_has_all_data_flag();
  all_data_flag_ = value;
}

// repeated .client2gstate_protocols.gs_msg_multiredblack_room_info room_history = 3;
inline int packetgs2c_multiredblack_game_history_result::room_history_size() const {
  return room_history_.size();
}
inline void packetgs2c_multiredblack_game_history_result::clear_room_history() {
  room_history_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_multiredblack_room_info& packetgs2c_multiredblack_game_history_result::room_history(int index) const {
  return room_history_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_multiredblack_room_info* packetgs2c_multiredblack_game_history_result::mutable_room_history(int index) {
  return room_history_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_multiredblack_room_info* packetgs2c_multiredblack_game_history_result::add_room_history() {
  return room_history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_multiredblack_room_info >&
packetgs2c_multiredblack_game_history_result::room_history() const {
  return room_history_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_multiredblack_room_info >*
packetgs2c_multiredblack_game_history_result::mutable_room_history() {
  return &room_history_;
}

// -------------------------------------------------------------------

// gs_msg_ebg_history

// repeated bool is_win = 1;
inline int gs_msg_ebg_history::is_win_size() const {
  return is_win_.size();
}
inline void gs_msg_ebg_history::clear_is_win() {
  is_win_.Clear();
}
inline bool gs_msg_ebg_history::is_win(int index) const {
  return is_win_.Get(index);
}
inline void gs_msg_ebg_history::set_is_win(int index, bool value) {
  is_win_.Set(index, value);
}
inline void gs_msg_ebg_history::add_is_win(bool value) {
  is_win_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
gs_msg_ebg_history::is_win() const {
  return is_win_;
}
inline ::google::protobuf::RepeatedField< bool >*
gs_msg_ebg_history::mutable_is_win() {
  return &is_win_;
}

// repeated int32 cards_id = 2;
inline int gs_msg_ebg_history::cards_id_size() const {
  return cards_id_.size();
}
inline void gs_msg_ebg_history::clear_cards_id() {
  cards_id_.Clear();
}
inline ::google::protobuf::int32 gs_msg_ebg_history::cards_id(int index) const {
  return cards_id_.Get(index);
}
inline void gs_msg_ebg_history::set_cards_id(int index, ::google::protobuf::int32 value) {
  cards_id_.Set(index, value);
}
inline void gs_msg_ebg_history::add_cards_id(::google::protobuf::int32 value) {
  cards_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gs_msg_ebg_history::cards_id() const {
  return cards_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gs_msg_ebg_history::mutable_cards_id() {
  return &cards_id_;
}

// -------------------------------------------------------------------

// gs_msg_ebg_room_info

// optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
inline bool gs_msg_ebg_room_info::has_base_room_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_ebg_room_info::set_has_base_room_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_ebg_room_info::clear_has_base_room_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_ebg_room_info::clear_base_room_info() {
  if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
  clear_has_base_room_info();
}
inline const ::client2gstate_protocols::gs_base_room_info& gs_msg_ebg_room_info::base_room_info() const {
  return base_room_info_ != NULL ? *base_room_info_ : *default_instance_->base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_ebg_room_info::mutable_base_room_info() {
  set_has_base_room_info();
  if (base_room_info_ == NULL) base_room_info_ = new ::client2gstate_protocols::gs_base_room_info;
  return base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_ebg_room_info::release_base_room_info() {
  clear_has_base_room_info();
  ::client2gstate_protocols::gs_base_room_info* temp = base_room_info_;
  base_room_info_ = NULL;
  return temp;
}
inline void gs_msg_ebg_room_info::set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info) {
  delete base_room_info_;
  base_room_info_ = base_room_info;
  if (base_room_info) {
    set_has_base_room_info();
  } else {
    clear_has_base_room_info();
  }
}

// optional int32 total_count = 2;
inline bool gs_msg_ebg_room_info::has_total_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_msg_ebg_room_info::set_has_total_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_msg_ebg_room_info::clear_has_total_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_msg_ebg_room_info::clear_total_count() {
  total_count_ = 0;
  clear_has_total_count();
}
inline ::google::protobuf::int32 gs_msg_ebg_room_info::total_count() const {
  return total_count_;
}
inline void gs_msg_ebg_room_info::set_total_count(::google::protobuf::int32 value) {
  set_has_total_count();
  total_count_ = value;
}

// repeated int32 win_counts = 3;
inline int gs_msg_ebg_room_info::win_counts_size() const {
  return win_counts_.size();
}
inline void gs_msg_ebg_room_info::clear_win_counts() {
  win_counts_.Clear();
}
inline ::google::protobuf::int32 gs_msg_ebg_room_info::win_counts(int index) const {
  return win_counts_.Get(index);
}
inline void gs_msg_ebg_room_info::set_win_counts(int index, ::google::protobuf::int32 value) {
  win_counts_.Set(index, value);
}
inline void gs_msg_ebg_room_info::add_win_counts(::google::protobuf::int32 value) {
  win_counts_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gs_msg_ebg_room_info::win_counts() const {
  return win_counts_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gs_msg_ebg_room_info::mutable_win_counts() {
  return &win_counts_;
}

// repeated int32 lose_counts = 4;
inline int gs_msg_ebg_room_info::lose_counts_size() const {
  return lose_counts_.size();
}
inline void gs_msg_ebg_room_info::clear_lose_counts() {
  lose_counts_.Clear();
}
inline ::google::protobuf::int32 gs_msg_ebg_room_info::lose_counts(int index) const {
  return lose_counts_.Get(index);
}
inline void gs_msg_ebg_room_info::set_lose_counts(int index, ::google::protobuf::int32 value) {
  lose_counts_.Set(index, value);
}
inline void gs_msg_ebg_room_info::add_lose_counts(::google::protobuf::int32 value) {
  lose_counts_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gs_msg_ebg_room_info::lose_counts() const {
  return lose_counts_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gs_msg_ebg_room_info::mutable_lose_counts() {
  return &lose_counts_;
}

// repeated .client2gstate_protocols.gs_msg_ebg_history card_road_info = 5;
inline int gs_msg_ebg_room_info::card_road_info_size() const {
  return card_road_info_.size();
}
inline void gs_msg_ebg_room_info::clear_card_road_info() {
  card_road_info_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_ebg_history& gs_msg_ebg_room_info::card_road_info(int index) const {
  return card_road_info_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_ebg_history* gs_msg_ebg_room_info::mutable_card_road_info(int index) {
  return card_road_info_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_ebg_history* gs_msg_ebg_room_info::add_card_road_info() {
  return card_road_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_ebg_history >&
gs_msg_ebg_room_info::card_road_info() const {
  return card_road_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_ebg_history >*
gs_msg_ebg_room_info::mutable_card_road_info() {
  return &card_road_info_;
}

// optional int32 banker_cnt = 6;
inline bool gs_msg_ebg_room_info::has_banker_cnt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gs_msg_ebg_room_info::set_has_banker_cnt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gs_msg_ebg_room_info::clear_has_banker_cnt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gs_msg_ebg_room_info::clear_banker_cnt() {
  banker_cnt_ = 0;
  clear_has_banker_cnt();
}
inline ::google::protobuf::int32 gs_msg_ebg_room_info::banker_cnt() const {
  return banker_cnt_;
}
inline void gs_msg_ebg_room_info::set_banker_cnt(::google::protobuf::int32 value) {
  set_has_banker_cnt();
  banker_cnt_ = value;
}

// repeated int32 out_cards = 7;
inline int gs_msg_ebg_room_info::out_cards_size() const {
  return out_cards_.size();
}
inline void gs_msg_ebg_room_info::clear_out_cards() {
  out_cards_.Clear();
}
inline ::google::protobuf::int32 gs_msg_ebg_room_info::out_cards(int index) const {
  return out_cards_.Get(index);
}
inline void gs_msg_ebg_room_info::set_out_cards(int index, ::google::protobuf::int32 value) {
  out_cards_.Set(index, value);
}
inline void gs_msg_ebg_room_info::add_out_cards(::google::protobuf::int32 value) {
  out_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gs_msg_ebg_room_info::out_cards() const {
  return out_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gs_msg_ebg_room_info::mutable_out_cards() {
  return &out_cards_;
}

// -------------------------------------------------------------------

// packetgs2c_ebg_game_history_result

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_ebg_history_result];
inline bool packetgs2c_ebg_game_history_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetgs2c_ebg_game_history_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetgs2c_ebg_game_history_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetgs2c_ebg_game_history_result::clear_packet_id() {
  packet_id_ = 31011;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetgs2c_ebg_game_history_result::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetgs2c_ebg_game_history_result::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 all_data_flag = 2;
inline bool packetgs2c_ebg_game_history_result::has_all_data_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetgs2c_ebg_game_history_result::set_has_all_data_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetgs2c_ebg_game_history_result::clear_has_all_data_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetgs2c_ebg_game_history_result::clear_all_data_flag() {
  all_data_flag_ = 0;
  clear_has_all_data_flag();
}
inline ::google::protobuf::int32 packetgs2c_ebg_game_history_result::all_data_flag() const {
  return all_data_flag_;
}
inline void packetgs2c_ebg_game_history_result::set_all_data_flag(::google::protobuf::int32 value) {
  set_has_all_data_flag();
  all_data_flag_ = value;
}

// repeated .client2gstate_protocols.gs_msg_ebg_room_info room_history = 3;
inline int packetgs2c_ebg_game_history_result::room_history_size() const {
  return room_history_.size();
}
inline void packetgs2c_ebg_game_history_result::clear_room_history() {
  room_history_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_ebg_room_info& packetgs2c_ebg_game_history_result::room_history(int index) const {
  return room_history_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_ebg_room_info* packetgs2c_ebg_game_history_result::mutable_room_history(int index) {
  return room_history_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_ebg_room_info* packetgs2c_ebg_game_history_result::add_room_history() {
  return room_history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_ebg_room_info >&
packetgs2c_ebg_game_history_result::room_history() const {
  return room_history_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_ebg_room_info >*
packetgs2c_ebg_game_history_result::mutable_room_history() {
  return &room_history_;
}

// -------------------------------------------------------------------

// gs_msg_dice_history

// optional int32 dice1 = 1;
inline bool gs_msg_dice_history::has_dice1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_dice_history::set_has_dice1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_dice_history::clear_has_dice1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_dice_history::clear_dice1() {
  dice1_ = 0;
  clear_has_dice1();
}
inline ::google::protobuf::int32 gs_msg_dice_history::dice1() const {
  return dice1_;
}
inline void gs_msg_dice_history::set_dice1(::google::protobuf::int32 value) {
  set_has_dice1();
  dice1_ = value;
}

// optional int32 dice2 = 2;
inline bool gs_msg_dice_history::has_dice2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_msg_dice_history::set_has_dice2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_msg_dice_history::clear_has_dice2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_msg_dice_history::clear_dice2() {
  dice2_ = 0;
  clear_has_dice2();
}
inline ::google::protobuf::int32 gs_msg_dice_history::dice2() const {
  return dice2_;
}
inline void gs_msg_dice_history::set_dice2(::google::protobuf::int32 value) {
  set_has_dice2();
  dice2_ = value;
}

// optional int32 dice3 = 3;
inline bool gs_msg_dice_history::has_dice3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_msg_dice_history::set_has_dice3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_msg_dice_history::clear_has_dice3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_msg_dice_history::clear_dice3() {
  dice3_ = 0;
  clear_has_dice3();
}
inline ::google::protobuf::int32 gs_msg_dice_history::dice3() const {
  return dice3_;
}
inline void gs_msg_dice_history::set_dice3(::google::protobuf::int32 value) {
  set_has_dice3();
  dice3_ = value;
}

// -------------------------------------------------------------------

// gs_msg_dice_room_info

// optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
inline bool gs_msg_dice_room_info::has_base_room_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_dice_room_info::set_has_base_room_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_dice_room_info::clear_has_base_room_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_dice_room_info::clear_base_room_info() {
  if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
  clear_has_base_room_info();
}
inline const ::client2gstate_protocols::gs_base_room_info& gs_msg_dice_room_info::base_room_info() const {
  return base_room_info_ != NULL ? *base_room_info_ : *default_instance_->base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_dice_room_info::mutable_base_room_info() {
  set_has_base_room_info();
  if (base_room_info_ == NULL) base_room_info_ = new ::client2gstate_protocols::gs_base_room_info;
  return base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_dice_room_info::release_base_room_info() {
  clear_has_base_room_info();
  ::client2gstate_protocols::gs_base_room_info* temp = base_room_info_;
  base_room_info_ = NULL;
  return temp;
}
inline void gs_msg_dice_room_info::set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info) {
  delete base_room_info_;
  base_room_info_ = base_room_info;
  if (base_room_info) {
    set_has_base_room_info();
  } else {
    clear_has_base_room_info();
  }
}

// repeated .client2gstate_protocols.gs_msg_dice_history card_road_info = 2;
inline int gs_msg_dice_room_info::card_road_info_size() const {
  return card_road_info_.size();
}
inline void gs_msg_dice_room_info::clear_card_road_info() {
  card_road_info_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_dice_history& gs_msg_dice_room_info::card_road_info(int index) const {
  return card_road_info_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_dice_history* gs_msg_dice_room_info::mutable_card_road_info(int index) {
  return card_road_info_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_dice_history* gs_msg_dice_room_info::add_card_road_info() {
  return card_road_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_dice_history >&
gs_msg_dice_room_info::card_road_info() const {
  return card_road_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_dice_history >*
gs_msg_dice_room_info::mutable_card_road_info() {
  return &card_road_info_;
}

// -------------------------------------------------------------------

// packetgs2c_dice_game_history_result

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_dice_history_result];
inline bool packetgs2c_dice_game_history_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetgs2c_dice_game_history_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetgs2c_dice_game_history_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetgs2c_dice_game_history_result::clear_packet_id() {
  packet_id_ = 31012;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetgs2c_dice_game_history_result::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetgs2c_dice_game_history_result::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 all_data_flag = 2;
inline bool packetgs2c_dice_game_history_result::has_all_data_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetgs2c_dice_game_history_result::set_has_all_data_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetgs2c_dice_game_history_result::clear_has_all_data_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetgs2c_dice_game_history_result::clear_all_data_flag() {
  all_data_flag_ = 0;
  clear_has_all_data_flag();
}
inline ::google::protobuf::int32 packetgs2c_dice_game_history_result::all_data_flag() const {
  return all_data_flag_;
}
inline void packetgs2c_dice_game_history_result::set_all_data_flag(::google::protobuf::int32 value) {
  set_has_all_data_flag();
  all_data_flag_ = value;
}

// repeated .client2gstate_protocols.gs_msg_dice_room_info room_history = 3;
inline int packetgs2c_dice_game_history_result::room_history_size() const {
  return room_history_.size();
}
inline void packetgs2c_dice_game_history_result::clear_room_history() {
  room_history_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_dice_room_info& packetgs2c_dice_game_history_result::room_history(int index) const {
  return room_history_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_dice_room_info* packetgs2c_dice_game_history_result::mutable_room_history(int index) {
  return room_history_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_dice_room_info* packetgs2c_dice_game_history_result::add_room_history() {
  return room_history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_dice_room_info >&
packetgs2c_dice_game_history_result::room_history() const {
  return room_history_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_dice_room_info >*
packetgs2c_dice_game_history_result::mutable_room_history() {
  return &room_history_;
}

// -------------------------------------------------------------------

// gs_msg_qznn_room_info

// optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
inline bool gs_msg_qznn_room_info::has_base_room_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_qznn_room_info::set_has_base_room_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_qznn_room_info::clear_has_base_room_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_qznn_room_info::clear_base_room_info() {
  if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
  clear_has_base_room_info();
}
inline const ::client2gstate_protocols::gs_base_room_info& gs_msg_qznn_room_info::base_room_info() const {
  return base_room_info_ != NULL ? *base_room_info_ : *default_instance_->base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_qznn_room_info::mutable_base_room_info() {
  set_has_base_room_info();
  if (base_room_info_ == NULL) base_room_info_ = new ::client2gstate_protocols::gs_base_room_info;
  return base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_qznn_room_info::release_base_room_info() {
  clear_has_base_room_info();
  ::client2gstate_protocols::gs_base_room_info* temp = base_room_info_;
  base_room_info_ = NULL;
  return temp;
}
inline void gs_msg_qznn_room_info::set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info) {
  delete base_room_info_;
  base_room_info_ = base_room_info;
  if (base_room_info) {
    set_has_base_room_info();
  } else {
    clear_has_base_room_info();
  }
}

// optional int64 total_award = 2;
inline bool gs_msg_qznn_room_info::has_total_award() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_msg_qznn_room_info::set_has_total_award() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_msg_qznn_room_info::clear_has_total_award() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_msg_qznn_room_info::clear_total_award() {
  total_award_ = GOOGLE_LONGLONG(0);
  clear_has_total_award();
}
inline ::google::protobuf::int64 gs_msg_qznn_room_info::total_award() const {
  return total_award_;
}
inline void gs_msg_qznn_room_info::set_total_award(::google::protobuf::int64 value) {
  set_has_total_award();
  total_award_ = value;
}

// -------------------------------------------------------------------

// packetgs2c_qznn_game_history_result

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_qznn_history_result];
inline bool packetgs2c_qznn_game_history_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetgs2c_qznn_game_history_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetgs2c_qznn_game_history_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetgs2c_qznn_game_history_result::clear_packet_id() {
  packet_id_ = 31013;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetgs2c_qznn_game_history_result::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetgs2c_qznn_game_history_result::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 all_data_flag = 2;
inline bool packetgs2c_qznn_game_history_result::has_all_data_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetgs2c_qznn_game_history_result::set_has_all_data_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetgs2c_qznn_game_history_result::clear_has_all_data_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetgs2c_qznn_game_history_result::clear_all_data_flag() {
  all_data_flag_ = 0;
  clear_has_all_data_flag();
}
inline ::google::protobuf::int32 packetgs2c_qznn_game_history_result::all_data_flag() const {
  return all_data_flag_;
}
inline void packetgs2c_qznn_game_history_result::set_all_data_flag(::google::protobuf::int32 value) {
  set_has_all_data_flag();
  all_data_flag_ = value;
}

// repeated .client2gstate_protocols.gs_msg_qznn_room_info room_history = 3;
inline int packetgs2c_qznn_game_history_result::room_history_size() const {
  return room_history_.size();
}
inline void packetgs2c_qznn_game_history_result::clear_room_history() {
  room_history_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_qznn_room_info& packetgs2c_qznn_game_history_result::room_history(int index) const {
  return room_history_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_qznn_room_info* packetgs2c_qznn_game_history_result::mutable_room_history(int index) {
  return room_history_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_qznn_room_info* packetgs2c_qznn_game_history_result::add_room_history() {
  return room_history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_qznn_room_info >&
packetgs2c_qznn_game_history_result::room_history() const {
  return room_history_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_qznn_room_info >*
packetgs2c_qznn_game_history_result::mutable_room_history() {
  return &room_history_;
}

// -------------------------------------------------------------------

// gs_msg_tbnn_room_info

// optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
inline bool gs_msg_tbnn_room_info::has_base_room_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_tbnn_room_info::set_has_base_room_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_tbnn_room_info::clear_has_base_room_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_tbnn_room_info::clear_base_room_info() {
  if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
  clear_has_base_room_info();
}
inline const ::client2gstate_protocols::gs_base_room_info& gs_msg_tbnn_room_info::base_room_info() const {
  return base_room_info_ != NULL ? *base_room_info_ : *default_instance_->base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_tbnn_room_info::mutable_base_room_info() {
  set_has_base_room_info();
  if (base_room_info_ == NULL) base_room_info_ = new ::client2gstate_protocols::gs_base_room_info;
  return base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_tbnn_room_info::release_base_room_info() {
  clear_has_base_room_info();
  ::client2gstate_protocols::gs_base_room_info* temp = base_room_info_;
  base_room_info_ = NULL;
  return temp;
}
inline void gs_msg_tbnn_room_info::set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info) {
  delete base_room_info_;
  base_room_info_ = base_room_info;
  if (base_room_info) {
    set_has_base_room_info();
  } else {
    clear_has_base_room_info();
  }
}

// optional int64 total_award = 2;
inline bool gs_msg_tbnn_room_info::has_total_award() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_msg_tbnn_room_info::set_has_total_award() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_msg_tbnn_room_info::clear_has_total_award() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_msg_tbnn_room_info::clear_total_award() {
  total_award_ = GOOGLE_LONGLONG(0);
  clear_has_total_award();
}
inline ::google::protobuf::int64 gs_msg_tbnn_room_info::total_award() const {
  return total_award_;
}
inline void gs_msg_tbnn_room_info::set_total_award(::google::protobuf::int64 value) {
  set_has_total_award();
  total_award_ = value;
}

// -------------------------------------------------------------------

// packetgs2c_tbnn_game_history_result

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_tbnn_history_result];
inline bool packetgs2c_tbnn_game_history_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetgs2c_tbnn_game_history_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetgs2c_tbnn_game_history_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetgs2c_tbnn_game_history_result::clear_packet_id() {
  packet_id_ = 31020;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetgs2c_tbnn_game_history_result::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetgs2c_tbnn_game_history_result::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 all_data_flag = 2;
inline bool packetgs2c_tbnn_game_history_result::has_all_data_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetgs2c_tbnn_game_history_result::set_has_all_data_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetgs2c_tbnn_game_history_result::clear_has_all_data_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetgs2c_tbnn_game_history_result::clear_all_data_flag() {
  all_data_flag_ = 0;
  clear_has_all_data_flag();
}
inline ::google::protobuf::int32 packetgs2c_tbnn_game_history_result::all_data_flag() const {
  return all_data_flag_;
}
inline void packetgs2c_tbnn_game_history_result::set_all_data_flag(::google::protobuf::int32 value) {
  set_has_all_data_flag();
  all_data_flag_ = value;
}

// repeated .client2gstate_protocols.gs_msg_tbnn_room_info room_history = 3;
inline int packetgs2c_tbnn_game_history_result::room_history_size() const {
  return room_history_.size();
}
inline void packetgs2c_tbnn_game_history_result::clear_room_history() {
  room_history_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_tbnn_room_info& packetgs2c_tbnn_game_history_result::room_history(int index) const {
  return room_history_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_tbnn_room_info* packetgs2c_tbnn_game_history_result::mutable_room_history(int index) {
  return room_history_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_tbnn_room_info* packetgs2c_tbnn_game_history_result::add_room_history() {
  return room_history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_tbnn_room_info >&
packetgs2c_tbnn_game_history_result::room_history() const {
  return room_history_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_tbnn_room_info >*
packetgs2c_tbnn_game_history_result::mutable_room_history() {
  return &room_history_;
}

// -------------------------------------------------------------------

// gs_msg_carsmagnate_history

// optional int32 history_val = 1;
inline bool gs_msg_carsmagnate_history::has_history_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_carsmagnate_history::set_has_history_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_carsmagnate_history::clear_has_history_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_carsmagnate_history::clear_history_val() {
  history_val_ = 0;
  clear_has_history_val();
}
inline ::google::protobuf::int32 gs_msg_carsmagnate_history::history_val() const {
  return history_val_;
}
inline void gs_msg_carsmagnate_history::set_history_val(::google::protobuf::int32 value) {
  set_has_history_val();
  history_val_ = value;
}

// -------------------------------------------------------------------

// gs_msg_carsmagnate_room_info

// optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
inline bool gs_msg_carsmagnate_room_info::has_base_room_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_carsmagnate_room_info::set_has_base_room_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_carsmagnate_room_info::clear_has_base_room_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_carsmagnate_room_info::clear_base_room_info() {
  if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
  clear_has_base_room_info();
}
inline const ::client2gstate_protocols::gs_base_room_info& gs_msg_carsmagnate_room_info::base_room_info() const {
  return base_room_info_ != NULL ? *base_room_info_ : *default_instance_->base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_carsmagnate_room_info::mutable_base_room_info() {
  set_has_base_room_info();
  if (base_room_info_ == NULL) base_room_info_ = new ::client2gstate_protocols::gs_base_room_info;
  return base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_carsmagnate_room_info::release_base_room_info() {
  clear_has_base_room_info();
  ::client2gstate_protocols::gs_base_room_info* temp = base_room_info_;
  base_room_info_ = NULL;
  return temp;
}
inline void gs_msg_carsmagnate_room_info::set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info) {
  delete base_room_info_;
  base_room_info_ = base_room_info;
  if (base_room_info) {
    set_has_base_room_info();
  } else {
    clear_has_base_room_info();
  }
}

// repeated .client2gstate_protocols.gs_msg_carsmagnate_history card_road_info = 2;
inline int gs_msg_carsmagnate_room_info::card_road_info_size() const {
  return card_road_info_.size();
}
inline void gs_msg_carsmagnate_room_info::clear_card_road_info() {
  card_road_info_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_carsmagnate_history& gs_msg_carsmagnate_room_info::card_road_info(int index) const {
  return card_road_info_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_carsmagnate_history* gs_msg_carsmagnate_room_info::mutable_card_road_info(int index) {
  return card_road_info_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_carsmagnate_history* gs_msg_carsmagnate_room_info::add_card_road_info() {
  return card_road_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_carsmagnate_history >&
gs_msg_carsmagnate_room_info::card_road_info() const {
  return card_road_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_carsmagnate_history >*
gs_msg_carsmagnate_room_info::mutable_card_road_info() {
  return &card_road_info_;
}

// -------------------------------------------------------------------

// packetgs2c_carsmagnate_game_history_result

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_carsmagnate_history_result];
inline bool packetgs2c_carsmagnate_game_history_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetgs2c_carsmagnate_game_history_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetgs2c_carsmagnate_game_history_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetgs2c_carsmagnate_game_history_result::clear_packet_id() {
  packet_id_ = 31014;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetgs2c_carsmagnate_game_history_result::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetgs2c_carsmagnate_game_history_result::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 all_data_flag = 2;
inline bool packetgs2c_carsmagnate_game_history_result::has_all_data_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetgs2c_carsmagnate_game_history_result::set_has_all_data_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetgs2c_carsmagnate_game_history_result::clear_has_all_data_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetgs2c_carsmagnate_game_history_result::clear_all_data_flag() {
  all_data_flag_ = 0;
  clear_has_all_data_flag();
}
inline ::google::protobuf::int32 packetgs2c_carsmagnate_game_history_result::all_data_flag() const {
  return all_data_flag_;
}
inline void packetgs2c_carsmagnate_game_history_result::set_all_data_flag(::google::protobuf::int32 value) {
  set_has_all_data_flag();
  all_data_flag_ = value;
}

// repeated .client2gstate_protocols.gs_msg_carsmagnate_room_info room_history = 3;
inline int packetgs2c_carsmagnate_game_history_result::room_history_size() const {
  return room_history_.size();
}
inline void packetgs2c_carsmagnate_game_history_result::clear_room_history() {
  room_history_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_carsmagnate_room_info& packetgs2c_carsmagnate_game_history_result::room_history(int index) const {
  return room_history_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_carsmagnate_room_info* packetgs2c_carsmagnate_game_history_result::mutable_room_history(int index) {
  return room_history_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_carsmagnate_room_info* packetgs2c_carsmagnate_game_history_result::add_room_history() {
  return room_history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_carsmagnate_room_info >&
packetgs2c_carsmagnate_game_history_result::room_history() const {
  return room_history_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_carsmagnate_room_info >*
packetgs2c_carsmagnate_game_history_result::mutable_room_history() {
  return &room_history_;
}

// -------------------------------------------------------------------

// gs_msg_multitexas_history

// repeated int32 win = 1;
inline int gs_msg_multitexas_history::win_size() const {
  return win_.size();
}
inline void gs_msg_multitexas_history::clear_win() {
  win_.Clear();
}
inline ::google::protobuf::int32 gs_msg_multitexas_history::win(int index) const {
  return win_.Get(index);
}
inline void gs_msg_multitexas_history::set_win(int index, ::google::protobuf::int32 value) {
  win_.Set(index, value);
}
inline void gs_msg_multitexas_history::add_win(::google::protobuf::int32 value) {
  win_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gs_msg_multitexas_history::win() const {
  return win_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gs_msg_multitexas_history::mutable_win() {
  return &win_;
}

// -------------------------------------------------------------------

// gs_msg_multitexas_room_info

// optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
inline bool gs_msg_multitexas_room_info::has_base_room_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_multitexas_room_info::set_has_base_room_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_multitexas_room_info::clear_has_base_room_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_multitexas_room_info::clear_base_room_info() {
  if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
  clear_has_base_room_info();
}
inline const ::client2gstate_protocols::gs_base_room_info& gs_msg_multitexas_room_info::base_room_info() const {
  return base_room_info_ != NULL ? *base_room_info_ : *default_instance_->base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_multitexas_room_info::mutable_base_room_info() {
  set_has_base_room_info();
  if (base_room_info_ == NULL) base_room_info_ = new ::client2gstate_protocols::gs_base_room_info;
  return base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_multitexas_room_info::release_base_room_info() {
  clear_has_base_room_info();
  ::client2gstate_protocols::gs_base_room_info* temp = base_room_info_;
  base_room_info_ = NULL;
  return temp;
}
inline void gs_msg_multitexas_room_info::set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info) {
  delete base_room_info_;
  base_room_info_ = base_room_info;
  if (base_room_info) {
    set_has_base_room_info();
  } else {
    clear_has_base_room_info();
  }
}

// repeated .client2gstate_protocols.gs_msg_multitexas_history card_road_info = 2;
inline int gs_msg_multitexas_room_info::card_road_info_size() const {
  return card_road_info_.size();
}
inline void gs_msg_multitexas_room_info::clear_card_road_info() {
  card_road_info_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_multitexas_history& gs_msg_multitexas_room_info::card_road_info(int index) const {
  return card_road_info_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_multitexas_history* gs_msg_multitexas_room_info::mutable_card_road_info(int index) {
  return card_road_info_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_multitexas_history* gs_msg_multitexas_room_info::add_card_road_info() {
  return card_road_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_multitexas_history >&
gs_msg_multitexas_room_info::card_road_info() const {
  return card_road_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_multitexas_history >*
gs_msg_multitexas_room_info::mutable_card_road_info() {
  return &card_road_info_;
}

// -------------------------------------------------------------------

// packetgs2c_multitexas_game_history_result

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_multitexas_history_result];
inline bool packetgs2c_multitexas_game_history_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetgs2c_multitexas_game_history_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetgs2c_multitexas_game_history_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetgs2c_multitexas_game_history_result::clear_packet_id() {
  packet_id_ = 31015;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetgs2c_multitexas_game_history_result::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetgs2c_multitexas_game_history_result::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 all_data_flag = 2;
inline bool packetgs2c_multitexas_game_history_result::has_all_data_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetgs2c_multitexas_game_history_result::set_has_all_data_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetgs2c_multitexas_game_history_result::clear_has_all_data_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetgs2c_multitexas_game_history_result::clear_all_data_flag() {
  all_data_flag_ = 0;
  clear_has_all_data_flag();
}
inline ::google::protobuf::int32 packetgs2c_multitexas_game_history_result::all_data_flag() const {
  return all_data_flag_;
}
inline void packetgs2c_multitexas_game_history_result::set_all_data_flag(::google::protobuf::int32 value) {
  set_has_all_data_flag();
  all_data_flag_ = value;
}

// repeated .client2gstate_protocols.gs_msg_multitexas_room_info room_history = 3;
inline int packetgs2c_multitexas_game_history_result::room_history_size() const {
  return room_history_.size();
}
inline void packetgs2c_multitexas_game_history_result::clear_room_history() {
  room_history_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_multitexas_room_info& packetgs2c_multitexas_game_history_result::room_history(int index) const {
  return room_history_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_multitexas_room_info* packetgs2c_multitexas_game_history_result::mutable_room_history(int index) {
  return room_history_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_multitexas_room_info* packetgs2c_multitexas_game_history_result::add_room_history() {
  return room_history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_multitexas_room_info >&
packetgs2c_multitexas_game_history_result::room_history() const {
  return room_history_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_multitexas_room_info >*
packetgs2c_multitexas_game_history_result::mutable_room_history() {
  return &room_history_;
}

// -------------------------------------------------------------------

// gs_msg_fruits_history

// optional int32 history_val = 1;
inline bool gs_msg_fruits_history::has_history_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_fruits_history::set_has_history_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_fruits_history::clear_has_history_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_fruits_history::clear_history_val() {
  history_val_ = 0;
  clear_has_history_val();
}
inline ::google::protobuf::int32 gs_msg_fruits_history::history_val() const {
  return history_val_;
}
inline void gs_msg_fruits_history::set_history_val(::google::protobuf::int32 value) {
  set_has_history_val();
  history_val_ = value;
}

// -------------------------------------------------------------------

// gs_msg_fruits_room_info

// optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
inline bool gs_msg_fruits_room_info::has_base_room_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_fruits_room_info::set_has_base_room_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_fruits_room_info::clear_has_base_room_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_fruits_room_info::clear_base_room_info() {
  if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
  clear_has_base_room_info();
}
inline const ::client2gstate_protocols::gs_base_room_info& gs_msg_fruits_room_info::base_room_info() const {
  return base_room_info_ != NULL ? *base_room_info_ : *default_instance_->base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_fruits_room_info::mutable_base_room_info() {
  set_has_base_room_info();
  if (base_room_info_ == NULL) base_room_info_ = new ::client2gstate_protocols::gs_base_room_info;
  return base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_fruits_room_info::release_base_room_info() {
  clear_has_base_room_info();
  ::client2gstate_protocols::gs_base_room_info* temp = base_room_info_;
  base_room_info_ = NULL;
  return temp;
}
inline void gs_msg_fruits_room_info::set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info) {
  delete base_room_info_;
  base_room_info_ = base_room_info;
  if (base_room_info) {
    set_has_base_room_info();
  } else {
    clear_has_base_room_info();
  }
}

// repeated .client2gstate_protocols.gs_msg_fruits_history card_road_info = 2;
inline int gs_msg_fruits_room_info::card_road_info_size() const {
  return card_road_info_.size();
}
inline void gs_msg_fruits_room_info::clear_card_road_info() {
  card_road_info_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_fruits_history& gs_msg_fruits_room_info::card_road_info(int index) const {
  return card_road_info_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_fruits_history* gs_msg_fruits_room_info::mutable_card_road_info(int index) {
  return card_road_info_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_fruits_history* gs_msg_fruits_room_info::add_card_road_info() {
  return card_road_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_fruits_history >&
gs_msg_fruits_room_info::card_road_info() const {
  return card_road_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_fruits_history >*
gs_msg_fruits_room_info::mutable_card_road_info() {
  return &card_road_info_;
}

// -------------------------------------------------------------------

// packetgs2c_fruits_game_history_result

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_fruits_history_result];
inline bool packetgs2c_fruits_game_history_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetgs2c_fruits_game_history_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetgs2c_fruits_game_history_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetgs2c_fruits_game_history_result::clear_packet_id() {
  packet_id_ = 31016;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetgs2c_fruits_game_history_result::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetgs2c_fruits_game_history_result::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 all_data_flag = 2;
inline bool packetgs2c_fruits_game_history_result::has_all_data_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetgs2c_fruits_game_history_result::set_has_all_data_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetgs2c_fruits_game_history_result::clear_has_all_data_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetgs2c_fruits_game_history_result::clear_all_data_flag() {
  all_data_flag_ = 0;
  clear_has_all_data_flag();
}
inline ::google::protobuf::int32 packetgs2c_fruits_game_history_result::all_data_flag() const {
  return all_data_flag_;
}
inline void packetgs2c_fruits_game_history_result::set_all_data_flag(::google::protobuf::int32 value) {
  set_has_all_data_flag();
  all_data_flag_ = value;
}

// repeated .client2gstate_protocols.gs_msg_fruits_room_info room_history = 3;
inline int packetgs2c_fruits_game_history_result::room_history_size() const {
  return room_history_.size();
}
inline void packetgs2c_fruits_game_history_result::clear_room_history() {
  room_history_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_fruits_room_info& packetgs2c_fruits_game_history_result::room_history(int index) const {
  return room_history_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_fruits_room_info* packetgs2c_fruits_game_history_result::mutable_room_history(int index) {
  return room_history_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_fruits_room_info* packetgs2c_fruits_game_history_result::add_room_history() {
  return room_history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_fruits_room_info >&
packetgs2c_fruits_game_history_result::room_history() const {
  return room_history_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_fruits_room_info >*
packetgs2c_fruits_game_history_result::mutable_room_history() {
  return &room_history_;
}

// -------------------------------------------------------------------

// gs_msg_forest_history

// optional int32 history_val = 1;
inline bool gs_msg_forest_history::has_history_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_forest_history::set_has_history_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_forest_history::clear_has_history_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_forest_history::clear_history_val() {
  history_val_ = 0;
  clear_has_history_val();
}
inline ::google::protobuf::int32 gs_msg_forest_history::history_val() const {
  return history_val_;
}
inline void gs_msg_forest_history::set_history_val(::google::protobuf::int32 value) {
  set_has_history_val();
  history_val_ = value;
}

// -------------------------------------------------------------------

// gs_msg_forest_room_info

// optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
inline bool gs_msg_forest_room_info::has_base_room_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_forest_room_info::set_has_base_room_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_forest_room_info::clear_has_base_room_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_forest_room_info::clear_base_room_info() {
  if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
  clear_has_base_room_info();
}
inline const ::client2gstate_protocols::gs_base_room_info& gs_msg_forest_room_info::base_room_info() const {
  return base_room_info_ != NULL ? *base_room_info_ : *default_instance_->base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_forest_room_info::mutable_base_room_info() {
  set_has_base_room_info();
  if (base_room_info_ == NULL) base_room_info_ = new ::client2gstate_protocols::gs_base_room_info;
  return base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_forest_room_info::release_base_room_info() {
  clear_has_base_room_info();
  ::client2gstate_protocols::gs_base_room_info* temp = base_room_info_;
  base_room_info_ = NULL;
  return temp;
}
inline void gs_msg_forest_room_info::set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info) {
  delete base_room_info_;
  base_room_info_ = base_room_info;
  if (base_room_info) {
    set_has_base_room_info();
  } else {
    clear_has_base_room_info();
  }
}

// repeated .client2gstate_protocols.gs_msg_forest_history card_road_info = 2;
inline int gs_msg_forest_room_info::card_road_info_size() const {
  return card_road_info_.size();
}
inline void gs_msg_forest_room_info::clear_card_road_info() {
  card_road_info_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_forest_history& gs_msg_forest_room_info::card_road_info(int index) const {
  return card_road_info_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_forest_history* gs_msg_forest_room_info::mutable_card_road_info(int index) {
  return card_road_info_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_forest_history* gs_msg_forest_room_info::add_card_road_info() {
  return card_road_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_forest_history >&
gs_msg_forest_room_info::card_road_info() const {
  return card_road_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_forest_history >*
gs_msg_forest_room_info::mutable_card_road_info() {
  return &card_road_info_;
}

// -------------------------------------------------------------------

// packetgs2c_forest_game_history_result

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_forest_history_result];
inline bool packetgs2c_forest_game_history_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetgs2c_forest_game_history_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetgs2c_forest_game_history_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetgs2c_forest_game_history_result::clear_packet_id() {
  packet_id_ = 31017;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetgs2c_forest_game_history_result::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetgs2c_forest_game_history_result::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 all_data_flag = 2;
inline bool packetgs2c_forest_game_history_result::has_all_data_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetgs2c_forest_game_history_result::set_has_all_data_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetgs2c_forest_game_history_result::clear_has_all_data_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetgs2c_forest_game_history_result::clear_all_data_flag() {
  all_data_flag_ = 0;
  clear_has_all_data_flag();
}
inline ::google::protobuf::int32 packetgs2c_forest_game_history_result::all_data_flag() const {
  return all_data_flag_;
}
inline void packetgs2c_forest_game_history_result::set_all_data_flag(::google::protobuf::int32 value) {
  set_has_all_data_flag();
  all_data_flag_ = value;
}

// repeated .client2gstate_protocols.gs_msg_forest_room_info room_history = 3;
inline int packetgs2c_forest_game_history_result::room_history_size() const {
  return room_history_.size();
}
inline void packetgs2c_forest_game_history_result::clear_room_history() {
  room_history_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_forest_room_info& packetgs2c_forest_game_history_result::room_history(int index) const {
  return room_history_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_forest_room_info* packetgs2c_forest_game_history_result::mutable_room_history(int index) {
  return room_history_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_forest_room_info* packetgs2c_forest_game_history_result::add_room_history() {
  return room_history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_forest_room_info >&
packetgs2c_forest_game_history_result::room_history() const {
  return room_history_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_forest_room_info >*
packetgs2c_forest_game_history_result::mutable_room_history() {
  return &room_history_;
}

// -------------------------------------------------------------------

// gs_msg_fourcolorball_history

// optional int32 history_val = 1;
inline bool gs_msg_fourcolorball_history::has_history_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_fourcolorball_history::set_has_history_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_fourcolorball_history::clear_has_history_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_fourcolorball_history::clear_history_val() {
  history_val_ = 0;
  clear_has_history_val();
}
inline ::google::protobuf::int32 gs_msg_fourcolorball_history::history_val() const {
  return history_val_;
}
inline void gs_msg_fourcolorball_history::set_history_val(::google::protobuf::int32 value) {
  set_has_history_val();
  history_val_ = value;
}

// -------------------------------------------------------------------

// gs_msg_fourcolorball_room_info

// optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
inline bool gs_msg_fourcolorball_room_info::has_base_room_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_fourcolorball_room_info::set_has_base_room_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_fourcolorball_room_info::clear_has_base_room_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_fourcolorball_room_info::clear_base_room_info() {
  if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
  clear_has_base_room_info();
}
inline const ::client2gstate_protocols::gs_base_room_info& gs_msg_fourcolorball_room_info::base_room_info() const {
  return base_room_info_ != NULL ? *base_room_info_ : *default_instance_->base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_fourcolorball_room_info::mutable_base_room_info() {
  set_has_base_room_info();
  if (base_room_info_ == NULL) base_room_info_ = new ::client2gstate_protocols::gs_base_room_info;
  return base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_fourcolorball_room_info::release_base_room_info() {
  clear_has_base_room_info();
  ::client2gstate_protocols::gs_base_room_info* temp = base_room_info_;
  base_room_info_ = NULL;
  return temp;
}
inline void gs_msg_fourcolorball_room_info::set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info) {
  delete base_room_info_;
  base_room_info_ = base_room_info;
  if (base_room_info) {
    set_has_base_room_info();
  } else {
    clear_has_base_room_info();
  }
}

// repeated .client2gstate_protocols.gs_msg_fourcolorball_history card_road_info = 2;
inline int gs_msg_fourcolorball_room_info::card_road_info_size() const {
  return card_road_info_.size();
}
inline void gs_msg_fourcolorball_room_info::clear_card_road_info() {
  card_road_info_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_fourcolorball_history& gs_msg_fourcolorball_room_info::card_road_info(int index) const {
  return card_road_info_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_fourcolorball_history* gs_msg_fourcolorball_room_info::mutable_card_road_info(int index) {
  return card_road_info_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_fourcolorball_history* gs_msg_fourcolorball_room_info::add_card_road_info() {
  return card_road_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_fourcolorball_history >&
gs_msg_fourcolorball_room_info::card_road_info() const {
  return card_road_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_fourcolorball_history >*
gs_msg_fourcolorball_room_info::mutable_card_road_info() {
  return &card_road_info_;
}

// -------------------------------------------------------------------

// packetgs2c_fourcolorball_game_history_result

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_fourcolorball_history_result];
inline bool packetgs2c_fourcolorball_game_history_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetgs2c_fourcolorball_game_history_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetgs2c_fourcolorball_game_history_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetgs2c_fourcolorball_game_history_result::clear_packet_id() {
  packet_id_ = 31018;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetgs2c_fourcolorball_game_history_result::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetgs2c_fourcolorball_game_history_result::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 all_data_flag = 2;
inline bool packetgs2c_fourcolorball_game_history_result::has_all_data_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetgs2c_fourcolorball_game_history_result::set_has_all_data_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetgs2c_fourcolorball_game_history_result::clear_has_all_data_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetgs2c_fourcolorball_game_history_result::clear_all_data_flag() {
  all_data_flag_ = 0;
  clear_has_all_data_flag();
}
inline ::google::protobuf::int32 packetgs2c_fourcolorball_game_history_result::all_data_flag() const {
  return all_data_flag_;
}
inline void packetgs2c_fourcolorball_game_history_result::set_all_data_flag(::google::protobuf::int32 value) {
  set_has_all_data_flag();
  all_data_flag_ = value;
}

// repeated .client2gstate_protocols.gs_msg_fourcolorball_room_info room_history = 3;
inline int packetgs2c_fourcolorball_game_history_result::room_history_size() const {
  return room_history_.size();
}
inline void packetgs2c_fourcolorball_game_history_result::clear_room_history() {
  room_history_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_fourcolorball_room_info& packetgs2c_fourcolorball_game_history_result::room_history(int index) const {
  return room_history_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_fourcolorball_room_info* packetgs2c_fourcolorball_game_history_result::mutable_room_history(int index) {
  return room_history_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_fourcolorball_room_info* packetgs2c_fourcolorball_game_history_result::add_room_history() {
  return room_history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_fourcolorball_room_info >&
packetgs2c_fourcolorball_game_history_result::room_history() const {
  return room_history_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_fourcolorball_room_info >*
packetgs2c_fourcolorball_game_history_result::mutable_room_history() {
  return &room_history_;
}

// -------------------------------------------------------------------

// gs_msg_happySupremacy_history

// optional bool is_forward_win = 1;
inline bool gs_msg_happySupremacy_history::has_is_forward_win() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_happySupremacy_history::set_has_is_forward_win() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_happySupremacy_history::clear_has_is_forward_win() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_happySupremacy_history::clear_is_forward_win() {
  is_forward_win_ = false;
  clear_has_is_forward_win();
}
inline bool gs_msg_happySupremacy_history::is_forward_win() const {
  return is_forward_win_;
}
inline void gs_msg_happySupremacy_history::set_is_forward_win(bool value) {
  set_has_is_forward_win();
  is_forward_win_ = value;
}

// optional bool is_reverse_win = 2;
inline bool gs_msg_happySupremacy_history::has_is_reverse_win() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_msg_happySupremacy_history::set_has_is_reverse_win() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_msg_happySupremacy_history::clear_has_is_reverse_win() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_msg_happySupremacy_history::clear_is_reverse_win() {
  is_reverse_win_ = false;
  clear_has_is_reverse_win();
}
inline bool gs_msg_happySupremacy_history::is_reverse_win() const {
  return is_reverse_win_;
}
inline void gs_msg_happySupremacy_history::set_is_reverse_win(bool value) {
  set_has_is_reverse_win();
  is_reverse_win_ = value;
}

// optional bool is_opposite_win = 3;
inline bool gs_msg_happySupremacy_history::has_is_opposite_win() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_msg_happySupremacy_history::set_has_is_opposite_win() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_msg_happySupremacy_history::clear_has_is_opposite_win() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_msg_happySupremacy_history::clear_is_opposite_win() {
  is_opposite_win_ = false;
  clear_has_is_opposite_win();
}
inline bool gs_msg_happySupremacy_history::is_opposite_win() const {
  return is_opposite_win_;
}
inline void gs_msg_happySupremacy_history::set_is_opposite_win(bool value) {
  set_has_is_opposite_win();
  is_opposite_win_ = value;
}

// repeated int32 cards = 4;
inline int gs_msg_happySupremacy_history::cards_size() const {
  return cards_.size();
}
inline void gs_msg_happySupremacy_history::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 gs_msg_happySupremacy_history::cards(int index) const {
  return cards_.Get(index);
}
inline void gs_msg_happySupremacy_history::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
}
inline void gs_msg_happySupremacy_history::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gs_msg_happySupremacy_history::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gs_msg_happySupremacy_history::mutable_cards() {
  return &cards_;
}

// repeated int32 cards_type = 5;
inline int gs_msg_happySupremacy_history::cards_type_size() const {
  return cards_type_.size();
}
inline void gs_msg_happySupremacy_history::clear_cards_type() {
  cards_type_.Clear();
}
inline ::google::protobuf::int32 gs_msg_happySupremacy_history::cards_type(int index) const {
  return cards_type_.Get(index);
}
inline void gs_msg_happySupremacy_history::set_cards_type(int index, ::google::protobuf::int32 value) {
  cards_type_.Set(index, value);
}
inline void gs_msg_happySupremacy_history::add_cards_type(::google::protobuf::int32 value) {
  cards_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gs_msg_happySupremacy_history::cards_type() const {
  return cards_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gs_msg_happySupremacy_history::mutable_cards_type() {
  return &cards_type_;
}

// -------------------------------------------------------------------

// gs_msg_happySupremacy_room_info

// optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
inline bool gs_msg_happySupremacy_room_info::has_base_room_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_happySupremacy_room_info::set_has_base_room_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_happySupremacy_room_info::clear_has_base_room_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_happySupremacy_room_info::clear_base_room_info() {
  if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
  clear_has_base_room_info();
}
inline const ::client2gstate_protocols::gs_base_room_info& gs_msg_happySupremacy_room_info::base_room_info() const {
  return base_room_info_ != NULL ? *base_room_info_ : *default_instance_->base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_happySupremacy_room_info::mutable_base_room_info() {
  set_has_base_room_info();
  if (base_room_info_ == NULL) base_room_info_ = new ::client2gstate_protocols::gs_base_room_info;
  return base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_happySupremacy_room_info::release_base_room_info() {
  clear_has_base_room_info();
  ::client2gstate_protocols::gs_base_room_info* temp = base_room_info_;
  base_room_info_ = NULL;
  return temp;
}
inline void gs_msg_happySupremacy_room_info::set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info) {
  delete base_room_info_;
  base_room_info_ = base_room_info;
  if (base_room_info) {
    set_has_base_room_info();
  } else {
    clear_has_base_room_info();
  }
}

// repeated .client2gstate_protocols.gs_msg_happySupremacy_history card_road_info = 2;
inline int gs_msg_happySupremacy_room_info::card_road_info_size() const {
  return card_road_info_.size();
}
inline void gs_msg_happySupremacy_room_info::clear_card_road_info() {
  card_road_info_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_happySupremacy_history& gs_msg_happySupremacy_room_info::card_road_info(int index) const {
  return card_road_info_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_happySupremacy_history* gs_msg_happySupremacy_room_info::mutable_card_road_info(int index) {
  return card_road_info_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_happySupremacy_history* gs_msg_happySupremacy_room_info::add_card_road_info() {
  return card_road_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_happySupremacy_history >&
gs_msg_happySupremacy_room_info::card_road_info() const {
  return card_road_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_happySupremacy_history >*
gs_msg_happySupremacy_room_info::mutable_card_road_info() {
  return &card_road_info_;
}

// -------------------------------------------------------------------

// packetgs2c_happySupremacy_game_history_result

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_happySupremacy_history_result];
inline bool packetgs2c_happySupremacy_game_history_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetgs2c_happySupremacy_game_history_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetgs2c_happySupremacy_game_history_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetgs2c_happySupremacy_game_history_result::clear_packet_id() {
  packet_id_ = 31019;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetgs2c_happySupremacy_game_history_result::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetgs2c_happySupremacy_game_history_result::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 all_data_flag = 2;
inline bool packetgs2c_happySupremacy_game_history_result::has_all_data_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetgs2c_happySupremacy_game_history_result::set_has_all_data_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetgs2c_happySupremacy_game_history_result::clear_has_all_data_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetgs2c_happySupremacy_game_history_result::clear_all_data_flag() {
  all_data_flag_ = 0;
  clear_has_all_data_flag();
}
inline ::google::protobuf::int32 packetgs2c_happySupremacy_game_history_result::all_data_flag() const {
  return all_data_flag_;
}
inline void packetgs2c_happySupremacy_game_history_result::set_all_data_flag(::google::protobuf::int32 value) {
  set_has_all_data_flag();
  all_data_flag_ = value;
}

// repeated .client2gstate_protocols.gs_msg_happySupremacy_room_info room_history = 3;
inline int packetgs2c_happySupremacy_game_history_result::room_history_size() const {
  return room_history_.size();
}
inline void packetgs2c_happySupremacy_game_history_result::clear_room_history() {
  room_history_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_happySupremacy_room_info& packetgs2c_happySupremacy_game_history_result::room_history(int index) const {
  return room_history_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_happySupremacy_room_info* packetgs2c_happySupremacy_game_history_result::mutable_room_history(int index) {
  return room_history_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_happySupremacy_room_info* packetgs2c_happySupremacy_game_history_result::add_room_history() {
  return room_history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_happySupremacy_room_info >&
packetgs2c_happySupremacy_game_history_result::room_history() const {
  return room_history_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_happySupremacy_room_info >*
packetgs2c_happySupremacy_game_history_result::mutable_room_history() {
  return &room_history_;
}

// -------------------------------------------------------------------

// gs_msg_ttz_history

// repeated int32 cardid = 1;
inline int gs_msg_ttz_history::cardid_size() const {
  return cardid_.size();
}
inline void gs_msg_ttz_history::clear_cardid() {
  cardid_.Clear();
}
inline ::google::protobuf::int32 gs_msg_ttz_history::cardid(int index) const {
  return cardid_.Get(index);
}
inline void gs_msg_ttz_history::set_cardid(int index, ::google::protobuf::int32 value) {
  cardid_.Set(index, value);
}
inline void gs_msg_ttz_history::add_cardid(::google::protobuf::int32 value) {
  cardid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gs_msg_ttz_history::cardid() const {
  return cardid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gs_msg_ttz_history::mutable_cardid() {
  return &cardid_;
}

// -------------------------------------------------------------------

// gs_msg_ttz_room_info

// optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
inline bool gs_msg_ttz_room_info::has_base_room_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_msg_ttz_room_info::set_has_base_room_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_msg_ttz_room_info::clear_has_base_room_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_msg_ttz_room_info::clear_base_room_info() {
  if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
  clear_has_base_room_info();
}
inline const ::client2gstate_protocols::gs_base_room_info& gs_msg_ttz_room_info::base_room_info() const {
  return base_room_info_ != NULL ? *base_room_info_ : *default_instance_->base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_ttz_room_info::mutable_base_room_info() {
  set_has_base_room_info();
  if (base_room_info_ == NULL) base_room_info_ = new ::client2gstate_protocols::gs_base_room_info;
  return base_room_info_;
}
inline ::client2gstate_protocols::gs_base_room_info* gs_msg_ttz_room_info::release_base_room_info() {
  clear_has_base_room_info();
  ::client2gstate_protocols::gs_base_room_info* temp = base_room_info_;
  base_room_info_ = NULL;
  return temp;
}
inline void gs_msg_ttz_room_info::set_allocated_base_room_info(::client2gstate_protocols::gs_base_room_info* base_room_info) {
  delete base_room_info_;
  base_room_info_ = base_room_info;
  if (base_room_info) {
    set_has_base_room_info();
  } else {
    clear_has_base_room_info();
  }
}

// repeated .client2gstate_protocols.gs_msg_ttz_history card_road_info = 2;
inline int gs_msg_ttz_room_info::card_road_info_size() const {
  return card_road_info_.size();
}
inline void gs_msg_ttz_room_info::clear_card_road_info() {
  card_road_info_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_ttz_history& gs_msg_ttz_room_info::card_road_info(int index) const {
  return card_road_info_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_ttz_history* gs_msg_ttz_room_info::mutable_card_road_info(int index) {
  return card_road_info_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_ttz_history* gs_msg_ttz_room_info::add_card_road_info() {
  return card_road_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_ttz_history >&
gs_msg_ttz_room_info::card_road_info() const {
  return card_road_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_ttz_history >*
gs_msg_ttz_room_info::mutable_card_road_info() {
  return &card_road_info_;
}

// -------------------------------------------------------------------

// packetgs2c_ttz_game_history_result

// optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_ttz_history_result];
inline bool packetgs2c_ttz_game_history_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetgs2c_ttz_game_history_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetgs2c_ttz_game_history_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetgs2c_ttz_game_history_result::clear_packet_id() {
  packet_id_ = 31021;
  clear_has_packet_id();
}
inline ::client2gstate_protocols::e_server_msg_type packetgs2c_ttz_game_history_result::packet_id() const {
  return static_cast< ::client2gstate_protocols::e_server_msg_type >(packet_id_);
}
inline void packetgs2c_ttz_game_history_result::set_packet_id(::client2gstate_protocols::e_server_msg_type value) {
  assert(::client2gstate_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 all_data_flag = 2;
inline bool packetgs2c_ttz_game_history_result::has_all_data_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetgs2c_ttz_game_history_result::set_has_all_data_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetgs2c_ttz_game_history_result::clear_has_all_data_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetgs2c_ttz_game_history_result::clear_all_data_flag() {
  all_data_flag_ = 0;
  clear_has_all_data_flag();
}
inline ::google::protobuf::int32 packetgs2c_ttz_game_history_result::all_data_flag() const {
  return all_data_flag_;
}
inline void packetgs2c_ttz_game_history_result::set_all_data_flag(::google::protobuf::int32 value) {
  set_has_all_data_flag();
  all_data_flag_ = value;
}

// repeated .client2gstate_protocols.gs_msg_ttz_room_info room_history = 3;
inline int packetgs2c_ttz_game_history_result::room_history_size() const {
  return room_history_.size();
}
inline void packetgs2c_ttz_game_history_result::clear_room_history() {
  room_history_.Clear();
}
inline const ::client2gstate_protocols::gs_msg_ttz_room_info& packetgs2c_ttz_game_history_result::room_history(int index) const {
  return room_history_.Get(index);
}
inline ::client2gstate_protocols::gs_msg_ttz_room_info* packetgs2c_ttz_game_history_result::mutable_room_history(int index) {
  return room_history_.Mutable(index);
}
inline ::client2gstate_protocols::gs_msg_ttz_room_info* packetgs2c_ttz_game_history_result::add_room_history() {
  return room_history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_ttz_room_info >&
packetgs2c_ttz_game_history_result::room_history() const {
  return room_history_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2gstate_protocols::gs_msg_ttz_room_info >*
packetgs2c_ttz_game_history_result::mutable_room_history() {
  return &room_history_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2gstate_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client2gstate_5fprotocol_2eproto__INCLUDED
