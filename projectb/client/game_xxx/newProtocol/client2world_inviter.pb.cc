// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_inviter.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client2world_inviter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

namespace {

const ::google::protobuf::Descriptor* msg_inviter_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_inviter_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_bind_inviter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_bind_inviter_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_bind_inviter_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_bind_inviter_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_reward_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_reward_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_reward_list_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_reward_list_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_receive_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_receive_reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_receive_reward_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_receive_reward_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_ask_income_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_ask_income_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_income_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_income_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_income_new_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_income_new_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client2world_5finviter_2eproto() {
  protobuf_AddDesc_client2world_5finviter_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client2world_inviter.proto");
  GOOGLE_CHECK(file != NULL);
  msg_inviter_info_descriptor_ = file->message_type(0);
  static const int msg_inviter_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_inviter_info, photo_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_inviter_info, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_inviter_info, total_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_inviter_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_inviter_info, today_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_inviter_info, icon_custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_inviter_info, viplvl_),
  };
  msg_inviter_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_inviter_info_descriptor_,
      msg_inviter_info::default_instance_,
      msg_inviter_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_inviter_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_inviter_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_inviter_info));
  packetc2w_bind_inviter_descriptor_ = file->message_type(1);
  static const int packetc2w_bind_inviter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_bind_inviter, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_bind_inviter, inviter_),
  };
  packetc2w_bind_inviter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_bind_inviter_descriptor_,
      packetc2w_bind_inviter::default_instance_,
      packetc2w_bind_inviter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_bind_inviter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_bind_inviter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_bind_inviter));
  packetw2c_bind_inviter_result_descriptor_ = file->message_type(2);
  static const int packetw2c_bind_inviter_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_bind_inviter_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_bind_inviter_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_bind_inviter_result, inviter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_bind_inviter_result, channelid_),
  };
  packetw2c_bind_inviter_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_bind_inviter_result_descriptor_,
      packetw2c_bind_inviter_result::default_instance_,
      packetw2c_bind_inviter_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_bind_inviter_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_bind_inviter_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_bind_inviter_result));
  packetc2w_reward_list_descriptor_ = file->message_type(3);
  static const int packetc2w_reward_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_reward_list, packet_id_),
  };
  packetc2w_reward_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_reward_list_descriptor_,
      packetc2w_reward_list::default_instance_,
      packetc2w_reward_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_reward_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_reward_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_reward_list));
  packetw2c_reward_list_result_descriptor_ = file->message_type(4);
  static const int packetw2c_reward_list_result_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_reward_list_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_reward_list_result, inviter_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_reward_list_result, water_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_reward_list_result, can_receive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_reward_list_result, total_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_reward_list_result, inviter_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_reward_list_result, inviter_reward_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_reward_list_result, invite_count_),
  };
  packetw2c_reward_list_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_reward_list_result_descriptor_,
      packetw2c_reward_list_result::default_instance_,
      packetw2c_reward_list_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_reward_list_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_reward_list_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_reward_list_result));
  packetc2w_receive_reward_descriptor_ = file->message_type(5);
  static const int packetc2w_receive_reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_receive_reward, packet_id_),
  };
  packetc2w_receive_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_receive_reward_descriptor_,
      packetc2w_receive_reward::default_instance_,
      packetc2w_receive_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_receive_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_receive_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_receive_reward));
  packetw2c_receive_reward_result_descriptor_ = file->message_type(6);
  static const int packetw2c_receive_reward_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_receive_reward_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_receive_reward_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_receive_reward_result, reward_),
  };
  packetw2c_receive_reward_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_receive_reward_result_descriptor_,
      packetw2c_receive_reward_result::default_instance_,
      packetw2c_receive_reward_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_receive_reward_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_receive_reward_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_receive_reward_result));
  packetc2w_ask_income_history_descriptor_ = file->message_type(7);
  static const int packetc2w_ask_income_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_income_history, packet_id_),
  };
  packetc2w_ask_income_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_ask_income_history_descriptor_,
      packetc2w_ask_income_history::default_instance_,
      packetc2w_ask_income_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_income_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_income_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_ask_income_history));
  packetw2c_income_history_result_descriptor_ = file->message_type(8);
  static const int packetw2c_income_history_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_income_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_income_history_result, history_infos_),
  };
  packetw2c_income_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_income_history_result_descriptor_,
      packetw2c_income_history_result::default_instance_,
      packetw2c_income_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_income_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_income_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_income_history_result));
  packetw2c_income_new_result_descriptor_ = file->message_type(9);
  static const int packetw2c_income_new_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_income_new_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_income_new_result, new_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_income_new_result, playerid_),
  };
  packetw2c_income_new_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_income_new_result_descriptor_,
      packetw2c_income_new_result::default_instance_,
      packetw2c_income_new_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_income_new_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_income_new_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_income_new_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client2world_5finviter_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_inviter_info_descriptor_, &msg_inviter_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_bind_inviter_descriptor_, &packetc2w_bind_inviter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_bind_inviter_result_descriptor_, &packetw2c_bind_inviter_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_reward_list_descriptor_, &packetc2w_reward_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_reward_list_result_descriptor_, &packetw2c_reward_list_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_receive_reward_descriptor_, &packetc2w_receive_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_receive_reward_result_descriptor_, &packetw2c_receive_reward_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_ask_income_history_descriptor_, &packetc2w_ask_income_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_income_history_result_descriptor_, &packetw2c_income_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_income_new_result_descriptor_, &packetw2c_income_new_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client2world_5finviter_2eproto() {
  delete msg_inviter_info::default_instance_;
  delete msg_inviter_info_reflection_;
  delete packetc2w_bind_inviter::default_instance_;
  delete packetc2w_bind_inviter_reflection_;
  delete packetw2c_bind_inviter_result::default_instance_;
  delete packetw2c_bind_inviter_result_reflection_;
  delete packetc2w_reward_list::default_instance_;
  delete packetc2w_reward_list_reflection_;
  delete packetw2c_reward_list_result::default_instance_;
  delete packetw2c_reward_list_result_reflection_;
  delete packetc2w_receive_reward::default_instance_;
  delete packetc2w_receive_reward_reflection_;
  delete packetw2c_receive_reward_result::default_instance_;
  delete packetw2c_receive_reward_result_reflection_;
  delete packetc2w_ask_income_history::default_instance_;
  delete packetc2w_ask_income_history_reflection_;
  delete packetw2c_income_history_result::default_instance_;
  delete packetw2c_income_history_result_reflection_;
  delete packetw2c_income_new_result::default_instance_;
  delete packetw2c_income_new_result_reflection_;
}

void protobuf_AddDesc_client2world_5finviter_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client2world_protocols::protobuf_AddDesc_client2world_5fmsg_5ftype_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032client2world_inviter.proto\022\026client2wor"
    "ld_protocols\032\033client2world_msg_type.prot"
    "o\032\022msg_type_def.proto\032\022msg_info_def.prot"
    "o\"\236\001\n\020msg_inviter_info\022\023\n\013photo_frame\030\001 "
    "\001(\005\022\021\n\tnick_name\030\002 \001(\t\022\024\n\014total_reward\030\003"
    " \001(\003\022\021\n\tplayer_id\030\004 \001(\005\022\024\n\014today_reward\030"
    "\005 \001(\003\022\023\n\013icon_custom\030\006 \001(\t\022\016\n\006viplvl\030\007 \001"
    "(\005\"\177\n\026packetc2w_bind_inviter\022T\n\tpacket_i"
    "d\030\001 \001(\0162).client2world_protocols.e_serve"
    "r_msg_type:\026e_mst_c2w_bind_inviter\022\017\n\007in"
    "viter\030\002 \001(\005\"\334\001\n\035packetw2c_bind_inviter_r"
    "esult\022[\n\tpacket_id\030\001 \001(\0162).client2world_"
    "protocols.e_server_msg_type:\035e_mst_w2c_b"
    "ind_inviter_result\022:\n\006result\030\002 \001(\0162\036.msg"
    "_type_def.e_msg_result_def:\ne_rmt_fail\022\017"
    "\n\007inviter\030\003 \001(\005\022\021\n\tchannelid\030\004 \001(\t\"l\n\025pa"
    "cketc2w_reward_list\022S\n\tpacket_id\030\001 \001(\0162)"
    ".client2world_protocols.e_server_msg_typ"
    "e:\025e_mst_c2w_reward_list\"\357\002\n\034packetw2c_r"
    "eward_list_result\022Z\n\tpacket_id\030\001 \001(\0162).c"
    "lient2world_protocols.e_server_msg_type:"
    "\034e_mst_w2c_reward_list_result\022>\n\014inviter"
    "_list\030\002 \003(\0132(.client2world_protocols.msg"
    "_inviter_info\022\024\n\014water_reward\030\003 \001(\005\022\023\n\013c"
    "an_receive\030\004 \001(\003\022\024\n\014total_reward\030\005 \001(\003\022>"
    "\n\014inviter_info\030\006 \001(\0132(.client2world_prot"
    "ocols.msg_inviter_info\022\034\n\024inviter_reward"
    "_count\030\007 \001(\005\022\024\n\014invite_count\030\010 \001(\005\"r\n\030pa"
    "cketc2w_receive_reward\022V\n\tpacket_id\030\001 \001("
    "\0162).client2world_protocols.e_server_msg_"
    "type:\030e_mst_c2w_receive_reward\"\314\001\n\037packe"
    "tw2c_receive_reward_result\022]\n\tpacket_id\030"
    "\001 \001(\0162).client2world_protocols.e_server_"
    "msg_type:\037e_mst_w2c_receive_reward_resul"
    "t\022:\n\006result\030\002 \001(\0162\036.msg_type_def.e_msg_r"
    "esult_def:\ne_rmt_fail\022\016\n\006reward\030\003 \001(\003\"z\n"
    "\034packetc2w_ask_income_history\022Z\n\tpacket_"
    "id\030\001 \001(\0162).client2world_protocols.e_serv"
    "er_msg_type:\034e_mst_c2w_ask_income_histor"
    "y\"\227\001\n\037packetw2c_income_history_result\022]\n"
    "\tpacket_id\030\001 \001(\0162).client2world_protocol"
    "s.e_server_msg_type:\037e_mst_w2c_income_hi"
    "story_result\022\025\n\rhistory_infos\030\002 \003(\t\"\235\001\n\033"
    "packetw2c_income_new_result\022Y\n\tpacket_id"
    "\030\001 \001(\0162).client2world_protocols.e_server"
    "_msg_type:\033e_mst_w2c_income_new_result\022\021"
    "\n\tnew_infos\030\002 \001(\t\022\020\n\010playerid\030\003 \001(\005", 1875);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client2world_inviter.proto", &protobuf_RegisterTypes);
  msg_inviter_info::default_instance_ = new msg_inviter_info();
  packetc2w_bind_inviter::default_instance_ = new packetc2w_bind_inviter();
  packetw2c_bind_inviter_result::default_instance_ = new packetw2c_bind_inviter_result();
  packetc2w_reward_list::default_instance_ = new packetc2w_reward_list();
  packetw2c_reward_list_result::default_instance_ = new packetw2c_reward_list_result();
  packetc2w_receive_reward::default_instance_ = new packetc2w_receive_reward();
  packetw2c_receive_reward_result::default_instance_ = new packetw2c_receive_reward_result();
  packetc2w_ask_income_history::default_instance_ = new packetc2w_ask_income_history();
  packetw2c_income_history_result::default_instance_ = new packetw2c_income_history_result();
  packetw2c_income_new_result::default_instance_ = new packetw2c_income_new_result();
  msg_inviter_info::default_instance_->InitAsDefaultInstance();
  packetc2w_bind_inviter::default_instance_->InitAsDefaultInstance();
  packetw2c_bind_inviter_result::default_instance_->InitAsDefaultInstance();
  packetc2w_reward_list::default_instance_->InitAsDefaultInstance();
  packetw2c_reward_list_result::default_instance_->InitAsDefaultInstance();
  packetc2w_receive_reward::default_instance_->InitAsDefaultInstance();
  packetw2c_receive_reward_result::default_instance_->InitAsDefaultInstance();
  packetc2w_ask_income_history::default_instance_->InitAsDefaultInstance();
  packetw2c_income_history_result::default_instance_->InitAsDefaultInstance();
  packetw2c_income_new_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client2world_5finviter_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client2world_5finviter_2eproto {
  StaticDescriptorInitializer_client2world_5finviter_2eproto() {
    protobuf_AddDesc_client2world_5finviter_2eproto();
  }
} static_descriptor_initializer_client2world_5finviter_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_inviter_info::kPhotoFrameFieldNumber;
const int msg_inviter_info::kNickNameFieldNumber;
const int msg_inviter_info::kTotalRewardFieldNumber;
const int msg_inviter_info::kPlayerIdFieldNumber;
const int msg_inviter_info::kTodayRewardFieldNumber;
const int msg_inviter_info::kIconCustomFieldNumber;
const int msg_inviter_info::kViplvlFieldNumber;
#endif  // !_MSC_VER

msg_inviter_info::msg_inviter_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_inviter_info::InitAsDefaultInstance() {
}

msg_inviter_info::msg_inviter_info(const msg_inviter_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_inviter_info::SharedCtor() {
  _cached_size_ = 0;
  photo_frame_ = 0;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_reward_ = GOOGLE_LONGLONG(0);
  player_id_ = 0;
  today_reward_ = GOOGLE_LONGLONG(0);
  icon_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  viplvl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_inviter_info::~msg_inviter_info() {
  SharedDtor();
}

void msg_inviter_info::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (icon_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_custom_;
  }
  if (this != default_instance_) {
  }
}

void msg_inviter_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_inviter_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_inviter_info_descriptor_;
}

const msg_inviter_info& msg_inviter_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5finviter_2eproto();
  return *default_instance_;
}

msg_inviter_info* msg_inviter_info::default_instance_ = NULL;

msg_inviter_info* msg_inviter_info::New() const {
  return new msg_inviter_info;
}

void msg_inviter_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    photo_frame_ = 0;
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    total_reward_ = GOOGLE_LONGLONG(0);
    player_id_ = 0;
    today_reward_ = GOOGLE_LONGLONG(0);
    if (has_icon_custom()) {
      if (icon_custom_ != &::google::protobuf::internal::kEmptyString) {
        icon_custom_->clear();
      }
    }
    viplvl_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_inviter_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 photo_frame = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photo_frame_)));
          set_has_photo_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_reward;
        break;
      }

      // optional int64 total_reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_reward_)));
          set_has_total_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_today_reward;
        break;
      }

      // optional int64 today_reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &today_reward_)));
          set_has_today_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_icon_custom;
        break;
      }

      // optional string icon_custom = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon_custom().data(), this->icon_custom().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_viplvl;
        break;
      }

      // optional int32 viplvl = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplvl_)));
          set_has_viplvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_inviter_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 photo_frame = 1;
  if (has_photo_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->photo_frame(), output);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick_name(), output);
  }

  // optional int64 total_reward = 3;
  if (has_total_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->total_reward(), output);
  }

  // optional int32 player_id = 4;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->player_id(), output);
  }

  // optional int64 today_reward = 5;
  if (has_today_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->today_reward(), output);
  }

  // optional string icon_custom = 6;
  if (has_icon_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon_custom().data(), this->icon_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->icon_custom(), output);
  }

  // optional int32 viplvl = 7;
  if (has_viplvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->viplvl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_inviter_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 photo_frame = 1;
  if (has_photo_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->photo_frame(), target);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick_name(), target);
  }

  // optional int64 total_reward = 3;
  if (has_total_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->total_reward(), target);
  }

  // optional int32 player_id = 4;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->player_id(), target);
  }

  // optional int64 today_reward = 5;
  if (has_today_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->today_reward(), target);
  }

  // optional string icon_custom = 6;
  if (has_icon_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon_custom().data(), this->icon_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->icon_custom(), target);
  }

  // optional int32 viplvl = 7;
  if (has_viplvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->viplvl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_inviter_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 photo_frame = 1;
    if (has_photo_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->photo_frame());
    }

    // optional string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional int64 total_reward = 3;
    if (has_total_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_reward());
    }

    // optional int32 player_id = 4;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int64 today_reward = 5;
    if (has_today_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->today_reward());
    }

    // optional string icon_custom = 6;
    if (has_icon_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_custom());
    }

    // optional int32 viplvl = 7;
    if (has_viplvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplvl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_inviter_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_inviter_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_inviter_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_inviter_info::MergeFrom(const msg_inviter_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_photo_frame()) {
      set_photo_frame(from.photo_frame());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_total_reward()) {
      set_total_reward(from.total_reward());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_today_reward()) {
      set_today_reward(from.today_reward());
    }
    if (from.has_icon_custom()) {
      set_icon_custom(from.icon_custom());
    }
    if (from.has_viplvl()) {
      set_viplvl(from.viplvl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_inviter_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_inviter_info::CopyFrom(const msg_inviter_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_inviter_info::IsInitialized() const {

  return true;
}

void msg_inviter_info::Swap(msg_inviter_info* other) {
  if (other != this) {
    std::swap(photo_frame_, other->photo_frame_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(total_reward_, other->total_reward_);
    std::swap(player_id_, other->player_id_);
    std::swap(today_reward_, other->today_reward_);
    std::swap(icon_custom_, other->icon_custom_);
    std::swap(viplvl_, other->viplvl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_inviter_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_inviter_info_descriptor_;
  metadata.reflection = msg_inviter_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_bind_inviter::kPacketIdFieldNumber;
const int packetc2w_bind_inviter::kInviterFieldNumber;
#endif  // !_MSC_VER

packetc2w_bind_inviter::packetc2w_bind_inviter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_bind_inviter::InitAsDefaultInstance() {
}

packetc2w_bind_inviter::packetc2w_bind_inviter(const packetc2w_bind_inviter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_bind_inviter::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5087;
  inviter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_bind_inviter::~packetc2w_bind_inviter() {
  SharedDtor();
}

void packetc2w_bind_inviter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_bind_inviter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_bind_inviter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_bind_inviter_descriptor_;
}

const packetc2w_bind_inviter& packetc2w_bind_inviter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5finviter_2eproto();
  return *default_instance_;
}

packetc2w_bind_inviter* packetc2w_bind_inviter::default_instance_ = NULL;

packetc2w_bind_inviter* packetc2w_bind_inviter::New() const {
  return new packetc2w_bind_inviter;
}

void packetc2w_bind_inviter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5087;
    inviter_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_bind_inviter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_bind_inviter];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inviter;
        break;
      }

      // optional int32 inviter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inviter_)));
          set_has_inviter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_bind_inviter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_bind_inviter];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 inviter = 2;
  if (has_inviter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inviter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_bind_inviter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_bind_inviter];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 inviter = 2;
  if (has_inviter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inviter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_bind_inviter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_bind_inviter];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 inviter = 2;
    if (has_inviter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inviter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_bind_inviter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_bind_inviter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_bind_inviter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_bind_inviter::MergeFrom(const packetc2w_bind_inviter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_inviter()) {
      set_inviter(from.inviter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_bind_inviter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_bind_inviter::CopyFrom(const packetc2w_bind_inviter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_bind_inviter::IsInitialized() const {

  return true;
}

void packetc2w_bind_inviter::Swap(packetc2w_bind_inviter* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(inviter_, other->inviter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_bind_inviter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_bind_inviter_descriptor_;
  metadata.reflection = packetc2w_bind_inviter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_bind_inviter_result::kPacketIdFieldNumber;
const int packetw2c_bind_inviter_result::kResultFieldNumber;
const int packetw2c_bind_inviter_result::kInviterFieldNumber;
const int packetw2c_bind_inviter_result::kChannelidFieldNumber;
#endif  // !_MSC_VER

packetw2c_bind_inviter_result::packetw2c_bind_inviter_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_bind_inviter_result::InitAsDefaultInstance() {
}

packetw2c_bind_inviter_result::packetw2c_bind_inviter_result(const packetw2c_bind_inviter_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_bind_inviter_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7595;
  result_ = 2;
  inviter_ = 0;
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_bind_inviter_result::~packetw2c_bind_inviter_result() {
  SharedDtor();
}

void packetw2c_bind_inviter_result::SharedDtor() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_bind_inviter_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_bind_inviter_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_bind_inviter_result_descriptor_;
}

const packetw2c_bind_inviter_result& packetw2c_bind_inviter_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5finviter_2eproto();
  return *default_instance_;
}

packetw2c_bind_inviter_result* packetw2c_bind_inviter_result::default_instance_ = NULL;

packetw2c_bind_inviter_result* packetw2c_bind_inviter_result::New() const {
  return new packetw2c_bind_inviter_result;
}

void packetw2c_bind_inviter_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7595;
    result_ = 2;
    inviter_ = 0;
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_bind_inviter_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_bind_inviter_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inviter;
        break;
      }

      // optional int32 inviter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inviter_)));
          set_has_inviter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_channelid;
        break;
      }

      // optional string channelid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_bind_inviter_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_bind_inviter_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 inviter = 3;
  if (has_inviter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inviter(), output);
  }

  // optional string channelid = 4;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->channelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_bind_inviter_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_bind_inviter_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 inviter = 3;
  if (has_inviter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inviter(), target);
  }

  // optional string channelid = 4;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->channelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_bind_inviter_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_bind_inviter_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 inviter = 3;
    if (has_inviter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inviter());
    }

    // optional string channelid = 4;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_bind_inviter_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_bind_inviter_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_bind_inviter_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_bind_inviter_result::MergeFrom(const packetw2c_bind_inviter_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_inviter()) {
      set_inviter(from.inviter());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_bind_inviter_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_bind_inviter_result::CopyFrom(const packetw2c_bind_inviter_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_bind_inviter_result::IsInitialized() const {

  return true;
}

void packetw2c_bind_inviter_result::Swap(packetw2c_bind_inviter_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(inviter_, other->inviter_);
    std::swap(channelid_, other->channelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_bind_inviter_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_bind_inviter_result_descriptor_;
  metadata.reflection = packetw2c_bind_inviter_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_reward_list::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_reward_list::packetc2w_reward_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_reward_list::InitAsDefaultInstance() {
}

packetc2w_reward_list::packetc2w_reward_list(const packetc2w_reward_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_reward_list::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5088;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_reward_list::~packetc2w_reward_list() {
  SharedDtor();
}

void packetc2w_reward_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_reward_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_reward_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_reward_list_descriptor_;
}

const packetc2w_reward_list& packetc2w_reward_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5finviter_2eproto();
  return *default_instance_;
}

packetc2w_reward_list* packetc2w_reward_list::default_instance_ = NULL;

packetc2w_reward_list* packetc2w_reward_list::New() const {
  return new packetc2w_reward_list;
}

void packetc2w_reward_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5088;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_reward_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_reward_list];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_reward_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_reward_list];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_reward_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_reward_list];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_reward_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_reward_list];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_reward_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_reward_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_reward_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_reward_list::MergeFrom(const packetc2w_reward_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_reward_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_reward_list::CopyFrom(const packetc2w_reward_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_reward_list::IsInitialized() const {

  return true;
}

void packetc2w_reward_list::Swap(packetc2w_reward_list* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_reward_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_reward_list_descriptor_;
  metadata.reflection = packetc2w_reward_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_reward_list_result::kPacketIdFieldNumber;
const int packetw2c_reward_list_result::kInviterListFieldNumber;
const int packetw2c_reward_list_result::kWaterRewardFieldNumber;
const int packetw2c_reward_list_result::kCanReceiveFieldNumber;
const int packetw2c_reward_list_result::kTotalRewardFieldNumber;
const int packetw2c_reward_list_result::kInviterInfoFieldNumber;
const int packetw2c_reward_list_result::kInviterRewardCountFieldNumber;
const int packetw2c_reward_list_result::kInviteCountFieldNumber;
#endif  // !_MSC_VER

packetw2c_reward_list_result::packetw2c_reward_list_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_reward_list_result::InitAsDefaultInstance() {
  inviter_info_ = const_cast< ::client2world_protocols::msg_inviter_info*>(&::client2world_protocols::msg_inviter_info::default_instance());
}

packetw2c_reward_list_result::packetw2c_reward_list_result(const packetw2c_reward_list_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_reward_list_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7596;
  water_reward_ = 0;
  can_receive_ = GOOGLE_LONGLONG(0);
  total_reward_ = GOOGLE_LONGLONG(0);
  inviter_info_ = NULL;
  inviter_reward_count_ = 0;
  invite_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_reward_list_result::~packetw2c_reward_list_result() {
  SharedDtor();
}

void packetw2c_reward_list_result::SharedDtor() {
  if (this != default_instance_) {
    delete inviter_info_;
  }
}

void packetw2c_reward_list_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_reward_list_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_reward_list_result_descriptor_;
}

const packetw2c_reward_list_result& packetw2c_reward_list_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5finviter_2eproto();
  return *default_instance_;
}

packetw2c_reward_list_result* packetw2c_reward_list_result::default_instance_ = NULL;

packetw2c_reward_list_result* packetw2c_reward_list_result::New() const {
  return new packetw2c_reward_list_result;
}

void packetw2c_reward_list_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7596;
    water_reward_ = 0;
    can_receive_ = GOOGLE_LONGLONG(0);
    total_reward_ = GOOGLE_LONGLONG(0);
    if (has_inviter_info()) {
      if (inviter_info_ != NULL) inviter_info_->::client2world_protocols::msg_inviter_info::Clear();
    }
    inviter_reward_count_ = 0;
    invite_count_ = 0;
  }
  inviter_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_reward_list_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_reward_list_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_inviter_list;
        break;
      }

      // repeated .client2world_protocols.msg_inviter_info inviter_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inviter_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inviter_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_inviter_list;
        if (input->ExpectTag(24)) goto parse_water_reward;
        break;
      }

      // optional int32 water_reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_water_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &water_reward_)));
          set_has_water_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_can_receive;
        break;
      }

      // optional int64 can_receive = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_receive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &can_receive_)));
          set_has_can_receive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_reward;
        break;
      }

      // optional int64 total_reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_reward_)));
          set_has_total_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_inviter_info;
        break;
      }

      // optional .client2world_protocols.msg_inviter_info inviter_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inviter_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inviter_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_inviter_reward_count;
        break;
      }

      // optional int32 inviter_reward_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviter_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inviter_reward_count_)));
          set_has_inviter_reward_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_invite_count;
        break;
      }

      // optional int32 invite_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invite_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invite_count_)));
          set_has_invite_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_reward_list_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_reward_list_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_inviter_info inviter_list = 2;
  for (int i = 0; i < this->inviter_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->inviter_list(i), output);
  }

  // optional int32 water_reward = 3;
  if (has_water_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->water_reward(), output);
  }

  // optional int64 can_receive = 4;
  if (has_can_receive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->can_receive(), output);
  }

  // optional int64 total_reward = 5;
  if (has_total_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->total_reward(), output);
  }

  // optional .client2world_protocols.msg_inviter_info inviter_info = 6;
  if (has_inviter_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->inviter_info(), output);
  }

  // optional int32 inviter_reward_count = 7;
  if (has_inviter_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->inviter_reward_count(), output);
  }

  // optional int32 invite_count = 8;
  if (has_invite_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->invite_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_reward_list_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_reward_list_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_inviter_info inviter_list = 2;
  for (int i = 0; i < this->inviter_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->inviter_list(i), target);
  }

  // optional int32 water_reward = 3;
  if (has_water_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->water_reward(), target);
  }

  // optional int64 can_receive = 4;
  if (has_can_receive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->can_receive(), target);
  }

  // optional int64 total_reward = 5;
  if (has_total_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->total_reward(), target);
  }

  // optional .client2world_protocols.msg_inviter_info inviter_info = 6;
  if (has_inviter_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->inviter_info(), target);
  }

  // optional int32 inviter_reward_count = 7;
  if (has_inviter_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->inviter_reward_count(), target);
  }

  // optional int32 invite_count = 8;
  if (has_invite_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->invite_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_reward_list_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_reward_list_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 water_reward = 3;
    if (has_water_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->water_reward());
    }

    // optional int64 can_receive = 4;
    if (has_can_receive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->can_receive());
    }

    // optional int64 total_reward = 5;
    if (has_total_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_reward());
    }

    // optional .client2world_protocols.msg_inviter_info inviter_info = 6;
    if (has_inviter_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inviter_info());
    }

    // optional int32 inviter_reward_count = 7;
    if (has_inviter_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inviter_reward_count());
    }

    // optional int32 invite_count = 8;
    if (has_invite_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invite_count());
    }

  }
  // repeated .client2world_protocols.msg_inviter_info inviter_list = 2;
  total_size += 1 * this->inviter_list_size();
  for (int i = 0; i < this->inviter_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inviter_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_reward_list_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_reward_list_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_reward_list_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_reward_list_result::MergeFrom(const packetw2c_reward_list_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  inviter_list_.MergeFrom(from.inviter_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_water_reward()) {
      set_water_reward(from.water_reward());
    }
    if (from.has_can_receive()) {
      set_can_receive(from.can_receive());
    }
    if (from.has_total_reward()) {
      set_total_reward(from.total_reward());
    }
    if (from.has_inviter_info()) {
      mutable_inviter_info()->::client2world_protocols::msg_inviter_info::MergeFrom(from.inviter_info());
    }
    if (from.has_inviter_reward_count()) {
      set_inviter_reward_count(from.inviter_reward_count());
    }
    if (from.has_invite_count()) {
      set_invite_count(from.invite_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_reward_list_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_reward_list_result::CopyFrom(const packetw2c_reward_list_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_reward_list_result::IsInitialized() const {

  return true;
}

void packetw2c_reward_list_result::Swap(packetw2c_reward_list_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    inviter_list_.Swap(&other->inviter_list_);
    std::swap(water_reward_, other->water_reward_);
    std::swap(can_receive_, other->can_receive_);
    std::swap(total_reward_, other->total_reward_);
    std::swap(inviter_info_, other->inviter_info_);
    std::swap(inviter_reward_count_, other->inviter_reward_count_);
    std::swap(invite_count_, other->invite_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_reward_list_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_reward_list_result_descriptor_;
  metadata.reflection = packetw2c_reward_list_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_receive_reward::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_receive_reward::packetc2w_receive_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_receive_reward::InitAsDefaultInstance() {
}

packetc2w_receive_reward::packetc2w_receive_reward(const packetc2w_receive_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_receive_reward::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5089;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_receive_reward::~packetc2w_receive_reward() {
  SharedDtor();
}

void packetc2w_receive_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_receive_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_receive_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_receive_reward_descriptor_;
}

const packetc2w_receive_reward& packetc2w_receive_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5finviter_2eproto();
  return *default_instance_;
}

packetc2w_receive_reward* packetc2w_receive_reward::default_instance_ = NULL;

packetc2w_receive_reward* packetc2w_receive_reward::New() const {
  return new packetc2w_receive_reward;
}

void packetc2w_receive_reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5089;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_receive_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_receive_reward];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_receive_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_receive_reward];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_receive_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_receive_reward];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_receive_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_receive_reward];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_receive_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_receive_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_receive_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_receive_reward::MergeFrom(const packetc2w_receive_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_receive_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_receive_reward::CopyFrom(const packetc2w_receive_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_receive_reward::IsInitialized() const {

  return true;
}

void packetc2w_receive_reward::Swap(packetc2w_receive_reward* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_receive_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_receive_reward_descriptor_;
  metadata.reflection = packetc2w_receive_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_receive_reward_result::kPacketIdFieldNumber;
const int packetw2c_receive_reward_result::kResultFieldNumber;
const int packetw2c_receive_reward_result::kRewardFieldNumber;
#endif  // !_MSC_VER

packetw2c_receive_reward_result::packetw2c_receive_reward_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_receive_reward_result::InitAsDefaultInstance() {
}

packetw2c_receive_reward_result::packetw2c_receive_reward_result(const packetw2c_receive_reward_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_receive_reward_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7597;
  result_ = 2;
  reward_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_receive_reward_result::~packetw2c_receive_reward_result() {
  SharedDtor();
}

void packetw2c_receive_reward_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_receive_reward_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_receive_reward_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_receive_reward_result_descriptor_;
}

const packetw2c_receive_reward_result& packetw2c_receive_reward_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5finviter_2eproto();
  return *default_instance_;
}

packetw2c_receive_reward_result* packetw2c_receive_reward_result::default_instance_ = NULL;

packetw2c_receive_reward_result* packetw2c_receive_reward_result::New() const {
  return new packetw2c_receive_reward_result;
}

void packetw2c_receive_reward_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7597;
    result_ = 2;
    reward_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_receive_reward_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_receive_reward_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward;
        break;
      }

      // optional int64 reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_receive_reward_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_receive_reward_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int64 reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_receive_reward_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_receive_reward_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int64 reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_receive_reward_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_receive_reward_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int64 reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_receive_reward_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_receive_reward_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_receive_reward_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_receive_reward_result::MergeFrom(const packetw2c_receive_reward_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_receive_reward_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_receive_reward_result::CopyFrom(const packetw2c_receive_reward_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_receive_reward_result::IsInitialized() const {

  return true;
}

void packetw2c_receive_reward_result::Swap(packetw2c_receive_reward_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_receive_reward_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_receive_reward_result_descriptor_;
  metadata.reflection = packetw2c_receive_reward_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_ask_income_history::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_ask_income_history::packetc2w_ask_income_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_ask_income_history::InitAsDefaultInstance() {
}

packetc2w_ask_income_history::packetc2w_ask_income_history(const packetc2w_ask_income_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_ask_income_history::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5102;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_ask_income_history::~packetc2w_ask_income_history() {
  SharedDtor();
}

void packetc2w_ask_income_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_ask_income_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_ask_income_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_ask_income_history_descriptor_;
}

const packetc2w_ask_income_history& packetc2w_ask_income_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5finviter_2eproto();
  return *default_instance_;
}

packetc2w_ask_income_history* packetc2w_ask_income_history::default_instance_ = NULL;

packetc2w_ask_income_history* packetc2w_ask_income_history::New() const {
  return new packetc2w_ask_income_history;
}

void packetc2w_ask_income_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5102;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_ask_income_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_income_history];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_ask_income_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_income_history];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_ask_income_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_income_history];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_ask_income_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_income_history];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_ask_income_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_ask_income_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_ask_income_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_ask_income_history::MergeFrom(const packetc2w_ask_income_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_ask_income_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_ask_income_history::CopyFrom(const packetc2w_ask_income_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_ask_income_history::IsInitialized() const {

  return true;
}

void packetc2w_ask_income_history::Swap(packetc2w_ask_income_history* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_ask_income_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_ask_income_history_descriptor_;
  metadata.reflection = packetc2w_ask_income_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_income_history_result::kPacketIdFieldNumber;
const int packetw2c_income_history_result::kHistoryInfosFieldNumber;
#endif  // !_MSC_VER

packetw2c_income_history_result::packetw2c_income_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_income_history_result::InitAsDefaultInstance() {
}

packetw2c_income_history_result::packetw2c_income_history_result(const packetw2c_income_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_income_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7611;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_income_history_result::~packetw2c_income_history_result() {
  SharedDtor();
}

void packetw2c_income_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_income_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_income_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_income_history_result_descriptor_;
}

const packetw2c_income_history_result& packetw2c_income_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5finviter_2eproto();
  return *default_instance_;
}

packetw2c_income_history_result* packetw2c_income_history_result::default_instance_ = NULL;

packetw2c_income_history_result* packetw2c_income_history_result::New() const {
  return new packetw2c_income_history_result;
}

void packetw2c_income_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7611;
  }
  history_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_income_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_income_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_history_infos;
        break;
      }

      // repeated string history_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_history_infos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->history_infos(this->history_infos_size() - 1).data(),
            this->history_infos(this->history_infos_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_history_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_income_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_income_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated string history_infos = 2;
  for (int i = 0; i < this->history_infos_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->history_infos(i).data(), this->history_infos(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->history_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_income_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_income_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated string history_infos = 2;
  for (int i = 0; i < this->history_infos_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->history_infos(i).data(), this->history_infos(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->history_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_income_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_income_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated string history_infos = 2;
  total_size += 1 * this->history_infos_size();
  for (int i = 0; i < this->history_infos_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->history_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_income_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_income_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_income_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_income_history_result::MergeFrom(const packetw2c_income_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_infos_.MergeFrom(from.history_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_income_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_income_history_result::CopyFrom(const packetw2c_income_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_income_history_result::IsInitialized() const {

  return true;
}

void packetw2c_income_history_result::Swap(packetw2c_income_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    history_infos_.Swap(&other->history_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_income_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_income_history_result_descriptor_;
  metadata.reflection = packetw2c_income_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_income_new_result::kPacketIdFieldNumber;
const int packetw2c_income_new_result::kNewInfosFieldNumber;
const int packetw2c_income_new_result::kPlayeridFieldNumber;
#endif  // !_MSC_VER

packetw2c_income_new_result::packetw2c_income_new_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_income_new_result::InitAsDefaultInstance() {
}

packetw2c_income_new_result::packetw2c_income_new_result(const packetw2c_income_new_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_income_new_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7612;
  new_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_income_new_result::~packetw2c_income_new_result() {
  SharedDtor();
}

void packetw2c_income_new_result::SharedDtor() {
  if (new_infos_ != &::google::protobuf::internal::kEmptyString) {
    delete new_infos_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_income_new_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_income_new_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_income_new_result_descriptor_;
}

const packetw2c_income_new_result& packetw2c_income_new_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5finviter_2eproto();
  return *default_instance_;
}

packetw2c_income_new_result* packetw2c_income_new_result::default_instance_ = NULL;

packetw2c_income_new_result* packetw2c_income_new_result::New() const {
  return new packetw2c_income_new_result;
}

void packetw2c_income_new_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7612;
    if (has_new_infos()) {
      if (new_infos_ != &::google::protobuf::internal::kEmptyString) {
        new_infos_->clear();
      }
    }
    playerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_income_new_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_income_new_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_infos;
        break;
      }

      // optional string new_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_infos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_infos().data(), this->new_infos().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }

      // optional int32 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_income_new_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_income_new_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string new_infos = 2;
  if (has_new_infos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_infos().data(), this->new_infos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->new_infos(), output);
  }

  // optional int32 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_income_new_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_income_new_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string new_infos = 2;
  if (has_new_infos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_infos().data(), this->new_infos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->new_infos(), target);
  }

  // optional int32 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_income_new_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_income_new_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string new_infos = 2;
    if (has_new_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_infos());
    }

    // optional int32 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_income_new_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_income_new_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_income_new_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_income_new_result::MergeFrom(const packetw2c_income_new_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_new_infos()) {
      set_new_infos(from.new_infos());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_income_new_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_income_new_result::CopyFrom(const packetw2c_income_new_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_income_new_result::IsInitialized() const {

  return true;
}

void packetw2c_income_new_result::Swap(packetw2c_income_new_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(new_infos_, other->new_infos_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_income_new_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_income_new_result_descriptor_;
  metadata.reflection = packetw2c_income_new_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

// @@protoc_insertion_point(global_scope)
