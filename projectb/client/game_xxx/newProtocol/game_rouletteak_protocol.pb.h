// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_rouletteak_protocol.proto

#ifndef PROTOBUF_game_5frouletteak_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_game_5frouletteak_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "game_rouletteak_def.pb.h"
#include "msg_type_def.pb.h"
// @@protoc_insertion_point(includes)

namespace game_rouletteak_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

class msg_room_info;
class packetc2l_get_room_info;
class packetl2c_get_room_info_result;
class packetc2l_enter_room;
class packetl2c_enter_room_result;
class packetc2l_leave_room;
class packetl2c_leave_room_result;
class msg_player_info;
class msg_bet_info;
class msg_player_gold;
class msg_result_info;
class msg_scene_info;
class packetc2l_get_scene_info;
class packetl2c_get_scene_info_result;
class packetl2c_bc_scene_prepare_into;
class packetl2c_bc_scene_bet_into;
class packetl2c_bc_sync_scene_bet_into;
class packetl2c_bc_scene_deal_into;
class packetl2c_bc_scene_result_into;
class packetc2l_ask_bet_info;
class packetl2c_bet_info_result;
class packetl2c_enter_player_info;
class packetl2c_leave_player_info;
class packetl2c_bc_change_attr;
class packetc2l_supply_chip;
class packetl2c_supply_chip_result;
class packetc2l_check_state;
class packetc2l_check_state_result;
class msg_room_history;
class packetc2l_room_history_list;
class packetl2c_room_history_list_result;
class packetl2c_notify_history;
class packetc2l_continue_bet;
class packetl2c_continue_bet_result;
class packetc2l_cancel_bet;
class packetl2c_cancel_bet_result;
class room_player;
class packetl2c_gm_get_room_info;
class packetl2c_gm_get_room_info_result;
class packetl2c_gm_set_bead;
class packetl2c_gm_set_bead_result;

// ===================================================================

class msg_room_info : public ::google::protobuf::Message {
 public:
  msg_room_info();
  virtual ~msg_room_info();

  msg_room_info(const msg_room_info& from);

  inline msg_room_info& operator=(const msg_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_room_info& default_instance();

  void Swap(msg_room_info* other);

  // implements Message ----------------------------------------------

  msg_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_room_info& from);
  void MergeFrom(const msg_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.msg_room_info)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_room_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_room_info();
  virtual ~packetc2l_get_room_info();

  packetc2l_get_room_info(const packetc2l_get_room_info& from);

  inline packetc2l_get_room_info& operator=(const packetc2l_get_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_room_info& default_instance();

  void Swap(packetc2l_get_room_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_room_info& from);
  void MergeFrom(const packetc2l_get_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetc2l_get_room_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_get_room_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_get_room_info_result();
  virtual ~packetl2c_get_room_info_result();

  packetl2c_get_room_info_result(const packetl2c_get_room_info_result& from);

  inline packetl2c_get_room_info_result& operator=(const packetl2c_get_room_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_get_room_info_result& default_instance();

  void Swap(packetl2c_get_room_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_get_room_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_get_room_info_result& from);
  void MergeFrom(const packetl2c_get_room_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // repeated .game_rouletteak_protocols.msg_room_info room_list = 2;
  inline int room_list_size() const;
  inline void clear_room_list();
  static const int kRoomListFieldNumber = 2;
  inline const ::game_rouletteak_protocols::msg_room_info& room_list(int index) const;
  inline ::game_rouletteak_protocols::msg_room_info* mutable_room_list(int index);
  inline ::game_rouletteak_protocols::msg_room_info* add_room_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_room_info >&
      room_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_room_info >*
      mutable_room_list();

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetl2c_get_room_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_room_info > room_list_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_get_room_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_enter_room : public ::google::protobuf::Message {
 public:
  packetc2l_enter_room();
  virtual ~packetc2l_enter_room();

  packetc2l_enter_room(const packetc2l_enter_room& from);

  inline packetc2l_enter_room& operator=(const packetc2l_enter_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_enter_room& default_instance();

  void Swap(packetc2l_enter_room* other);

  // implements Message ----------------------------------------------

  packetc2l_enter_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_enter_room& from);
  void MergeFrom(const packetc2l_enter_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // optional int32 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetc2l_enter_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_enter_room* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_enter_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_enter_room_result();
  virtual ~packetl2c_enter_room_result();

  packetl2c_enter_room_result(const packetl2c_enter_room_result& from);

  inline packetl2c_enter_room_result& operator=(const packetl2c_enter_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_enter_room_result& default_instance();

  void Swap(packetl2c_enter_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_enter_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_enter_room_result& from);
  void MergeFrom(const packetl2c_enter_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional .game_rouletteak_protocols.msg_scene_info scene_info = 3;
  inline bool has_scene_info() const;
  inline void clear_scene_info();
  static const int kSceneInfoFieldNumber = 3;
  inline const ::game_rouletteak_protocols::msg_scene_info& scene_info() const;
  inline ::game_rouletteak_protocols::msg_scene_info* mutable_scene_info();
  inline ::game_rouletteak_protocols::msg_scene_info* release_scene_info();
  inline void set_allocated_scene_info(::game_rouletteak_protocols::msg_scene_info* scene_info);

  // optional int64 self_gold = 4;
  inline bool has_self_gold() const;
  inline void clear_self_gold();
  static const int kSelfGoldFieldNumber = 4;
  inline ::google::protobuf::int64 self_gold() const;
  inline void set_self_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetl2c_enter_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_scene_info();
  inline void clear_has_scene_info();
  inline void set_has_self_gold();
  inline void clear_has_self_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::game_rouletteak_protocols::msg_scene_info* scene_info_;
  ::google::protobuf::int64 self_gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_enter_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_leave_room : public ::google::protobuf::Message {
 public:
  packetc2l_leave_room();
  virtual ~packetc2l_leave_room();

  packetc2l_leave_room(const packetc2l_leave_room& from);

  inline packetc2l_leave_room& operator=(const packetc2l_leave_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_leave_room& default_instance();

  void Swap(packetc2l_leave_room* other);

  // implements Message ----------------------------------------------

  packetc2l_leave_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_leave_room& from);
  void MergeFrom(const packetc2l_leave_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetc2l_leave_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_leave_room* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_leave_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_leave_room_result();
  virtual ~packetl2c_leave_room_result();

  packetl2c_leave_room_result(const packetl2c_leave_room_result& from);

  inline packetl2c_leave_room_result& operator=(const packetl2c_leave_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_leave_room_result& default_instance();

  void Swap(packetl2c_leave_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_leave_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_leave_room_result& from);
  void MergeFrom(const packetl2c_leave_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int64 player_gold = 3;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 3;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetl2c_leave_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int64 player_gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_leave_room_result* default_instance_;
};
// -------------------------------------------------------------------

class msg_player_info : public ::google::protobuf::Message {
 public:
  msg_player_info();
  virtual ~msg_player_info();

  msg_player_info(const msg_player_info& from);

  inline msg_player_info& operator=(const msg_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_player_info& default_instance();

  void Swap(msg_player_info* other);

  // implements Message ----------------------------------------------

  msg_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_player_info& from);
  void MergeFrom(const msg_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional int32 head_frame = 3;
  inline bool has_head_frame() const;
  inline void clear_head_frame();
  static const int kHeadFrameFieldNumber = 3;
  inline ::google::protobuf::int32 head_frame() const;
  inline void set_head_frame(::google::protobuf::int32 value);

  // optional string head_custom = 4;
  inline bool has_head_custom() const;
  inline void clear_head_custom();
  static const int kHeadCustomFieldNumber = 4;
  inline const ::std::string& head_custom() const;
  inline void set_head_custom(const ::std::string& value);
  inline void set_head_custom(const char* value);
  inline void set_head_custom(const char* value, size_t size);
  inline ::std::string* mutable_head_custom();
  inline ::std::string* release_head_custom();
  inline void set_allocated_head_custom(::std::string* head_custom);

  // optional int64 player_gold = 5;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 5;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // optional int32 player_sex = 6;
  inline bool has_player_sex() const;
  inline void clear_player_sex();
  static const int kPlayerSexFieldNumber = 6;
  inline ::google::protobuf::int32 player_sex() const;
  inline void set_player_sex(::google::protobuf::int32 value);

  // optional int32 vip_level = 7;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 7;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);

  // optional int32 history_bet_gold = 8;
  inline bool has_history_bet_gold() const;
  inline void clear_history_bet_gold();
  static const int kHistoryBetGoldFieldNumber = 8;
  inline ::google::protobuf::int32 history_bet_gold() const;
  inline void set_history_bet_gold(::google::protobuf::int32 value);

  // optional int32 win_count = 9;
  inline bool has_win_count() const;
  inline void clear_win_count();
  static const int kWinCountFieldNumber = 9;
  inline ::google::protobuf::int32 win_count() const;
  inline void set_win_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.msg_player_info)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_head_frame();
  inline void clear_has_head_frame();
  inline void set_has_head_custom();
  inline void clear_has_head_custom();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();
  inline void set_has_player_sex();
  inline void clear_has_player_sex();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_history_bet_gold();
  inline void clear_has_history_bet_gold();
  inline void set_has_win_count();
  inline void clear_has_win_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_name_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 head_frame_;
  ::std::string* head_custom_;
  ::google::protobuf::int64 player_gold_;
  ::google::protobuf::int32 player_sex_;
  ::google::protobuf::int32 vip_level_;
  ::google::protobuf::int32 history_bet_gold_;
  ::google::protobuf::int32 win_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_player_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_bet_info : public ::google::protobuf::Message {
 public:
  msg_bet_info();
  virtual ~msg_bet_info();

  msg_bet_info(const msg_bet_info& from);

  inline msg_bet_info& operator=(const msg_bet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_bet_info& default_instance();

  void Swap(msg_bet_info* other);

  // implements Message ----------------------------------------------

  msg_bet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_bet_info& from);
  void MergeFrom(const msg_bet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int32 bet_pos = 2;
  inline bool has_bet_pos() const;
  inline void clear_bet_pos();
  static const int kBetPosFieldNumber = 2;
  inline ::google::protobuf::int32 bet_pos() const;
  inline void set_bet_pos(::google::protobuf::int32 value);

  // optional int64 bet_gold = 3;
  inline bool has_bet_gold() const;
  inline void clear_bet_gold();
  static const int kBetGoldFieldNumber = 3;
  inline ::google::protobuf::int64 bet_gold() const;
  inline void set_bet_gold(::google::protobuf::int64 value);

  // optional int64 cur_gold = 4;
  inline bool has_cur_gold() const;
  inline void clear_cur_gold();
  static const int kCurGoldFieldNumber = 4;
  inline ::google::protobuf::int64 cur_gold() const;
  inline void set_cur_gold(::google::protobuf::int64 value);

  // optional int32 chip_index = 5;
  inline bool has_chip_index() const;
  inline void clear_chip_index();
  static const int kChipIndexFieldNumber = 5;
  inline ::google::protobuf::int32 chip_index() const;
  inline void set_chip_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.msg_bet_info)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_bet_pos();
  inline void clear_has_bet_pos();
  inline void set_has_bet_gold();
  inline void clear_has_bet_gold();
  inline void set_has_cur_gold();
  inline void clear_has_cur_gold();
  inline void set_has_chip_index();
  inline void clear_has_chip_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 bet_pos_;
  ::google::protobuf::int64 bet_gold_;
  ::google::protobuf::int64 cur_gold_;
  ::google::protobuf::int32 chip_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_bet_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_player_gold : public ::google::protobuf::Message {
 public:
  msg_player_gold();
  virtual ~msg_player_gold();

  msg_player_gold(const msg_player_gold& from);

  inline msg_player_gold& operator=(const msg_player_gold& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_player_gold& default_instance();

  void Swap(msg_player_gold* other);

  // implements Message ----------------------------------------------

  msg_player_gold* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_player_gold& from);
  void MergeFrom(const msg_player_gold& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int64 win_gold = 2;
  inline bool has_win_gold() const;
  inline void clear_win_gold();
  static const int kWinGoldFieldNumber = 2;
  inline ::google::protobuf::int64 win_gold() const;
  inline void set_win_gold(::google::protobuf::int64 value);

  // optional int64 cur_gold = 3;
  inline bool has_cur_gold() const;
  inline void clear_cur_gold();
  static const int kCurGoldFieldNumber = 3;
  inline ::google::protobuf::int64 cur_gold() const;
  inline void set_cur_gold(::google::protobuf::int64 value);

  // optional int32 history_bet_gold = 4;
  inline bool has_history_bet_gold() const;
  inline void clear_history_bet_gold();
  static const int kHistoryBetGoldFieldNumber = 4;
  inline ::google::protobuf::int32 history_bet_gold() const;
  inline void set_history_bet_gold(::google::protobuf::int32 value);

  // optional int64 win_count = 5;
  inline bool has_win_count() const;
  inline void clear_win_count();
  static const int kWinCountFieldNumber = 5;
  inline ::google::protobuf::int64 win_count() const;
  inline void set_win_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.msg_player_gold)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_win_gold();
  inline void clear_has_win_gold();
  inline void set_has_cur_gold();
  inline void clear_has_cur_gold();
  inline void set_has_history_bet_gold();
  inline void clear_has_history_bet_gold();
  inline void set_has_win_count();
  inline void clear_has_win_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 win_gold_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 history_bet_gold_;
  ::google::protobuf::int64 cur_gold_;
  ::google::protobuf::int64 win_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_player_gold* default_instance_;
};
// -------------------------------------------------------------------

class msg_result_info : public ::google::protobuf::Message {
 public:
  msg_result_info();
  virtual ~msg_result_info();

  msg_result_info(const msg_result_info& from);

  inline msg_result_info& operator=(const msg_result_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_result_info& default_instance();

  void Swap(msg_result_info* other);

  // implements Message ----------------------------------------------

  msg_result_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_result_info& from);
  void MergeFrom(const msg_result_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline ::google::protobuf::int32 number() const;
  inline void set_number(::google::protobuf::int32 value);

  // repeated .game_rouletteak_protocols.msg_player_gold player_golds = 2;
  inline int player_golds_size() const;
  inline void clear_player_golds();
  static const int kPlayerGoldsFieldNumber = 2;
  inline const ::game_rouletteak_protocols::msg_player_gold& player_golds(int index) const;
  inline ::game_rouletteak_protocols::msg_player_gold* mutable_player_golds(int index);
  inline ::game_rouletteak_protocols::msg_player_gold* add_player_golds();
  inline const ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_player_gold >&
      player_golds() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_player_gold >*
      mutable_player_golds();

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.msg_result_info)
 private:
  inline void set_has_number();
  inline void clear_has_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_player_gold > player_golds_;
  ::google::protobuf::int32 number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_result_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_scene_info : public ::google::protobuf::Message {
 public:
  msg_scene_info();
  virtual ~msg_scene_info();

  msg_scene_info(const msg_scene_info& from);

  inline msg_scene_info& operator=(const msg_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_scene_info& default_instance();

  void Swap(msg_scene_info* other);

  // implements Message ----------------------------------------------

  msg_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_scene_info& from);
  void MergeFrom(const msg_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // optional int32 scene_state = 2;
  inline bool has_scene_state() const;
  inline void clear_scene_state();
  static const int kSceneStateFieldNumber = 2;
  inline ::google::protobuf::int32 scene_state() const;
  inline void set_scene_state(::google::protobuf::int32 value);

  // optional int32 cd = 3;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 3;
  inline ::google::protobuf::int32 cd() const;
  inline void set_cd(::google::protobuf::int32 value);

  // repeated .game_rouletteak_protocols.msg_player_info player_list = 4;
  inline int player_list_size() const;
  inline void clear_player_list();
  static const int kPlayerListFieldNumber = 4;
  inline const ::game_rouletteak_protocols::msg_player_info& player_list(int index) const;
  inline ::game_rouletteak_protocols::msg_player_info* mutable_player_list(int index);
  inline ::game_rouletteak_protocols::msg_player_info* add_player_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_player_info >&
      player_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_player_info >*
      mutable_player_list();

  // repeated .game_rouletteak_protocols.msg_bet_info bet_infos = 5;
  inline int bet_infos_size() const;
  inline void clear_bet_infos();
  static const int kBetInfosFieldNumber = 5;
  inline const ::game_rouletteak_protocols::msg_bet_info& bet_infos(int index) const;
  inline ::game_rouletteak_protocols::msg_bet_info* mutable_bet_infos(int index);
  inline ::game_rouletteak_protocols::msg_bet_info* add_bet_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_bet_info >&
      bet_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_bet_info >*
      mutable_bet_infos();

  // optional .game_rouletteak_protocols.msg_result_info result_info = 6;
  inline bool has_result_info() const;
  inline void clear_result_info();
  static const int kResultInfoFieldNumber = 6;
  inline const ::game_rouletteak_protocols::msg_result_info& result_info() const;
  inline ::game_rouletteak_protocols::msg_result_info* mutable_result_info();
  inline ::game_rouletteak_protocols::msg_result_info* release_result_info();
  inline void set_allocated_result_info(::game_rouletteak_protocols::msg_result_info* result_info);

  // repeated int32 pos_list = 7;
  inline int pos_list_size() const;
  inline void clear_pos_list();
  static const int kPosListFieldNumber = 7;
  inline ::google::protobuf::int32 pos_list(int index) const;
  inline void set_pos_list(int index, ::google::protobuf::int32 value);
  inline void add_pos_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pos_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pos_list();

  // optional int64 bet_gold_room = 8;
  inline bool has_bet_gold_room() const;
  inline void clear_bet_gold_room();
  static const int kBetGoldRoomFieldNumber = 8;
  inline ::google::protobuf::int64 bet_gold_room() const;
  inline void set_bet_gold_room(::google::protobuf::int64 value);

  // optional int64 bet_gold_self = 9;
  inline bool has_bet_gold_self() const;
  inline void clear_bet_gold_self();
  static const int kBetGoldSelfFieldNumber = 9;
  inline ::google::protobuf::int64 bet_gold_self() const;
  inline void set_bet_gold_self(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.msg_scene_info)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_scene_state();
  inline void clear_has_scene_state();
  inline void set_has_cd();
  inline void clear_has_cd();
  inline void set_has_result_info();
  inline void clear_has_result_info();
  inline void set_has_bet_gold_room();
  inline void clear_has_bet_gold_room();
  inline void set_has_bet_gold_self();
  inline void clear_has_bet_gold_self();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 scene_state_;
  ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_player_info > player_list_;
  ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_bet_info > bet_infos_;
  ::game_rouletteak_protocols::msg_result_info* result_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pos_list_;
  ::google::protobuf::int64 bet_gold_room_;
  ::google::protobuf::int64 bet_gold_self_;
  ::google::protobuf::int32 cd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_scene_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_scene_info();
  virtual ~packetc2l_get_scene_info();

  packetc2l_get_scene_info(const packetc2l_get_scene_info& from);

  inline packetc2l_get_scene_info& operator=(const packetc2l_get_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_scene_info& default_instance();

  void Swap(packetc2l_get_scene_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_scene_info& from);
  void MergeFrom(const packetc2l_get_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetc2l_get_scene_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_get_scene_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_get_scene_info_result();
  virtual ~packetl2c_get_scene_info_result();

  packetl2c_get_scene_info_result(const packetl2c_get_scene_info_result& from);

  inline packetl2c_get_scene_info_result& operator=(const packetl2c_get_scene_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_get_scene_info_result& default_instance();

  void Swap(packetl2c_get_scene_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_get_scene_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_get_scene_info_result& from);
  void MergeFrom(const packetl2c_get_scene_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // optional .game_rouletteak_protocols.msg_scene_info scene_info = 2;
  inline bool has_scene_info() const;
  inline void clear_scene_info();
  static const int kSceneInfoFieldNumber = 2;
  inline const ::game_rouletteak_protocols::msg_scene_info& scene_info() const;
  inline ::game_rouletteak_protocols::msg_scene_info* mutable_scene_info();
  inline ::game_rouletteak_protocols::msg_scene_info* release_scene_info();
  inline void set_allocated_scene_info(::game_rouletteak_protocols::msg_scene_info* scene_info);

  // optional int64 self_gold = 3;
  inline bool has_self_gold() const;
  inline void clear_self_gold();
  static const int kSelfGoldFieldNumber = 3;
  inline ::google::protobuf::int64 self_gold() const;
  inline void set_self_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetl2c_get_scene_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_scene_info();
  inline void clear_has_scene_info();
  inline void set_has_self_gold();
  inline void clear_has_self_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game_rouletteak_protocols::msg_scene_info* scene_info_;
  ::google::protobuf::int64 self_gold_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_get_scene_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_scene_prepare_into : public ::google::protobuf::Message {
 public:
  packetl2c_bc_scene_prepare_into();
  virtual ~packetl2c_bc_scene_prepare_into();

  packetl2c_bc_scene_prepare_into(const packetl2c_bc_scene_prepare_into& from);

  inline packetl2c_bc_scene_prepare_into& operator=(const packetl2c_bc_scene_prepare_into& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_scene_prepare_into& default_instance();

  void Swap(packetl2c_bc_scene_prepare_into* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_scene_prepare_into* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_scene_prepare_into& from);
  void MergeFrom(const packetl2c_bc_scene_prepare_into& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_prepare_into];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // optional int32 cd = 2;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 2;
  inline ::google::protobuf::int32 cd() const;
  inline void set_cd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetl2c_bc_scene_prepare_into)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_cd();
  inline void clear_has_cd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 cd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_scene_prepare_into* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_scene_bet_into : public ::google::protobuf::Message {
 public:
  packetl2c_bc_scene_bet_into();
  virtual ~packetl2c_bc_scene_bet_into();

  packetl2c_bc_scene_bet_into(const packetl2c_bc_scene_bet_into& from);

  inline packetl2c_bc_scene_bet_into& operator=(const packetl2c_bc_scene_bet_into& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_scene_bet_into& default_instance();

  void Swap(packetl2c_bc_scene_bet_into* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_scene_bet_into* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_scene_bet_into& from);
  void MergeFrom(const packetl2c_bc_scene_bet_into& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_bet_into];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // optional int32 cd = 2;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 2;
  inline ::google::protobuf::int32 cd() const;
  inline void set_cd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetl2c_bc_scene_bet_into)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_cd();
  inline void clear_has_cd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 cd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_scene_bet_into* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_sync_scene_bet_into : public ::google::protobuf::Message {
 public:
  packetl2c_bc_sync_scene_bet_into();
  virtual ~packetl2c_bc_sync_scene_bet_into();

  packetl2c_bc_sync_scene_bet_into(const packetl2c_bc_sync_scene_bet_into& from);

  inline packetl2c_bc_sync_scene_bet_into& operator=(const packetl2c_bc_sync_scene_bet_into& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_sync_scene_bet_into& default_instance();

  void Swap(packetl2c_bc_sync_scene_bet_into* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_sync_scene_bet_into* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_sync_scene_bet_into& from);
  void MergeFrom(const packetl2c_bc_sync_scene_bet_into& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_scene_bet_into];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // repeated .game_rouletteak_protocols.msg_bet_info bet_list = 2;
  inline int bet_list_size() const;
  inline void clear_bet_list();
  static const int kBetListFieldNumber = 2;
  inline const ::game_rouletteak_protocols::msg_bet_info& bet_list(int index) const;
  inline ::game_rouletteak_protocols::msg_bet_info* mutable_bet_list(int index);
  inline ::game_rouletteak_protocols::msg_bet_info* add_bet_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_bet_info >&
      bet_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_bet_info >*
      mutable_bet_list();

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetl2c_bc_sync_scene_bet_into)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_bet_info > bet_list_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_sync_scene_bet_into* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_scene_deal_into : public ::google::protobuf::Message {
 public:
  packetl2c_bc_scene_deal_into();
  virtual ~packetl2c_bc_scene_deal_into();

  packetl2c_bc_scene_deal_into(const packetl2c_bc_scene_deal_into& from);

  inline packetl2c_bc_scene_deal_into& operator=(const packetl2c_bc_scene_deal_into& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_scene_deal_into& default_instance();

  void Swap(packetl2c_bc_scene_deal_into* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_scene_deal_into* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_scene_deal_into& from);
  void MergeFrom(const packetl2c_bc_scene_deal_into& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_deal_into];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // optional int32 cd = 2;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 2;
  inline ::google::protobuf::int32 cd() const;
  inline void set_cd(::google::protobuf::int32 value);

  // optional int32 number = 3;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 3;
  inline ::google::protobuf::int32 number() const;
  inline void set_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetl2c_bc_scene_deal_into)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_cd();
  inline void clear_has_cd();
  inline void set_has_number();
  inline void clear_has_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 cd_;
  ::google::protobuf::int32 number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_scene_deal_into* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_scene_result_into : public ::google::protobuf::Message {
 public:
  packetl2c_bc_scene_result_into();
  virtual ~packetl2c_bc_scene_result_into();

  packetl2c_bc_scene_result_into(const packetl2c_bc_scene_result_into& from);

  inline packetl2c_bc_scene_result_into& operator=(const packetl2c_bc_scene_result_into& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_scene_result_into& default_instance();

  void Swap(packetl2c_bc_scene_result_into* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_scene_result_into* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_scene_result_into& from);
  void MergeFrom(const packetl2c_bc_scene_result_into& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_result_into];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // optional int32 cd = 2;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 2;
  inline ::google::protobuf::int32 cd() const;
  inline void set_cd(::google::protobuf::int32 value);

  // optional .game_rouletteak_protocols.msg_result_info result_info = 3;
  inline bool has_result_info() const;
  inline void clear_result_info();
  static const int kResultInfoFieldNumber = 3;
  inline const ::game_rouletteak_protocols::msg_result_info& result_info() const;
  inline ::game_rouletteak_protocols::msg_result_info* mutable_result_info();
  inline ::game_rouletteak_protocols::msg_result_info* release_result_info();
  inline void set_allocated_result_info(::game_rouletteak_protocols::msg_result_info* result_info);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetl2c_bc_scene_result_into)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_cd();
  inline void clear_has_cd();
  inline void set_has_result_info();
  inline void clear_has_result_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 cd_;
  ::game_rouletteak_protocols::msg_result_info* result_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_scene_result_into* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_ask_bet_info : public ::google::protobuf::Message {
 public:
  packetc2l_ask_bet_info();
  virtual ~packetc2l_ask_bet_info();

  packetc2l_ask_bet_info(const packetc2l_ask_bet_info& from);

  inline packetc2l_ask_bet_info& operator=(const packetc2l_ask_bet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_ask_bet_info& default_instance();

  void Swap(packetc2l_ask_bet_info* other);

  // implements Message ----------------------------------------------

  packetc2l_ask_bet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_ask_bet_info& from);
  void MergeFrom(const packetc2l_ask_bet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_bet_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // optional int32 bet_pos = 2;
  inline bool has_bet_pos() const;
  inline void clear_bet_pos();
  static const int kBetPosFieldNumber = 2;
  inline ::google::protobuf::int32 bet_pos() const;
  inline void set_bet_pos(::google::protobuf::int32 value);

  // optional int64 bet_gold = 3;
  inline bool has_bet_gold() const;
  inline void clear_bet_gold();
  static const int kBetGoldFieldNumber = 3;
  inline ::google::protobuf::int64 bet_gold() const;
  inline void set_bet_gold(::google::protobuf::int64 value);

  // optional int32 chip_index = 4;
  inline bool has_chip_index() const;
  inline void clear_chip_index();
  static const int kChipIndexFieldNumber = 4;
  inline ::google::protobuf::int32 chip_index() const;
  inline void set_chip_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetc2l_ask_bet_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_bet_pos();
  inline void clear_has_bet_pos();
  inline void set_has_bet_gold();
  inline void clear_has_bet_gold();
  inline void set_has_chip_index();
  inline void clear_has_chip_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 bet_pos_;
  ::google::protobuf::int64 bet_gold_;
  ::google::protobuf::int32 chip_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_ask_bet_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bet_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_bet_info_result();
  virtual ~packetl2c_bet_info_result();

  packetl2c_bet_info_result(const packetl2c_bet_info_result& from);

  inline packetl2c_bet_info_result& operator=(const packetl2c_bet_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bet_info_result& default_instance();

  void Swap(packetl2c_bet_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_bet_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bet_info_result& from);
  void MergeFrom(const packetl2c_bet_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional .game_rouletteak_protocols.msg_bet_info bet_info = 3;
  inline bool has_bet_info() const;
  inline void clear_bet_info();
  static const int kBetInfoFieldNumber = 3;
  inline const ::game_rouletteak_protocols::msg_bet_info& bet_info() const;
  inline ::game_rouletteak_protocols::msg_bet_info* mutable_bet_info();
  inline ::game_rouletteak_protocols::msg_bet_info* release_bet_info();
  inline void set_allocated_bet_info(::game_rouletteak_protocols::msg_bet_info* bet_info);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetl2c_bet_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_bet_info();
  inline void clear_has_bet_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::game_rouletteak_protocols::msg_bet_info* bet_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bet_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_enter_player_info : public ::google::protobuf::Message {
 public:
  packetl2c_enter_player_info();
  virtual ~packetl2c_enter_player_info();

  packetl2c_enter_player_info(const packetl2c_enter_player_info& from);

  inline packetl2c_enter_player_info& operator=(const packetl2c_enter_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_enter_player_info& default_instance();

  void Swap(packetl2c_enter_player_info* other);

  // implements Message ----------------------------------------------

  packetl2c_enter_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_enter_player_info& from);
  void MergeFrom(const packetl2c_enter_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_player_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // optional .game_rouletteak_protocols.msg_player_info player_info = 2;
  inline bool has_player_info() const;
  inline void clear_player_info();
  static const int kPlayerInfoFieldNumber = 2;
  inline const ::game_rouletteak_protocols::msg_player_info& player_info() const;
  inline ::game_rouletteak_protocols::msg_player_info* mutable_player_info();
  inline ::game_rouletteak_protocols::msg_player_info* release_player_info();
  inline void set_allocated_player_info(::game_rouletteak_protocols::msg_player_info* player_info);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetl2c_enter_player_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_info();
  inline void clear_has_player_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game_rouletteak_protocols::msg_player_info* player_info_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_enter_player_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_leave_player_info : public ::google::protobuf::Message {
 public:
  packetl2c_leave_player_info();
  virtual ~packetl2c_leave_player_info();

  packetl2c_leave_player_info(const packetl2c_leave_player_info& from);

  inline packetl2c_leave_player_info& operator=(const packetl2c_leave_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_leave_player_info& default_instance();

  void Swap(packetl2c_leave_player_info* other);

  // implements Message ----------------------------------------------

  packetl2c_leave_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_leave_player_info& from);
  void MergeFrom(const packetl2c_leave_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_player_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetl2c_leave_player_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_leave_player_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_change_attr : public ::google::protobuf::Message {
 public:
  packetl2c_bc_change_attr();
  virtual ~packetl2c_bc_change_attr();

  packetl2c_bc_change_attr(const packetl2c_bc_change_attr& from);

  inline packetl2c_bc_change_attr& operator=(const packetl2c_bc_change_attr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_change_attr& default_instance();

  void Swap(packetl2c_bc_change_attr* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_change_attr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_change_attr& from);
  void MergeFrom(const packetl2c_bc_change_attr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int32 item_type = 3;
  inline bool has_item_type() const;
  inline void clear_item_type();
  static const int kItemTypeFieldNumber = 3;
  inline ::google::protobuf::int32 item_type() const;
  inline void set_item_type(::google::protobuf::int32 value);

  // optional int64 change_value = 4;
  inline bool has_change_value() const;
  inline void clear_change_value();
  static const int kChangeValueFieldNumber = 4;
  inline ::google::protobuf::int64 change_value() const;
  inline void set_change_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetl2c_bc_change_attr)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_item_type();
  inline void clear_has_item_type();
  inline void set_has_change_value();
  inline void clear_has_change_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int64 change_value_;
  ::google::protobuf::int32 item_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_change_attr* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_supply_chip : public ::google::protobuf::Message {
 public:
  packetc2l_supply_chip();
  virtual ~packetc2l_supply_chip();

  packetc2l_supply_chip(const packetc2l_supply_chip& from);

  inline packetc2l_supply_chip& operator=(const packetc2l_supply_chip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_supply_chip& default_instance();

  void Swap(packetc2l_supply_chip* other);

  // implements Message ----------------------------------------------

  packetc2l_supply_chip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_supply_chip& from);
  void MergeFrom(const packetc2l_supply_chip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_supply_chip];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetc2l_supply_chip)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_supply_chip* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_supply_chip_result : public ::google::protobuf::Message {
 public:
  packetl2c_supply_chip_result();
  virtual ~packetl2c_supply_chip_result();

  packetl2c_supply_chip_result(const packetl2c_supply_chip_result& from);

  inline packetl2c_supply_chip_result& operator=(const packetl2c_supply_chip_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_supply_chip_result& default_instance();

  void Swap(packetl2c_supply_chip_result* other);

  // implements Message ----------------------------------------------

  packetl2c_supply_chip_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_supply_chip_result& from);
  void MergeFrom(const packetl2c_supply_chip_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_supply_chip_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int64 gold = 6;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 6;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetl2c_supply_chip_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gold();
  inline void clear_has_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int64 gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_supply_chip_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_check_state : public ::google::protobuf::Message {
 public:
  packetc2l_check_state();
  virtual ~packetc2l_check_state();

  packetc2l_check_state(const packetc2l_check_state& from);

  inline packetc2l_check_state& operator=(const packetc2l_check_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_check_state& default_instance();

  void Swap(packetc2l_check_state* other);

  // implements Message ----------------------------------------------

  packetc2l_check_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_check_state& from);
  void MergeFrom(const packetc2l_check_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetc2l_check_state)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_check_state* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_check_state_result : public ::google::protobuf::Message {
 public:
  packetc2l_check_state_result();
  virtual ~packetc2l_check_state_result();

  packetc2l_check_state_result(const packetc2l_check_state_result& from);

  inline packetc2l_check_state_result& operator=(const packetc2l_check_state_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_check_state_result& default_instance();

  void Swap(packetc2l_check_state_result* other);

  // implements Message ----------------------------------------------

  packetc2l_check_state_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_check_state_result& from);
  void MergeFrom(const packetc2l_check_state_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetc2l_check_state_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_check_state_result* default_instance_;
};
// -------------------------------------------------------------------

class msg_room_history : public ::google::protobuf::Message {
 public:
  msg_room_history();
  virtual ~msg_room_history();

  msg_room_history(const msg_room_history& from);

  inline msg_room_history& operator=(const msg_room_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_room_history& default_instance();

  void Swap(msg_room_history* other);

  // implements Message ----------------------------------------------

  msg_room_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_room_history& from);
  void MergeFrom(const msg_room_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 cd = 3;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 3;
  inline ::google::protobuf::int32 cd() const;
  inline void set_cd(::google::protobuf::int32 value);

  // repeated int32 pos_list = 4;
  inline int pos_list_size() const;
  inline void clear_pos_list();
  static const int kPosListFieldNumber = 4;
  inline ::google::protobuf::int32 pos_list(int index) const;
  inline void set_pos_list(int index, ::google::protobuf::int32 value);
  inline void add_pos_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pos_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pos_list();

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.msg_room_history)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_cd();
  inline void clear_has_cd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pos_list_;
  ::google::protobuf::int32 cd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_room_history* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_room_history_list : public ::google::protobuf::Message {
 public:
  packetc2l_room_history_list();
  virtual ~packetc2l_room_history_list();

  packetc2l_room_history_list(const packetc2l_room_history_list& from);

  inline packetc2l_room_history_list& operator=(const packetc2l_room_history_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_room_history_list& default_instance();

  void Swap(packetc2l_room_history_list* other);

  // implements Message ----------------------------------------------

  packetc2l_room_history_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_room_history_list& from);
  void MergeFrom(const packetc2l_room_history_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_room_history_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetc2l_room_history_list)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_room_history_list* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_room_history_list_result : public ::google::protobuf::Message {
 public:
  packetl2c_room_history_list_result();
  virtual ~packetl2c_room_history_list_result();

  packetl2c_room_history_list_result(const packetl2c_room_history_list_result& from);

  inline packetl2c_room_history_list_result& operator=(const packetl2c_room_history_list_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_room_history_list_result& default_instance();

  void Swap(packetl2c_room_history_list_result* other);

  // implements Message ----------------------------------------------

  packetl2c_room_history_list_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_room_history_list_result& from);
  void MergeFrom(const packetl2c_room_history_list_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_room_history_list_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // repeated .game_rouletteak_protocols.msg_room_history history_list = 2;
  inline int history_list_size() const;
  inline void clear_history_list();
  static const int kHistoryListFieldNumber = 2;
  inline const ::game_rouletteak_protocols::msg_room_history& history_list(int index) const;
  inline ::game_rouletteak_protocols::msg_room_history* mutable_history_list(int index);
  inline ::game_rouletteak_protocols::msg_room_history* add_history_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_room_history >&
      history_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_room_history >*
      mutable_history_list();

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetl2c_room_history_list_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_room_history > history_list_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_room_history_list_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notify_history : public ::google::protobuf::Message {
 public:
  packetl2c_notify_history();
  virtual ~packetl2c_notify_history();

  packetl2c_notify_history(const packetl2c_notify_history& from);

  inline packetl2c_notify_history& operator=(const packetl2c_notify_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notify_history& default_instance();

  void Swap(packetl2c_notify_history* other);

  // implements Message ----------------------------------------------

  packetl2c_notify_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notify_history& from);
  void MergeFrom(const packetl2c_notify_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notify_history];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional int32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 cd = 4;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 4;
  inline ::google::protobuf::int32 cd() const;
  inline void set_cd(::google::protobuf::int32 value);

  // optional int32 pos = 5;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 5;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetl2c_notify_history)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_cd();
  inline void clear_has_cd();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 cd_;
  ::google::protobuf::int32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notify_history* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_continue_bet : public ::google::protobuf::Message {
 public:
  packetc2l_continue_bet();
  virtual ~packetc2l_continue_bet();

  packetc2l_continue_bet(const packetc2l_continue_bet& from);

  inline packetc2l_continue_bet& operator=(const packetc2l_continue_bet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_continue_bet& default_instance();

  void Swap(packetc2l_continue_bet* other);

  // implements Message ----------------------------------------------

  packetc2l_continue_bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_continue_bet& from);
  void MergeFrom(const packetc2l_continue_bet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_continue_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetc2l_continue_bet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_continue_bet* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_continue_bet_result : public ::google::protobuf::Message {
 public:
  packetl2c_continue_bet_result();
  virtual ~packetl2c_continue_bet_result();

  packetl2c_continue_bet_result(const packetl2c_continue_bet_result& from);

  inline packetl2c_continue_bet_result& operator=(const packetl2c_continue_bet_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_continue_bet_result& default_instance();

  void Swap(packetl2c_continue_bet_result* other);

  // implements Message ----------------------------------------------

  packetl2c_continue_bet_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_continue_bet_result& from);
  void MergeFrom(const packetl2c_continue_bet_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_continue_bet_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int64 cur_gold = 3;
  inline bool has_cur_gold() const;
  inline void clear_cur_gold();
  static const int kCurGoldFieldNumber = 3;
  inline ::google::protobuf::int64 cur_gold() const;
  inline void set_cur_gold(::google::protobuf::int64 value);

  // repeated .game_rouletteak_protocols.msg_bet_info bet_list = 4;
  inline int bet_list_size() const;
  inline void clear_bet_list();
  static const int kBetListFieldNumber = 4;
  inline const ::game_rouletteak_protocols::msg_bet_info& bet_list(int index) const;
  inline ::game_rouletteak_protocols::msg_bet_info* mutable_bet_list(int index);
  inline ::game_rouletteak_protocols::msg_bet_info* add_bet_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_bet_info >&
      bet_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_bet_info >*
      mutable_bet_list();

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetl2c_continue_bet_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_cur_gold();
  inline void clear_has_cur_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int64 cur_gold_;
  ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_bet_info > bet_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_continue_bet_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_cancel_bet : public ::google::protobuf::Message {
 public:
  packetc2l_cancel_bet();
  virtual ~packetc2l_cancel_bet();

  packetc2l_cancel_bet(const packetc2l_cancel_bet& from);

  inline packetc2l_cancel_bet& operator=(const packetc2l_cancel_bet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_cancel_bet& default_instance();

  void Swap(packetc2l_cancel_bet* other);

  // implements Message ----------------------------------------------

  packetc2l_cancel_bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_cancel_bet& from);
  void MergeFrom(const packetc2l_cancel_bet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_cancel_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // optional int32 bet_pos = 2 [default = -1];
  inline bool has_bet_pos() const;
  inline void clear_bet_pos();
  static const int kBetPosFieldNumber = 2;
  inline ::google::protobuf::int32 bet_pos() const;
  inline void set_bet_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetc2l_cancel_bet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_bet_pos();
  inline void clear_has_bet_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 bet_pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_cancel_bet* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_cancel_bet_result : public ::google::protobuf::Message {
 public:
  packetl2c_cancel_bet_result();
  virtual ~packetl2c_cancel_bet_result();

  packetl2c_cancel_bet_result(const packetl2c_cancel_bet_result& from);

  inline packetl2c_cancel_bet_result& operator=(const packetl2c_cancel_bet_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_cancel_bet_result& default_instance();

  void Swap(packetl2c_cancel_bet_result* other);

  // implements Message ----------------------------------------------

  packetl2c_cancel_bet_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_cancel_bet_result& from);
  void MergeFrom(const packetl2c_cancel_bet_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_cancel_bet_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int64 cur_gold = 4;
  inline bool has_cur_gold() const;
  inline void clear_cur_gold();
  static const int kCurGoldFieldNumber = 4;
  inline ::google::protobuf::int64 cur_gold() const;
  inline void set_cur_gold(::google::protobuf::int64 value);

  // optional int32 bet_pos = 5;
  inline bool has_bet_pos() const;
  inline void clear_bet_pos();
  static const int kBetPosFieldNumber = 5;
  inline ::google::protobuf::int32 bet_pos() const;
  inline void set_bet_pos(::google::protobuf::int32 value);

  // optional int64 change_gold = 6;
  inline bool has_change_gold() const;
  inline void clear_change_gold();
  static const int kChangeGoldFieldNumber = 6;
  inline ::google::protobuf::int64 change_gold() const;
  inline void set_change_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetl2c_cancel_bet_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_cur_gold();
  inline void clear_has_cur_gold();
  inline void set_has_bet_pos();
  inline void clear_has_bet_pos();
  inline void set_has_change_gold();
  inline void clear_has_change_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int64 cur_gold_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 bet_pos_;
  ::google::protobuf::int64 change_gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_cancel_bet_result* default_instance_;
};
// -------------------------------------------------------------------

class room_player : public ::google::protobuf::Message {
 public:
  room_player();
  virtual ~room_player();

  room_player(const room_player& from);

  inline room_player& operator=(const room_player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const room_player& default_instance();

  void Swap(room_player* other);

  // implements Message ----------------------------------------------

  room_player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const room_player& from);
  void MergeFrom(const room_player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int64 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int64 profit_today = 3;
  inline bool has_profit_today() const;
  inline void clear_profit_today();
  static const int kProfitTodayFieldNumber = 3;
  inline ::google::protobuf::int64 profit_today() const;
  inline void set_profit_today(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.room_player)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_profit_today();
  inline void clear_has_profit_today();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gold_;
  ::google::protobuf::int64 profit_today_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static room_player* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_gm_get_room_info : public ::google::protobuf::Message {
 public:
  packetl2c_gm_get_room_info();
  virtual ~packetl2c_gm_get_room_info();

  packetl2c_gm_get_room_info(const packetl2c_gm_get_room_info& from);

  inline packetl2c_gm_get_room_info& operator=(const packetl2c_gm_get_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_gm_get_room_info& default_instance();

  void Swap(packetl2c_gm_get_room_info* other);

  // implements Message ----------------------------------------------

  packetl2c_gm_get_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_gm_get_room_info& from);
  void MergeFrom(const packetl2c_gm_get_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_get_room_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetl2c_gm_get_room_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_gm_get_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_gm_get_room_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_gm_get_room_info_result();
  virtual ~packetl2c_gm_get_room_info_result();

  packetl2c_gm_get_room_info_result(const packetl2c_gm_get_room_info_result& from);

  inline packetl2c_gm_get_room_info_result& operator=(const packetl2c_gm_get_room_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_gm_get_room_info_result& default_instance();

  void Swap(packetl2c_gm_get_room_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_gm_get_room_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_gm_get_room_info_result& from);
  void MergeFrom(const packetl2c_gm_get_room_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_get_room_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 bead_num = 3 [default = -1];
  inline bool has_bead_num() const;
  inline void clear_bead_num();
  static const int kBeadNumFieldNumber = 3;
  inline ::google::protobuf::int32 bead_num() const;
  inline void set_bead_num(::google::protobuf::int32 value);

  // repeated .game_rouletteak_protocols.room_player players = 4;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 4;
  inline const ::game_rouletteak_protocols::room_player& players(int index) const;
  inline ::game_rouletteak_protocols::room_player* mutable_players(int index);
  inline ::game_rouletteak_protocols::room_player* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::room_player >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::room_player >*
      mutable_players();

  // optional int64 stock = 5;
  inline bool has_stock() const;
  inline void clear_stock();
  static const int kStockFieldNumber = 5;
  inline ::google::protobuf::int64 stock() const;
  inline void set_stock(::google::protobuf::int64 value);

  // optional int64 water = 6;
  inline bool has_water() const;
  inline void clear_water();
  static const int kWaterFieldNumber = 6;
  inline ::google::protobuf::int64 water() const;
  inline void set_water(::google::protobuf::int64 value);

  // optional int32 kill = 7;
  inline bool has_kill() const;
  inline void clear_kill();
  static const int kKillFieldNumber = 7;
  inline ::google::protobuf::int32 kill() const;
  inline void set_kill(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetl2c_gm_get_room_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_bead_num();
  inline void clear_has_bead_num();
  inline void set_has_stock();
  inline void clear_has_stock();
  inline void set_has_water();
  inline void clear_has_water();
  inline void set_has_kill();
  inline void clear_has_kill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::room_player > players_;
  ::google::protobuf::int64 stock_;
  ::google::protobuf::int32 bead_num_;
  ::google::protobuf::int32 kill_;
  ::google::protobuf::int64 water_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_gm_get_room_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_gm_set_bead : public ::google::protobuf::Message {
 public:
  packetl2c_gm_set_bead();
  virtual ~packetl2c_gm_set_bead();

  packetl2c_gm_set_bead(const packetl2c_gm_set_bead& from);

  inline packetl2c_gm_set_bead& operator=(const packetl2c_gm_set_bead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_gm_set_bead& default_instance();

  void Swap(packetl2c_gm_set_bead* other);

  // implements Message ----------------------------------------------

  packetl2c_gm_set_bead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_gm_set_bead& from);
  void MergeFrom(const packetl2c_gm_set_bead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_set_bead];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // optional int32 bead_num = 2;
  inline bool has_bead_num() const;
  inline void clear_bead_num();
  static const int kBeadNumFieldNumber = 2;
  inline ::google::protobuf::int32 bead_num() const;
  inline void set_bead_num(::google::protobuf::int32 value);

  // optional int32 kill = 3;
  inline bool has_kill() const;
  inline void clear_kill();
  static const int kKillFieldNumber = 3;
  inline ::google::protobuf::int32 kill() const;
  inline void set_kill(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetl2c_gm_set_bead)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_bead_num();
  inline void clear_has_bead_num();
  inline void set_has_kill();
  inline void clear_has_kill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 bead_num_;
  ::google::protobuf::int32 kill_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_gm_set_bead* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_gm_set_bead_result : public ::google::protobuf::Message {
 public:
  packetl2c_gm_set_bead_result();
  virtual ~packetl2c_gm_set_bead_result();

  packetl2c_gm_set_bead_result(const packetl2c_gm_set_bead_result& from);

  inline packetl2c_gm_set_bead_result& operator=(const packetl2c_gm_set_bead_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_gm_set_bead_result& default_instance();

  void Swap(packetl2c_gm_set_bead_result* other);

  // implements Message ----------------------------------------------

  packetl2c_gm_set_bead_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_gm_set_bead_result& from);
  void MergeFrom(const packetl2c_gm_set_bead_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_set_bead_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_rouletteak_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_rouletteak_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 bead_num = 3;
  inline bool has_bead_num() const;
  inline void clear_bead_num();
  static const int kBeadNumFieldNumber = 3;
  inline ::google::protobuf::int32 bead_num() const;
  inline void set_bead_num(::google::protobuf::int32 value);

  // optional int32 kill = 4;
  inline bool has_kill() const;
  inline void clear_kill();
  static const int kKillFieldNumber = 4;
  inline ::google::protobuf::int32 kill() const;
  inline void set_kill(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_rouletteak_protocols.packetl2c_gm_set_bead_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_bead_num();
  inline void clear_has_bead_num();
  inline void set_has_kill();
  inline void clear_has_kill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 bead_num_;
  ::google::protobuf::int32 kill_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_gm_set_bead_result* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_room_info

// optional int32 roomid = 1;
inline bool msg_room_info::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_room_info::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_room_info::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_room_info::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 msg_room_info::roomid() const {
  return roomid_;
}
inline void msg_room_info::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// packetc2l_get_room_info

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
inline bool packetc2l_get_room_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_room_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_room_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_room_info::clear_packet_id() {
  packet_id_ = 10014;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetc2l_get_room_info::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_room_info::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_get_room_info_result

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
inline bool packetl2c_get_room_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_get_room_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_get_room_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_get_room_info_result::clear_packet_id() {
  packet_id_ = 15058;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetl2c_get_room_info_result::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_get_room_info_result::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_rouletteak_protocols.msg_room_info room_list = 2;
inline int packetl2c_get_room_info_result::room_list_size() const {
  return room_list_.size();
}
inline void packetl2c_get_room_info_result::clear_room_list() {
  room_list_.Clear();
}
inline const ::game_rouletteak_protocols::msg_room_info& packetl2c_get_room_info_result::room_list(int index) const {
  return room_list_.Get(index);
}
inline ::game_rouletteak_protocols::msg_room_info* packetl2c_get_room_info_result::mutable_room_list(int index) {
  return room_list_.Mutable(index);
}
inline ::game_rouletteak_protocols::msg_room_info* packetl2c_get_room_info_result::add_room_list() {
  return room_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_room_info >&
packetl2c_get_room_info_result::room_list() const {
  return room_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_room_info >*
packetl2c_get_room_info_result::mutable_room_list() {
  return &room_list_;
}

// -------------------------------------------------------------------

// packetc2l_enter_room

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
inline bool packetc2l_enter_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_enter_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_enter_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_enter_room::clear_packet_id() {
  packet_id_ = 10015;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetc2l_enter_room::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_enter_room::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 roomid = 2;
inline bool packetc2l_enter_room::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_enter_room::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_enter_room::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_enter_room::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 packetc2l_enter_room::roomid() const {
  return roomid_;
}
inline void packetc2l_enter_room::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// packetl2c_enter_room_result

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
inline bool packetl2c_enter_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_enter_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_enter_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_enter_room_result::clear_packet_id() {
  packet_id_ = 15059;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetl2c_enter_room_result::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_enter_room_result::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_enter_room_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_enter_room_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_enter_room_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_enter_room_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_enter_room_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_enter_room_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional .game_rouletteak_protocols.msg_scene_info scene_info = 3;
inline bool packetl2c_enter_room_result::has_scene_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_enter_room_result::set_has_scene_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_enter_room_result::clear_has_scene_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_enter_room_result::clear_scene_info() {
  if (scene_info_ != NULL) scene_info_->::game_rouletteak_protocols::msg_scene_info::Clear();
  clear_has_scene_info();
}
inline const ::game_rouletteak_protocols::msg_scene_info& packetl2c_enter_room_result::scene_info() const {
  return scene_info_ != NULL ? *scene_info_ : *default_instance_->scene_info_;
}
inline ::game_rouletteak_protocols::msg_scene_info* packetl2c_enter_room_result::mutable_scene_info() {
  set_has_scene_info();
  if (scene_info_ == NULL) scene_info_ = new ::game_rouletteak_protocols::msg_scene_info;
  return scene_info_;
}
inline ::game_rouletteak_protocols::msg_scene_info* packetl2c_enter_room_result::release_scene_info() {
  clear_has_scene_info();
  ::game_rouletteak_protocols::msg_scene_info* temp = scene_info_;
  scene_info_ = NULL;
  return temp;
}
inline void packetl2c_enter_room_result::set_allocated_scene_info(::game_rouletteak_protocols::msg_scene_info* scene_info) {
  delete scene_info_;
  scene_info_ = scene_info;
  if (scene_info) {
    set_has_scene_info();
  } else {
    clear_has_scene_info();
  }
}

// optional int64 self_gold = 4;
inline bool packetl2c_enter_room_result::has_self_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_enter_room_result::set_has_self_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_enter_room_result::clear_has_self_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_enter_room_result::clear_self_gold() {
  self_gold_ = GOOGLE_LONGLONG(0);
  clear_has_self_gold();
}
inline ::google::protobuf::int64 packetl2c_enter_room_result::self_gold() const {
  return self_gold_;
}
inline void packetl2c_enter_room_result::set_self_gold(::google::protobuf::int64 value) {
  set_has_self_gold();
  self_gold_ = value;
}

// -------------------------------------------------------------------

// packetc2l_leave_room

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
inline bool packetc2l_leave_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_leave_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_leave_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_leave_room::clear_packet_id() {
  packet_id_ = 10016;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetc2l_leave_room::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_leave_room::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_leave_room_result

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
inline bool packetl2c_leave_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_leave_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_leave_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_leave_room_result::clear_packet_id() {
  packet_id_ = 15060;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetl2c_leave_room_result::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_leave_room_result::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
inline bool packetl2c_leave_room_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_leave_room_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_leave_room_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_leave_room_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_leave_room_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_leave_room_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int64 player_gold = 3;
inline bool packetl2c_leave_room_result::has_player_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_leave_room_result::set_has_player_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_leave_room_result::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_leave_room_result::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 packetl2c_leave_room_result::player_gold() const {
  return player_gold_;
}
inline void packetl2c_leave_room_result::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// -------------------------------------------------------------------

// msg_player_info

// optional int32 player_id = 1;
inline bool msg_player_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_player_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_player_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_player_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_player_info::player_id() const {
  return player_id_;
}
inline void msg_player_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string player_name = 2;
inline bool msg_player_info::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_player_info::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_player_info::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_player_info::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& msg_player_info::player_name() const {
  return *player_name_;
}
inline void msg_player_info::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void msg_player_info::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void msg_player_info::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_player_info::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* msg_player_info::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_player_info::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 head_frame = 3;
inline bool msg_player_info::has_head_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_player_info::set_has_head_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_player_info::clear_has_head_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_player_info::clear_head_frame() {
  head_frame_ = 0;
  clear_has_head_frame();
}
inline ::google::protobuf::int32 msg_player_info::head_frame() const {
  return head_frame_;
}
inline void msg_player_info::set_head_frame(::google::protobuf::int32 value) {
  set_has_head_frame();
  head_frame_ = value;
}

// optional string head_custom = 4;
inline bool msg_player_info::has_head_custom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_player_info::set_has_head_custom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_player_info::clear_has_head_custom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_player_info::clear_head_custom() {
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    head_custom_->clear();
  }
  clear_has_head_custom();
}
inline const ::std::string& msg_player_info::head_custom() const {
  return *head_custom_;
}
inline void msg_player_info::set_head_custom(const ::std::string& value) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(value);
}
inline void msg_player_info::set_head_custom(const char* value) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(value);
}
inline void msg_player_info::set_head_custom(const char* value, size_t size) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_player_info::mutable_head_custom() {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  return head_custom_;
}
inline ::std::string* msg_player_info::release_head_custom() {
  clear_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_custom_;
    head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_player_info::set_allocated_head_custom(::std::string* head_custom) {
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete head_custom_;
  }
  if (head_custom) {
    set_has_head_custom();
    head_custom_ = head_custom;
  } else {
    clear_has_head_custom();
    head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 player_gold = 5;
inline bool msg_player_info::has_player_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_player_info::set_has_player_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_player_info::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_player_info::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 msg_player_info::player_gold() const {
  return player_gold_;
}
inline void msg_player_info::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// optional int32 player_sex = 6;
inline bool msg_player_info::has_player_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_player_info::set_has_player_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_player_info::clear_has_player_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_player_info::clear_player_sex() {
  player_sex_ = 0;
  clear_has_player_sex();
}
inline ::google::protobuf::int32 msg_player_info::player_sex() const {
  return player_sex_;
}
inline void msg_player_info::set_player_sex(::google::protobuf::int32 value) {
  set_has_player_sex();
  player_sex_ = value;
}

// optional int32 vip_level = 7;
inline bool msg_player_info::has_vip_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_player_info::set_has_vip_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_player_info::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_player_info::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 msg_player_info::vip_level() const {
  return vip_level_;
}
inline void msg_player_info::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional int32 history_bet_gold = 8;
inline bool msg_player_info::has_history_bet_gold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_player_info::set_has_history_bet_gold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_player_info::clear_has_history_bet_gold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_player_info::clear_history_bet_gold() {
  history_bet_gold_ = 0;
  clear_has_history_bet_gold();
}
inline ::google::protobuf::int32 msg_player_info::history_bet_gold() const {
  return history_bet_gold_;
}
inline void msg_player_info::set_history_bet_gold(::google::protobuf::int32 value) {
  set_has_history_bet_gold();
  history_bet_gold_ = value;
}

// optional int32 win_count = 9;
inline bool msg_player_info::has_win_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msg_player_info::set_has_win_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msg_player_info::clear_has_win_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msg_player_info::clear_win_count() {
  win_count_ = 0;
  clear_has_win_count();
}
inline ::google::protobuf::int32 msg_player_info::win_count() const {
  return win_count_;
}
inline void msg_player_info::set_win_count(::google::protobuf::int32 value) {
  set_has_win_count();
  win_count_ = value;
}

// -------------------------------------------------------------------

// msg_bet_info

// optional int32 player_id = 1;
inline bool msg_bet_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_bet_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_bet_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_bet_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_bet_info::player_id() const {
  return player_id_;
}
inline void msg_bet_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 bet_pos = 2;
inline bool msg_bet_info::has_bet_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_bet_info::set_has_bet_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_bet_info::clear_has_bet_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_bet_info::clear_bet_pos() {
  bet_pos_ = 0;
  clear_has_bet_pos();
}
inline ::google::protobuf::int32 msg_bet_info::bet_pos() const {
  return bet_pos_;
}
inline void msg_bet_info::set_bet_pos(::google::protobuf::int32 value) {
  set_has_bet_pos();
  bet_pos_ = value;
}

// optional int64 bet_gold = 3;
inline bool msg_bet_info::has_bet_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_bet_info::set_has_bet_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_bet_info::clear_has_bet_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_bet_info::clear_bet_gold() {
  bet_gold_ = GOOGLE_LONGLONG(0);
  clear_has_bet_gold();
}
inline ::google::protobuf::int64 msg_bet_info::bet_gold() const {
  return bet_gold_;
}
inline void msg_bet_info::set_bet_gold(::google::protobuf::int64 value) {
  set_has_bet_gold();
  bet_gold_ = value;
}

// optional int64 cur_gold = 4;
inline bool msg_bet_info::has_cur_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_bet_info::set_has_cur_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_bet_info::clear_has_cur_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_bet_info::clear_cur_gold() {
  cur_gold_ = GOOGLE_LONGLONG(0);
  clear_has_cur_gold();
}
inline ::google::protobuf::int64 msg_bet_info::cur_gold() const {
  return cur_gold_;
}
inline void msg_bet_info::set_cur_gold(::google::protobuf::int64 value) {
  set_has_cur_gold();
  cur_gold_ = value;
}

// optional int32 chip_index = 5;
inline bool msg_bet_info::has_chip_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_bet_info::set_has_chip_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_bet_info::clear_has_chip_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_bet_info::clear_chip_index() {
  chip_index_ = 0;
  clear_has_chip_index();
}
inline ::google::protobuf::int32 msg_bet_info::chip_index() const {
  return chip_index_;
}
inline void msg_bet_info::set_chip_index(::google::protobuf::int32 value) {
  set_has_chip_index();
  chip_index_ = value;
}

// -------------------------------------------------------------------

// msg_player_gold

// optional int32 player_id = 1;
inline bool msg_player_gold::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_player_gold::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_player_gold::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_player_gold::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_player_gold::player_id() const {
  return player_id_;
}
inline void msg_player_gold::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int64 win_gold = 2;
inline bool msg_player_gold::has_win_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_player_gold::set_has_win_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_player_gold::clear_has_win_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_player_gold::clear_win_gold() {
  win_gold_ = GOOGLE_LONGLONG(0);
  clear_has_win_gold();
}
inline ::google::protobuf::int64 msg_player_gold::win_gold() const {
  return win_gold_;
}
inline void msg_player_gold::set_win_gold(::google::protobuf::int64 value) {
  set_has_win_gold();
  win_gold_ = value;
}

// optional int64 cur_gold = 3;
inline bool msg_player_gold::has_cur_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_player_gold::set_has_cur_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_player_gold::clear_has_cur_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_player_gold::clear_cur_gold() {
  cur_gold_ = GOOGLE_LONGLONG(0);
  clear_has_cur_gold();
}
inline ::google::protobuf::int64 msg_player_gold::cur_gold() const {
  return cur_gold_;
}
inline void msg_player_gold::set_cur_gold(::google::protobuf::int64 value) {
  set_has_cur_gold();
  cur_gold_ = value;
}

// optional int32 history_bet_gold = 4;
inline bool msg_player_gold::has_history_bet_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_player_gold::set_has_history_bet_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_player_gold::clear_has_history_bet_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_player_gold::clear_history_bet_gold() {
  history_bet_gold_ = 0;
  clear_has_history_bet_gold();
}
inline ::google::protobuf::int32 msg_player_gold::history_bet_gold() const {
  return history_bet_gold_;
}
inline void msg_player_gold::set_history_bet_gold(::google::protobuf::int32 value) {
  set_has_history_bet_gold();
  history_bet_gold_ = value;
}

// optional int64 win_count = 5;
inline bool msg_player_gold::has_win_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_player_gold::set_has_win_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_player_gold::clear_has_win_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_player_gold::clear_win_count() {
  win_count_ = GOOGLE_LONGLONG(0);
  clear_has_win_count();
}
inline ::google::protobuf::int64 msg_player_gold::win_count() const {
  return win_count_;
}
inline void msg_player_gold::set_win_count(::google::protobuf::int64 value) {
  set_has_win_count();
  win_count_ = value;
}

// -------------------------------------------------------------------

// msg_result_info

// optional int32 number = 1;
inline bool msg_result_info::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_result_info::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_result_info::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_result_info::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::google::protobuf::int32 msg_result_info::number() const {
  return number_;
}
inline void msg_result_info::set_number(::google::protobuf::int32 value) {
  set_has_number();
  number_ = value;
}

// repeated .game_rouletteak_protocols.msg_player_gold player_golds = 2;
inline int msg_result_info::player_golds_size() const {
  return player_golds_.size();
}
inline void msg_result_info::clear_player_golds() {
  player_golds_.Clear();
}
inline const ::game_rouletteak_protocols::msg_player_gold& msg_result_info::player_golds(int index) const {
  return player_golds_.Get(index);
}
inline ::game_rouletteak_protocols::msg_player_gold* msg_result_info::mutable_player_golds(int index) {
  return player_golds_.Mutable(index);
}
inline ::game_rouletteak_protocols::msg_player_gold* msg_result_info::add_player_golds() {
  return player_golds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_player_gold >&
msg_result_info::player_golds() const {
  return player_golds_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_player_gold >*
msg_result_info::mutable_player_golds() {
  return &player_golds_;
}

// -------------------------------------------------------------------

// msg_scene_info

// optional int32 roomid = 1;
inline bool msg_scene_info::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_scene_info::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_scene_info::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_scene_info::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 msg_scene_info::roomid() const {
  return roomid_;
}
inline void msg_scene_info::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional int32 scene_state = 2;
inline bool msg_scene_info::has_scene_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_scene_info::set_has_scene_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_scene_info::clear_has_scene_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_scene_info::clear_scene_state() {
  scene_state_ = 0;
  clear_has_scene_state();
}
inline ::google::protobuf::int32 msg_scene_info::scene_state() const {
  return scene_state_;
}
inline void msg_scene_info::set_scene_state(::google::protobuf::int32 value) {
  set_has_scene_state();
  scene_state_ = value;
}

// optional int32 cd = 3;
inline bool msg_scene_info::has_cd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_scene_info::set_has_cd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_scene_info::clear_has_cd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_scene_info::clear_cd() {
  cd_ = 0;
  clear_has_cd();
}
inline ::google::protobuf::int32 msg_scene_info::cd() const {
  return cd_;
}
inline void msg_scene_info::set_cd(::google::protobuf::int32 value) {
  set_has_cd();
  cd_ = value;
}

// repeated .game_rouletteak_protocols.msg_player_info player_list = 4;
inline int msg_scene_info::player_list_size() const {
  return player_list_.size();
}
inline void msg_scene_info::clear_player_list() {
  player_list_.Clear();
}
inline const ::game_rouletteak_protocols::msg_player_info& msg_scene_info::player_list(int index) const {
  return player_list_.Get(index);
}
inline ::game_rouletteak_protocols::msg_player_info* msg_scene_info::mutable_player_list(int index) {
  return player_list_.Mutable(index);
}
inline ::game_rouletteak_protocols::msg_player_info* msg_scene_info::add_player_list() {
  return player_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_player_info >&
msg_scene_info::player_list() const {
  return player_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_player_info >*
msg_scene_info::mutable_player_list() {
  return &player_list_;
}

// repeated .game_rouletteak_protocols.msg_bet_info bet_infos = 5;
inline int msg_scene_info::bet_infos_size() const {
  return bet_infos_.size();
}
inline void msg_scene_info::clear_bet_infos() {
  bet_infos_.Clear();
}
inline const ::game_rouletteak_protocols::msg_bet_info& msg_scene_info::bet_infos(int index) const {
  return bet_infos_.Get(index);
}
inline ::game_rouletteak_protocols::msg_bet_info* msg_scene_info::mutable_bet_infos(int index) {
  return bet_infos_.Mutable(index);
}
inline ::game_rouletteak_protocols::msg_bet_info* msg_scene_info::add_bet_infos() {
  return bet_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_bet_info >&
msg_scene_info::bet_infos() const {
  return bet_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_bet_info >*
msg_scene_info::mutable_bet_infos() {
  return &bet_infos_;
}

// optional .game_rouletteak_protocols.msg_result_info result_info = 6;
inline bool msg_scene_info::has_result_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_scene_info::set_has_result_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_scene_info::clear_has_result_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_scene_info::clear_result_info() {
  if (result_info_ != NULL) result_info_->::game_rouletteak_protocols::msg_result_info::Clear();
  clear_has_result_info();
}
inline const ::game_rouletteak_protocols::msg_result_info& msg_scene_info::result_info() const {
  return result_info_ != NULL ? *result_info_ : *default_instance_->result_info_;
}
inline ::game_rouletteak_protocols::msg_result_info* msg_scene_info::mutable_result_info() {
  set_has_result_info();
  if (result_info_ == NULL) result_info_ = new ::game_rouletteak_protocols::msg_result_info;
  return result_info_;
}
inline ::game_rouletteak_protocols::msg_result_info* msg_scene_info::release_result_info() {
  clear_has_result_info();
  ::game_rouletteak_protocols::msg_result_info* temp = result_info_;
  result_info_ = NULL;
  return temp;
}
inline void msg_scene_info::set_allocated_result_info(::game_rouletteak_protocols::msg_result_info* result_info) {
  delete result_info_;
  result_info_ = result_info;
  if (result_info) {
    set_has_result_info();
  } else {
    clear_has_result_info();
  }
}

// repeated int32 pos_list = 7;
inline int msg_scene_info::pos_list_size() const {
  return pos_list_.size();
}
inline void msg_scene_info::clear_pos_list() {
  pos_list_.Clear();
}
inline ::google::protobuf::int32 msg_scene_info::pos_list(int index) const {
  return pos_list_.Get(index);
}
inline void msg_scene_info::set_pos_list(int index, ::google::protobuf::int32 value) {
  pos_list_.Set(index, value);
}
inline void msg_scene_info::add_pos_list(::google::protobuf::int32 value) {
  pos_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_scene_info::pos_list() const {
  return pos_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_scene_info::mutable_pos_list() {
  return &pos_list_;
}

// optional int64 bet_gold_room = 8;
inline bool msg_scene_info::has_bet_gold_room() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_scene_info::set_has_bet_gold_room() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_scene_info::clear_has_bet_gold_room() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_scene_info::clear_bet_gold_room() {
  bet_gold_room_ = GOOGLE_LONGLONG(0);
  clear_has_bet_gold_room();
}
inline ::google::protobuf::int64 msg_scene_info::bet_gold_room() const {
  return bet_gold_room_;
}
inline void msg_scene_info::set_bet_gold_room(::google::protobuf::int64 value) {
  set_has_bet_gold_room();
  bet_gold_room_ = value;
}

// optional int64 bet_gold_self = 9;
inline bool msg_scene_info::has_bet_gold_self() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msg_scene_info::set_has_bet_gold_self() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msg_scene_info::clear_has_bet_gold_self() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msg_scene_info::clear_bet_gold_self() {
  bet_gold_self_ = GOOGLE_LONGLONG(0);
  clear_has_bet_gold_self();
}
inline ::google::protobuf::int64 msg_scene_info::bet_gold_self() const {
  return bet_gold_self_;
}
inline void msg_scene_info::set_bet_gold_self(::google::protobuf::int64 value) {
  set_has_bet_gold_self();
  bet_gold_self_ = value;
}

// -------------------------------------------------------------------

// packetc2l_get_scene_info

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
inline bool packetc2l_get_scene_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_scene_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_scene_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_scene_info::clear_packet_id() {
  packet_id_ = 10001;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetc2l_get_scene_info::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_scene_info::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_get_scene_info_result

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
inline bool packetl2c_get_scene_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_get_scene_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_get_scene_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_get_scene_info_result::clear_packet_id() {
  packet_id_ = 15001;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetl2c_get_scene_info_result::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_get_scene_info_result::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_rouletteak_protocols.msg_scene_info scene_info = 2;
inline bool packetl2c_get_scene_info_result::has_scene_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_get_scene_info_result::set_has_scene_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_get_scene_info_result::clear_has_scene_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_get_scene_info_result::clear_scene_info() {
  if (scene_info_ != NULL) scene_info_->::game_rouletteak_protocols::msg_scene_info::Clear();
  clear_has_scene_info();
}
inline const ::game_rouletteak_protocols::msg_scene_info& packetl2c_get_scene_info_result::scene_info() const {
  return scene_info_ != NULL ? *scene_info_ : *default_instance_->scene_info_;
}
inline ::game_rouletteak_protocols::msg_scene_info* packetl2c_get_scene_info_result::mutable_scene_info() {
  set_has_scene_info();
  if (scene_info_ == NULL) scene_info_ = new ::game_rouletteak_protocols::msg_scene_info;
  return scene_info_;
}
inline ::game_rouletteak_protocols::msg_scene_info* packetl2c_get_scene_info_result::release_scene_info() {
  clear_has_scene_info();
  ::game_rouletteak_protocols::msg_scene_info* temp = scene_info_;
  scene_info_ = NULL;
  return temp;
}
inline void packetl2c_get_scene_info_result::set_allocated_scene_info(::game_rouletteak_protocols::msg_scene_info* scene_info) {
  delete scene_info_;
  scene_info_ = scene_info;
  if (scene_info) {
    set_has_scene_info();
  } else {
    clear_has_scene_info();
  }
}

// optional int64 self_gold = 3;
inline bool packetl2c_get_scene_info_result::has_self_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_get_scene_info_result::set_has_self_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_get_scene_info_result::clear_has_self_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_get_scene_info_result::clear_self_gold() {
  self_gold_ = GOOGLE_LONGLONG(0);
  clear_has_self_gold();
}
inline ::google::protobuf::int64 packetl2c_get_scene_info_result::self_gold() const {
  return self_gold_;
}
inline void packetl2c_get_scene_info_result::set_self_gold(::google::protobuf::int64 value) {
  set_has_self_gold();
  self_gold_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_scene_prepare_into

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_prepare_into];
inline bool packetl2c_bc_scene_prepare_into::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_scene_prepare_into::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_scene_prepare_into::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_scene_prepare_into::clear_packet_id() {
  packet_id_ = 15050;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetl2c_bc_scene_prepare_into::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_scene_prepare_into::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 cd = 2;
inline bool packetl2c_bc_scene_prepare_into::has_cd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_scene_prepare_into::set_has_cd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_scene_prepare_into::clear_has_cd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_scene_prepare_into::clear_cd() {
  cd_ = 0;
  clear_has_cd();
}
inline ::google::protobuf::int32 packetl2c_bc_scene_prepare_into::cd() const {
  return cd_;
}
inline void packetl2c_bc_scene_prepare_into::set_cd(::google::protobuf::int32 value) {
  set_has_cd();
  cd_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_scene_bet_into

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_bet_into];
inline bool packetl2c_bc_scene_bet_into::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_scene_bet_into::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_scene_bet_into::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_scene_bet_into::clear_packet_id() {
  packet_id_ = 15051;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetl2c_bc_scene_bet_into::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_scene_bet_into::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 cd = 2;
inline bool packetl2c_bc_scene_bet_into::has_cd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_scene_bet_into::set_has_cd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_scene_bet_into::clear_has_cd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_scene_bet_into::clear_cd() {
  cd_ = 0;
  clear_has_cd();
}
inline ::google::protobuf::int32 packetl2c_bc_scene_bet_into::cd() const {
  return cd_;
}
inline void packetl2c_bc_scene_bet_into::set_cd(::google::protobuf::int32 value) {
  set_has_cd();
  cd_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_sync_scene_bet_into

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_scene_bet_into];
inline bool packetl2c_bc_sync_scene_bet_into::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_sync_scene_bet_into::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_sync_scene_bet_into::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_sync_scene_bet_into::clear_packet_id() {
  packet_id_ = 15052;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetl2c_bc_sync_scene_bet_into::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_sync_scene_bet_into::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_rouletteak_protocols.msg_bet_info bet_list = 2;
inline int packetl2c_bc_sync_scene_bet_into::bet_list_size() const {
  return bet_list_.size();
}
inline void packetl2c_bc_sync_scene_bet_into::clear_bet_list() {
  bet_list_.Clear();
}
inline const ::game_rouletteak_protocols::msg_bet_info& packetl2c_bc_sync_scene_bet_into::bet_list(int index) const {
  return bet_list_.Get(index);
}
inline ::game_rouletteak_protocols::msg_bet_info* packetl2c_bc_sync_scene_bet_into::mutable_bet_list(int index) {
  return bet_list_.Mutable(index);
}
inline ::game_rouletteak_protocols::msg_bet_info* packetl2c_bc_sync_scene_bet_into::add_bet_list() {
  return bet_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_bet_info >&
packetl2c_bc_sync_scene_bet_into::bet_list() const {
  return bet_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_bet_info >*
packetl2c_bc_sync_scene_bet_into::mutable_bet_list() {
  return &bet_list_;
}

// -------------------------------------------------------------------

// packetl2c_bc_scene_deal_into

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_deal_into];
inline bool packetl2c_bc_scene_deal_into::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_scene_deal_into::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_scene_deal_into::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_scene_deal_into::clear_packet_id() {
  packet_id_ = 15053;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetl2c_bc_scene_deal_into::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_scene_deal_into::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 cd = 2;
inline bool packetl2c_bc_scene_deal_into::has_cd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_scene_deal_into::set_has_cd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_scene_deal_into::clear_has_cd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_scene_deal_into::clear_cd() {
  cd_ = 0;
  clear_has_cd();
}
inline ::google::protobuf::int32 packetl2c_bc_scene_deal_into::cd() const {
  return cd_;
}
inline void packetl2c_bc_scene_deal_into::set_cd(::google::protobuf::int32 value) {
  set_has_cd();
  cd_ = value;
}

// optional int32 number = 3;
inline bool packetl2c_bc_scene_deal_into::has_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_scene_deal_into::set_has_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_scene_deal_into::clear_has_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_scene_deal_into::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::google::protobuf::int32 packetl2c_bc_scene_deal_into::number() const {
  return number_;
}
inline void packetl2c_bc_scene_deal_into::set_number(::google::protobuf::int32 value) {
  set_has_number();
  number_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_scene_result_into

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_result_into];
inline bool packetl2c_bc_scene_result_into::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_scene_result_into::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_scene_result_into::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_scene_result_into::clear_packet_id() {
  packet_id_ = 15054;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetl2c_bc_scene_result_into::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_scene_result_into::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 cd = 2;
inline bool packetl2c_bc_scene_result_into::has_cd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_scene_result_into::set_has_cd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_scene_result_into::clear_has_cd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_scene_result_into::clear_cd() {
  cd_ = 0;
  clear_has_cd();
}
inline ::google::protobuf::int32 packetl2c_bc_scene_result_into::cd() const {
  return cd_;
}
inline void packetl2c_bc_scene_result_into::set_cd(::google::protobuf::int32 value) {
  set_has_cd();
  cd_ = value;
}

// optional .game_rouletteak_protocols.msg_result_info result_info = 3;
inline bool packetl2c_bc_scene_result_into::has_result_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_scene_result_into::set_has_result_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_scene_result_into::clear_has_result_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_scene_result_into::clear_result_info() {
  if (result_info_ != NULL) result_info_->::game_rouletteak_protocols::msg_result_info::Clear();
  clear_has_result_info();
}
inline const ::game_rouletteak_protocols::msg_result_info& packetl2c_bc_scene_result_into::result_info() const {
  return result_info_ != NULL ? *result_info_ : *default_instance_->result_info_;
}
inline ::game_rouletteak_protocols::msg_result_info* packetl2c_bc_scene_result_into::mutable_result_info() {
  set_has_result_info();
  if (result_info_ == NULL) result_info_ = new ::game_rouletteak_protocols::msg_result_info;
  return result_info_;
}
inline ::game_rouletteak_protocols::msg_result_info* packetl2c_bc_scene_result_into::release_result_info() {
  clear_has_result_info();
  ::game_rouletteak_protocols::msg_result_info* temp = result_info_;
  result_info_ = NULL;
  return temp;
}
inline void packetl2c_bc_scene_result_into::set_allocated_result_info(::game_rouletteak_protocols::msg_result_info* result_info) {
  delete result_info_;
  result_info_ = result_info;
  if (result_info) {
    set_has_result_info();
  } else {
    clear_has_result_info();
  }
}

// -------------------------------------------------------------------

// packetc2l_ask_bet_info

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_bet_info];
inline bool packetc2l_ask_bet_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_ask_bet_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_ask_bet_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_ask_bet_info::clear_packet_id() {
  packet_id_ = 10011;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetc2l_ask_bet_info::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_ask_bet_info::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 bet_pos = 2;
inline bool packetc2l_ask_bet_info::has_bet_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_ask_bet_info::set_has_bet_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_ask_bet_info::clear_has_bet_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_ask_bet_info::clear_bet_pos() {
  bet_pos_ = 0;
  clear_has_bet_pos();
}
inline ::google::protobuf::int32 packetc2l_ask_bet_info::bet_pos() const {
  return bet_pos_;
}
inline void packetc2l_ask_bet_info::set_bet_pos(::google::protobuf::int32 value) {
  set_has_bet_pos();
  bet_pos_ = value;
}

// optional int64 bet_gold = 3;
inline bool packetc2l_ask_bet_info::has_bet_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_ask_bet_info::set_has_bet_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_ask_bet_info::clear_has_bet_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_ask_bet_info::clear_bet_gold() {
  bet_gold_ = GOOGLE_LONGLONG(0);
  clear_has_bet_gold();
}
inline ::google::protobuf::int64 packetc2l_ask_bet_info::bet_gold() const {
  return bet_gold_;
}
inline void packetc2l_ask_bet_info::set_bet_gold(::google::protobuf::int64 value) {
  set_has_bet_gold();
  bet_gold_ = value;
}

// optional int32 chip_index = 4;
inline bool packetc2l_ask_bet_info::has_chip_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetc2l_ask_bet_info::set_has_chip_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetc2l_ask_bet_info::clear_has_chip_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetc2l_ask_bet_info::clear_chip_index() {
  chip_index_ = 0;
  clear_has_chip_index();
}
inline ::google::protobuf::int32 packetc2l_ask_bet_info::chip_index() const {
  return chip_index_;
}
inline void packetc2l_ask_bet_info::set_chip_index(::google::protobuf::int32 value) {
  set_has_chip_index();
  chip_index_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bet_info_result

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_info_result];
inline bool packetl2c_bet_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bet_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bet_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bet_info_result::clear_packet_id() {
  packet_id_ = 15011;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetl2c_bet_info_result::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bet_info_result::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_bet_info_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bet_info_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bet_info_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bet_info_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_bet_info_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_bet_info_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional .game_rouletteak_protocols.msg_bet_info bet_info = 3;
inline bool packetl2c_bet_info_result::has_bet_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bet_info_result::set_has_bet_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bet_info_result::clear_has_bet_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bet_info_result::clear_bet_info() {
  if (bet_info_ != NULL) bet_info_->::game_rouletteak_protocols::msg_bet_info::Clear();
  clear_has_bet_info();
}
inline const ::game_rouletteak_protocols::msg_bet_info& packetl2c_bet_info_result::bet_info() const {
  return bet_info_ != NULL ? *bet_info_ : *default_instance_->bet_info_;
}
inline ::game_rouletteak_protocols::msg_bet_info* packetl2c_bet_info_result::mutable_bet_info() {
  set_has_bet_info();
  if (bet_info_ == NULL) bet_info_ = new ::game_rouletteak_protocols::msg_bet_info;
  return bet_info_;
}
inline ::game_rouletteak_protocols::msg_bet_info* packetl2c_bet_info_result::release_bet_info() {
  clear_has_bet_info();
  ::game_rouletteak_protocols::msg_bet_info* temp = bet_info_;
  bet_info_ = NULL;
  return temp;
}
inline void packetl2c_bet_info_result::set_allocated_bet_info(::game_rouletteak_protocols::msg_bet_info* bet_info) {
  delete bet_info_;
  bet_info_ = bet_info;
  if (bet_info) {
    set_has_bet_info();
  } else {
    clear_has_bet_info();
  }
}

// -------------------------------------------------------------------

// packetl2c_enter_player_info

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_player_info];
inline bool packetl2c_enter_player_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_enter_player_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_enter_player_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_enter_player_info::clear_packet_id() {
  packet_id_ = 15055;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetl2c_enter_player_info::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_enter_player_info::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_rouletteak_protocols.msg_player_info player_info = 2;
inline bool packetl2c_enter_player_info::has_player_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_enter_player_info::set_has_player_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_enter_player_info::clear_has_player_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_enter_player_info::clear_player_info() {
  if (player_info_ != NULL) player_info_->::game_rouletteak_protocols::msg_player_info::Clear();
  clear_has_player_info();
}
inline const ::game_rouletteak_protocols::msg_player_info& packetl2c_enter_player_info::player_info() const {
  return player_info_ != NULL ? *player_info_ : *default_instance_->player_info_;
}
inline ::game_rouletteak_protocols::msg_player_info* packetl2c_enter_player_info::mutable_player_info() {
  set_has_player_info();
  if (player_info_ == NULL) player_info_ = new ::game_rouletteak_protocols::msg_player_info;
  return player_info_;
}
inline ::game_rouletteak_protocols::msg_player_info* packetl2c_enter_player_info::release_player_info() {
  clear_has_player_info();
  ::game_rouletteak_protocols::msg_player_info* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
inline void packetl2c_enter_player_info::set_allocated_player_info(::game_rouletteak_protocols::msg_player_info* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    set_has_player_info();
  } else {
    clear_has_player_info();
  }
}

// -------------------------------------------------------------------

// packetl2c_leave_player_info

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_player_info];
inline bool packetl2c_leave_player_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_leave_player_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_leave_player_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_leave_player_info::clear_packet_id() {
  packet_id_ = 15056;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetl2c_leave_player_info::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_leave_player_info::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_leave_player_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_leave_player_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_leave_player_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_leave_player_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_leave_player_info::player_id() const {
  return player_id_;
}
inline void packetl2c_leave_player_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_change_attr

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
inline bool packetl2c_bc_change_attr::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_change_attr::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_change_attr::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_change_attr::clear_packet_id() {
  packet_id_ = 15066;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetl2c_bc_change_attr::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_change_attr::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_bc_change_attr::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_change_attr::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_change_attr::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_change_attr::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_change_attr::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_change_attr::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 item_type = 3;
inline bool packetl2c_bc_change_attr::has_item_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_change_attr::set_has_item_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_change_attr::clear_has_item_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_change_attr::clear_item_type() {
  item_type_ = 0;
  clear_has_item_type();
}
inline ::google::protobuf::int32 packetl2c_bc_change_attr::item_type() const {
  return item_type_;
}
inline void packetl2c_bc_change_attr::set_item_type(::google::protobuf::int32 value) {
  set_has_item_type();
  item_type_ = value;
}

// optional int64 change_value = 4;
inline bool packetl2c_bc_change_attr::has_change_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_bc_change_attr::set_has_change_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_bc_change_attr::clear_has_change_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_bc_change_attr::clear_change_value() {
  change_value_ = GOOGLE_LONGLONG(0);
  clear_has_change_value();
}
inline ::google::protobuf::int64 packetl2c_bc_change_attr::change_value() const {
  return change_value_;
}
inline void packetl2c_bc_change_attr::set_change_value(::google::protobuf::int64 value) {
  set_has_change_value();
  change_value_ = value;
}

// -------------------------------------------------------------------

// packetc2l_supply_chip

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_supply_chip];
inline bool packetc2l_supply_chip::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_supply_chip::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_supply_chip::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_supply_chip::clear_packet_id() {
  packet_id_ = 10020;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetc2l_supply_chip::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_supply_chip::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_supply_chip_result

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_supply_chip_result];
inline bool packetl2c_supply_chip_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_supply_chip_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_supply_chip_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_supply_chip_result::clear_packet_id() {
  packet_id_ = 15067;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetl2c_supply_chip_result::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_supply_chip_result::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_supply_chip_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_supply_chip_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_supply_chip_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_supply_chip_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_supply_chip_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_supply_chip_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int64 gold = 6;
inline bool packetl2c_supply_chip_result::has_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_supply_chip_result::set_has_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_supply_chip_result::clear_has_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_supply_chip_result::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 packetl2c_supply_chip_result::gold() const {
  return gold_;
}
inline void packetl2c_supply_chip_result::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// -------------------------------------------------------------------

// packetc2l_check_state

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
inline bool packetc2l_check_state::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_check_state::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_check_state::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_check_state::clear_packet_id() {
  packet_id_ = 10021;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetc2l_check_state::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_check_state::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_check_state_result

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
inline bool packetc2l_check_state_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_check_state_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_check_state_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_check_state_result::clear_packet_id() {
  packet_id_ = 15068;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetc2l_check_state_result::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_check_state_result::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 room_id = 2;
inline bool packetc2l_check_state_result::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_check_state_result::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_check_state_result::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_check_state_result::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetc2l_check_state_result::room_id() const {
  return room_id_;
}
inline void packetc2l_check_state_result::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// -------------------------------------------------------------------

// msg_room_history

// optional int32 room_id = 1;
inline bool msg_room_history::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_room_history::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_room_history::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_room_history::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 msg_room_history::room_id() const {
  return room_id_;
}
inline void msg_room_history::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional int32 state = 2;
inline bool msg_room_history::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_room_history::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_room_history::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_room_history::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 msg_room_history::state() const {
  return state_;
}
inline void msg_room_history::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 cd = 3;
inline bool msg_room_history::has_cd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_room_history::set_has_cd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_room_history::clear_has_cd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_room_history::clear_cd() {
  cd_ = 0;
  clear_has_cd();
}
inline ::google::protobuf::int32 msg_room_history::cd() const {
  return cd_;
}
inline void msg_room_history::set_cd(::google::protobuf::int32 value) {
  set_has_cd();
  cd_ = value;
}

// repeated int32 pos_list = 4;
inline int msg_room_history::pos_list_size() const {
  return pos_list_.size();
}
inline void msg_room_history::clear_pos_list() {
  pos_list_.Clear();
}
inline ::google::protobuf::int32 msg_room_history::pos_list(int index) const {
  return pos_list_.Get(index);
}
inline void msg_room_history::set_pos_list(int index, ::google::protobuf::int32 value) {
  pos_list_.Set(index, value);
}
inline void msg_room_history::add_pos_list(::google::protobuf::int32 value) {
  pos_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_room_history::pos_list() const {
  return pos_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_room_history::mutable_pos_list() {
  return &pos_list_;
}

// -------------------------------------------------------------------

// packetc2l_room_history_list

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_room_history_list];
inline bool packetc2l_room_history_list::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_room_history_list::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_room_history_list::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_room_history_list::clear_packet_id() {
  packet_id_ = 10017;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetc2l_room_history_list::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_room_history_list::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_room_history_list_result

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_room_history_list_result];
inline bool packetl2c_room_history_list_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_room_history_list_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_room_history_list_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_room_history_list_result::clear_packet_id() {
  packet_id_ = 15061;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetl2c_room_history_list_result::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_room_history_list_result::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_rouletteak_protocols.msg_room_history history_list = 2;
inline int packetl2c_room_history_list_result::history_list_size() const {
  return history_list_.size();
}
inline void packetl2c_room_history_list_result::clear_history_list() {
  history_list_.Clear();
}
inline const ::game_rouletteak_protocols::msg_room_history& packetl2c_room_history_list_result::history_list(int index) const {
  return history_list_.Get(index);
}
inline ::game_rouletteak_protocols::msg_room_history* packetl2c_room_history_list_result::mutable_history_list(int index) {
  return history_list_.Mutable(index);
}
inline ::game_rouletteak_protocols::msg_room_history* packetl2c_room_history_list_result::add_history_list() {
  return history_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_room_history >&
packetl2c_room_history_list_result::history_list() const {
  return history_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_room_history >*
packetl2c_room_history_list_result::mutable_history_list() {
  return &history_list_;
}

// -------------------------------------------------------------------

// packetl2c_notify_history

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notify_history];
inline bool packetl2c_notify_history::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notify_history::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notify_history::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notify_history::clear_packet_id() {
  packet_id_ = 15062;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetl2c_notify_history::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notify_history::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 room_id = 2;
inline bool packetl2c_notify_history::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notify_history::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notify_history::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notify_history::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetl2c_notify_history::room_id() const {
  return room_id_;
}
inline void packetl2c_notify_history::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional int32 state = 3;
inline bool packetl2c_notify_history::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notify_history::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notify_history::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notify_history::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 packetl2c_notify_history::state() const {
  return state_;
}
inline void packetl2c_notify_history::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 cd = 4;
inline bool packetl2c_notify_history::has_cd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_notify_history::set_has_cd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_notify_history::clear_has_cd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_notify_history::clear_cd() {
  cd_ = 0;
  clear_has_cd();
}
inline ::google::protobuf::int32 packetl2c_notify_history::cd() const {
  return cd_;
}
inline void packetl2c_notify_history::set_cd(::google::protobuf::int32 value) {
  set_has_cd();
  cd_ = value;
}

// optional int32 pos = 5;
inline bool packetl2c_notify_history::has_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_notify_history::set_has_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_notify_history::clear_has_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_notify_history::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 packetl2c_notify_history::pos() const {
  return pos_;
}
inline void packetl2c_notify_history::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// packetc2l_continue_bet

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_continue_bet];
inline bool packetc2l_continue_bet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_continue_bet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_continue_bet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_continue_bet::clear_packet_id() {
  packet_id_ = 10012;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetc2l_continue_bet::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_continue_bet::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_continue_bet_result

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_continue_bet_result];
inline bool packetl2c_continue_bet_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_continue_bet_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_continue_bet_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_continue_bet_result::clear_packet_id() {
  packet_id_ = 15012;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetl2c_continue_bet_result::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_continue_bet_result::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_continue_bet_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_continue_bet_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_continue_bet_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_continue_bet_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_continue_bet_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_continue_bet_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int64 cur_gold = 3;
inline bool packetl2c_continue_bet_result::has_cur_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_continue_bet_result::set_has_cur_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_continue_bet_result::clear_has_cur_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_continue_bet_result::clear_cur_gold() {
  cur_gold_ = GOOGLE_LONGLONG(0);
  clear_has_cur_gold();
}
inline ::google::protobuf::int64 packetl2c_continue_bet_result::cur_gold() const {
  return cur_gold_;
}
inline void packetl2c_continue_bet_result::set_cur_gold(::google::protobuf::int64 value) {
  set_has_cur_gold();
  cur_gold_ = value;
}

// repeated .game_rouletteak_protocols.msg_bet_info bet_list = 4;
inline int packetl2c_continue_bet_result::bet_list_size() const {
  return bet_list_.size();
}
inline void packetl2c_continue_bet_result::clear_bet_list() {
  bet_list_.Clear();
}
inline const ::game_rouletteak_protocols::msg_bet_info& packetl2c_continue_bet_result::bet_list(int index) const {
  return bet_list_.Get(index);
}
inline ::game_rouletteak_protocols::msg_bet_info* packetl2c_continue_bet_result::mutable_bet_list(int index) {
  return bet_list_.Mutable(index);
}
inline ::game_rouletteak_protocols::msg_bet_info* packetl2c_continue_bet_result::add_bet_list() {
  return bet_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_bet_info >&
packetl2c_continue_bet_result::bet_list() const {
  return bet_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::msg_bet_info >*
packetl2c_continue_bet_result::mutable_bet_list() {
  return &bet_list_;
}

// -------------------------------------------------------------------

// packetc2l_cancel_bet

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_cancel_bet];
inline bool packetc2l_cancel_bet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_cancel_bet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_cancel_bet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_cancel_bet::clear_packet_id() {
  packet_id_ = 10022;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetc2l_cancel_bet::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_cancel_bet::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 bet_pos = 2 [default = -1];
inline bool packetc2l_cancel_bet::has_bet_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_cancel_bet::set_has_bet_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_cancel_bet::clear_has_bet_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_cancel_bet::clear_bet_pos() {
  bet_pos_ = -1;
  clear_has_bet_pos();
}
inline ::google::protobuf::int32 packetc2l_cancel_bet::bet_pos() const {
  return bet_pos_;
}
inline void packetc2l_cancel_bet::set_bet_pos(::google::protobuf::int32 value) {
  set_has_bet_pos();
  bet_pos_ = value;
}

// -------------------------------------------------------------------

// packetl2c_cancel_bet_result

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_cancel_bet_result];
inline bool packetl2c_cancel_bet_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_cancel_bet_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_cancel_bet_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_cancel_bet_result::clear_packet_id() {
  packet_id_ = 15069;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetl2c_cancel_bet_result::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_cancel_bet_result::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_cancel_bet_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_cancel_bet_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_cancel_bet_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_cancel_bet_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_cancel_bet_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_cancel_bet_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 player_id = 3;
inline bool packetl2c_cancel_bet_result::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_cancel_bet_result::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_cancel_bet_result::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_cancel_bet_result::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_cancel_bet_result::player_id() const {
  return player_id_;
}
inline void packetl2c_cancel_bet_result::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int64 cur_gold = 4;
inline bool packetl2c_cancel_bet_result::has_cur_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_cancel_bet_result::set_has_cur_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_cancel_bet_result::clear_has_cur_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_cancel_bet_result::clear_cur_gold() {
  cur_gold_ = GOOGLE_LONGLONG(0);
  clear_has_cur_gold();
}
inline ::google::protobuf::int64 packetl2c_cancel_bet_result::cur_gold() const {
  return cur_gold_;
}
inline void packetl2c_cancel_bet_result::set_cur_gold(::google::protobuf::int64 value) {
  set_has_cur_gold();
  cur_gold_ = value;
}

// optional int32 bet_pos = 5;
inline bool packetl2c_cancel_bet_result::has_bet_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_cancel_bet_result::set_has_bet_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_cancel_bet_result::clear_has_bet_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_cancel_bet_result::clear_bet_pos() {
  bet_pos_ = 0;
  clear_has_bet_pos();
}
inline ::google::protobuf::int32 packetl2c_cancel_bet_result::bet_pos() const {
  return bet_pos_;
}
inline void packetl2c_cancel_bet_result::set_bet_pos(::google::protobuf::int32 value) {
  set_has_bet_pos();
  bet_pos_ = value;
}

// optional int64 change_gold = 6;
inline bool packetl2c_cancel_bet_result::has_change_gold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_cancel_bet_result::set_has_change_gold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_cancel_bet_result::clear_has_change_gold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_cancel_bet_result::clear_change_gold() {
  change_gold_ = GOOGLE_LONGLONG(0);
  clear_has_change_gold();
}
inline ::google::protobuf::int64 packetl2c_cancel_bet_result::change_gold() const {
  return change_gold_;
}
inline void packetl2c_cancel_bet_result::set_change_gold(::google::protobuf::int64 value) {
  set_has_change_gold();
  change_gold_ = value;
}

// -------------------------------------------------------------------

// room_player

// optional int32 player_id = 1;
inline bool room_player::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void room_player::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void room_player::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void room_player::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 room_player::player_id() const {
  return player_id_;
}
inline void room_player::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int64 gold = 2;
inline bool room_player::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void room_player::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void room_player::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void room_player::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 room_player::gold() const {
  return gold_;
}
inline void room_player::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional int64 profit_today = 3;
inline bool room_player::has_profit_today() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void room_player::set_has_profit_today() {
  _has_bits_[0] |= 0x00000004u;
}
inline void room_player::clear_has_profit_today() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void room_player::clear_profit_today() {
  profit_today_ = GOOGLE_LONGLONG(0);
  clear_has_profit_today();
}
inline ::google::protobuf::int64 room_player::profit_today() const {
  return profit_today_;
}
inline void room_player::set_profit_today(::google::protobuf::int64 value) {
  set_has_profit_today();
  profit_today_ = value;
}

// -------------------------------------------------------------------

// packetl2c_gm_get_room_info

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_get_room_info];
inline bool packetl2c_gm_get_room_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_gm_get_room_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_gm_get_room_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_gm_get_room_info::clear_packet_id() {
  packet_id_ = 10101;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetl2c_gm_get_room_info::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_gm_get_room_info::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_gm_get_room_info_result

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_get_room_info_result];
inline bool packetl2c_gm_get_room_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_gm_get_room_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_gm_get_room_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_gm_get_room_info_result::clear_packet_id() {
  packet_id_ = 15101;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetl2c_gm_get_room_info_result::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_gm_get_room_info_result::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 result = 2;
inline bool packetl2c_gm_get_room_info_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_gm_get_room_info_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_gm_get_room_info_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_gm_get_room_info_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetl2c_gm_get_room_info_result::result() const {
  return result_;
}
inline void packetl2c_gm_get_room_info_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 bead_num = 3 [default = -1];
inline bool packetl2c_gm_get_room_info_result::has_bead_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_gm_get_room_info_result::set_has_bead_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_gm_get_room_info_result::clear_has_bead_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_gm_get_room_info_result::clear_bead_num() {
  bead_num_ = -1;
  clear_has_bead_num();
}
inline ::google::protobuf::int32 packetl2c_gm_get_room_info_result::bead_num() const {
  return bead_num_;
}
inline void packetl2c_gm_get_room_info_result::set_bead_num(::google::protobuf::int32 value) {
  set_has_bead_num();
  bead_num_ = value;
}

// repeated .game_rouletteak_protocols.room_player players = 4;
inline int packetl2c_gm_get_room_info_result::players_size() const {
  return players_.size();
}
inline void packetl2c_gm_get_room_info_result::clear_players() {
  players_.Clear();
}
inline const ::game_rouletteak_protocols::room_player& packetl2c_gm_get_room_info_result::players(int index) const {
  return players_.Get(index);
}
inline ::game_rouletteak_protocols::room_player* packetl2c_gm_get_room_info_result::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::game_rouletteak_protocols::room_player* packetl2c_gm_get_room_info_result::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::room_player >&
packetl2c_gm_get_room_info_result::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_rouletteak_protocols::room_player >*
packetl2c_gm_get_room_info_result::mutable_players() {
  return &players_;
}

// optional int64 stock = 5;
inline bool packetl2c_gm_get_room_info_result::has_stock() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_gm_get_room_info_result::set_has_stock() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_gm_get_room_info_result::clear_has_stock() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_gm_get_room_info_result::clear_stock() {
  stock_ = GOOGLE_LONGLONG(0);
  clear_has_stock();
}
inline ::google::protobuf::int64 packetl2c_gm_get_room_info_result::stock() const {
  return stock_;
}
inline void packetl2c_gm_get_room_info_result::set_stock(::google::protobuf::int64 value) {
  set_has_stock();
  stock_ = value;
}

// optional int64 water = 6;
inline bool packetl2c_gm_get_room_info_result::has_water() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_gm_get_room_info_result::set_has_water() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_gm_get_room_info_result::clear_has_water() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_gm_get_room_info_result::clear_water() {
  water_ = GOOGLE_LONGLONG(0);
  clear_has_water();
}
inline ::google::protobuf::int64 packetl2c_gm_get_room_info_result::water() const {
  return water_;
}
inline void packetl2c_gm_get_room_info_result::set_water(::google::protobuf::int64 value) {
  set_has_water();
  water_ = value;
}

// optional int32 kill = 7;
inline bool packetl2c_gm_get_room_info_result::has_kill() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetl2c_gm_get_room_info_result::set_has_kill() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetl2c_gm_get_room_info_result::clear_has_kill() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetl2c_gm_get_room_info_result::clear_kill() {
  kill_ = 0;
  clear_has_kill();
}
inline ::google::protobuf::int32 packetl2c_gm_get_room_info_result::kill() const {
  return kill_;
}
inline void packetl2c_gm_get_room_info_result::set_kill(::google::protobuf::int32 value) {
  set_has_kill();
  kill_ = value;
}

// -------------------------------------------------------------------

// packetl2c_gm_set_bead

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_set_bead];
inline bool packetl2c_gm_set_bead::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_gm_set_bead::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_gm_set_bead::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_gm_set_bead::clear_packet_id() {
  packet_id_ = 10102;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetl2c_gm_set_bead::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_gm_set_bead::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 bead_num = 2;
inline bool packetl2c_gm_set_bead::has_bead_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_gm_set_bead::set_has_bead_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_gm_set_bead::clear_has_bead_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_gm_set_bead::clear_bead_num() {
  bead_num_ = 0;
  clear_has_bead_num();
}
inline ::google::protobuf::int32 packetl2c_gm_set_bead::bead_num() const {
  return bead_num_;
}
inline void packetl2c_gm_set_bead::set_bead_num(::google::protobuf::int32 value) {
  set_has_bead_num();
  bead_num_ = value;
}

// optional int32 kill = 3;
inline bool packetl2c_gm_set_bead::has_kill() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_gm_set_bead::set_has_kill() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_gm_set_bead::clear_has_kill() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_gm_set_bead::clear_kill() {
  kill_ = 0;
  clear_has_kill();
}
inline ::google::protobuf::int32 packetl2c_gm_set_bead::kill() const {
  return kill_;
}
inline void packetl2c_gm_set_bead::set_kill(::google::protobuf::int32 value) {
  set_has_kill();
  kill_ = value;
}

// -------------------------------------------------------------------

// packetl2c_gm_set_bead_result

// optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_set_bead_result];
inline bool packetl2c_gm_set_bead_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_gm_set_bead_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_gm_set_bead_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_gm_set_bead_result::clear_packet_id() {
  packet_id_ = 15102;
  clear_has_packet_id();
}
inline ::game_rouletteak_protocols::e_server_msg_type packetl2c_gm_set_bead_result::packet_id() const {
  return static_cast< ::game_rouletteak_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_gm_set_bead_result::set_packet_id(::game_rouletteak_protocols::e_server_msg_type value) {
  assert(::game_rouletteak_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 result = 2;
inline bool packetl2c_gm_set_bead_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_gm_set_bead_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_gm_set_bead_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_gm_set_bead_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetl2c_gm_set_bead_result::result() const {
  return result_;
}
inline void packetl2c_gm_set_bead_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 bead_num = 3;
inline bool packetl2c_gm_set_bead_result::has_bead_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_gm_set_bead_result::set_has_bead_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_gm_set_bead_result::clear_has_bead_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_gm_set_bead_result::clear_bead_num() {
  bead_num_ = 0;
  clear_has_bead_num();
}
inline ::google::protobuf::int32 packetl2c_gm_set_bead_result::bead_num() const {
  return bead_num_;
}
inline void packetl2c_gm_set_bead_result::set_bead_num(::google::protobuf::int32 value) {
  set_has_bead_num();
  bead_num_ = value;
}

// optional int32 kill = 4;
inline bool packetl2c_gm_set_bead_result::has_kill() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_gm_set_bead_result::set_has_kill() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_gm_set_bead_result::clear_has_kill() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_gm_set_bead_result::clear_kill() {
  kill_ = 0;
  clear_has_kill();
}
inline ::google::protobuf::int32 packetl2c_gm_set_bead_result::kill() const {
  return kill_;
}
inline void packetl2c_gm_set_bead_result::set_kill(::google::protobuf::int32 value) {
  set_has_kill();
  kill_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_rouletteak_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5frouletteak_5fprotocol_2eproto__INCLUDED
